namespace Aardvark.Rendering.Vulkan

#nowarn "1337"
#nowarn "49"

open System
open System.Runtime.InteropServices
open System.Runtime.CompilerServices
open Microsoft.FSharp.NativeInterop
open System.Security
open Aardvark.Base
open Aardvark.Rendering.Vulkan

#nowarn "9"
#nowarn "51"

[<AutoOpen>]
module Constants =

    [<Literal>]
    let VkAttachmentUnused = 4294967295u

    [<Literal>]
    let VkFalse = 0

    [<Literal>]
    let VkLodClampNone = 1000.00000000f

    [<Literal>]
    let VkLuidSize = 8

    [<Literal>]
    let VkMaxDescriptionSize = 256

    [<Literal>]
    let VkMaxDeviceGroupSize = 32

    [<Literal>]
    let VkMaxDriverInfoSize = 256

    [<Literal>]
    let VkMaxDriverNameSize = 256

    [<Literal>]
    let VkMaxExtensionNameSize = 256

    [<Literal>]
    let VkMaxGlobalPrioritySize = 16

    [<Literal>]
    let VkMaxMemoryHeaps = 16

    [<Literal>]
    let VkMaxMemoryTypes = 32

    [<Literal>]
    let VkMaxPhysicalDeviceNameSize = 256

    [<Literal>]
    let VkMaxPipelineBinaryKeySizeKhr = 32

    [<Literal>]
    let VkMaxShaderModuleIdentifierSizeExt = 32

    [<Literal>]
    let VkMaxVideoAv1ReferencesPerFrameKhr = 7

    [<Literal>]
    let VkPartitionedAccelerationStructurePartitionIndexGlobalNv = 4294967295u

    [<Literal>]
    let VkQueueFamilyExternal = 4294967294u

    [<Literal>]
    let VkQueueFamilyForeignExt = 4294967293u

    [<Literal>]
    let VkQueueFamilyIgnored = 4294967295u

    [<Literal>]
    let VkRemaining3dSlicesExt = 4294967295u

    [<Literal>]
    let VkRemainingArrayLayers = 4294967295u

    [<Literal>]
    let VkRemainingMipLevels = 4294967295u

    [<Literal>]
    let VkShaderIndexUnusedAmdx = 4294967295u

    [<Literal>]
    let VkShaderUnusedKhr = 4294967295u

    [<Literal>]
    let VkSubpassExternal = 4294967295u

    [<Literal>]
    let VkTrue = 1

    [<Literal>]
    let VkUuidSize = 16

    [<Literal>]
    let VkWholeSize = 18446744073709551615UL


[<Flags>]
type VkQueryPoolCreateFlags = | None = 0

[<Flags>]
type VkPipelineDynamicStateCreateFlags = | None = 0

[<Flags>]
type VkPipelineMultisampleStateCreateFlags = | None = 0

[<Flags>]
type VkPipelineRasterizationStateCreateFlags = | None = 0

[<Flags>]
type VkPipelineViewportStateCreateFlags = | None = 0

[<Flags>]
type VkPipelineTessellationStateCreateFlags = | None = 0

[<Flags>]
type VkPipelineInputAssemblyStateCreateFlags = | None = 0

[<Flags>]
type VkPipelineVertexInputStateCreateFlags = | None = 0

[<Flags>]
type VkBufferViewCreateFlags = | None = 0

[<Flags>]
type VkDeviceCreateFlags = | None = 0

[<Flags>]
type VkDescriptorPoolResetFlags = | None = 0

[<Flags>]
type VkDescriptorUpdateTemplateCreateFlags = | None = 0

[<Flags>]
type VkAccelerationStructureMotionInfoFlagsNV = | None = 0

[<Flags>]
type VkAccelerationStructureMotionInstanceFlagsNV = | None = 0

[<Flags>]
type VkDirectDriverLoadingFlagsLUNARG = | None = 0

[<Flags>]
type VkDisplayModeCreateFlagsKHR = | None = 0

[<Flags>]
type VkDisplaySurfaceCreateFlagsKHR = | None = 0

[<Flags>]
type VkAndroidSurfaceCreateFlagsKHR = | None = 0

[<Flags>]
type VkViSurfaceCreateFlagsNN = | None = 0

[<Flags>]
type VkWin32SurfaceCreateFlagsKHR = | None = 0

[<Flags>]
type VkXlibSurfaceCreateFlagsKHR = | None = 0

[<Flags>]
type VkXcbSurfaceCreateFlagsKHR = | None = 0

[<Flags>]
type VkDirectFBSurfaceCreateFlagsEXT = | None = 0

[<Flags>]
type VkIOSSurfaceCreateFlagsMVK = | None = 0

[<Flags>]
type VkMacOSSurfaceCreateFlagsMVK = | None = 0

[<Flags>]
type VkMetalSurfaceCreateFlagsEXT = | None = 0

[<Flags>]
type VkImagePipeSurfaceCreateFlagsFUCHSIA = | None = 0

[<Flags>]
type VkStreamDescriptorSurfaceCreateFlagsGGP = | None = 0

[<Flags>]
type VkHeadlessSurfaceCreateFlagsEXT = | None = 0

[<Flags>]
type VkScreenSurfaceCreateFlagsQNX = | None = 0

[<Flags>]
type VkCommandPoolTrimFlags = | None = 0

[<Flags>]
type VkPipelineViewportSwizzleStateCreateFlagsNV = | None = 0

[<Flags>]
type VkPipelineDiscardRectangleStateCreateFlagsEXT = | None = 0

[<Flags>]
type VkPipelineCoverageToColorStateCreateFlagsNV = | None = 0

[<Flags>]
type VkPipelineCoverageModulationStateCreateFlagsNV = | None = 0

[<Flags>]
type VkPipelineCoverageReductionStateCreateFlagsNV = | None = 0

[<Flags>]
type VkValidationCacheCreateFlagsEXT = | None = 0

[<Flags>]
type VkDebugUtilsMessengerCreateFlagsEXT = | None = 0

[<Flags>]
type VkDebugUtilsMessengerCallbackDataFlagsEXT = | None = 0

[<Flags>]
type VkDeviceMemoryReportFlagsEXT = | None = 0

[<Flags>]
type VkPipelineRasterizationConservativeStateCreateFlagsEXT = | None = 0

[<Flags>]
type VkPipelineRasterizationStateStreamCreateFlagsEXT = | None = 0

[<Flags>]
type VkPipelineRasterizationDepthClipStateCreateFlagsEXT = | None = 0

[<Flags>]
type VkVideoBeginCodingFlagsKHR = | None = 0

[<Flags>]
type VkVideoEndCodingFlagsKHR = | None = 0

[<Flags>]
type VkVideoDecodeFlagsKHR = | None = 0

[<Flags>]
type VkVideoEncodeRateControlFlagsKHR = | None = 0

/// Array of 32 uint32 values.
[<StructLayout(LayoutKind.Explicit, Size = 128)>]
type uint32_32 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : uint32

        member x.Item
            with get (i : int) : uint32 =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : uint32) =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 32

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<uint32> with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator()
    end

/// Array of 7 int32 values.
[<StructLayout(LayoutKind.Explicit, Size = 28)>]
type int32_7 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : int32

        member x.Item
            with get (i : int) : int32 =
                if i < 0 || i > 6 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : int32) =
                if i < 0 || i > 6 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 7

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 7 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<int32> with
            member x.GetEnumerator() = let x = x in (Seq.init 7 (fun i -> x.[i])).GetEnumerator()
    end

/// Array of 32 byte values.
[<StructLayout(LayoutKind.Explicit, Size = 32)>]
type byte_32 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : byte

        member x.Item
            with get (i : int) : byte =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : byte) =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 32

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<byte> with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator()
    end

/// Array of 8 byte values.
[<StructLayout(LayoutKind.Explicit, Size = 8)>]
type byte_8 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : byte

        member x.Item
            with get (i : int) : byte =
                if i < 0 || i > 7 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : byte) =
                if i < 0 || i > 7 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 8

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 8 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<byte> with
            member x.GetEnumerator() = let x = x in (Seq.init 8 (fun i -> x.[i])).GetEnumerator()
    end

/// Array of 6 float32 values.
[<StructLayout(LayoutKind.Explicit, Size = 24)>]
type float32_6 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : float32

        member x.Item
            with get (i : int) : float32 =
                if i < 0 || i > 5 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : float32) =
                if i < 0 || i > 5 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 6

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 6 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<float32> with
            member x.GetEnumerator() = let x = x in (Seq.init 6 (fun i -> x.[i])).GetEnumerator()
    end

type PFN_vkAllocationFunction = nativeint
type PFN_vkFreeFunction = nativeint
type PFN_vkInternalAllocationNotification = nativeint
type PFN_vkInternalFreeNotification = nativeint
type PFN_vkReallocationFunction = nativeint
type PFN_vkVoidFunction = nativeint

type VkInstance = nativeint
type VkPhysicalDevice = nativeint
type VkDevice = nativeint
type VkQueue = nativeint

[<StructLayout(LayoutKind.Sequential)>]
type VkDeviceMemory =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkDeviceMemory(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkFence =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkFence(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSemaphore =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkSemaphore(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkEvent =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkEvent(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkQueryPool =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkQueryPool(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBuffer =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkBuffer(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBufferView =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkBufferView(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImage =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkImage(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageView =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkImageView(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkShaderModule =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkShaderModule(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineCache =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkPipelineCache(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipeline =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkPipeline(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineLayout =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkPipelineLayout(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSampler =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkSampler(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorPool =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkDescriptorPool(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorSet =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkDescriptorSet(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorSetLayout =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkDescriptorSetLayout(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkFramebuffer =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkFramebuffer(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkRenderPass =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkRenderPass(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkCommandPool =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkCommandPool(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end
type VkCommandBuffer = nativeint

/// Array of 32 VkPhysicalDevice values.
[<StructLayout(LayoutKind.Explicit, Size = 256)>]
type VkPhysicalDevice_32 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : VkPhysicalDevice

        member x.Item
            with get (i : int) : VkPhysicalDevice =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : VkPhysicalDevice) =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 32

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<VkPhysicalDevice> with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator()
    end

type VkBool32 = uint32
type VkDeviceAddress = uint64
type VkDeviceSize = uint64
type VkFlags = uint32
type VkSampleMask = uint32

/// Array of 16 VkDeviceSize values.
[<StructLayout(LayoutKind.Explicit, Size = 128)>]
type VkDeviceSize_16 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : VkDeviceSize

        member x.Item
            with get (i : int) : VkDeviceSize =
                if i < 0 || i > 15 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : VkDeviceSize) =
                if i < 0 || i > 15 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 16

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 16 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<VkDeviceSize> with
            member x.GetEnumerator() = let x = x in (Seq.init 16 (fun i -> x.[i])).GetEnumerator()
    end

type VkResult =
    /// Command completed successfully
    | Success = 0
    /// A fence or query has not yet completed
    | NotReady = 1
    /// A wait operation has not completed in the specified time
    | Timeout = 2
    /// An event is signaled
    | EventSet = 3
    /// An event is unsignaled
    | EventReset = 4
    /// A return array was too small for the result
    | Incomplete = 5
    /// A host memory allocation has failed
    | ErrorOutOfHostMemory = -1
    /// A device memory allocation has failed
    | ErrorOutOfDeviceMemory = -2
    /// Initialization of an object has failed
    | ErrorInitializationFailed = -3
    /// The logical device has been lost. See <<devsandqueues-lost-device>>
    | ErrorDeviceLost = -4
    /// Mapping of a memory object has failed
    | ErrorMemoryMapFailed = -5
    /// Layer specified does not exist
    | ErrorLayerNotPresent = -6
    /// Extension specified does not exist
    | ErrorExtensionNotPresent = -7
    /// Requested feature is not available on this device
    | ErrorFeatureNotPresent = -8
    /// Unable to find a Vulkan driver
    | ErrorIncompatibleDriver = -9
    /// Too many objects of the type have already been created
    | ErrorTooManyObjects = -10
    /// Requested format is not supported on this device
    | ErrorFormatNotSupported = -11
    /// A requested pool allocation has failed due to fragmentation of the pool's memory
    | ErrorFragmentedPool = -12
    /// An unknown error has occurred, due to an implementation or application bug
    | ErrorUnknown = -13

type VkPipelineCacheHeaderVersion =
    | One = 1

type VkObjectType =
    | Unknown = 0
    | Instance = 1
    | PhysicalDevice = 2
    | Device = 3
    | Queue = 4
    | Semaphore = 5
    | CommandBuffer = 6
    | Fence = 7
    | DeviceMemory = 8
    | Buffer = 9
    | Image = 10
    | Event = 11
    | QueryPool = 12
    | BufferView = 13
    | ImageView = 14
    | ShaderModule = 15
    | PipelineCache = 16
    | PipelineLayout = 17
    | RenderPass = 18
    | Pipeline = 19
    | DescriptorSetLayout = 20
    | Sampler = 21
    | DescriptorPool = 22
    | DescriptorSet = 23
    | Framebuffer = 24
    | CommandPool = 25

type VkVendorId =
    /// Khronos vendor ID
    | Khronos = 65536
    /// Vivante vendor ID
    | Viv = 65537
    /// VeriSilicon vendor ID
    | Vsi = 65538
    /// Kazan Software Renderer
    | Kazan = 65539
    /// Codeplay Software Ltd. vendor ID
    | Codeplay = 65540
    /// Mesa vendor ID
    | Mesa = 65541
    /// PoCL vendor ID
    | Pocl = 65542
    /// Mobileye vendor ID
    | Mobileye = 65543

type VkFormat =
    | Undefined = 0
    | R4g4UnormPack8 = 1
    | R4g4b4a4UnormPack16 = 2
    | B4g4r4a4UnormPack16 = 3
    | R5g6b5UnormPack16 = 4
    | B5g6r5UnormPack16 = 5
    | R5g5b5a1UnormPack16 = 6
    | B5g5r5a1UnormPack16 = 7
    | A1r5g5b5UnormPack16 = 8
    | R8Unorm = 9
    | R8Snorm = 10
    | R8Uscaled = 11
    | R8Sscaled = 12
    | R8Uint = 13
    | R8Sint = 14
    | R8Srgb = 15
    | R8g8Unorm = 16
    | R8g8Snorm = 17
    | R8g8Uscaled = 18
    | R8g8Sscaled = 19
    | R8g8Uint = 20
    | R8g8Sint = 21
    | R8g8Srgb = 22
    | R8g8b8Unorm = 23
    | R8g8b8Snorm = 24
    | R8g8b8Uscaled = 25
    | R8g8b8Sscaled = 26
    | R8g8b8Uint = 27
    | R8g8b8Sint = 28
    | R8g8b8Srgb = 29
    | B8g8r8Unorm = 30
    | B8g8r8Snorm = 31
    | B8g8r8Uscaled = 32
    | B8g8r8Sscaled = 33
    | B8g8r8Uint = 34
    | B8g8r8Sint = 35
    | B8g8r8Srgb = 36
    | R8g8b8a8Unorm = 37
    | R8g8b8a8Snorm = 38
    | R8g8b8a8Uscaled = 39
    | R8g8b8a8Sscaled = 40
    | R8g8b8a8Uint = 41
    | R8g8b8a8Sint = 42
    | R8g8b8a8Srgb = 43
    | B8g8r8a8Unorm = 44
    | B8g8r8a8Snorm = 45
    | B8g8r8a8Uscaled = 46
    | B8g8r8a8Sscaled = 47
    | B8g8r8a8Uint = 48
    | B8g8r8a8Sint = 49
    | B8g8r8a8Srgb = 50
    | A8b8g8r8UnormPack32 = 51
    | A8b8g8r8SnormPack32 = 52
    | A8b8g8r8UscaledPack32 = 53
    | A8b8g8r8SscaledPack32 = 54
    | A8b8g8r8UintPack32 = 55
    | A8b8g8r8SintPack32 = 56
    | A8b8g8r8SrgbPack32 = 57
    | A2r10g10b10UnormPack32 = 58
    | A2r10g10b10SnormPack32 = 59
    | A2r10g10b10UscaledPack32 = 60
    | A2r10g10b10SscaledPack32 = 61
    | A2r10g10b10UintPack32 = 62
    | A2r10g10b10SintPack32 = 63
    | A2b10g10r10UnormPack32 = 64
    | A2b10g10r10SnormPack32 = 65
    | A2b10g10r10UscaledPack32 = 66
    | A2b10g10r10SscaledPack32 = 67
    | A2b10g10r10UintPack32 = 68
    | A2b10g10r10SintPack32 = 69
    | R16Unorm = 70
    | R16Snorm = 71
    | R16Uscaled = 72
    | R16Sscaled = 73
    | R16Uint = 74
    | R16Sint = 75
    | R16Sfloat = 76
    | R16g16Unorm = 77
    | R16g16Snorm = 78
    | R16g16Uscaled = 79
    | R16g16Sscaled = 80
    | R16g16Uint = 81
    | R16g16Sint = 82
    | R16g16Sfloat = 83
    | R16g16b16Unorm = 84
    | R16g16b16Snorm = 85
    | R16g16b16Uscaled = 86
    | R16g16b16Sscaled = 87
    | R16g16b16Uint = 88
    | R16g16b16Sint = 89
    | R16g16b16Sfloat = 90
    | R16g16b16a16Unorm = 91
    | R16g16b16a16Snorm = 92
    | R16g16b16a16Uscaled = 93
    | R16g16b16a16Sscaled = 94
    | R16g16b16a16Uint = 95
    | R16g16b16a16Sint = 96
    | R16g16b16a16Sfloat = 97
    | R32Uint = 98
    | R32Sint = 99
    | R32Sfloat = 100
    | R32g32Uint = 101
    | R32g32Sint = 102
    | R32g32Sfloat = 103
    | R32g32b32Uint = 104
    | R32g32b32Sint = 105
    | R32g32b32Sfloat = 106
    | R32g32b32a32Uint = 107
    | R32g32b32a32Sint = 108
    | R32g32b32a32Sfloat = 109
    | R64Uint = 110
    | R64Sint = 111
    | R64Sfloat = 112
    | R64g64Uint = 113
    | R64g64Sint = 114
    | R64g64Sfloat = 115
    | R64g64b64Uint = 116
    | R64g64b64Sint = 117
    | R64g64b64Sfloat = 118
    | R64g64b64a64Uint = 119
    | R64g64b64a64Sint = 120
    | R64g64b64a64Sfloat = 121
    | B10g11r11UfloatPack32 = 122
    | E5b9g9r9UfloatPack32 = 123
    | D16Unorm = 124
    | X8D24UnormPack32 = 125
    | D32Sfloat = 126
    | S8Uint = 127
    | D16UnormS8Uint = 128
    | D24UnormS8Uint = 129
    | D32SfloatS8Uint = 130
    | Bc1RgbUnormBlock = 131
    | Bc1RgbSrgbBlock = 132
    | Bc1RgbaUnormBlock = 133
    | Bc1RgbaSrgbBlock = 134
    | Bc2UnormBlock = 135
    | Bc2SrgbBlock = 136
    | Bc3UnormBlock = 137
    | Bc3SrgbBlock = 138
    | Bc4UnormBlock = 139
    | Bc4SnormBlock = 140
    | Bc5UnormBlock = 141
    | Bc5SnormBlock = 142
    | Bc6hUfloatBlock = 143
    | Bc6hSfloatBlock = 144
    | Bc7UnormBlock = 145
    | Bc7SrgbBlock = 146
    | Etc2R8g8b8UnormBlock = 147
    | Etc2R8g8b8SrgbBlock = 148
    | Etc2R8g8b8a1UnormBlock = 149
    | Etc2R8g8b8a1SrgbBlock = 150
    | Etc2R8g8b8a8UnormBlock = 151
    | Etc2R8g8b8a8SrgbBlock = 152
    | EacR11UnormBlock = 153
    | EacR11SnormBlock = 154
    | EacR11g11UnormBlock = 155
    | EacR11g11SnormBlock = 156
    | Astc44UnormBlock = 157
    | Astc44SrgbBlock = 158
    | Astc54UnormBlock = 159
    | Astc54SrgbBlock = 160
    | Astc55UnormBlock = 161
    | Astc55SrgbBlock = 162
    | Astc65UnormBlock = 163
    | Astc65SrgbBlock = 164
    | Astc66UnormBlock = 165
    | Astc66SrgbBlock = 166
    | Astc85UnormBlock = 167
    | Astc85SrgbBlock = 168
    | Astc86UnormBlock = 169
    | Astc86SrgbBlock = 170
    | Astc88UnormBlock = 171
    | Astc88SrgbBlock = 172
    | Astc105UnormBlock = 173
    | Astc105SrgbBlock = 174
    | Astc106UnormBlock = 175
    | Astc106SrgbBlock = 176
    | Astc108UnormBlock = 177
    | Astc108SrgbBlock = 178
    | Astc1010UnormBlock = 179
    | Astc1010SrgbBlock = 180
    | Astc1210UnormBlock = 181
    | Astc1210SrgbBlock = 182
    | Astc1212UnormBlock = 183
    | Astc1212SrgbBlock = 184

[<Flags>]
type VkFormatFeatureFlags =
    | All = 8191
    | None = 0
    /// Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
    | SampledImageBit = 0x00000001
    /// Format can be used for storage images (STORAGE_IMAGE descriptor type)
    | StorageImageBit = 0x00000002
    /// Format supports atomic operations in case it is used for storage images
    | StorageImageAtomicBit = 0x00000004
    /// Format can be used for uniform texel buffers (TBOs)
    | UniformTexelBufferBit = 0x00000008
    /// Format can be used for storage texel buffers (IBOs)
    | StorageTexelBufferBit = 0x00000010
    /// Format supports atomic operations in case it is used for storage texel buffers
    | StorageTexelBufferAtomicBit = 0x00000020
    /// Format can be used for vertex buffers (VBOs)
    | VertexBufferBit = 0x00000040
    /// Format can be used for color attachment images
    | ColorAttachmentBit = 0x00000080
    /// Format supports blending in case it is used for color attachment images
    | ColorAttachmentBlendBit = 0x00000100
    /// Format can be used for depth/stencil attachment images
    | DepthStencilAttachmentBit = 0x00000200
    /// Format can be used as the source image of blits with vkCmdBlitImage
    | BlitSrcBit = 0x00000400
    /// Format can be used as the destination image of blits with vkCmdBlitImage
    | BlitDstBit = 0x00000800
    /// Format can be filtered with VK_FILTER_LINEAR when being sampled
    | SampledImageFilterLinearBit = 0x00001000

[<Flags>]
type VkImageCreateFlags =
    | All = 31
    | None = 0
    /// Image should support sparse backing
    | SparseBindingBit = 0x00000001
    /// Image should support sparse backing with partial residency
    | SparseResidencyBit = 0x00000002
    /// Image should support constant data access to physical memory ranges mapped into multiple locations of sparse images
    | SparseAliasedBit = 0x00000004
    /// Allows image views to have different format than the base image
    | MutableFormatBit = 0x00000008
    /// Allows creating image views with cube type from the created image
    | CubeCompatibleBit = 0x00000010

type VkImageTiling =
    | Optimal = 0
    | Linear = 1

type VkImageType =
    | D1d = 0
    | D2d = 1
    | D3d = 2

[<Flags>]
type VkImageUsageFlags =
    | All = 255
    | None = 0
    /// Can be used as a source of transfer operations
    | TransferSrcBit = 0x00000001
    /// Can be used as a destination of transfer operations
    | TransferDstBit = 0x00000002
    /// Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
    | SampledBit = 0x00000004
    /// Can be used as storage image (STORAGE_IMAGE descriptor type)
    | StorageBit = 0x00000008
    /// Can be used as framebuffer color attachment
    | ColorAttachmentBit = 0x00000010
    /// Can be used as framebuffer depth/stencil attachment
    | DepthStencilAttachmentBit = 0x00000020
    /// Image data not needed outside of rendering
    | TransientAttachmentBit = 0x00000040
    /// Can be used as framebuffer input attachment
    | InputAttachmentBit = 0x00000080

[<Flags>]
type VkInstanceCreateFlags =
    | All = 0
    | None = 0

type VkInternalAllocationType =
    | Executable = 0

[<Flags>]
type VkMemoryHeapFlags =
    | All = 1
    | None = 0
    /// If set, heap represents device memory
    | DeviceLocalBit = 0x00000001

[<Flags>]
type VkMemoryPropertyFlags =
    | All = 31
    | None = 0
    /// If otherwise stated, then allocate memory on device
    | DeviceLocalBit = 0x00000001
    /// Memory is mappable by host
    | HostVisibleBit = 0x00000002
    /// Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache
    | HostCoherentBit = 0x00000004
    /// Memory will be cached by the host
    | HostCachedBit = 0x00000008
    /// Memory may be allocated by the driver when it is required
    | LazilyAllocatedBit = 0x00000010

type VkPhysicalDeviceType =
    | Other = 0
    | IntegratedGpu = 1
    | DiscreteGpu = 2
    | VirtualGpu = 3
    | Cpu = 4

[<Flags>]
type VkQueueFlags =
    | All = 15
    | None = 0
    /// Queue supports graphics operations
    | GraphicsBit = 0x00000001
    /// Queue supports compute operations
    | ComputeBit = 0x00000002
    /// Queue supports transfer operations
    | TransferBit = 0x00000004
    /// Queue supports sparse resource memory management operations
    | SparseBindingBit = 0x00000008

[<Flags>]
type VkSampleCountFlags =
    | All = 127
    | None = 0
    /// Sample count 1 supported
    | D1Bit = 0x00000001
    /// Sample count 2 supported
    | D2Bit = 0x00000002
    /// Sample count 4 supported
    | D4Bit = 0x00000004
    /// Sample count 8 supported
    | D8Bit = 0x00000008
    /// Sample count 16 supported
    | D16Bit = 0x00000010
    /// Sample count 32 supported
    | D32Bit = 0x00000020
    /// Sample count 64 supported
    | D64Bit = 0x00000040

type VkSystemAllocationScope =
    | Command = 0
    | Object = 1
    | Cache = 2
    | Device = 3
    | Instance = 4

[<Flags>]
type VkDeviceQueueCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkPipelineStageFlags =
    | All = 131071
    | None = 0
    /// Before subsequent commands are processed
    | TopOfPipeBit = 0x00000001
    /// Draw/DispatchIndirect command fetch
    | DrawIndirectBit = 0x00000002
    /// Vertex/index fetch
    | VertexInputBit = 0x00000004
    /// Vertex shading
    | VertexShaderBit = 0x00000008
    /// Tessellation control shading
    | TessellationControlShaderBit = 0x00000010
    /// Tessellation evaluation shading
    | TessellationEvaluationShaderBit = 0x00000020
    /// Geometry shading
    | GeometryShaderBit = 0x00000040
    /// Fragment shading
    | FragmentShaderBit = 0x00000080
    /// Early fragment (depth and stencil) tests
    | EarlyFragmentTestsBit = 0x00000100
    /// Late fragment (depth and stencil) tests
    | LateFragmentTestsBit = 0x00000200
    /// Color attachment writes
    | ColorAttachmentOutputBit = 0x00000400
    /// Compute shading
    | ComputeShaderBit = 0x00000800
    /// Transfer/copy operations
    | TransferBit = 0x00001000
    /// After previous commands have completed
    | BottomOfPipeBit = 0x00002000
    /// Indicates host (CPU) is a source/sink of the dependency
    | HostBit = 0x00004000
    /// All stages of the graphics pipeline
    | AllGraphicsBit = 0x00008000
    /// All stages supported on the queue
    | AllCommandsBit = 0x00010000

[<Flags>]
type VkMemoryMapFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkImageAspectFlags =
    | All = 15
    | None = 0
    | ColorBit = 0x00000001
    | DepthBit = 0x00000002
    | StencilBit = 0x00000004
    | MetadataBit = 0x00000008

[<Flags>]
type VkSparseImageFormatFlags =
    | All = 7
    | None = 0
    /// Image uses a single mip tail region for all array layers
    | SingleMiptailBit = 0x00000001
    /// Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-tail mip levels.
    | AlignedMipSizeBit = 0x00000002
    /// Image uses a non-standard sparse image block dimensions
    | NonstandardBlockSizeBit = 0x00000004

[<Flags>]
type VkSparseMemoryBindFlags =
    | All = 1
    | None = 0
    /// Operation binds resource metadata to memory
    | MetadataBit = 0x00000001

[<Flags>]
type VkFenceCreateFlags =
    | All = 1
    | None = 0
    | SignaledBit = 0x00000001

[<Flags>]
type VkSemaphoreCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkEventCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkQueryPipelineStatisticFlags =
    | All = 2047
    | None = 0
    | InputAssemblyVerticesBit = 0x00000001
    | InputAssemblyPrimitivesBit = 0x00000002
    | VertexShaderInvocationsBit = 0x00000004
    | GeometryShaderInvocationsBit = 0x00000008
    | GeometryShaderPrimitivesBit = 0x00000010
    | ClippingInvocationsBit = 0x00000020
    | ClippingPrimitivesBit = 0x00000040
    | FragmentShaderInvocationsBit = 0x00000080
    | TessellationControlShaderPatchesBit = 0x00000100
    | TessellationEvaluationShaderInvocationsBit = 0x00000200
    | ComputeShaderInvocationsBit = 0x00000400

[<Flags>]
type VkQueryResultFlags =
    | All = 15
    | None = 0
    /// Results of the queries are written to the destination buffer as 64-bit values
    | D64Bit = 0x00000001
    /// Results of the queries are waited on before proceeding with the result copy
    | WaitBit = 0x00000002
    /// Besides the results of the query, the availability of the results is also written
    | WithAvailabilityBit = 0x00000004
    /// Copy the partial results of the query even if the final results are not available
    | PartialBit = 0x00000008

type VkQueryType =
    | Occlusion = 0
    | PipelineStatistics = 1
    | Timestamp = 2

[<Flags>]
type VkBufferCreateFlags =
    | All = 7
    | None = 0
    /// Buffer should support sparse backing
    | SparseBindingBit = 0x00000001
    /// Buffer should support sparse backing with partial residency
    | SparseResidencyBit = 0x00000002
    /// Buffer should support constant data access to physical memory ranges mapped into multiple locations of sparse buffers
    | SparseAliasedBit = 0x00000004

[<Flags>]
type VkBufferUsageFlags =
    | All = 511
    | None = 0
    /// Can be used as a source of transfer operations
    | TransferSrcBit = 0x00000001
    /// Can be used as a destination of transfer operations
    | TransferDstBit = 0x00000002
    /// Can be used as TBO
    | UniformTexelBufferBit = 0x00000004
    /// Can be used as IBO
    | StorageTexelBufferBit = 0x00000008
    /// Can be used as UBO
    | UniformBufferBit = 0x00000010
    /// Can be used as SSBO
    | StorageBufferBit = 0x00000020
    /// Can be used as source of fixed-function index fetch (index buffer)
    | IndexBufferBit = 0x00000040
    /// Can be used as source of fixed-function vertex fetch (VBO)
    | VertexBufferBit = 0x00000080
    /// Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)
    | IndirectBufferBit = 0x00000100

type VkSharingMode =
    | Exclusive = 0
    | Concurrent = 1

type VkImageLayout =
    /// Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)
    | Undefined = 0
    /// General layout when image can be used for any kind of access
    | General = 1
    /// Optimal layout when image is only used for color attachment read/write
    | ColorAttachmentOptimal = 2
    /// Optimal layout when image is only used for depth/stencil attachment read/write
    | DepthStencilAttachmentOptimal = 3
    /// Optimal layout when image is used for read only depth/stencil attachment and shader access
    | DepthStencilReadOnlyOptimal = 4
    /// Optimal layout when image is used for read only shader access
    | ShaderReadOnlyOptimal = 5
    /// Optimal layout when image is used only as source of transfer operations
    | TransferSrcOptimal = 6
    /// Optimal layout when image is used only as destination of transfer operations
    | TransferDstOptimal = 7
    /// Initial layout used when the data is populated by the CPU
    | Preinitialized = 8

type VkComponentSwizzle =
    | Identity = 0
    | Zero = 1
    | One = 2
    | R = 3
    | G = 4
    | B = 5
    | A = 6

[<Flags>]
type VkImageViewCreateFlags =
    | All = 0
    | None = 0

type VkImageViewType =
    | D1d = 0
    | D2d = 1
    | D3d = 2
    | Cube = 3
    | D1dArray = 4
    | D2dArray = 5
    | CubeArray = 6

[<Flags>]
type VkShaderModuleCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkPipelineCacheCreateFlags =
    | All = 0
    | None = 0

type VkBlendFactor =
    | Zero = 0
    | One = 1
    | SrcColor = 2
    | OneMinusSrcColor = 3
    | DstColor = 4
    | OneMinusDstColor = 5
    | SrcAlpha = 6
    | OneMinusSrcAlpha = 7
    | DstAlpha = 8
    | OneMinusDstAlpha = 9
    | ConstantColor = 10
    | OneMinusConstantColor = 11
    | ConstantAlpha = 12
    | OneMinusConstantAlpha = 13
    | SrcAlphaSaturate = 14
    | Src1Color = 15
    | OneMinusSrc1Color = 16
    | Src1Alpha = 17
    | OneMinusSrc1Alpha = 18

type VkBlendOp =
    | Add = 0
    | Subtract = 1
    | ReverseSubtract = 2
    | Min = 3
    | Max = 4

[<Flags>]
type VkColorComponentFlags =
    | All = 15
    | None = 0
    | RBit = 0x00000001
    | GBit = 0x00000002
    | BBit = 0x00000004
    | ABit = 0x00000008

type VkCompareOp =
    | Never = 0
    | Less = 1
    | Equal = 2
    | LessOrEqual = 3
    | Greater = 4
    | NotEqual = 5
    | GreaterOrEqual = 6
    | Always = 7

[<Flags>]
type VkCullModeFlags =
    | None = 0
    | FrontBit = 0x00000001
    | BackBit = 0x00000002
    | FrontAndBack = 3

type VkDynamicState =
    | Viewport = 0
    | Scissor = 1
    | LineWidth = 2
    | DepthBias = 3
    | BlendConstants = 4
    | DepthBounds = 5
    | StencilCompareMask = 6
    | StencilWriteMask = 7
    | StencilReference = 8

type VkFrontFace =
    | CounterClockwise = 0
    | Clockwise = 1

type VkLogicOp =
    | Clear = 0
    | And = 1
    | AndReverse = 2
    | Copy = 3
    | AndInverted = 4
    | NoOp = 5
    | Xor = 6
    | Or = 7
    | Nor = 8
    | Equivalent = 9
    | Invert = 10
    | OrReverse = 11
    | CopyInverted = 12
    | OrInverted = 13
    | Nand = 14
    | Set = 15

[<Flags>]
type VkPipelineColorBlendStateCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkPipelineCreateFlags =
    | All = 7
    | None = 0
    | DisableOptimizationBit = 0x00000001
    | AllowDerivativesBit = 0x00000002
    | DerivativeBit = 0x00000004

[<Flags>]
type VkPipelineDepthStencilStateCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkPipelineLayoutCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkPipelineShaderStageCreateFlags =
    | All = 0
    | None = 0

type VkPolygonMode =
    | Fill = 0
    | Line = 1
    | Point = 2

type VkPrimitiveTopology =
    | PointList = 0
    | LineList = 1
    | LineStrip = 2
    | TriangleList = 3
    | TriangleStrip = 4
    | TriangleFan = 5
    | LineListWithAdjacency = 6
    | LineStripWithAdjacency = 7
    | TriangleListWithAdjacency = 8
    | TriangleStripWithAdjacency = 9
    | PatchList = 10

[<Flags>]
type VkShaderStageFlags =
    | None = 0
    | VertexBit = 0x00000001
    | TessellationControlBit = 0x00000002
    | TessellationEvaluationBit = 0x00000004
    | GeometryBit = 0x00000008
    | FragmentBit = 0x00000010
    | ComputeBit = 0x00000020
    | AllGraphics = 31
    | All = 2147483647

type VkStencilOp =
    | Keep = 0
    | Zero = 1
    | Replace = 2
    | IncrementAndClamp = 3
    | DecrementAndClamp = 4
    | Invert = 5
    | IncrementAndWrap = 6
    | DecrementAndWrap = 7

type VkVertexInputRate =
    | Vertex = 0
    | Instance = 1

type VkBorderColor =
    | FloatTransparentBlack = 0
    | IntTransparentBlack = 1
    | FloatOpaqueBlack = 2
    | IntOpaqueBlack = 3
    | FloatOpaqueWhite = 4
    | IntOpaqueWhite = 5

type VkFilter =
    | Nearest = 0
    | Linear = 1

type VkSamplerAddressMode =
    | Repeat = 0
    | MirroredRepeat = 1
    | ClampToEdge = 2
    | ClampToBorder = 3

[<Flags>]
type VkSamplerCreateFlags =
    | All = 0
    | None = 0

type VkSamplerMipmapMode =
    /// Choose nearest mip level
    | Nearest = 0
    /// Linear filter between mip levels
    | Linear = 1

[<Flags>]
type VkDescriptorPoolCreateFlags =
    | All = 1
    | None = 0
    /// Descriptor sets may be freed individually
    | FreeDescriptorSetBit = 0x00000001

[<Flags>]
type VkDescriptorSetLayoutCreateFlags =
    | All = 0
    | None = 0

type VkDescriptorType =
    | Sampler = 0
    | CombinedImageSampler = 1
    | SampledImage = 2
    | StorageImage = 3
    | UniformTexelBuffer = 4
    | StorageTexelBuffer = 5
    | UniformBuffer = 6
    | StorageBuffer = 7
    | UniformBufferDynamic = 8
    | StorageBufferDynamic = 9
    | InputAttachment = 10

[<Flags>]
type VkAccessFlags =
    | All = 131071
    | None = 0
    /// Controls coherency of indirect command reads
    | IndirectCommandReadBit = 0x00000001
    /// Controls coherency of index reads
    | IndexReadBit = 0x00000002
    /// Controls coherency of vertex attribute reads
    | VertexAttributeReadBit = 0x00000004
    /// Controls coherency of uniform buffer reads
    | UniformReadBit = 0x00000008
    /// Controls coherency of input attachment reads
    | InputAttachmentReadBit = 0x00000010
    /// Controls coherency of shader reads
    | ShaderReadBit = 0x00000020
    /// Controls coherency of shader writes
    | ShaderWriteBit = 0x00000040
    /// Controls coherency of color attachment reads
    | ColorAttachmentReadBit = 0x00000080
    /// Controls coherency of color attachment writes
    | ColorAttachmentWriteBit = 0x00000100
    /// Controls coherency of depth/stencil attachment reads
    | DepthStencilAttachmentReadBit = 0x00000200
    /// Controls coherency of depth/stencil attachment writes
    | DepthStencilAttachmentWriteBit = 0x00000400
    /// Controls coherency of transfer reads
    | TransferReadBit = 0x00000800
    /// Controls coherency of transfer writes
    | TransferWriteBit = 0x00001000
    /// Controls coherency of host reads
    | HostReadBit = 0x00002000
    /// Controls coherency of host writes
    | HostWriteBit = 0x00004000
    /// Controls coherency of memory reads
    | MemoryReadBit = 0x00008000
    /// Controls coherency of memory writes
    | MemoryWriteBit = 0x00010000

[<Flags>]
type VkAttachmentDescriptionFlags =
    | All = 1
    | None = 0
    /// The attachment may alias physical memory of another attachment in the same render pass
    | MayAliasBit = 0x00000001

type VkAttachmentLoadOp =
    | Load = 0
    | Clear = 1
    | DontCare = 2

type VkAttachmentStoreOp =
    | Store = 0
    | DontCare = 1

[<Flags>]
type VkDependencyFlags =
    | All = 1
    | None = 0
    /// Dependency is per pixel region
    | ByRegionBit = 0x00000001

[<Flags>]
type VkFramebufferCreateFlags =
    | All = 0
    | None = 0

type VkPipelineBindPoint =
    | Graphics = 0
    | Compute = 1

[<Flags>]
type VkRenderPassCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkSubpassDescriptionFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkCommandPoolCreateFlags =
    | All = 3
    | None = 0
    /// Command buffers have a short lifetime
    | TransientBit = 0x00000001
    /// Command buffers may release their memory individually
    | ResetCommandBufferBit = 0x00000002

[<Flags>]
type VkCommandPoolResetFlags =
    | All = 1
    | None = 0
    /// Release resources owned by the pool
    | ReleaseResourcesBit = 0x00000001

type VkCommandBufferLevel =
    | Primary = 0
    | Secondary = 1

[<Flags>]
type VkCommandBufferResetFlags =
    | All = 1
    | None = 0
    /// Release resources owned by the buffer
    | ReleaseResourcesBit = 0x00000001

[<Flags>]
type VkCommandBufferUsageFlags =
    | All = 7
    | None = 0
    | OneTimeSubmitBit = 0x00000001
    | RenderPassContinueBit = 0x00000002
    /// Command buffer may be submitted/executed more than once simultaneously
    | SimultaneousUseBit = 0x00000004

[<Flags>]
type VkQueryControlFlags =
    | All = 1
    | None = 0
    /// Require precise results to be collected by the query
    | PreciseBit = 0x00000001

type VkIndexType =
    | Uint16 = 0
    | Uint32 = 1

[<Flags>]
type VkStencilFaceFlags =
    | None = 0
    /// Front face
    | FrontBit = 0x00000001
    /// Back face
    | BackBit = 0x00000002
    /// Front and back faces
    | FrontAndBack = 3

type VkSubpassContents =
    | Inline = 0
    | SecondaryCommandBuffers = 1


[<StructLayout(LayoutKind.Sequential)>]
type VkAllocationCallbacks =
    struct
        val mutable public pUserData : nativeint
        val mutable public pfnAllocation : PFN_vkAllocationFunction
        val mutable public pfnReallocation : PFN_vkReallocationFunction
        val mutable public pfnFree : PFN_vkFreeFunction
        val mutable public pfnInternalAllocation : PFN_vkInternalAllocationNotification
        val mutable public pfnInternalFree : PFN_vkInternalFreeNotification

        new(pUserData: nativeint, pfnAllocation: PFN_vkAllocationFunction, pfnReallocation: PFN_vkReallocationFunction, pfnFree: PFN_vkFreeFunction, pfnInternalAllocation: PFN_vkInternalAllocationNotification, pfnInternalFree: PFN_vkInternalFreeNotification) =
            {
                pUserData = pUserData
                pfnAllocation = pfnAllocation
                pfnReallocation = pfnReallocation
                pfnFree = pfnFree
                pfnInternalAllocation = pfnInternalAllocation
                pfnInternalFree = pfnInternalFree
            }

        member x.IsEmpty =
            x.pUserData = Unchecked.defaultof<nativeint> && x.pfnAllocation = Unchecked.defaultof<PFN_vkAllocationFunction> && x.pfnReallocation = Unchecked.defaultof<PFN_vkReallocationFunction> && x.pfnFree = Unchecked.defaultof<PFN_vkFreeFunction> && x.pfnInternalAllocation = Unchecked.defaultof<PFN_vkInternalAllocationNotification> && x.pfnInternalFree = Unchecked.defaultof<PFN_vkInternalFreeNotification>

        static member Empty =
            VkAllocationCallbacks(Unchecked.defaultof<nativeint>, Unchecked.defaultof<PFN_vkAllocationFunction>, Unchecked.defaultof<PFN_vkReallocationFunction>, Unchecked.defaultof<PFN_vkFreeFunction>, Unchecked.defaultof<PFN_vkInternalAllocationNotification>, Unchecked.defaultof<PFN_vkInternalFreeNotification>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pUserData = %A" x.pUserData
                sprintf "pfnAllocation = %A" x.pfnAllocation
                sprintf "pfnReallocation = %A" x.pfnReallocation
                sprintf "pfnFree = %A" x.pfnFree
                sprintf "pfnInternalAllocation = %A" x.pfnInternalAllocation
                sprintf "pfnInternalFree = %A" x.pfnInternalFree
            ] |> sprintf "VkAllocationCallbacks { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkApplicationInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public pApplicationName : cstr
        val mutable public applicationVersion : uint32
        val mutable public pEngineName : cstr
        val mutable public engineVersion : uint32
        val mutable public apiVersion : uint32

        new(pNext: nativeint, pApplicationName: cstr, applicationVersion: uint32, pEngineName: cstr, engineVersion: uint32, apiVersion: uint32) =
            {
                sType = 0u
                pNext = pNext
                pApplicationName = pApplicationName
                applicationVersion = applicationVersion
                pEngineName = pEngineName
                engineVersion = engineVersion
                apiVersion = apiVersion
            }

        new(pApplicationName: cstr, applicationVersion: uint32, pEngineName: cstr, engineVersion: uint32, apiVersion: uint32) =
            VkApplicationInfo(Unchecked.defaultof<nativeint>, pApplicationName, applicationVersion, pEngineName, engineVersion, apiVersion)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.pApplicationName = Unchecked.defaultof<cstr> && x.applicationVersion = Unchecked.defaultof<uint32> && x.pEngineName = Unchecked.defaultof<cstr> && x.engineVersion = Unchecked.defaultof<uint32> && x.apiVersion = Unchecked.defaultof<uint32>

        static member Empty =
            VkApplicationInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>, Unchecked.defaultof<uint32>, Unchecked.defaultof<cstr>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "pApplicationName = %A" x.pApplicationName
                sprintf "applicationVersion = %A" x.applicationVersion
                sprintf "pEngineName = %A" x.pEngineName
                sprintf "engineVersion = %A" x.engineVersion
                sprintf "apiVersion = %A" x.apiVersion
            ] |> sprintf "VkApplicationInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkAttachmentDescription =
    struct
        val mutable public flags : VkAttachmentDescriptionFlags
        val mutable public format : VkFormat
        val mutable public samples : VkSampleCountFlags
        val mutable public loadOp : VkAttachmentLoadOp
        val mutable public storeOp : VkAttachmentStoreOp
        val mutable public stencilLoadOp : VkAttachmentLoadOp
        val mutable public stencilStoreOp : VkAttachmentStoreOp
        val mutable public initialLayout : VkImageLayout
        val mutable public finalLayout : VkImageLayout

        new(flags: VkAttachmentDescriptionFlags, format: VkFormat, samples: VkSampleCountFlags, loadOp: VkAttachmentLoadOp, storeOp: VkAttachmentStoreOp, stencilLoadOp: VkAttachmentLoadOp, stencilStoreOp: VkAttachmentStoreOp, initialLayout: VkImageLayout, finalLayout: VkImageLayout) =
            {
                flags = flags
                format = format
                samples = samples
                loadOp = loadOp
                storeOp = storeOp
                stencilLoadOp = stencilLoadOp
                stencilStoreOp = stencilStoreOp
                initialLayout = initialLayout
                finalLayout = finalLayout
            }

        member x.IsEmpty =
            x.flags = Unchecked.defaultof<VkAttachmentDescriptionFlags> && x.format = Unchecked.defaultof<VkFormat> && x.samples = Unchecked.defaultof<VkSampleCountFlags> && x.loadOp = Unchecked.defaultof<VkAttachmentLoadOp> && x.storeOp = Unchecked.defaultof<VkAttachmentStoreOp> && x.stencilLoadOp = Unchecked.defaultof<VkAttachmentLoadOp> && x.stencilStoreOp = Unchecked.defaultof<VkAttachmentStoreOp> && x.initialLayout = Unchecked.defaultof<VkImageLayout> && x.finalLayout = Unchecked.defaultof<VkImageLayout>

        static member Empty =
            VkAttachmentDescription(Unchecked.defaultof<VkAttachmentDescriptionFlags>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkAttachmentLoadOp>, Unchecked.defaultof<VkAttachmentStoreOp>, Unchecked.defaultof<VkAttachmentLoadOp>, Unchecked.defaultof<VkAttachmentStoreOp>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageLayout>)

        override x.ToString() =
            String.concat "; " [
                sprintf "flags = %A" x.flags
                sprintf "format = %A" x.format
                sprintf "samples = %A" x.samples
                sprintf "loadOp = %A" x.loadOp
                sprintf "storeOp = %A" x.storeOp
                sprintf "stencilLoadOp = %A" x.stencilLoadOp
                sprintf "stencilStoreOp = %A" x.stencilStoreOp
                sprintf "initialLayout = %A" x.initialLayout
                sprintf "finalLayout = %A" x.finalLayout
            ] |> sprintf "VkAttachmentDescription { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkAttachmentReference =
    struct
        val mutable public attachment : uint32
        val mutable public layout : VkImageLayout

        new(attachment: uint32, layout: VkImageLayout) =
            {
                attachment = attachment
                layout = layout
            }

        member x.IsEmpty =
            x.attachment = Unchecked.defaultof<uint32> && x.layout = Unchecked.defaultof<VkImageLayout>

        static member Empty =
            VkAttachmentReference(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageLayout>)

        override x.ToString() =
            String.concat "; " [
                sprintf "attachment = %A" x.attachment
                sprintf "layout = %A" x.layout
            ] |> sprintf "VkAttachmentReference { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBaseInStructure =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeptr<VkBaseInStructure>

        new(sType: uint32, pNext: nativeptr<VkBaseInStructure>) =
            {
                sType = sType
                pNext = pNext
            }

        member x.IsEmpty =
            x.sType = Unchecked.defaultof<uint32> && x.pNext = Unchecked.defaultof<nativeptr<VkBaseInStructure>>

        static member Empty =
            VkBaseInStructure(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBaseInStructure>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
            ] |> sprintf "VkBaseInStructure { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBaseOutStructure =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeptr<VkBaseOutStructure>

        new(sType: uint32, pNext: nativeptr<VkBaseOutStructure>) =
            {
                sType = sType
                pNext = pNext
            }

        member x.IsEmpty =
            x.sType = Unchecked.defaultof<uint32> && x.pNext = Unchecked.defaultof<nativeptr<VkBaseOutStructure>>

        static member Empty =
            VkBaseOutStructure(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBaseOutStructure>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
            ] |> sprintf "VkBaseOutStructure { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseMemoryBind =
    struct
        val mutable public resourceOffset : VkDeviceSize
        val mutable public size : VkDeviceSize
        val mutable public memory : VkDeviceMemory
        val mutable public memoryOffset : VkDeviceSize
        val mutable public flags : VkSparseMemoryBindFlags

        new(resourceOffset: VkDeviceSize, size: VkDeviceSize, memory: VkDeviceMemory, memoryOffset: VkDeviceSize, flags: VkSparseMemoryBindFlags) =
            {
                resourceOffset = resourceOffset
                size = size
                memory = memory
                memoryOffset = memoryOffset
                flags = flags
            }

        member x.IsEmpty =
            x.resourceOffset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.memoryOffset = Unchecked.defaultof<VkDeviceSize> && x.flags = Unchecked.defaultof<VkSparseMemoryBindFlags>

        static member Empty =
            VkSparseMemoryBind(Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkSparseMemoryBindFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "resourceOffset = %A" x.resourceOffset
                sprintf "size = %A" x.size
                sprintf "memory = %A" x.memory
                sprintf "memoryOffset = %A" x.memoryOffset
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkSparseMemoryBind { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseBufferMemoryBindInfo =
    struct
        val mutable public buffer : VkBuffer
        val mutable public bindCount : uint32
        val mutable public pBinds : nativeptr<VkSparseMemoryBind>

        new(buffer: VkBuffer, bindCount: uint32, pBinds: nativeptr<VkSparseMemoryBind>) =
            {
                buffer = buffer
                bindCount = bindCount
                pBinds = pBinds
            }

        member x.IsEmpty =
            x.buffer = Unchecked.defaultof<VkBuffer> && x.bindCount = Unchecked.defaultof<uint32> && x.pBinds = Unchecked.defaultof<nativeptr<VkSparseMemoryBind>>

        static member Empty =
            VkSparseBufferMemoryBindInfo(Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSparseMemoryBind>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "buffer = %A" x.buffer
                sprintf "bindCount = %A" x.bindCount
                sprintf "pBinds = %A" x.pBinds
            ] |> sprintf "VkSparseBufferMemoryBindInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseImageOpaqueMemoryBindInfo =
    struct
        val mutable public image : VkImage
        val mutable public bindCount : uint32
        val mutable public pBinds : nativeptr<VkSparseMemoryBind>

        new(image: VkImage, bindCount: uint32, pBinds: nativeptr<VkSparseMemoryBind>) =
            {
                image = image
                bindCount = bindCount
                pBinds = pBinds
            }

        member x.IsEmpty =
            x.image = Unchecked.defaultof<VkImage> && x.bindCount = Unchecked.defaultof<uint32> && x.pBinds = Unchecked.defaultof<nativeptr<VkSparseMemoryBind>>

        static member Empty =
            VkSparseImageOpaqueMemoryBindInfo(Unchecked.defaultof<VkImage>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSparseMemoryBind>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "image = %A" x.image
                sprintf "bindCount = %A" x.bindCount
                sprintf "pBinds = %A" x.pBinds
            ] |> sprintf "VkSparseImageOpaqueMemoryBindInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageSubresource =
    struct
        val mutable public aspectMask : VkImageAspectFlags
        val mutable public mipLevel : uint32
        val mutable public arrayLayer : uint32

        new(aspectMask: VkImageAspectFlags, mipLevel: uint32, arrayLayer: uint32) =
            {
                aspectMask = aspectMask
                mipLevel = mipLevel
                arrayLayer = arrayLayer
            }

        member x.IsEmpty =
            x.aspectMask = Unchecked.defaultof<VkImageAspectFlags> && x.mipLevel = Unchecked.defaultof<uint32> && x.arrayLayer = Unchecked.defaultof<uint32>

        static member Empty =
            VkImageSubresource(Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "aspectMask = %A" x.aspectMask
                sprintf "mipLevel = %A" x.mipLevel
                sprintf "arrayLayer = %A" x.arrayLayer
            ] |> sprintf "VkImageSubresource { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkOffset3D =
    struct
        val mutable public x : int32
        val mutable public y : int32
        val mutable public z : int32

        new(x: int32, y: int32, z: int32) =
            {
                x = x
                y = y
                z = z
            }

        member x.IsEmpty =
            x.x = Unchecked.defaultof<int32> && x.y = Unchecked.defaultof<int32> && x.z = Unchecked.defaultof<int32>

        static member Empty =
            VkOffset3D(Unchecked.defaultof<int32>, Unchecked.defaultof<int32>, Unchecked.defaultof<int32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "x = %A" x.x
                sprintf "y = %A" x.y
                sprintf "z = %A" x.z
            ] |> sprintf "VkOffset3D { %s }"
    end

/// Array of 2 VkOffset3D values.
[<StructLayout(LayoutKind.Explicit, Size = 24)>]
type VkOffset3D_2 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : VkOffset3D

        member x.Item
            with get (i : int) : VkOffset3D =
                if i < 0 || i > 1 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : VkOffset3D) =
                if i < 0 || i > 1 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 2

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 2 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<VkOffset3D> with
            member x.GetEnumerator() = let x = x in (Seq.init 2 (fun i -> x.[i])).GetEnumerator()
    end
[<StructLayout(LayoutKind.Sequential)>]
type VkExtent3D =
    struct
        val mutable public width : uint32
        val mutable public height : uint32
        val mutable public depth : uint32

        new(width: uint32, height: uint32, depth: uint32) =
            {
                width = width
                height = height
                depth = depth
            }

        member x.IsEmpty =
            x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32> && x.depth = Unchecked.defaultof<uint32>

        static member Empty =
            VkExtent3D(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        new(w : int, h : int, d : int) = VkExtent3D(uint32 w, uint32 h, uint32 d)

        override x.ToString() =
            String.concat "; " [
                sprintf "width = %A" x.width
                sprintf "height = %A" x.height
                sprintf "depth = %A" x.depth
            ] |> sprintf "VkExtent3D { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseImageMemoryBind =
    struct
        val mutable public subresource : VkImageSubresource
        val mutable public offset : VkOffset3D
        val mutable public extent : VkExtent3D
        val mutable public memory : VkDeviceMemory
        val mutable public memoryOffset : VkDeviceSize
        val mutable public flags : VkSparseMemoryBindFlags

        new(subresource: VkImageSubresource, offset: VkOffset3D, extent: VkExtent3D, memory: VkDeviceMemory, memoryOffset: VkDeviceSize, flags: VkSparseMemoryBindFlags) =
            {
                subresource = subresource
                offset = offset
                extent = extent
                memory = memory
                memoryOffset = memoryOffset
                flags = flags
            }

        member x.IsEmpty =
            x.subresource = Unchecked.defaultof<VkImageSubresource> && x.offset = Unchecked.defaultof<VkOffset3D> && x.extent = Unchecked.defaultof<VkExtent3D> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.memoryOffset = Unchecked.defaultof<VkDeviceSize> && x.flags = Unchecked.defaultof<VkSparseMemoryBindFlags>

        static member Empty =
            VkSparseImageMemoryBind(Unchecked.defaultof<VkImageSubresource>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkSparseMemoryBindFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "subresource = %A" x.subresource
                sprintf "offset = %A" x.offset
                sprintf "extent = %A" x.extent
                sprintf "memory = %A" x.memory
                sprintf "memoryOffset = %A" x.memoryOffset
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkSparseImageMemoryBind { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseImageMemoryBindInfo =
    struct
        val mutable public image : VkImage
        val mutable public bindCount : uint32
        val mutable public pBinds : nativeptr<VkSparseImageMemoryBind>

        new(image: VkImage, bindCount: uint32, pBinds: nativeptr<VkSparseImageMemoryBind>) =
            {
                image = image
                bindCount = bindCount
                pBinds = pBinds
            }

        member x.IsEmpty =
            x.image = Unchecked.defaultof<VkImage> && x.bindCount = Unchecked.defaultof<uint32> && x.pBinds = Unchecked.defaultof<nativeptr<VkSparseImageMemoryBind>>

        static member Empty =
            VkSparseImageMemoryBindInfo(Unchecked.defaultof<VkImage>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSparseImageMemoryBind>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "image = %A" x.image
                sprintf "bindCount = %A" x.bindCount
                sprintf "pBinds = %A" x.pBinds
            ] |> sprintf "VkSparseImageMemoryBindInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBindSparseInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public waitSemaphoreCount : uint32
        val mutable public pWaitSemaphores : nativeptr<VkSemaphore>
        val mutable public bufferBindCount : uint32
        val mutable public pBufferBinds : nativeptr<VkSparseBufferMemoryBindInfo>
        val mutable public imageOpaqueBindCount : uint32
        val mutable public pImageOpaqueBinds : nativeptr<VkSparseImageOpaqueMemoryBindInfo>
        val mutable public imageBindCount : uint32
        val mutable public pImageBinds : nativeptr<VkSparseImageMemoryBindInfo>
        val mutable public signalSemaphoreCount : uint32
        val mutable public pSignalSemaphores : nativeptr<VkSemaphore>

        new(pNext: nativeint, waitSemaphoreCount: uint32, pWaitSemaphores: nativeptr<VkSemaphore>, bufferBindCount: uint32, pBufferBinds: nativeptr<VkSparseBufferMemoryBindInfo>, imageOpaqueBindCount: uint32, pImageOpaqueBinds: nativeptr<VkSparseImageOpaqueMemoryBindInfo>, imageBindCount: uint32, pImageBinds: nativeptr<VkSparseImageMemoryBindInfo>, signalSemaphoreCount: uint32, pSignalSemaphores: nativeptr<VkSemaphore>) =
            {
                sType = 7u
                pNext = pNext
                waitSemaphoreCount = waitSemaphoreCount
                pWaitSemaphores = pWaitSemaphores
                bufferBindCount = bufferBindCount
                pBufferBinds = pBufferBinds
                imageOpaqueBindCount = imageOpaqueBindCount
                pImageOpaqueBinds = pImageOpaqueBinds
                imageBindCount = imageBindCount
                pImageBinds = pImageBinds
                signalSemaphoreCount = signalSemaphoreCount
                pSignalSemaphores = pSignalSemaphores
            }

        new(waitSemaphoreCount: uint32, pWaitSemaphores: nativeptr<VkSemaphore>, bufferBindCount: uint32, pBufferBinds: nativeptr<VkSparseBufferMemoryBindInfo>, imageOpaqueBindCount: uint32, pImageOpaqueBinds: nativeptr<VkSparseImageOpaqueMemoryBindInfo>, imageBindCount: uint32, pImageBinds: nativeptr<VkSparseImageMemoryBindInfo>, signalSemaphoreCount: uint32, pSignalSemaphores: nativeptr<VkSemaphore>) =
            VkBindSparseInfo(Unchecked.defaultof<nativeint>, waitSemaphoreCount, pWaitSemaphores, bufferBindCount, pBufferBinds, imageOpaqueBindCount, pImageOpaqueBinds, imageBindCount, pImageBinds, signalSemaphoreCount, pSignalSemaphores)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.waitSemaphoreCount = Unchecked.defaultof<uint32> && x.pWaitSemaphores = Unchecked.defaultof<nativeptr<VkSemaphore>> && x.bufferBindCount = Unchecked.defaultof<uint32> && x.pBufferBinds = Unchecked.defaultof<nativeptr<VkSparseBufferMemoryBindInfo>> && x.imageOpaqueBindCount = Unchecked.defaultof<uint32> && x.pImageOpaqueBinds = Unchecked.defaultof<nativeptr<VkSparseImageOpaqueMemoryBindInfo>> && x.imageBindCount = Unchecked.defaultof<uint32> && x.pImageBinds = Unchecked.defaultof<nativeptr<VkSparseImageMemoryBindInfo>> && x.signalSemaphoreCount = Unchecked.defaultof<uint32> && x.pSignalSemaphores = Unchecked.defaultof<nativeptr<VkSemaphore>>

        static member Empty =
            VkBindSparseInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphore>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSparseBufferMemoryBindInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSparseImageOpaqueMemoryBindInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSparseImageMemoryBindInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphore>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "waitSemaphoreCount = %A" x.waitSemaphoreCount
                sprintf "pWaitSemaphores = %A" x.pWaitSemaphores
                sprintf "bufferBindCount = %A" x.bufferBindCount
                sprintf "pBufferBinds = %A" x.pBufferBinds
                sprintf "imageOpaqueBindCount = %A" x.imageOpaqueBindCount
                sprintf "pImageOpaqueBinds = %A" x.pImageOpaqueBinds
                sprintf "imageBindCount = %A" x.imageBindCount
                sprintf "pImageBinds = %A" x.pImageBinds
                sprintf "signalSemaphoreCount = %A" x.signalSemaphoreCount
                sprintf "pSignalSemaphores = %A" x.pSignalSemaphores
            ] |> sprintf "VkBindSparseInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBufferCopy =
    struct
        val mutable public srcOffset : VkDeviceSize
        val mutable public dstOffset : VkDeviceSize
        val mutable public size : VkDeviceSize

        new(srcOffset: VkDeviceSize, dstOffset: VkDeviceSize, size: VkDeviceSize) =
            {
                srcOffset = srcOffset
                dstOffset = dstOffset
                size = size
            }

        member x.IsEmpty =
            x.srcOffset = Unchecked.defaultof<VkDeviceSize> && x.dstOffset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkBufferCopy(Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "srcOffset = %A" x.srcOffset
                sprintf "dstOffset = %A" x.dstOffset
                sprintf "size = %A" x.size
            ] |> sprintf "VkBufferCopy { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBufferCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkBufferCreateFlags
        val mutable public size : VkDeviceSize
        val mutable public usage : VkBufferUsageFlags
        val mutable public sharingMode : VkSharingMode
        val mutable public queueFamilyIndexCount : uint32
        val mutable public pQueueFamilyIndices : nativeptr<uint32>

        new(pNext: nativeint, flags: VkBufferCreateFlags, size: VkDeviceSize, usage: VkBufferUsageFlags, sharingMode: VkSharingMode, queueFamilyIndexCount: uint32, pQueueFamilyIndices: nativeptr<uint32>) =
            {
                sType = 12u
                pNext = pNext
                flags = flags
                size = size
                usage = usage
                sharingMode = sharingMode
                queueFamilyIndexCount = queueFamilyIndexCount
                pQueueFamilyIndices = pQueueFamilyIndices
            }

        new(flags: VkBufferCreateFlags, size: VkDeviceSize, usage: VkBufferUsageFlags, sharingMode: VkSharingMode, queueFamilyIndexCount: uint32, pQueueFamilyIndices: nativeptr<uint32>) =
            VkBufferCreateInfo(Unchecked.defaultof<nativeint>, flags, size, usage, sharingMode, queueFamilyIndexCount, pQueueFamilyIndices)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkBufferCreateFlags> && x.size = Unchecked.defaultof<VkDeviceSize> && x.usage = Unchecked.defaultof<VkBufferUsageFlags> && x.sharingMode = Unchecked.defaultof<VkSharingMode> && x.queueFamilyIndexCount = Unchecked.defaultof<uint32> && x.pQueueFamilyIndices = Unchecked.defaultof<nativeptr<uint32>>

        static member Empty =
            VkBufferCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferCreateFlags>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBufferUsageFlags>, Unchecked.defaultof<VkSharingMode>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "size = %A" x.size
                sprintf "usage = %A" x.usage
                sprintf "sharingMode = %A" x.sharingMode
                sprintf "queueFamilyIndexCount = %A" x.queueFamilyIndexCount
                sprintf "pQueueFamilyIndices = %A" x.pQueueFamilyIndices
            ] |> sprintf "VkBufferCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageSubresourceLayers =
    struct
        val mutable public aspectMask : VkImageAspectFlags
        val mutable public mipLevel : uint32
        val mutable public baseArrayLayer : uint32
        val mutable public layerCount : uint32

        new(aspectMask: VkImageAspectFlags, mipLevel: uint32, baseArrayLayer: uint32, layerCount: uint32) =
            {
                aspectMask = aspectMask
                mipLevel = mipLevel
                baseArrayLayer = baseArrayLayer
                layerCount = layerCount
            }

        member x.IsEmpty =
            x.aspectMask = Unchecked.defaultof<VkImageAspectFlags> && x.mipLevel = Unchecked.defaultof<uint32> && x.baseArrayLayer = Unchecked.defaultof<uint32> && x.layerCount = Unchecked.defaultof<uint32>

        static member Empty =
            VkImageSubresourceLayers(Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "aspectMask = %A" x.aspectMask
                sprintf "mipLevel = %A" x.mipLevel
                sprintf "baseArrayLayer = %A" x.baseArrayLayer
                sprintf "layerCount = %A" x.layerCount
            ] |> sprintf "VkImageSubresourceLayers { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBufferImageCopy =
    struct
        val mutable public bufferOffset : VkDeviceSize
        val mutable public bufferRowLength : uint32
        val mutable public bufferImageHeight : uint32
        val mutable public imageSubresource : VkImageSubresourceLayers
        val mutable public imageOffset : VkOffset3D
        val mutable public imageExtent : VkExtent3D

        new(bufferOffset: VkDeviceSize, bufferRowLength: uint32, bufferImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D) =
            {
                bufferOffset = bufferOffset
                bufferRowLength = bufferRowLength
                bufferImageHeight = bufferImageHeight
                imageSubresource = imageSubresource
                imageOffset = imageOffset
                imageExtent = imageExtent
            }

        member x.IsEmpty =
            x.bufferOffset = Unchecked.defaultof<VkDeviceSize> && x.bufferRowLength = Unchecked.defaultof<uint32> && x.bufferImageHeight = Unchecked.defaultof<uint32> && x.imageSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.imageOffset = Unchecked.defaultof<VkOffset3D> && x.imageExtent = Unchecked.defaultof<VkExtent3D>

        static member Empty =
            VkBufferImageCopy(Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

        override x.ToString() =
            String.concat "; " [
                sprintf "bufferOffset = %A" x.bufferOffset
                sprintf "bufferRowLength = %A" x.bufferRowLength
                sprintf "bufferImageHeight = %A" x.bufferImageHeight
                sprintf "imageSubresource = %A" x.imageSubresource
                sprintf "imageOffset = %A" x.imageOffset
                sprintf "imageExtent = %A" x.imageExtent
            ] |> sprintf "VkBufferImageCopy { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBufferMemoryBarrier =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public srcAccessMask : VkAccessFlags
        val mutable public dstAccessMask : VkAccessFlags
        val mutable public srcQueueFamilyIndex : uint32
        val mutable public dstQueueFamilyIndex : uint32
        val mutable public buffer : VkBuffer
        val mutable public offset : VkDeviceSize
        val mutable public size : VkDeviceSize

        new(pNext: nativeint, srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags, srcQueueFamilyIndex: uint32, dstQueueFamilyIndex: uint32, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize) =
            {
                sType = 44u
                pNext = pNext
                srcAccessMask = srcAccessMask
                dstAccessMask = dstAccessMask
                srcQueueFamilyIndex = srcQueueFamilyIndex
                dstQueueFamilyIndex = dstQueueFamilyIndex
                buffer = buffer
                offset = offset
                size = size
            }

        new(srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags, srcQueueFamilyIndex: uint32, dstQueueFamilyIndex: uint32, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize) =
            VkBufferMemoryBarrier(Unchecked.defaultof<nativeint>, srcAccessMask, dstAccessMask, srcQueueFamilyIndex, dstQueueFamilyIndex, buffer, offset, size)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags> && x.srcQueueFamilyIndex = Unchecked.defaultof<uint32> && x.dstQueueFamilyIndex = Unchecked.defaultof<uint32> && x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkBufferMemoryBarrier(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "srcAccessMask = %A" x.srcAccessMask
                sprintf "dstAccessMask = %A" x.dstAccessMask
                sprintf "srcQueueFamilyIndex = %A" x.srcQueueFamilyIndex
                sprintf "dstQueueFamilyIndex = %A" x.dstQueueFamilyIndex
                sprintf "buffer = %A" x.buffer
                sprintf "offset = %A" x.offset
                sprintf "size = %A" x.size
            ] |> sprintf "VkBufferMemoryBarrier { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBufferViewCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkBufferViewCreateFlags
        val mutable public buffer : VkBuffer
        val mutable public format : VkFormat
        val mutable public offset : VkDeviceSize
        val mutable public range : VkDeviceSize

        new(pNext: nativeint, flags: VkBufferViewCreateFlags, buffer: VkBuffer, format: VkFormat, offset: VkDeviceSize, range: VkDeviceSize) =
            {
                sType = 13u
                pNext = pNext
                flags = flags
                buffer = buffer
                format = format
                offset = offset
                range = range
            }

        new(flags: VkBufferViewCreateFlags, buffer: VkBuffer, format: VkFormat, offset: VkDeviceSize, range: VkDeviceSize) =
            VkBufferViewCreateInfo(Unchecked.defaultof<nativeint>, flags, buffer, format, offset, range)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkBufferViewCreateFlags> && x.buffer = Unchecked.defaultof<VkBuffer> && x.format = Unchecked.defaultof<VkFormat> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.range = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkBufferViewCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferViewCreateFlags>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "buffer = %A" x.buffer
                sprintf "format = %A" x.format
                sprintf "offset = %A" x.offset
                sprintf "range = %A" x.range
            ] |> sprintf "VkBufferViewCreateInfo { %s }"
    end

/// Union allowing specification of floating-point, integer, or unsigned integer color data. Actual value selected is based on image/attachment being cleared.
[<StructLayout(LayoutKind.Explicit)>]
type VkClearColorValue =
    struct
        [<FieldOffset(0)>]
        val mutable public float32 : V4f
        [<FieldOffset(0)>]
        val mutable public int32 : V4i
        [<FieldOffset(0)>]
        val mutable public uint32 : V4ui

        static member Float32(value: V4f) =
            let mutable result = Unchecked.defaultof<VkClearColorValue>
            result.float32 <- value
            result

        static member Int32(value: V4i) =
            let mutable result = Unchecked.defaultof<VkClearColorValue>
            result.int32 <- value
            result

        static member Uint32(value: V4ui) =
            let mutable result = Unchecked.defaultof<VkClearColorValue>
            result.uint32 <- value
            result

        override x.ToString() =
            String.concat "; " [
                sprintf "float32 = %A" x.float32
                sprintf "int32 = %A" x.int32
                sprintf "uint32 = %A" x.uint32
            ] |> sprintf "VkClearColorValue { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkClearDepthStencilValue =
    struct
        val mutable public depth : float32
        val mutable public stencil : uint32

        new(depth: float32, stencil: uint32) =
            {
                depth = depth
                stencil = stencil
            }

        member x.IsEmpty =
            x.depth = Unchecked.defaultof<float32> && x.stencil = Unchecked.defaultof<uint32>

        static member Empty =
            VkClearDepthStencilValue(Unchecked.defaultof<float32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "depth = %A" x.depth
                sprintf "stencil = %A" x.stencil
            ] |> sprintf "VkClearDepthStencilValue { %s }"
    end

/// Union allowing specification of color or depth and stencil values. Actual value selected is based on attachment being cleared.
[<StructLayout(LayoutKind.Explicit)>]
type VkClearValue =
    struct
        [<FieldOffset(0)>]
        val mutable public color : VkClearColorValue
        [<FieldOffset(0)>]
        val mutable public depthStencil : VkClearDepthStencilValue

        static member Color(value: VkClearColorValue) =
            let mutable result = Unchecked.defaultof<VkClearValue>
            result.color <- value
            result

        static member DepthStencil(value: VkClearDepthStencilValue) =
            let mutable result = Unchecked.defaultof<VkClearValue>
            result.depthStencil <- value
            result

        override x.ToString() =
            String.concat "; " [
                sprintf "color = %A" x.color
                sprintf "depthStencil = %A" x.depthStencil
            ] |> sprintf "VkClearValue { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkClearAttachment =
    struct
        val mutable public aspectMask : VkImageAspectFlags
        val mutable public colorAttachment : uint32
        val mutable public clearValue : VkClearValue

        new(aspectMask: VkImageAspectFlags, colorAttachment: uint32, clearValue: VkClearValue) =
            {
                aspectMask = aspectMask
                colorAttachment = colorAttachment
                clearValue = clearValue
            }

        member x.IsEmpty =
            x.aspectMask = Unchecked.defaultof<VkImageAspectFlags> && x.colorAttachment = Unchecked.defaultof<uint32> && x.clearValue = Unchecked.defaultof<VkClearValue>

        static member Empty =
            VkClearAttachment(Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkClearValue>)

        override x.ToString() =
            String.concat "; " [
                sprintf "aspectMask = %A" x.aspectMask
                sprintf "colorAttachment = %A" x.colorAttachment
                sprintf "clearValue = %A" x.clearValue
            ] |> sprintf "VkClearAttachment { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkOffset2D =
    struct
        val mutable public x : int32
        val mutable public y : int32

        new(x: int32, y: int32) =
            {
                x = x
                y = y
            }

        member x.IsEmpty =
            x.x = Unchecked.defaultof<int32> && x.y = Unchecked.defaultof<int32>

        static member Empty =
            VkOffset2D(Unchecked.defaultof<int32>, Unchecked.defaultof<int32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "x = %A" x.x
                sprintf "y = %A" x.y
            ] |> sprintf "VkOffset2D { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkExtent2D =
    struct
        val mutable public width : uint32
        val mutable public height : uint32

        new(width: uint32, height: uint32) =
            {
                width = width
                height = height
            }

        member x.IsEmpty =
            x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32>

        static member Empty =
            VkExtent2D(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        new(w : int, h : int) = VkExtent2D(uint32 w, uint32 h)

        override x.ToString() =
            String.concat "; " [
                sprintf "width = %A" x.width
                sprintf "height = %A" x.height
            ] |> sprintf "VkExtent2D { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkRect2D =
    struct
        val mutable public offset : VkOffset2D
        val mutable public extent : VkExtent2D

        new(offset: VkOffset2D, extent: VkExtent2D) =
            {
                offset = offset
                extent = extent
            }

        member x.IsEmpty =
            x.offset = Unchecked.defaultof<VkOffset2D> && x.extent = Unchecked.defaultof<VkExtent2D>

        static member Empty =
            VkRect2D(Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkExtent2D>)

        override x.ToString() =
            String.concat "; " [
                sprintf "offset = %A" x.offset
                sprintf "extent = %A" x.extent
            ] |> sprintf "VkRect2D { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkClearRect =
    struct
        val mutable public rect : VkRect2D
        val mutable public baseArrayLayer : uint32
        val mutable public layerCount : uint32

        new(rect: VkRect2D, baseArrayLayer: uint32, layerCount: uint32) =
            {
                rect = rect
                baseArrayLayer = baseArrayLayer
                layerCount = layerCount
            }

        member x.IsEmpty =
            x.rect = Unchecked.defaultof<VkRect2D> && x.baseArrayLayer = Unchecked.defaultof<uint32> && x.layerCount = Unchecked.defaultof<uint32>

        static member Empty =
            VkClearRect(Unchecked.defaultof<VkRect2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "rect = %A" x.rect
                sprintf "baseArrayLayer = %A" x.baseArrayLayer
                sprintf "layerCount = %A" x.layerCount
            ] |> sprintf "VkClearRect { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkCommandBufferAllocateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public commandPool : VkCommandPool
        val mutable public level : VkCommandBufferLevel
        val mutable public commandBufferCount : uint32

        new(pNext: nativeint, commandPool: VkCommandPool, level: VkCommandBufferLevel, commandBufferCount: uint32) =
            {
                sType = 40u
                pNext = pNext
                commandPool = commandPool
                level = level
                commandBufferCount = commandBufferCount
            }

        new(commandPool: VkCommandPool, level: VkCommandBufferLevel, commandBufferCount: uint32) =
            VkCommandBufferAllocateInfo(Unchecked.defaultof<nativeint>, commandPool, level, commandBufferCount)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.commandPool = Unchecked.defaultof<VkCommandPool> && x.level = Unchecked.defaultof<VkCommandBufferLevel> && x.commandBufferCount = Unchecked.defaultof<uint32>

        static member Empty =
            VkCommandBufferAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCommandPool>, Unchecked.defaultof<VkCommandBufferLevel>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "commandPool = %A" x.commandPool
                sprintf "level = %A" x.level
                sprintf "commandBufferCount = %A" x.commandBufferCount
            ] |> sprintf "VkCommandBufferAllocateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkCommandBufferInheritanceInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public renderPass : VkRenderPass
        val mutable public subpass : uint32
        val mutable public framebuffer : VkFramebuffer
        val mutable public occlusionQueryEnable : VkBool32
        val mutable public queryFlags : VkQueryControlFlags
        val mutable public pipelineStatistics : VkQueryPipelineStatisticFlags

        new(pNext: nativeint, renderPass: VkRenderPass, subpass: uint32, framebuffer: VkFramebuffer, occlusionQueryEnable: VkBool32, queryFlags: VkQueryControlFlags, pipelineStatistics: VkQueryPipelineStatisticFlags) =
            {
                sType = 41u
                pNext = pNext
                renderPass = renderPass
                subpass = subpass
                framebuffer = framebuffer
                occlusionQueryEnable = occlusionQueryEnable
                queryFlags = queryFlags
                pipelineStatistics = pipelineStatistics
            }

        new(renderPass: VkRenderPass, subpass: uint32, framebuffer: VkFramebuffer, occlusionQueryEnable: VkBool32, queryFlags: VkQueryControlFlags, pipelineStatistics: VkQueryPipelineStatisticFlags) =
            VkCommandBufferInheritanceInfo(Unchecked.defaultof<nativeint>, renderPass, subpass, framebuffer, occlusionQueryEnable, queryFlags, pipelineStatistics)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.renderPass = Unchecked.defaultof<VkRenderPass> && x.subpass = Unchecked.defaultof<uint32> && x.framebuffer = Unchecked.defaultof<VkFramebuffer> && x.occlusionQueryEnable = Unchecked.defaultof<VkBool32> && x.queryFlags = Unchecked.defaultof<VkQueryControlFlags> && x.pipelineStatistics = Unchecked.defaultof<VkQueryPipelineStatisticFlags>

        static member Empty =
            VkCommandBufferInheritanceInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderPass>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkFramebuffer>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkQueryControlFlags>, Unchecked.defaultof<VkQueryPipelineStatisticFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "renderPass = %A" x.renderPass
                sprintf "subpass = %A" x.subpass
                sprintf "framebuffer = %A" x.framebuffer
                sprintf "occlusionQueryEnable = %A" x.occlusionQueryEnable
                sprintf "queryFlags = %A" x.queryFlags
                sprintf "pipelineStatistics = %A" x.pipelineStatistics
            ] |> sprintf "VkCommandBufferInheritanceInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkCommandBufferBeginInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkCommandBufferUsageFlags
        val mutable public pInheritanceInfo : nativeptr<VkCommandBufferInheritanceInfo>

        new(pNext: nativeint, flags: VkCommandBufferUsageFlags, pInheritanceInfo: nativeptr<VkCommandBufferInheritanceInfo>) =
            {
                sType = 42u
                pNext = pNext
                flags = flags
                pInheritanceInfo = pInheritanceInfo
            }

        new(flags: VkCommandBufferUsageFlags, pInheritanceInfo: nativeptr<VkCommandBufferInheritanceInfo>) =
            VkCommandBufferBeginInfo(Unchecked.defaultof<nativeint>, flags, pInheritanceInfo)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkCommandBufferUsageFlags> && x.pInheritanceInfo = Unchecked.defaultof<nativeptr<VkCommandBufferInheritanceInfo>>

        static member Empty =
            VkCommandBufferBeginInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCommandBufferUsageFlags>, Unchecked.defaultof<nativeptr<VkCommandBufferInheritanceInfo>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "pInheritanceInfo = %A" x.pInheritanceInfo
            ] |> sprintf "VkCommandBufferBeginInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkCommandPoolCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkCommandPoolCreateFlags
        val mutable public queueFamilyIndex : uint32

        new(pNext: nativeint, flags: VkCommandPoolCreateFlags, queueFamilyIndex: uint32) =
            {
                sType = 39u
                pNext = pNext
                flags = flags
                queueFamilyIndex = queueFamilyIndex
            }

        new(flags: VkCommandPoolCreateFlags, queueFamilyIndex: uint32) =
            VkCommandPoolCreateInfo(Unchecked.defaultof<nativeint>, flags, queueFamilyIndex)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkCommandPoolCreateFlags> && x.queueFamilyIndex = Unchecked.defaultof<uint32>

        static member Empty =
            VkCommandPoolCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCommandPoolCreateFlags>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "queueFamilyIndex = %A" x.queueFamilyIndex
            ] |> sprintf "VkCommandPoolCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkComponentMapping =
    struct
        val mutable public r : VkComponentSwizzle
        val mutable public g : VkComponentSwizzle
        val mutable public b : VkComponentSwizzle
        val mutable public a : VkComponentSwizzle

        new(r: VkComponentSwizzle, g: VkComponentSwizzle, b: VkComponentSwizzle, a: VkComponentSwizzle) =
            {
                r = r
                g = g
                b = b
                a = a
            }

        member x.IsEmpty =
            x.r = Unchecked.defaultof<VkComponentSwizzle> && x.g = Unchecked.defaultof<VkComponentSwizzle> && x.b = Unchecked.defaultof<VkComponentSwizzle> && x.a = Unchecked.defaultof<VkComponentSwizzle>

        static member Empty =
            VkComponentMapping(Unchecked.defaultof<VkComponentSwizzle>, Unchecked.defaultof<VkComponentSwizzle>, Unchecked.defaultof<VkComponentSwizzle>, Unchecked.defaultof<VkComponentSwizzle>)

        override x.ToString() =
            String.concat "; " [
                sprintf "r = %A" x.r
                sprintf "g = %A" x.g
                sprintf "b = %A" x.b
                sprintf "a = %A" x.a
            ] |> sprintf "VkComponentMapping { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSpecializationMapEntry =
    struct
        val mutable public constantID : uint32
        val mutable public offset : uint32
        val mutable public size : uint64

        new(constantID: uint32, offset: uint32, size: uint64) =
            {
                constantID = constantID
                offset = offset
                size = size
            }

        member x.IsEmpty =
            x.constantID = Unchecked.defaultof<uint32> && x.offset = Unchecked.defaultof<uint32> && x.size = Unchecked.defaultof<uint64>

        static member Empty =
            VkSpecializationMapEntry(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>)

        override x.ToString() =
            String.concat "; " [
                sprintf "constantID = %A" x.constantID
                sprintf "offset = %A" x.offset
                sprintf "size = %A" x.size
            ] |> sprintf "VkSpecializationMapEntry { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSpecializationInfo =
    struct
        val mutable public mapEntryCount : uint32
        val mutable public pMapEntries : nativeptr<VkSpecializationMapEntry>
        val mutable public dataSize : uint64
        val mutable public pData : nativeint

        new(mapEntryCount: uint32, pMapEntries: nativeptr<VkSpecializationMapEntry>, dataSize: uint64, pData: nativeint) =
            {
                mapEntryCount = mapEntryCount
                pMapEntries = pMapEntries
                dataSize = dataSize
                pData = pData
            }

        member x.IsEmpty =
            x.mapEntryCount = Unchecked.defaultof<uint32> && x.pMapEntries = Unchecked.defaultof<nativeptr<VkSpecializationMapEntry>> && x.dataSize = Unchecked.defaultof<uint64> && x.pData = Unchecked.defaultof<nativeint>

        static member Empty =
            VkSpecializationInfo(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSpecializationMapEntry>>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

        override x.ToString() =
            String.concat "; " [
                sprintf "mapEntryCount = %A" x.mapEntryCount
                sprintf "pMapEntries = %A" x.pMapEntries
                sprintf "dataSize = %A" x.dataSize
                sprintf "pData = %A" x.pData
            ] |> sprintf "VkSpecializationInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineShaderStageCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineShaderStageCreateFlags
        val mutable public stage : VkShaderStageFlags
        val mutable public _module : VkShaderModule
        val mutable public pName : cstr
        val mutable public pSpecializationInfo : nativeptr<VkSpecializationInfo>

        new(pNext: nativeint, flags: VkPipelineShaderStageCreateFlags, stage: VkShaderStageFlags, _module: VkShaderModule, pName: cstr, pSpecializationInfo: nativeptr<VkSpecializationInfo>) =
            {
                sType = 18u
                pNext = pNext
                flags = flags
                stage = stage
                _module = _module
                pName = pName
                pSpecializationInfo = pSpecializationInfo
            }

        new(flags: VkPipelineShaderStageCreateFlags, stage: VkShaderStageFlags, _module: VkShaderModule, pName: cstr, pSpecializationInfo: nativeptr<VkSpecializationInfo>) =
            VkPipelineShaderStageCreateInfo(Unchecked.defaultof<nativeint>, flags, stage, _module, pName, pSpecializationInfo)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineShaderStageCreateFlags> && x.stage = Unchecked.defaultof<VkShaderStageFlags> && x._module = Unchecked.defaultof<VkShaderModule> && x.pName = Unchecked.defaultof<cstr> && x.pSpecializationInfo = Unchecked.defaultof<nativeptr<VkSpecializationInfo>>

        static member Empty =
            VkPipelineShaderStageCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineShaderStageCreateFlags>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkShaderModule>, Unchecked.defaultof<cstr>, Unchecked.defaultof<nativeptr<VkSpecializationInfo>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "stage = %A" x.stage
                sprintf "_module = %A" x._module
                sprintf "pName = %A" x.pName
                sprintf "pSpecializationInfo = %A" x.pSpecializationInfo
            ] |> sprintf "VkPipelineShaderStageCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkComputePipelineCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineCreateFlags
        val mutable public stage : VkPipelineShaderStageCreateInfo
        val mutable public layout : VkPipelineLayout
        val mutable public basePipelineHandle : VkPipeline
        val mutable public basePipelineIndex : int32

        new(pNext: nativeint, flags: VkPipelineCreateFlags, stage: VkPipelineShaderStageCreateInfo, layout: VkPipelineLayout, basePipelineHandle: VkPipeline, basePipelineIndex: int32) =
            {
                sType = 29u
                pNext = pNext
                flags = flags
                stage = stage
                layout = layout
                basePipelineHandle = basePipelineHandle
                basePipelineIndex = basePipelineIndex
            }

        new(flags: VkPipelineCreateFlags, stage: VkPipelineShaderStageCreateInfo, layout: VkPipelineLayout, basePipelineHandle: VkPipeline, basePipelineIndex: int32) =
            VkComputePipelineCreateInfo(Unchecked.defaultof<nativeint>, flags, stage, layout, basePipelineHandle, basePipelineIndex)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCreateFlags> && x.stage = Unchecked.defaultof<VkPipelineShaderStageCreateInfo> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.basePipelineHandle = Unchecked.defaultof<VkPipeline> && x.basePipelineIndex = Unchecked.defaultof<int32>

        static member Empty =
            VkComputePipelineCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCreateFlags>, Unchecked.defaultof<VkPipelineShaderStageCreateInfo>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<int32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "stage = %A" x.stage
                sprintf "layout = %A" x.layout
                sprintf "basePipelineHandle = %A" x.basePipelineHandle
                sprintf "basePipelineIndex = %A" x.basePipelineIndex
            ] |> sprintf "VkComputePipelineCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkCopyDescriptorSet =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public srcSet : VkDescriptorSet
        val mutable public srcBinding : uint32
        val mutable public srcArrayElement : uint32
        val mutable public dstSet : VkDescriptorSet
        val mutable public dstBinding : uint32
        val mutable public dstArrayElement : uint32
        val mutable public descriptorCount : uint32

        new(pNext: nativeint, srcSet: VkDescriptorSet, srcBinding: uint32, srcArrayElement: uint32, dstSet: VkDescriptorSet, dstBinding: uint32, dstArrayElement: uint32, descriptorCount: uint32) =
            {
                sType = 36u
                pNext = pNext
                srcSet = srcSet
                srcBinding = srcBinding
                srcArrayElement = srcArrayElement
                dstSet = dstSet
                dstBinding = dstBinding
                dstArrayElement = dstArrayElement
                descriptorCount = descriptorCount
            }

        new(srcSet: VkDescriptorSet, srcBinding: uint32, srcArrayElement: uint32, dstSet: VkDescriptorSet, dstBinding: uint32, dstArrayElement: uint32, descriptorCount: uint32) =
            VkCopyDescriptorSet(Unchecked.defaultof<nativeint>, srcSet, srcBinding, srcArrayElement, dstSet, dstBinding, dstArrayElement, descriptorCount)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.srcSet = Unchecked.defaultof<VkDescriptorSet> && x.srcBinding = Unchecked.defaultof<uint32> && x.srcArrayElement = Unchecked.defaultof<uint32> && x.dstSet = Unchecked.defaultof<VkDescriptorSet> && x.dstBinding = Unchecked.defaultof<uint32> && x.dstArrayElement = Unchecked.defaultof<uint32> && x.descriptorCount = Unchecked.defaultof<uint32>

        static member Empty =
            VkCopyDescriptorSet(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorSet>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDescriptorSet>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "srcSet = %A" x.srcSet
                sprintf "srcBinding = %A" x.srcBinding
                sprintf "srcArrayElement = %A" x.srcArrayElement
                sprintf "dstSet = %A" x.dstSet
                sprintf "dstBinding = %A" x.dstBinding
                sprintf "dstArrayElement = %A" x.dstArrayElement
                sprintf "descriptorCount = %A" x.descriptorCount
            ] |> sprintf "VkCopyDescriptorSet { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorBufferInfo =
    struct
        val mutable public buffer : VkBuffer
        val mutable public offset : VkDeviceSize
        val mutable public range : VkDeviceSize

        new(buffer: VkBuffer, offset: VkDeviceSize, range: VkDeviceSize) =
            {
                buffer = buffer
                offset = offset
                range = range
            }

        member x.IsEmpty =
            x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.range = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkDescriptorBufferInfo(Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "buffer = %A" x.buffer
                sprintf "offset = %A" x.offset
                sprintf "range = %A" x.range
            ] |> sprintf "VkDescriptorBufferInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorImageInfo =
    struct
        val mutable public sampler : VkSampler
        val mutable public imageView : VkImageView
        val mutable public imageLayout : VkImageLayout

        new(sampler: VkSampler, imageView: VkImageView, imageLayout: VkImageLayout) =
            {
                sampler = sampler
                imageView = imageView
                imageLayout = imageLayout
            }

        member x.IsEmpty =
            x.sampler = Unchecked.defaultof<VkSampler> && x.imageView = Unchecked.defaultof<VkImageView> && x.imageLayout = Unchecked.defaultof<VkImageLayout>

        static member Empty =
            VkDescriptorImageInfo(Unchecked.defaultof<VkSampler>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkImageLayout>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sampler = %A" x.sampler
                sprintf "imageView = %A" x.imageView
                sprintf "imageLayout = %A" x.imageLayout
            ] |> sprintf "VkDescriptorImageInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorPoolSize =
    struct
        val mutable public _type : VkDescriptorType
        val mutable public descriptorCount : uint32

        new(_type: VkDescriptorType, descriptorCount: uint32) =
            {
                _type = _type
                descriptorCount = descriptorCount
            }

        member x.IsEmpty =
            x._type = Unchecked.defaultof<VkDescriptorType> && x.descriptorCount = Unchecked.defaultof<uint32>

        static member Empty =
            VkDescriptorPoolSize(Unchecked.defaultof<VkDescriptorType>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "_type = %A" x._type
                sprintf "descriptorCount = %A" x.descriptorCount
            ] |> sprintf "VkDescriptorPoolSize { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorPoolCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkDescriptorPoolCreateFlags
        val mutable public maxSets : uint32
        val mutable public poolSizeCount : uint32
        val mutable public pPoolSizes : nativeptr<VkDescriptorPoolSize>

        new(pNext: nativeint, flags: VkDescriptorPoolCreateFlags, maxSets: uint32, poolSizeCount: uint32, pPoolSizes: nativeptr<VkDescriptorPoolSize>) =
            {
                sType = 33u
                pNext = pNext
                flags = flags
                maxSets = maxSets
                poolSizeCount = poolSizeCount
                pPoolSizes = pPoolSizes
            }

        new(flags: VkDescriptorPoolCreateFlags, maxSets: uint32, poolSizeCount: uint32, pPoolSizes: nativeptr<VkDescriptorPoolSize>) =
            VkDescriptorPoolCreateInfo(Unchecked.defaultof<nativeint>, flags, maxSets, poolSizeCount, pPoolSizes)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDescriptorPoolCreateFlags> && x.maxSets = Unchecked.defaultof<uint32> && x.poolSizeCount = Unchecked.defaultof<uint32> && x.pPoolSizes = Unchecked.defaultof<nativeptr<VkDescriptorPoolSize>>

        static member Empty =
            VkDescriptorPoolCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorPoolCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorPoolSize>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "maxSets = %A" x.maxSets
                sprintf "poolSizeCount = %A" x.poolSizeCount
                sprintf "pPoolSizes = %A" x.pPoolSizes
            ] |> sprintf "VkDescriptorPoolCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorSetAllocateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public descriptorPool : VkDescriptorPool
        val mutable public descriptorSetCount : uint32
        val mutable public pSetLayouts : nativeptr<VkDescriptorSetLayout>

        new(pNext: nativeint, descriptorPool: VkDescriptorPool, descriptorSetCount: uint32, pSetLayouts: nativeptr<VkDescriptorSetLayout>) =
            {
                sType = 34u
                pNext = pNext
                descriptorPool = descriptorPool
                descriptorSetCount = descriptorSetCount
                pSetLayouts = pSetLayouts
            }

        new(descriptorPool: VkDescriptorPool, descriptorSetCount: uint32, pSetLayouts: nativeptr<VkDescriptorSetLayout>) =
            VkDescriptorSetAllocateInfo(Unchecked.defaultof<nativeint>, descriptorPool, descriptorSetCount, pSetLayouts)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.descriptorPool = Unchecked.defaultof<VkDescriptorPool> && x.descriptorSetCount = Unchecked.defaultof<uint32> && x.pSetLayouts = Unchecked.defaultof<nativeptr<VkDescriptorSetLayout>>

        static member Empty =
            VkDescriptorSetAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorPool>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorSetLayout>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "descriptorPool = %A" x.descriptorPool
                sprintf "descriptorSetCount = %A" x.descriptorSetCount
                sprintf "pSetLayouts = %A" x.pSetLayouts
            ] |> sprintf "VkDescriptorSetAllocateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorSetLayoutBinding =
    struct
        val mutable public binding : uint32
        val mutable public descriptorType : VkDescriptorType
        val mutable public descriptorCount : uint32
        val mutable public stageFlags : VkShaderStageFlags
        val mutable public pImmutableSamplers : nativeptr<VkSampler>

        new(binding: uint32, descriptorType: VkDescriptorType, descriptorCount: uint32, stageFlags: VkShaderStageFlags, pImmutableSamplers: nativeptr<VkSampler>) =
            {
                binding = binding
                descriptorType = descriptorType
                descriptorCount = descriptorCount
                stageFlags = stageFlags
                pImmutableSamplers = pImmutableSamplers
            }

        member x.IsEmpty =
            x.binding = Unchecked.defaultof<uint32> && x.descriptorType = Unchecked.defaultof<VkDescriptorType> && x.descriptorCount = Unchecked.defaultof<uint32> && x.stageFlags = Unchecked.defaultof<VkShaderStageFlags> && x.pImmutableSamplers = Unchecked.defaultof<nativeptr<VkSampler>>

        static member Empty =
            VkDescriptorSetLayoutBinding(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDescriptorType>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<nativeptr<VkSampler>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "binding = %A" x.binding
                sprintf "descriptorType = %A" x.descriptorType
                sprintf "descriptorCount = %A" x.descriptorCount
                sprintf "stageFlags = %A" x.stageFlags
                sprintf "pImmutableSamplers = %A" x.pImmutableSamplers
            ] |> sprintf "VkDescriptorSetLayoutBinding { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorSetLayoutCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkDescriptorSetLayoutCreateFlags
        val mutable public bindingCount : uint32
        val mutable public pBindings : nativeptr<VkDescriptorSetLayoutBinding>

        new(pNext: nativeint, flags: VkDescriptorSetLayoutCreateFlags, bindingCount: uint32, pBindings: nativeptr<VkDescriptorSetLayoutBinding>) =
            {
                sType = 32u
                pNext = pNext
                flags = flags
                bindingCount = bindingCount
                pBindings = pBindings
            }

        new(flags: VkDescriptorSetLayoutCreateFlags, bindingCount: uint32, pBindings: nativeptr<VkDescriptorSetLayoutBinding>) =
            VkDescriptorSetLayoutCreateInfo(Unchecked.defaultof<nativeint>, flags, bindingCount, pBindings)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDescriptorSetLayoutCreateFlags> && x.bindingCount = Unchecked.defaultof<uint32> && x.pBindings = Unchecked.defaultof<nativeptr<VkDescriptorSetLayoutBinding>>

        static member Empty =
            VkDescriptorSetLayoutCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorSetLayoutCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorSetLayoutBinding>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "bindingCount = %A" x.bindingCount
                sprintf "pBindings = %A" x.pBindings
            ] |> sprintf "VkDescriptorSetLayoutCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDeviceQueueCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkDeviceQueueCreateFlags
        val mutable public queueFamilyIndex : uint32
        val mutable public queueCount : uint32
        val mutable public pQueuePriorities : nativeptr<float32>

        new(pNext: nativeint, flags: VkDeviceQueueCreateFlags, queueFamilyIndex: uint32, queueCount: uint32, pQueuePriorities: nativeptr<float32>) =
            {
                sType = 2u
                pNext = pNext
                flags = flags
                queueFamilyIndex = queueFamilyIndex
                queueCount = queueCount
                pQueuePriorities = pQueuePriorities
            }

        new(flags: VkDeviceQueueCreateFlags, queueFamilyIndex: uint32, queueCount: uint32, pQueuePriorities: nativeptr<float32>) =
            VkDeviceQueueCreateInfo(Unchecked.defaultof<nativeint>, flags, queueFamilyIndex, queueCount, pQueuePriorities)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceQueueCreateFlags> && x.queueFamilyIndex = Unchecked.defaultof<uint32> && x.queueCount = Unchecked.defaultof<uint32> && x.pQueuePriorities = Unchecked.defaultof<nativeptr<float32>>

        static member Empty =
            VkDeviceQueueCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceQueueCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<float32>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "queueFamilyIndex = %A" x.queueFamilyIndex
                sprintf "queueCount = %A" x.queueCount
                sprintf "pQueuePriorities = %A" x.pQueuePriorities
            ] |> sprintf "VkDeviceQueueCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPhysicalDeviceFeatures =
    struct
        val mutable public robustBufferAccess : VkBool32
        val mutable public fullDrawIndexUint32 : VkBool32
        val mutable public imageCubeArray : VkBool32
        val mutable public independentBlend : VkBool32
        val mutable public geometryShader : VkBool32
        val mutable public tessellationShader : VkBool32
        val mutable public sampleRateShading : VkBool32
        val mutable public dualSrcBlend : VkBool32
        val mutable public logicOp : VkBool32
        val mutable public multiDrawIndirect : VkBool32
        val mutable public drawIndirectFirstInstance : VkBool32
        val mutable public depthClamp : VkBool32
        val mutable public depthBiasClamp : VkBool32
        val mutable public fillModeNonSolid : VkBool32
        val mutable public depthBounds : VkBool32
        val mutable public wideLines : VkBool32
        val mutable public largePoints : VkBool32
        val mutable public alphaToOne : VkBool32
        val mutable public multiViewport : VkBool32
        val mutable public samplerAnisotropy : VkBool32
        val mutable public textureCompressionETC2 : VkBool32
        val mutable public textureCompressionASTC_LDR : VkBool32
        val mutable public textureCompressionBC : VkBool32
        val mutable public occlusionQueryPrecise : VkBool32
        val mutable public pipelineStatisticsQuery : VkBool32
        val mutable public vertexPipelineStoresAndAtomics : VkBool32
        val mutable public fragmentStoresAndAtomics : VkBool32
        val mutable public shaderTessellationAndGeometryPointSize : VkBool32
        val mutable public shaderImageGatherExtended : VkBool32
        val mutable public shaderStorageImageExtendedFormats : VkBool32
        val mutable public shaderStorageImageMultisample : VkBool32
        val mutable public shaderStorageImageReadWithoutFormat : VkBool32
        val mutable public shaderStorageImageWriteWithoutFormat : VkBool32
        val mutable public shaderUniformBufferArrayDynamicIndexing : VkBool32
        val mutable public shaderSampledImageArrayDynamicIndexing : VkBool32
        val mutable public shaderStorageBufferArrayDynamicIndexing : VkBool32
        val mutable public shaderStorageImageArrayDynamicIndexing : VkBool32
        val mutable public shaderClipDistance : VkBool32
        val mutable public shaderCullDistance : VkBool32
        val mutable public shaderFloat64 : VkBool32
        val mutable public shaderInt64 : VkBool32
        val mutable public shaderInt16 : VkBool32
        val mutable public shaderResourceResidency : VkBool32
        val mutable public shaderResourceMinLod : VkBool32
        val mutable public sparseBinding : VkBool32
        val mutable public sparseResidencyBuffer : VkBool32
        val mutable public sparseResidencyImage2D : VkBool32
        val mutable public sparseResidencyImage3D : VkBool32
        val mutable public sparseResidency2Samples : VkBool32
        val mutable public sparseResidency4Samples : VkBool32
        val mutable public sparseResidency8Samples : VkBool32
        val mutable public sparseResidency16Samples : VkBool32
        val mutable public sparseResidencyAliased : VkBool32
        val mutable public variableMultisampleRate : VkBool32
        val mutable public inheritedQueries : VkBool32

        new(robustBufferAccess: VkBool32, fullDrawIndexUint32: VkBool32, imageCubeArray: VkBool32, independentBlend: VkBool32, geometryShader: VkBool32, tessellationShader: VkBool32, sampleRateShading: VkBool32, dualSrcBlend: VkBool32, logicOp: VkBool32, multiDrawIndirect: VkBool32, drawIndirectFirstInstance: VkBool32, depthClamp: VkBool32, depthBiasClamp: VkBool32, fillModeNonSolid: VkBool32, depthBounds: VkBool32, wideLines: VkBool32, largePoints: VkBool32, alphaToOne: VkBool32, multiViewport: VkBool32, samplerAnisotropy: VkBool32, textureCompressionETC2: VkBool32, textureCompressionASTC_LDR: VkBool32, textureCompressionBC: VkBool32, occlusionQueryPrecise: VkBool32, pipelineStatisticsQuery: VkBool32, vertexPipelineStoresAndAtomics: VkBool32, fragmentStoresAndAtomics: VkBool32, shaderTessellationAndGeometryPointSize: VkBool32, shaderImageGatherExtended: VkBool32, shaderStorageImageExtendedFormats: VkBool32, shaderStorageImageMultisample: VkBool32, shaderStorageImageReadWithoutFormat: VkBool32, shaderStorageImageWriteWithoutFormat: VkBool32, shaderUniformBufferArrayDynamicIndexing: VkBool32, shaderSampledImageArrayDynamicIndexing: VkBool32, shaderStorageBufferArrayDynamicIndexing: VkBool32, shaderStorageImageArrayDynamicIndexing: VkBool32, shaderClipDistance: VkBool32, shaderCullDistance: VkBool32, shaderFloat64: VkBool32, shaderInt64: VkBool32, shaderInt16: VkBool32, shaderResourceResidency: VkBool32, shaderResourceMinLod: VkBool32, sparseBinding: VkBool32, sparseResidencyBuffer: VkBool32, sparseResidencyImage2D: VkBool32, sparseResidencyImage3D: VkBool32, sparseResidency2Samples: VkBool32, sparseResidency4Samples: VkBool32, sparseResidency8Samples: VkBool32, sparseResidency16Samples: VkBool32, sparseResidencyAliased: VkBool32, variableMultisampleRate: VkBool32, inheritedQueries: VkBool32) =
            {
                robustBufferAccess = robustBufferAccess
                fullDrawIndexUint32 = fullDrawIndexUint32
                imageCubeArray = imageCubeArray
                independentBlend = independentBlend
                geometryShader = geometryShader
                tessellationShader = tessellationShader
                sampleRateShading = sampleRateShading
                dualSrcBlend = dualSrcBlend
                logicOp = logicOp
                multiDrawIndirect = multiDrawIndirect
                drawIndirectFirstInstance = drawIndirectFirstInstance
                depthClamp = depthClamp
                depthBiasClamp = depthBiasClamp
                fillModeNonSolid = fillModeNonSolid
                depthBounds = depthBounds
                wideLines = wideLines
                largePoints = largePoints
                alphaToOne = alphaToOne
                multiViewport = multiViewport
                samplerAnisotropy = samplerAnisotropy
                textureCompressionETC2 = textureCompressionETC2
                textureCompressionASTC_LDR = textureCompressionASTC_LDR
                textureCompressionBC = textureCompressionBC
                occlusionQueryPrecise = occlusionQueryPrecise
                pipelineStatisticsQuery = pipelineStatisticsQuery
                vertexPipelineStoresAndAtomics = vertexPipelineStoresAndAtomics
                fragmentStoresAndAtomics = fragmentStoresAndAtomics
                shaderTessellationAndGeometryPointSize = shaderTessellationAndGeometryPointSize
                shaderImageGatherExtended = shaderImageGatherExtended
                shaderStorageImageExtendedFormats = shaderStorageImageExtendedFormats
                shaderStorageImageMultisample = shaderStorageImageMultisample
                shaderStorageImageReadWithoutFormat = shaderStorageImageReadWithoutFormat
                shaderStorageImageWriteWithoutFormat = shaderStorageImageWriteWithoutFormat
                shaderUniformBufferArrayDynamicIndexing = shaderUniformBufferArrayDynamicIndexing
                shaderSampledImageArrayDynamicIndexing = shaderSampledImageArrayDynamicIndexing
                shaderStorageBufferArrayDynamicIndexing = shaderStorageBufferArrayDynamicIndexing
                shaderStorageImageArrayDynamicIndexing = shaderStorageImageArrayDynamicIndexing
                shaderClipDistance = shaderClipDistance
                shaderCullDistance = shaderCullDistance
                shaderFloat64 = shaderFloat64
                shaderInt64 = shaderInt64
                shaderInt16 = shaderInt16
                shaderResourceResidency = shaderResourceResidency
                shaderResourceMinLod = shaderResourceMinLod
                sparseBinding = sparseBinding
                sparseResidencyBuffer = sparseResidencyBuffer
                sparseResidencyImage2D = sparseResidencyImage2D
                sparseResidencyImage3D = sparseResidencyImage3D
                sparseResidency2Samples = sparseResidency2Samples
                sparseResidency4Samples = sparseResidency4Samples
                sparseResidency8Samples = sparseResidency8Samples
                sparseResidency16Samples = sparseResidency16Samples
                sparseResidencyAliased = sparseResidencyAliased
                variableMultisampleRate = variableMultisampleRate
                inheritedQueries = inheritedQueries
            }

        member x.IsEmpty =
            x.robustBufferAccess = Unchecked.defaultof<VkBool32> && x.fullDrawIndexUint32 = Unchecked.defaultof<VkBool32> && x.imageCubeArray = Unchecked.defaultof<VkBool32> && x.independentBlend = Unchecked.defaultof<VkBool32> && x.geometryShader = Unchecked.defaultof<VkBool32> && x.tessellationShader = Unchecked.defaultof<VkBool32> && x.sampleRateShading = Unchecked.defaultof<VkBool32> && x.dualSrcBlend = Unchecked.defaultof<VkBool32> && x.logicOp = Unchecked.defaultof<VkBool32> && x.multiDrawIndirect = Unchecked.defaultof<VkBool32> && x.drawIndirectFirstInstance = Unchecked.defaultof<VkBool32> && x.depthClamp = Unchecked.defaultof<VkBool32> && x.depthBiasClamp = Unchecked.defaultof<VkBool32> && x.fillModeNonSolid = Unchecked.defaultof<VkBool32> && x.depthBounds = Unchecked.defaultof<VkBool32> && x.wideLines = Unchecked.defaultof<VkBool32> && x.largePoints = Unchecked.defaultof<VkBool32> && x.alphaToOne = Unchecked.defaultof<VkBool32> && x.multiViewport = Unchecked.defaultof<VkBool32> && x.samplerAnisotropy = Unchecked.defaultof<VkBool32> && x.textureCompressionETC2 = Unchecked.defaultof<VkBool32> && x.textureCompressionASTC_LDR = Unchecked.defaultof<VkBool32> && x.textureCompressionBC = Unchecked.defaultof<VkBool32> && x.occlusionQueryPrecise = Unchecked.defaultof<VkBool32> && x.pipelineStatisticsQuery = Unchecked.defaultof<VkBool32> && x.vertexPipelineStoresAndAtomics = Unchecked.defaultof<VkBool32> && x.fragmentStoresAndAtomics = Unchecked.defaultof<VkBool32> && x.shaderTessellationAndGeometryPointSize = Unchecked.defaultof<VkBool32> && x.shaderImageGatherExtended = Unchecked.defaultof<VkBool32> && x.shaderStorageImageExtendedFormats = Unchecked.defaultof<VkBool32> && x.shaderStorageImageMultisample = Unchecked.defaultof<VkBool32> && x.shaderStorageImageReadWithoutFormat = Unchecked.defaultof<VkBool32> && x.shaderStorageImageWriteWithoutFormat = Unchecked.defaultof<VkBool32> && x.shaderUniformBufferArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderSampledImageArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageBufferArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageImageArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderClipDistance = Unchecked.defaultof<VkBool32> && x.shaderCullDistance = Unchecked.defaultof<VkBool32> && x.shaderFloat64 = Unchecked.defaultof<VkBool32> && x.shaderInt64 = Unchecked.defaultof<VkBool32> && x.shaderInt16 = Unchecked.defaultof<VkBool32> && x.shaderResourceResidency = Unchecked.defaultof<VkBool32> && x.shaderResourceMinLod = Unchecked.defaultof<VkBool32> && x.sparseBinding = Unchecked.defaultof<VkBool32> && x.sparseResidencyBuffer = Unchecked.defaultof<VkBool32> && x.sparseResidencyImage2D = Unchecked.defaultof<VkBool32> && x.sparseResidencyImage3D = Unchecked.defaultof<VkBool32> && x.sparseResidency2Samples = Unchecked.defaultof<VkBool32> && x.sparseResidency4Samples = Unchecked.defaultof<VkBool32> && x.sparseResidency8Samples = Unchecked.defaultof<VkBool32> && x.sparseResidency16Samples = Unchecked.defaultof<VkBool32> && x.sparseResidencyAliased = Unchecked.defaultof<VkBool32> && x.variableMultisampleRate = Unchecked.defaultof<VkBool32> && x.inheritedQueries = Unchecked.defaultof<VkBool32>

        static member Empty =
            VkPhysicalDeviceFeatures(Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "robustBufferAccess = %A" x.robustBufferAccess
                sprintf "fullDrawIndexUint32 = %A" x.fullDrawIndexUint32
                sprintf "imageCubeArray = %A" x.imageCubeArray
                sprintf "independentBlend = %A" x.independentBlend
                sprintf "geometryShader = %A" x.geometryShader
                sprintf "tessellationShader = %A" x.tessellationShader
                sprintf "sampleRateShading = %A" x.sampleRateShading
                sprintf "dualSrcBlend = %A" x.dualSrcBlend
                sprintf "logicOp = %A" x.logicOp
                sprintf "multiDrawIndirect = %A" x.multiDrawIndirect
                sprintf "drawIndirectFirstInstance = %A" x.drawIndirectFirstInstance
                sprintf "depthClamp = %A" x.depthClamp
                sprintf "depthBiasClamp = %A" x.depthBiasClamp
                sprintf "fillModeNonSolid = %A" x.fillModeNonSolid
                sprintf "depthBounds = %A" x.depthBounds
                sprintf "wideLines = %A" x.wideLines
                sprintf "largePoints = %A" x.largePoints
                sprintf "alphaToOne = %A" x.alphaToOne
                sprintf "multiViewport = %A" x.multiViewport
                sprintf "samplerAnisotropy = %A" x.samplerAnisotropy
                sprintf "textureCompressionETC2 = %A" x.textureCompressionETC2
                sprintf "textureCompressionASTC_LDR = %A" x.textureCompressionASTC_LDR
                sprintf "textureCompressionBC = %A" x.textureCompressionBC
                sprintf "occlusionQueryPrecise = %A" x.occlusionQueryPrecise
                sprintf "pipelineStatisticsQuery = %A" x.pipelineStatisticsQuery
                sprintf "vertexPipelineStoresAndAtomics = %A" x.vertexPipelineStoresAndAtomics
                sprintf "fragmentStoresAndAtomics = %A" x.fragmentStoresAndAtomics
                sprintf "shaderTessellationAndGeometryPointSize = %A" x.shaderTessellationAndGeometryPointSize
                sprintf "shaderImageGatherExtended = %A" x.shaderImageGatherExtended
                sprintf "shaderStorageImageExtendedFormats = %A" x.shaderStorageImageExtendedFormats
                sprintf "shaderStorageImageMultisample = %A" x.shaderStorageImageMultisample
                sprintf "shaderStorageImageReadWithoutFormat = %A" x.shaderStorageImageReadWithoutFormat
                sprintf "shaderStorageImageWriteWithoutFormat = %A" x.shaderStorageImageWriteWithoutFormat
                sprintf "shaderUniformBufferArrayDynamicIndexing = %A" x.shaderUniformBufferArrayDynamicIndexing
                sprintf "shaderSampledImageArrayDynamicIndexing = %A" x.shaderSampledImageArrayDynamicIndexing
                sprintf "shaderStorageBufferArrayDynamicIndexing = %A" x.shaderStorageBufferArrayDynamicIndexing
                sprintf "shaderStorageImageArrayDynamicIndexing = %A" x.shaderStorageImageArrayDynamicIndexing
                sprintf "shaderClipDistance = %A" x.shaderClipDistance
                sprintf "shaderCullDistance = %A" x.shaderCullDistance
                sprintf "shaderFloat64 = %A" x.shaderFloat64
                sprintf "shaderInt64 = %A" x.shaderInt64
                sprintf "shaderInt16 = %A" x.shaderInt16
                sprintf "shaderResourceResidency = %A" x.shaderResourceResidency
                sprintf "shaderResourceMinLod = %A" x.shaderResourceMinLod
                sprintf "sparseBinding = %A" x.sparseBinding
                sprintf "sparseResidencyBuffer = %A" x.sparseResidencyBuffer
                sprintf "sparseResidencyImage2D = %A" x.sparseResidencyImage2D
                sprintf "sparseResidencyImage3D = %A" x.sparseResidencyImage3D
                sprintf "sparseResidency2Samples = %A" x.sparseResidency2Samples
                sprintf "sparseResidency4Samples = %A" x.sparseResidency4Samples
                sprintf "sparseResidency8Samples = %A" x.sparseResidency8Samples
                sprintf "sparseResidency16Samples = %A" x.sparseResidency16Samples
                sprintf "sparseResidencyAliased = %A" x.sparseResidencyAliased
                sprintf "variableMultisampleRate = %A" x.variableMultisampleRate
                sprintf "inheritedQueries = %A" x.inheritedQueries
            ] |> sprintf "VkPhysicalDeviceFeatures { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDeviceCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkDeviceCreateFlags
        val mutable public queueCreateInfoCount : uint32
        val mutable public pQueueCreateInfos : nativeptr<VkDeviceQueueCreateInfo>
        val mutable public enabledLayerCount : uint32
        val mutable public ppEnabledLayerNames : nativeptr<cstr>
        val mutable public enabledExtensionCount : uint32
        val mutable public ppEnabledExtensionNames : nativeptr<cstr>
        val mutable public pEnabledFeatures : nativeptr<VkPhysicalDeviceFeatures>

        new(pNext: nativeint, flags: VkDeviceCreateFlags, queueCreateInfoCount: uint32, pQueueCreateInfos: nativeptr<VkDeviceQueueCreateInfo>, enabledLayerCount: uint32, ppEnabledLayerNames: nativeptr<cstr>, enabledExtensionCount: uint32, ppEnabledExtensionNames: nativeptr<cstr>, pEnabledFeatures: nativeptr<VkPhysicalDeviceFeatures>) =
            {
                sType = 3u
                pNext = pNext
                flags = flags
                queueCreateInfoCount = queueCreateInfoCount
                pQueueCreateInfos = pQueueCreateInfos
                enabledLayerCount = enabledLayerCount
                ppEnabledLayerNames = ppEnabledLayerNames
                enabledExtensionCount = enabledExtensionCount
                ppEnabledExtensionNames = ppEnabledExtensionNames
                pEnabledFeatures = pEnabledFeatures
            }

        new(flags: VkDeviceCreateFlags, queueCreateInfoCount: uint32, pQueueCreateInfos: nativeptr<VkDeviceQueueCreateInfo>, enabledLayerCount: uint32, ppEnabledLayerNames: nativeptr<cstr>, enabledExtensionCount: uint32, ppEnabledExtensionNames: nativeptr<cstr>, pEnabledFeatures: nativeptr<VkPhysicalDeviceFeatures>) =
            VkDeviceCreateInfo(Unchecked.defaultof<nativeint>, flags, queueCreateInfoCount, pQueueCreateInfos, enabledLayerCount, ppEnabledLayerNames, enabledExtensionCount, ppEnabledExtensionNames, pEnabledFeatures)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceCreateFlags> && x.queueCreateInfoCount = Unchecked.defaultof<uint32> && x.pQueueCreateInfos = Unchecked.defaultof<nativeptr<VkDeviceQueueCreateInfo>> && x.enabledLayerCount = Unchecked.defaultof<uint32> && x.ppEnabledLayerNames = Unchecked.defaultof<nativeptr<cstr>> && x.enabledExtensionCount = Unchecked.defaultof<uint32> && x.ppEnabledExtensionNames = Unchecked.defaultof<nativeptr<cstr>> && x.pEnabledFeatures = Unchecked.defaultof<nativeptr<VkPhysicalDeviceFeatures>>

        static member Empty =
            VkDeviceCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDeviceQueueCreateInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<cstr>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<cstr>>, Unchecked.defaultof<nativeptr<VkPhysicalDeviceFeatures>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "queueCreateInfoCount = %A" x.queueCreateInfoCount
                sprintf "pQueueCreateInfos = %A" x.pQueueCreateInfos
                sprintf "enabledLayerCount = %A" x.enabledLayerCount
                sprintf "ppEnabledLayerNames = %A" x.ppEnabledLayerNames
                sprintf "enabledExtensionCount = %A" x.enabledExtensionCount
                sprintf "ppEnabledExtensionNames = %A" x.ppEnabledExtensionNames
                sprintf "pEnabledFeatures = %A" x.pEnabledFeatures
            ] |> sprintf "VkDeviceCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDispatchIndirectCommand =
    struct
        val mutable public x : uint32
        val mutable public y : uint32
        val mutable public z : uint32

        new(x: uint32, y: uint32, z: uint32) =
            {
                x = x
                y = y
                z = z
            }

        member x.IsEmpty =
            x.x = Unchecked.defaultof<uint32> && x.y = Unchecked.defaultof<uint32> && x.z = Unchecked.defaultof<uint32>

        static member Empty =
            VkDispatchIndirectCommand(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "x = %A" x.x
                sprintf "y = %A" x.y
                sprintf "z = %A" x.z
            ] |> sprintf "VkDispatchIndirectCommand { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDrawIndexedIndirectCommand =
    struct
        val mutable public indexCount : uint32
        val mutable public instanceCount : uint32
        val mutable public firstIndex : uint32
        val mutable public vertexOffset : int32
        val mutable public firstInstance : uint32

        new(indexCount: uint32, instanceCount: uint32, firstIndex: uint32, vertexOffset: int32, firstInstance: uint32) =
            {
                indexCount = indexCount
                instanceCount = instanceCount
                firstIndex = firstIndex
                vertexOffset = vertexOffset
                firstInstance = firstInstance
            }

        member x.IsEmpty =
            x.indexCount = Unchecked.defaultof<uint32> && x.instanceCount = Unchecked.defaultof<uint32> && x.firstIndex = Unchecked.defaultof<uint32> && x.vertexOffset = Unchecked.defaultof<int32> && x.firstInstance = Unchecked.defaultof<uint32>

        static member Empty =
            VkDrawIndexedIndirectCommand(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<int32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "indexCount = %A" x.indexCount
                sprintf "instanceCount = %A" x.instanceCount
                sprintf "firstIndex = %A" x.firstIndex
                sprintf "vertexOffset = %A" x.vertexOffset
                sprintf "firstInstance = %A" x.firstInstance
            ] |> sprintf "VkDrawIndexedIndirectCommand { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDrawIndirectCommand =
    struct
        val mutable public vertexCount : uint32
        val mutable public instanceCount : uint32
        val mutable public firstVertex : uint32
        val mutable public firstInstance : uint32

        new(vertexCount: uint32, instanceCount: uint32, firstVertex: uint32, firstInstance: uint32) =
            {
                vertexCount = vertexCount
                instanceCount = instanceCount
                firstVertex = firstVertex
                firstInstance = firstInstance
            }

        member x.IsEmpty =
            x.vertexCount = Unchecked.defaultof<uint32> && x.instanceCount = Unchecked.defaultof<uint32> && x.firstVertex = Unchecked.defaultof<uint32> && x.firstInstance = Unchecked.defaultof<uint32>

        static member Empty =
            VkDrawIndirectCommand(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "vertexCount = %A" x.vertexCount
                sprintf "instanceCount = %A" x.instanceCount
                sprintf "firstVertex = %A" x.firstVertex
                sprintf "firstInstance = %A" x.firstInstance
            ] |> sprintf "VkDrawIndirectCommand { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkEventCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkEventCreateFlags

        new(pNext: nativeint, flags: VkEventCreateFlags) =
            {
                sType = 10u
                pNext = pNext
                flags = flags
            }

        new(flags: VkEventCreateFlags) =
            VkEventCreateInfo(Unchecked.defaultof<nativeint>, flags)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkEventCreateFlags>

        static member Empty =
            VkEventCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkEventCreateFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkEventCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkExtensionProperties =
    struct
        val mutable public extensionName : String256
        val mutable public specVersion : uint32

        new(extensionName: String256, specVersion: uint32) =
            {
                extensionName = extensionName
                specVersion = specVersion
            }

        member x.IsEmpty =
            x.extensionName = Unchecked.defaultof<String256> && x.specVersion = Unchecked.defaultof<uint32>

        static member Empty =
            VkExtensionProperties(Unchecked.defaultof<String256>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "extensionName = %A" x.extensionName
                sprintf "specVersion = %A" x.specVersion
            ] |> sprintf "VkExtensionProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkFenceCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkFenceCreateFlags

        new(pNext: nativeint, flags: VkFenceCreateFlags) =
            {
                sType = 8u
                pNext = pNext
                flags = flags
            }

        new(flags: VkFenceCreateFlags) =
            VkFenceCreateInfo(Unchecked.defaultof<nativeint>, flags)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkFenceCreateFlags>

        static member Empty =
            VkFenceCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFenceCreateFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkFenceCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkFormatProperties =
    struct
        val mutable public linearTilingFeatures : VkFormatFeatureFlags
        val mutable public optimalTilingFeatures : VkFormatFeatureFlags
        val mutable public bufferFeatures : VkFormatFeatureFlags

        new(linearTilingFeatures: VkFormatFeatureFlags, optimalTilingFeatures: VkFormatFeatureFlags, bufferFeatures: VkFormatFeatureFlags) =
            {
                linearTilingFeatures = linearTilingFeatures
                optimalTilingFeatures = optimalTilingFeatures
                bufferFeatures = bufferFeatures
            }

        member x.IsEmpty =
            x.linearTilingFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.optimalTilingFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.bufferFeatures = Unchecked.defaultof<VkFormatFeatureFlags>

        static member Empty =
            VkFormatProperties(Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkFormatFeatureFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "linearTilingFeatures = %A" x.linearTilingFeatures
                sprintf "optimalTilingFeatures = %A" x.optimalTilingFeatures
                sprintf "bufferFeatures = %A" x.bufferFeatures
            ] |> sprintf "VkFormatProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkFramebufferCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkFramebufferCreateFlags
        val mutable public renderPass : VkRenderPass
        val mutable public attachmentCount : uint32
        val mutable public pAttachments : nativeptr<VkImageView>
        val mutable public width : uint32
        val mutable public height : uint32
        val mutable public layers : uint32

        new(pNext: nativeint, flags: VkFramebufferCreateFlags, renderPass: VkRenderPass, attachmentCount: uint32, pAttachments: nativeptr<VkImageView>, width: uint32, height: uint32, layers: uint32) =
            {
                sType = 37u
                pNext = pNext
                flags = flags
                renderPass = renderPass
                attachmentCount = attachmentCount
                pAttachments = pAttachments
                width = width
                height = height
                layers = layers
            }

        new(flags: VkFramebufferCreateFlags, renderPass: VkRenderPass, attachmentCount: uint32, pAttachments: nativeptr<VkImageView>, width: uint32, height: uint32, layers: uint32) =
            VkFramebufferCreateInfo(Unchecked.defaultof<nativeint>, flags, renderPass, attachmentCount, pAttachments, width, height, layers)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkFramebufferCreateFlags> && x.renderPass = Unchecked.defaultof<VkRenderPass> && x.attachmentCount = Unchecked.defaultof<uint32> && x.pAttachments = Unchecked.defaultof<nativeptr<VkImageView>> && x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32> && x.layers = Unchecked.defaultof<uint32>

        static member Empty =
            VkFramebufferCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFramebufferCreateFlags>, Unchecked.defaultof<VkRenderPass>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageView>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "renderPass = %A" x.renderPass
                sprintf "attachmentCount = %A" x.attachmentCount
                sprintf "pAttachments = %A" x.pAttachments
                sprintf "width = %A" x.width
                sprintf "height = %A" x.height
                sprintf "layers = %A" x.layers
            ] |> sprintf "VkFramebufferCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkVertexInputBindingDescription =
    struct
        val mutable public binding : uint32
        val mutable public stride : uint32
        val mutable public inputRate : VkVertexInputRate

        new(binding: uint32, stride: uint32, inputRate: VkVertexInputRate) =
            {
                binding = binding
                stride = stride
                inputRate = inputRate
            }

        member x.IsEmpty =
            x.binding = Unchecked.defaultof<uint32> && x.stride = Unchecked.defaultof<uint32> && x.inputRate = Unchecked.defaultof<VkVertexInputRate>

        static member Empty =
            VkVertexInputBindingDescription(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkVertexInputRate>)

        override x.ToString() =
            String.concat "; " [
                sprintf "binding = %A" x.binding
                sprintf "stride = %A" x.stride
                sprintf "inputRate = %A" x.inputRate
            ] |> sprintf "VkVertexInputBindingDescription { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkVertexInputAttributeDescription =
    struct
        val mutable public location : uint32
        val mutable public binding : uint32
        val mutable public format : VkFormat
        val mutable public offset : uint32

        new(location: uint32, binding: uint32, format: VkFormat, offset: uint32) =
            {
                location = location
                binding = binding
                format = format
                offset = offset
            }

        member x.IsEmpty =
            x.location = Unchecked.defaultof<uint32> && x.binding = Unchecked.defaultof<uint32> && x.format = Unchecked.defaultof<VkFormat> && x.offset = Unchecked.defaultof<uint32>

        static member Empty =
            VkVertexInputAttributeDescription(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "location = %A" x.location
                sprintf "binding = %A" x.binding
                sprintf "format = %A" x.format
                sprintf "offset = %A" x.offset
            ] |> sprintf "VkVertexInputAttributeDescription { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineVertexInputStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineVertexInputStateCreateFlags
        val mutable public vertexBindingDescriptionCount : uint32
        val mutable public pVertexBindingDescriptions : nativeptr<VkVertexInputBindingDescription>
        val mutable public vertexAttributeDescriptionCount : uint32
        val mutable public pVertexAttributeDescriptions : nativeptr<VkVertexInputAttributeDescription>

        new(pNext: nativeint, flags: VkPipelineVertexInputStateCreateFlags, vertexBindingDescriptionCount: uint32, pVertexBindingDescriptions: nativeptr<VkVertexInputBindingDescription>, vertexAttributeDescriptionCount: uint32, pVertexAttributeDescriptions: nativeptr<VkVertexInputAttributeDescription>) =
            {
                sType = 19u
                pNext = pNext
                flags = flags
                vertexBindingDescriptionCount = vertexBindingDescriptionCount
                pVertexBindingDescriptions = pVertexBindingDescriptions
                vertexAttributeDescriptionCount = vertexAttributeDescriptionCount
                pVertexAttributeDescriptions = pVertexAttributeDescriptions
            }

        new(flags: VkPipelineVertexInputStateCreateFlags, vertexBindingDescriptionCount: uint32, pVertexBindingDescriptions: nativeptr<VkVertexInputBindingDescription>, vertexAttributeDescriptionCount: uint32, pVertexAttributeDescriptions: nativeptr<VkVertexInputAttributeDescription>) =
            VkPipelineVertexInputStateCreateInfo(Unchecked.defaultof<nativeint>, flags, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineVertexInputStateCreateFlags> && x.vertexBindingDescriptionCount = Unchecked.defaultof<uint32> && x.pVertexBindingDescriptions = Unchecked.defaultof<nativeptr<VkVertexInputBindingDescription>> && x.vertexAttributeDescriptionCount = Unchecked.defaultof<uint32> && x.pVertexAttributeDescriptions = Unchecked.defaultof<nativeptr<VkVertexInputAttributeDescription>>

        static member Empty =
            VkPipelineVertexInputStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineVertexInputStateCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVertexInputBindingDescription>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVertexInputAttributeDescription>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "vertexBindingDescriptionCount = %A" x.vertexBindingDescriptionCount
                sprintf "pVertexBindingDescriptions = %A" x.pVertexBindingDescriptions
                sprintf "vertexAttributeDescriptionCount = %A" x.vertexAttributeDescriptionCount
                sprintf "pVertexAttributeDescriptions = %A" x.pVertexAttributeDescriptions
            ] |> sprintf "VkPipelineVertexInputStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineInputAssemblyStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineInputAssemblyStateCreateFlags
        val mutable public topology : VkPrimitiveTopology
        val mutable public primitiveRestartEnable : VkBool32

        new(pNext: nativeint, flags: VkPipelineInputAssemblyStateCreateFlags, topology: VkPrimitiveTopology, primitiveRestartEnable: VkBool32) =
            {
                sType = 20u
                pNext = pNext
                flags = flags
                topology = topology
                primitiveRestartEnable = primitiveRestartEnable
            }

        new(flags: VkPipelineInputAssemblyStateCreateFlags, topology: VkPrimitiveTopology, primitiveRestartEnable: VkBool32) =
            VkPipelineInputAssemblyStateCreateInfo(Unchecked.defaultof<nativeint>, flags, topology, primitiveRestartEnable)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineInputAssemblyStateCreateFlags> && x.topology = Unchecked.defaultof<VkPrimitiveTopology> && x.primitiveRestartEnable = Unchecked.defaultof<VkBool32>

        static member Empty =
            VkPipelineInputAssemblyStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineInputAssemblyStateCreateFlags>, Unchecked.defaultof<VkPrimitiveTopology>, Unchecked.defaultof<VkBool32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "topology = %A" x.topology
                sprintf "primitiveRestartEnable = %A" x.primitiveRestartEnable
            ] |> sprintf "VkPipelineInputAssemblyStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineTessellationStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineTessellationStateCreateFlags
        val mutable public patchControlPoints : uint32

        new(pNext: nativeint, flags: VkPipelineTessellationStateCreateFlags, patchControlPoints: uint32) =
            {
                sType = 21u
                pNext = pNext
                flags = flags
                patchControlPoints = patchControlPoints
            }

        new(flags: VkPipelineTessellationStateCreateFlags, patchControlPoints: uint32) =
            VkPipelineTessellationStateCreateInfo(Unchecked.defaultof<nativeint>, flags, patchControlPoints)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineTessellationStateCreateFlags> && x.patchControlPoints = Unchecked.defaultof<uint32>

        static member Empty =
            VkPipelineTessellationStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineTessellationStateCreateFlags>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "patchControlPoints = %A" x.patchControlPoints
            ] |> sprintf "VkPipelineTessellationStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkViewport =
    struct
        val mutable public x : float32
        val mutable public y : float32
        val mutable public width : float32
        val mutable public height : float32
        val mutable public minDepth : float32
        val mutable public maxDepth : float32

        new(x: float32, y: float32, width: float32, height: float32, minDepth: float32, maxDepth: float32) =
            {
                x = x
                y = y
                width = width
                height = height
                minDepth = minDepth
                maxDepth = maxDepth
            }

        member x.IsEmpty =
            x.x = Unchecked.defaultof<float32> && x.y = Unchecked.defaultof<float32> && x.width = Unchecked.defaultof<float32> && x.height = Unchecked.defaultof<float32> && x.minDepth = Unchecked.defaultof<float32> && x.maxDepth = Unchecked.defaultof<float32>

        static member Empty =
            VkViewport(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "x = %A" x.x
                sprintf "y = %A" x.y
                sprintf "width = %A" x.width
                sprintf "height = %A" x.height
                sprintf "minDepth = %A" x.minDepth
                sprintf "maxDepth = %A" x.maxDepth
            ] |> sprintf "VkViewport { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineViewportStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineViewportStateCreateFlags
        val mutable public viewportCount : uint32
        val mutable public pViewports : nativeptr<VkViewport>
        val mutable public scissorCount : uint32
        val mutable public pScissors : nativeptr<VkRect2D>

        new(pNext: nativeint, flags: VkPipelineViewportStateCreateFlags, viewportCount: uint32, pViewports: nativeptr<VkViewport>, scissorCount: uint32, pScissors: nativeptr<VkRect2D>) =
            {
                sType = 22u
                pNext = pNext
                flags = flags
                viewportCount = viewportCount
                pViewports = pViewports
                scissorCount = scissorCount
                pScissors = pScissors
            }

        new(flags: VkPipelineViewportStateCreateFlags, viewportCount: uint32, pViewports: nativeptr<VkViewport>, scissorCount: uint32, pScissors: nativeptr<VkRect2D>) =
            VkPipelineViewportStateCreateInfo(Unchecked.defaultof<nativeint>, flags, viewportCount, pViewports, scissorCount, pScissors)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineViewportStateCreateFlags> && x.viewportCount = Unchecked.defaultof<uint32> && x.pViewports = Unchecked.defaultof<nativeptr<VkViewport>> && x.scissorCount = Unchecked.defaultof<uint32> && x.pScissors = Unchecked.defaultof<nativeptr<VkRect2D>>

        static member Empty =
            VkPipelineViewportStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineViewportStateCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkViewport>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRect2D>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "viewportCount = %A" x.viewportCount
                sprintf "pViewports = %A" x.pViewports
                sprintf "scissorCount = %A" x.scissorCount
                sprintf "pScissors = %A" x.pScissors
            ] |> sprintf "VkPipelineViewportStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineRasterizationStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineRasterizationStateCreateFlags
        val mutable public depthClampEnable : VkBool32
        val mutable public rasterizerDiscardEnable : VkBool32
        val mutable public polygonMode : VkPolygonMode
        val mutable public cullMode : VkCullModeFlags
        val mutable public frontFace : VkFrontFace
        val mutable public depthBiasEnable : VkBool32
        val mutable public depthBiasConstantFactor : float32
        val mutable public depthBiasClamp : float32
        val mutable public depthBiasSlopeFactor : float32
        val mutable public lineWidth : float32

        new(pNext: nativeint, flags: VkPipelineRasterizationStateCreateFlags, depthClampEnable: VkBool32, rasterizerDiscardEnable: VkBool32, polygonMode: VkPolygonMode, cullMode: VkCullModeFlags, frontFace: VkFrontFace, depthBiasEnable: VkBool32, depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32, lineWidth: float32) =
            {
                sType = 23u
                pNext = pNext
                flags = flags
                depthClampEnable = depthClampEnable
                rasterizerDiscardEnable = rasterizerDiscardEnable
                polygonMode = polygonMode
                cullMode = cullMode
                frontFace = frontFace
                depthBiasEnable = depthBiasEnable
                depthBiasConstantFactor = depthBiasConstantFactor
                depthBiasClamp = depthBiasClamp
                depthBiasSlopeFactor = depthBiasSlopeFactor
                lineWidth = lineWidth
            }

        new(flags: VkPipelineRasterizationStateCreateFlags, depthClampEnable: VkBool32, rasterizerDiscardEnable: VkBool32, polygonMode: VkPolygonMode, cullMode: VkCullModeFlags, frontFace: VkFrontFace, depthBiasEnable: VkBool32, depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32, lineWidth: float32) =
            VkPipelineRasterizationStateCreateInfo(Unchecked.defaultof<nativeint>, flags, depthClampEnable, rasterizerDiscardEnable, polygonMode, cullMode, frontFace, depthBiasEnable, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor, lineWidth)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineRasterizationStateCreateFlags> && x.depthClampEnable = Unchecked.defaultof<VkBool32> && x.rasterizerDiscardEnable = Unchecked.defaultof<VkBool32> && x.polygonMode = Unchecked.defaultof<VkPolygonMode> && x.cullMode = Unchecked.defaultof<VkCullModeFlags> && x.frontFace = Unchecked.defaultof<VkFrontFace> && x.depthBiasEnable = Unchecked.defaultof<VkBool32> && x.depthBiasConstantFactor = Unchecked.defaultof<float32> && x.depthBiasClamp = Unchecked.defaultof<float32> && x.depthBiasSlopeFactor = Unchecked.defaultof<float32> && x.lineWidth = Unchecked.defaultof<float32>

        static member Empty =
            VkPipelineRasterizationStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineRasterizationStateCreateFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkPolygonMode>, Unchecked.defaultof<VkCullModeFlags>, Unchecked.defaultof<VkFrontFace>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "depthClampEnable = %A" x.depthClampEnable
                sprintf "rasterizerDiscardEnable = %A" x.rasterizerDiscardEnable
                sprintf "polygonMode = %A" x.polygonMode
                sprintf "cullMode = %A" x.cullMode
                sprintf "frontFace = %A" x.frontFace
                sprintf "depthBiasEnable = %A" x.depthBiasEnable
                sprintf "depthBiasConstantFactor = %A" x.depthBiasConstantFactor
                sprintf "depthBiasClamp = %A" x.depthBiasClamp
                sprintf "depthBiasSlopeFactor = %A" x.depthBiasSlopeFactor
                sprintf "lineWidth = %A" x.lineWidth
            ] |> sprintf "VkPipelineRasterizationStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineMultisampleStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineMultisampleStateCreateFlags
        val mutable public rasterizationSamples : VkSampleCountFlags
        val mutable public sampleShadingEnable : VkBool32
        val mutable public minSampleShading : float32
        val mutable public pSampleMask : nativeptr<VkSampleMask>
        val mutable public alphaToCoverageEnable : VkBool32
        val mutable public alphaToOneEnable : VkBool32

        new(pNext: nativeint, flags: VkPipelineMultisampleStateCreateFlags, rasterizationSamples: VkSampleCountFlags, sampleShadingEnable: VkBool32, minSampleShading: float32, pSampleMask: nativeptr<VkSampleMask>, alphaToCoverageEnable: VkBool32, alphaToOneEnable: VkBool32) =
            {
                sType = 24u
                pNext = pNext
                flags = flags
                rasterizationSamples = rasterizationSamples
                sampleShadingEnable = sampleShadingEnable
                minSampleShading = minSampleShading
                pSampleMask = pSampleMask
                alphaToCoverageEnable = alphaToCoverageEnable
                alphaToOneEnable = alphaToOneEnable
            }

        new(flags: VkPipelineMultisampleStateCreateFlags, rasterizationSamples: VkSampleCountFlags, sampleShadingEnable: VkBool32, minSampleShading: float32, pSampleMask: nativeptr<VkSampleMask>, alphaToCoverageEnable: VkBool32, alphaToOneEnable: VkBool32) =
            VkPipelineMultisampleStateCreateInfo(Unchecked.defaultof<nativeint>, flags, rasterizationSamples, sampleShadingEnable, minSampleShading, pSampleMask, alphaToCoverageEnable, alphaToOneEnable)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineMultisampleStateCreateFlags> && x.rasterizationSamples = Unchecked.defaultof<VkSampleCountFlags> && x.sampleShadingEnable = Unchecked.defaultof<VkBool32> && x.minSampleShading = Unchecked.defaultof<float32> && x.pSampleMask = Unchecked.defaultof<nativeptr<VkSampleMask>> && x.alphaToCoverageEnable = Unchecked.defaultof<VkBool32> && x.alphaToOneEnable = Unchecked.defaultof<VkBool32>

        static member Empty =
            VkPipelineMultisampleStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineMultisampleStateCreateFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<float32>, Unchecked.defaultof<nativeptr<VkSampleMask>>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "rasterizationSamples = %A" x.rasterizationSamples
                sprintf "sampleShadingEnable = %A" x.sampleShadingEnable
                sprintf "minSampleShading = %A" x.minSampleShading
                sprintf "pSampleMask = %A" x.pSampleMask
                sprintf "alphaToCoverageEnable = %A" x.alphaToCoverageEnable
                sprintf "alphaToOneEnable = %A" x.alphaToOneEnable
            ] |> sprintf "VkPipelineMultisampleStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkStencilOpState =
    struct
        val mutable public failOp : VkStencilOp
        val mutable public passOp : VkStencilOp
        val mutable public depthFailOp : VkStencilOp
        val mutable public compareOp : VkCompareOp
        val mutable public compareMask : uint32
        val mutable public writeMask : uint32
        val mutable public reference : uint32

        new(failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp, compareMask: uint32, writeMask: uint32, reference: uint32) =
            {
                failOp = failOp
                passOp = passOp
                depthFailOp = depthFailOp
                compareOp = compareOp
                compareMask = compareMask
                writeMask = writeMask
                reference = reference
            }

        member x.IsEmpty =
            x.failOp = Unchecked.defaultof<VkStencilOp> && x.passOp = Unchecked.defaultof<VkStencilOp> && x.depthFailOp = Unchecked.defaultof<VkStencilOp> && x.compareOp = Unchecked.defaultof<VkCompareOp> && x.compareMask = Unchecked.defaultof<uint32> && x.writeMask = Unchecked.defaultof<uint32> && x.reference = Unchecked.defaultof<uint32>

        static member Empty =
            VkStencilOpState(Unchecked.defaultof<VkStencilOp>, Unchecked.defaultof<VkStencilOp>, Unchecked.defaultof<VkStencilOp>, Unchecked.defaultof<VkCompareOp>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "failOp = %A" x.failOp
                sprintf "passOp = %A" x.passOp
                sprintf "depthFailOp = %A" x.depthFailOp
                sprintf "compareOp = %A" x.compareOp
                sprintf "compareMask = %A" x.compareMask
                sprintf "writeMask = %A" x.writeMask
                sprintf "reference = %A" x.reference
            ] |> sprintf "VkStencilOpState { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineDepthStencilStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineDepthStencilStateCreateFlags
        val mutable public depthTestEnable : VkBool32
        val mutable public depthWriteEnable : VkBool32
        val mutable public depthCompareOp : VkCompareOp
        val mutable public depthBoundsTestEnable : VkBool32
        val mutable public stencilTestEnable : VkBool32
        val mutable public front : VkStencilOpState
        val mutable public back : VkStencilOpState
        val mutable public minDepthBounds : float32
        val mutable public maxDepthBounds : float32

        new(pNext: nativeint, flags: VkPipelineDepthStencilStateCreateFlags, depthTestEnable: VkBool32, depthWriteEnable: VkBool32, depthCompareOp: VkCompareOp, depthBoundsTestEnable: VkBool32, stencilTestEnable: VkBool32, front: VkStencilOpState, back: VkStencilOpState, minDepthBounds: float32, maxDepthBounds: float32) =
            {
                sType = 25u
                pNext = pNext
                flags = flags
                depthTestEnable = depthTestEnable
                depthWriteEnable = depthWriteEnable
                depthCompareOp = depthCompareOp
                depthBoundsTestEnable = depthBoundsTestEnable
                stencilTestEnable = stencilTestEnable
                front = front
                back = back
                minDepthBounds = minDepthBounds
                maxDepthBounds = maxDepthBounds
            }

        new(flags: VkPipelineDepthStencilStateCreateFlags, depthTestEnable: VkBool32, depthWriteEnable: VkBool32, depthCompareOp: VkCompareOp, depthBoundsTestEnable: VkBool32, stencilTestEnable: VkBool32, front: VkStencilOpState, back: VkStencilOpState, minDepthBounds: float32, maxDepthBounds: float32) =
            VkPipelineDepthStencilStateCreateInfo(Unchecked.defaultof<nativeint>, flags, depthTestEnable, depthWriteEnable, depthCompareOp, depthBoundsTestEnable, stencilTestEnable, front, back, minDepthBounds, maxDepthBounds)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineDepthStencilStateCreateFlags> && x.depthTestEnable = Unchecked.defaultof<VkBool32> && x.depthWriteEnable = Unchecked.defaultof<VkBool32> && x.depthCompareOp = Unchecked.defaultof<VkCompareOp> && x.depthBoundsTestEnable = Unchecked.defaultof<VkBool32> && x.stencilTestEnable = Unchecked.defaultof<VkBool32> && x.front = Unchecked.defaultof<VkStencilOpState> && x.back = Unchecked.defaultof<VkStencilOpState> && x.minDepthBounds = Unchecked.defaultof<float32> && x.maxDepthBounds = Unchecked.defaultof<float32>

        static member Empty =
            VkPipelineDepthStencilStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineDepthStencilStateCreateFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkCompareOp>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkStencilOpState>, Unchecked.defaultof<VkStencilOpState>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "depthTestEnable = %A" x.depthTestEnable
                sprintf "depthWriteEnable = %A" x.depthWriteEnable
                sprintf "depthCompareOp = %A" x.depthCompareOp
                sprintf "depthBoundsTestEnable = %A" x.depthBoundsTestEnable
                sprintf "stencilTestEnable = %A" x.stencilTestEnable
                sprintf "front = %A" x.front
                sprintf "back = %A" x.back
                sprintf "minDepthBounds = %A" x.minDepthBounds
                sprintf "maxDepthBounds = %A" x.maxDepthBounds
            ] |> sprintf "VkPipelineDepthStencilStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineColorBlendAttachmentState =
    struct
        val mutable public blendEnable : VkBool32
        val mutable public srcColorBlendFactor : VkBlendFactor
        val mutable public dstColorBlendFactor : VkBlendFactor
        val mutable public colorBlendOp : VkBlendOp
        val mutable public srcAlphaBlendFactor : VkBlendFactor
        val mutable public dstAlphaBlendFactor : VkBlendFactor
        val mutable public alphaBlendOp : VkBlendOp
        val mutable public colorWriteMask : VkColorComponentFlags

        new(blendEnable: VkBool32, srcColorBlendFactor: VkBlendFactor, dstColorBlendFactor: VkBlendFactor, colorBlendOp: VkBlendOp, srcAlphaBlendFactor: VkBlendFactor, dstAlphaBlendFactor: VkBlendFactor, alphaBlendOp: VkBlendOp, colorWriteMask: VkColorComponentFlags) =
            {
                blendEnable = blendEnable
                srcColorBlendFactor = srcColorBlendFactor
                dstColorBlendFactor = dstColorBlendFactor
                colorBlendOp = colorBlendOp
                srcAlphaBlendFactor = srcAlphaBlendFactor
                dstAlphaBlendFactor = dstAlphaBlendFactor
                alphaBlendOp = alphaBlendOp
                colorWriteMask = colorWriteMask
            }

        member x.IsEmpty =
            x.blendEnable = Unchecked.defaultof<VkBool32> && x.srcColorBlendFactor = Unchecked.defaultof<VkBlendFactor> && x.dstColorBlendFactor = Unchecked.defaultof<VkBlendFactor> && x.colorBlendOp = Unchecked.defaultof<VkBlendOp> && x.srcAlphaBlendFactor = Unchecked.defaultof<VkBlendFactor> && x.dstAlphaBlendFactor = Unchecked.defaultof<VkBlendFactor> && x.alphaBlendOp = Unchecked.defaultof<VkBlendOp> && x.colorWriteMask = Unchecked.defaultof<VkColorComponentFlags>

        static member Empty =
            VkPipelineColorBlendAttachmentState(Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBlendFactor>, Unchecked.defaultof<VkBlendFactor>, Unchecked.defaultof<VkBlendOp>, Unchecked.defaultof<VkBlendFactor>, Unchecked.defaultof<VkBlendFactor>, Unchecked.defaultof<VkBlendOp>, Unchecked.defaultof<VkColorComponentFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "blendEnable = %A" x.blendEnable
                sprintf "srcColorBlendFactor = %A" x.srcColorBlendFactor
                sprintf "dstColorBlendFactor = %A" x.dstColorBlendFactor
                sprintf "colorBlendOp = %A" x.colorBlendOp
                sprintf "srcAlphaBlendFactor = %A" x.srcAlphaBlendFactor
                sprintf "dstAlphaBlendFactor = %A" x.dstAlphaBlendFactor
                sprintf "alphaBlendOp = %A" x.alphaBlendOp
                sprintf "colorWriteMask = %A" x.colorWriteMask
            ] |> sprintf "VkPipelineColorBlendAttachmentState { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineColorBlendStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineColorBlendStateCreateFlags
        val mutable public logicOpEnable : VkBool32
        val mutable public logicOp : VkLogicOp
        val mutable public attachmentCount : uint32
        val mutable public pAttachments : nativeptr<VkPipelineColorBlendAttachmentState>
        val mutable public blendConstants : V4f

        new(pNext: nativeint, flags: VkPipelineColorBlendStateCreateFlags, logicOpEnable: VkBool32, logicOp: VkLogicOp, attachmentCount: uint32, pAttachments: nativeptr<VkPipelineColorBlendAttachmentState>, blendConstants: V4f) =
            {
                sType = 26u
                pNext = pNext
                flags = flags
                logicOpEnable = logicOpEnable
                logicOp = logicOp
                attachmentCount = attachmentCount
                pAttachments = pAttachments
                blendConstants = blendConstants
            }

        new(flags: VkPipelineColorBlendStateCreateFlags, logicOpEnable: VkBool32, logicOp: VkLogicOp, attachmentCount: uint32, pAttachments: nativeptr<VkPipelineColorBlendAttachmentState>, blendConstants: V4f) =
            VkPipelineColorBlendStateCreateInfo(Unchecked.defaultof<nativeint>, flags, logicOpEnable, logicOp, attachmentCount, pAttachments, blendConstants)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineColorBlendStateCreateFlags> && x.logicOpEnable = Unchecked.defaultof<VkBool32> && x.logicOp = Unchecked.defaultof<VkLogicOp> && x.attachmentCount = Unchecked.defaultof<uint32> && x.pAttachments = Unchecked.defaultof<nativeptr<VkPipelineColorBlendAttachmentState>> && x.blendConstants = Unchecked.defaultof<V4f>

        static member Empty =
            VkPipelineColorBlendStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineColorBlendStateCreateFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkLogicOp>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineColorBlendAttachmentState>>, Unchecked.defaultof<V4f>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "logicOpEnable = %A" x.logicOpEnable
                sprintf "logicOp = %A" x.logicOp
                sprintf "attachmentCount = %A" x.attachmentCount
                sprintf "pAttachments = %A" x.pAttachments
                sprintf "blendConstants = %A" x.blendConstants
            ] |> sprintf "VkPipelineColorBlendStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineDynamicStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineDynamicStateCreateFlags
        val mutable public dynamicStateCount : uint32
        val mutable public pDynamicStates : nativeptr<VkDynamicState>

        new(pNext: nativeint, flags: VkPipelineDynamicStateCreateFlags, dynamicStateCount: uint32, pDynamicStates: nativeptr<VkDynamicState>) =
            {
                sType = 27u
                pNext = pNext
                flags = flags
                dynamicStateCount = dynamicStateCount
                pDynamicStates = pDynamicStates
            }

        new(flags: VkPipelineDynamicStateCreateFlags, dynamicStateCount: uint32, pDynamicStates: nativeptr<VkDynamicState>) =
            VkPipelineDynamicStateCreateInfo(Unchecked.defaultof<nativeint>, flags, dynamicStateCount, pDynamicStates)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineDynamicStateCreateFlags> && x.dynamicStateCount = Unchecked.defaultof<uint32> && x.pDynamicStates = Unchecked.defaultof<nativeptr<VkDynamicState>>

        static member Empty =
            VkPipelineDynamicStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineDynamicStateCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDynamicState>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "dynamicStateCount = %A" x.dynamicStateCount
                sprintf "pDynamicStates = %A" x.pDynamicStates
            ] |> sprintf "VkPipelineDynamicStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkGraphicsPipelineCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineCreateFlags
        val mutable public stageCount : uint32
        val mutable public pStages : nativeptr<VkPipelineShaderStageCreateInfo>
        val mutable public pVertexInputState : nativeptr<VkPipelineVertexInputStateCreateInfo>
        val mutable public pInputAssemblyState : nativeptr<VkPipelineInputAssemblyStateCreateInfo>
        val mutable public pTessellationState : nativeptr<VkPipelineTessellationStateCreateInfo>
        val mutable public pViewportState : nativeptr<VkPipelineViewportStateCreateInfo>
        val mutable public pRasterizationState : nativeptr<VkPipelineRasterizationStateCreateInfo>
        val mutable public pMultisampleState : nativeptr<VkPipelineMultisampleStateCreateInfo>
        val mutable public pDepthStencilState : nativeptr<VkPipelineDepthStencilStateCreateInfo>
        val mutable public pColorBlendState : nativeptr<VkPipelineColorBlendStateCreateInfo>
        val mutable public pDynamicState : nativeptr<VkPipelineDynamicStateCreateInfo>
        val mutable public layout : VkPipelineLayout
        val mutable public renderPass : VkRenderPass
        val mutable public subpass : uint32
        val mutable public basePipelineHandle : VkPipeline
        val mutable public basePipelineIndex : int32

        new(pNext: nativeint, flags: VkPipelineCreateFlags, stageCount: uint32, pStages: nativeptr<VkPipelineShaderStageCreateInfo>, pVertexInputState: nativeptr<VkPipelineVertexInputStateCreateInfo>, pInputAssemblyState: nativeptr<VkPipelineInputAssemblyStateCreateInfo>, pTessellationState: nativeptr<VkPipelineTessellationStateCreateInfo>, pViewportState: nativeptr<VkPipelineViewportStateCreateInfo>, pRasterizationState: nativeptr<VkPipelineRasterizationStateCreateInfo>, pMultisampleState: nativeptr<VkPipelineMultisampleStateCreateInfo>, pDepthStencilState: nativeptr<VkPipelineDepthStencilStateCreateInfo>, pColorBlendState: nativeptr<VkPipelineColorBlendStateCreateInfo>, pDynamicState: nativeptr<VkPipelineDynamicStateCreateInfo>, layout: VkPipelineLayout, renderPass: VkRenderPass, subpass: uint32, basePipelineHandle: VkPipeline, basePipelineIndex: int32) =
            {
                sType = 28u
                pNext = pNext
                flags = flags
                stageCount = stageCount
                pStages = pStages
                pVertexInputState = pVertexInputState
                pInputAssemblyState = pInputAssemblyState
                pTessellationState = pTessellationState
                pViewportState = pViewportState
                pRasterizationState = pRasterizationState
                pMultisampleState = pMultisampleState
                pDepthStencilState = pDepthStencilState
                pColorBlendState = pColorBlendState
                pDynamicState = pDynamicState
                layout = layout
                renderPass = renderPass
                subpass = subpass
                basePipelineHandle = basePipelineHandle
                basePipelineIndex = basePipelineIndex
            }

        new(flags: VkPipelineCreateFlags, stageCount: uint32, pStages: nativeptr<VkPipelineShaderStageCreateInfo>, pVertexInputState: nativeptr<VkPipelineVertexInputStateCreateInfo>, pInputAssemblyState: nativeptr<VkPipelineInputAssemblyStateCreateInfo>, pTessellationState: nativeptr<VkPipelineTessellationStateCreateInfo>, pViewportState: nativeptr<VkPipelineViewportStateCreateInfo>, pRasterizationState: nativeptr<VkPipelineRasterizationStateCreateInfo>, pMultisampleState: nativeptr<VkPipelineMultisampleStateCreateInfo>, pDepthStencilState: nativeptr<VkPipelineDepthStencilStateCreateInfo>, pColorBlendState: nativeptr<VkPipelineColorBlendStateCreateInfo>, pDynamicState: nativeptr<VkPipelineDynamicStateCreateInfo>, layout: VkPipelineLayout, renderPass: VkRenderPass, subpass: uint32, basePipelineHandle: VkPipeline, basePipelineIndex: int32) =
            VkGraphicsPipelineCreateInfo(Unchecked.defaultof<nativeint>, flags, stageCount, pStages, pVertexInputState, pInputAssemblyState, pTessellationState, pViewportState, pRasterizationState, pMultisampleState, pDepthStencilState, pColorBlendState, pDynamicState, layout, renderPass, subpass, basePipelineHandle, basePipelineIndex)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCreateFlags> && x.stageCount = Unchecked.defaultof<uint32> && x.pStages = Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>> && x.pVertexInputState = Unchecked.defaultof<nativeptr<VkPipelineVertexInputStateCreateInfo>> && x.pInputAssemblyState = Unchecked.defaultof<nativeptr<VkPipelineInputAssemblyStateCreateInfo>> && x.pTessellationState = Unchecked.defaultof<nativeptr<VkPipelineTessellationStateCreateInfo>> && x.pViewportState = Unchecked.defaultof<nativeptr<VkPipelineViewportStateCreateInfo>> && x.pRasterizationState = Unchecked.defaultof<nativeptr<VkPipelineRasterizationStateCreateInfo>> && x.pMultisampleState = Unchecked.defaultof<nativeptr<VkPipelineMultisampleStateCreateInfo>> && x.pDepthStencilState = Unchecked.defaultof<nativeptr<VkPipelineDepthStencilStateCreateInfo>> && x.pColorBlendState = Unchecked.defaultof<nativeptr<VkPipelineColorBlendStateCreateInfo>> && x.pDynamicState = Unchecked.defaultof<nativeptr<VkPipelineDynamicStateCreateInfo>> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.renderPass = Unchecked.defaultof<VkRenderPass> && x.subpass = Unchecked.defaultof<uint32> && x.basePipelineHandle = Unchecked.defaultof<VkPipeline> && x.basePipelineIndex = Unchecked.defaultof<int32>

        static member Empty =
            VkGraphicsPipelineCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineVertexInputStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineInputAssemblyStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineTessellationStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineViewportStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineRasterizationStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineMultisampleStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineDepthStencilStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineColorBlendStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineDynamicStateCreateInfo>>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<VkRenderPass>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<int32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "stageCount = %A" x.stageCount
                sprintf "pStages = %A" x.pStages
                sprintf "pVertexInputState = %A" x.pVertexInputState
                sprintf "pInputAssemblyState = %A" x.pInputAssemblyState
                sprintf "pTessellationState = %A" x.pTessellationState
                sprintf "pViewportState = %A" x.pViewportState
                sprintf "pRasterizationState = %A" x.pRasterizationState
                sprintf "pMultisampleState = %A" x.pMultisampleState
                sprintf "pDepthStencilState = %A" x.pDepthStencilState
                sprintf "pColorBlendState = %A" x.pColorBlendState
                sprintf "pDynamicState = %A" x.pDynamicState
                sprintf "layout = %A" x.layout
                sprintf "renderPass = %A" x.renderPass
                sprintf "subpass = %A" x.subpass
                sprintf "basePipelineHandle = %A" x.basePipelineHandle
                sprintf "basePipelineIndex = %A" x.basePipelineIndex
            ] |> sprintf "VkGraphicsPipelineCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageBlit =
    struct
        val mutable public srcSubresource : VkImageSubresourceLayers
        val mutable public srcOffsets : VkOffset3D_2
        val mutable public dstSubresource : VkImageSubresourceLayers
        val mutable public dstOffsets : VkOffset3D_2

        new(srcSubresource: VkImageSubresourceLayers, srcOffsets: VkOffset3D_2, dstSubresource: VkImageSubresourceLayers, dstOffsets: VkOffset3D_2) =
            {
                srcSubresource = srcSubresource
                srcOffsets = srcOffsets
                dstSubresource = dstSubresource
                dstOffsets = dstOffsets
            }

        member x.IsEmpty =
            x.srcSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.srcOffsets = Unchecked.defaultof<VkOffset3D_2> && x.dstSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.dstOffsets = Unchecked.defaultof<VkOffset3D_2>

        static member Empty =
            VkImageBlit(Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D_2>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D_2>)

        override x.ToString() =
            String.concat "; " [
                sprintf "srcSubresource = %A" x.srcSubresource
                sprintf "srcOffsets = %A" x.srcOffsets
                sprintf "dstSubresource = %A" x.dstSubresource
                sprintf "dstOffsets = %A" x.dstOffsets
            ] |> sprintf "VkImageBlit { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageCopy =
    struct
        val mutable public srcSubresource : VkImageSubresourceLayers
        val mutable public srcOffset : VkOffset3D
        val mutable public dstSubresource : VkImageSubresourceLayers
        val mutable public dstOffset : VkOffset3D
        val mutable public extent : VkExtent3D

        new(srcSubresource: VkImageSubresourceLayers, srcOffset: VkOffset3D, dstSubresource: VkImageSubresourceLayers, dstOffset: VkOffset3D, extent: VkExtent3D) =
            {
                srcSubresource = srcSubresource
                srcOffset = srcOffset
                dstSubresource = dstSubresource
                dstOffset = dstOffset
                extent = extent
            }

        member x.IsEmpty =
            x.srcSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.srcOffset = Unchecked.defaultof<VkOffset3D> && x.dstSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.dstOffset = Unchecked.defaultof<VkOffset3D> && x.extent = Unchecked.defaultof<VkExtent3D>

        static member Empty =
            VkImageCopy(Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

        override x.ToString() =
            String.concat "; " [
                sprintf "srcSubresource = %A" x.srcSubresource
                sprintf "srcOffset = %A" x.srcOffset
                sprintf "dstSubresource = %A" x.dstSubresource
                sprintf "dstOffset = %A" x.dstOffset
                sprintf "extent = %A" x.extent
            ] |> sprintf "VkImageCopy { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkImageCreateFlags
        val mutable public imageType : VkImageType
        val mutable public format : VkFormat
        val mutable public extent : VkExtent3D
        val mutable public mipLevels : uint32
        val mutable public arrayLayers : uint32
        val mutable public samples : VkSampleCountFlags
        val mutable public tiling : VkImageTiling
        val mutable public usage : VkImageUsageFlags
        val mutable public sharingMode : VkSharingMode
        val mutable public queueFamilyIndexCount : uint32
        val mutable public pQueueFamilyIndices : nativeptr<uint32>
        val mutable public initialLayout : VkImageLayout

        new(pNext: nativeint, flags: VkImageCreateFlags, imageType: VkImageType, format: VkFormat, extent: VkExtent3D, mipLevels: uint32, arrayLayers: uint32, samples: VkSampleCountFlags, tiling: VkImageTiling, usage: VkImageUsageFlags, sharingMode: VkSharingMode, queueFamilyIndexCount: uint32, pQueueFamilyIndices: nativeptr<uint32>, initialLayout: VkImageLayout) =
            {
                sType = 14u
                pNext = pNext
                flags = flags
                imageType = imageType
                format = format
                extent = extent
                mipLevels = mipLevels
                arrayLayers = arrayLayers
                samples = samples
                tiling = tiling
                usage = usage
                sharingMode = sharingMode
                queueFamilyIndexCount = queueFamilyIndexCount
                pQueueFamilyIndices = pQueueFamilyIndices
                initialLayout = initialLayout
            }

        new(flags: VkImageCreateFlags, imageType: VkImageType, format: VkFormat, extent: VkExtent3D, mipLevels: uint32, arrayLayers: uint32, samples: VkSampleCountFlags, tiling: VkImageTiling, usage: VkImageUsageFlags, sharingMode: VkSharingMode, queueFamilyIndexCount: uint32, pQueueFamilyIndices: nativeptr<uint32>, initialLayout: VkImageLayout) =
            VkImageCreateInfo(Unchecked.defaultof<nativeint>, flags, imageType, format, extent, mipLevels, arrayLayers, samples, tiling, usage, sharingMode, queueFamilyIndexCount, pQueueFamilyIndices, initialLayout)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkImageCreateFlags> && x.imageType = Unchecked.defaultof<VkImageType> && x.format = Unchecked.defaultof<VkFormat> && x.extent = Unchecked.defaultof<VkExtent3D> && x.mipLevels = Unchecked.defaultof<uint32> && x.arrayLayers = Unchecked.defaultof<uint32> && x.samples = Unchecked.defaultof<VkSampleCountFlags> && x.tiling = Unchecked.defaultof<VkImageTiling> && x.usage = Unchecked.defaultof<VkImageUsageFlags> && x.sharingMode = Unchecked.defaultof<VkSharingMode> && x.queueFamilyIndexCount = Unchecked.defaultof<uint32> && x.pQueueFamilyIndices = Unchecked.defaultof<nativeptr<uint32>> && x.initialLayout = Unchecked.defaultof<VkImageLayout>

        static member Empty =
            VkImageCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageCreateFlags>, Unchecked.defaultof<VkImageType>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkExtent3D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkImageTiling>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<VkSharingMode>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<VkImageLayout>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "imageType = %A" x.imageType
                sprintf "format = %A" x.format
                sprintf "extent = %A" x.extent
                sprintf "mipLevels = %A" x.mipLevels
                sprintf "arrayLayers = %A" x.arrayLayers
                sprintf "samples = %A" x.samples
                sprintf "tiling = %A" x.tiling
                sprintf "usage = %A" x.usage
                sprintf "sharingMode = %A" x.sharingMode
                sprintf "queueFamilyIndexCount = %A" x.queueFamilyIndexCount
                sprintf "pQueueFamilyIndices = %A" x.pQueueFamilyIndices
                sprintf "initialLayout = %A" x.initialLayout
            ] |> sprintf "VkImageCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageFormatProperties =
    struct
        val mutable public maxExtent : VkExtent3D
        val mutable public maxMipLevels : uint32
        val mutable public maxArrayLayers : uint32
        val mutable public sampleCounts : VkSampleCountFlags
        val mutable public maxResourceSize : VkDeviceSize

        new(maxExtent: VkExtent3D, maxMipLevels: uint32, maxArrayLayers: uint32, sampleCounts: VkSampleCountFlags, maxResourceSize: VkDeviceSize) =
            {
                maxExtent = maxExtent
                maxMipLevels = maxMipLevels
                maxArrayLayers = maxArrayLayers
                sampleCounts = sampleCounts
                maxResourceSize = maxResourceSize
            }

        member x.IsEmpty =
            x.maxExtent = Unchecked.defaultof<VkExtent3D> && x.maxMipLevels = Unchecked.defaultof<uint32> && x.maxArrayLayers = Unchecked.defaultof<uint32> && x.sampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.maxResourceSize = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkImageFormatProperties(Unchecked.defaultof<VkExtent3D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "maxExtent = %A" x.maxExtent
                sprintf "maxMipLevels = %A" x.maxMipLevels
                sprintf "maxArrayLayers = %A" x.maxArrayLayers
                sprintf "sampleCounts = %A" x.sampleCounts
                sprintf "maxResourceSize = %A" x.maxResourceSize
            ] |> sprintf "VkImageFormatProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageSubresourceRange =
    struct
        val mutable public aspectMask : VkImageAspectFlags
        val mutable public baseMipLevel : uint32
        val mutable public levelCount : uint32
        val mutable public baseArrayLayer : uint32
        val mutable public layerCount : uint32

        new(aspectMask: VkImageAspectFlags, baseMipLevel: uint32, levelCount: uint32, baseArrayLayer: uint32, layerCount: uint32) =
            {
                aspectMask = aspectMask
                baseMipLevel = baseMipLevel
                levelCount = levelCount
                baseArrayLayer = baseArrayLayer
                layerCount = layerCount
            }

        member x.IsEmpty =
            x.aspectMask = Unchecked.defaultof<VkImageAspectFlags> && x.baseMipLevel = Unchecked.defaultof<uint32> && x.levelCount = Unchecked.defaultof<uint32> && x.baseArrayLayer = Unchecked.defaultof<uint32> && x.layerCount = Unchecked.defaultof<uint32>

        static member Empty =
            VkImageSubresourceRange(Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "aspectMask = %A" x.aspectMask
                sprintf "baseMipLevel = %A" x.baseMipLevel
                sprintf "levelCount = %A" x.levelCount
                sprintf "baseArrayLayer = %A" x.baseArrayLayer
                sprintf "layerCount = %A" x.layerCount
            ] |> sprintf "VkImageSubresourceRange { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageMemoryBarrier =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public srcAccessMask : VkAccessFlags
        val mutable public dstAccessMask : VkAccessFlags
        val mutable public oldLayout : VkImageLayout
        val mutable public newLayout : VkImageLayout
        val mutable public srcQueueFamilyIndex : uint32
        val mutable public dstQueueFamilyIndex : uint32
        val mutable public image : VkImage
        val mutable public subresourceRange : VkImageSubresourceRange

        new(pNext: nativeint, srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags, oldLayout: VkImageLayout, newLayout: VkImageLayout, srcQueueFamilyIndex: uint32, dstQueueFamilyIndex: uint32, image: VkImage, subresourceRange: VkImageSubresourceRange) =
            {
                sType = 45u
                pNext = pNext
                srcAccessMask = srcAccessMask
                dstAccessMask = dstAccessMask
                oldLayout = oldLayout
                newLayout = newLayout
                srcQueueFamilyIndex = srcQueueFamilyIndex
                dstQueueFamilyIndex = dstQueueFamilyIndex
                image = image
                subresourceRange = subresourceRange
            }

        new(srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags, oldLayout: VkImageLayout, newLayout: VkImageLayout, srcQueueFamilyIndex: uint32, dstQueueFamilyIndex: uint32, image: VkImage, subresourceRange: VkImageSubresourceRange) =
            VkImageMemoryBarrier(Unchecked.defaultof<nativeint>, srcAccessMask, dstAccessMask, oldLayout, newLayout, srcQueueFamilyIndex, dstQueueFamilyIndex, image, subresourceRange)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags> && x.oldLayout = Unchecked.defaultof<VkImageLayout> && x.newLayout = Unchecked.defaultof<VkImageLayout> && x.srcQueueFamilyIndex = Unchecked.defaultof<uint32> && x.dstQueueFamilyIndex = Unchecked.defaultof<uint32> && x.image = Unchecked.defaultof<VkImage> && x.subresourceRange = Unchecked.defaultof<VkImageSubresourceRange>

        static member Empty =
            VkImageMemoryBarrier(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageSubresourceRange>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "srcAccessMask = %A" x.srcAccessMask
                sprintf "dstAccessMask = %A" x.dstAccessMask
                sprintf "oldLayout = %A" x.oldLayout
                sprintf "newLayout = %A" x.newLayout
                sprintf "srcQueueFamilyIndex = %A" x.srcQueueFamilyIndex
                sprintf "dstQueueFamilyIndex = %A" x.dstQueueFamilyIndex
                sprintf "image = %A" x.image
                sprintf "subresourceRange = %A" x.subresourceRange
            ] |> sprintf "VkImageMemoryBarrier { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageResolve =
    struct
        val mutable public srcSubresource : VkImageSubresourceLayers
        val mutable public srcOffset : VkOffset3D
        val mutable public dstSubresource : VkImageSubresourceLayers
        val mutable public dstOffset : VkOffset3D
        val mutable public extent : VkExtent3D

        new(srcSubresource: VkImageSubresourceLayers, srcOffset: VkOffset3D, dstSubresource: VkImageSubresourceLayers, dstOffset: VkOffset3D, extent: VkExtent3D) =
            {
                srcSubresource = srcSubresource
                srcOffset = srcOffset
                dstSubresource = dstSubresource
                dstOffset = dstOffset
                extent = extent
            }

        member x.IsEmpty =
            x.srcSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.srcOffset = Unchecked.defaultof<VkOffset3D> && x.dstSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.dstOffset = Unchecked.defaultof<VkOffset3D> && x.extent = Unchecked.defaultof<VkExtent3D>

        static member Empty =
            VkImageResolve(Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

        override x.ToString() =
            String.concat "; " [
                sprintf "srcSubresource = %A" x.srcSubresource
                sprintf "srcOffset = %A" x.srcOffset
                sprintf "dstSubresource = %A" x.dstSubresource
                sprintf "dstOffset = %A" x.dstOffset
                sprintf "extent = %A" x.extent
            ] |> sprintf "VkImageResolve { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageViewCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkImageViewCreateFlags
        val mutable public image : VkImage
        val mutable public viewType : VkImageViewType
        val mutable public format : VkFormat
        val mutable public components : VkComponentMapping
        val mutable public subresourceRange : VkImageSubresourceRange

        new(pNext: nativeint, flags: VkImageViewCreateFlags, image: VkImage, viewType: VkImageViewType, format: VkFormat, components: VkComponentMapping, subresourceRange: VkImageSubresourceRange) =
            {
                sType = 15u
                pNext = pNext
                flags = flags
                image = image
                viewType = viewType
                format = format
                components = components
                subresourceRange = subresourceRange
            }

        new(flags: VkImageViewCreateFlags, image: VkImage, viewType: VkImageViewType, format: VkFormat, components: VkComponentMapping, subresourceRange: VkImageSubresourceRange) =
            VkImageViewCreateInfo(Unchecked.defaultof<nativeint>, flags, image, viewType, format, components, subresourceRange)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkImageViewCreateFlags> && x.image = Unchecked.defaultof<VkImage> && x.viewType = Unchecked.defaultof<VkImageViewType> && x.format = Unchecked.defaultof<VkFormat> && x.components = Unchecked.defaultof<VkComponentMapping> && x.subresourceRange = Unchecked.defaultof<VkImageSubresourceRange>

        static member Empty =
            VkImageViewCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageViewCreateFlags>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageViewType>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<VkImageSubresourceRange>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "image = %A" x.image
                sprintf "viewType = %A" x.viewType
                sprintf "format = %A" x.format
                sprintf "components = %A" x.components
                sprintf "subresourceRange = %A" x.subresourceRange
            ] |> sprintf "VkImageViewCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkInstanceCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkInstanceCreateFlags
        val mutable public pApplicationInfo : nativeptr<VkApplicationInfo>
        val mutable public enabledLayerCount : uint32
        val mutable public ppEnabledLayerNames : nativeptr<cstr>
        val mutable public enabledExtensionCount : uint32
        val mutable public ppEnabledExtensionNames : nativeptr<cstr>

        new(pNext: nativeint, flags: VkInstanceCreateFlags, pApplicationInfo: nativeptr<VkApplicationInfo>, enabledLayerCount: uint32, ppEnabledLayerNames: nativeptr<cstr>, enabledExtensionCount: uint32, ppEnabledExtensionNames: nativeptr<cstr>) =
            {
                sType = 1u
                pNext = pNext
                flags = flags
                pApplicationInfo = pApplicationInfo
                enabledLayerCount = enabledLayerCount
                ppEnabledLayerNames = ppEnabledLayerNames
                enabledExtensionCount = enabledExtensionCount
                ppEnabledExtensionNames = ppEnabledExtensionNames
            }

        new(flags: VkInstanceCreateFlags, pApplicationInfo: nativeptr<VkApplicationInfo>, enabledLayerCount: uint32, ppEnabledLayerNames: nativeptr<cstr>, enabledExtensionCount: uint32, ppEnabledExtensionNames: nativeptr<cstr>) =
            VkInstanceCreateInfo(Unchecked.defaultof<nativeint>, flags, pApplicationInfo, enabledLayerCount, ppEnabledLayerNames, enabledExtensionCount, ppEnabledExtensionNames)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkInstanceCreateFlags> && x.pApplicationInfo = Unchecked.defaultof<nativeptr<VkApplicationInfo>> && x.enabledLayerCount = Unchecked.defaultof<uint32> && x.ppEnabledLayerNames = Unchecked.defaultof<nativeptr<cstr>> && x.enabledExtensionCount = Unchecked.defaultof<uint32> && x.ppEnabledExtensionNames = Unchecked.defaultof<nativeptr<cstr>>

        static member Empty =
            VkInstanceCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkInstanceCreateFlags>, Unchecked.defaultof<nativeptr<VkApplicationInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<cstr>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<cstr>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "pApplicationInfo = %A" x.pApplicationInfo
                sprintf "enabledLayerCount = %A" x.enabledLayerCount
                sprintf "ppEnabledLayerNames = %A" x.ppEnabledLayerNames
                sprintf "enabledExtensionCount = %A" x.enabledExtensionCount
                sprintf "ppEnabledExtensionNames = %A" x.ppEnabledExtensionNames
            ] |> sprintf "VkInstanceCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkLayerProperties =
    struct
        val mutable public layerName : String256
        val mutable public specVersion : uint32
        val mutable public implementationVersion : uint32
        val mutable public description : String256

        new(layerName: String256, specVersion: uint32, implementationVersion: uint32, description: String256) =
            {
                layerName = layerName
                specVersion = specVersion
                implementationVersion = implementationVersion
                description = description
            }

        member x.IsEmpty =
            x.layerName = Unchecked.defaultof<String256> && x.specVersion = Unchecked.defaultof<uint32> && x.implementationVersion = Unchecked.defaultof<uint32> && x.description = Unchecked.defaultof<String256>

        static member Empty =
            VkLayerProperties(Unchecked.defaultof<String256>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<String256>)

        override x.ToString() =
            String.concat "; " [
                sprintf "layerName = %A" x.layerName
                sprintf "specVersion = %A" x.specVersion
                sprintf "implementationVersion = %A" x.implementationVersion
                sprintf "description = %A" x.description
            ] |> sprintf "VkLayerProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkMappedMemoryRange =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public memory : VkDeviceMemory
        val mutable public offset : VkDeviceSize
        val mutable public size : VkDeviceSize

        new(pNext: nativeint, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize) =
            {
                sType = 6u
                pNext = pNext
                memory = memory
                offset = offset
                size = size
            }

        new(memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize) =
            VkMappedMemoryRange(Unchecked.defaultof<nativeint>, memory, offset, size)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkMappedMemoryRange(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "memory = %A" x.memory
                sprintf "offset = %A" x.offset
                sprintf "size = %A" x.size
            ] |> sprintf "VkMappedMemoryRange { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkMemoryAllocateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public allocationSize : VkDeviceSize
        val mutable public memoryTypeIndex : uint32

        new(pNext: nativeint, allocationSize: VkDeviceSize, memoryTypeIndex: uint32) =
            {
                sType = 5u
                pNext = pNext
                allocationSize = allocationSize
                memoryTypeIndex = memoryTypeIndex
            }

        new(allocationSize: VkDeviceSize, memoryTypeIndex: uint32) =
            VkMemoryAllocateInfo(Unchecked.defaultof<nativeint>, allocationSize, memoryTypeIndex)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.allocationSize = Unchecked.defaultof<VkDeviceSize> && x.memoryTypeIndex = Unchecked.defaultof<uint32>

        static member Empty =
            VkMemoryAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "allocationSize = %A" x.allocationSize
                sprintf "memoryTypeIndex = %A" x.memoryTypeIndex
            ] |> sprintf "VkMemoryAllocateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkMemoryBarrier =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public srcAccessMask : VkAccessFlags
        val mutable public dstAccessMask : VkAccessFlags

        new(pNext: nativeint, srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags) =
            {
                sType = 46u
                pNext = pNext
                srcAccessMask = srcAccessMask
                dstAccessMask = dstAccessMask
            }

        new(srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags) =
            VkMemoryBarrier(Unchecked.defaultof<nativeint>, srcAccessMask, dstAccessMask)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags>

        static member Empty =
            VkMemoryBarrier(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkAccessFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "srcAccessMask = %A" x.srcAccessMask
                sprintf "dstAccessMask = %A" x.dstAccessMask
            ] |> sprintf "VkMemoryBarrier { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkMemoryHeap =
    struct
        val mutable public size : VkDeviceSize
        val mutable public flags : VkMemoryHeapFlags

        new(size: VkDeviceSize, flags: VkMemoryHeapFlags) =
            {
                size = size
                flags = flags
            }

        member x.IsEmpty =
            x.size = Unchecked.defaultof<VkDeviceSize> && x.flags = Unchecked.defaultof<VkMemoryHeapFlags>

        static member Empty =
            VkMemoryHeap(Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkMemoryHeapFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "size = %A" x.size
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkMemoryHeap { %s }"
    end

/// Array of 16 VkMemoryHeap values.
[<StructLayout(LayoutKind.Explicit, Size = 256)>]
type VkMemoryHeap_16 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : VkMemoryHeap

        member x.Item
            with get (i : int) : VkMemoryHeap =
                if i < 0 || i > 15 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : VkMemoryHeap) =
                if i < 0 || i > 15 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 16

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 16 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<VkMemoryHeap> with
            member x.GetEnumerator() = let x = x in (Seq.init 16 (fun i -> x.[i])).GetEnumerator()
    end
[<StructLayout(LayoutKind.Sequential)>]
type VkMemoryRequirements =
    struct
        val mutable public size : VkDeviceSize
        val mutable public alignment : VkDeviceSize
        val mutable public memoryTypeBits : uint32

        new(size: VkDeviceSize, alignment: VkDeviceSize, memoryTypeBits: uint32) =
            {
                size = size
                alignment = alignment
                memoryTypeBits = memoryTypeBits
            }

        member x.IsEmpty =
            x.size = Unchecked.defaultof<VkDeviceSize> && x.alignment = Unchecked.defaultof<VkDeviceSize> && x.memoryTypeBits = Unchecked.defaultof<uint32>

        static member Empty =
            VkMemoryRequirements(Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "size = %A" x.size
                sprintf "alignment = %A" x.alignment
                sprintf "memoryTypeBits = %A" x.memoryTypeBits
            ] |> sprintf "VkMemoryRequirements { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkMemoryType =
    struct
        val mutable public propertyFlags : VkMemoryPropertyFlags
        val mutable public heapIndex : uint32

        new(propertyFlags: VkMemoryPropertyFlags, heapIndex: uint32) =
            {
                propertyFlags = propertyFlags
                heapIndex = heapIndex
            }

        member x.IsEmpty =
            x.propertyFlags = Unchecked.defaultof<VkMemoryPropertyFlags> && x.heapIndex = Unchecked.defaultof<uint32>

        static member Empty =
            VkMemoryType(Unchecked.defaultof<VkMemoryPropertyFlags>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "propertyFlags = %A" x.propertyFlags
                sprintf "heapIndex = %A" x.heapIndex
            ] |> sprintf "VkMemoryType { %s }"
    end

/// Array of 32 VkMemoryType values.
[<StructLayout(LayoutKind.Explicit, Size = 256)>]
type VkMemoryType_32 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : VkMemoryType

        member x.Item
            with get (i : int) : VkMemoryType =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : VkMemoryType) =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 32

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<VkMemoryType> with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator()
    end
[<StructLayout(LayoutKind.Sequential)>]
type VkPhysicalDeviceLimits =
    struct
        val mutable public maxImageDimension1D : uint32
        val mutable public maxImageDimension2D : uint32
        val mutable public maxImageDimension3D : uint32
        val mutable public maxImageDimensionCube : uint32
        val mutable public maxImageArrayLayers : uint32
        val mutable public maxTexelBufferElements : uint32
        val mutable public maxUniformBufferRange : uint32
        val mutable public maxStorageBufferRange : uint32
        val mutable public maxPushConstantsSize : uint32
        val mutable public maxMemoryAllocationCount : uint32
        val mutable public maxSamplerAllocationCount : uint32
        val mutable public bufferImageGranularity : VkDeviceSize
        val mutable public sparseAddressSpaceSize : VkDeviceSize
        val mutable public maxBoundDescriptorSets : uint32
        val mutable public maxPerStageDescriptorSamplers : uint32
        val mutable public maxPerStageDescriptorUniformBuffers : uint32
        val mutable public maxPerStageDescriptorStorageBuffers : uint32
        val mutable public maxPerStageDescriptorSampledImages : uint32
        val mutable public maxPerStageDescriptorStorageImages : uint32
        val mutable public maxPerStageDescriptorInputAttachments : uint32
        val mutable public maxPerStageResources : uint32
        val mutable public maxDescriptorSetSamplers : uint32
        val mutable public maxDescriptorSetUniformBuffers : uint32
        val mutable public maxDescriptorSetUniformBuffersDynamic : uint32
        val mutable public maxDescriptorSetStorageBuffers : uint32
        val mutable public maxDescriptorSetStorageBuffersDynamic : uint32
        val mutable public maxDescriptorSetSampledImages : uint32
        val mutable public maxDescriptorSetStorageImages : uint32
        val mutable public maxDescriptorSetInputAttachments : uint32
        val mutable public maxVertexInputAttributes : uint32
        val mutable public maxVertexInputBindings : uint32
        val mutable public maxVertexInputAttributeOffset : uint32
        val mutable public maxVertexInputBindingStride : uint32
        val mutable public maxVertexOutputComponents : uint32
        val mutable public maxTessellationGenerationLevel : uint32
        val mutable public maxTessellationPatchSize : uint32
        val mutable public maxTessellationControlPerVertexInputComponents : uint32
        val mutable public maxTessellationControlPerVertexOutputComponents : uint32
        val mutable public maxTessellationControlPerPatchOutputComponents : uint32
        val mutable public maxTessellationControlTotalOutputComponents : uint32
        val mutable public maxTessellationEvaluationInputComponents : uint32
        val mutable public maxTessellationEvaluationOutputComponents : uint32
        val mutable public maxGeometryShaderInvocations : uint32
        val mutable public maxGeometryInputComponents : uint32
        val mutable public maxGeometryOutputComponents : uint32
        val mutable public maxGeometryOutputVertices : uint32
        val mutable public maxGeometryTotalOutputComponents : uint32
        val mutable public maxFragmentInputComponents : uint32
        val mutable public maxFragmentOutputAttachments : uint32
        val mutable public maxFragmentDualSrcAttachments : uint32
        val mutable public maxFragmentCombinedOutputResources : uint32
        val mutable public maxComputeSharedMemorySize : uint32
        val mutable public maxComputeWorkGroupCount : V3ui
        val mutable public maxComputeWorkGroupInvocations : uint32
        val mutable public maxComputeWorkGroupSize : V3ui
        val mutable public subPixelPrecisionBits : uint32
        val mutable public subTexelPrecisionBits : uint32
        val mutable public mipmapPrecisionBits : uint32
        val mutable public maxDrawIndexedIndexValue : uint32
        val mutable public maxDrawIndirectCount : uint32
        val mutable public maxSamplerLodBias : float32
        val mutable public maxSamplerAnisotropy : float32
        val mutable public maxViewports : uint32
        val mutable public maxViewportDimensions : V2ui
        val mutable public viewportBoundsRange : V2f
        val mutable public viewportSubPixelBits : uint32
        val mutable public minMemoryMapAlignment : uint64
        val mutable public minTexelBufferOffsetAlignment : VkDeviceSize
        val mutable public minUniformBufferOffsetAlignment : VkDeviceSize
        val mutable public minStorageBufferOffsetAlignment : VkDeviceSize
        val mutable public minTexelOffset : int32
        val mutable public maxTexelOffset : uint32
        val mutable public minTexelGatherOffset : int32
        val mutable public maxTexelGatherOffset : uint32
        val mutable public minInterpolationOffset : float32
        val mutable public maxInterpolationOffset : float32
        val mutable public subPixelInterpolationOffsetBits : uint32
        val mutable public maxFramebufferWidth : uint32
        val mutable public maxFramebufferHeight : uint32
        val mutable public maxFramebufferLayers : uint32
        val mutable public framebufferColorSampleCounts : VkSampleCountFlags
        val mutable public framebufferDepthSampleCounts : VkSampleCountFlags
        val mutable public framebufferStencilSampleCounts : VkSampleCountFlags
        val mutable public framebufferNoAttachmentsSampleCounts : VkSampleCountFlags
        val mutable public maxColorAttachments : uint32
        val mutable public sampledImageColorSampleCounts : VkSampleCountFlags
        val mutable public sampledImageIntegerSampleCounts : VkSampleCountFlags
        val mutable public sampledImageDepthSampleCounts : VkSampleCountFlags
        val mutable public sampledImageStencilSampleCounts : VkSampleCountFlags
        val mutable public storageImageSampleCounts : VkSampleCountFlags
        val mutable public maxSampleMaskWords : uint32
        val mutable public timestampComputeAndGraphics : VkBool32
        val mutable public timestampPeriod : float32
        val mutable public maxClipDistances : uint32
        val mutable public maxCullDistances : uint32
        val mutable public maxCombinedClipAndCullDistances : uint32
        val mutable public discreteQueuePriorities : uint32
        val mutable public pointSizeRange : V2f
        val mutable public lineWidthRange : V2f
        val mutable public pointSizeGranularity : float32
        val mutable public lineWidthGranularity : float32
        val mutable public strictLines : VkBool32
        val mutable public standardSampleLocations : VkBool32
        val mutable public optimalBufferCopyOffsetAlignment : VkDeviceSize
        val mutable public optimalBufferCopyRowPitchAlignment : VkDeviceSize
        val mutable public nonCoherentAtomSize : VkDeviceSize

        new(maxImageDimension1D: uint32, maxImageDimension2D: uint32, maxImageDimension3D: uint32, maxImageDimensionCube: uint32, maxImageArrayLayers: uint32, maxTexelBufferElements: uint32, maxUniformBufferRange: uint32, maxStorageBufferRange: uint32, maxPushConstantsSize: uint32, maxMemoryAllocationCount: uint32, maxSamplerAllocationCount: uint32, bufferImageGranularity: VkDeviceSize, sparseAddressSpaceSize: VkDeviceSize, maxBoundDescriptorSets: uint32, maxPerStageDescriptorSamplers: uint32, maxPerStageDescriptorUniformBuffers: uint32, maxPerStageDescriptorStorageBuffers: uint32, maxPerStageDescriptorSampledImages: uint32, maxPerStageDescriptorStorageImages: uint32, maxPerStageDescriptorInputAttachments: uint32, maxPerStageResources: uint32, maxDescriptorSetSamplers: uint32, maxDescriptorSetUniformBuffers: uint32, maxDescriptorSetUniformBuffersDynamic: uint32, maxDescriptorSetStorageBuffers: uint32, maxDescriptorSetStorageBuffersDynamic: uint32, maxDescriptorSetSampledImages: uint32, maxDescriptorSetStorageImages: uint32, maxDescriptorSetInputAttachments: uint32, maxVertexInputAttributes: uint32, maxVertexInputBindings: uint32, maxVertexInputAttributeOffset: uint32, maxVertexInputBindingStride: uint32, maxVertexOutputComponents: uint32, maxTessellationGenerationLevel: uint32, maxTessellationPatchSize: uint32, maxTessellationControlPerVertexInputComponents: uint32, maxTessellationControlPerVertexOutputComponents: uint32, maxTessellationControlPerPatchOutputComponents: uint32, maxTessellationControlTotalOutputComponents: uint32, maxTessellationEvaluationInputComponents: uint32, maxTessellationEvaluationOutputComponents: uint32, maxGeometryShaderInvocations: uint32, maxGeometryInputComponents: uint32, maxGeometryOutputComponents: uint32, maxGeometryOutputVertices: uint32, maxGeometryTotalOutputComponents: uint32, maxFragmentInputComponents: uint32, maxFragmentOutputAttachments: uint32, maxFragmentDualSrcAttachments: uint32, maxFragmentCombinedOutputResources: uint32, maxComputeSharedMemorySize: uint32, maxComputeWorkGroupCount: V3ui, maxComputeWorkGroupInvocations: uint32, maxComputeWorkGroupSize: V3ui, subPixelPrecisionBits: uint32, subTexelPrecisionBits: uint32, mipmapPrecisionBits: uint32, maxDrawIndexedIndexValue: uint32, maxDrawIndirectCount: uint32, maxSamplerLodBias: float32, maxSamplerAnisotropy: float32, maxViewports: uint32, maxViewportDimensions: V2ui, viewportBoundsRange: V2f, viewportSubPixelBits: uint32, minMemoryMapAlignment: uint64, minTexelBufferOffsetAlignment: VkDeviceSize, minUniformBufferOffsetAlignment: VkDeviceSize, minStorageBufferOffsetAlignment: VkDeviceSize, minTexelOffset: int32, maxTexelOffset: uint32, minTexelGatherOffset: int32, maxTexelGatherOffset: uint32, minInterpolationOffset: float32, maxInterpolationOffset: float32, subPixelInterpolationOffsetBits: uint32, maxFramebufferWidth: uint32, maxFramebufferHeight: uint32, maxFramebufferLayers: uint32, framebufferColorSampleCounts: VkSampleCountFlags, framebufferDepthSampleCounts: VkSampleCountFlags, framebufferStencilSampleCounts: VkSampleCountFlags, framebufferNoAttachmentsSampleCounts: VkSampleCountFlags, maxColorAttachments: uint32, sampledImageColorSampleCounts: VkSampleCountFlags, sampledImageIntegerSampleCounts: VkSampleCountFlags, sampledImageDepthSampleCounts: VkSampleCountFlags, sampledImageStencilSampleCounts: VkSampleCountFlags, storageImageSampleCounts: VkSampleCountFlags, maxSampleMaskWords: uint32, timestampComputeAndGraphics: VkBool32, timestampPeriod: float32, maxClipDistances: uint32, maxCullDistances: uint32, maxCombinedClipAndCullDistances: uint32, discreteQueuePriorities: uint32, pointSizeRange: V2f, lineWidthRange: V2f, pointSizeGranularity: float32, lineWidthGranularity: float32, strictLines: VkBool32, standardSampleLocations: VkBool32, optimalBufferCopyOffsetAlignment: VkDeviceSize, optimalBufferCopyRowPitchAlignment: VkDeviceSize, nonCoherentAtomSize: VkDeviceSize) =
            {
                maxImageDimension1D = maxImageDimension1D
                maxImageDimension2D = maxImageDimension2D
                maxImageDimension3D = maxImageDimension3D
                maxImageDimensionCube = maxImageDimensionCube
                maxImageArrayLayers = maxImageArrayLayers
                maxTexelBufferElements = maxTexelBufferElements
                maxUniformBufferRange = maxUniformBufferRange
                maxStorageBufferRange = maxStorageBufferRange
                maxPushConstantsSize = maxPushConstantsSize
                maxMemoryAllocationCount = maxMemoryAllocationCount
                maxSamplerAllocationCount = maxSamplerAllocationCount
                bufferImageGranularity = bufferImageGranularity
                sparseAddressSpaceSize = sparseAddressSpaceSize
                maxBoundDescriptorSets = maxBoundDescriptorSets
                maxPerStageDescriptorSamplers = maxPerStageDescriptorSamplers
                maxPerStageDescriptorUniformBuffers = maxPerStageDescriptorUniformBuffers
                maxPerStageDescriptorStorageBuffers = maxPerStageDescriptorStorageBuffers
                maxPerStageDescriptorSampledImages = maxPerStageDescriptorSampledImages
                maxPerStageDescriptorStorageImages = maxPerStageDescriptorStorageImages
                maxPerStageDescriptorInputAttachments = maxPerStageDescriptorInputAttachments
                maxPerStageResources = maxPerStageResources
                maxDescriptorSetSamplers = maxDescriptorSetSamplers
                maxDescriptorSetUniformBuffers = maxDescriptorSetUniformBuffers
                maxDescriptorSetUniformBuffersDynamic = maxDescriptorSetUniformBuffersDynamic
                maxDescriptorSetStorageBuffers = maxDescriptorSetStorageBuffers
                maxDescriptorSetStorageBuffersDynamic = maxDescriptorSetStorageBuffersDynamic
                maxDescriptorSetSampledImages = maxDescriptorSetSampledImages
                maxDescriptorSetStorageImages = maxDescriptorSetStorageImages
                maxDescriptorSetInputAttachments = maxDescriptorSetInputAttachments
                maxVertexInputAttributes = maxVertexInputAttributes
                maxVertexInputBindings = maxVertexInputBindings
                maxVertexInputAttributeOffset = maxVertexInputAttributeOffset
                maxVertexInputBindingStride = maxVertexInputBindingStride
                maxVertexOutputComponents = maxVertexOutputComponents
                maxTessellationGenerationLevel = maxTessellationGenerationLevel
                maxTessellationPatchSize = maxTessellationPatchSize
                maxTessellationControlPerVertexInputComponents = maxTessellationControlPerVertexInputComponents
                maxTessellationControlPerVertexOutputComponents = maxTessellationControlPerVertexOutputComponents
                maxTessellationControlPerPatchOutputComponents = maxTessellationControlPerPatchOutputComponents
                maxTessellationControlTotalOutputComponents = maxTessellationControlTotalOutputComponents
                maxTessellationEvaluationInputComponents = maxTessellationEvaluationInputComponents
                maxTessellationEvaluationOutputComponents = maxTessellationEvaluationOutputComponents
                maxGeometryShaderInvocations = maxGeometryShaderInvocations
                maxGeometryInputComponents = maxGeometryInputComponents
                maxGeometryOutputComponents = maxGeometryOutputComponents
                maxGeometryOutputVertices = maxGeometryOutputVertices
                maxGeometryTotalOutputComponents = maxGeometryTotalOutputComponents
                maxFragmentInputComponents = maxFragmentInputComponents
                maxFragmentOutputAttachments = maxFragmentOutputAttachments
                maxFragmentDualSrcAttachments = maxFragmentDualSrcAttachments
                maxFragmentCombinedOutputResources = maxFragmentCombinedOutputResources
                maxComputeSharedMemorySize = maxComputeSharedMemorySize
                maxComputeWorkGroupCount = maxComputeWorkGroupCount
                maxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations
                maxComputeWorkGroupSize = maxComputeWorkGroupSize
                subPixelPrecisionBits = subPixelPrecisionBits
                subTexelPrecisionBits = subTexelPrecisionBits
                mipmapPrecisionBits = mipmapPrecisionBits
                maxDrawIndexedIndexValue = maxDrawIndexedIndexValue
                maxDrawIndirectCount = maxDrawIndirectCount
                maxSamplerLodBias = maxSamplerLodBias
                maxSamplerAnisotropy = maxSamplerAnisotropy
                maxViewports = maxViewports
                maxViewportDimensions = maxViewportDimensions
                viewportBoundsRange = viewportBoundsRange
                viewportSubPixelBits = viewportSubPixelBits
                minMemoryMapAlignment = minMemoryMapAlignment
                minTexelBufferOffsetAlignment = minTexelBufferOffsetAlignment
                minUniformBufferOffsetAlignment = minUniformBufferOffsetAlignment
                minStorageBufferOffsetAlignment = minStorageBufferOffsetAlignment
                minTexelOffset = minTexelOffset
                maxTexelOffset = maxTexelOffset
                minTexelGatherOffset = minTexelGatherOffset
                maxTexelGatherOffset = maxTexelGatherOffset
                minInterpolationOffset = minInterpolationOffset
                maxInterpolationOffset = maxInterpolationOffset
                subPixelInterpolationOffsetBits = subPixelInterpolationOffsetBits
                maxFramebufferWidth = maxFramebufferWidth
                maxFramebufferHeight = maxFramebufferHeight
                maxFramebufferLayers = maxFramebufferLayers
                framebufferColorSampleCounts = framebufferColorSampleCounts
                framebufferDepthSampleCounts = framebufferDepthSampleCounts
                framebufferStencilSampleCounts = framebufferStencilSampleCounts
                framebufferNoAttachmentsSampleCounts = framebufferNoAttachmentsSampleCounts
                maxColorAttachments = maxColorAttachments
                sampledImageColorSampleCounts = sampledImageColorSampleCounts
                sampledImageIntegerSampleCounts = sampledImageIntegerSampleCounts
                sampledImageDepthSampleCounts = sampledImageDepthSampleCounts
                sampledImageStencilSampleCounts = sampledImageStencilSampleCounts
                storageImageSampleCounts = storageImageSampleCounts
                maxSampleMaskWords = maxSampleMaskWords
                timestampComputeAndGraphics = timestampComputeAndGraphics
                timestampPeriod = timestampPeriod
                maxClipDistances = maxClipDistances
                maxCullDistances = maxCullDistances
                maxCombinedClipAndCullDistances = maxCombinedClipAndCullDistances
                discreteQueuePriorities = discreteQueuePriorities
                pointSizeRange = pointSizeRange
                lineWidthRange = lineWidthRange
                pointSizeGranularity = pointSizeGranularity
                lineWidthGranularity = lineWidthGranularity
                strictLines = strictLines
                standardSampleLocations = standardSampleLocations
                optimalBufferCopyOffsetAlignment = optimalBufferCopyOffsetAlignment
                optimalBufferCopyRowPitchAlignment = optimalBufferCopyRowPitchAlignment
                nonCoherentAtomSize = nonCoherentAtomSize
            }

        member x.IsEmpty =
            x.maxImageDimension1D = Unchecked.defaultof<uint32> && x.maxImageDimension2D = Unchecked.defaultof<uint32> && x.maxImageDimension3D = Unchecked.defaultof<uint32> && x.maxImageDimensionCube = Unchecked.defaultof<uint32> && x.maxImageArrayLayers = Unchecked.defaultof<uint32> && x.maxTexelBufferElements = Unchecked.defaultof<uint32> && x.maxUniformBufferRange = Unchecked.defaultof<uint32> && x.maxStorageBufferRange = Unchecked.defaultof<uint32> && x.maxPushConstantsSize = Unchecked.defaultof<uint32> && x.maxMemoryAllocationCount = Unchecked.defaultof<uint32> && x.maxSamplerAllocationCount = Unchecked.defaultof<uint32> && x.bufferImageGranularity = Unchecked.defaultof<VkDeviceSize> && x.sparseAddressSpaceSize = Unchecked.defaultof<VkDeviceSize> && x.maxBoundDescriptorSets = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorSamplers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUniformBuffers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorStorageBuffers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorSampledImages = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorStorageImages = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorInputAttachments = Unchecked.defaultof<uint32> && x.maxPerStageResources = Unchecked.defaultof<uint32> && x.maxDescriptorSetSamplers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUniformBuffers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUniformBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetStorageBuffers = Unchecked.defaultof<uint32> && x.maxDescriptorSetStorageBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetSampledImages = Unchecked.defaultof<uint32> && x.maxDescriptorSetStorageImages = Unchecked.defaultof<uint32> && x.maxDescriptorSetInputAttachments = Unchecked.defaultof<uint32> && x.maxVertexInputAttributes = Unchecked.defaultof<uint32> && x.maxVertexInputBindings = Unchecked.defaultof<uint32> && x.maxVertexInputAttributeOffset = Unchecked.defaultof<uint32> && x.maxVertexInputBindingStride = Unchecked.defaultof<uint32> && x.maxVertexOutputComponents = Unchecked.defaultof<uint32> && x.maxTessellationGenerationLevel = Unchecked.defaultof<uint32> && x.maxTessellationPatchSize = Unchecked.defaultof<uint32> && x.maxTessellationControlPerVertexInputComponents = Unchecked.defaultof<uint32> && x.maxTessellationControlPerVertexOutputComponents = Unchecked.defaultof<uint32> && x.maxTessellationControlPerPatchOutputComponents = Unchecked.defaultof<uint32> && x.maxTessellationControlTotalOutputComponents = Unchecked.defaultof<uint32> && x.maxTessellationEvaluationInputComponents = Unchecked.defaultof<uint32> && x.maxTessellationEvaluationOutputComponents = Unchecked.defaultof<uint32> && x.maxGeometryShaderInvocations = Unchecked.defaultof<uint32> && x.maxGeometryInputComponents = Unchecked.defaultof<uint32> && x.maxGeometryOutputComponents = Unchecked.defaultof<uint32> && x.maxGeometryOutputVertices = Unchecked.defaultof<uint32> && x.maxGeometryTotalOutputComponents = Unchecked.defaultof<uint32> && x.maxFragmentInputComponents = Unchecked.defaultof<uint32> && x.maxFragmentOutputAttachments = Unchecked.defaultof<uint32> && x.maxFragmentDualSrcAttachments = Unchecked.defaultof<uint32> && x.maxFragmentCombinedOutputResources = Unchecked.defaultof<uint32> && x.maxComputeSharedMemorySize = Unchecked.defaultof<uint32> && x.maxComputeWorkGroupCount = Unchecked.defaultof<V3ui> && x.maxComputeWorkGroupInvocations = Unchecked.defaultof<uint32> && x.maxComputeWorkGroupSize = Unchecked.defaultof<V3ui> && x.subPixelPrecisionBits = Unchecked.defaultof<uint32> && x.subTexelPrecisionBits = Unchecked.defaultof<uint32> && x.mipmapPrecisionBits = Unchecked.defaultof<uint32> && x.maxDrawIndexedIndexValue = Unchecked.defaultof<uint32> && x.maxDrawIndirectCount = Unchecked.defaultof<uint32> && x.maxSamplerLodBias = Unchecked.defaultof<float32> && x.maxSamplerAnisotropy = Unchecked.defaultof<float32> && x.maxViewports = Unchecked.defaultof<uint32> && x.maxViewportDimensions = Unchecked.defaultof<V2ui> && x.viewportBoundsRange = Unchecked.defaultof<V2f> && x.viewportSubPixelBits = Unchecked.defaultof<uint32> && x.minMemoryMapAlignment = Unchecked.defaultof<uint64> && x.minTexelBufferOffsetAlignment = Unchecked.defaultof<VkDeviceSize> && x.minUniformBufferOffsetAlignment = Unchecked.defaultof<VkDeviceSize> && x.minStorageBufferOffsetAlignment = Unchecked.defaultof<VkDeviceSize> && x.minTexelOffset = Unchecked.defaultof<int32> && x.maxTexelOffset = Unchecked.defaultof<uint32> && x.minTexelGatherOffset = Unchecked.defaultof<int32> && x.maxTexelGatherOffset = Unchecked.defaultof<uint32> && x.minInterpolationOffset = Unchecked.defaultof<float32> && x.maxInterpolationOffset = Unchecked.defaultof<float32> && x.subPixelInterpolationOffsetBits = Unchecked.defaultof<uint32> && x.maxFramebufferWidth = Unchecked.defaultof<uint32> && x.maxFramebufferHeight = Unchecked.defaultof<uint32> && x.maxFramebufferLayers = Unchecked.defaultof<uint32> && x.framebufferColorSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.framebufferDepthSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.framebufferStencilSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.framebufferNoAttachmentsSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.maxColorAttachments = Unchecked.defaultof<uint32> && x.sampledImageColorSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.sampledImageIntegerSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.sampledImageDepthSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.sampledImageStencilSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.storageImageSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.maxSampleMaskWords = Unchecked.defaultof<uint32> && x.timestampComputeAndGraphics = Unchecked.defaultof<VkBool32> && x.timestampPeriod = Unchecked.defaultof<float32> && x.maxClipDistances = Unchecked.defaultof<uint32> && x.maxCullDistances = Unchecked.defaultof<uint32> && x.maxCombinedClipAndCullDistances = Unchecked.defaultof<uint32> && x.discreteQueuePriorities = Unchecked.defaultof<uint32> && x.pointSizeRange = Unchecked.defaultof<V2f> && x.lineWidthRange = Unchecked.defaultof<V2f> && x.pointSizeGranularity = Unchecked.defaultof<float32> && x.lineWidthGranularity = Unchecked.defaultof<float32> && x.strictLines = Unchecked.defaultof<VkBool32> && x.standardSampleLocations = Unchecked.defaultof<VkBool32> && x.optimalBufferCopyOffsetAlignment = Unchecked.defaultof<VkDeviceSize> && x.optimalBufferCopyRowPitchAlignment = Unchecked.defaultof<VkDeviceSize> && x.nonCoherentAtomSize = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkPhysicalDeviceLimits(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V2ui>, Unchecked.defaultof<V2f>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<int32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<int32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<float32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V2f>, Unchecked.defaultof<V2f>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "maxImageDimension1D = %A" x.maxImageDimension1D
                sprintf "maxImageDimension2D = %A" x.maxImageDimension2D
                sprintf "maxImageDimension3D = %A" x.maxImageDimension3D
                sprintf "maxImageDimensionCube = %A" x.maxImageDimensionCube
                sprintf "maxImageArrayLayers = %A" x.maxImageArrayLayers
                sprintf "maxTexelBufferElements = %A" x.maxTexelBufferElements
                sprintf "maxUniformBufferRange = %A" x.maxUniformBufferRange
                sprintf "maxStorageBufferRange = %A" x.maxStorageBufferRange
                sprintf "maxPushConstantsSize = %A" x.maxPushConstantsSize
                sprintf "maxMemoryAllocationCount = %A" x.maxMemoryAllocationCount
                sprintf "maxSamplerAllocationCount = %A" x.maxSamplerAllocationCount
                sprintf "bufferImageGranularity = %A" x.bufferImageGranularity
                sprintf "sparseAddressSpaceSize = %A" x.sparseAddressSpaceSize
                sprintf "maxBoundDescriptorSets = %A" x.maxBoundDescriptorSets
                sprintf "maxPerStageDescriptorSamplers = %A" x.maxPerStageDescriptorSamplers
                sprintf "maxPerStageDescriptorUniformBuffers = %A" x.maxPerStageDescriptorUniformBuffers
                sprintf "maxPerStageDescriptorStorageBuffers = %A" x.maxPerStageDescriptorStorageBuffers
                sprintf "maxPerStageDescriptorSampledImages = %A" x.maxPerStageDescriptorSampledImages
                sprintf "maxPerStageDescriptorStorageImages = %A" x.maxPerStageDescriptorStorageImages
                sprintf "maxPerStageDescriptorInputAttachments = %A" x.maxPerStageDescriptorInputAttachments
                sprintf "maxPerStageResources = %A" x.maxPerStageResources
                sprintf "maxDescriptorSetSamplers = %A" x.maxDescriptorSetSamplers
                sprintf "maxDescriptorSetUniformBuffers = %A" x.maxDescriptorSetUniformBuffers
                sprintf "maxDescriptorSetUniformBuffersDynamic = %A" x.maxDescriptorSetUniformBuffersDynamic
                sprintf "maxDescriptorSetStorageBuffers = %A" x.maxDescriptorSetStorageBuffers
                sprintf "maxDescriptorSetStorageBuffersDynamic = %A" x.maxDescriptorSetStorageBuffersDynamic
                sprintf "maxDescriptorSetSampledImages = %A" x.maxDescriptorSetSampledImages
                sprintf "maxDescriptorSetStorageImages = %A" x.maxDescriptorSetStorageImages
                sprintf "maxDescriptorSetInputAttachments = %A" x.maxDescriptorSetInputAttachments
                sprintf "maxVertexInputAttributes = %A" x.maxVertexInputAttributes
                sprintf "maxVertexInputBindings = %A" x.maxVertexInputBindings
                sprintf "maxVertexInputAttributeOffset = %A" x.maxVertexInputAttributeOffset
                sprintf "maxVertexInputBindingStride = %A" x.maxVertexInputBindingStride
                sprintf "maxVertexOutputComponents = %A" x.maxVertexOutputComponents
                sprintf "maxTessellationGenerationLevel = %A" x.maxTessellationGenerationLevel
                sprintf "maxTessellationPatchSize = %A" x.maxTessellationPatchSize
                sprintf "maxTessellationControlPerVertexInputComponents = %A" x.maxTessellationControlPerVertexInputComponents
                sprintf "maxTessellationControlPerVertexOutputComponents = %A" x.maxTessellationControlPerVertexOutputComponents
                sprintf "maxTessellationControlPerPatchOutputComponents = %A" x.maxTessellationControlPerPatchOutputComponents
                sprintf "maxTessellationControlTotalOutputComponents = %A" x.maxTessellationControlTotalOutputComponents
                sprintf "maxTessellationEvaluationInputComponents = %A" x.maxTessellationEvaluationInputComponents
                sprintf "maxTessellationEvaluationOutputComponents = %A" x.maxTessellationEvaluationOutputComponents
                sprintf "maxGeometryShaderInvocations = %A" x.maxGeometryShaderInvocations
                sprintf "maxGeometryInputComponents = %A" x.maxGeometryInputComponents
                sprintf "maxGeometryOutputComponents = %A" x.maxGeometryOutputComponents
                sprintf "maxGeometryOutputVertices = %A" x.maxGeometryOutputVertices
                sprintf "maxGeometryTotalOutputComponents = %A" x.maxGeometryTotalOutputComponents
                sprintf "maxFragmentInputComponents = %A" x.maxFragmentInputComponents
                sprintf "maxFragmentOutputAttachments = %A" x.maxFragmentOutputAttachments
                sprintf "maxFragmentDualSrcAttachments = %A" x.maxFragmentDualSrcAttachments
                sprintf "maxFragmentCombinedOutputResources = %A" x.maxFragmentCombinedOutputResources
                sprintf "maxComputeSharedMemorySize = %A" x.maxComputeSharedMemorySize
                sprintf "maxComputeWorkGroupCount = %A" x.maxComputeWorkGroupCount
                sprintf "maxComputeWorkGroupInvocations = %A" x.maxComputeWorkGroupInvocations
                sprintf "maxComputeWorkGroupSize = %A" x.maxComputeWorkGroupSize
                sprintf "subPixelPrecisionBits = %A" x.subPixelPrecisionBits
                sprintf "subTexelPrecisionBits = %A" x.subTexelPrecisionBits
                sprintf "mipmapPrecisionBits = %A" x.mipmapPrecisionBits
                sprintf "maxDrawIndexedIndexValue = %A" x.maxDrawIndexedIndexValue
                sprintf "maxDrawIndirectCount = %A" x.maxDrawIndirectCount
                sprintf "maxSamplerLodBias = %A" x.maxSamplerLodBias
                sprintf "maxSamplerAnisotropy = %A" x.maxSamplerAnisotropy
                sprintf "maxViewports = %A" x.maxViewports
                sprintf "maxViewportDimensions = %A" x.maxViewportDimensions
                sprintf "viewportBoundsRange = %A" x.viewportBoundsRange
                sprintf "viewportSubPixelBits = %A" x.viewportSubPixelBits
                sprintf "minMemoryMapAlignment = %A" x.minMemoryMapAlignment
                sprintf "minTexelBufferOffsetAlignment = %A" x.minTexelBufferOffsetAlignment
                sprintf "minUniformBufferOffsetAlignment = %A" x.minUniformBufferOffsetAlignment
                sprintf "minStorageBufferOffsetAlignment = %A" x.minStorageBufferOffsetAlignment
                sprintf "minTexelOffset = %A" x.minTexelOffset
                sprintf "maxTexelOffset = %A" x.maxTexelOffset
                sprintf "minTexelGatherOffset = %A" x.minTexelGatherOffset
                sprintf "maxTexelGatherOffset = %A" x.maxTexelGatherOffset
                sprintf "minInterpolationOffset = %A" x.minInterpolationOffset
                sprintf "maxInterpolationOffset = %A" x.maxInterpolationOffset
                sprintf "subPixelInterpolationOffsetBits = %A" x.subPixelInterpolationOffsetBits
                sprintf "maxFramebufferWidth = %A" x.maxFramebufferWidth
                sprintf "maxFramebufferHeight = %A" x.maxFramebufferHeight
                sprintf "maxFramebufferLayers = %A" x.maxFramebufferLayers
                sprintf "framebufferColorSampleCounts = %A" x.framebufferColorSampleCounts
                sprintf "framebufferDepthSampleCounts = %A" x.framebufferDepthSampleCounts
                sprintf "framebufferStencilSampleCounts = %A" x.framebufferStencilSampleCounts
                sprintf "framebufferNoAttachmentsSampleCounts = %A" x.framebufferNoAttachmentsSampleCounts
                sprintf "maxColorAttachments = %A" x.maxColorAttachments
                sprintf "sampledImageColorSampleCounts = %A" x.sampledImageColorSampleCounts
                sprintf "sampledImageIntegerSampleCounts = %A" x.sampledImageIntegerSampleCounts
                sprintf "sampledImageDepthSampleCounts = %A" x.sampledImageDepthSampleCounts
                sprintf "sampledImageStencilSampleCounts = %A" x.sampledImageStencilSampleCounts
                sprintf "storageImageSampleCounts = %A" x.storageImageSampleCounts
                sprintf "maxSampleMaskWords = %A" x.maxSampleMaskWords
                sprintf "timestampComputeAndGraphics = %A" x.timestampComputeAndGraphics
                sprintf "timestampPeriod = %A" x.timestampPeriod
                sprintf "maxClipDistances = %A" x.maxClipDistances
                sprintf "maxCullDistances = %A" x.maxCullDistances
                sprintf "maxCombinedClipAndCullDistances = %A" x.maxCombinedClipAndCullDistances
                sprintf "discreteQueuePriorities = %A" x.discreteQueuePriorities
                sprintf "pointSizeRange = %A" x.pointSizeRange
                sprintf "lineWidthRange = %A" x.lineWidthRange
                sprintf "pointSizeGranularity = %A" x.pointSizeGranularity
                sprintf "lineWidthGranularity = %A" x.lineWidthGranularity
                sprintf "strictLines = %A" x.strictLines
                sprintf "standardSampleLocations = %A" x.standardSampleLocations
                sprintf "optimalBufferCopyOffsetAlignment = %A" x.optimalBufferCopyOffsetAlignment
                sprintf "optimalBufferCopyRowPitchAlignment = %A" x.optimalBufferCopyRowPitchAlignment
                sprintf "nonCoherentAtomSize = %A" x.nonCoherentAtomSize
            ] |> sprintf "VkPhysicalDeviceLimits { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPhysicalDeviceMemoryProperties =
    struct
        val mutable public memoryTypeCount : uint32
        val mutable public memoryTypes : VkMemoryType_32
        val mutable public memoryHeapCount : uint32
        val mutable public memoryHeaps : VkMemoryHeap_16

        new(memoryTypeCount: uint32, memoryTypes: VkMemoryType_32, memoryHeapCount: uint32, memoryHeaps: VkMemoryHeap_16) =
            {
                memoryTypeCount = memoryTypeCount
                memoryTypes = memoryTypes
                memoryHeapCount = memoryHeapCount
                memoryHeaps = memoryHeaps
            }

        member x.IsEmpty =
            x.memoryTypeCount = Unchecked.defaultof<uint32> && x.memoryTypes = Unchecked.defaultof<VkMemoryType_32> && x.memoryHeapCount = Unchecked.defaultof<uint32> && x.memoryHeaps = Unchecked.defaultof<VkMemoryHeap_16>

        static member Empty =
            VkPhysicalDeviceMemoryProperties(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkMemoryType_32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkMemoryHeap_16>)

        override x.ToString() =
            String.concat "; " [
                sprintf "memoryTypeCount = %A" x.memoryTypeCount
                sprintf "memoryTypes = %A" x.memoryTypes
                sprintf "memoryHeapCount = %A" x.memoryHeapCount
                sprintf "memoryHeaps = %A" x.memoryHeaps
            ] |> sprintf "VkPhysicalDeviceMemoryProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPhysicalDeviceSparseProperties =
    struct
        val mutable public residencyStandard2DBlockShape : VkBool32
        val mutable public residencyStandard2DMultisampleBlockShape : VkBool32
        val mutable public residencyStandard3DBlockShape : VkBool32
        val mutable public residencyAlignedMipSize : VkBool32
        val mutable public residencyNonResidentStrict : VkBool32

        new(residencyStandard2DBlockShape: VkBool32, residencyStandard2DMultisampleBlockShape: VkBool32, residencyStandard3DBlockShape: VkBool32, residencyAlignedMipSize: VkBool32, residencyNonResidentStrict: VkBool32) =
            {
                residencyStandard2DBlockShape = residencyStandard2DBlockShape
                residencyStandard2DMultisampleBlockShape = residencyStandard2DMultisampleBlockShape
                residencyStandard3DBlockShape = residencyStandard3DBlockShape
                residencyAlignedMipSize = residencyAlignedMipSize
                residencyNonResidentStrict = residencyNonResidentStrict
            }

        member x.IsEmpty =
            x.residencyStandard2DBlockShape = Unchecked.defaultof<VkBool32> && x.residencyStandard2DMultisampleBlockShape = Unchecked.defaultof<VkBool32> && x.residencyStandard3DBlockShape = Unchecked.defaultof<VkBool32> && x.residencyAlignedMipSize = Unchecked.defaultof<VkBool32> && x.residencyNonResidentStrict = Unchecked.defaultof<VkBool32>

        static member Empty =
            VkPhysicalDeviceSparseProperties(Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "residencyStandard2DBlockShape = %A" x.residencyStandard2DBlockShape
                sprintf "residencyStandard2DMultisampleBlockShape = %A" x.residencyStandard2DMultisampleBlockShape
                sprintf "residencyStandard3DBlockShape = %A" x.residencyStandard3DBlockShape
                sprintf "residencyAlignedMipSize = %A" x.residencyAlignedMipSize
                sprintf "residencyNonResidentStrict = %A" x.residencyNonResidentStrict
            ] |> sprintf "VkPhysicalDeviceSparseProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPhysicalDeviceProperties =
    struct
        val mutable public apiVersion : uint32
        val mutable public driverVersion : uint32
        val mutable public vendorID : uint32
        val mutable public deviceID : uint32
        val mutable public deviceType : VkPhysicalDeviceType
        val mutable public deviceName : String256
        val mutable public pipelineCacheUUID : Guid
        val mutable public limits : VkPhysicalDeviceLimits
        val mutable public sparseProperties : VkPhysicalDeviceSparseProperties

        new(apiVersion: uint32, driverVersion: uint32, vendorID: uint32, deviceID: uint32, deviceType: VkPhysicalDeviceType, deviceName: String256, pipelineCacheUUID: Guid, limits: VkPhysicalDeviceLimits, sparseProperties: VkPhysicalDeviceSparseProperties) =
            {
                apiVersion = apiVersion
                driverVersion = driverVersion
                vendorID = vendorID
                deviceID = deviceID
                deviceType = deviceType
                deviceName = deviceName
                pipelineCacheUUID = pipelineCacheUUID
                limits = limits
                sparseProperties = sparseProperties
            }

        member x.IsEmpty =
            x.apiVersion = Unchecked.defaultof<uint32> && x.driverVersion = Unchecked.defaultof<uint32> && x.vendorID = Unchecked.defaultof<uint32> && x.deviceID = Unchecked.defaultof<uint32> && x.deviceType = Unchecked.defaultof<VkPhysicalDeviceType> && x.deviceName = Unchecked.defaultof<String256> && x.pipelineCacheUUID = Unchecked.defaultof<Guid> && x.limits = Unchecked.defaultof<VkPhysicalDeviceLimits> && x.sparseProperties = Unchecked.defaultof<VkPhysicalDeviceSparseProperties>

        static member Empty =
            VkPhysicalDeviceProperties(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPhysicalDeviceType>, Unchecked.defaultof<String256>, Unchecked.defaultof<Guid>, Unchecked.defaultof<VkPhysicalDeviceLimits>, Unchecked.defaultof<VkPhysicalDeviceSparseProperties>)

        override x.ToString() =
            String.concat "; " [
                sprintf "apiVersion = %A" x.apiVersion
                sprintf "driverVersion = %A" x.driverVersion
                sprintf "vendorID = %A" x.vendorID
                sprintf "deviceID = %A" x.deviceID
                sprintf "deviceType = %A" x.deviceType
                sprintf "deviceName = %A" x.deviceName
                sprintf "pipelineCacheUUID = %A" x.pipelineCacheUUID
                sprintf "limits = %A" x.limits
                sprintf "sparseProperties = %A" x.sparseProperties
            ] |> sprintf "VkPhysicalDeviceProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineCacheCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineCacheCreateFlags
        val mutable public initialDataSize : uint64
        val mutable public pInitialData : nativeint

        new(pNext: nativeint, flags: VkPipelineCacheCreateFlags, initialDataSize: uint64, pInitialData: nativeint) =
            {
                sType = 17u
                pNext = pNext
                flags = flags
                initialDataSize = initialDataSize
                pInitialData = pInitialData
            }

        new(flags: VkPipelineCacheCreateFlags, initialDataSize: uint64, pInitialData: nativeint) =
            VkPipelineCacheCreateInfo(Unchecked.defaultof<nativeint>, flags, initialDataSize, pInitialData)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCacheCreateFlags> && x.initialDataSize = Unchecked.defaultof<uint64> && x.pInitialData = Unchecked.defaultof<nativeint>

        static member Empty =
            VkPipelineCacheCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCacheCreateFlags>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "initialDataSize = %A" x.initialDataSize
                sprintf "pInitialData = %A" x.pInitialData
            ] |> sprintf "VkPipelineCacheCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineCacheHeaderVersionOne =
    struct
        val mutable public headerSize : uint32
        val mutable public headerVersion : VkPipelineCacheHeaderVersion
        val mutable public vendorID : uint32
        val mutable public deviceID : uint32
        val mutable public pipelineCacheUUID : Guid

        new(headerSize: uint32, headerVersion: VkPipelineCacheHeaderVersion, vendorID: uint32, deviceID: uint32, pipelineCacheUUID: Guid) =
            {
                headerSize = headerSize
                headerVersion = headerVersion
                vendorID = vendorID
                deviceID = deviceID
                pipelineCacheUUID = pipelineCacheUUID
            }

        member x.IsEmpty =
            x.headerSize = Unchecked.defaultof<uint32> && x.headerVersion = Unchecked.defaultof<VkPipelineCacheHeaderVersion> && x.vendorID = Unchecked.defaultof<uint32> && x.deviceID = Unchecked.defaultof<uint32> && x.pipelineCacheUUID = Unchecked.defaultof<Guid>

        static member Empty =
            VkPipelineCacheHeaderVersionOne(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPipelineCacheHeaderVersion>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<Guid>)

        override x.ToString() =
            String.concat "; " [
                sprintf "headerSize = %A" x.headerSize
                sprintf "headerVersion = %A" x.headerVersion
                sprintf "vendorID = %A" x.vendorID
                sprintf "deviceID = %A" x.deviceID
                sprintf "pipelineCacheUUID = %A" x.pipelineCacheUUID
            ] |> sprintf "VkPipelineCacheHeaderVersionOne { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPushConstantRange =
    struct
        val mutable public stageFlags : VkShaderStageFlags
        val mutable public offset : uint32
        val mutable public size : uint32

        new(stageFlags: VkShaderStageFlags, offset: uint32, size: uint32) =
            {
                stageFlags = stageFlags
                offset = offset
                size = size
            }

        member x.IsEmpty =
            x.stageFlags = Unchecked.defaultof<VkShaderStageFlags> && x.offset = Unchecked.defaultof<uint32> && x.size = Unchecked.defaultof<uint32>

        static member Empty =
            VkPushConstantRange(Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "stageFlags = %A" x.stageFlags
                sprintf "offset = %A" x.offset
                sprintf "size = %A" x.size
            ] |> sprintf "VkPushConstantRange { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineLayoutCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineLayoutCreateFlags
        val mutable public setLayoutCount : uint32
        val mutable public pSetLayouts : nativeptr<VkDescriptorSetLayout>
        val mutable public pushConstantRangeCount : uint32
        val mutable public pPushConstantRanges : nativeptr<VkPushConstantRange>

        new(pNext: nativeint, flags: VkPipelineLayoutCreateFlags, setLayoutCount: uint32, pSetLayouts: nativeptr<VkDescriptorSetLayout>, pushConstantRangeCount: uint32, pPushConstantRanges: nativeptr<VkPushConstantRange>) =
            {
                sType = 30u
                pNext = pNext
                flags = flags
                setLayoutCount = setLayoutCount
                pSetLayouts = pSetLayouts
                pushConstantRangeCount = pushConstantRangeCount
                pPushConstantRanges = pPushConstantRanges
            }

        new(flags: VkPipelineLayoutCreateFlags, setLayoutCount: uint32, pSetLayouts: nativeptr<VkDescriptorSetLayout>, pushConstantRangeCount: uint32, pPushConstantRanges: nativeptr<VkPushConstantRange>) =
            VkPipelineLayoutCreateInfo(Unchecked.defaultof<nativeint>, flags, setLayoutCount, pSetLayouts, pushConstantRangeCount, pPushConstantRanges)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineLayoutCreateFlags> && x.setLayoutCount = Unchecked.defaultof<uint32> && x.pSetLayouts = Unchecked.defaultof<nativeptr<VkDescriptorSetLayout>> && x.pushConstantRangeCount = Unchecked.defaultof<uint32> && x.pPushConstantRanges = Unchecked.defaultof<nativeptr<VkPushConstantRange>>

        static member Empty =
            VkPipelineLayoutCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineLayoutCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorSetLayout>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPushConstantRange>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "setLayoutCount = %A" x.setLayoutCount
                sprintf "pSetLayouts = %A" x.pSetLayouts
                sprintf "pushConstantRangeCount = %A" x.pushConstantRangeCount
                sprintf "pPushConstantRanges = %A" x.pPushConstantRanges
            ] |> sprintf "VkPipelineLayoutCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkQueryPoolCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkQueryPoolCreateFlags
        val mutable public queryType : VkQueryType
        val mutable public queryCount : uint32
        val mutable public pipelineStatistics : VkQueryPipelineStatisticFlags

        new(pNext: nativeint, flags: VkQueryPoolCreateFlags, queryType: VkQueryType, queryCount: uint32, pipelineStatistics: VkQueryPipelineStatisticFlags) =
            {
                sType = 11u
                pNext = pNext
                flags = flags
                queryType = queryType
                queryCount = queryCount
                pipelineStatistics = pipelineStatistics
            }

        new(flags: VkQueryPoolCreateFlags, queryType: VkQueryType, queryCount: uint32, pipelineStatistics: VkQueryPipelineStatisticFlags) =
            VkQueryPoolCreateInfo(Unchecked.defaultof<nativeint>, flags, queryType, queryCount, pipelineStatistics)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkQueryPoolCreateFlags> && x.queryType = Unchecked.defaultof<VkQueryType> && x.queryCount = Unchecked.defaultof<uint32> && x.pipelineStatistics = Unchecked.defaultof<VkQueryPipelineStatisticFlags>

        static member Empty =
            VkQueryPoolCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkQueryPoolCreateFlags>, Unchecked.defaultof<VkQueryType>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkQueryPipelineStatisticFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "queryType = %A" x.queryType
                sprintf "queryCount = %A" x.queryCount
                sprintf "pipelineStatistics = %A" x.pipelineStatistics
            ] |> sprintf "VkQueryPoolCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkQueueFamilyProperties =
    struct
        val mutable public queueFlags : VkQueueFlags
        val mutable public queueCount : uint32
        val mutable public timestampValidBits : uint32
        val mutable public minImageTransferGranularity : VkExtent3D

        new(queueFlags: VkQueueFlags, queueCount: uint32, timestampValidBits: uint32, minImageTransferGranularity: VkExtent3D) =
            {
                queueFlags = queueFlags
                queueCount = queueCount
                timestampValidBits = timestampValidBits
                minImageTransferGranularity = minImageTransferGranularity
            }

        member x.IsEmpty =
            x.queueFlags = Unchecked.defaultof<VkQueueFlags> && x.queueCount = Unchecked.defaultof<uint32> && x.timestampValidBits = Unchecked.defaultof<uint32> && x.minImageTransferGranularity = Unchecked.defaultof<VkExtent3D>

        static member Empty =
            VkQueueFamilyProperties(Unchecked.defaultof<VkQueueFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkExtent3D>)

        override x.ToString() =
            String.concat "; " [
                sprintf "queueFlags = %A" x.queueFlags
                sprintf "queueCount = %A" x.queueCount
                sprintf "timestampValidBits = %A" x.timestampValidBits
                sprintf "minImageTransferGranularity = %A" x.minImageTransferGranularity
            ] |> sprintf "VkQueueFamilyProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkRenderPassBeginInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public renderPass : VkRenderPass
        val mutable public framebuffer : VkFramebuffer
        val mutable public renderArea : VkRect2D
        val mutable public clearValueCount : uint32
        val mutable public pClearValues : nativeptr<VkClearValue>

        new(pNext: nativeint, renderPass: VkRenderPass, framebuffer: VkFramebuffer, renderArea: VkRect2D, clearValueCount: uint32, pClearValues: nativeptr<VkClearValue>) =
            {
                sType = 43u
                pNext = pNext
                renderPass = renderPass
                framebuffer = framebuffer
                renderArea = renderArea
                clearValueCount = clearValueCount
                pClearValues = pClearValues
            }

        new(renderPass: VkRenderPass, framebuffer: VkFramebuffer, renderArea: VkRect2D, clearValueCount: uint32, pClearValues: nativeptr<VkClearValue>) =
            VkRenderPassBeginInfo(Unchecked.defaultof<nativeint>, renderPass, framebuffer, renderArea, clearValueCount, pClearValues)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.renderPass = Unchecked.defaultof<VkRenderPass> && x.framebuffer = Unchecked.defaultof<VkFramebuffer> && x.renderArea = Unchecked.defaultof<VkRect2D> && x.clearValueCount = Unchecked.defaultof<uint32> && x.pClearValues = Unchecked.defaultof<nativeptr<VkClearValue>>

        static member Empty =
            VkRenderPassBeginInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderPass>, Unchecked.defaultof<VkFramebuffer>, Unchecked.defaultof<VkRect2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkClearValue>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "renderPass = %A" x.renderPass
                sprintf "framebuffer = %A" x.framebuffer
                sprintf "renderArea = %A" x.renderArea
                sprintf "clearValueCount = %A" x.clearValueCount
                sprintf "pClearValues = %A" x.pClearValues
            ] |> sprintf "VkRenderPassBeginInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSubpassDescription =
    struct
        val mutable public flags : VkSubpassDescriptionFlags
        val mutable public pipelineBindPoint : VkPipelineBindPoint
        val mutable public inputAttachmentCount : uint32
        val mutable public pInputAttachments : nativeptr<VkAttachmentReference>
        val mutable public colorAttachmentCount : uint32
        val mutable public pColorAttachments : nativeptr<VkAttachmentReference>
        val mutable public pResolveAttachments : nativeptr<VkAttachmentReference>
        val mutable public pDepthStencilAttachment : nativeptr<VkAttachmentReference>
        val mutable public preserveAttachmentCount : uint32
        val mutable public pPreserveAttachments : nativeptr<uint32>

        new(flags: VkSubpassDescriptionFlags, pipelineBindPoint: VkPipelineBindPoint, inputAttachmentCount: uint32, pInputAttachments: nativeptr<VkAttachmentReference>, colorAttachmentCount: uint32, pColorAttachments: nativeptr<VkAttachmentReference>, pResolveAttachments: nativeptr<VkAttachmentReference>, pDepthStencilAttachment: nativeptr<VkAttachmentReference>, preserveAttachmentCount: uint32, pPreserveAttachments: nativeptr<uint32>) =
            {
                flags = flags
                pipelineBindPoint = pipelineBindPoint
                inputAttachmentCount = inputAttachmentCount
                pInputAttachments = pInputAttachments
                colorAttachmentCount = colorAttachmentCount
                pColorAttachments = pColorAttachments
                pResolveAttachments = pResolveAttachments
                pDepthStencilAttachment = pDepthStencilAttachment
                preserveAttachmentCount = preserveAttachmentCount
                pPreserveAttachments = pPreserveAttachments
            }

        member x.IsEmpty =
            x.flags = Unchecked.defaultof<VkSubpassDescriptionFlags> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.inputAttachmentCount = Unchecked.defaultof<uint32> && x.pInputAttachments = Unchecked.defaultof<nativeptr<VkAttachmentReference>> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachments = Unchecked.defaultof<nativeptr<VkAttachmentReference>> && x.pResolveAttachments = Unchecked.defaultof<nativeptr<VkAttachmentReference>> && x.pDepthStencilAttachment = Unchecked.defaultof<nativeptr<VkAttachmentReference>> && x.preserveAttachmentCount = Unchecked.defaultof<uint32> && x.pPreserveAttachments = Unchecked.defaultof<nativeptr<uint32>>

        static member Empty =
            VkSubpassDescription(Unchecked.defaultof<VkSubpassDescriptionFlags>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentReference>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentReference>>, Unchecked.defaultof<nativeptr<VkAttachmentReference>>, Unchecked.defaultof<nativeptr<VkAttachmentReference>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "flags = %A" x.flags
                sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                sprintf "inputAttachmentCount = %A" x.inputAttachmentCount
                sprintf "pInputAttachments = %A" x.pInputAttachments
                sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                sprintf "pColorAttachments = %A" x.pColorAttachments
                sprintf "pResolveAttachments = %A" x.pResolveAttachments
                sprintf "pDepthStencilAttachment = %A" x.pDepthStencilAttachment
                sprintf "preserveAttachmentCount = %A" x.preserveAttachmentCount
                sprintf "pPreserveAttachments = %A" x.pPreserveAttachments
            ] |> sprintf "VkSubpassDescription { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSubpassDependency =
    struct
        val mutable public srcSubpass : uint32
        val mutable public dstSubpass : uint32
        val mutable public srcStageMask : VkPipelineStageFlags
        val mutable public dstStageMask : VkPipelineStageFlags
        val mutable public srcAccessMask : VkAccessFlags
        val mutable public dstAccessMask : VkAccessFlags
        val mutable public dependencyFlags : VkDependencyFlags

        new(srcSubpass: uint32, dstSubpass: uint32, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags, dependencyFlags: VkDependencyFlags) =
            {
                srcSubpass = srcSubpass
                dstSubpass = dstSubpass
                srcStageMask = srcStageMask
                dstStageMask = dstStageMask
                srcAccessMask = srcAccessMask
                dstAccessMask = dstAccessMask
                dependencyFlags = dependencyFlags
            }

        member x.IsEmpty =
            x.srcSubpass = Unchecked.defaultof<uint32> && x.dstSubpass = Unchecked.defaultof<uint32> && x.srcStageMask = Unchecked.defaultof<VkPipelineStageFlags> && x.dstStageMask = Unchecked.defaultof<VkPipelineStageFlags> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dependencyFlags = Unchecked.defaultof<VkDependencyFlags>

        static member Empty =
            VkSubpassDependency(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPipelineStageFlags>, Unchecked.defaultof<VkPipelineStageFlags>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkDependencyFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "srcSubpass = %A" x.srcSubpass
                sprintf "dstSubpass = %A" x.dstSubpass
                sprintf "srcStageMask = %A" x.srcStageMask
                sprintf "dstStageMask = %A" x.dstStageMask
                sprintf "srcAccessMask = %A" x.srcAccessMask
                sprintf "dstAccessMask = %A" x.dstAccessMask
                sprintf "dependencyFlags = %A" x.dependencyFlags
            ] |> sprintf "VkSubpassDependency { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkRenderPassCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkRenderPassCreateFlags
        val mutable public attachmentCount : uint32
        val mutable public pAttachments : nativeptr<VkAttachmentDescription>
        val mutable public subpassCount : uint32
        val mutable public pSubpasses : nativeptr<VkSubpassDescription>
        val mutable public dependencyCount : uint32
        val mutable public pDependencies : nativeptr<VkSubpassDependency>

        new(pNext: nativeint, flags: VkRenderPassCreateFlags, attachmentCount: uint32, pAttachments: nativeptr<VkAttachmentDescription>, subpassCount: uint32, pSubpasses: nativeptr<VkSubpassDescription>, dependencyCount: uint32, pDependencies: nativeptr<VkSubpassDependency>) =
            {
                sType = 38u
                pNext = pNext
                flags = flags
                attachmentCount = attachmentCount
                pAttachments = pAttachments
                subpassCount = subpassCount
                pSubpasses = pSubpasses
                dependencyCount = dependencyCount
                pDependencies = pDependencies
            }

        new(flags: VkRenderPassCreateFlags, attachmentCount: uint32, pAttachments: nativeptr<VkAttachmentDescription>, subpassCount: uint32, pSubpasses: nativeptr<VkSubpassDescription>, dependencyCount: uint32, pDependencies: nativeptr<VkSubpassDependency>) =
            VkRenderPassCreateInfo(Unchecked.defaultof<nativeint>, flags, attachmentCount, pAttachments, subpassCount, pSubpasses, dependencyCount, pDependencies)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkRenderPassCreateFlags> && x.attachmentCount = Unchecked.defaultof<uint32> && x.pAttachments = Unchecked.defaultof<nativeptr<VkAttachmentDescription>> && x.subpassCount = Unchecked.defaultof<uint32> && x.pSubpasses = Unchecked.defaultof<nativeptr<VkSubpassDescription>> && x.dependencyCount = Unchecked.defaultof<uint32> && x.pDependencies = Unchecked.defaultof<nativeptr<VkSubpassDependency>>

        static member Empty =
            VkRenderPassCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderPassCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentDescription>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSubpassDescription>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSubpassDependency>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "attachmentCount = %A" x.attachmentCount
                sprintf "pAttachments = %A" x.pAttachments
                sprintf "subpassCount = %A" x.subpassCount
                sprintf "pSubpasses = %A" x.pSubpasses
                sprintf "dependencyCount = %A" x.dependencyCount
                sprintf "pDependencies = %A" x.pDependencies
            ] |> sprintf "VkRenderPassCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSamplerCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkSamplerCreateFlags
        val mutable public magFilter : VkFilter
        val mutable public minFilter : VkFilter
        val mutable public mipmapMode : VkSamplerMipmapMode
        val mutable public addressModeU : VkSamplerAddressMode
        val mutable public addressModeV : VkSamplerAddressMode
        val mutable public addressModeW : VkSamplerAddressMode
        val mutable public mipLodBias : float32
        val mutable public anisotropyEnable : VkBool32
        val mutable public maxAnisotropy : float32
        val mutable public compareEnable : VkBool32
        val mutable public compareOp : VkCompareOp
        val mutable public minLod : float32
        val mutable public maxLod : float32
        val mutable public borderColor : VkBorderColor
        val mutable public unnormalizedCoordinates : VkBool32

        new(pNext: nativeint, flags: VkSamplerCreateFlags, magFilter: VkFilter, minFilter: VkFilter, mipmapMode: VkSamplerMipmapMode, addressModeU: VkSamplerAddressMode, addressModeV: VkSamplerAddressMode, addressModeW: VkSamplerAddressMode, mipLodBias: float32, anisotropyEnable: VkBool32, maxAnisotropy: float32, compareEnable: VkBool32, compareOp: VkCompareOp, minLod: float32, maxLod: float32, borderColor: VkBorderColor, unnormalizedCoordinates: VkBool32) =
            {
                sType = 31u
                pNext = pNext
                flags = flags
                magFilter = magFilter
                minFilter = minFilter
                mipmapMode = mipmapMode
                addressModeU = addressModeU
                addressModeV = addressModeV
                addressModeW = addressModeW
                mipLodBias = mipLodBias
                anisotropyEnable = anisotropyEnable
                maxAnisotropy = maxAnisotropy
                compareEnable = compareEnable
                compareOp = compareOp
                minLod = minLod
                maxLod = maxLod
                borderColor = borderColor
                unnormalizedCoordinates = unnormalizedCoordinates
            }

        new(flags: VkSamplerCreateFlags, magFilter: VkFilter, minFilter: VkFilter, mipmapMode: VkSamplerMipmapMode, addressModeU: VkSamplerAddressMode, addressModeV: VkSamplerAddressMode, addressModeW: VkSamplerAddressMode, mipLodBias: float32, anisotropyEnable: VkBool32, maxAnisotropy: float32, compareEnable: VkBool32, compareOp: VkCompareOp, minLod: float32, maxLod: float32, borderColor: VkBorderColor, unnormalizedCoordinates: VkBool32) =
            VkSamplerCreateInfo(Unchecked.defaultof<nativeint>, flags, magFilter, minFilter, mipmapMode, addressModeU, addressModeV, addressModeW, mipLodBias, anisotropyEnable, maxAnisotropy, compareEnable, compareOp, minLod, maxLod, borderColor, unnormalizedCoordinates)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkSamplerCreateFlags> && x.magFilter = Unchecked.defaultof<VkFilter> && x.minFilter = Unchecked.defaultof<VkFilter> && x.mipmapMode = Unchecked.defaultof<VkSamplerMipmapMode> && x.addressModeU = Unchecked.defaultof<VkSamplerAddressMode> && x.addressModeV = Unchecked.defaultof<VkSamplerAddressMode> && x.addressModeW = Unchecked.defaultof<VkSamplerAddressMode> && x.mipLodBias = Unchecked.defaultof<float32> && x.anisotropyEnable = Unchecked.defaultof<VkBool32> && x.maxAnisotropy = Unchecked.defaultof<float32> && x.compareEnable = Unchecked.defaultof<VkBool32> && x.compareOp = Unchecked.defaultof<VkCompareOp> && x.minLod = Unchecked.defaultof<float32> && x.maxLod = Unchecked.defaultof<float32> && x.borderColor = Unchecked.defaultof<VkBorderColor> && x.unnormalizedCoordinates = Unchecked.defaultof<VkBool32>

        static member Empty =
            VkSamplerCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSamplerCreateFlags>, Unchecked.defaultof<VkFilter>, Unchecked.defaultof<VkFilter>, Unchecked.defaultof<VkSamplerMipmapMode>, Unchecked.defaultof<VkSamplerAddressMode>, Unchecked.defaultof<VkSamplerAddressMode>, Unchecked.defaultof<VkSamplerAddressMode>, Unchecked.defaultof<float32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<float32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkCompareOp>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<VkBorderColor>, Unchecked.defaultof<VkBool32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "magFilter = %A" x.magFilter
                sprintf "minFilter = %A" x.minFilter
                sprintf "mipmapMode = %A" x.mipmapMode
                sprintf "addressModeU = %A" x.addressModeU
                sprintf "addressModeV = %A" x.addressModeV
                sprintf "addressModeW = %A" x.addressModeW
                sprintf "mipLodBias = %A" x.mipLodBias
                sprintf "anisotropyEnable = %A" x.anisotropyEnable
                sprintf "maxAnisotropy = %A" x.maxAnisotropy
                sprintf "compareEnable = %A" x.compareEnable
                sprintf "compareOp = %A" x.compareOp
                sprintf "minLod = %A" x.minLod
                sprintf "maxLod = %A" x.maxLod
                sprintf "borderColor = %A" x.borderColor
                sprintf "unnormalizedCoordinates = %A" x.unnormalizedCoordinates
            ] |> sprintf "VkSamplerCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSemaphoreCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkSemaphoreCreateFlags

        new(pNext: nativeint, flags: VkSemaphoreCreateFlags) =
            {
                sType = 9u
                pNext = pNext
                flags = flags
            }

        new(flags: VkSemaphoreCreateFlags) =
            VkSemaphoreCreateInfo(Unchecked.defaultof<nativeint>, flags)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkSemaphoreCreateFlags>

        static member Empty =
            VkSemaphoreCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphoreCreateFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkSemaphoreCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkShaderModuleCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkShaderModuleCreateFlags
        val mutable public codeSize : uint64
        val mutable public pCode : nativeptr<uint32>

        new(pNext: nativeint, flags: VkShaderModuleCreateFlags, codeSize: uint64, pCode: nativeptr<uint32>) =
            {
                sType = 16u
                pNext = pNext
                flags = flags
                codeSize = codeSize
                pCode = pCode
            }

        new(flags: VkShaderModuleCreateFlags, codeSize: uint64, pCode: nativeptr<uint32>) =
            VkShaderModuleCreateInfo(Unchecked.defaultof<nativeint>, flags, codeSize, pCode)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkShaderModuleCreateFlags> && x.codeSize = Unchecked.defaultof<uint64> && x.pCode = Unchecked.defaultof<nativeptr<uint32>>

        static member Empty =
            VkShaderModuleCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderModuleCreateFlags>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeptr<uint32>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "codeSize = %A" x.codeSize
                sprintf "pCode = %A" x.pCode
            ] |> sprintf "VkShaderModuleCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseImageFormatProperties =
    struct
        val mutable public aspectMask : VkImageAspectFlags
        val mutable public imageGranularity : VkExtent3D
        val mutable public flags : VkSparseImageFormatFlags

        new(aspectMask: VkImageAspectFlags, imageGranularity: VkExtent3D, flags: VkSparseImageFormatFlags) =
            {
                aspectMask = aspectMask
                imageGranularity = imageGranularity
                flags = flags
            }

        member x.IsEmpty =
            x.aspectMask = Unchecked.defaultof<VkImageAspectFlags> && x.imageGranularity = Unchecked.defaultof<VkExtent3D> && x.flags = Unchecked.defaultof<VkSparseImageFormatFlags>

        static member Empty =
            VkSparseImageFormatProperties(Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<VkExtent3D>, Unchecked.defaultof<VkSparseImageFormatFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "aspectMask = %A" x.aspectMask
                sprintf "imageGranularity = %A" x.imageGranularity
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkSparseImageFormatProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseImageMemoryRequirements =
    struct
        val mutable public formatProperties : VkSparseImageFormatProperties
        val mutable public imageMipTailFirstLod : uint32
        val mutable public imageMipTailSize : VkDeviceSize
        val mutable public imageMipTailOffset : VkDeviceSize
        val mutable public imageMipTailStride : VkDeviceSize

        new(formatProperties: VkSparseImageFormatProperties, imageMipTailFirstLod: uint32, imageMipTailSize: VkDeviceSize, imageMipTailOffset: VkDeviceSize, imageMipTailStride: VkDeviceSize) =
            {
                formatProperties = formatProperties
                imageMipTailFirstLod = imageMipTailFirstLod
                imageMipTailSize = imageMipTailSize
                imageMipTailOffset = imageMipTailOffset
                imageMipTailStride = imageMipTailStride
            }

        member x.IsEmpty =
            x.formatProperties = Unchecked.defaultof<VkSparseImageFormatProperties> && x.imageMipTailFirstLod = Unchecked.defaultof<uint32> && x.imageMipTailSize = Unchecked.defaultof<VkDeviceSize> && x.imageMipTailOffset = Unchecked.defaultof<VkDeviceSize> && x.imageMipTailStride = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkSparseImageMemoryRequirements(Unchecked.defaultof<VkSparseImageFormatProperties>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "formatProperties = %A" x.formatProperties
                sprintf "imageMipTailFirstLod = %A" x.imageMipTailFirstLod
                sprintf "imageMipTailSize = %A" x.imageMipTailSize
                sprintf "imageMipTailOffset = %A" x.imageMipTailOffset
                sprintf "imageMipTailStride = %A" x.imageMipTailStride
            ] |> sprintf "VkSparseImageMemoryRequirements { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSubmitInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public waitSemaphoreCount : uint32
        val mutable public pWaitSemaphores : nativeptr<VkSemaphore>
        val mutable public pWaitDstStageMask : nativeptr<VkPipelineStageFlags>
        val mutable public commandBufferCount : uint32
        val mutable public pCommandBuffers : nativeptr<VkCommandBuffer>
        val mutable public signalSemaphoreCount : uint32
        val mutable public pSignalSemaphores : nativeptr<VkSemaphore>

        new(pNext: nativeint, waitSemaphoreCount: uint32, pWaitSemaphores: nativeptr<VkSemaphore>, pWaitDstStageMask: nativeptr<VkPipelineStageFlags>, commandBufferCount: uint32, pCommandBuffers: nativeptr<VkCommandBuffer>, signalSemaphoreCount: uint32, pSignalSemaphores: nativeptr<VkSemaphore>) =
            {
                sType = 4u
                pNext = pNext
                waitSemaphoreCount = waitSemaphoreCount
                pWaitSemaphores = pWaitSemaphores
                pWaitDstStageMask = pWaitDstStageMask
                commandBufferCount = commandBufferCount
                pCommandBuffers = pCommandBuffers
                signalSemaphoreCount = signalSemaphoreCount
                pSignalSemaphores = pSignalSemaphores
            }

        new(waitSemaphoreCount: uint32, pWaitSemaphores: nativeptr<VkSemaphore>, pWaitDstStageMask: nativeptr<VkPipelineStageFlags>, commandBufferCount: uint32, pCommandBuffers: nativeptr<VkCommandBuffer>, signalSemaphoreCount: uint32, pSignalSemaphores: nativeptr<VkSemaphore>) =
            VkSubmitInfo(Unchecked.defaultof<nativeint>, waitSemaphoreCount, pWaitSemaphores, pWaitDstStageMask, commandBufferCount, pCommandBuffers, signalSemaphoreCount, pSignalSemaphores)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.waitSemaphoreCount = Unchecked.defaultof<uint32> && x.pWaitSemaphores = Unchecked.defaultof<nativeptr<VkSemaphore>> && x.pWaitDstStageMask = Unchecked.defaultof<nativeptr<VkPipelineStageFlags>> && x.commandBufferCount = Unchecked.defaultof<uint32> && x.pCommandBuffers = Unchecked.defaultof<nativeptr<VkCommandBuffer>> && x.signalSemaphoreCount = Unchecked.defaultof<uint32> && x.pSignalSemaphores = Unchecked.defaultof<nativeptr<VkSemaphore>>

        static member Empty =
            VkSubmitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphore>>, Unchecked.defaultof<nativeptr<VkPipelineStageFlags>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkCommandBuffer>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphore>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "waitSemaphoreCount = %A" x.waitSemaphoreCount
                sprintf "pWaitSemaphores = %A" x.pWaitSemaphores
                sprintf "pWaitDstStageMask = %A" x.pWaitDstStageMask
                sprintf "commandBufferCount = %A" x.commandBufferCount
                sprintf "pCommandBuffers = %A" x.pCommandBuffers
                sprintf "signalSemaphoreCount = %A" x.signalSemaphoreCount
                sprintf "pSignalSemaphores = %A" x.pSignalSemaphores
            ] |> sprintf "VkSubmitInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSubresourceLayout =
    struct
        val mutable public offset : VkDeviceSize
        val mutable public size : VkDeviceSize
        val mutable public rowPitch : VkDeviceSize
        val mutable public arrayPitch : VkDeviceSize
        val mutable public depthPitch : VkDeviceSize

        new(offset: VkDeviceSize, size: VkDeviceSize, rowPitch: VkDeviceSize, arrayPitch: VkDeviceSize, depthPitch: VkDeviceSize) =
            {
                offset = offset
                size = size
                rowPitch = rowPitch
                arrayPitch = arrayPitch
                depthPitch = depthPitch
            }

        member x.IsEmpty =
            x.offset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize> && x.rowPitch = Unchecked.defaultof<VkDeviceSize> && x.arrayPitch = Unchecked.defaultof<VkDeviceSize> && x.depthPitch = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkSubresourceLayout(Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "offset = %A" x.offset
                sprintf "size = %A" x.size
                sprintf "rowPitch = %A" x.rowPitch
                sprintf "arrayPitch = %A" x.arrayPitch
                sprintf "depthPitch = %A" x.depthPitch
            ] |> sprintf "VkSubresourceLayout { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkWriteDescriptorSet =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public dstSet : VkDescriptorSet
        val mutable public dstBinding : uint32
        val mutable public dstArrayElement : uint32
        val mutable public descriptorCount : uint32
        val mutable public descriptorType : VkDescriptorType
        val mutable public pImageInfo : nativeptr<VkDescriptorImageInfo>
        val mutable public pBufferInfo : nativeptr<VkDescriptorBufferInfo>
        val mutable public pTexelBufferView : nativeptr<VkBufferView>

        new(pNext: nativeint, dstSet: VkDescriptorSet, dstBinding: uint32, dstArrayElement: uint32, descriptorCount: uint32, descriptorType: VkDescriptorType, pImageInfo: nativeptr<VkDescriptorImageInfo>, pBufferInfo: nativeptr<VkDescriptorBufferInfo>, pTexelBufferView: nativeptr<VkBufferView>) =
            {
                sType = 35u
                pNext = pNext
                dstSet = dstSet
                dstBinding = dstBinding
                dstArrayElement = dstArrayElement
                descriptorCount = descriptorCount
                descriptorType = descriptorType
                pImageInfo = pImageInfo
                pBufferInfo = pBufferInfo
                pTexelBufferView = pTexelBufferView
            }

        new(dstSet: VkDescriptorSet, dstBinding: uint32, dstArrayElement: uint32, descriptorCount: uint32, descriptorType: VkDescriptorType, pImageInfo: nativeptr<VkDescriptorImageInfo>, pBufferInfo: nativeptr<VkDescriptorBufferInfo>, pTexelBufferView: nativeptr<VkBufferView>) =
            VkWriteDescriptorSet(Unchecked.defaultof<nativeint>, dstSet, dstBinding, dstArrayElement, descriptorCount, descriptorType, pImageInfo, pBufferInfo, pTexelBufferView)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.dstSet = Unchecked.defaultof<VkDescriptorSet> && x.dstBinding = Unchecked.defaultof<uint32> && x.dstArrayElement = Unchecked.defaultof<uint32> && x.descriptorCount = Unchecked.defaultof<uint32> && x.descriptorType = Unchecked.defaultof<VkDescriptorType> && x.pImageInfo = Unchecked.defaultof<nativeptr<VkDescriptorImageInfo>> && x.pBufferInfo = Unchecked.defaultof<nativeptr<VkDescriptorBufferInfo>> && x.pTexelBufferView = Unchecked.defaultof<nativeptr<VkBufferView>>

        static member Empty =
            VkWriteDescriptorSet(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorSet>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDescriptorType>, Unchecked.defaultof<nativeptr<VkDescriptorImageInfo>>, Unchecked.defaultof<nativeptr<VkDescriptorBufferInfo>>, Unchecked.defaultof<nativeptr<VkBufferView>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pNext = %A" x.pNext
                sprintf "dstSet = %A" x.dstSet
                sprintf "dstBinding = %A" x.dstBinding
                sprintf "dstArrayElement = %A" x.dstArrayElement
                sprintf "descriptorCount = %A" x.descriptorCount
                sprintf "descriptorType = %A" x.descriptorType
                sprintf "pImageInfo = %A" x.pImageInfo
                sprintf "pBufferInfo = %A" x.pBufferInfo
                sprintf "pTexelBufferView = %A" x.pTexelBufferView
            ] |> sprintf "VkWriteDescriptorSet { %s }"
    end


module VkRaw =
    [<CompilerMessage("activeInstance is for internal use only", 1337, IsError=false, IsHidden=true)>]
    let mutable internal activeInstance : VkInstance = 0n

    [<Literal>]
    let lib = "vulkan-1"

    [<DllImport(lib, EntryPoint="vkCreateInstance"); SuppressUnmanagedCodeSecurity>]
    extern VkResult private _vkCreateInstance(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkInstance* pInstance)
    let vkCreateInstance(pCreateInfo : nativeptr<VkInstanceCreateInfo>, pAllocator : nativeptr<VkAllocationCallbacks>, pInstance : nativeptr<VkInstance>) =
        let res = _vkCreateInstance(pCreateInfo, pAllocator, pInstance)
        if res = VkResult.Success then
            activeInstance <- NativePtr.read pInstance
        res

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyInstance(VkInstance instance, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType _type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, string pName)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, string pName)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDevice* pDevice)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyDevice(VkDevice device, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkEnumerateInstanceExtensionProperties(string pLayerName, uint32* pPropertyCount, VkExtensionProperties* pProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string pLayerName, uint32* pPropertyCount, VkExtensionProperties* pProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkEnumerateInstanceLayerProperties(uint32* pPropertyCount, VkLayerProperties* pProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32* pPropertyCount, VkLayerProperties* pProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetDeviceQueue(VkDevice device, uint32 queueFamilyIndex, uint32 queueIndex, VkQueue* pQueue)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkQueueSubmit(VkQueue queue, uint32 submitCount, VkSubmitInfo* pSubmits, VkFence fence)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkQueueWaitIdle(VkQueue queue)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkDeviceWaitIdle(VkDevice device)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkFreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, nativeint* ppData)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkUnmapMemory(VkDevice device, VkDeviceMemory memory)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType _type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32* pPropertyCount, VkSparseImageFormatProperties* pProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkQueueBindSparse(VkQueue queue, uint32 bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence fence)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkResetFences(VkDevice device, uint32 fenceCount, VkFence* pFences)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkGetFenceStatus(VkDevice device, VkFence fence)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkWaitForFences(VkDevice device, uint32 fenceCount, VkFence* pFences, VkBool32 waitAll, uint64 timeout)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateEvent(VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent* pEvent)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyEvent(VkDevice device, VkEvent event, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkGetEventStatus(VkDevice device, VkEvent event)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkSetEvent(VkDevice device, VkEvent event)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkResetEvent(VkDevice device, VkEvent event)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount, uint64 dataSize, nativeint pData, VkDeviceSize stride, VkQueryResultFlags flags)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView* pView)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateImage(VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage* pImage)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView* pView)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, uint64* pDataSize, nativeint pData)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32 srcCacheCount, VkPipelineCache* pSrcCaches)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler* pSampler)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkAllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32 descriptorSetCount, VkDescriptorSet* pDescriptorSets)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkUpdateDescriptorSets(VkDevice device, uint32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint32 descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32 commandBufferCount, VkCommandBuffer* pCommandBuffers)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* pBeginInfo)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32 firstViewport, uint32 viewportCount, VkViewport* pViewports)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32 firstScissor, uint32 scissorCount, VkRect2D* pScissors)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float32 lineWidth)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float32 depthBiasConstantFactor, float32 depthBiasClamp, float32 depthBiasSlopeFactor)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, V4f blendConstants)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float32 minDepthBounds, float32 maxDepthBounds)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 compareMask)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 writeMask)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 reference)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 firstSet, uint32 descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint32 dynamicOffsetCount, uint32* pDynamicOffsets)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32 firstBinding, uint32 bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdDraw(VkCommandBuffer commandBuffer, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 vertexOffset, uint32 firstInstance)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32 regionCount, VkBufferCopy* pRegions)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageCopy* pRegions)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageBlit* pRegions, VkFilter filter)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkBufferImageCopy* pRegions)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32 regionCount, VkBufferImageCopy* pRegions)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, nativeint pData)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32 data)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint32 rangeCount, VkImageSubresourceRange* pRanges)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint32 rangeCount, VkImageSubresourceRange* pRanges)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32 attachmentCount, VkClearAttachment* pAttachments, uint32 rectCount, VkClearRect* pRects)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageResolve* pRegions)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32 eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, VkQueryControlFlags flags)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint32 query)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32 offset, uint32 size, nativeint pValues)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdEndRenderPass(VkCommandBuffer commandBuffer)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32 commandBufferCount, VkCommandBuffer* pCommandBuffers)

    [<CompilerMessage("vkImportInstanceDelegate is for internal use only", 1337, IsError=false, IsHidden=true)>]
    let vkImportInstanceDelegate<'T>(name : string) =
        let ptr = vkGetInstanceProcAddr(activeInstance, name)
        if ptr = 0n then
            Log.warn "could not load function: %s" name
            Unchecked.defaultof<'T>
        else
            Report.Line(3, sprintf "loaded function %s (0x%08X)" name ptr)
            Marshal.GetDelegateForFunctionPointer(ptr, typeof<'T>) |> unbox<'T>


module Vulkan11 =

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSamplerYcbcrConversion =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkSamplerYcbcrConversion(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorUpdateTemplate =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkDescriptorUpdateTemplate(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<Flags>]
    type VkSubgroupFeatureFlags =
        | All = 255
        | None = 0
        /// Basic subgroup operations
        | BasicBit = 0x00000001
        /// Vote subgroup operations
        | VoteBit = 0x00000002
        /// Arithmetic subgroup operations
        | ArithmeticBit = 0x00000004
        /// Ballot subgroup operations
        | BallotBit = 0x00000008
        /// Shuffle subgroup operations
        | ShuffleBit = 0x00000010
        /// Shuffle relative subgroup operations
        | ShuffleRelativeBit = 0x00000020
        /// Clustered subgroup operations
        | ClusteredBit = 0x00000040
        /// Quad subgroup operations
        | QuadBit = 0x00000080

    [<Flags>]
    type VkPeerMemoryFeatureFlags =
        | All = 15
        | None = 0
        /// Can read with vkCmdCopy commands
        | CopySrcBit = 0x00000001
        /// Can write with vkCmdCopy commands
        | CopyDstBit = 0x00000002
        /// Can read with any access type/command
        | GenericSrcBit = 0x00000004
        /// Can write with and access type/command
        | GenericDstBit = 0x00000008

    [<Flags>]
    type VkMemoryAllocateFlags =
        | All = 1
        | None = 0
        /// Force allocation on specific devices
        | DeviceMaskBit = 0x00000001

    type VkPointClippingBehavior =
        | AllClipPlanes = 0
        | UserClipPlanesOnly = 1

    type VkTessellationDomainOrigin =
        | UpperLeft = 0
        | LowerLeft = 1

    type VkSamplerYcbcrModelConversion =
        | RgbIdentity = 0
        /// just range expansion
        | YcbcrIdentity = 1
        /// aka HD YUV
        | Ycbcr709 = 2
        /// aka SD YUV
        | Ycbcr601 = 3
        /// aka UHD YUV
        | Ycbcr2020 = 4

    type VkSamplerYcbcrRange =
        /// Luma 0..1 maps to 0..255, chroma -0.5..0.5 to 1..255 (clamped)
        | ItuFull = 0
        /// Luma 0..1 maps to 16..235, chroma -0.5..0.5 to 16..240
        | ItuNarrow = 1

    type VkChromaLocation =
        | CositedEven = 0
        | Midpoint = 1

    type VkDescriptorUpdateTemplateType =
        /// Create descriptor update template for descriptor set updates
        | DescriptorSet = 0

    [<Flags>]
    type VkExternalMemoryHandleTypeFlags =
        | All = 127
        | None = 0
        | OpaqueFdBit = 0x00000001
        | OpaqueWin32Bit = 0x00000002
        | OpaqueWin32KmtBit = 0x00000004
        | D3d11TextureBit = 0x00000008
        | D3d11TextureKmtBit = 0x00000010
        | D3d12HeapBit = 0x00000020
        | D3d12ResourceBit = 0x00000040

    [<Flags>]
    type VkExternalMemoryFeatureFlags =
        | All = 7
        | None = 0
        | DedicatedOnlyBit = 0x00000001
        | ExportableBit = 0x00000002
        | ImportableBit = 0x00000004

    [<Flags>]
    type VkExternalFenceHandleTypeFlags =
        | All = 15
        | None = 0
        | OpaqueFdBit = 0x00000001
        | OpaqueWin32Bit = 0x00000002
        | OpaqueWin32KmtBit = 0x00000004
        | SyncFdBit = 0x00000008

    [<Flags>]
    type VkExternalFenceFeatureFlags =
        | All = 3
        | None = 0
        | ExportableBit = 0x00000001
        | ImportableBit = 0x00000002

    [<Flags>]
    type VkFenceImportFlags =
        | All = 1
        | None = 0
        | TemporaryBit = 0x00000001

    [<Flags>]
    type VkSemaphoreImportFlags =
        | All = 1
        | None = 0
        | TemporaryBit = 0x00000001

    [<Flags>]
    type VkExternalSemaphoreHandleTypeFlags =
        | All = 31
        | None = 0
        | OpaqueFdBit = 0x00000001
        | OpaqueWin32Bit = 0x00000002
        | OpaqueWin32KmtBit = 0x00000004
        | D3d12FenceBit = 0x00000008
        | D3d11FenceBit = 0x00000008
        | SyncFdBit = 0x00000010

    [<Flags>]
    type VkExternalSemaphoreFeatureFlags =
        | All = 3
        | None = 0
        | ExportableBit = 0x00000001
        | ImportableBit = 0x00000002


    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindBufferMemoryDeviceGroupInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceIndexCount : uint32
            val mutable public pDeviceIndices : nativeptr<uint32>

            new(pNext: nativeint, deviceIndexCount: uint32, pDeviceIndices: nativeptr<uint32>) =
                {
                    sType = 1000060013u
                    pNext = pNext
                    deviceIndexCount = deviceIndexCount
                    pDeviceIndices = pDeviceIndices
                }

            new(deviceIndexCount: uint32, pDeviceIndices: nativeptr<uint32>) =
                VkBindBufferMemoryDeviceGroupInfo(Unchecked.defaultof<nativeint>, deviceIndexCount, pDeviceIndices)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceIndexCount = Unchecked.defaultof<uint32> && x.pDeviceIndices = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkBindBufferMemoryDeviceGroupInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceIndexCount = %A" x.deviceIndexCount
                    sprintf "pDeviceIndices = %A" x.pDeviceIndices
                ] |> sprintf "VkBindBufferMemoryDeviceGroupInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindBufferMemoryInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public buffer : VkBuffer
            val mutable public memory : VkDeviceMemory
            val mutable public memoryOffset : VkDeviceSize

            new(pNext: nativeint, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) =
                {
                    sType = 1000157000u
                    pNext = pNext
                    buffer = buffer
                    memory = memory
                    memoryOffset = memoryOffset
                }

            new(buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) =
                VkBindBufferMemoryInfo(Unchecked.defaultof<nativeint>, buffer, memory, memoryOffset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<VkBuffer> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.memoryOffset = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkBindBufferMemoryInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "buffer = %A" x.buffer
                    sprintf "memory = %A" x.memory
                    sprintf "memoryOffset = %A" x.memoryOffset
                ] |> sprintf "VkBindBufferMemoryInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindImageMemoryDeviceGroupInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceIndexCount : uint32
            val mutable public pDeviceIndices : nativeptr<uint32>
            val mutable public splitInstanceBindRegionCount : uint32
            val mutable public pSplitInstanceBindRegions : nativeptr<VkRect2D>

            new(pNext: nativeint, deviceIndexCount: uint32, pDeviceIndices: nativeptr<uint32>, splitInstanceBindRegionCount: uint32, pSplitInstanceBindRegions: nativeptr<VkRect2D>) =
                {
                    sType = 1000060014u
                    pNext = pNext
                    deviceIndexCount = deviceIndexCount
                    pDeviceIndices = pDeviceIndices
                    splitInstanceBindRegionCount = splitInstanceBindRegionCount
                    pSplitInstanceBindRegions = pSplitInstanceBindRegions
                }

            new(deviceIndexCount: uint32, pDeviceIndices: nativeptr<uint32>, splitInstanceBindRegionCount: uint32, pSplitInstanceBindRegions: nativeptr<VkRect2D>) =
                VkBindImageMemoryDeviceGroupInfo(Unchecked.defaultof<nativeint>, deviceIndexCount, pDeviceIndices, splitInstanceBindRegionCount, pSplitInstanceBindRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceIndexCount = Unchecked.defaultof<uint32> && x.pDeviceIndices = Unchecked.defaultof<nativeptr<uint32>> && x.splitInstanceBindRegionCount = Unchecked.defaultof<uint32> && x.pSplitInstanceBindRegions = Unchecked.defaultof<nativeptr<VkRect2D>>

            static member Empty =
                VkBindImageMemoryDeviceGroupInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRect2D>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceIndexCount = %A" x.deviceIndexCount
                    sprintf "pDeviceIndices = %A" x.pDeviceIndices
                    sprintf "splitInstanceBindRegionCount = %A" x.splitInstanceBindRegionCount
                    sprintf "pSplitInstanceBindRegions = %A" x.pSplitInstanceBindRegions
                ] |> sprintf "VkBindImageMemoryDeviceGroupInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindImageMemoryInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image : VkImage
            val mutable public memory : VkDeviceMemory
            val mutable public memoryOffset : VkDeviceSize

            new(pNext: nativeint, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) =
                {
                    sType = 1000157001u
                    pNext = pNext
                    image = image
                    memory = memory
                    memoryOffset = memoryOffset
                }

            new(image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) =
                VkBindImageMemoryInfo(Unchecked.defaultof<nativeint>, image, memory, memoryOffset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.memoryOffset = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkBindImageMemoryInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "image = %A" x.image
                    sprintf "memory = %A" x.memory
                    sprintf "memoryOffset = %A" x.memoryOffset
                ] |> sprintf "VkBindImageMemoryInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindImagePlaneMemoryInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public planeAspect : VkImageAspectFlags

            new(pNext: nativeint, planeAspect: VkImageAspectFlags) =
                {
                    sType = 1000156002u
                    pNext = pNext
                    planeAspect = planeAspect
                }

            new(planeAspect: VkImageAspectFlags) =
                VkBindImagePlaneMemoryInfo(Unchecked.defaultof<nativeint>, planeAspect)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.planeAspect = Unchecked.defaultof<VkImageAspectFlags>

            static member Empty =
                VkBindImagePlaneMemoryInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageAspectFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "planeAspect = %A" x.planeAspect
                ] |> sprintf "VkBindImagePlaneMemoryInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferMemoryRequirementsInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public buffer : VkBuffer

            new(pNext: nativeint, buffer: VkBuffer) =
                {
                    sType = 1000146000u
                    pNext = pNext
                    buffer = buffer
                }

            new(buffer: VkBuffer) =
                VkBufferMemoryRequirementsInfo2(Unchecked.defaultof<nativeint>, buffer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<VkBuffer>

            static member Empty =
                VkBufferMemoryRequirementsInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "buffer = %A" x.buffer
                ] |> sprintf "VkBufferMemoryRequirementsInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorSetLayoutSupport =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public supported : VkBool32

            new(pNext: nativeint, supported: VkBool32) =
                {
                    sType = 1000168001u
                    pNext = pNext
                    supported = supported
                }

            new(supported: VkBool32) =
                VkDescriptorSetLayoutSupport(Unchecked.defaultof<nativeint>, supported)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.supported = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkDescriptorSetLayoutSupport(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "supported = %A" x.supported
                ] |> sprintf "VkDescriptorSetLayoutSupport { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorUpdateTemplateEntry =
        struct
            val mutable public dstBinding : uint32
            val mutable public dstArrayElement : uint32
            val mutable public descriptorCount : uint32
            val mutable public descriptorType : VkDescriptorType
            val mutable public offset : uint64
            val mutable public stride : uint64

            new(dstBinding: uint32, dstArrayElement: uint32, descriptorCount: uint32, descriptorType: VkDescriptorType, offset: uint64, stride: uint64) =
                {
                    dstBinding = dstBinding
                    dstArrayElement = dstArrayElement
                    descriptorCount = descriptorCount
                    descriptorType = descriptorType
                    offset = offset
                    stride = stride
                }

            member x.IsEmpty =
                x.dstBinding = Unchecked.defaultof<uint32> && x.dstArrayElement = Unchecked.defaultof<uint32> && x.descriptorCount = Unchecked.defaultof<uint32> && x.descriptorType = Unchecked.defaultof<VkDescriptorType> && x.offset = Unchecked.defaultof<uint64> && x.stride = Unchecked.defaultof<uint64>

            static member Empty =
                VkDescriptorUpdateTemplateEntry(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDescriptorType>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "dstBinding = %A" x.dstBinding
                    sprintf "dstArrayElement = %A" x.dstArrayElement
                    sprintf "descriptorCount = %A" x.descriptorCount
                    sprintf "descriptorType = %A" x.descriptorType
                    sprintf "offset = %A" x.offset
                    sprintf "stride = %A" x.stride
                ] |> sprintf "VkDescriptorUpdateTemplateEntry { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorUpdateTemplateCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDescriptorUpdateTemplateCreateFlags
            val mutable public descriptorUpdateEntryCount : uint32
            val mutable public pDescriptorUpdateEntries : nativeptr<VkDescriptorUpdateTemplateEntry>
            val mutable public templateType : VkDescriptorUpdateTemplateType
            val mutable public descriptorSetLayout : VkDescriptorSetLayout
            val mutable public pipelineBindPoint : VkPipelineBindPoint
            val mutable public pipelineLayout : VkPipelineLayout
            val mutable public set : uint32

            new(pNext: nativeint, flags: VkDescriptorUpdateTemplateCreateFlags, descriptorUpdateEntryCount: uint32, pDescriptorUpdateEntries: nativeptr<VkDescriptorUpdateTemplateEntry>, templateType: VkDescriptorUpdateTemplateType, descriptorSetLayout: VkDescriptorSetLayout, pipelineBindPoint: VkPipelineBindPoint, pipelineLayout: VkPipelineLayout, set: uint32) =
                {
                    sType = 1000085000u
                    pNext = pNext
                    flags = flags
                    descriptorUpdateEntryCount = descriptorUpdateEntryCount
                    pDescriptorUpdateEntries = pDescriptorUpdateEntries
                    templateType = templateType
                    descriptorSetLayout = descriptorSetLayout
                    pipelineBindPoint = pipelineBindPoint
                    pipelineLayout = pipelineLayout
                    set = set
                }

            new(flags: VkDescriptorUpdateTemplateCreateFlags, descriptorUpdateEntryCount: uint32, pDescriptorUpdateEntries: nativeptr<VkDescriptorUpdateTemplateEntry>, templateType: VkDescriptorUpdateTemplateType, descriptorSetLayout: VkDescriptorSetLayout, pipelineBindPoint: VkPipelineBindPoint, pipelineLayout: VkPipelineLayout, set: uint32) =
                VkDescriptorUpdateTemplateCreateInfo(Unchecked.defaultof<nativeint>, flags, descriptorUpdateEntryCount, pDescriptorUpdateEntries, templateType, descriptorSetLayout, pipelineBindPoint, pipelineLayout, set)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDescriptorUpdateTemplateCreateFlags> && x.descriptorUpdateEntryCount = Unchecked.defaultof<uint32> && x.pDescriptorUpdateEntries = Unchecked.defaultof<nativeptr<VkDescriptorUpdateTemplateEntry>> && x.templateType = Unchecked.defaultof<VkDescriptorUpdateTemplateType> && x.descriptorSetLayout = Unchecked.defaultof<VkDescriptorSetLayout> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.pipelineLayout = Unchecked.defaultof<VkPipelineLayout> && x.set = Unchecked.defaultof<uint32>

            static member Empty =
                VkDescriptorUpdateTemplateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorUpdateTemplateCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorUpdateTemplateEntry>>, Unchecked.defaultof<VkDescriptorUpdateTemplateType>, Unchecked.defaultof<VkDescriptorSetLayout>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "descriptorUpdateEntryCount = %A" x.descriptorUpdateEntryCount
                    sprintf "pDescriptorUpdateEntries = %A" x.pDescriptorUpdateEntries
                    sprintf "templateType = %A" x.templateType
                    sprintf "descriptorSetLayout = %A" x.descriptorSetLayout
                    sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                    sprintf "pipelineLayout = %A" x.pipelineLayout
                    sprintf "set = %A" x.set
                ] |> sprintf "VkDescriptorUpdateTemplateCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceGroupBindSparseInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public resourceDeviceIndex : uint32
            val mutable public memoryDeviceIndex : uint32

            new(pNext: nativeint, resourceDeviceIndex: uint32, memoryDeviceIndex: uint32) =
                {
                    sType = 1000060006u
                    pNext = pNext
                    resourceDeviceIndex = resourceDeviceIndex
                    memoryDeviceIndex = memoryDeviceIndex
                }

            new(resourceDeviceIndex: uint32, memoryDeviceIndex: uint32) =
                VkDeviceGroupBindSparseInfo(Unchecked.defaultof<nativeint>, resourceDeviceIndex, memoryDeviceIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.resourceDeviceIndex = Unchecked.defaultof<uint32> && x.memoryDeviceIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkDeviceGroupBindSparseInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "resourceDeviceIndex = %A" x.resourceDeviceIndex
                    sprintf "memoryDeviceIndex = %A" x.memoryDeviceIndex
                ] |> sprintf "VkDeviceGroupBindSparseInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceGroupCommandBufferBeginInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceMask : uint32

            new(pNext: nativeint, deviceMask: uint32) =
                {
                    sType = 1000060004u
                    pNext = pNext
                    deviceMask = deviceMask
                }

            new(deviceMask: uint32) =
                VkDeviceGroupCommandBufferBeginInfo(Unchecked.defaultof<nativeint>, deviceMask)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceMask = Unchecked.defaultof<uint32>

            static member Empty =
                VkDeviceGroupCommandBufferBeginInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceMask = %A" x.deviceMask
                ] |> sprintf "VkDeviceGroupCommandBufferBeginInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceGroupDeviceCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public physicalDeviceCount : uint32
            val mutable public pPhysicalDevices : nativeptr<VkPhysicalDevice>

            new(pNext: nativeint, physicalDeviceCount: uint32, pPhysicalDevices: nativeptr<VkPhysicalDevice>) =
                {
                    sType = 1000070001u
                    pNext = pNext
                    physicalDeviceCount = physicalDeviceCount
                    pPhysicalDevices = pPhysicalDevices
                }

            new(physicalDeviceCount: uint32, pPhysicalDevices: nativeptr<VkPhysicalDevice>) =
                VkDeviceGroupDeviceCreateInfo(Unchecked.defaultof<nativeint>, physicalDeviceCount, pPhysicalDevices)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.physicalDeviceCount = Unchecked.defaultof<uint32> && x.pPhysicalDevices = Unchecked.defaultof<nativeptr<VkPhysicalDevice>>

            static member Empty =
                VkDeviceGroupDeviceCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPhysicalDevice>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "physicalDeviceCount = %A" x.physicalDeviceCount
                    sprintf "pPhysicalDevices = %A" x.pPhysicalDevices
                ] |> sprintf "VkDeviceGroupDeviceCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceGroupRenderPassBeginInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceMask : uint32
            val mutable public deviceRenderAreaCount : uint32
            val mutable public pDeviceRenderAreas : nativeptr<VkRect2D>

            new(pNext: nativeint, deviceMask: uint32, deviceRenderAreaCount: uint32, pDeviceRenderAreas: nativeptr<VkRect2D>) =
                {
                    sType = 1000060003u
                    pNext = pNext
                    deviceMask = deviceMask
                    deviceRenderAreaCount = deviceRenderAreaCount
                    pDeviceRenderAreas = pDeviceRenderAreas
                }

            new(deviceMask: uint32, deviceRenderAreaCount: uint32, pDeviceRenderAreas: nativeptr<VkRect2D>) =
                VkDeviceGroupRenderPassBeginInfo(Unchecked.defaultof<nativeint>, deviceMask, deviceRenderAreaCount, pDeviceRenderAreas)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceMask = Unchecked.defaultof<uint32> && x.deviceRenderAreaCount = Unchecked.defaultof<uint32> && x.pDeviceRenderAreas = Unchecked.defaultof<nativeptr<VkRect2D>>

            static member Empty =
                VkDeviceGroupRenderPassBeginInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRect2D>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceMask = %A" x.deviceMask
                    sprintf "deviceRenderAreaCount = %A" x.deviceRenderAreaCount
                    sprintf "pDeviceRenderAreas = %A" x.pDeviceRenderAreas
                ] |> sprintf "VkDeviceGroupRenderPassBeginInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceGroupSubmitInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public waitSemaphoreCount : uint32
            val mutable public pWaitSemaphoreDeviceIndices : nativeptr<uint32>
            val mutable public commandBufferCount : uint32
            val mutable public pCommandBufferDeviceMasks : nativeptr<uint32>
            val mutable public signalSemaphoreCount : uint32
            val mutable public pSignalSemaphoreDeviceIndices : nativeptr<uint32>

            new(pNext: nativeint, waitSemaphoreCount: uint32, pWaitSemaphoreDeviceIndices: nativeptr<uint32>, commandBufferCount: uint32, pCommandBufferDeviceMasks: nativeptr<uint32>, signalSemaphoreCount: uint32, pSignalSemaphoreDeviceIndices: nativeptr<uint32>) =
                {
                    sType = 1000060005u
                    pNext = pNext
                    waitSemaphoreCount = waitSemaphoreCount
                    pWaitSemaphoreDeviceIndices = pWaitSemaphoreDeviceIndices
                    commandBufferCount = commandBufferCount
                    pCommandBufferDeviceMasks = pCommandBufferDeviceMasks
                    signalSemaphoreCount = signalSemaphoreCount
                    pSignalSemaphoreDeviceIndices = pSignalSemaphoreDeviceIndices
                }

            new(waitSemaphoreCount: uint32, pWaitSemaphoreDeviceIndices: nativeptr<uint32>, commandBufferCount: uint32, pCommandBufferDeviceMasks: nativeptr<uint32>, signalSemaphoreCount: uint32, pSignalSemaphoreDeviceIndices: nativeptr<uint32>) =
                VkDeviceGroupSubmitInfo(Unchecked.defaultof<nativeint>, waitSemaphoreCount, pWaitSemaphoreDeviceIndices, commandBufferCount, pCommandBufferDeviceMasks, signalSemaphoreCount, pSignalSemaphoreDeviceIndices)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.waitSemaphoreCount = Unchecked.defaultof<uint32> && x.pWaitSemaphoreDeviceIndices = Unchecked.defaultof<nativeptr<uint32>> && x.commandBufferCount = Unchecked.defaultof<uint32> && x.pCommandBufferDeviceMasks = Unchecked.defaultof<nativeptr<uint32>> && x.signalSemaphoreCount = Unchecked.defaultof<uint32> && x.pSignalSemaphoreDeviceIndices = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkDeviceGroupSubmitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "waitSemaphoreCount = %A" x.waitSemaphoreCount
                    sprintf "pWaitSemaphoreDeviceIndices = %A" x.pWaitSemaphoreDeviceIndices
                    sprintf "commandBufferCount = %A" x.commandBufferCount
                    sprintf "pCommandBufferDeviceMasks = %A" x.pCommandBufferDeviceMasks
                    sprintf "signalSemaphoreCount = %A" x.signalSemaphoreCount
                    sprintf "pSignalSemaphoreDeviceIndices = %A" x.pSignalSemaphoreDeviceIndices
                ] |> sprintf "VkDeviceGroupSubmitInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceQueueInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDeviceQueueCreateFlags
            val mutable public queueFamilyIndex : uint32
            val mutable public queueIndex : uint32

            new(pNext: nativeint, flags: VkDeviceQueueCreateFlags, queueFamilyIndex: uint32, queueIndex: uint32) =
                {
                    sType = 1000145003u
                    pNext = pNext
                    flags = flags
                    queueFamilyIndex = queueFamilyIndex
                    queueIndex = queueIndex
                }

            new(flags: VkDeviceQueueCreateFlags, queueFamilyIndex: uint32, queueIndex: uint32) =
                VkDeviceQueueInfo2(Unchecked.defaultof<nativeint>, flags, queueFamilyIndex, queueIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceQueueCreateFlags> && x.queueFamilyIndex = Unchecked.defaultof<uint32> && x.queueIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkDeviceQueueInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceQueueCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "queueFamilyIndex = %A" x.queueFamilyIndex
                    sprintf "queueIndex = %A" x.queueIndex
                ] |> sprintf "VkDeviceQueueInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportFenceCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleTypes : VkExternalFenceHandleTypeFlags

            new(pNext: nativeint, handleTypes: VkExternalFenceHandleTypeFlags) =
                {
                    sType = 1000113000u
                    pNext = pNext
                    handleTypes = handleTypes
                }

            new(handleTypes: VkExternalFenceHandleTypeFlags) =
                VkExportFenceCreateInfo(Unchecked.defaultof<nativeint>, handleTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<VkExternalFenceHandleTypeFlags>

            static member Empty =
                VkExportFenceCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalFenceHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleTypes = %A" x.handleTypes
                ] |> sprintf "VkExportFenceCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMemoryAllocateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleTypes : VkExternalMemoryHandleTypeFlags

            new(pNext: nativeint, handleTypes: VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000072002u
                    pNext = pNext
                    handleTypes = handleTypes
                }

            new(handleTypes: VkExternalMemoryHandleTypeFlags) =
                VkExportMemoryAllocateInfo(Unchecked.defaultof<nativeint>, handleTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkExportMemoryAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleTypes = %A" x.handleTypes
                ] |> sprintf "VkExportMemoryAllocateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportSemaphoreCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleTypes : VkExternalSemaphoreHandleTypeFlags

            new(pNext: nativeint, handleTypes: VkExternalSemaphoreHandleTypeFlags) =
                {
                    sType = 1000077000u
                    pNext = pNext
                    handleTypes = handleTypes
                }

            new(handleTypes: VkExternalSemaphoreHandleTypeFlags) =
                VkExportSemaphoreCreateInfo(Unchecked.defaultof<nativeint>, handleTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>

            static member Empty =
                VkExportSemaphoreCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleTypes = %A" x.handleTypes
                ] |> sprintf "VkExportSemaphoreCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalMemoryProperties =
        struct
            val mutable public externalMemoryFeatures : VkExternalMemoryFeatureFlags
            val mutable public exportFromImportedHandleTypes : VkExternalMemoryHandleTypeFlags
            val mutable public compatibleHandleTypes : VkExternalMemoryHandleTypeFlags

            new(externalMemoryFeatures: VkExternalMemoryFeatureFlags, exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags, compatibleHandleTypes: VkExternalMemoryHandleTypeFlags) =
                {
                    externalMemoryFeatures = externalMemoryFeatures
                    exportFromImportedHandleTypes = exportFromImportedHandleTypes
                    compatibleHandleTypes = compatibleHandleTypes
                }

            member x.IsEmpty =
                x.externalMemoryFeatures = Unchecked.defaultof<VkExternalMemoryFeatureFlags> && x.exportFromImportedHandleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags> && x.compatibleHandleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkExternalMemoryProperties(Unchecked.defaultof<VkExternalMemoryFeatureFlags>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "externalMemoryFeatures = %A" x.externalMemoryFeatures
                    sprintf "exportFromImportedHandleTypes = %A" x.exportFromImportedHandleTypes
                    sprintf "compatibleHandleTypes = %A" x.compatibleHandleTypes
                ] |> sprintf "VkExternalMemoryProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalBufferProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public externalMemoryProperties : VkExternalMemoryProperties

            new(pNext: nativeint, externalMemoryProperties: VkExternalMemoryProperties) =
                {
                    sType = 1000071003u
                    pNext = pNext
                    externalMemoryProperties = externalMemoryProperties
                }

            new(externalMemoryProperties: VkExternalMemoryProperties) =
                VkExternalBufferProperties(Unchecked.defaultof<nativeint>, externalMemoryProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.externalMemoryProperties = Unchecked.defaultof<VkExternalMemoryProperties>

            static member Empty =
                VkExternalBufferProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "externalMemoryProperties = %A" x.externalMemoryProperties
                ] |> sprintf "VkExternalBufferProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalFenceProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public exportFromImportedHandleTypes : VkExternalFenceHandleTypeFlags
            val mutable public compatibleHandleTypes : VkExternalFenceHandleTypeFlags
            val mutable public externalFenceFeatures : VkExternalFenceFeatureFlags

            new(pNext: nativeint, exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags, compatibleHandleTypes: VkExternalFenceHandleTypeFlags, externalFenceFeatures: VkExternalFenceFeatureFlags) =
                {
                    sType = 1000112001u
                    pNext = pNext
                    exportFromImportedHandleTypes = exportFromImportedHandleTypes
                    compatibleHandleTypes = compatibleHandleTypes
                    externalFenceFeatures = externalFenceFeatures
                }

            new(exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags, compatibleHandleTypes: VkExternalFenceHandleTypeFlags, externalFenceFeatures: VkExternalFenceFeatureFlags) =
                VkExternalFenceProperties(Unchecked.defaultof<nativeint>, exportFromImportedHandleTypes, compatibleHandleTypes, externalFenceFeatures)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.exportFromImportedHandleTypes = Unchecked.defaultof<VkExternalFenceHandleTypeFlags> && x.compatibleHandleTypes = Unchecked.defaultof<VkExternalFenceHandleTypeFlags> && x.externalFenceFeatures = Unchecked.defaultof<VkExternalFenceFeatureFlags>

            static member Empty =
                VkExternalFenceProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalFenceHandleTypeFlags>, Unchecked.defaultof<VkExternalFenceHandleTypeFlags>, Unchecked.defaultof<VkExternalFenceFeatureFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "exportFromImportedHandleTypes = %A" x.exportFromImportedHandleTypes
                    sprintf "compatibleHandleTypes = %A" x.compatibleHandleTypes
                    sprintf "externalFenceFeatures = %A" x.externalFenceFeatures
                ] |> sprintf "VkExternalFenceProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalImageFormatProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public externalMemoryProperties : VkExternalMemoryProperties

            new(pNext: nativeint, externalMemoryProperties: VkExternalMemoryProperties) =
                {
                    sType = 1000071001u
                    pNext = pNext
                    externalMemoryProperties = externalMemoryProperties
                }

            new(externalMemoryProperties: VkExternalMemoryProperties) =
                VkExternalImageFormatProperties(Unchecked.defaultof<nativeint>, externalMemoryProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.externalMemoryProperties = Unchecked.defaultof<VkExternalMemoryProperties>

            static member Empty =
                VkExternalImageFormatProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "externalMemoryProperties = %A" x.externalMemoryProperties
                ] |> sprintf "VkExternalImageFormatProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalMemoryBufferCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleTypes : VkExternalMemoryHandleTypeFlags

            new(pNext: nativeint, handleTypes: VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000072000u
                    pNext = pNext
                    handleTypes = handleTypes
                }

            new(handleTypes: VkExternalMemoryHandleTypeFlags) =
                VkExternalMemoryBufferCreateInfo(Unchecked.defaultof<nativeint>, handleTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkExternalMemoryBufferCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleTypes = %A" x.handleTypes
                ] |> sprintf "VkExternalMemoryBufferCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalMemoryImageCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleTypes : VkExternalMemoryHandleTypeFlags

            new(pNext: nativeint, handleTypes: VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000072001u
                    pNext = pNext
                    handleTypes = handleTypes
                }

            new(handleTypes: VkExternalMemoryHandleTypeFlags) =
                VkExternalMemoryImageCreateInfo(Unchecked.defaultof<nativeint>, handleTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkExternalMemoryImageCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleTypes = %A" x.handleTypes
                ] |> sprintf "VkExternalMemoryImageCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalSemaphoreProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public exportFromImportedHandleTypes : VkExternalSemaphoreHandleTypeFlags
            val mutable public compatibleHandleTypes : VkExternalSemaphoreHandleTypeFlags
            val mutable public externalSemaphoreFeatures : VkExternalSemaphoreFeatureFlags

            new(pNext: nativeint, exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags, compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags, externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags) =
                {
                    sType = 1000076001u
                    pNext = pNext
                    exportFromImportedHandleTypes = exportFromImportedHandleTypes
                    compatibleHandleTypes = compatibleHandleTypes
                    externalSemaphoreFeatures = externalSemaphoreFeatures
                }

            new(exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags, compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags, externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags) =
                VkExternalSemaphoreProperties(Unchecked.defaultof<nativeint>, exportFromImportedHandleTypes, compatibleHandleTypes, externalSemaphoreFeatures)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.exportFromImportedHandleTypes = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags> && x.compatibleHandleTypes = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags> && x.externalSemaphoreFeatures = Unchecked.defaultof<VkExternalSemaphoreFeatureFlags>

            static member Empty =
                VkExternalSemaphoreProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>, Unchecked.defaultof<VkExternalSemaphoreFeatureFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "exportFromImportedHandleTypes = %A" x.exportFromImportedHandleTypes
                    sprintf "compatibleHandleTypes = %A" x.compatibleHandleTypes
                    sprintf "externalSemaphoreFeatures = %A" x.externalSemaphoreFeatures
                ] |> sprintf "VkExternalSemaphoreProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkFormatProperties2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public formatProperties : VkFormatProperties

            new(pNext: nativeint, formatProperties: VkFormatProperties) =
                {
                    sType = 1000059002u
                    pNext = pNext
                    formatProperties = formatProperties
                }

            new(formatProperties: VkFormatProperties) =
                VkFormatProperties2(Unchecked.defaultof<nativeint>, formatProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.formatProperties = Unchecked.defaultof<VkFormatProperties>

            static member Empty =
                VkFormatProperties2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormatProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "formatProperties = %A" x.formatProperties
                ] |> sprintf "VkFormatProperties2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageFormatProperties2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageFormatProperties : VkImageFormatProperties

            new(pNext: nativeint, imageFormatProperties: VkImageFormatProperties) =
                {
                    sType = 1000059003u
                    pNext = pNext
                    imageFormatProperties = imageFormatProperties
                }

            new(imageFormatProperties: VkImageFormatProperties) =
                VkImageFormatProperties2(Unchecked.defaultof<nativeint>, imageFormatProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageFormatProperties = Unchecked.defaultof<VkImageFormatProperties>

            static member Empty =
                VkImageFormatProperties2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageFormatProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageFormatProperties = %A" x.imageFormatProperties
                ] |> sprintf "VkImageFormatProperties2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageMemoryRequirementsInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image : VkImage

            new(pNext: nativeint, image: VkImage) =
                {
                    sType = 1000146001u
                    pNext = pNext
                    image = image
                }

            new(image: VkImage) =
                VkImageMemoryRequirementsInfo2(Unchecked.defaultof<nativeint>, image)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage>

            static member Empty =
                VkImageMemoryRequirementsInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "image = %A" x.image
                ] |> sprintf "VkImageMemoryRequirementsInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImagePlaneMemoryRequirementsInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public planeAspect : VkImageAspectFlags

            new(pNext: nativeint, planeAspect: VkImageAspectFlags) =
                {
                    sType = 1000156003u
                    pNext = pNext
                    planeAspect = planeAspect
                }

            new(planeAspect: VkImageAspectFlags) =
                VkImagePlaneMemoryRequirementsInfo(Unchecked.defaultof<nativeint>, planeAspect)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.planeAspect = Unchecked.defaultof<VkImageAspectFlags>

            static member Empty =
                VkImagePlaneMemoryRequirementsInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageAspectFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "planeAspect = %A" x.planeAspect
                ] |> sprintf "VkImagePlaneMemoryRequirementsInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageSparseMemoryRequirementsInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image : VkImage

            new(pNext: nativeint, image: VkImage) =
                {
                    sType = 1000146002u
                    pNext = pNext
                    image = image
                }

            new(image: VkImage) =
                VkImageSparseMemoryRequirementsInfo2(Unchecked.defaultof<nativeint>, image)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage>

            static member Empty =
                VkImageSparseMemoryRequirementsInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "image = %A" x.image
                ] |> sprintf "VkImageSparseMemoryRequirementsInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageViewUsageCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public usage : VkImageUsageFlags

            new(pNext: nativeint, usage: VkImageUsageFlags) =
                {
                    sType = 1000117002u
                    pNext = pNext
                    usage = usage
                }

            new(usage: VkImageUsageFlags) =
                VkImageViewUsageCreateInfo(Unchecked.defaultof<nativeint>, usage)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.usage = Unchecked.defaultof<VkImageUsageFlags>

            static member Empty =
                VkImageViewUsageCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageUsageFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "usage = %A" x.usage
                ] |> sprintf "VkImageViewUsageCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkInputAttachmentAspectReference =
        struct
            val mutable public subpass : uint32
            val mutable public inputAttachmentIndex : uint32
            val mutable public aspectMask : VkImageAspectFlags

            new(subpass: uint32, inputAttachmentIndex: uint32, aspectMask: VkImageAspectFlags) =
                {
                    subpass = subpass
                    inputAttachmentIndex = inputAttachmentIndex
                    aspectMask = aspectMask
                }

            member x.IsEmpty =
                x.subpass = Unchecked.defaultof<uint32> && x.inputAttachmentIndex = Unchecked.defaultof<uint32> && x.aspectMask = Unchecked.defaultof<VkImageAspectFlags>

            static member Empty =
                VkInputAttachmentAspectReference(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageAspectFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "subpass = %A" x.subpass
                    sprintf "inputAttachmentIndex = %A" x.inputAttachmentIndex
                    sprintf "aspectMask = %A" x.aspectMask
                ] |> sprintf "VkInputAttachmentAspectReference { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryAllocateFlagsInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkMemoryAllocateFlags
            val mutable public deviceMask : uint32

            new(pNext: nativeint, flags: VkMemoryAllocateFlags, deviceMask: uint32) =
                {
                    sType = 1000060000u
                    pNext = pNext
                    flags = flags
                    deviceMask = deviceMask
                }

            new(flags: VkMemoryAllocateFlags, deviceMask: uint32) =
                VkMemoryAllocateFlagsInfo(Unchecked.defaultof<nativeint>, flags, deviceMask)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkMemoryAllocateFlags> && x.deviceMask = Unchecked.defaultof<uint32>

            static member Empty =
                VkMemoryAllocateFlagsInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMemoryAllocateFlags>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "deviceMask = %A" x.deviceMask
                ] |> sprintf "VkMemoryAllocateFlagsInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryDedicatedAllocateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image : VkImage
            val mutable public buffer : VkBuffer

            new(pNext: nativeint, image: VkImage, buffer: VkBuffer) =
                {
                    sType = 1000127001u
                    pNext = pNext
                    image = image
                    buffer = buffer
                }

            new(image: VkImage, buffer: VkBuffer) =
                VkMemoryDedicatedAllocateInfo(Unchecked.defaultof<nativeint>, image, buffer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage> && x.buffer = Unchecked.defaultof<VkBuffer>

            static member Empty =
                VkMemoryDedicatedAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkBuffer>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "image = %A" x.image
                    sprintf "buffer = %A" x.buffer
                ] |> sprintf "VkMemoryDedicatedAllocateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryDedicatedRequirements =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public prefersDedicatedAllocation : VkBool32
            val mutable public requiresDedicatedAllocation : VkBool32

            new(pNext: nativeint, prefersDedicatedAllocation: VkBool32, requiresDedicatedAllocation: VkBool32) =
                {
                    sType = 1000127000u
                    pNext = pNext
                    prefersDedicatedAllocation = prefersDedicatedAllocation
                    requiresDedicatedAllocation = requiresDedicatedAllocation
                }

            new(prefersDedicatedAllocation: VkBool32, requiresDedicatedAllocation: VkBool32) =
                VkMemoryDedicatedRequirements(Unchecked.defaultof<nativeint>, prefersDedicatedAllocation, requiresDedicatedAllocation)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.prefersDedicatedAllocation = Unchecked.defaultof<VkBool32> && x.requiresDedicatedAllocation = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkMemoryDedicatedRequirements(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "prefersDedicatedAllocation = %A" x.prefersDedicatedAllocation
                    sprintf "requiresDedicatedAllocation = %A" x.requiresDedicatedAllocation
                ] |> sprintf "VkMemoryDedicatedRequirements { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryRequirements2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryRequirements : VkMemoryRequirements

            new(pNext: nativeint, memoryRequirements: VkMemoryRequirements) =
                {
                    sType = 1000146003u
                    pNext = pNext
                    memoryRequirements = memoryRequirements
                }

            new(memoryRequirements: VkMemoryRequirements) =
                VkMemoryRequirements2(Unchecked.defaultof<nativeint>, memoryRequirements)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryRequirements = Unchecked.defaultof<VkMemoryRequirements>

            static member Empty =
                VkMemoryRequirements2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMemoryRequirements>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryRequirements = %A" x.memoryRequirements
                ] |> sprintf "VkMemoryRequirements2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevice16BitStorageFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public storageBuffer16BitAccess : VkBool32
            val mutable public uniformAndStorageBuffer16BitAccess : VkBool32
            val mutable public storagePushConstant16 : VkBool32
            val mutable public storageInputOutput16 : VkBool32

            new(pNext: nativeint, storageBuffer16BitAccess: VkBool32, uniformAndStorageBuffer16BitAccess: VkBool32, storagePushConstant16: VkBool32, storageInputOutput16: VkBool32) =
                {
                    sType = 1000083000u
                    pNext = pNext
                    storageBuffer16BitAccess = storageBuffer16BitAccess
                    uniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess
                    storagePushConstant16 = storagePushConstant16
                    storageInputOutput16 = storageInputOutput16
                }

            new(storageBuffer16BitAccess: VkBool32, uniformAndStorageBuffer16BitAccess: VkBool32, storagePushConstant16: VkBool32, storageInputOutput16: VkBool32) =
                VkPhysicalDevice16BitStorageFeatures(Unchecked.defaultof<nativeint>, storageBuffer16BitAccess, uniformAndStorageBuffer16BitAccess, storagePushConstant16, storageInputOutput16)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.storageBuffer16BitAccess = Unchecked.defaultof<VkBool32> && x.uniformAndStorageBuffer16BitAccess = Unchecked.defaultof<VkBool32> && x.storagePushConstant16 = Unchecked.defaultof<VkBool32> && x.storageInputOutput16 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevice16BitStorageFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "storageBuffer16BitAccess = %A" x.storageBuffer16BitAccess
                    sprintf "uniformAndStorageBuffer16BitAccess = %A" x.uniformAndStorageBuffer16BitAccess
                    sprintf "storagePushConstant16 = %A" x.storagePushConstant16
                    sprintf "storageInputOutput16 = %A" x.storageInputOutput16
                ] |> sprintf "VkPhysicalDevice16BitStorageFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExternalBufferInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkBufferCreateFlags
            val mutable public usage : VkBufferUsageFlags
            val mutable public handleType : VkExternalMemoryHandleTypeFlags

            new(pNext: nativeint, flags: VkBufferCreateFlags, usage: VkBufferUsageFlags, handleType: VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000071002u
                    pNext = pNext
                    flags = flags
                    usage = usage
                    handleType = handleType
                }

            new(flags: VkBufferCreateFlags, usage: VkBufferUsageFlags, handleType: VkExternalMemoryHandleTypeFlags) =
                VkPhysicalDeviceExternalBufferInfo(Unchecked.defaultof<nativeint>, flags, usage, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkBufferCreateFlags> && x.usage = Unchecked.defaultof<VkBufferUsageFlags> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkPhysicalDeviceExternalBufferInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferCreateFlags>, Unchecked.defaultof<VkBufferUsageFlags>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "usage = %A" x.usage
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkPhysicalDeviceExternalBufferInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExternalFenceInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleType : VkExternalFenceHandleTypeFlags

            new(pNext: nativeint, handleType: VkExternalFenceHandleTypeFlags) =
                {
                    sType = 1000112000u
                    pNext = pNext
                    handleType = handleType
                }

            new(handleType: VkExternalFenceHandleTypeFlags) =
                VkPhysicalDeviceExternalFenceInfo(Unchecked.defaultof<nativeint>, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<VkExternalFenceHandleTypeFlags>

            static member Empty =
                VkPhysicalDeviceExternalFenceInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalFenceHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkPhysicalDeviceExternalFenceInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExternalImageFormatInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleType : VkExternalMemoryHandleTypeFlags

            new(pNext: nativeint, handleType: VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000071000u
                    pNext = pNext
                    handleType = handleType
                }

            new(handleType: VkExternalMemoryHandleTypeFlags) =
                VkPhysicalDeviceExternalImageFormatInfo(Unchecked.defaultof<nativeint>, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkPhysicalDeviceExternalImageFormatInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkPhysicalDeviceExternalImageFormatInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExternalSemaphoreInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleType : VkExternalSemaphoreHandleTypeFlags

            new(pNext: nativeint, handleType: VkExternalSemaphoreHandleTypeFlags) =
                {
                    sType = 1000076000u
                    pNext = pNext
                    handleType = handleType
                }

            new(handleType: VkExternalSemaphoreHandleTypeFlags) =
                VkPhysicalDeviceExternalSemaphoreInfo(Unchecked.defaultof<nativeint>, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>

            static member Empty =
                VkPhysicalDeviceExternalSemaphoreInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkPhysicalDeviceExternalSemaphoreInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFeatures2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public features : VkPhysicalDeviceFeatures

            new(pNext: nativeint, features: VkPhysicalDeviceFeatures) =
                {
                    sType = 1000059000u
                    pNext = pNext
                    features = features
                }

            new(features: VkPhysicalDeviceFeatures) =
                VkPhysicalDeviceFeatures2(Unchecked.defaultof<nativeint>, features)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.features = Unchecked.defaultof<VkPhysicalDeviceFeatures>

            static member Empty =
                VkPhysicalDeviceFeatures2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPhysicalDeviceFeatures>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "features = %A" x.features
                ] |> sprintf "VkPhysicalDeviceFeatures2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceGroupProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public physicalDeviceCount : uint32
            val mutable public physicalDevices : VkPhysicalDevice_32
            val mutable public subsetAllocation : VkBool32

            new(pNext: nativeint, physicalDeviceCount: uint32, physicalDevices: VkPhysicalDevice_32, subsetAllocation: VkBool32) =
                {
                    sType = 1000070000u
                    pNext = pNext
                    physicalDeviceCount = physicalDeviceCount
                    physicalDevices = physicalDevices
                    subsetAllocation = subsetAllocation
                }

            new(physicalDeviceCount: uint32, physicalDevices: VkPhysicalDevice_32, subsetAllocation: VkBool32) =
                VkPhysicalDeviceGroupProperties(Unchecked.defaultof<nativeint>, physicalDeviceCount, physicalDevices, subsetAllocation)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.physicalDeviceCount = Unchecked.defaultof<uint32> && x.physicalDevices = Unchecked.defaultof<VkPhysicalDevice_32> && x.subsetAllocation = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceGroupProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPhysicalDevice_32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "physicalDeviceCount = %A" x.physicalDeviceCount
                    sprintf "physicalDevices = %A" x.physicalDevices
                    sprintf "subsetAllocation = %A" x.subsetAllocation
                ] |> sprintf "VkPhysicalDeviceGroupProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceIDProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceUUID : Guid
            val mutable public driverUUID : Guid
            val mutable public deviceLUID : byte_8
            val mutable public deviceNodeMask : uint32
            val mutable public deviceLUIDValid : VkBool32

            new(pNext: nativeint, deviceUUID: Guid, driverUUID: Guid, deviceLUID: byte_8, deviceNodeMask: uint32, deviceLUIDValid: VkBool32) =
                {
                    sType = 1000071004u
                    pNext = pNext
                    deviceUUID = deviceUUID
                    driverUUID = driverUUID
                    deviceLUID = deviceLUID
                    deviceNodeMask = deviceNodeMask
                    deviceLUIDValid = deviceLUIDValid
                }

            new(deviceUUID: Guid, driverUUID: Guid, deviceLUID: byte_8, deviceNodeMask: uint32, deviceLUIDValid: VkBool32) =
                VkPhysicalDeviceIDProperties(Unchecked.defaultof<nativeint>, deviceUUID, driverUUID, deviceLUID, deviceNodeMask, deviceLUIDValid)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceUUID = Unchecked.defaultof<Guid> && x.driverUUID = Unchecked.defaultof<Guid> && x.deviceLUID = Unchecked.defaultof<byte_8> && x.deviceNodeMask = Unchecked.defaultof<uint32> && x.deviceLUIDValid = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceIDProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Guid>, Unchecked.defaultof<Guid>, Unchecked.defaultof<byte_8>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceUUID = %A" x.deviceUUID
                    sprintf "driverUUID = %A" x.driverUUID
                    sprintf "deviceLUID = %A" x.deviceLUID
                    sprintf "deviceNodeMask = %A" x.deviceNodeMask
                    sprintf "deviceLUIDValid = %A" x.deviceLUIDValid
                ] |> sprintf "VkPhysicalDeviceIDProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceImageFormatInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public format : VkFormat
            val mutable public _type : VkImageType
            val mutable public tiling : VkImageTiling
            val mutable public usage : VkImageUsageFlags
            val mutable public flags : VkImageCreateFlags

            new(pNext: nativeint, format: VkFormat, _type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags) =
                {
                    sType = 1000059004u
                    pNext = pNext
                    format = format
                    _type = _type
                    tiling = tiling
                    usage = usage
                    flags = flags
                }

            new(format: VkFormat, _type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags) =
                VkPhysicalDeviceImageFormatInfo2(Unchecked.defaultof<nativeint>, format, _type, tiling, usage, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x._type = Unchecked.defaultof<VkImageType> && x.tiling = Unchecked.defaultof<VkImageTiling> && x.usage = Unchecked.defaultof<VkImageUsageFlags> && x.flags = Unchecked.defaultof<VkImageCreateFlags>

            static member Empty =
                VkPhysicalDeviceImageFormatInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkImageType>, Unchecked.defaultof<VkImageTiling>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<VkImageCreateFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "format = %A" x.format
                    sprintf "_type = %A" x._type
                    sprintf "tiling = %A" x.tiling
                    sprintf "usage = %A" x.usage
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkPhysicalDeviceImageFormatInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMaintenance3Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxPerSetDescriptors : uint32
            val mutable public maxMemoryAllocationSize : VkDeviceSize

            new(pNext: nativeint, maxPerSetDescriptors: uint32, maxMemoryAllocationSize: VkDeviceSize) =
                {
                    sType = 1000168000u
                    pNext = pNext
                    maxPerSetDescriptors = maxPerSetDescriptors
                    maxMemoryAllocationSize = maxMemoryAllocationSize
                }

            new(maxPerSetDescriptors: uint32, maxMemoryAllocationSize: VkDeviceSize) =
                VkPhysicalDeviceMaintenance3Properties(Unchecked.defaultof<nativeint>, maxPerSetDescriptors, maxMemoryAllocationSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxPerSetDescriptors = Unchecked.defaultof<uint32> && x.maxMemoryAllocationSize = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkPhysicalDeviceMaintenance3Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxPerSetDescriptors = %A" x.maxPerSetDescriptors
                    sprintf "maxMemoryAllocationSize = %A" x.maxMemoryAllocationSize
                ] |> sprintf "VkPhysicalDeviceMaintenance3Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMemoryProperties2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryProperties : VkPhysicalDeviceMemoryProperties

            new(pNext: nativeint, memoryProperties: VkPhysicalDeviceMemoryProperties) =
                {
                    sType = 1000059006u
                    pNext = pNext
                    memoryProperties = memoryProperties
                }

            new(memoryProperties: VkPhysicalDeviceMemoryProperties) =
                VkPhysicalDeviceMemoryProperties2(Unchecked.defaultof<nativeint>, memoryProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryProperties = Unchecked.defaultof<VkPhysicalDeviceMemoryProperties>

            static member Empty =
                VkPhysicalDeviceMemoryProperties2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPhysicalDeviceMemoryProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryProperties = %A" x.memoryProperties
                ] |> sprintf "VkPhysicalDeviceMemoryProperties2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMultiviewFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public multiview : VkBool32
            val mutable public multiviewGeometryShader : VkBool32
            val mutable public multiviewTessellationShader : VkBool32

            new(pNext: nativeint, multiview: VkBool32, multiviewGeometryShader: VkBool32, multiviewTessellationShader: VkBool32) =
                {
                    sType = 1000053001u
                    pNext = pNext
                    multiview = multiview
                    multiviewGeometryShader = multiviewGeometryShader
                    multiviewTessellationShader = multiviewTessellationShader
                }

            new(multiview: VkBool32, multiviewGeometryShader: VkBool32, multiviewTessellationShader: VkBool32) =
                VkPhysicalDeviceMultiviewFeatures(Unchecked.defaultof<nativeint>, multiview, multiviewGeometryShader, multiviewTessellationShader)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.multiview = Unchecked.defaultof<VkBool32> && x.multiviewGeometryShader = Unchecked.defaultof<VkBool32> && x.multiviewTessellationShader = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMultiviewFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "multiview = %A" x.multiview
                    sprintf "multiviewGeometryShader = %A" x.multiviewGeometryShader
                    sprintf "multiviewTessellationShader = %A" x.multiviewTessellationShader
                ] |> sprintf "VkPhysicalDeviceMultiviewFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMultiviewProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxMultiviewViewCount : uint32
            val mutable public maxMultiviewInstanceIndex : uint32

            new(pNext: nativeint, maxMultiviewViewCount: uint32, maxMultiviewInstanceIndex: uint32) =
                {
                    sType = 1000053002u
                    pNext = pNext
                    maxMultiviewViewCount = maxMultiviewViewCount
                    maxMultiviewInstanceIndex = maxMultiviewInstanceIndex
                }

            new(maxMultiviewViewCount: uint32, maxMultiviewInstanceIndex: uint32) =
                VkPhysicalDeviceMultiviewProperties(Unchecked.defaultof<nativeint>, maxMultiviewViewCount, maxMultiviewInstanceIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxMultiviewViewCount = Unchecked.defaultof<uint32> && x.maxMultiviewInstanceIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceMultiviewProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxMultiviewViewCount = %A" x.maxMultiviewViewCount
                    sprintf "maxMultiviewInstanceIndex = %A" x.maxMultiviewInstanceIndex
                ] |> sprintf "VkPhysicalDeviceMultiviewProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePointClippingProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pointClippingBehavior : VkPointClippingBehavior

            new(pNext: nativeint, pointClippingBehavior: VkPointClippingBehavior) =
                {
                    sType = 1000117000u
                    pNext = pNext
                    pointClippingBehavior = pointClippingBehavior
                }

            new(pointClippingBehavior: VkPointClippingBehavior) =
                VkPhysicalDevicePointClippingProperties(Unchecked.defaultof<nativeint>, pointClippingBehavior)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pointClippingBehavior = Unchecked.defaultof<VkPointClippingBehavior>

            static member Empty =
                VkPhysicalDevicePointClippingProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPointClippingBehavior>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "pointClippingBehavior = %A" x.pointClippingBehavior
                ] |> sprintf "VkPhysicalDevicePointClippingProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceProperties2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public properties : VkPhysicalDeviceProperties

            new(pNext: nativeint, properties: VkPhysicalDeviceProperties) =
                {
                    sType = 1000059001u
                    pNext = pNext
                    properties = properties
                }

            new(properties: VkPhysicalDeviceProperties) =
                VkPhysicalDeviceProperties2(Unchecked.defaultof<nativeint>, properties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.properties = Unchecked.defaultof<VkPhysicalDeviceProperties>

            static member Empty =
                VkPhysicalDeviceProperties2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPhysicalDeviceProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "properties = %A" x.properties
                ] |> sprintf "VkPhysicalDeviceProperties2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceProtectedMemoryFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public protectedMemory : VkBool32

            new(pNext: nativeint, protectedMemory: VkBool32) =
                {
                    sType = 1000145001u
                    pNext = pNext
                    protectedMemory = protectedMemory
                }

            new(protectedMemory: VkBool32) =
                VkPhysicalDeviceProtectedMemoryFeatures(Unchecked.defaultof<nativeint>, protectedMemory)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.protectedMemory = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceProtectedMemoryFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "protectedMemory = %A" x.protectedMemory
                ] |> sprintf "VkPhysicalDeviceProtectedMemoryFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceProtectedMemoryProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public protectedNoFault : VkBool32

            new(pNext: nativeint, protectedNoFault: VkBool32) =
                {
                    sType = 1000145002u
                    pNext = pNext
                    protectedNoFault = protectedNoFault
                }

            new(protectedNoFault: VkBool32) =
                VkPhysicalDeviceProtectedMemoryProperties(Unchecked.defaultof<nativeint>, protectedNoFault)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.protectedNoFault = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceProtectedMemoryProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "protectedNoFault = %A" x.protectedNoFault
                ] |> sprintf "VkPhysicalDeviceProtectedMemoryProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSamplerYcbcrConversionFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public samplerYcbcrConversion : VkBool32

            new(pNext: nativeint, samplerYcbcrConversion: VkBool32) =
                {
                    sType = 1000156004u
                    pNext = pNext
                    samplerYcbcrConversion = samplerYcbcrConversion
                }

            new(samplerYcbcrConversion: VkBool32) =
                VkPhysicalDeviceSamplerYcbcrConversionFeatures(Unchecked.defaultof<nativeint>, samplerYcbcrConversion)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.samplerYcbcrConversion = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSamplerYcbcrConversionFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "samplerYcbcrConversion = %A" x.samplerYcbcrConversion
                ] |> sprintf "VkPhysicalDeviceSamplerYcbcrConversionFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderDrawParametersFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderDrawParameters : VkBool32

            new(pNext: nativeint, shaderDrawParameters: VkBool32) =
                {
                    sType = 1000063000u
                    pNext = pNext
                    shaderDrawParameters = shaderDrawParameters
                }

            new(shaderDrawParameters: VkBool32) =
                VkPhysicalDeviceShaderDrawParametersFeatures(Unchecked.defaultof<nativeint>, shaderDrawParameters)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderDrawParameters = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderDrawParametersFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderDrawParameters = %A" x.shaderDrawParameters
                ] |> sprintf "VkPhysicalDeviceShaderDrawParametersFeatures { %s }"
        end

    type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSparseImageFormatInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public format : VkFormat
            val mutable public _type : VkImageType
            val mutable public samples : VkSampleCountFlags
            val mutable public usage : VkImageUsageFlags
            val mutable public tiling : VkImageTiling

            new(pNext: nativeint, format: VkFormat, _type: VkImageType, samples: VkSampleCountFlags, usage: VkImageUsageFlags, tiling: VkImageTiling) =
                {
                    sType = 1000059008u
                    pNext = pNext
                    format = format
                    _type = _type
                    samples = samples
                    usage = usage
                    tiling = tiling
                }

            new(format: VkFormat, _type: VkImageType, samples: VkSampleCountFlags, usage: VkImageUsageFlags, tiling: VkImageTiling) =
                VkPhysicalDeviceSparseImageFormatInfo2(Unchecked.defaultof<nativeint>, format, _type, samples, usage, tiling)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x._type = Unchecked.defaultof<VkImageType> && x.samples = Unchecked.defaultof<VkSampleCountFlags> && x.usage = Unchecked.defaultof<VkImageUsageFlags> && x.tiling = Unchecked.defaultof<VkImageTiling>

            static member Empty =
                VkPhysicalDeviceSparseImageFormatInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkImageType>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<VkImageTiling>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "format = %A" x.format
                    sprintf "_type = %A" x._type
                    sprintf "samples = %A" x.samples
                    sprintf "usage = %A" x.usage
                    sprintf "tiling = %A" x.tiling
                ] |> sprintf "VkPhysicalDeviceSparseImageFormatInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSubgroupProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public subgroupSize : uint32
            val mutable public supportedStages : VkShaderStageFlags
            val mutable public supportedOperations : VkSubgroupFeatureFlags
            val mutable public quadOperationsInAllStages : VkBool32

            new(pNext: nativeint, subgroupSize: uint32, supportedStages: VkShaderStageFlags, supportedOperations: VkSubgroupFeatureFlags, quadOperationsInAllStages: VkBool32) =
                {
                    sType = 1000094000u
                    pNext = pNext
                    subgroupSize = subgroupSize
                    supportedStages = supportedStages
                    supportedOperations = supportedOperations
                    quadOperationsInAllStages = quadOperationsInAllStages
                }

            new(subgroupSize: uint32, supportedStages: VkShaderStageFlags, supportedOperations: VkSubgroupFeatureFlags, quadOperationsInAllStages: VkBool32) =
                VkPhysicalDeviceSubgroupProperties(Unchecked.defaultof<nativeint>, subgroupSize, supportedStages, supportedOperations, quadOperationsInAllStages)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.subgroupSize = Unchecked.defaultof<uint32> && x.supportedStages = Unchecked.defaultof<VkShaderStageFlags> && x.supportedOperations = Unchecked.defaultof<VkSubgroupFeatureFlags> && x.quadOperationsInAllStages = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSubgroupProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkSubgroupFeatureFlags>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "subgroupSize = %A" x.subgroupSize
                    sprintf "supportedStages = %A" x.supportedStages
                    sprintf "supportedOperations = %A" x.supportedOperations
                    sprintf "quadOperationsInAllStages = %A" x.quadOperationsInAllStages
                ] |> sprintf "VkPhysicalDeviceSubgroupProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVariablePointersFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public variablePointersStorageBuffer : VkBool32
            val mutable public variablePointers : VkBool32

            new(pNext: nativeint, variablePointersStorageBuffer: VkBool32, variablePointers: VkBool32) =
                {
                    sType = 1000120000u
                    pNext = pNext
                    variablePointersStorageBuffer = variablePointersStorageBuffer
                    variablePointers = variablePointers
                }

            new(variablePointersStorageBuffer: VkBool32, variablePointers: VkBool32) =
                VkPhysicalDeviceVariablePointersFeatures(Unchecked.defaultof<nativeint>, variablePointersStorageBuffer, variablePointers)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.variablePointersStorageBuffer = Unchecked.defaultof<VkBool32> && x.variablePointers = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVariablePointersFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "variablePointersStorageBuffer = %A" x.variablePointersStorageBuffer
                    sprintf "variablePointers = %A" x.variablePointers
                ] |> sprintf "VkPhysicalDeviceVariablePointersFeatures { %s }"
        end

    type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineTessellationDomainOriginStateCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public domainOrigin : VkTessellationDomainOrigin

            new(pNext: nativeint, domainOrigin: VkTessellationDomainOrigin) =
                {
                    sType = 1000117003u
                    pNext = pNext
                    domainOrigin = domainOrigin
                }

            new(domainOrigin: VkTessellationDomainOrigin) =
                VkPipelineTessellationDomainOriginStateCreateInfo(Unchecked.defaultof<nativeint>, domainOrigin)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.domainOrigin = Unchecked.defaultof<VkTessellationDomainOrigin>

            static member Empty =
                VkPipelineTessellationDomainOriginStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkTessellationDomainOrigin>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "domainOrigin = %A" x.domainOrigin
                ] |> sprintf "VkPipelineTessellationDomainOriginStateCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkProtectedSubmitInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public protectedSubmit : VkBool32

            new(pNext: nativeint, protectedSubmit: VkBool32) =
                {
                    sType = 1000145000u
                    pNext = pNext
                    protectedSubmit = protectedSubmit
                }

            new(protectedSubmit: VkBool32) =
                VkProtectedSubmitInfo(Unchecked.defaultof<nativeint>, protectedSubmit)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.protectedSubmit = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkProtectedSubmitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "protectedSubmit = %A" x.protectedSubmit
                ] |> sprintf "VkProtectedSubmitInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkQueueFamilyProperties2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public queueFamilyProperties : VkQueueFamilyProperties

            new(pNext: nativeint, queueFamilyProperties: VkQueueFamilyProperties) =
                {
                    sType = 1000059005u
                    pNext = pNext
                    queueFamilyProperties = queueFamilyProperties
                }

            new(queueFamilyProperties: VkQueueFamilyProperties) =
                VkQueueFamilyProperties2(Unchecked.defaultof<nativeint>, queueFamilyProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.queueFamilyProperties = Unchecked.defaultof<VkQueueFamilyProperties>

            static member Empty =
                VkQueueFamilyProperties2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkQueueFamilyProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "queueFamilyProperties = %A" x.queueFamilyProperties
                ] |> sprintf "VkQueueFamilyProperties2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassInputAttachmentAspectCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public aspectReferenceCount : uint32
            val mutable public pAspectReferences : nativeptr<VkInputAttachmentAspectReference>

            new(pNext: nativeint, aspectReferenceCount: uint32, pAspectReferences: nativeptr<VkInputAttachmentAspectReference>) =
                {
                    sType = 1000117001u
                    pNext = pNext
                    aspectReferenceCount = aspectReferenceCount
                    pAspectReferences = pAspectReferences
                }

            new(aspectReferenceCount: uint32, pAspectReferences: nativeptr<VkInputAttachmentAspectReference>) =
                VkRenderPassInputAttachmentAspectCreateInfo(Unchecked.defaultof<nativeint>, aspectReferenceCount, pAspectReferences)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.aspectReferenceCount = Unchecked.defaultof<uint32> && x.pAspectReferences = Unchecked.defaultof<nativeptr<VkInputAttachmentAspectReference>>

            static member Empty =
                VkRenderPassInputAttachmentAspectCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkInputAttachmentAspectReference>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "aspectReferenceCount = %A" x.aspectReferenceCount
                    sprintf "pAspectReferences = %A" x.pAspectReferences
                ] |> sprintf "VkRenderPassInputAttachmentAspectCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassMultiviewCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public subpassCount : uint32
            val mutable public pViewMasks : nativeptr<uint32>
            val mutable public dependencyCount : uint32
            val mutable public pViewOffsets : nativeptr<int32>
            val mutable public correlationMaskCount : uint32
            val mutable public pCorrelationMasks : nativeptr<uint32>

            new(pNext: nativeint, subpassCount: uint32, pViewMasks: nativeptr<uint32>, dependencyCount: uint32, pViewOffsets: nativeptr<int32>, correlationMaskCount: uint32, pCorrelationMasks: nativeptr<uint32>) =
                {
                    sType = 1000053000u
                    pNext = pNext
                    subpassCount = subpassCount
                    pViewMasks = pViewMasks
                    dependencyCount = dependencyCount
                    pViewOffsets = pViewOffsets
                    correlationMaskCount = correlationMaskCount
                    pCorrelationMasks = pCorrelationMasks
                }

            new(subpassCount: uint32, pViewMasks: nativeptr<uint32>, dependencyCount: uint32, pViewOffsets: nativeptr<int32>, correlationMaskCount: uint32, pCorrelationMasks: nativeptr<uint32>) =
                VkRenderPassMultiviewCreateInfo(Unchecked.defaultof<nativeint>, subpassCount, pViewMasks, dependencyCount, pViewOffsets, correlationMaskCount, pCorrelationMasks)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.subpassCount = Unchecked.defaultof<uint32> && x.pViewMasks = Unchecked.defaultof<nativeptr<uint32>> && x.dependencyCount = Unchecked.defaultof<uint32> && x.pViewOffsets = Unchecked.defaultof<nativeptr<int32>> && x.correlationMaskCount = Unchecked.defaultof<uint32> && x.pCorrelationMasks = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkRenderPassMultiviewCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<int32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "subpassCount = %A" x.subpassCount
                    sprintf "pViewMasks = %A" x.pViewMasks
                    sprintf "dependencyCount = %A" x.dependencyCount
                    sprintf "pViewOffsets = %A" x.pViewOffsets
                    sprintf "correlationMaskCount = %A" x.correlationMaskCount
                    sprintf "pCorrelationMasks = %A" x.pCorrelationMasks
                ] |> sprintf "VkRenderPassMultiviewCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSamplerYcbcrConversionCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public format : VkFormat
            val mutable public ycbcrModel : VkSamplerYcbcrModelConversion
            val mutable public ycbcrRange : VkSamplerYcbcrRange
            val mutable public components : VkComponentMapping
            val mutable public xChromaOffset : VkChromaLocation
            val mutable public yChromaOffset : VkChromaLocation
            val mutable public chromaFilter : VkFilter
            val mutable public forceExplicitReconstruction : VkBool32

            new(pNext: nativeint, format: VkFormat, ycbcrModel: VkSamplerYcbcrModelConversion, ycbcrRange: VkSamplerYcbcrRange, components: VkComponentMapping, xChromaOffset: VkChromaLocation, yChromaOffset: VkChromaLocation, chromaFilter: VkFilter, forceExplicitReconstruction: VkBool32) =
                {
                    sType = 1000156000u
                    pNext = pNext
                    format = format
                    ycbcrModel = ycbcrModel
                    ycbcrRange = ycbcrRange
                    components = components
                    xChromaOffset = xChromaOffset
                    yChromaOffset = yChromaOffset
                    chromaFilter = chromaFilter
                    forceExplicitReconstruction = forceExplicitReconstruction
                }

            new(format: VkFormat, ycbcrModel: VkSamplerYcbcrModelConversion, ycbcrRange: VkSamplerYcbcrRange, components: VkComponentMapping, xChromaOffset: VkChromaLocation, yChromaOffset: VkChromaLocation, chromaFilter: VkFilter, forceExplicitReconstruction: VkBool32) =
                VkSamplerYcbcrConversionCreateInfo(Unchecked.defaultof<nativeint>, format, ycbcrModel, ycbcrRange, components, xChromaOffset, yChromaOffset, chromaFilter, forceExplicitReconstruction)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x.ycbcrModel = Unchecked.defaultof<VkSamplerYcbcrModelConversion> && x.ycbcrRange = Unchecked.defaultof<VkSamplerYcbcrRange> && x.components = Unchecked.defaultof<VkComponentMapping> && x.xChromaOffset = Unchecked.defaultof<VkChromaLocation> && x.yChromaOffset = Unchecked.defaultof<VkChromaLocation> && x.chromaFilter = Unchecked.defaultof<VkFilter> && x.forceExplicitReconstruction = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkSamplerYcbcrConversionCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkSamplerYcbcrModelConversion>, Unchecked.defaultof<VkSamplerYcbcrRange>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<VkChromaLocation>, Unchecked.defaultof<VkChromaLocation>, Unchecked.defaultof<VkFilter>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "format = %A" x.format
                    sprintf "ycbcrModel = %A" x.ycbcrModel
                    sprintf "ycbcrRange = %A" x.ycbcrRange
                    sprintf "components = %A" x.components
                    sprintf "xChromaOffset = %A" x.xChromaOffset
                    sprintf "yChromaOffset = %A" x.yChromaOffset
                    sprintf "chromaFilter = %A" x.chromaFilter
                    sprintf "forceExplicitReconstruction = %A" x.forceExplicitReconstruction
                ] |> sprintf "VkSamplerYcbcrConversionCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSamplerYcbcrConversionImageFormatProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public combinedImageSamplerDescriptorCount : uint32

            new(pNext: nativeint, combinedImageSamplerDescriptorCount: uint32) =
                {
                    sType = 1000156005u
                    pNext = pNext
                    combinedImageSamplerDescriptorCount = combinedImageSamplerDescriptorCount
                }

            new(combinedImageSamplerDescriptorCount: uint32) =
                VkSamplerYcbcrConversionImageFormatProperties(Unchecked.defaultof<nativeint>, combinedImageSamplerDescriptorCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.combinedImageSamplerDescriptorCount = Unchecked.defaultof<uint32>

            static member Empty =
                VkSamplerYcbcrConversionImageFormatProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "combinedImageSamplerDescriptorCount = %A" x.combinedImageSamplerDescriptorCount
                ] |> sprintf "VkSamplerYcbcrConversionImageFormatProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSamplerYcbcrConversionInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public conversion : VkSamplerYcbcrConversion

            new(pNext: nativeint, conversion: VkSamplerYcbcrConversion) =
                {
                    sType = 1000156001u
                    pNext = pNext
                    conversion = conversion
                }

            new(conversion: VkSamplerYcbcrConversion) =
                VkSamplerYcbcrConversionInfo(Unchecked.defaultof<nativeint>, conversion)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.conversion = Unchecked.defaultof<VkSamplerYcbcrConversion>

            static member Empty =
                VkSamplerYcbcrConversionInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSamplerYcbcrConversion>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "conversion = %A" x.conversion
                ] |> sprintf "VkSamplerYcbcrConversionInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSparseImageFormatProperties2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public properties : VkSparseImageFormatProperties

            new(pNext: nativeint, properties: VkSparseImageFormatProperties) =
                {
                    sType = 1000059007u
                    pNext = pNext
                    properties = properties
                }

            new(properties: VkSparseImageFormatProperties) =
                VkSparseImageFormatProperties2(Unchecked.defaultof<nativeint>, properties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.properties = Unchecked.defaultof<VkSparseImageFormatProperties>

            static member Empty =
                VkSparseImageFormatProperties2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSparseImageFormatProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "properties = %A" x.properties
                ] |> sprintf "VkSparseImageFormatProperties2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSparseImageMemoryRequirements2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryRequirements : VkSparseImageMemoryRequirements

            new(pNext: nativeint, memoryRequirements: VkSparseImageMemoryRequirements) =
                {
                    sType = 1000146004u
                    pNext = pNext
                    memoryRequirements = memoryRequirements
                }

            new(memoryRequirements: VkSparseImageMemoryRequirements) =
                VkSparseImageMemoryRequirements2(Unchecked.defaultof<nativeint>, memoryRequirements)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryRequirements = Unchecked.defaultof<VkSparseImageMemoryRequirements>

            static member Empty =
                VkSparseImageMemoryRequirements2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSparseImageMemoryRequirements>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryRequirements = %A" x.memoryRequirements
                ] |> sprintf "VkSparseImageMemoryRequirements2 { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkBufferCreateFlags with
              /// Buffer requires protected memory
              static member inline ProtectedBit = enum<VkBufferCreateFlags> 0x00000008
         type VkCommandPoolCreateFlags with
              /// Command buffers allocated from pool are protected command buffers
              static member inline ProtectedBit = enum<VkCommandPoolCreateFlags> 0x00000004
         type VkDependencyFlags with
              /// Dependency is across devices
              static member inline DeviceGroupBit = enum<VkDependencyFlags> 0x00000004
              static member inline ViewLocalBit = enum<VkDependencyFlags> 0x00000002
         type VkDeviceQueueCreateFlags with
              /// Queue is a protected-capable device queue
              static member inline ProtectedBit = enum<VkDeviceQueueCreateFlags> 0x00000001
         type VkFormat with
              static member inline G8b8g8r8422Unorm = enum<VkFormat> 1000156000
              static member inline B8g8r8g8422Unorm = enum<VkFormat> 1000156001
              static member inline G8B8R83plane420Unorm = enum<VkFormat> 1000156002
              static member inline G8B8r82plane420Unorm = enum<VkFormat> 1000156003
              static member inline G8B8R83plane422Unorm = enum<VkFormat> 1000156004
              static member inline G8B8r82plane422Unorm = enum<VkFormat> 1000156005
              static member inline G8B8R83plane444Unorm = enum<VkFormat> 1000156006
              static member inline R10x6UnormPack16 = enum<VkFormat> 1000156007
              static member inline R10x6g10x6Unorm2pack16 = enum<VkFormat> 1000156008
              static member inline R10x6g10x6b10x6a10x6Unorm4pack16 = enum<VkFormat> 1000156009
              static member inline G10x6b10x6g10x6r10x6422Unorm4pack16 = enum<VkFormat> 1000156010
              static member inline B10x6g10x6r10x6g10x6422Unorm4pack16 = enum<VkFormat> 1000156011
              static member inline G10x6B10x6R10x63plane420Unorm3pack16 = enum<VkFormat> 1000156012
              static member inline G10x6B10x6r10x62plane420Unorm3pack16 = enum<VkFormat> 1000156013
              static member inline G10x6B10x6R10x63plane422Unorm3pack16 = enum<VkFormat> 1000156014
              static member inline G10x6B10x6r10x62plane422Unorm3pack16 = enum<VkFormat> 1000156015
              static member inline G10x6B10x6R10x63plane444Unorm3pack16 = enum<VkFormat> 1000156016
              static member inline R12x4UnormPack16 = enum<VkFormat> 1000156017
              static member inline R12x4g12x4Unorm2pack16 = enum<VkFormat> 1000156018
              static member inline R12x4g12x4b12x4a12x4Unorm4pack16 = enum<VkFormat> 1000156019
              static member inline G12x4b12x4g12x4r12x4422Unorm4pack16 = enum<VkFormat> 1000156020
              static member inline B12x4g12x4r12x4g12x4422Unorm4pack16 = enum<VkFormat> 1000156021
              static member inline G12x4B12x4R12x43plane420Unorm3pack16 = enum<VkFormat> 1000156022
              static member inline G12x4B12x4r12x42plane420Unorm3pack16 = enum<VkFormat> 1000156023
              static member inline G12x4B12x4R12x43plane422Unorm3pack16 = enum<VkFormat> 1000156024
              static member inline G12x4B12x4r12x42plane422Unorm3pack16 = enum<VkFormat> 1000156025
              static member inline G12x4B12x4R12x43plane444Unorm3pack16 = enum<VkFormat> 1000156026
              static member inline G16b16g16r16422Unorm = enum<VkFormat> 1000156027
              static member inline B16g16r16g16422Unorm = enum<VkFormat> 1000156028
              static member inline G16B16R163plane420Unorm = enum<VkFormat> 1000156029
              static member inline G16B16r162plane420Unorm = enum<VkFormat> 1000156030
              static member inline G16B16R163plane422Unorm = enum<VkFormat> 1000156031
              static member inline G16B16r162plane422Unorm = enum<VkFormat> 1000156032
              static member inline G16B16R163plane444Unorm = enum<VkFormat> 1000156033
         type VkFormatFeatureFlags with
              /// Format can be used as the source image of image transfer commands
              static member inline TransferSrcBit = enum<VkFormatFeatureFlags> 0x00004000
              /// Format can be used as the destination image of image transfer commands
              static member inline TransferDstBit = enum<VkFormatFeatureFlags> 0x00008000
              /// Format can have midpoint rather than cosited chroma samples
              static member inline MidpointChromaSamplesBit = enum<VkFormatFeatureFlags> 0x00020000
              /// Format can be used with linear filtering whilst color conversion is enabled
              static member inline SampledImageYcbcrConversionLinearFilterBit = enum<VkFormatFeatureFlags> 0x00040000
              /// Format can have different chroma, min and mag filters
              static member inline SampledImageYcbcrConversionSeparateReconstructionFilterBit = enum<VkFormatFeatureFlags> 0x00080000
              static member inline SampledImageYcbcrConversionChromaReconstructionExplicitBit = enum<VkFormatFeatureFlags> 0x00100000
              static member inline SampledImageYcbcrConversionChromaReconstructionExplicitForceableBit = enum<VkFormatFeatureFlags> 0x00200000
              /// Format supports disjoint planes
              static member inline DisjointBit = enum<VkFormatFeatureFlags> 0x00400000
              /// Format can have cosited rather than midpoint chroma samples
              static member inline CositedChromaSamplesBit = enum<VkFormatFeatureFlags> 0x00800000
         type VkImageAspectFlags with
              static member inline Plane0Bit = enum<VkImageAspectFlags> 0x00000010
              static member inline Plane1Bit = enum<VkImageAspectFlags> 0x00000020
              static member inline Plane2Bit = enum<VkImageAspectFlags> 0x00000040
         type VkImageCreateFlags with
              static member inline AliasBit = enum<VkImageCreateFlags> 0x00000400
              /// Allows using VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions when binding memory to the image
              static member inline SplitInstanceBindRegionsBit = enum<VkImageCreateFlags> 0x00000040
              /// The 3D image can be viewed as a 2D or 2D array image
              static member inline D2dArrayCompatibleBit = enum<VkImageCreateFlags> 0x00000020
              static member inline BlockTexelViewCompatibleBit = enum<VkImageCreateFlags> 0x00000080
              static member inline ExtendedUsageBit = enum<VkImageCreateFlags> 0x00000100
              /// Image requires protected memory
              static member inline ProtectedBit = enum<VkImageCreateFlags> 0x00000800
              static member inline DisjointBit = enum<VkImageCreateFlags> 0x00000200
         type VkImageLayout with
              static member inline DepthReadOnlyStencilAttachmentOptimal = enum<VkImageLayout> 1000117000
              static member inline DepthAttachmentStencilReadOnlyOptimal = enum<VkImageLayout> 1000117001
         type VkMemoryHeapFlags with
              /// If set, heap allocations allocate multiple instances by default
              static member inline MultiInstanceBit = enum<VkMemoryHeapFlags> 0x00000002
         type VkMemoryPropertyFlags with
              /// Memory is protected
              static member inline ProtectedBit = enum<VkMemoryPropertyFlags> 0x00000020
         type VkObjectType with
              static member inline SamplerYcbcrConversion = enum<VkObjectType> 1000156000
              static member inline DescriptorUpdateTemplate = enum<VkObjectType> 1000085000
         type VkPipelineCreateFlags with
              static member inline ViewIndexFromDeviceIndexBit = enum<VkPipelineCreateFlags> 0x00000008
              static member inline DispatchBaseBit = enum<VkPipelineCreateFlags> 0x00000010
              static member inline DispatchBase = enum<VkPipelineCreateFlags> 0x00000010
         type VkQueueFlags with
              /// Queues may support protected operations
              static member inline ProtectedBit = enum<VkQueueFlags> 0x00000010
         type VkResult with
              static member inline ErrorOutOfPoolMemory = enum<VkResult> -1000069000
              static member inline ErrorInvalidExternalHandle = enum<VkResult> -1000072003

    module VkRaw =
        open VkRaw

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkEnumerateInstanceVersion(uint32* pApiVersion)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkBindBufferMemory2(VkDevice device, uint32 bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkBindImageMemory2(VkDevice device, uint32 bindInfoCount, VkBindImageMemoryInfo* pBindInfos)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32 heapIndex, uint32 localDeviceIndex, uint32 remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32 deviceMask)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32 baseGroupX, uint32 baseGroupY, uint32 baseGroupZ, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32* pPropertyCount, VkSparseImageFormatProperties2* pProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, nativeint pData)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)



module Vulkan12 =
    type VkDriverId =
        /// Advanced Micro Devices, Inc.
        | AmdProprietary = 1
        /// Advanced Micro Devices, Inc.
        | AmdOpenSource = 2
        /// Mesa open source project
        | MesaRadv = 3
        /// NVIDIA Corporation
        | NvidiaProprietary = 4
        /// Intel Corporation
        | IntelProprietaryWindows = 5
        /// Intel Corporation
        | IntelOpenSource = 6
        /// Imagination Technologies
        | ImaginationProprietary = 7
        /// Qualcomm Technologies, Inc.
        | QualcommProprietary = 8
        /// Arm Limited
        | ArmProprietary = 9
        /// Google LLC
        | GoogleSwiftshader = 10
        /// Google LLC
        | GgpProprietary = 11
        /// Broadcom Inc.
        | BroadcomProprietary = 12
        /// Mesa
        | MesaLlvmpipe = 13
        /// MoltenVK
        | Moltenvk = 14
        /// Core Avionics & Industrial Inc.
        | CoreaviProprietary = 15
        /// Juice Technologies, Inc.
        | JuiceProprietary = 16
        /// Verisilicon, Inc.
        | VerisiliconProprietary = 17
        /// Mesa open source project
        | MesaTurnip = 18
        /// Mesa open source project
        | MesaV3dv = 19
        /// Mesa open source project
        | MesaPanvk = 20
        /// Samsung Electronics Co., Ltd.
        | SamsungProprietary = 21
        /// Mesa open source project
        | MesaVenus = 22
        /// Mesa open source project
        | MesaDozen = 23
        /// Mesa open source project
        | MesaNvk = 24
        /// Imagination Technologies
        | ImaginationOpenSource = 25
        /// Mesa open source project
        | MesaHoneykrisp = 26
        /// Vulkan SC Emulation on Vulkan
        | VulkanScEmulationOnVulkan = 27

    type VkShaderFloatControlsIndependence =
        | D32BitOnly = 0
        | All = 1
        | None = 2

    [<Flags>]
    type VkDescriptorBindingFlags =
        | All = 15
        | None = 0
        | UpdateAfterBindBit = 0x00000001
        | UpdateUnusedWhilePendingBit = 0x00000002
        | PartiallyBoundBit = 0x00000004
        | VariableDescriptorCountBit = 0x00000008

    [<Flags>]
    type VkResolveModeFlags =
        | All = 15
        | None = 0
        | SampleZeroBit = 0x00000001
        | AverageBit = 0x00000002
        | MinBit = 0x00000004
        | MaxBit = 0x00000008

    type VkSamplerReductionMode =
        | WeightedAverage = 0
        | Min = 1
        | Max = 2

    type VkSemaphoreType =
        | Binary = 0
        | Timeline = 1

    [<Flags>]
    type VkSemaphoreWaitFlags =
        | All = 1
        | None = 0
        | AnyBit = 0x00000001


    [<StructLayout(LayoutKind.Sequential)>]
    type VkAttachmentDescription2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkAttachmentDescriptionFlags
            val mutable public format : VkFormat
            val mutable public samples : VkSampleCountFlags
            val mutable public loadOp : VkAttachmentLoadOp
            val mutable public storeOp : VkAttachmentStoreOp
            val mutable public stencilLoadOp : VkAttachmentLoadOp
            val mutable public stencilStoreOp : VkAttachmentStoreOp
            val mutable public initialLayout : VkImageLayout
            val mutable public finalLayout : VkImageLayout

            new(pNext: nativeint, flags: VkAttachmentDescriptionFlags, format: VkFormat, samples: VkSampleCountFlags, loadOp: VkAttachmentLoadOp, storeOp: VkAttachmentStoreOp, stencilLoadOp: VkAttachmentLoadOp, stencilStoreOp: VkAttachmentStoreOp, initialLayout: VkImageLayout, finalLayout: VkImageLayout) =
                {
                    sType = 1000109000u
                    pNext = pNext
                    flags = flags
                    format = format
                    samples = samples
                    loadOp = loadOp
                    storeOp = storeOp
                    stencilLoadOp = stencilLoadOp
                    stencilStoreOp = stencilStoreOp
                    initialLayout = initialLayout
                    finalLayout = finalLayout
                }

            new(flags: VkAttachmentDescriptionFlags, format: VkFormat, samples: VkSampleCountFlags, loadOp: VkAttachmentLoadOp, storeOp: VkAttachmentStoreOp, stencilLoadOp: VkAttachmentLoadOp, stencilStoreOp: VkAttachmentStoreOp, initialLayout: VkImageLayout, finalLayout: VkImageLayout) =
                VkAttachmentDescription2(Unchecked.defaultof<nativeint>, flags, format, samples, loadOp, storeOp, stencilLoadOp, stencilStoreOp, initialLayout, finalLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkAttachmentDescriptionFlags> && x.format = Unchecked.defaultof<VkFormat> && x.samples = Unchecked.defaultof<VkSampleCountFlags> && x.loadOp = Unchecked.defaultof<VkAttachmentLoadOp> && x.storeOp = Unchecked.defaultof<VkAttachmentStoreOp> && x.stencilLoadOp = Unchecked.defaultof<VkAttachmentLoadOp> && x.stencilStoreOp = Unchecked.defaultof<VkAttachmentStoreOp> && x.initialLayout = Unchecked.defaultof<VkImageLayout> && x.finalLayout = Unchecked.defaultof<VkImageLayout>

            static member Empty =
                VkAttachmentDescription2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAttachmentDescriptionFlags>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkAttachmentLoadOp>, Unchecked.defaultof<VkAttachmentStoreOp>, Unchecked.defaultof<VkAttachmentLoadOp>, Unchecked.defaultof<VkAttachmentStoreOp>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageLayout>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "format = %A" x.format
                    sprintf "samples = %A" x.samples
                    sprintf "loadOp = %A" x.loadOp
                    sprintf "storeOp = %A" x.storeOp
                    sprintf "stencilLoadOp = %A" x.stencilLoadOp
                    sprintf "stencilStoreOp = %A" x.stencilStoreOp
                    sprintf "initialLayout = %A" x.initialLayout
                    sprintf "finalLayout = %A" x.finalLayout
                ] |> sprintf "VkAttachmentDescription2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAttachmentDescriptionStencilLayout =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stencilInitialLayout : VkImageLayout
            val mutable public stencilFinalLayout : VkImageLayout

            new(pNext: nativeint, stencilInitialLayout: VkImageLayout, stencilFinalLayout: VkImageLayout) =
                {
                    sType = 1000241002u
                    pNext = pNext
                    stencilInitialLayout = stencilInitialLayout
                    stencilFinalLayout = stencilFinalLayout
                }

            new(stencilInitialLayout: VkImageLayout, stencilFinalLayout: VkImageLayout) =
                VkAttachmentDescriptionStencilLayout(Unchecked.defaultof<nativeint>, stencilInitialLayout, stencilFinalLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stencilInitialLayout = Unchecked.defaultof<VkImageLayout> && x.stencilFinalLayout = Unchecked.defaultof<VkImageLayout>

            static member Empty =
                VkAttachmentDescriptionStencilLayout(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageLayout>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "stencilInitialLayout = %A" x.stencilInitialLayout
                    sprintf "stencilFinalLayout = %A" x.stencilFinalLayout
                ] |> sprintf "VkAttachmentDescriptionStencilLayout { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAttachmentReference2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public attachment : uint32
            val mutable public layout : VkImageLayout
            val mutable public aspectMask : VkImageAspectFlags

            new(pNext: nativeint, attachment: uint32, layout: VkImageLayout, aspectMask: VkImageAspectFlags) =
                {
                    sType = 1000109001u
                    pNext = pNext
                    attachment = attachment
                    layout = layout
                    aspectMask = aspectMask
                }

            new(attachment: uint32, layout: VkImageLayout, aspectMask: VkImageAspectFlags) =
                VkAttachmentReference2(Unchecked.defaultof<nativeint>, attachment, layout, aspectMask)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.attachment = Unchecked.defaultof<uint32> && x.layout = Unchecked.defaultof<VkImageLayout> && x.aspectMask = Unchecked.defaultof<VkImageAspectFlags>

            static member Empty =
                VkAttachmentReference2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageAspectFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "attachment = %A" x.attachment
                    sprintf "layout = %A" x.layout
                    sprintf "aspectMask = %A" x.aspectMask
                ] |> sprintf "VkAttachmentReference2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAttachmentReferenceStencilLayout =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stencilLayout : VkImageLayout

            new(pNext: nativeint, stencilLayout: VkImageLayout) =
                {
                    sType = 1000241001u
                    pNext = pNext
                    stencilLayout = stencilLayout
                }

            new(stencilLayout: VkImageLayout) =
                VkAttachmentReferenceStencilLayout(Unchecked.defaultof<nativeint>, stencilLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stencilLayout = Unchecked.defaultof<VkImageLayout>

            static member Empty =
                VkAttachmentReferenceStencilLayout(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageLayout>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "stencilLayout = %A" x.stencilLayout
                ] |> sprintf "VkAttachmentReferenceStencilLayout { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferDeviceAddressInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public buffer : VkBuffer

            new(pNext: nativeint, buffer: VkBuffer) =
                {
                    sType = 1000244001u
                    pNext = pNext
                    buffer = buffer
                }

            new(buffer: VkBuffer) =
                VkBufferDeviceAddressInfo(Unchecked.defaultof<nativeint>, buffer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<VkBuffer>

            static member Empty =
                VkBufferDeviceAddressInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "buffer = %A" x.buffer
                ] |> sprintf "VkBufferDeviceAddressInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferOpaqueCaptureAddressCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public opaqueCaptureAddress : uint64

            new(pNext: nativeint, opaqueCaptureAddress: uint64) =
                {
                    sType = 1000257002u
                    pNext = pNext
                    opaqueCaptureAddress = opaqueCaptureAddress
                }

            new(opaqueCaptureAddress: uint64) =
                VkBufferOpaqueCaptureAddressCreateInfo(Unchecked.defaultof<nativeint>, opaqueCaptureAddress)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.opaqueCaptureAddress = Unchecked.defaultof<uint64>

            static member Empty =
                VkBufferOpaqueCaptureAddressCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "opaqueCaptureAddress = %A" x.opaqueCaptureAddress
                ] |> sprintf "VkBufferOpaqueCaptureAddressCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkConformanceVersion =
        struct
            val mutable public major : byte
            val mutable public minor : byte
            val mutable public subminor : byte
            val mutable public patch : byte

            new(major: byte, minor: byte, subminor: byte, patch: byte) =
                {
                    major = major
                    minor = minor
                    subminor = subminor
                    patch = patch
                }

            member x.IsEmpty =
                x.major = Unchecked.defaultof<byte> && x.minor = Unchecked.defaultof<byte> && x.subminor = Unchecked.defaultof<byte> && x.patch = Unchecked.defaultof<byte>

            static member Empty =
                VkConformanceVersion(Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "major = %A" x.major
                    sprintf "minor = %A" x.minor
                    sprintf "subminor = %A" x.subminor
                    sprintf "patch = %A" x.patch
                ] |> sprintf "VkConformanceVersion { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorSetLayoutBindingFlagsCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public bindingCount : uint32
            val mutable public pBindingFlags : nativeptr<VkDescriptorBindingFlags>

            new(pNext: nativeint, bindingCount: uint32, pBindingFlags: nativeptr<VkDescriptorBindingFlags>) =
                {
                    sType = 1000161000u
                    pNext = pNext
                    bindingCount = bindingCount
                    pBindingFlags = pBindingFlags
                }

            new(bindingCount: uint32, pBindingFlags: nativeptr<VkDescriptorBindingFlags>) =
                VkDescriptorSetLayoutBindingFlagsCreateInfo(Unchecked.defaultof<nativeint>, bindingCount, pBindingFlags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.bindingCount = Unchecked.defaultof<uint32> && x.pBindingFlags = Unchecked.defaultof<nativeptr<VkDescriptorBindingFlags>>

            static member Empty =
                VkDescriptorSetLayoutBindingFlagsCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorBindingFlags>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "bindingCount = %A" x.bindingCount
                    sprintf "pBindingFlags = %A" x.pBindingFlags
                ] |> sprintf "VkDescriptorSetLayoutBindingFlagsCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorSetVariableDescriptorCountAllocateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public descriptorSetCount : uint32
            val mutable public pDescriptorCounts : nativeptr<uint32>

            new(pNext: nativeint, descriptorSetCount: uint32, pDescriptorCounts: nativeptr<uint32>) =
                {
                    sType = 1000161003u
                    pNext = pNext
                    descriptorSetCount = descriptorSetCount
                    pDescriptorCounts = pDescriptorCounts
                }

            new(descriptorSetCount: uint32, pDescriptorCounts: nativeptr<uint32>) =
                VkDescriptorSetVariableDescriptorCountAllocateInfo(Unchecked.defaultof<nativeint>, descriptorSetCount, pDescriptorCounts)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.descriptorSetCount = Unchecked.defaultof<uint32> && x.pDescriptorCounts = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkDescriptorSetVariableDescriptorCountAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "descriptorSetCount = %A" x.descriptorSetCount
                    sprintf "pDescriptorCounts = %A" x.pDescriptorCounts
                ] |> sprintf "VkDescriptorSetVariableDescriptorCountAllocateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorSetVariableDescriptorCountLayoutSupport =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxVariableDescriptorCount : uint32

            new(pNext: nativeint, maxVariableDescriptorCount: uint32) =
                {
                    sType = 1000161004u
                    pNext = pNext
                    maxVariableDescriptorCount = maxVariableDescriptorCount
                }

            new(maxVariableDescriptorCount: uint32) =
                VkDescriptorSetVariableDescriptorCountLayoutSupport(Unchecked.defaultof<nativeint>, maxVariableDescriptorCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxVariableDescriptorCount = Unchecked.defaultof<uint32>

            static member Empty =
                VkDescriptorSetVariableDescriptorCountLayoutSupport(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxVariableDescriptorCount = %A" x.maxVariableDescriptorCount
                ] |> sprintf "VkDescriptorSetVariableDescriptorCountLayoutSupport { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceMemoryOpaqueCaptureAddressInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memory : VkDeviceMemory

            new(pNext: nativeint, memory: VkDeviceMemory) =
                {
                    sType = 1000257004u
                    pNext = pNext
                    memory = memory
                }

            new(memory: VkDeviceMemory) =
                VkDeviceMemoryOpaqueCaptureAddressInfo(Unchecked.defaultof<nativeint>, memory)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory>

            static member Empty =
                VkDeviceMemoryOpaqueCaptureAddressInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "memory = %A" x.memory
                ] |> sprintf "VkDeviceMemoryOpaqueCaptureAddressInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkFramebufferAttachmentImageInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkImageCreateFlags
            val mutable public usage : VkImageUsageFlags
            val mutable public width : uint32
            val mutable public height : uint32
            val mutable public layerCount : uint32
            val mutable public viewFormatCount : uint32
            val mutable public pViewFormats : nativeptr<VkFormat>

            new(pNext: nativeint, flags: VkImageCreateFlags, usage: VkImageUsageFlags, width: uint32, height: uint32, layerCount: uint32, viewFormatCount: uint32, pViewFormats: nativeptr<VkFormat>) =
                {
                    sType = 1000108002u
                    pNext = pNext
                    flags = flags
                    usage = usage
                    width = width
                    height = height
                    layerCount = layerCount
                    viewFormatCount = viewFormatCount
                    pViewFormats = pViewFormats
                }

            new(flags: VkImageCreateFlags, usage: VkImageUsageFlags, width: uint32, height: uint32, layerCount: uint32, viewFormatCount: uint32, pViewFormats: nativeptr<VkFormat>) =
                VkFramebufferAttachmentImageInfo(Unchecked.defaultof<nativeint>, flags, usage, width, height, layerCount, viewFormatCount, pViewFormats)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkImageCreateFlags> && x.usage = Unchecked.defaultof<VkImageUsageFlags> && x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32> && x.layerCount = Unchecked.defaultof<uint32> && x.viewFormatCount = Unchecked.defaultof<uint32> && x.pViewFormats = Unchecked.defaultof<nativeptr<VkFormat>>

            static member Empty =
                VkFramebufferAttachmentImageInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageCreateFlags>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkFormat>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "usage = %A" x.usage
                    sprintf "width = %A" x.width
                    sprintf "height = %A" x.height
                    sprintf "layerCount = %A" x.layerCount
                    sprintf "viewFormatCount = %A" x.viewFormatCount
                    sprintf "pViewFormats = %A" x.pViewFormats
                ] |> sprintf "VkFramebufferAttachmentImageInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkFramebufferAttachmentsCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public attachmentImageInfoCount : uint32
            val mutable public pAttachmentImageInfos : nativeptr<VkFramebufferAttachmentImageInfo>

            new(pNext: nativeint, attachmentImageInfoCount: uint32, pAttachmentImageInfos: nativeptr<VkFramebufferAttachmentImageInfo>) =
                {
                    sType = 1000108001u
                    pNext = pNext
                    attachmentImageInfoCount = attachmentImageInfoCount
                    pAttachmentImageInfos = pAttachmentImageInfos
                }

            new(attachmentImageInfoCount: uint32, pAttachmentImageInfos: nativeptr<VkFramebufferAttachmentImageInfo>) =
                VkFramebufferAttachmentsCreateInfo(Unchecked.defaultof<nativeint>, attachmentImageInfoCount, pAttachmentImageInfos)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.attachmentImageInfoCount = Unchecked.defaultof<uint32> && x.pAttachmentImageInfos = Unchecked.defaultof<nativeptr<VkFramebufferAttachmentImageInfo>>

            static member Empty =
                VkFramebufferAttachmentsCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkFramebufferAttachmentImageInfo>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "attachmentImageInfoCount = %A" x.attachmentImageInfoCount
                    sprintf "pAttachmentImageInfos = %A" x.pAttachmentImageInfos
                ] |> sprintf "VkFramebufferAttachmentsCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageFormatListCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public viewFormatCount : uint32
            val mutable public pViewFormats : nativeptr<VkFormat>

            new(pNext: nativeint, viewFormatCount: uint32, pViewFormats: nativeptr<VkFormat>) =
                {
                    sType = 1000147000u
                    pNext = pNext
                    viewFormatCount = viewFormatCount
                    pViewFormats = pViewFormats
                }

            new(viewFormatCount: uint32, pViewFormats: nativeptr<VkFormat>) =
                VkImageFormatListCreateInfo(Unchecked.defaultof<nativeint>, viewFormatCount, pViewFormats)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.viewFormatCount = Unchecked.defaultof<uint32> && x.pViewFormats = Unchecked.defaultof<nativeptr<VkFormat>>

            static member Empty =
                VkImageFormatListCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkFormat>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "viewFormatCount = %A" x.viewFormatCount
                    sprintf "pViewFormats = %A" x.pViewFormats
                ] |> sprintf "VkImageFormatListCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageStencilUsageCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stencilUsage : VkImageUsageFlags

            new(pNext: nativeint, stencilUsage: VkImageUsageFlags) =
                {
                    sType = 1000246000u
                    pNext = pNext
                    stencilUsage = stencilUsage
                }

            new(stencilUsage: VkImageUsageFlags) =
                VkImageStencilUsageCreateInfo(Unchecked.defaultof<nativeint>, stencilUsage)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stencilUsage = Unchecked.defaultof<VkImageUsageFlags>

            static member Empty =
                VkImageStencilUsageCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageUsageFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "stencilUsage = %A" x.stencilUsage
                ] |> sprintf "VkImageStencilUsageCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryOpaqueCaptureAddressAllocateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public opaqueCaptureAddress : uint64

            new(pNext: nativeint, opaqueCaptureAddress: uint64) =
                {
                    sType = 1000257003u
                    pNext = pNext
                    opaqueCaptureAddress = opaqueCaptureAddress
                }

            new(opaqueCaptureAddress: uint64) =
                VkMemoryOpaqueCaptureAddressAllocateInfo(Unchecked.defaultof<nativeint>, opaqueCaptureAddress)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.opaqueCaptureAddress = Unchecked.defaultof<uint64>

            static member Empty =
                VkMemoryOpaqueCaptureAddressAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "opaqueCaptureAddress = %A" x.opaqueCaptureAddress
                ] |> sprintf "VkMemoryOpaqueCaptureAddressAllocateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevice8BitStorageFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public storageBuffer8BitAccess : VkBool32
            val mutable public uniformAndStorageBuffer8BitAccess : VkBool32
            val mutable public storagePushConstant8 : VkBool32

            new(pNext: nativeint, storageBuffer8BitAccess: VkBool32, uniformAndStorageBuffer8BitAccess: VkBool32, storagePushConstant8: VkBool32) =
                {
                    sType = 1000177000u
                    pNext = pNext
                    storageBuffer8BitAccess = storageBuffer8BitAccess
                    uniformAndStorageBuffer8BitAccess = uniformAndStorageBuffer8BitAccess
                    storagePushConstant8 = storagePushConstant8
                }

            new(storageBuffer8BitAccess: VkBool32, uniformAndStorageBuffer8BitAccess: VkBool32, storagePushConstant8: VkBool32) =
                VkPhysicalDevice8BitStorageFeatures(Unchecked.defaultof<nativeint>, storageBuffer8BitAccess, uniformAndStorageBuffer8BitAccess, storagePushConstant8)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.storageBuffer8BitAccess = Unchecked.defaultof<VkBool32> && x.uniformAndStorageBuffer8BitAccess = Unchecked.defaultof<VkBool32> && x.storagePushConstant8 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevice8BitStorageFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "storageBuffer8BitAccess = %A" x.storageBuffer8BitAccess
                    sprintf "uniformAndStorageBuffer8BitAccess = %A" x.uniformAndStorageBuffer8BitAccess
                    sprintf "storagePushConstant8 = %A" x.storagePushConstant8
                ] |> sprintf "VkPhysicalDevice8BitStorageFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceBufferDeviceAddressFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public bufferDeviceAddress : VkBool32
            val mutable public bufferDeviceAddressCaptureReplay : VkBool32
            val mutable public bufferDeviceAddressMultiDevice : VkBool32

            new(pNext: nativeint, bufferDeviceAddress: VkBool32, bufferDeviceAddressCaptureReplay: VkBool32, bufferDeviceAddressMultiDevice: VkBool32) =
                {
                    sType = 1000257000u
                    pNext = pNext
                    bufferDeviceAddress = bufferDeviceAddress
                    bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay
                    bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice
                }

            new(bufferDeviceAddress: VkBool32, bufferDeviceAddressCaptureReplay: VkBool32, bufferDeviceAddressMultiDevice: VkBool32) =
                VkPhysicalDeviceBufferDeviceAddressFeatures(Unchecked.defaultof<nativeint>, bufferDeviceAddress, bufferDeviceAddressCaptureReplay, bufferDeviceAddressMultiDevice)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.bufferDeviceAddress = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddressCaptureReplay = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddressMultiDevice = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceBufferDeviceAddressFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "bufferDeviceAddress = %A" x.bufferDeviceAddress
                    sprintf "bufferDeviceAddressCaptureReplay = %A" x.bufferDeviceAddressCaptureReplay
                    sprintf "bufferDeviceAddressMultiDevice = %A" x.bufferDeviceAddressMultiDevice
                ] |> sprintf "VkPhysicalDeviceBufferDeviceAddressFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDepthStencilResolveProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public supportedDepthResolveModes : VkResolveModeFlags
            val mutable public supportedStencilResolveModes : VkResolveModeFlags
            val mutable public independentResolveNone : VkBool32
            val mutable public independentResolve : VkBool32

            new(pNext: nativeint, supportedDepthResolveModes: VkResolveModeFlags, supportedStencilResolveModes: VkResolveModeFlags, independentResolveNone: VkBool32, independentResolve: VkBool32) =
                {
                    sType = 1000199000u
                    pNext = pNext
                    supportedDepthResolveModes = supportedDepthResolveModes
                    supportedStencilResolveModes = supportedStencilResolveModes
                    independentResolveNone = independentResolveNone
                    independentResolve = independentResolve
                }

            new(supportedDepthResolveModes: VkResolveModeFlags, supportedStencilResolveModes: VkResolveModeFlags, independentResolveNone: VkBool32, independentResolve: VkBool32) =
                VkPhysicalDeviceDepthStencilResolveProperties(Unchecked.defaultof<nativeint>, supportedDepthResolveModes, supportedStencilResolveModes, independentResolveNone, independentResolve)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.supportedDepthResolveModes = Unchecked.defaultof<VkResolveModeFlags> && x.supportedStencilResolveModes = Unchecked.defaultof<VkResolveModeFlags> && x.independentResolveNone = Unchecked.defaultof<VkBool32> && x.independentResolve = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDepthStencilResolveProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "supportedDepthResolveModes = %A" x.supportedDepthResolveModes
                    sprintf "supportedStencilResolveModes = %A" x.supportedStencilResolveModes
                    sprintf "independentResolveNone = %A" x.independentResolveNone
                    sprintf "independentResolve = %A" x.independentResolve
                ] |> sprintf "VkPhysicalDeviceDepthStencilResolveProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDescriptorIndexingFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderInputAttachmentArrayDynamicIndexing : VkBool32
            val mutable public shaderUniformTexelBufferArrayDynamicIndexing : VkBool32
            val mutable public shaderStorageTexelBufferArrayDynamicIndexing : VkBool32
            val mutable public shaderUniformBufferArrayNonUniformIndexing : VkBool32
            val mutable public shaderSampledImageArrayNonUniformIndexing : VkBool32
            val mutable public shaderStorageBufferArrayNonUniformIndexing : VkBool32
            val mutable public shaderStorageImageArrayNonUniformIndexing : VkBool32
            val mutable public shaderInputAttachmentArrayNonUniformIndexing : VkBool32
            val mutable public shaderUniformTexelBufferArrayNonUniformIndexing : VkBool32
            val mutable public shaderStorageTexelBufferArrayNonUniformIndexing : VkBool32
            val mutable public descriptorBindingUniformBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingSampledImageUpdateAfterBind : VkBool32
            val mutable public descriptorBindingStorageImageUpdateAfterBind : VkBool32
            val mutable public descriptorBindingStorageBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingUniformTexelBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingStorageTexelBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingUpdateUnusedWhilePending : VkBool32
            val mutable public descriptorBindingPartiallyBound : VkBool32
            val mutable public descriptorBindingVariableDescriptorCount : VkBool32
            val mutable public runtimeDescriptorArray : VkBool32

            new(pNext: nativeint, shaderInputAttachmentArrayDynamicIndexing: VkBool32, shaderUniformTexelBufferArrayDynamicIndexing: VkBool32, shaderStorageTexelBufferArrayDynamicIndexing: VkBool32, shaderUniformBufferArrayNonUniformIndexing: VkBool32, shaderSampledImageArrayNonUniformIndexing: VkBool32, shaderStorageBufferArrayNonUniformIndexing: VkBool32, shaderStorageImageArrayNonUniformIndexing: VkBool32, shaderInputAttachmentArrayNonUniformIndexing: VkBool32, shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32, shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32, descriptorBindingUniformBufferUpdateAfterBind: VkBool32, descriptorBindingSampledImageUpdateAfterBind: VkBool32, descriptorBindingStorageImageUpdateAfterBind: VkBool32, descriptorBindingStorageBufferUpdateAfterBind: VkBool32, descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32, descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32, descriptorBindingUpdateUnusedWhilePending: VkBool32, descriptorBindingPartiallyBound: VkBool32, descriptorBindingVariableDescriptorCount: VkBool32, runtimeDescriptorArray: VkBool32) =
                {
                    sType = 1000161001u
                    pNext = pNext
                    shaderInputAttachmentArrayDynamicIndexing = shaderInputAttachmentArrayDynamicIndexing
                    shaderUniformTexelBufferArrayDynamicIndexing = shaderUniformTexelBufferArrayDynamicIndexing
                    shaderStorageTexelBufferArrayDynamicIndexing = shaderStorageTexelBufferArrayDynamicIndexing
                    shaderUniformBufferArrayNonUniformIndexing = shaderUniformBufferArrayNonUniformIndexing
                    shaderSampledImageArrayNonUniformIndexing = shaderSampledImageArrayNonUniformIndexing
                    shaderStorageBufferArrayNonUniformIndexing = shaderStorageBufferArrayNonUniformIndexing
                    shaderStorageImageArrayNonUniformIndexing = shaderStorageImageArrayNonUniformIndexing
                    shaderInputAttachmentArrayNonUniformIndexing = shaderInputAttachmentArrayNonUniformIndexing
                    shaderUniformTexelBufferArrayNonUniformIndexing = shaderUniformTexelBufferArrayNonUniformIndexing
                    shaderStorageTexelBufferArrayNonUniformIndexing = shaderStorageTexelBufferArrayNonUniformIndexing
                    descriptorBindingUniformBufferUpdateAfterBind = descriptorBindingUniformBufferUpdateAfterBind
                    descriptorBindingSampledImageUpdateAfterBind = descriptorBindingSampledImageUpdateAfterBind
                    descriptorBindingStorageImageUpdateAfterBind = descriptorBindingStorageImageUpdateAfterBind
                    descriptorBindingStorageBufferUpdateAfterBind = descriptorBindingStorageBufferUpdateAfterBind
                    descriptorBindingUniformTexelBufferUpdateAfterBind = descriptorBindingUniformTexelBufferUpdateAfterBind
                    descriptorBindingStorageTexelBufferUpdateAfterBind = descriptorBindingStorageTexelBufferUpdateAfterBind
                    descriptorBindingUpdateUnusedWhilePending = descriptorBindingUpdateUnusedWhilePending
                    descriptorBindingPartiallyBound = descriptorBindingPartiallyBound
                    descriptorBindingVariableDescriptorCount = descriptorBindingVariableDescriptorCount
                    runtimeDescriptorArray = runtimeDescriptorArray
                }

            new(shaderInputAttachmentArrayDynamicIndexing: VkBool32, shaderUniformTexelBufferArrayDynamicIndexing: VkBool32, shaderStorageTexelBufferArrayDynamicIndexing: VkBool32, shaderUniformBufferArrayNonUniformIndexing: VkBool32, shaderSampledImageArrayNonUniformIndexing: VkBool32, shaderStorageBufferArrayNonUniformIndexing: VkBool32, shaderStorageImageArrayNonUniformIndexing: VkBool32, shaderInputAttachmentArrayNonUniformIndexing: VkBool32, shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32, shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32, descriptorBindingUniformBufferUpdateAfterBind: VkBool32, descriptorBindingSampledImageUpdateAfterBind: VkBool32, descriptorBindingStorageImageUpdateAfterBind: VkBool32, descriptorBindingStorageBufferUpdateAfterBind: VkBool32, descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32, descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32, descriptorBindingUpdateUnusedWhilePending: VkBool32, descriptorBindingPartiallyBound: VkBool32, descriptorBindingVariableDescriptorCount: VkBool32, runtimeDescriptorArray: VkBool32) =
                VkPhysicalDeviceDescriptorIndexingFeatures(Unchecked.defaultof<nativeint>, shaderInputAttachmentArrayDynamicIndexing, shaderUniformTexelBufferArrayDynamicIndexing, shaderStorageTexelBufferArrayDynamicIndexing, shaderUniformBufferArrayNonUniformIndexing, shaderSampledImageArrayNonUniformIndexing, shaderStorageBufferArrayNonUniformIndexing, shaderStorageImageArrayNonUniformIndexing, shaderInputAttachmentArrayNonUniformIndexing, shaderUniformTexelBufferArrayNonUniformIndexing, shaderStorageTexelBufferArrayNonUniformIndexing, descriptorBindingUniformBufferUpdateAfterBind, descriptorBindingSampledImageUpdateAfterBind, descriptorBindingStorageImageUpdateAfterBind, descriptorBindingStorageBufferUpdateAfterBind, descriptorBindingUniformTexelBufferUpdateAfterBind, descriptorBindingStorageTexelBufferUpdateAfterBind, descriptorBindingUpdateUnusedWhilePending, descriptorBindingPartiallyBound, descriptorBindingVariableDescriptorCount, runtimeDescriptorArray)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderInputAttachmentArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderUniformTexelBufferArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageTexelBufferArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderUniformBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderSampledImageArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageImageArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderInputAttachmentArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderUniformTexelBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageTexelBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.descriptorBindingUniformBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingSampledImageUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingStorageImageUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingStorageBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingUniformTexelBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingStorageTexelBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingUpdateUnusedWhilePending = Unchecked.defaultof<VkBool32> && x.descriptorBindingPartiallyBound = Unchecked.defaultof<VkBool32> && x.descriptorBindingVariableDescriptorCount = Unchecked.defaultof<VkBool32> && x.runtimeDescriptorArray = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDescriptorIndexingFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderInputAttachmentArrayDynamicIndexing = %A" x.shaderInputAttachmentArrayDynamicIndexing
                    sprintf "shaderUniformTexelBufferArrayDynamicIndexing = %A" x.shaderUniformTexelBufferArrayDynamicIndexing
                    sprintf "shaderStorageTexelBufferArrayDynamicIndexing = %A" x.shaderStorageTexelBufferArrayDynamicIndexing
                    sprintf "shaderUniformBufferArrayNonUniformIndexing = %A" x.shaderUniformBufferArrayNonUniformIndexing
                    sprintf "shaderSampledImageArrayNonUniformIndexing = %A" x.shaderSampledImageArrayNonUniformIndexing
                    sprintf "shaderStorageBufferArrayNonUniformIndexing = %A" x.shaderStorageBufferArrayNonUniformIndexing
                    sprintf "shaderStorageImageArrayNonUniformIndexing = %A" x.shaderStorageImageArrayNonUniformIndexing
                    sprintf "shaderInputAttachmentArrayNonUniformIndexing = %A" x.shaderInputAttachmentArrayNonUniformIndexing
                    sprintf "shaderUniformTexelBufferArrayNonUniformIndexing = %A" x.shaderUniformTexelBufferArrayNonUniformIndexing
                    sprintf "shaderStorageTexelBufferArrayNonUniformIndexing = %A" x.shaderStorageTexelBufferArrayNonUniformIndexing
                    sprintf "descriptorBindingUniformBufferUpdateAfterBind = %A" x.descriptorBindingUniformBufferUpdateAfterBind
                    sprintf "descriptorBindingSampledImageUpdateAfterBind = %A" x.descriptorBindingSampledImageUpdateAfterBind
                    sprintf "descriptorBindingStorageImageUpdateAfterBind = %A" x.descriptorBindingStorageImageUpdateAfterBind
                    sprintf "descriptorBindingStorageBufferUpdateAfterBind = %A" x.descriptorBindingStorageBufferUpdateAfterBind
                    sprintf "descriptorBindingUniformTexelBufferUpdateAfterBind = %A" x.descriptorBindingUniformTexelBufferUpdateAfterBind
                    sprintf "descriptorBindingStorageTexelBufferUpdateAfterBind = %A" x.descriptorBindingStorageTexelBufferUpdateAfterBind
                    sprintf "descriptorBindingUpdateUnusedWhilePending = %A" x.descriptorBindingUpdateUnusedWhilePending
                    sprintf "descriptorBindingPartiallyBound = %A" x.descriptorBindingPartiallyBound
                    sprintf "descriptorBindingVariableDescriptorCount = %A" x.descriptorBindingVariableDescriptorCount
                    sprintf "runtimeDescriptorArray = %A" x.runtimeDescriptorArray
                ] |> sprintf "VkPhysicalDeviceDescriptorIndexingFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDescriptorIndexingProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxUpdateAfterBindDescriptorsInAllPools : uint32
            val mutable public shaderUniformBufferArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderSampledImageArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderStorageBufferArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderStorageImageArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderInputAttachmentArrayNonUniformIndexingNative : VkBool32
            val mutable public robustBufferAccessUpdateAfterBind : VkBool32
            val mutable public quadDivergentImplicitLod : VkBool32
            val mutable public maxPerStageDescriptorUpdateAfterBindSamplers : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindUniformBuffers : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindStorageBuffers : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindSampledImages : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindStorageImages : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindInputAttachments : uint32
            val mutable public maxPerStageUpdateAfterBindResources : uint32
            val mutable public maxDescriptorSetUpdateAfterBindSamplers : uint32
            val mutable public maxDescriptorSetUpdateAfterBindUniformBuffers : uint32
            val mutable public maxDescriptorSetUpdateAfterBindUniformBuffersDynamic : uint32
            val mutable public maxDescriptorSetUpdateAfterBindStorageBuffers : uint32
            val mutable public maxDescriptorSetUpdateAfterBindStorageBuffersDynamic : uint32
            val mutable public maxDescriptorSetUpdateAfterBindSampledImages : uint32
            val mutable public maxDescriptorSetUpdateAfterBindStorageImages : uint32
            val mutable public maxDescriptorSetUpdateAfterBindInputAttachments : uint32

            new(pNext: nativeint, maxUpdateAfterBindDescriptorsInAllPools: uint32, shaderUniformBufferArrayNonUniformIndexingNative: VkBool32, shaderSampledImageArrayNonUniformIndexingNative: VkBool32, shaderStorageBufferArrayNonUniformIndexingNative: VkBool32, shaderStorageImageArrayNonUniformIndexingNative: VkBool32, shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32, robustBufferAccessUpdateAfterBind: VkBool32, quadDivergentImplicitLod: VkBool32, maxPerStageDescriptorUpdateAfterBindSamplers: uint32, maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32, maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32, maxPerStageDescriptorUpdateAfterBindSampledImages: uint32, maxPerStageDescriptorUpdateAfterBindStorageImages: uint32, maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32, maxPerStageUpdateAfterBindResources: uint32, maxDescriptorSetUpdateAfterBindSamplers: uint32, maxDescriptorSetUpdateAfterBindUniformBuffers: uint32, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindStorageBuffers: uint32, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindSampledImages: uint32, maxDescriptorSetUpdateAfterBindStorageImages: uint32, maxDescriptorSetUpdateAfterBindInputAttachments: uint32) =
                {
                    sType = 1000161002u
                    pNext = pNext
                    maxUpdateAfterBindDescriptorsInAllPools = maxUpdateAfterBindDescriptorsInAllPools
                    shaderUniformBufferArrayNonUniformIndexingNative = shaderUniformBufferArrayNonUniformIndexingNative
                    shaderSampledImageArrayNonUniformIndexingNative = shaderSampledImageArrayNonUniformIndexingNative
                    shaderStorageBufferArrayNonUniformIndexingNative = shaderStorageBufferArrayNonUniformIndexingNative
                    shaderStorageImageArrayNonUniformIndexingNative = shaderStorageImageArrayNonUniformIndexingNative
                    shaderInputAttachmentArrayNonUniformIndexingNative = shaderInputAttachmentArrayNonUniformIndexingNative
                    robustBufferAccessUpdateAfterBind = robustBufferAccessUpdateAfterBind
                    quadDivergentImplicitLod = quadDivergentImplicitLod
                    maxPerStageDescriptorUpdateAfterBindSamplers = maxPerStageDescriptorUpdateAfterBindSamplers
                    maxPerStageDescriptorUpdateAfterBindUniformBuffers = maxPerStageDescriptorUpdateAfterBindUniformBuffers
                    maxPerStageDescriptorUpdateAfterBindStorageBuffers = maxPerStageDescriptorUpdateAfterBindStorageBuffers
                    maxPerStageDescriptorUpdateAfterBindSampledImages = maxPerStageDescriptorUpdateAfterBindSampledImages
                    maxPerStageDescriptorUpdateAfterBindStorageImages = maxPerStageDescriptorUpdateAfterBindStorageImages
                    maxPerStageDescriptorUpdateAfterBindInputAttachments = maxPerStageDescriptorUpdateAfterBindInputAttachments
                    maxPerStageUpdateAfterBindResources = maxPerStageUpdateAfterBindResources
                    maxDescriptorSetUpdateAfterBindSamplers = maxDescriptorSetUpdateAfterBindSamplers
                    maxDescriptorSetUpdateAfterBindUniformBuffers = maxDescriptorSetUpdateAfterBindUniformBuffers
                    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
                    maxDescriptorSetUpdateAfterBindStorageBuffers = maxDescriptorSetUpdateAfterBindStorageBuffers
                    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
                    maxDescriptorSetUpdateAfterBindSampledImages = maxDescriptorSetUpdateAfterBindSampledImages
                    maxDescriptorSetUpdateAfterBindStorageImages = maxDescriptorSetUpdateAfterBindStorageImages
                    maxDescriptorSetUpdateAfterBindInputAttachments = maxDescriptorSetUpdateAfterBindInputAttachments
                }

            new(maxUpdateAfterBindDescriptorsInAllPools: uint32, shaderUniformBufferArrayNonUniformIndexingNative: VkBool32, shaderSampledImageArrayNonUniformIndexingNative: VkBool32, shaderStorageBufferArrayNonUniformIndexingNative: VkBool32, shaderStorageImageArrayNonUniformIndexingNative: VkBool32, shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32, robustBufferAccessUpdateAfterBind: VkBool32, quadDivergentImplicitLod: VkBool32, maxPerStageDescriptorUpdateAfterBindSamplers: uint32, maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32, maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32, maxPerStageDescriptorUpdateAfterBindSampledImages: uint32, maxPerStageDescriptorUpdateAfterBindStorageImages: uint32, maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32, maxPerStageUpdateAfterBindResources: uint32, maxDescriptorSetUpdateAfterBindSamplers: uint32, maxDescriptorSetUpdateAfterBindUniformBuffers: uint32, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindStorageBuffers: uint32, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindSampledImages: uint32, maxDescriptorSetUpdateAfterBindStorageImages: uint32, maxDescriptorSetUpdateAfterBindInputAttachments: uint32) =
                VkPhysicalDeviceDescriptorIndexingProperties(Unchecked.defaultof<nativeint>, maxUpdateAfterBindDescriptorsInAllPools, shaderUniformBufferArrayNonUniformIndexingNative, shaderSampledImageArrayNonUniformIndexingNative, shaderStorageBufferArrayNonUniformIndexingNative, shaderStorageImageArrayNonUniformIndexingNative, shaderInputAttachmentArrayNonUniformIndexingNative, robustBufferAccessUpdateAfterBind, quadDivergentImplicitLod, maxPerStageDescriptorUpdateAfterBindSamplers, maxPerStageDescriptorUpdateAfterBindUniformBuffers, maxPerStageDescriptorUpdateAfterBindStorageBuffers, maxPerStageDescriptorUpdateAfterBindSampledImages, maxPerStageDescriptorUpdateAfterBindStorageImages, maxPerStageDescriptorUpdateAfterBindInputAttachments, maxPerStageUpdateAfterBindResources, maxDescriptorSetUpdateAfterBindSamplers, maxDescriptorSetUpdateAfterBindUniformBuffers, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, maxDescriptorSetUpdateAfterBindStorageBuffers, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, maxDescriptorSetUpdateAfterBindSampledImages, maxDescriptorSetUpdateAfterBindStorageImages, maxDescriptorSetUpdateAfterBindInputAttachments)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxUpdateAfterBindDescriptorsInAllPools = Unchecked.defaultof<uint32> && x.shaderUniformBufferArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderSampledImageArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderStorageBufferArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderStorageImageArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderInputAttachmentArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.robustBufferAccessUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.quadDivergentImplicitLod = Unchecked.defaultof<VkBool32> && x.maxPerStageDescriptorUpdateAfterBindSamplers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindUniformBuffers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindStorageBuffers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindSampledImages = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindStorageImages = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindInputAttachments = Unchecked.defaultof<uint32> && x.maxPerStageUpdateAfterBindResources = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindSamplers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindUniformBuffers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindStorageBuffers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindSampledImages = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindStorageImages = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindInputAttachments = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceDescriptorIndexingProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxUpdateAfterBindDescriptorsInAllPools = %A" x.maxUpdateAfterBindDescriptorsInAllPools
                    sprintf "shaderUniformBufferArrayNonUniformIndexingNative = %A" x.shaderUniformBufferArrayNonUniformIndexingNative
                    sprintf "shaderSampledImageArrayNonUniformIndexingNative = %A" x.shaderSampledImageArrayNonUniformIndexingNative
                    sprintf "shaderStorageBufferArrayNonUniformIndexingNative = %A" x.shaderStorageBufferArrayNonUniformIndexingNative
                    sprintf "shaderStorageImageArrayNonUniformIndexingNative = %A" x.shaderStorageImageArrayNonUniformIndexingNative
                    sprintf "shaderInputAttachmentArrayNonUniformIndexingNative = %A" x.shaderInputAttachmentArrayNonUniformIndexingNative
                    sprintf "robustBufferAccessUpdateAfterBind = %A" x.robustBufferAccessUpdateAfterBind
                    sprintf "quadDivergentImplicitLod = %A" x.quadDivergentImplicitLod
                    sprintf "maxPerStageDescriptorUpdateAfterBindSamplers = %A" x.maxPerStageDescriptorUpdateAfterBindSamplers
                    sprintf "maxPerStageDescriptorUpdateAfterBindUniformBuffers = %A" x.maxPerStageDescriptorUpdateAfterBindUniformBuffers
                    sprintf "maxPerStageDescriptorUpdateAfterBindStorageBuffers = %A" x.maxPerStageDescriptorUpdateAfterBindStorageBuffers
                    sprintf "maxPerStageDescriptorUpdateAfterBindSampledImages = %A" x.maxPerStageDescriptorUpdateAfterBindSampledImages
                    sprintf "maxPerStageDescriptorUpdateAfterBindStorageImages = %A" x.maxPerStageDescriptorUpdateAfterBindStorageImages
                    sprintf "maxPerStageDescriptorUpdateAfterBindInputAttachments = %A" x.maxPerStageDescriptorUpdateAfterBindInputAttachments
                    sprintf "maxPerStageUpdateAfterBindResources = %A" x.maxPerStageUpdateAfterBindResources
                    sprintf "maxDescriptorSetUpdateAfterBindSamplers = %A" x.maxDescriptorSetUpdateAfterBindSamplers
                    sprintf "maxDescriptorSetUpdateAfterBindUniformBuffers = %A" x.maxDescriptorSetUpdateAfterBindUniformBuffers
                    sprintf "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = %A" x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
                    sprintf "maxDescriptorSetUpdateAfterBindStorageBuffers = %A" x.maxDescriptorSetUpdateAfterBindStorageBuffers
                    sprintf "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = %A" x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
                    sprintf "maxDescriptorSetUpdateAfterBindSampledImages = %A" x.maxDescriptorSetUpdateAfterBindSampledImages
                    sprintf "maxDescriptorSetUpdateAfterBindStorageImages = %A" x.maxDescriptorSetUpdateAfterBindStorageImages
                    sprintf "maxDescriptorSetUpdateAfterBindInputAttachments = %A" x.maxDescriptorSetUpdateAfterBindInputAttachments
                ] |> sprintf "VkPhysicalDeviceDescriptorIndexingProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDriverProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public driverID : VkDriverId
            val mutable public driverName : String256
            val mutable public driverInfo : String256
            val mutable public conformanceVersion : VkConformanceVersion

            new(pNext: nativeint, driverID: VkDriverId, driverName: String256, driverInfo: String256, conformanceVersion: VkConformanceVersion) =
                {
                    sType = 1000196000u
                    pNext = pNext
                    driverID = driverID
                    driverName = driverName
                    driverInfo = driverInfo
                    conformanceVersion = conformanceVersion
                }

            new(driverID: VkDriverId, driverName: String256, driverInfo: String256, conformanceVersion: VkConformanceVersion) =
                VkPhysicalDeviceDriverProperties(Unchecked.defaultof<nativeint>, driverID, driverName, driverInfo, conformanceVersion)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.driverID = Unchecked.defaultof<VkDriverId> && x.driverName = Unchecked.defaultof<String256> && x.driverInfo = Unchecked.defaultof<String256> && x.conformanceVersion = Unchecked.defaultof<VkConformanceVersion>

            static member Empty =
                VkPhysicalDeviceDriverProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDriverId>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<VkConformanceVersion>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "driverID = %A" x.driverID
                    sprintf "driverName = %A" x.driverName
                    sprintf "driverInfo = %A" x.driverInfo
                    sprintf "conformanceVersion = %A" x.conformanceVersion
                ] |> sprintf "VkPhysicalDeviceDriverProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFloatControlsProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public denormBehaviorIndependence : VkShaderFloatControlsIndependence
            val mutable public roundingModeIndependence : VkShaderFloatControlsIndependence
            val mutable public shaderSignedZeroInfNanPreserveFloat16 : VkBool32
            val mutable public shaderSignedZeroInfNanPreserveFloat32 : VkBool32
            val mutable public shaderSignedZeroInfNanPreserveFloat64 : VkBool32
            val mutable public shaderDenormPreserveFloat16 : VkBool32
            val mutable public shaderDenormPreserveFloat32 : VkBool32
            val mutable public shaderDenormPreserveFloat64 : VkBool32
            val mutable public shaderDenormFlushToZeroFloat16 : VkBool32
            val mutable public shaderDenormFlushToZeroFloat32 : VkBool32
            val mutable public shaderDenormFlushToZeroFloat64 : VkBool32
            val mutable public shaderRoundingModeRTEFloat16 : VkBool32
            val mutable public shaderRoundingModeRTEFloat32 : VkBool32
            val mutable public shaderRoundingModeRTEFloat64 : VkBool32
            val mutable public shaderRoundingModeRTZFloat16 : VkBool32
            val mutable public shaderRoundingModeRTZFloat32 : VkBool32
            val mutable public shaderRoundingModeRTZFloat64 : VkBool32

            new(pNext: nativeint, denormBehaviorIndependence: VkShaderFloatControlsIndependence, roundingModeIndependence: VkShaderFloatControlsIndependence, shaderSignedZeroInfNanPreserveFloat16: VkBool32, shaderSignedZeroInfNanPreserveFloat32: VkBool32, shaderSignedZeroInfNanPreserveFloat64: VkBool32, shaderDenormPreserveFloat16: VkBool32, shaderDenormPreserveFloat32: VkBool32, shaderDenormPreserveFloat64: VkBool32, shaderDenormFlushToZeroFloat16: VkBool32, shaderDenormFlushToZeroFloat32: VkBool32, shaderDenormFlushToZeroFloat64: VkBool32, shaderRoundingModeRTEFloat16: VkBool32, shaderRoundingModeRTEFloat32: VkBool32, shaderRoundingModeRTEFloat64: VkBool32, shaderRoundingModeRTZFloat16: VkBool32, shaderRoundingModeRTZFloat32: VkBool32, shaderRoundingModeRTZFloat64: VkBool32) =
                {
                    sType = 1000197000u
                    pNext = pNext
                    denormBehaviorIndependence = denormBehaviorIndependence
                    roundingModeIndependence = roundingModeIndependence
                    shaderSignedZeroInfNanPreserveFloat16 = shaderSignedZeroInfNanPreserveFloat16
                    shaderSignedZeroInfNanPreserveFloat32 = shaderSignedZeroInfNanPreserveFloat32
                    shaderSignedZeroInfNanPreserveFloat64 = shaderSignedZeroInfNanPreserveFloat64
                    shaderDenormPreserveFloat16 = shaderDenormPreserveFloat16
                    shaderDenormPreserveFloat32 = shaderDenormPreserveFloat32
                    shaderDenormPreserveFloat64 = shaderDenormPreserveFloat64
                    shaderDenormFlushToZeroFloat16 = shaderDenormFlushToZeroFloat16
                    shaderDenormFlushToZeroFloat32 = shaderDenormFlushToZeroFloat32
                    shaderDenormFlushToZeroFloat64 = shaderDenormFlushToZeroFloat64
                    shaderRoundingModeRTEFloat16 = shaderRoundingModeRTEFloat16
                    shaderRoundingModeRTEFloat32 = shaderRoundingModeRTEFloat32
                    shaderRoundingModeRTEFloat64 = shaderRoundingModeRTEFloat64
                    shaderRoundingModeRTZFloat16 = shaderRoundingModeRTZFloat16
                    shaderRoundingModeRTZFloat32 = shaderRoundingModeRTZFloat32
                    shaderRoundingModeRTZFloat64 = shaderRoundingModeRTZFloat64
                }

            new(denormBehaviorIndependence: VkShaderFloatControlsIndependence, roundingModeIndependence: VkShaderFloatControlsIndependence, shaderSignedZeroInfNanPreserveFloat16: VkBool32, shaderSignedZeroInfNanPreserveFloat32: VkBool32, shaderSignedZeroInfNanPreserveFloat64: VkBool32, shaderDenormPreserveFloat16: VkBool32, shaderDenormPreserveFloat32: VkBool32, shaderDenormPreserveFloat64: VkBool32, shaderDenormFlushToZeroFloat16: VkBool32, shaderDenormFlushToZeroFloat32: VkBool32, shaderDenormFlushToZeroFloat64: VkBool32, shaderRoundingModeRTEFloat16: VkBool32, shaderRoundingModeRTEFloat32: VkBool32, shaderRoundingModeRTEFloat64: VkBool32, shaderRoundingModeRTZFloat16: VkBool32, shaderRoundingModeRTZFloat32: VkBool32, shaderRoundingModeRTZFloat64: VkBool32) =
                VkPhysicalDeviceFloatControlsProperties(Unchecked.defaultof<nativeint>, denormBehaviorIndependence, roundingModeIndependence, shaderSignedZeroInfNanPreserveFloat16, shaderSignedZeroInfNanPreserveFloat32, shaderSignedZeroInfNanPreserveFloat64, shaderDenormPreserveFloat16, shaderDenormPreserveFloat32, shaderDenormPreserveFloat64, shaderDenormFlushToZeroFloat16, shaderDenormFlushToZeroFloat32, shaderDenormFlushToZeroFloat64, shaderRoundingModeRTEFloat16, shaderRoundingModeRTEFloat32, shaderRoundingModeRTEFloat64, shaderRoundingModeRTZFloat16, shaderRoundingModeRTZFloat32, shaderRoundingModeRTZFloat64)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.denormBehaviorIndependence = Unchecked.defaultof<VkShaderFloatControlsIndependence> && x.roundingModeIndependence = Unchecked.defaultof<VkShaderFloatControlsIndependence> && x.shaderSignedZeroInfNanPreserveFloat16 = Unchecked.defaultof<VkBool32> && x.shaderSignedZeroInfNanPreserveFloat32 = Unchecked.defaultof<VkBool32> && x.shaderSignedZeroInfNanPreserveFloat64 = Unchecked.defaultof<VkBool32> && x.shaderDenormPreserveFloat16 = Unchecked.defaultof<VkBool32> && x.shaderDenormPreserveFloat32 = Unchecked.defaultof<VkBool32> && x.shaderDenormPreserveFloat64 = Unchecked.defaultof<VkBool32> && x.shaderDenormFlushToZeroFloat16 = Unchecked.defaultof<VkBool32> && x.shaderDenormFlushToZeroFloat32 = Unchecked.defaultof<VkBool32> && x.shaderDenormFlushToZeroFloat64 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTEFloat16 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTEFloat32 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTEFloat64 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTZFloat16 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTZFloat32 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTZFloat64 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceFloatControlsProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderFloatControlsIndependence>, Unchecked.defaultof<VkShaderFloatControlsIndependence>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "denormBehaviorIndependence = %A" x.denormBehaviorIndependence
                    sprintf "roundingModeIndependence = %A" x.roundingModeIndependence
                    sprintf "shaderSignedZeroInfNanPreserveFloat16 = %A" x.shaderSignedZeroInfNanPreserveFloat16
                    sprintf "shaderSignedZeroInfNanPreserveFloat32 = %A" x.shaderSignedZeroInfNanPreserveFloat32
                    sprintf "shaderSignedZeroInfNanPreserveFloat64 = %A" x.shaderSignedZeroInfNanPreserveFloat64
                    sprintf "shaderDenormPreserveFloat16 = %A" x.shaderDenormPreserveFloat16
                    sprintf "shaderDenormPreserveFloat32 = %A" x.shaderDenormPreserveFloat32
                    sprintf "shaderDenormPreserveFloat64 = %A" x.shaderDenormPreserveFloat64
                    sprintf "shaderDenormFlushToZeroFloat16 = %A" x.shaderDenormFlushToZeroFloat16
                    sprintf "shaderDenormFlushToZeroFloat32 = %A" x.shaderDenormFlushToZeroFloat32
                    sprintf "shaderDenormFlushToZeroFloat64 = %A" x.shaderDenormFlushToZeroFloat64
                    sprintf "shaderRoundingModeRTEFloat16 = %A" x.shaderRoundingModeRTEFloat16
                    sprintf "shaderRoundingModeRTEFloat32 = %A" x.shaderRoundingModeRTEFloat32
                    sprintf "shaderRoundingModeRTEFloat64 = %A" x.shaderRoundingModeRTEFloat64
                    sprintf "shaderRoundingModeRTZFloat16 = %A" x.shaderRoundingModeRTZFloat16
                    sprintf "shaderRoundingModeRTZFloat32 = %A" x.shaderRoundingModeRTZFloat32
                    sprintf "shaderRoundingModeRTZFloat64 = %A" x.shaderRoundingModeRTZFloat64
                ] |> sprintf "VkPhysicalDeviceFloatControlsProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceHostQueryResetFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public hostQueryReset : VkBool32

            new(pNext: nativeint, hostQueryReset: VkBool32) =
                {
                    sType = 1000261000u
                    pNext = pNext
                    hostQueryReset = hostQueryReset
                }

            new(hostQueryReset: VkBool32) =
                VkPhysicalDeviceHostQueryResetFeatures(Unchecked.defaultof<nativeint>, hostQueryReset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.hostQueryReset = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceHostQueryResetFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "hostQueryReset = %A" x.hostQueryReset
                ] |> sprintf "VkPhysicalDeviceHostQueryResetFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceImagelessFramebufferFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imagelessFramebuffer : VkBool32

            new(pNext: nativeint, imagelessFramebuffer: VkBool32) =
                {
                    sType = 1000108000u
                    pNext = pNext
                    imagelessFramebuffer = imagelessFramebuffer
                }

            new(imagelessFramebuffer: VkBool32) =
                VkPhysicalDeviceImagelessFramebufferFeatures(Unchecked.defaultof<nativeint>, imagelessFramebuffer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imagelessFramebuffer = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceImagelessFramebufferFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "imagelessFramebuffer = %A" x.imagelessFramebuffer
                ] |> sprintf "VkPhysicalDeviceImagelessFramebufferFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSamplerFilterMinmaxProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public filterMinmaxSingleComponentFormats : VkBool32
            val mutable public filterMinmaxImageComponentMapping : VkBool32

            new(pNext: nativeint, filterMinmaxSingleComponentFormats: VkBool32, filterMinmaxImageComponentMapping: VkBool32) =
                {
                    sType = 1000130000u
                    pNext = pNext
                    filterMinmaxSingleComponentFormats = filterMinmaxSingleComponentFormats
                    filterMinmaxImageComponentMapping = filterMinmaxImageComponentMapping
                }

            new(filterMinmaxSingleComponentFormats: VkBool32, filterMinmaxImageComponentMapping: VkBool32) =
                VkPhysicalDeviceSamplerFilterMinmaxProperties(Unchecked.defaultof<nativeint>, filterMinmaxSingleComponentFormats, filterMinmaxImageComponentMapping)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.filterMinmaxSingleComponentFormats = Unchecked.defaultof<VkBool32> && x.filterMinmaxImageComponentMapping = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSamplerFilterMinmaxProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "filterMinmaxSingleComponentFormats = %A" x.filterMinmaxSingleComponentFormats
                    sprintf "filterMinmaxImageComponentMapping = %A" x.filterMinmaxImageComponentMapping
                ] |> sprintf "VkPhysicalDeviceSamplerFilterMinmaxProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceScalarBlockLayoutFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public scalarBlockLayout : VkBool32

            new(pNext: nativeint, scalarBlockLayout: VkBool32) =
                {
                    sType = 1000221000u
                    pNext = pNext
                    scalarBlockLayout = scalarBlockLayout
                }

            new(scalarBlockLayout: VkBool32) =
                VkPhysicalDeviceScalarBlockLayoutFeatures(Unchecked.defaultof<nativeint>, scalarBlockLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.scalarBlockLayout = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceScalarBlockLayoutFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "scalarBlockLayout = %A" x.scalarBlockLayout
                ] |> sprintf "VkPhysicalDeviceScalarBlockLayoutFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public separateDepthStencilLayouts : VkBool32

            new(pNext: nativeint, separateDepthStencilLayouts: VkBool32) =
                {
                    sType = 1000241000u
                    pNext = pNext
                    separateDepthStencilLayouts = separateDepthStencilLayouts
                }

            new(separateDepthStencilLayouts: VkBool32) =
                VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(Unchecked.defaultof<nativeint>, separateDepthStencilLayouts)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.separateDepthStencilLayouts = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "separateDepthStencilLayouts = %A" x.separateDepthStencilLayouts
                ] |> sprintf "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderAtomicInt64Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderBufferInt64Atomics : VkBool32
            val mutable public shaderSharedInt64Atomics : VkBool32

            new(pNext: nativeint, shaderBufferInt64Atomics: VkBool32, shaderSharedInt64Atomics: VkBool32) =
                {
                    sType = 1000180000u
                    pNext = pNext
                    shaderBufferInt64Atomics = shaderBufferInt64Atomics
                    shaderSharedInt64Atomics = shaderSharedInt64Atomics
                }

            new(shaderBufferInt64Atomics: VkBool32, shaderSharedInt64Atomics: VkBool32) =
                VkPhysicalDeviceShaderAtomicInt64Features(Unchecked.defaultof<nativeint>, shaderBufferInt64Atomics, shaderSharedInt64Atomics)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderBufferInt64Atomics = Unchecked.defaultof<VkBool32> && x.shaderSharedInt64Atomics = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderAtomicInt64Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderBufferInt64Atomics = %A" x.shaderBufferInt64Atomics
                    sprintf "shaderSharedInt64Atomics = %A" x.shaderSharedInt64Atomics
                ] |> sprintf "VkPhysicalDeviceShaderAtomicInt64Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderFloat16Int8Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderFloat16 : VkBool32
            val mutable public shaderInt8 : VkBool32

            new(pNext: nativeint, shaderFloat16: VkBool32, shaderInt8: VkBool32) =
                {
                    sType = 1000082000u
                    pNext = pNext
                    shaderFloat16 = shaderFloat16
                    shaderInt8 = shaderInt8
                }

            new(shaderFloat16: VkBool32, shaderInt8: VkBool32) =
                VkPhysicalDeviceShaderFloat16Int8Features(Unchecked.defaultof<nativeint>, shaderFloat16, shaderInt8)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderFloat16 = Unchecked.defaultof<VkBool32> && x.shaderInt8 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderFloat16Int8Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderFloat16 = %A" x.shaderFloat16
                    sprintf "shaderInt8 = %A" x.shaderInt8
                ] |> sprintf "VkPhysicalDeviceShaderFloat16Int8Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderSubgroupExtendedTypes : VkBool32

            new(pNext: nativeint, shaderSubgroupExtendedTypes: VkBool32) =
                {
                    sType = 1000175000u
                    pNext = pNext
                    shaderSubgroupExtendedTypes = shaderSubgroupExtendedTypes
                }

            new(shaderSubgroupExtendedTypes: VkBool32) =
                VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(Unchecked.defaultof<nativeint>, shaderSubgroupExtendedTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderSubgroupExtendedTypes = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderSubgroupExtendedTypes = %A" x.shaderSubgroupExtendedTypes
                ] |> sprintf "VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceTimelineSemaphoreFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public timelineSemaphore : VkBool32

            new(pNext: nativeint, timelineSemaphore: VkBool32) =
                {
                    sType = 1000207000u
                    pNext = pNext
                    timelineSemaphore = timelineSemaphore
                }

            new(timelineSemaphore: VkBool32) =
                VkPhysicalDeviceTimelineSemaphoreFeatures(Unchecked.defaultof<nativeint>, timelineSemaphore)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.timelineSemaphore = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceTimelineSemaphoreFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "timelineSemaphore = %A" x.timelineSemaphore
                ] |> sprintf "VkPhysicalDeviceTimelineSemaphoreFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceTimelineSemaphoreProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxTimelineSemaphoreValueDifference : uint64

            new(pNext: nativeint, maxTimelineSemaphoreValueDifference: uint64) =
                {
                    sType = 1000207001u
                    pNext = pNext
                    maxTimelineSemaphoreValueDifference = maxTimelineSemaphoreValueDifference
                }

            new(maxTimelineSemaphoreValueDifference: uint64) =
                VkPhysicalDeviceTimelineSemaphoreProperties(Unchecked.defaultof<nativeint>, maxTimelineSemaphoreValueDifference)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxTimelineSemaphoreValueDifference = Unchecked.defaultof<uint64>

            static member Empty =
                VkPhysicalDeviceTimelineSemaphoreProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxTimelineSemaphoreValueDifference = %A" x.maxTimelineSemaphoreValueDifference
                ] |> sprintf "VkPhysicalDeviceTimelineSemaphoreProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceUniformBufferStandardLayoutFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public uniformBufferStandardLayout : VkBool32

            new(pNext: nativeint, uniformBufferStandardLayout: VkBool32) =
                {
                    sType = 1000253000u
                    pNext = pNext
                    uniformBufferStandardLayout = uniformBufferStandardLayout
                }

            new(uniformBufferStandardLayout: VkBool32) =
                VkPhysicalDeviceUniformBufferStandardLayoutFeatures(Unchecked.defaultof<nativeint>, uniformBufferStandardLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.uniformBufferStandardLayout = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceUniformBufferStandardLayoutFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "uniformBufferStandardLayout = %A" x.uniformBufferStandardLayout
                ] |> sprintf "VkPhysicalDeviceUniformBufferStandardLayoutFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan11Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public storageBuffer16BitAccess : VkBool32
            val mutable public uniformAndStorageBuffer16BitAccess : VkBool32
            val mutable public storagePushConstant16 : VkBool32
            val mutable public storageInputOutput16 : VkBool32
            val mutable public multiview : VkBool32
            val mutable public multiviewGeometryShader : VkBool32
            val mutable public multiviewTessellationShader : VkBool32
            val mutable public variablePointersStorageBuffer : VkBool32
            val mutable public variablePointers : VkBool32
            val mutable public protectedMemory : VkBool32
            val mutable public samplerYcbcrConversion : VkBool32
            val mutable public shaderDrawParameters : VkBool32

            new(pNext: nativeint, storageBuffer16BitAccess: VkBool32, uniformAndStorageBuffer16BitAccess: VkBool32, storagePushConstant16: VkBool32, storageInputOutput16: VkBool32, multiview: VkBool32, multiviewGeometryShader: VkBool32, multiviewTessellationShader: VkBool32, variablePointersStorageBuffer: VkBool32, variablePointers: VkBool32, protectedMemory: VkBool32, samplerYcbcrConversion: VkBool32, shaderDrawParameters: VkBool32) =
                {
                    sType = 49u
                    pNext = pNext
                    storageBuffer16BitAccess = storageBuffer16BitAccess
                    uniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess
                    storagePushConstant16 = storagePushConstant16
                    storageInputOutput16 = storageInputOutput16
                    multiview = multiview
                    multiviewGeometryShader = multiviewGeometryShader
                    multiviewTessellationShader = multiviewTessellationShader
                    variablePointersStorageBuffer = variablePointersStorageBuffer
                    variablePointers = variablePointers
                    protectedMemory = protectedMemory
                    samplerYcbcrConversion = samplerYcbcrConversion
                    shaderDrawParameters = shaderDrawParameters
                }

            new(storageBuffer16BitAccess: VkBool32, uniformAndStorageBuffer16BitAccess: VkBool32, storagePushConstant16: VkBool32, storageInputOutput16: VkBool32, multiview: VkBool32, multiviewGeometryShader: VkBool32, multiviewTessellationShader: VkBool32, variablePointersStorageBuffer: VkBool32, variablePointers: VkBool32, protectedMemory: VkBool32, samplerYcbcrConversion: VkBool32, shaderDrawParameters: VkBool32) =
                VkPhysicalDeviceVulkan11Features(Unchecked.defaultof<nativeint>, storageBuffer16BitAccess, uniformAndStorageBuffer16BitAccess, storagePushConstant16, storageInputOutput16, multiview, multiviewGeometryShader, multiviewTessellationShader, variablePointersStorageBuffer, variablePointers, protectedMemory, samplerYcbcrConversion, shaderDrawParameters)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.storageBuffer16BitAccess = Unchecked.defaultof<VkBool32> && x.uniformAndStorageBuffer16BitAccess = Unchecked.defaultof<VkBool32> && x.storagePushConstant16 = Unchecked.defaultof<VkBool32> && x.storageInputOutput16 = Unchecked.defaultof<VkBool32> && x.multiview = Unchecked.defaultof<VkBool32> && x.multiviewGeometryShader = Unchecked.defaultof<VkBool32> && x.multiviewTessellationShader = Unchecked.defaultof<VkBool32> && x.variablePointersStorageBuffer = Unchecked.defaultof<VkBool32> && x.variablePointers = Unchecked.defaultof<VkBool32> && x.protectedMemory = Unchecked.defaultof<VkBool32> && x.samplerYcbcrConversion = Unchecked.defaultof<VkBool32> && x.shaderDrawParameters = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVulkan11Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "storageBuffer16BitAccess = %A" x.storageBuffer16BitAccess
                    sprintf "uniformAndStorageBuffer16BitAccess = %A" x.uniformAndStorageBuffer16BitAccess
                    sprintf "storagePushConstant16 = %A" x.storagePushConstant16
                    sprintf "storageInputOutput16 = %A" x.storageInputOutput16
                    sprintf "multiview = %A" x.multiview
                    sprintf "multiviewGeometryShader = %A" x.multiviewGeometryShader
                    sprintf "multiviewTessellationShader = %A" x.multiviewTessellationShader
                    sprintf "variablePointersStorageBuffer = %A" x.variablePointersStorageBuffer
                    sprintf "variablePointers = %A" x.variablePointers
                    sprintf "protectedMemory = %A" x.protectedMemory
                    sprintf "samplerYcbcrConversion = %A" x.samplerYcbcrConversion
                    sprintf "shaderDrawParameters = %A" x.shaderDrawParameters
                ] |> sprintf "VkPhysicalDeviceVulkan11Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan11Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceUUID : Guid
            val mutable public driverUUID : Guid
            val mutable public deviceLUID : byte_8
            val mutable public deviceNodeMask : uint32
            val mutable public deviceLUIDValid : VkBool32
            val mutable public subgroupSize : uint32
            val mutable public subgroupSupportedStages : VkShaderStageFlags
            val mutable public subgroupSupportedOperations : Vulkan11.VkSubgroupFeatureFlags
            val mutable public subgroupQuadOperationsInAllStages : VkBool32
            val mutable public pointClippingBehavior : Vulkan11.VkPointClippingBehavior
            val mutable public maxMultiviewViewCount : uint32
            val mutable public maxMultiviewInstanceIndex : uint32
            val mutable public protectedNoFault : VkBool32
            val mutable public maxPerSetDescriptors : uint32
            val mutable public maxMemoryAllocationSize : VkDeviceSize

            new(pNext: nativeint, deviceUUID: Guid, driverUUID: Guid, deviceLUID: byte_8, deviceNodeMask: uint32, deviceLUIDValid: VkBool32, subgroupSize: uint32, subgroupSupportedStages: VkShaderStageFlags, subgroupSupportedOperations: Vulkan11.VkSubgroupFeatureFlags, subgroupQuadOperationsInAllStages: VkBool32, pointClippingBehavior: Vulkan11.VkPointClippingBehavior, maxMultiviewViewCount: uint32, maxMultiviewInstanceIndex: uint32, protectedNoFault: VkBool32, maxPerSetDescriptors: uint32, maxMemoryAllocationSize: VkDeviceSize) =
                {
                    sType = 50u
                    pNext = pNext
                    deviceUUID = deviceUUID
                    driverUUID = driverUUID
                    deviceLUID = deviceLUID
                    deviceNodeMask = deviceNodeMask
                    deviceLUIDValid = deviceLUIDValid
                    subgroupSize = subgroupSize
                    subgroupSupportedStages = subgroupSupportedStages
                    subgroupSupportedOperations = subgroupSupportedOperations
                    subgroupQuadOperationsInAllStages = subgroupQuadOperationsInAllStages
                    pointClippingBehavior = pointClippingBehavior
                    maxMultiviewViewCount = maxMultiviewViewCount
                    maxMultiviewInstanceIndex = maxMultiviewInstanceIndex
                    protectedNoFault = protectedNoFault
                    maxPerSetDescriptors = maxPerSetDescriptors
                    maxMemoryAllocationSize = maxMemoryAllocationSize
                }

            new(deviceUUID: Guid, driverUUID: Guid, deviceLUID: byte_8, deviceNodeMask: uint32, deviceLUIDValid: VkBool32, subgroupSize: uint32, subgroupSupportedStages: VkShaderStageFlags, subgroupSupportedOperations: Vulkan11.VkSubgroupFeatureFlags, subgroupQuadOperationsInAllStages: VkBool32, pointClippingBehavior: Vulkan11.VkPointClippingBehavior, maxMultiviewViewCount: uint32, maxMultiviewInstanceIndex: uint32, protectedNoFault: VkBool32, maxPerSetDescriptors: uint32, maxMemoryAllocationSize: VkDeviceSize) =
                VkPhysicalDeviceVulkan11Properties(Unchecked.defaultof<nativeint>, deviceUUID, driverUUID, deviceLUID, deviceNodeMask, deviceLUIDValid, subgroupSize, subgroupSupportedStages, subgroupSupportedOperations, subgroupQuadOperationsInAllStages, pointClippingBehavior, maxMultiviewViewCount, maxMultiviewInstanceIndex, protectedNoFault, maxPerSetDescriptors, maxMemoryAllocationSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceUUID = Unchecked.defaultof<Guid> && x.driverUUID = Unchecked.defaultof<Guid> && x.deviceLUID = Unchecked.defaultof<byte_8> && x.deviceNodeMask = Unchecked.defaultof<uint32> && x.deviceLUIDValid = Unchecked.defaultof<VkBool32> && x.subgroupSize = Unchecked.defaultof<uint32> && x.subgroupSupportedStages = Unchecked.defaultof<VkShaderStageFlags> && x.subgroupSupportedOperations = Unchecked.defaultof<Vulkan11.VkSubgroupFeatureFlags> && x.subgroupQuadOperationsInAllStages = Unchecked.defaultof<VkBool32> && x.pointClippingBehavior = Unchecked.defaultof<Vulkan11.VkPointClippingBehavior> && x.maxMultiviewViewCount = Unchecked.defaultof<uint32> && x.maxMultiviewInstanceIndex = Unchecked.defaultof<uint32> && x.protectedNoFault = Unchecked.defaultof<VkBool32> && x.maxPerSetDescriptors = Unchecked.defaultof<uint32> && x.maxMemoryAllocationSize = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkPhysicalDeviceVulkan11Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Guid>, Unchecked.defaultof<Guid>, Unchecked.defaultof<byte_8>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<Vulkan11.VkSubgroupFeatureFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<Vulkan11.VkPointClippingBehavior>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceUUID = %A" x.deviceUUID
                    sprintf "driverUUID = %A" x.driverUUID
                    sprintf "deviceLUID = %A" x.deviceLUID
                    sprintf "deviceNodeMask = %A" x.deviceNodeMask
                    sprintf "deviceLUIDValid = %A" x.deviceLUIDValid
                    sprintf "subgroupSize = %A" x.subgroupSize
                    sprintf "subgroupSupportedStages = %A" x.subgroupSupportedStages
                    sprintf "subgroupSupportedOperations = %A" x.subgroupSupportedOperations
                    sprintf "subgroupQuadOperationsInAllStages = %A" x.subgroupQuadOperationsInAllStages
                    sprintf "pointClippingBehavior = %A" x.pointClippingBehavior
                    sprintf "maxMultiviewViewCount = %A" x.maxMultiviewViewCount
                    sprintf "maxMultiviewInstanceIndex = %A" x.maxMultiviewInstanceIndex
                    sprintf "protectedNoFault = %A" x.protectedNoFault
                    sprintf "maxPerSetDescriptors = %A" x.maxPerSetDescriptors
                    sprintf "maxMemoryAllocationSize = %A" x.maxMemoryAllocationSize
                ] |> sprintf "VkPhysicalDeviceVulkan11Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan12Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public samplerMirrorClampToEdge : VkBool32
            val mutable public drawIndirectCount : VkBool32
            val mutable public storageBuffer8BitAccess : VkBool32
            val mutable public uniformAndStorageBuffer8BitAccess : VkBool32
            val mutable public storagePushConstant8 : VkBool32
            val mutable public shaderBufferInt64Atomics : VkBool32
            val mutable public shaderSharedInt64Atomics : VkBool32
            val mutable public shaderFloat16 : VkBool32
            val mutable public shaderInt8 : VkBool32
            val mutable public descriptorIndexing : VkBool32
            val mutable public shaderInputAttachmentArrayDynamicIndexing : VkBool32
            val mutable public shaderUniformTexelBufferArrayDynamicIndexing : VkBool32
            val mutable public shaderStorageTexelBufferArrayDynamicIndexing : VkBool32
            val mutable public shaderUniformBufferArrayNonUniformIndexing : VkBool32
            val mutable public shaderSampledImageArrayNonUniformIndexing : VkBool32
            val mutable public shaderStorageBufferArrayNonUniformIndexing : VkBool32
            val mutable public shaderStorageImageArrayNonUniformIndexing : VkBool32
            val mutable public shaderInputAttachmentArrayNonUniformIndexing : VkBool32
            val mutable public shaderUniformTexelBufferArrayNonUniformIndexing : VkBool32
            val mutable public shaderStorageTexelBufferArrayNonUniformIndexing : VkBool32
            val mutable public descriptorBindingUniformBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingSampledImageUpdateAfterBind : VkBool32
            val mutable public descriptorBindingStorageImageUpdateAfterBind : VkBool32
            val mutable public descriptorBindingStorageBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingUniformTexelBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingStorageTexelBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingUpdateUnusedWhilePending : VkBool32
            val mutable public descriptorBindingPartiallyBound : VkBool32
            val mutable public descriptorBindingVariableDescriptorCount : VkBool32
            val mutable public runtimeDescriptorArray : VkBool32
            val mutable public samplerFilterMinmax : VkBool32
            val mutable public scalarBlockLayout : VkBool32
            val mutable public imagelessFramebuffer : VkBool32
            val mutable public uniformBufferStandardLayout : VkBool32
            val mutable public shaderSubgroupExtendedTypes : VkBool32
            val mutable public separateDepthStencilLayouts : VkBool32
            val mutable public hostQueryReset : VkBool32
            val mutable public timelineSemaphore : VkBool32
            val mutable public bufferDeviceAddress : VkBool32
            val mutable public bufferDeviceAddressCaptureReplay : VkBool32
            val mutable public bufferDeviceAddressMultiDevice : VkBool32
            val mutable public vulkanMemoryModel : VkBool32
            val mutable public vulkanMemoryModelDeviceScope : VkBool32
            val mutable public vulkanMemoryModelAvailabilityVisibilityChains : VkBool32
            val mutable public shaderOutputViewportIndex : VkBool32
            val mutable public shaderOutputLayer : VkBool32
            val mutable public subgroupBroadcastDynamicId : VkBool32

            new(pNext: nativeint, samplerMirrorClampToEdge: VkBool32, drawIndirectCount: VkBool32, storageBuffer8BitAccess: VkBool32, uniformAndStorageBuffer8BitAccess: VkBool32, storagePushConstant8: VkBool32, shaderBufferInt64Atomics: VkBool32, shaderSharedInt64Atomics: VkBool32, shaderFloat16: VkBool32, shaderInt8: VkBool32, descriptorIndexing: VkBool32, shaderInputAttachmentArrayDynamicIndexing: VkBool32, shaderUniformTexelBufferArrayDynamicIndexing: VkBool32, shaderStorageTexelBufferArrayDynamicIndexing: VkBool32, shaderUniformBufferArrayNonUniformIndexing: VkBool32, shaderSampledImageArrayNonUniformIndexing: VkBool32, shaderStorageBufferArrayNonUniformIndexing: VkBool32, shaderStorageImageArrayNonUniformIndexing: VkBool32, shaderInputAttachmentArrayNonUniformIndexing: VkBool32, shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32, shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32, descriptorBindingUniformBufferUpdateAfterBind: VkBool32, descriptorBindingSampledImageUpdateAfterBind: VkBool32, descriptorBindingStorageImageUpdateAfterBind: VkBool32, descriptorBindingStorageBufferUpdateAfterBind: VkBool32, descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32, descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32, descriptorBindingUpdateUnusedWhilePending: VkBool32, descriptorBindingPartiallyBound: VkBool32, descriptorBindingVariableDescriptorCount: VkBool32, runtimeDescriptorArray: VkBool32, samplerFilterMinmax: VkBool32, scalarBlockLayout: VkBool32, imagelessFramebuffer: VkBool32, uniformBufferStandardLayout: VkBool32, shaderSubgroupExtendedTypes: VkBool32, separateDepthStencilLayouts: VkBool32, hostQueryReset: VkBool32, timelineSemaphore: VkBool32, bufferDeviceAddress: VkBool32, bufferDeviceAddressCaptureReplay: VkBool32, bufferDeviceAddressMultiDevice: VkBool32, vulkanMemoryModel: VkBool32, vulkanMemoryModelDeviceScope: VkBool32, vulkanMemoryModelAvailabilityVisibilityChains: VkBool32, shaderOutputViewportIndex: VkBool32, shaderOutputLayer: VkBool32, subgroupBroadcastDynamicId: VkBool32) =
                {
                    sType = 51u
                    pNext = pNext
                    samplerMirrorClampToEdge = samplerMirrorClampToEdge
                    drawIndirectCount = drawIndirectCount
                    storageBuffer8BitAccess = storageBuffer8BitAccess
                    uniformAndStorageBuffer8BitAccess = uniformAndStorageBuffer8BitAccess
                    storagePushConstant8 = storagePushConstant8
                    shaderBufferInt64Atomics = shaderBufferInt64Atomics
                    shaderSharedInt64Atomics = shaderSharedInt64Atomics
                    shaderFloat16 = shaderFloat16
                    shaderInt8 = shaderInt8
                    descriptorIndexing = descriptorIndexing
                    shaderInputAttachmentArrayDynamicIndexing = shaderInputAttachmentArrayDynamicIndexing
                    shaderUniformTexelBufferArrayDynamicIndexing = shaderUniformTexelBufferArrayDynamicIndexing
                    shaderStorageTexelBufferArrayDynamicIndexing = shaderStorageTexelBufferArrayDynamicIndexing
                    shaderUniformBufferArrayNonUniformIndexing = shaderUniformBufferArrayNonUniformIndexing
                    shaderSampledImageArrayNonUniformIndexing = shaderSampledImageArrayNonUniformIndexing
                    shaderStorageBufferArrayNonUniformIndexing = shaderStorageBufferArrayNonUniformIndexing
                    shaderStorageImageArrayNonUniformIndexing = shaderStorageImageArrayNonUniformIndexing
                    shaderInputAttachmentArrayNonUniformIndexing = shaderInputAttachmentArrayNonUniformIndexing
                    shaderUniformTexelBufferArrayNonUniformIndexing = shaderUniformTexelBufferArrayNonUniformIndexing
                    shaderStorageTexelBufferArrayNonUniformIndexing = shaderStorageTexelBufferArrayNonUniformIndexing
                    descriptorBindingUniformBufferUpdateAfterBind = descriptorBindingUniformBufferUpdateAfterBind
                    descriptorBindingSampledImageUpdateAfterBind = descriptorBindingSampledImageUpdateAfterBind
                    descriptorBindingStorageImageUpdateAfterBind = descriptorBindingStorageImageUpdateAfterBind
                    descriptorBindingStorageBufferUpdateAfterBind = descriptorBindingStorageBufferUpdateAfterBind
                    descriptorBindingUniformTexelBufferUpdateAfterBind = descriptorBindingUniformTexelBufferUpdateAfterBind
                    descriptorBindingStorageTexelBufferUpdateAfterBind = descriptorBindingStorageTexelBufferUpdateAfterBind
                    descriptorBindingUpdateUnusedWhilePending = descriptorBindingUpdateUnusedWhilePending
                    descriptorBindingPartiallyBound = descriptorBindingPartiallyBound
                    descriptorBindingVariableDescriptorCount = descriptorBindingVariableDescriptorCount
                    runtimeDescriptorArray = runtimeDescriptorArray
                    samplerFilterMinmax = samplerFilterMinmax
                    scalarBlockLayout = scalarBlockLayout
                    imagelessFramebuffer = imagelessFramebuffer
                    uniformBufferStandardLayout = uniformBufferStandardLayout
                    shaderSubgroupExtendedTypes = shaderSubgroupExtendedTypes
                    separateDepthStencilLayouts = separateDepthStencilLayouts
                    hostQueryReset = hostQueryReset
                    timelineSemaphore = timelineSemaphore
                    bufferDeviceAddress = bufferDeviceAddress
                    bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay
                    bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice
                    vulkanMemoryModel = vulkanMemoryModel
                    vulkanMemoryModelDeviceScope = vulkanMemoryModelDeviceScope
                    vulkanMemoryModelAvailabilityVisibilityChains = vulkanMemoryModelAvailabilityVisibilityChains
                    shaderOutputViewportIndex = shaderOutputViewportIndex
                    shaderOutputLayer = shaderOutputLayer
                    subgroupBroadcastDynamicId = subgroupBroadcastDynamicId
                }

            new(samplerMirrorClampToEdge: VkBool32, drawIndirectCount: VkBool32, storageBuffer8BitAccess: VkBool32, uniformAndStorageBuffer8BitAccess: VkBool32, storagePushConstant8: VkBool32, shaderBufferInt64Atomics: VkBool32, shaderSharedInt64Atomics: VkBool32, shaderFloat16: VkBool32, shaderInt8: VkBool32, descriptorIndexing: VkBool32, shaderInputAttachmentArrayDynamicIndexing: VkBool32, shaderUniformTexelBufferArrayDynamicIndexing: VkBool32, shaderStorageTexelBufferArrayDynamicIndexing: VkBool32, shaderUniformBufferArrayNonUniformIndexing: VkBool32, shaderSampledImageArrayNonUniformIndexing: VkBool32, shaderStorageBufferArrayNonUniformIndexing: VkBool32, shaderStorageImageArrayNonUniformIndexing: VkBool32, shaderInputAttachmentArrayNonUniformIndexing: VkBool32, shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32, shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32, descriptorBindingUniformBufferUpdateAfterBind: VkBool32, descriptorBindingSampledImageUpdateAfterBind: VkBool32, descriptorBindingStorageImageUpdateAfterBind: VkBool32, descriptorBindingStorageBufferUpdateAfterBind: VkBool32, descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32, descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32, descriptorBindingUpdateUnusedWhilePending: VkBool32, descriptorBindingPartiallyBound: VkBool32, descriptorBindingVariableDescriptorCount: VkBool32, runtimeDescriptorArray: VkBool32, samplerFilterMinmax: VkBool32, scalarBlockLayout: VkBool32, imagelessFramebuffer: VkBool32, uniformBufferStandardLayout: VkBool32, shaderSubgroupExtendedTypes: VkBool32, separateDepthStencilLayouts: VkBool32, hostQueryReset: VkBool32, timelineSemaphore: VkBool32, bufferDeviceAddress: VkBool32, bufferDeviceAddressCaptureReplay: VkBool32, bufferDeviceAddressMultiDevice: VkBool32, vulkanMemoryModel: VkBool32, vulkanMemoryModelDeviceScope: VkBool32, vulkanMemoryModelAvailabilityVisibilityChains: VkBool32, shaderOutputViewportIndex: VkBool32, shaderOutputLayer: VkBool32, subgroupBroadcastDynamicId: VkBool32) =
                VkPhysicalDeviceVulkan12Features(Unchecked.defaultof<nativeint>, samplerMirrorClampToEdge, drawIndirectCount, storageBuffer8BitAccess, uniformAndStorageBuffer8BitAccess, storagePushConstant8, shaderBufferInt64Atomics, shaderSharedInt64Atomics, shaderFloat16, shaderInt8, descriptorIndexing, shaderInputAttachmentArrayDynamicIndexing, shaderUniformTexelBufferArrayDynamicIndexing, shaderStorageTexelBufferArrayDynamicIndexing, shaderUniformBufferArrayNonUniformIndexing, shaderSampledImageArrayNonUniformIndexing, shaderStorageBufferArrayNonUniformIndexing, shaderStorageImageArrayNonUniformIndexing, shaderInputAttachmentArrayNonUniformIndexing, shaderUniformTexelBufferArrayNonUniformIndexing, shaderStorageTexelBufferArrayNonUniformIndexing, descriptorBindingUniformBufferUpdateAfterBind, descriptorBindingSampledImageUpdateAfterBind, descriptorBindingStorageImageUpdateAfterBind, descriptorBindingStorageBufferUpdateAfterBind, descriptorBindingUniformTexelBufferUpdateAfterBind, descriptorBindingStorageTexelBufferUpdateAfterBind, descriptorBindingUpdateUnusedWhilePending, descriptorBindingPartiallyBound, descriptorBindingVariableDescriptorCount, runtimeDescriptorArray, samplerFilterMinmax, scalarBlockLayout, imagelessFramebuffer, uniformBufferStandardLayout, shaderSubgroupExtendedTypes, separateDepthStencilLayouts, hostQueryReset, timelineSemaphore, bufferDeviceAddress, bufferDeviceAddressCaptureReplay, bufferDeviceAddressMultiDevice, vulkanMemoryModel, vulkanMemoryModelDeviceScope, vulkanMemoryModelAvailabilityVisibilityChains, shaderOutputViewportIndex, shaderOutputLayer, subgroupBroadcastDynamicId)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.samplerMirrorClampToEdge = Unchecked.defaultof<VkBool32> && x.drawIndirectCount = Unchecked.defaultof<VkBool32> && x.storageBuffer8BitAccess = Unchecked.defaultof<VkBool32> && x.uniformAndStorageBuffer8BitAccess = Unchecked.defaultof<VkBool32> && x.storagePushConstant8 = Unchecked.defaultof<VkBool32> && x.shaderBufferInt64Atomics = Unchecked.defaultof<VkBool32> && x.shaderSharedInt64Atomics = Unchecked.defaultof<VkBool32> && x.shaderFloat16 = Unchecked.defaultof<VkBool32> && x.shaderInt8 = Unchecked.defaultof<VkBool32> && x.descriptorIndexing = Unchecked.defaultof<VkBool32> && x.shaderInputAttachmentArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderUniformTexelBufferArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageTexelBufferArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderUniformBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderSampledImageArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageImageArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderInputAttachmentArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderUniformTexelBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageTexelBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.descriptorBindingUniformBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingSampledImageUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingStorageImageUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingStorageBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingUniformTexelBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingStorageTexelBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingUpdateUnusedWhilePending = Unchecked.defaultof<VkBool32> && x.descriptorBindingPartiallyBound = Unchecked.defaultof<VkBool32> && x.descriptorBindingVariableDescriptorCount = Unchecked.defaultof<VkBool32> && x.runtimeDescriptorArray = Unchecked.defaultof<VkBool32> && x.samplerFilterMinmax = Unchecked.defaultof<VkBool32> && x.scalarBlockLayout = Unchecked.defaultof<VkBool32> && x.imagelessFramebuffer = Unchecked.defaultof<VkBool32> && x.uniformBufferStandardLayout = Unchecked.defaultof<VkBool32> && x.shaderSubgroupExtendedTypes = Unchecked.defaultof<VkBool32> && x.separateDepthStencilLayouts = Unchecked.defaultof<VkBool32> && x.hostQueryReset = Unchecked.defaultof<VkBool32> && x.timelineSemaphore = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddress = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddressCaptureReplay = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddressMultiDevice = Unchecked.defaultof<VkBool32> && x.vulkanMemoryModel = Unchecked.defaultof<VkBool32> && x.vulkanMemoryModelDeviceScope = Unchecked.defaultof<VkBool32> && x.vulkanMemoryModelAvailabilityVisibilityChains = Unchecked.defaultof<VkBool32> && x.shaderOutputViewportIndex = Unchecked.defaultof<VkBool32> && x.shaderOutputLayer = Unchecked.defaultof<VkBool32> && x.subgroupBroadcastDynamicId = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVulkan12Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "samplerMirrorClampToEdge = %A" x.samplerMirrorClampToEdge
                    sprintf "drawIndirectCount = %A" x.drawIndirectCount
                    sprintf "storageBuffer8BitAccess = %A" x.storageBuffer8BitAccess
                    sprintf "uniformAndStorageBuffer8BitAccess = %A" x.uniformAndStorageBuffer8BitAccess
                    sprintf "storagePushConstant8 = %A" x.storagePushConstant8
                    sprintf "shaderBufferInt64Atomics = %A" x.shaderBufferInt64Atomics
                    sprintf "shaderSharedInt64Atomics = %A" x.shaderSharedInt64Atomics
                    sprintf "shaderFloat16 = %A" x.shaderFloat16
                    sprintf "shaderInt8 = %A" x.shaderInt8
                    sprintf "descriptorIndexing = %A" x.descriptorIndexing
                    sprintf "shaderInputAttachmentArrayDynamicIndexing = %A" x.shaderInputAttachmentArrayDynamicIndexing
                    sprintf "shaderUniformTexelBufferArrayDynamicIndexing = %A" x.shaderUniformTexelBufferArrayDynamicIndexing
                    sprintf "shaderStorageTexelBufferArrayDynamicIndexing = %A" x.shaderStorageTexelBufferArrayDynamicIndexing
                    sprintf "shaderUniformBufferArrayNonUniformIndexing = %A" x.shaderUniformBufferArrayNonUniformIndexing
                    sprintf "shaderSampledImageArrayNonUniformIndexing = %A" x.shaderSampledImageArrayNonUniformIndexing
                    sprintf "shaderStorageBufferArrayNonUniformIndexing = %A" x.shaderStorageBufferArrayNonUniformIndexing
                    sprintf "shaderStorageImageArrayNonUniformIndexing = %A" x.shaderStorageImageArrayNonUniformIndexing
                    sprintf "shaderInputAttachmentArrayNonUniformIndexing = %A" x.shaderInputAttachmentArrayNonUniformIndexing
                    sprintf "shaderUniformTexelBufferArrayNonUniformIndexing = %A" x.shaderUniformTexelBufferArrayNonUniformIndexing
                    sprintf "shaderStorageTexelBufferArrayNonUniformIndexing = %A" x.shaderStorageTexelBufferArrayNonUniformIndexing
                    sprintf "descriptorBindingUniformBufferUpdateAfterBind = %A" x.descriptorBindingUniformBufferUpdateAfterBind
                    sprintf "descriptorBindingSampledImageUpdateAfterBind = %A" x.descriptorBindingSampledImageUpdateAfterBind
                    sprintf "descriptorBindingStorageImageUpdateAfterBind = %A" x.descriptorBindingStorageImageUpdateAfterBind
                    sprintf "descriptorBindingStorageBufferUpdateAfterBind = %A" x.descriptorBindingStorageBufferUpdateAfterBind
                    sprintf "descriptorBindingUniformTexelBufferUpdateAfterBind = %A" x.descriptorBindingUniformTexelBufferUpdateAfterBind
                    sprintf "descriptorBindingStorageTexelBufferUpdateAfterBind = %A" x.descriptorBindingStorageTexelBufferUpdateAfterBind
                    sprintf "descriptorBindingUpdateUnusedWhilePending = %A" x.descriptorBindingUpdateUnusedWhilePending
                    sprintf "descriptorBindingPartiallyBound = %A" x.descriptorBindingPartiallyBound
                    sprintf "descriptorBindingVariableDescriptorCount = %A" x.descriptorBindingVariableDescriptorCount
                    sprintf "runtimeDescriptorArray = %A" x.runtimeDescriptorArray
                    sprintf "samplerFilterMinmax = %A" x.samplerFilterMinmax
                    sprintf "scalarBlockLayout = %A" x.scalarBlockLayout
                    sprintf "imagelessFramebuffer = %A" x.imagelessFramebuffer
                    sprintf "uniformBufferStandardLayout = %A" x.uniformBufferStandardLayout
                    sprintf "shaderSubgroupExtendedTypes = %A" x.shaderSubgroupExtendedTypes
                    sprintf "separateDepthStencilLayouts = %A" x.separateDepthStencilLayouts
                    sprintf "hostQueryReset = %A" x.hostQueryReset
                    sprintf "timelineSemaphore = %A" x.timelineSemaphore
                    sprintf "bufferDeviceAddress = %A" x.bufferDeviceAddress
                    sprintf "bufferDeviceAddressCaptureReplay = %A" x.bufferDeviceAddressCaptureReplay
                    sprintf "bufferDeviceAddressMultiDevice = %A" x.bufferDeviceAddressMultiDevice
                    sprintf "vulkanMemoryModel = %A" x.vulkanMemoryModel
                    sprintf "vulkanMemoryModelDeviceScope = %A" x.vulkanMemoryModelDeviceScope
                    sprintf "vulkanMemoryModelAvailabilityVisibilityChains = %A" x.vulkanMemoryModelAvailabilityVisibilityChains
                    sprintf "shaderOutputViewportIndex = %A" x.shaderOutputViewportIndex
                    sprintf "shaderOutputLayer = %A" x.shaderOutputLayer
                    sprintf "subgroupBroadcastDynamicId = %A" x.subgroupBroadcastDynamicId
                ] |> sprintf "VkPhysicalDeviceVulkan12Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan12Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public driverID : VkDriverId
            val mutable public driverName : String256
            val mutable public driverInfo : String256
            val mutable public conformanceVersion : VkConformanceVersion
            val mutable public denormBehaviorIndependence : VkShaderFloatControlsIndependence
            val mutable public roundingModeIndependence : VkShaderFloatControlsIndependence
            val mutable public shaderSignedZeroInfNanPreserveFloat16 : VkBool32
            val mutable public shaderSignedZeroInfNanPreserveFloat32 : VkBool32
            val mutable public shaderSignedZeroInfNanPreserveFloat64 : VkBool32
            val mutable public shaderDenormPreserveFloat16 : VkBool32
            val mutable public shaderDenormPreserveFloat32 : VkBool32
            val mutable public shaderDenormPreserveFloat64 : VkBool32
            val mutable public shaderDenormFlushToZeroFloat16 : VkBool32
            val mutable public shaderDenormFlushToZeroFloat32 : VkBool32
            val mutable public shaderDenormFlushToZeroFloat64 : VkBool32
            val mutable public shaderRoundingModeRTEFloat16 : VkBool32
            val mutable public shaderRoundingModeRTEFloat32 : VkBool32
            val mutable public shaderRoundingModeRTEFloat64 : VkBool32
            val mutable public shaderRoundingModeRTZFloat16 : VkBool32
            val mutable public shaderRoundingModeRTZFloat32 : VkBool32
            val mutable public shaderRoundingModeRTZFloat64 : VkBool32
            val mutable public maxUpdateAfterBindDescriptorsInAllPools : uint32
            val mutable public shaderUniformBufferArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderSampledImageArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderStorageBufferArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderStorageImageArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderInputAttachmentArrayNonUniformIndexingNative : VkBool32
            val mutable public robustBufferAccessUpdateAfterBind : VkBool32
            val mutable public quadDivergentImplicitLod : VkBool32
            val mutable public maxPerStageDescriptorUpdateAfterBindSamplers : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindUniformBuffers : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindStorageBuffers : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindSampledImages : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindStorageImages : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindInputAttachments : uint32
            val mutable public maxPerStageUpdateAfterBindResources : uint32
            val mutable public maxDescriptorSetUpdateAfterBindSamplers : uint32
            val mutable public maxDescriptorSetUpdateAfterBindUniformBuffers : uint32
            val mutable public maxDescriptorSetUpdateAfterBindUniformBuffersDynamic : uint32
            val mutable public maxDescriptorSetUpdateAfterBindStorageBuffers : uint32
            val mutable public maxDescriptorSetUpdateAfterBindStorageBuffersDynamic : uint32
            val mutable public maxDescriptorSetUpdateAfterBindSampledImages : uint32
            val mutable public maxDescriptorSetUpdateAfterBindStorageImages : uint32
            val mutable public maxDescriptorSetUpdateAfterBindInputAttachments : uint32
            val mutable public supportedDepthResolveModes : VkResolveModeFlags
            val mutable public supportedStencilResolveModes : VkResolveModeFlags
            val mutable public independentResolveNone : VkBool32
            val mutable public independentResolve : VkBool32
            val mutable public filterMinmaxSingleComponentFormats : VkBool32
            val mutable public filterMinmaxImageComponentMapping : VkBool32
            val mutable public maxTimelineSemaphoreValueDifference : uint64
            val mutable public framebufferIntegerColorSampleCounts : VkSampleCountFlags

            new(pNext: nativeint, driverID: VkDriverId, driverName: String256, driverInfo: String256, conformanceVersion: VkConformanceVersion, denormBehaviorIndependence: VkShaderFloatControlsIndependence, roundingModeIndependence: VkShaderFloatControlsIndependence, shaderSignedZeroInfNanPreserveFloat16: VkBool32, shaderSignedZeroInfNanPreserveFloat32: VkBool32, shaderSignedZeroInfNanPreserveFloat64: VkBool32, shaderDenormPreserveFloat16: VkBool32, shaderDenormPreserveFloat32: VkBool32, shaderDenormPreserveFloat64: VkBool32, shaderDenormFlushToZeroFloat16: VkBool32, shaderDenormFlushToZeroFloat32: VkBool32, shaderDenormFlushToZeroFloat64: VkBool32, shaderRoundingModeRTEFloat16: VkBool32, shaderRoundingModeRTEFloat32: VkBool32, shaderRoundingModeRTEFloat64: VkBool32, shaderRoundingModeRTZFloat16: VkBool32, shaderRoundingModeRTZFloat32: VkBool32, shaderRoundingModeRTZFloat64: VkBool32, maxUpdateAfterBindDescriptorsInAllPools: uint32, shaderUniformBufferArrayNonUniformIndexingNative: VkBool32, shaderSampledImageArrayNonUniformIndexingNative: VkBool32, shaderStorageBufferArrayNonUniformIndexingNative: VkBool32, shaderStorageImageArrayNonUniformIndexingNative: VkBool32, shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32, robustBufferAccessUpdateAfterBind: VkBool32, quadDivergentImplicitLod: VkBool32, maxPerStageDescriptorUpdateAfterBindSamplers: uint32, maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32, maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32, maxPerStageDescriptorUpdateAfterBindSampledImages: uint32, maxPerStageDescriptorUpdateAfterBindStorageImages: uint32, maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32, maxPerStageUpdateAfterBindResources: uint32, maxDescriptorSetUpdateAfterBindSamplers: uint32, maxDescriptorSetUpdateAfterBindUniformBuffers: uint32, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindStorageBuffers: uint32, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindSampledImages: uint32, maxDescriptorSetUpdateAfterBindStorageImages: uint32, maxDescriptorSetUpdateAfterBindInputAttachments: uint32, supportedDepthResolveModes: VkResolveModeFlags, supportedStencilResolveModes: VkResolveModeFlags, independentResolveNone: VkBool32, independentResolve: VkBool32, filterMinmaxSingleComponentFormats: VkBool32, filterMinmaxImageComponentMapping: VkBool32, maxTimelineSemaphoreValueDifference: uint64, framebufferIntegerColorSampleCounts: VkSampleCountFlags) =
                {
                    sType = 52u
                    pNext = pNext
                    driverID = driverID
                    driverName = driverName
                    driverInfo = driverInfo
                    conformanceVersion = conformanceVersion
                    denormBehaviorIndependence = denormBehaviorIndependence
                    roundingModeIndependence = roundingModeIndependence
                    shaderSignedZeroInfNanPreserveFloat16 = shaderSignedZeroInfNanPreserveFloat16
                    shaderSignedZeroInfNanPreserveFloat32 = shaderSignedZeroInfNanPreserveFloat32
                    shaderSignedZeroInfNanPreserveFloat64 = shaderSignedZeroInfNanPreserveFloat64
                    shaderDenormPreserveFloat16 = shaderDenormPreserveFloat16
                    shaderDenormPreserveFloat32 = shaderDenormPreserveFloat32
                    shaderDenormPreserveFloat64 = shaderDenormPreserveFloat64
                    shaderDenormFlushToZeroFloat16 = shaderDenormFlushToZeroFloat16
                    shaderDenormFlushToZeroFloat32 = shaderDenormFlushToZeroFloat32
                    shaderDenormFlushToZeroFloat64 = shaderDenormFlushToZeroFloat64
                    shaderRoundingModeRTEFloat16 = shaderRoundingModeRTEFloat16
                    shaderRoundingModeRTEFloat32 = shaderRoundingModeRTEFloat32
                    shaderRoundingModeRTEFloat64 = shaderRoundingModeRTEFloat64
                    shaderRoundingModeRTZFloat16 = shaderRoundingModeRTZFloat16
                    shaderRoundingModeRTZFloat32 = shaderRoundingModeRTZFloat32
                    shaderRoundingModeRTZFloat64 = shaderRoundingModeRTZFloat64
                    maxUpdateAfterBindDescriptorsInAllPools = maxUpdateAfterBindDescriptorsInAllPools
                    shaderUniformBufferArrayNonUniformIndexingNative = shaderUniformBufferArrayNonUniformIndexingNative
                    shaderSampledImageArrayNonUniformIndexingNative = shaderSampledImageArrayNonUniformIndexingNative
                    shaderStorageBufferArrayNonUniformIndexingNative = shaderStorageBufferArrayNonUniformIndexingNative
                    shaderStorageImageArrayNonUniformIndexingNative = shaderStorageImageArrayNonUniformIndexingNative
                    shaderInputAttachmentArrayNonUniformIndexingNative = shaderInputAttachmentArrayNonUniformIndexingNative
                    robustBufferAccessUpdateAfterBind = robustBufferAccessUpdateAfterBind
                    quadDivergentImplicitLod = quadDivergentImplicitLod
                    maxPerStageDescriptorUpdateAfterBindSamplers = maxPerStageDescriptorUpdateAfterBindSamplers
                    maxPerStageDescriptorUpdateAfterBindUniformBuffers = maxPerStageDescriptorUpdateAfterBindUniformBuffers
                    maxPerStageDescriptorUpdateAfterBindStorageBuffers = maxPerStageDescriptorUpdateAfterBindStorageBuffers
                    maxPerStageDescriptorUpdateAfterBindSampledImages = maxPerStageDescriptorUpdateAfterBindSampledImages
                    maxPerStageDescriptorUpdateAfterBindStorageImages = maxPerStageDescriptorUpdateAfterBindStorageImages
                    maxPerStageDescriptorUpdateAfterBindInputAttachments = maxPerStageDescriptorUpdateAfterBindInputAttachments
                    maxPerStageUpdateAfterBindResources = maxPerStageUpdateAfterBindResources
                    maxDescriptorSetUpdateAfterBindSamplers = maxDescriptorSetUpdateAfterBindSamplers
                    maxDescriptorSetUpdateAfterBindUniformBuffers = maxDescriptorSetUpdateAfterBindUniformBuffers
                    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
                    maxDescriptorSetUpdateAfterBindStorageBuffers = maxDescriptorSetUpdateAfterBindStorageBuffers
                    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
                    maxDescriptorSetUpdateAfterBindSampledImages = maxDescriptorSetUpdateAfterBindSampledImages
                    maxDescriptorSetUpdateAfterBindStorageImages = maxDescriptorSetUpdateAfterBindStorageImages
                    maxDescriptorSetUpdateAfterBindInputAttachments = maxDescriptorSetUpdateAfterBindInputAttachments
                    supportedDepthResolveModes = supportedDepthResolveModes
                    supportedStencilResolveModes = supportedStencilResolveModes
                    independentResolveNone = independentResolveNone
                    independentResolve = independentResolve
                    filterMinmaxSingleComponentFormats = filterMinmaxSingleComponentFormats
                    filterMinmaxImageComponentMapping = filterMinmaxImageComponentMapping
                    maxTimelineSemaphoreValueDifference = maxTimelineSemaphoreValueDifference
                    framebufferIntegerColorSampleCounts = framebufferIntegerColorSampleCounts
                }

            new(driverID: VkDriverId, driverName: String256, driverInfo: String256, conformanceVersion: VkConformanceVersion, denormBehaviorIndependence: VkShaderFloatControlsIndependence, roundingModeIndependence: VkShaderFloatControlsIndependence, shaderSignedZeroInfNanPreserveFloat16: VkBool32, shaderSignedZeroInfNanPreserveFloat32: VkBool32, shaderSignedZeroInfNanPreserveFloat64: VkBool32, shaderDenormPreserveFloat16: VkBool32, shaderDenormPreserveFloat32: VkBool32, shaderDenormPreserveFloat64: VkBool32, shaderDenormFlushToZeroFloat16: VkBool32, shaderDenormFlushToZeroFloat32: VkBool32, shaderDenormFlushToZeroFloat64: VkBool32, shaderRoundingModeRTEFloat16: VkBool32, shaderRoundingModeRTEFloat32: VkBool32, shaderRoundingModeRTEFloat64: VkBool32, shaderRoundingModeRTZFloat16: VkBool32, shaderRoundingModeRTZFloat32: VkBool32, shaderRoundingModeRTZFloat64: VkBool32, maxUpdateAfterBindDescriptorsInAllPools: uint32, shaderUniformBufferArrayNonUniformIndexingNative: VkBool32, shaderSampledImageArrayNonUniformIndexingNative: VkBool32, shaderStorageBufferArrayNonUniformIndexingNative: VkBool32, shaderStorageImageArrayNonUniformIndexingNative: VkBool32, shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32, robustBufferAccessUpdateAfterBind: VkBool32, quadDivergentImplicitLod: VkBool32, maxPerStageDescriptorUpdateAfterBindSamplers: uint32, maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32, maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32, maxPerStageDescriptorUpdateAfterBindSampledImages: uint32, maxPerStageDescriptorUpdateAfterBindStorageImages: uint32, maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32, maxPerStageUpdateAfterBindResources: uint32, maxDescriptorSetUpdateAfterBindSamplers: uint32, maxDescriptorSetUpdateAfterBindUniformBuffers: uint32, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindStorageBuffers: uint32, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindSampledImages: uint32, maxDescriptorSetUpdateAfterBindStorageImages: uint32, maxDescriptorSetUpdateAfterBindInputAttachments: uint32, supportedDepthResolveModes: VkResolveModeFlags, supportedStencilResolveModes: VkResolveModeFlags, independentResolveNone: VkBool32, independentResolve: VkBool32, filterMinmaxSingleComponentFormats: VkBool32, filterMinmaxImageComponentMapping: VkBool32, maxTimelineSemaphoreValueDifference: uint64, framebufferIntegerColorSampleCounts: VkSampleCountFlags) =
                VkPhysicalDeviceVulkan12Properties(Unchecked.defaultof<nativeint>, driverID, driverName, driverInfo, conformanceVersion, denormBehaviorIndependence, roundingModeIndependence, shaderSignedZeroInfNanPreserveFloat16, shaderSignedZeroInfNanPreserveFloat32, shaderSignedZeroInfNanPreserveFloat64, shaderDenormPreserveFloat16, shaderDenormPreserveFloat32, shaderDenormPreserveFloat64, shaderDenormFlushToZeroFloat16, shaderDenormFlushToZeroFloat32, shaderDenormFlushToZeroFloat64, shaderRoundingModeRTEFloat16, shaderRoundingModeRTEFloat32, shaderRoundingModeRTEFloat64, shaderRoundingModeRTZFloat16, shaderRoundingModeRTZFloat32, shaderRoundingModeRTZFloat64, maxUpdateAfterBindDescriptorsInAllPools, shaderUniformBufferArrayNonUniformIndexingNative, shaderSampledImageArrayNonUniformIndexingNative, shaderStorageBufferArrayNonUniformIndexingNative, shaderStorageImageArrayNonUniformIndexingNative, shaderInputAttachmentArrayNonUniformIndexingNative, robustBufferAccessUpdateAfterBind, quadDivergentImplicitLod, maxPerStageDescriptorUpdateAfterBindSamplers, maxPerStageDescriptorUpdateAfterBindUniformBuffers, maxPerStageDescriptorUpdateAfterBindStorageBuffers, maxPerStageDescriptorUpdateAfterBindSampledImages, maxPerStageDescriptorUpdateAfterBindStorageImages, maxPerStageDescriptorUpdateAfterBindInputAttachments, maxPerStageUpdateAfterBindResources, maxDescriptorSetUpdateAfterBindSamplers, maxDescriptorSetUpdateAfterBindUniformBuffers, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, maxDescriptorSetUpdateAfterBindStorageBuffers, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, maxDescriptorSetUpdateAfterBindSampledImages, maxDescriptorSetUpdateAfterBindStorageImages, maxDescriptorSetUpdateAfterBindInputAttachments, supportedDepthResolveModes, supportedStencilResolveModes, independentResolveNone, independentResolve, filterMinmaxSingleComponentFormats, filterMinmaxImageComponentMapping, maxTimelineSemaphoreValueDifference, framebufferIntegerColorSampleCounts)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.driverID = Unchecked.defaultof<VkDriverId> && x.driverName = Unchecked.defaultof<String256> && x.driverInfo = Unchecked.defaultof<String256> && x.conformanceVersion = Unchecked.defaultof<VkConformanceVersion> && x.denormBehaviorIndependence = Unchecked.defaultof<VkShaderFloatControlsIndependence> && x.roundingModeIndependence = Unchecked.defaultof<VkShaderFloatControlsIndependence> && x.shaderSignedZeroInfNanPreserveFloat16 = Unchecked.defaultof<VkBool32> && x.shaderSignedZeroInfNanPreserveFloat32 = Unchecked.defaultof<VkBool32> && x.shaderSignedZeroInfNanPreserveFloat64 = Unchecked.defaultof<VkBool32> && x.shaderDenormPreserveFloat16 = Unchecked.defaultof<VkBool32> && x.shaderDenormPreserveFloat32 = Unchecked.defaultof<VkBool32> && x.shaderDenormPreserveFloat64 = Unchecked.defaultof<VkBool32> && x.shaderDenormFlushToZeroFloat16 = Unchecked.defaultof<VkBool32> && x.shaderDenormFlushToZeroFloat32 = Unchecked.defaultof<VkBool32> && x.shaderDenormFlushToZeroFloat64 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTEFloat16 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTEFloat32 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTEFloat64 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTZFloat16 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTZFloat32 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTZFloat64 = Unchecked.defaultof<VkBool32> && x.maxUpdateAfterBindDescriptorsInAllPools = Unchecked.defaultof<uint32> && x.shaderUniformBufferArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderSampledImageArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderStorageBufferArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderStorageImageArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderInputAttachmentArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.robustBufferAccessUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.quadDivergentImplicitLod = Unchecked.defaultof<VkBool32> && x.maxPerStageDescriptorUpdateAfterBindSamplers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindUniformBuffers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindStorageBuffers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindSampledImages = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindStorageImages = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindInputAttachments = Unchecked.defaultof<uint32> && x.maxPerStageUpdateAfterBindResources = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindSamplers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindUniformBuffers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindStorageBuffers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindSampledImages = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindStorageImages = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindInputAttachments = Unchecked.defaultof<uint32> && x.supportedDepthResolveModes = Unchecked.defaultof<VkResolveModeFlags> && x.supportedStencilResolveModes = Unchecked.defaultof<VkResolveModeFlags> && x.independentResolveNone = Unchecked.defaultof<VkBool32> && x.independentResolve = Unchecked.defaultof<VkBool32> && x.filterMinmaxSingleComponentFormats = Unchecked.defaultof<VkBool32> && x.filterMinmaxImageComponentMapping = Unchecked.defaultof<VkBool32> && x.maxTimelineSemaphoreValueDifference = Unchecked.defaultof<uint64> && x.framebufferIntegerColorSampleCounts = Unchecked.defaultof<VkSampleCountFlags>

            static member Empty =
                VkPhysicalDeviceVulkan12Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDriverId>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<VkConformanceVersion>, Unchecked.defaultof<VkShaderFloatControlsIndependence>, Unchecked.defaultof<VkShaderFloatControlsIndependence>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkSampleCountFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "driverID = %A" x.driverID
                    sprintf "driverName = %A" x.driverName
                    sprintf "driverInfo = %A" x.driverInfo
                    sprintf "conformanceVersion = %A" x.conformanceVersion
                    sprintf "denormBehaviorIndependence = %A" x.denormBehaviorIndependence
                    sprintf "roundingModeIndependence = %A" x.roundingModeIndependence
                    sprintf "shaderSignedZeroInfNanPreserveFloat16 = %A" x.shaderSignedZeroInfNanPreserveFloat16
                    sprintf "shaderSignedZeroInfNanPreserveFloat32 = %A" x.shaderSignedZeroInfNanPreserveFloat32
                    sprintf "shaderSignedZeroInfNanPreserveFloat64 = %A" x.shaderSignedZeroInfNanPreserveFloat64
                    sprintf "shaderDenormPreserveFloat16 = %A" x.shaderDenormPreserveFloat16
                    sprintf "shaderDenormPreserveFloat32 = %A" x.shaderDenormPreserveFloat32
                    sprintf "shaderDenormPreserveFloat64 = %A" x.shaderDenormPreserveFloat64
                    sprintf "shaderDenormFlushToZeroFloat16 = %A" x.shaderDenormFlushToZeroFloat16
                    sprintf "shaderDenormFlushToZeroFloat32 = %A" x.shaderDenormFlushToZeroFloat32
                    sprintf "shaderDenormFlushToZeroFloat64 = %A" x.shaderDenormFlushToZeroFloat64
                    sprintf "shaderRoundingModeRTEFloat16 = %A" x.shaderRoundingModeRTEFloat16
                    sprintf "shaderRoundingModeRTEFloat32 = %A" x.shaderRoundingModeRTEFloat32
                    sprintf "shaderRoundingModeRTEFloat64 = %A" x.shaderRoundingModeRTEFloat64
                    sprintf "shaderRoundingModeRTZFloat16 = %A" x.shaderRoundingModeRTZFloat16
                    sprintf "shaderRoundingModeRTZFloat32 = %A" x.shaderRoundingModeRTZFloat32
                    sprintf "shaderRoundingModeRTZFloat64 = %A" x.shaderRoundingModeRTZFloat64
                    sprintf "maxUpdateAfterBindDescriptorsInAllPools = %A" x.maxUpdateAfterBindDescriptorsInAllPools
                    sprintf "shaderUniformBufferArrayNonUniformIndexingNative = %A" x.shaderUniformBufferArrayNonUniformIndexingNative
                    sprintf "shaderSampledImageArrayNonUniformIndexingNative = %A" x.shaderSampledImageArrayNonUniformIndexingNative
                    sprintf "shaderStorageBufferArrayNonUniformIndexingNative = %A" x.shaderStorageBufferArrayNonUniformIndexingNative
                    sprintf "shaderStorageImageArrayNonUniformIndexingNative = %A" x.shaderStorageImageArrayNonUniformIndexingNative
                    sprintf "shaderInputAttachmentArrayNonUniformIndexingNative = %A" x.shaderInputAttachmentArrayNonUniformIndexingNative
                    sprintf "robustBufferAccessUpdateAfterBind = %A" x.robustBufferAccessUpdateAfterBind
                    sprintf "quadDivergentImplicitLod = %A" x.quadDivergentImplicitLod
                    sprintf "maxPerStageDescriptorUpdateAfterBindSamplers = %A" x.maxPerStageDescriptorUpdateAfterBindSamplers
                    sprintf "maxPerStageDescriptorUpdateAfterBindUniformBuffers = %A" x.maxPerStageDescriptorUpdateAfterBindUniformBuffers
                    sprintf "maxPerStageDescriptorUpdateAfterBindStorageBuffers = %A" x.maxPerStageDescriptorUpdateAfterBindStorageBuffers
                    sprintf "maxPerStageDescriptorUpdateAfterBindSampledImages = %A" x.maxPerStageDescriptorUpdateAfterBindSampledImages
                    sprintf "maxPerStageDescriptorUpdateAfterBindStorageImages = %A" x.maxPerStageDescriptorUpdateAfterBindStorageImages
                    sprintf "maxPerStageDescriptorUpdateAfterBindInputAttachments = %A" x.maxPerStageDescriptorUpdateAfterBindInputAttachments
                    sprintf "maxPerStageUpdateAfterBindResources = %A" x.maxPerStageUpdateAfterBindResources
                    sprintf "maxDescriptorSetUpdateAfterBindSamplers = %A" x.maxDescriptorSetUpdateAfterBindSamplers
                    sprintf "maxDescriptorSetUpdateAfterBindUniformBuffers = %A" x.maxDescriptorSetUpdateAfterBindUniformBuffers
                    sprintf "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = %A" x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
                    sprintf "maxDescriptorSetUpdateAfterBindStorageBuffers = %A" x.maxDescriptorSetUpdateAfterBindStorageBuffers
                    sprintf "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = %A" x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
                    sprintf "maxDescriptorSetUpdateAfterBindSampledImages = %A" x.maxDescriptorSetUpdateAfterBindSampledImages
                    sprintf "maxDescriptorSetUpdateAfterBindStorageImages = %A" x.maxDescriptorSetUpdateAfterBindStorageImages
                    sprintf "maxDescriptorSetUpdateAfterBindInputAttachments = %A" x.maxDescriptorSetUpdateAfterBindInputAttachments
                    sprintf "supportedDepthResolveModes = %A" x.supportedDepthResolveModes
                    sprintf "supportedStencilResolveModes = %A" x.supportedStencilResolveModes
                    sprintf "independentResolveNone = %A" x.independentResolveNone
                    sprintf "independentResolve = %A" x.independentResolve
                    sprintf "filterMinmaxSingleComponentFormats = %A" x.filterMinmaxSingleComponentFormats
                    sprintf "filterMinmaxImageComponentMapping = %A" x.filterMinmaxImageComponentMapping
                    sprintf "maxTimelineSemaphoreValueDifference = %A" x.maxTimelineSemaphoreValueDifference
                    sprintf "framebufferIntegerColorSampleCounts = %A" x.framebufferIntegerColorSampleCounts
                ] |> sprintf "VkPhysicalDeviceVulkan12Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkanMemoryModelFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vulkanMemoryModel : VkBool32
            val mutable public vulkanMemoryModelDeviceScope : VkBool32
            val mutable public vulkanMemoryModelAvailabilityVisibilityChains : VkBool32

            new(pNext: nativeint, vulkanMemoryModel: VkBool32, vulkanMemoryModelDeviceScope: VkBool32, vulkanMemoryModelAvailabilityVisibilityChains: VkBool32) =
                {
                    sType = 1000211000u
                    pNext = pNext
                    vulkanMemoryModel = vulkanMemoryModel
                    vulkanMemoryModelDeviceScope = vulkanMemoryModelDeviceScope
                    vulkanMemoryModelAvailabilityVisibilityChains = vulkanMemoryModelAvailabilityVisibilityChains
                }

            new(vulkanMemoryModel: VkBool32, vulkanMemoryModelDeviceScope: VkBool32, vulkanMemoryModelAvailabilityVisibilityChains: VkBool32) =
                VkPhysicalDeviceVulkanMemoryModelFeatures(Unchecked.defaultof<nativeint>, vulkanMemoryModel, vulkanMemoryModelDeviceScope, vulkanMemoryModelAvailabilityVisibilityChains)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vulkanMemoryModel = Unchecked.defaultof<VkBool32> && x.vulkanMemoryModelDeviceScope = Unchecked.defaultof<VkBool32> && x.vulkanMemoryModelAvailabilityVisibilityChains = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVulkanMemoryModelFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "vulkanMemoryModel = %A" x.vulkanMemoryModel
                    sprintf "vulkanMemoryModelDeviceScope = %A" x.vulkanMemoryModelDeviceScope
                    sprintf "vulkanMemoryModelAvailabilityVisibilityChains = %A" x.vulkanMemoryModelAvailabilityVisibilityChains
                ] |> sprintf "VkPhysicalDeviceVulkanMemoryModelFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassAttachmentBeginInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public attachmentCount : uint32
            val mutable public pAttachments : nativeptr<VkImageView>

            new(pNext: nativeint, attachmentCount: uint32, pAttachments: nativeptr<VkImageView>) =
                {
                    sType = 1000108003u
                    pNext = pNext
                    attachmentCount = attachmentCount
                    pAttachments = pAttachments
                }

            new(attachmentCount: uint32, pAttachments: nativeptr<VkImageView>) =
                VkRenderPassAttachmentBeginInfo(Unchecked.defaultof<nativeint>, attachmentCount, pAttachments)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.attachmentCount = Unchecked.defaultof<uint32> && x.pAttachments = Unchecked.defaultof<nativeptr<VkImageView>>

            static member Empty =
                VkRenderPassAttachmentBeginInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageView>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "attachmentCount = %A" x.attachmentCount
                    sprintf "pAttachments = %A" x.pAttachments
                ] |> sprintf "VkRenderPassAttachmentBeginInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassDescription2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkSubpassDescriptionFlags
            val mutable public pipelineBindPoint : VkPipelineBindPoint
            val mutable public viewMask : uint32
            val mutable public inputAttachmentCount : uint32
            val mutable public pInputAttachments : nativeptr<VkAttachmentReference2>
            val mutable public colorAttachmentCount : uint32
            val mutable public pColorAttachments : nativeptr<VkAttachmentReference2>
            val mutable public pResolveAttachments : nativeptr<VkAttachmentReference2>
            val mutable public pDepthStencilAttachment : nativeptr<VkAttachmentReference2>
            val mutable public preserveAttachmentCount : uint32
            val mutable public pPreserveAttachments : nativeptr<uint32>

            new(pNext: nativeint, flags: VkSubpassDescriptionFlags, pipelineBindPoint: VkPipelineBindPoint, viewMask: uint32, inputAttachmentCount: uint32, pInputAttachments: nativeptr<VkAttachmentReference2>, colorAttachmentCount: uint32, pColorAttachments: nativeptr<VkAttachmentReference2>, pResolveAttachments: nativeptr<VkAttachmentReference2>, pDepthStencilAttachment: nativeptr<VkAttachmentReference2>, preserveAttachmentCount: uint32, pPreserveAttachments: nativeptr<uint32>) =
                {
                    sType = 1000109002u
                    pNext = pNext
                    flags = flags
                    pipelineBindPoint = pipelineBindPoint
                    viewMask = viewMask
                    inputAttachmentCount = inputAttachmentCount
                    pInputAttachments = pInputAttachments
                    colorAttachmentCount = colorAttachmentCount
                    pColorAttachments = pColorAttachments
                    pResolveAttachments = pResolveAttachments
                    pDepthStencilAttachment = pDepthStencilAttachment
                    preserveAttachmentCount = preserveAttachmentCount
                    pPreserveAttachments = pPreserveAttachments
                }

            new(flags: VkSubpassDescriptionFlags, pipelineBindPoint: VkPipelineBindPoint, viewMask: uint32, inputAttachmentCount: uint32, pInputAttachments: nativeptr<VkAttachmentReference2>, colorAttachmentCount: uint32, pColorAttachments: nativeptr<VkAttachmentReference2>, pResolveAttachments: nativeptr<VkAttachmentReference2>, pDepthStencilAttachment: nativeptr<VkAttachmentReference2>, preserveAttachmentCount: uint32, pPreserveAttachments: nativeptr<uint32>) =
                VkSubpassDescription2(Unchecked.defaultof<nativeint>, flags, pipelineBindPoint, viewMask, inputAttachmentCount, pInputAttachments, colorAttachmentCount, pColorAttachments, pResolveAttachments, pDepthStencilAttachment, preserveAttachmentCount, pPreserveAttachments)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkSubpassDescriptionFlags> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.viewMask = Unchecked.defaultof<uint32> && x.inputAttachmentCount = Unchecked.defaultof<uint32> && x.pInputAttachments = Unchecked.defaultof<nativeptr<VkAttachmentReference2>> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachments = Unchecked.defaultof<nativeptr<VkAttachmentReference2>> && x.pResolveAttachments = Unchecked.defaultof<nativeptr<VkAttachmentReference2>> && x.pDepthStencilAttachment = Unchecked.defaultof<nativeptr<VkAttachmentReference2>> && x.preserveAttachmentCount = Unchecked.defaultof<uint32> && x.pPreserveAttachments = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkSubpassDescription2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSubpassDescriptionFlags>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentReference2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentReference2>>, Unchecked.defaultof<nativeptr<VkAttachmentReference2>>, Unchecked.defaultof<nativeptr<VkAttachmentReference2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                    sprintf "viewMask = %A" x.viewMask
                    sprintf "inputAttachmentCount = %A" x.inputAttachmentCount
                    sprintf "pInputAttachments = %A" x.pInputAttachments
                    sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                    sprintf "pColorAttachments = %A" x.pColorAttachments
                    sprintf "pResolveAttachments = %A" x.pResolveAttachments
                    sprintf "pDepthStencilAttachment = %A" x.pDepthStencilAttachment
                    sprintf "preserveAttachmentCount = %A" x.preserveAttachmentCount
                    sprintf "pPreserveAttachments = %A" x.pPreserveAttachments
                ] |> sprintf "VkSubpassDescription2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassDependency2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcSubpass : uint32
            val mutable public dstSubpass : uint32
            val mutable public srcStageMask : VkPipelineStageFlags
            val mutable public dstStageMask : VkPipelineStageFlags
            val mutable public srcAccessMask : VkAccessFlags
            val mutable public dstAccessMask : VkAccessFlags
            val mutable public dependencyFlags : VkDependencyFlags
            val mutable public viewOffset : int32

            new(pNext: nativeint, srcSubpass: uint32, dstSubpass: uint32, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags, dependencyFlags: VkDependencyFlags, viewOffset: int32) =
                {
                    sType = 1000109003u
                    pNext = pNext
                    srcSubpass = srcSubpass
                    dstSubpass = dstSubpass
                    srcStageMask = srcStageMask
                    dstStageMask = dstStageMask
                    srcAccessMask = srcAccessMask
                    dstAccessMask = dstAccessMask
                    dependencyFlags = dependencyFlags
                    viewOffset = viewOffset
                }

            new(srcSubpass: uint32, dstSubpass: uint32, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags, dependencyFlags: VkDependencyFlags, viewOffset: int32) =
                VkSubpassDependency2(Unchecked.defaultof<nativeint>, srcSubpass, dstSubpass, srcStageMask, dstStageMask, srcAccessMask, dstAccessMask, dependencyFlags, viewOffset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcSubpass = Unchecked.defaultof<uint32> && x.dstSubpass = Unchecked.defaultof<uint32> && x.srcStageMask = Unchecked.defaultof<VkPipelineStageFlags> && x.dstStageMask = Unchecked.defaultof<VkPipelineStageFlags> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dependencyFlags = Unchecked.defaultof<VkDependencyFlags> && x.viewOffset = Unchecked.defaultof<int32>

            static member Empty =
                VkSubpassDependency2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPipelineStageFlags>, Unchecked.defaultof<VkPipelineStageFlags>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkDependencyFlags>, Unchecked.defaultof<int32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcSubpass = %A" x.srcSubpass
                    sprintf "dstSubpass = %A" x.dstSubpass
                    sprintf "srcStageMask = %A" x.srcStageMask
                    sprintf "dstStageMask = %A" x.dstStageMask
                    sprintf "srcAccessMask = %A" x.srcAccessMask
                    sprintf "dstAccessMask = %A" x.dstAccessMask
                    sprintf "dependencyFlags = %A" x.dependencyFlags
                    sprintf "viewOffset = %A" x.viewOffset
                ] |> sprintf "VkSubpassDependency2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassCreateInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkRenderPassCreateFlags
            val mutable public attachmentCount : uint32
            val mutable public pAttachments : nativeptr<VkAttachmentDescription2>
            val mutable public subpassCount : uint32
            val mutable public pSubpasses : nativeptr<VkSubpassDescription2>
            val mutable public dependencyCount : uint32
            val mutable public pDependencies : nativeptr<VkSubpassDependency2>
            val mutable public correlatedViewMaskCount : uint32
            val mutable public pCorrelatedViewMasks : nativeptr<uint32>

            new(pNext: nativeint, flags: VkRenderPassCreateFlags, attachmentCount: uint32, pAttachments: nativeptr<VkAttachmentDescription2>, subpassCount: uint32, pSubpasses: nativeptr<VkSubpassDescription2>, dependencyCount: uint32, pDependencies: nativeptr<VkSubpassDependency2>, correlatedViewMaskCount: uint32, pCorrelatedViewMasks: nativeptr<uint32>) =
                {
                    sType = 1000109004u
                    pNext = pNext
                    flags = flags
                    attachmentCount = attachmentCount
                    pAttachments = pAttachments
                    subpassCount = subpassCount
                    pSubpasses = pSubpasses
                    dependencyCount = dependencyCount
                    pDependencies = pDependencies
                    correlatedViewMaskCount = correlatedViewMaskCount
                    pCorrelatedViewMasks = pCorrelatedViewMasks
                }

            new(flags: VkRenderPassCreateFlags, attachmentCount: uint32, pAttachments: nativeptr<VkAttachmentDescription2>, subpassCount: uint32, pSubpasses: nativeptr<VkSubpassDescription2>, dependencyCount: uint32, pDependencies: nativeptr<VkSubpassDependency2>, correlatedViewMaskCount: uint32, pCorrelatedViewMasks: nativeptr<uint32>) =
                VkRenderPassCreateInfo2(Unchecked.defaultof<nativeint>, flags, attachmentCount, pAttachments, subpassCount, pSubpasses, dependencyCount, pDependencies, correlatedViewMaskCount, pCorrelatedViewMasks)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkRenderPassCreateFlags> && x.attachmentCount = Unchecked.defaultof<uint32> && x.pAttachments = Unchecked.defaultof<nativeptr<VkAttachmentDescription2>> && x.subpassCount = Unchecked.defaultof<uint32> && x.pSubpasses = Unchecked.defaultof<nativeptr<VkSubpassDescription2>> && x.dependencyCount = Unchecked.defaultof<uint32> && x.pDependencies = Unchecked.defaultof<nativeptr<VkSubpassDependency2>> && x.correlatedViewMaskCount = Unchecked.defaultof<uint32> && x.pCorrelatedViewMasks = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkRenderPassCreateInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderPassCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentDescription2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSubpassDescription2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSubpassDependency2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "attachmentCount = %A" x.attachmentCount
                    sprintf "pAttachments = %A" x.pAttachments
                    sprintf "subpassCount = %A" x.subpassCount
                    sprintf "pSubpasses = %A" x.pSubpasses
                    sprintf "dependencyCount = %A" x.dependencyCount
                    sprintf "pDependencies = %A" x.pDependencies
                    sprintf "correlatedViewMaskCount = %A" x.correlatedViewMaskCount
                    sprintf "pCorrelatedViewMasks = %A" x.pCorrelatedViewMasks
                ] |> sprintf "VkRenderPassCreateInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSamplerReductionModeCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public reductionMode : VkSamplerReductionMode

            new(pNext: nativeint, reductionMode: VkSamplerReductionMode) =
                {
                    sType = 1000130001u
                    pNext = pNext
                    reductionMode = reductionMode
                }

            new(reductionMode: VkSamplerReductionMode) =
                VkSamplerReductionModeCreateInfo(Unchecked.defaultof<nativeint>, reductionMode)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.reductionMode = Unchecked.defaultof<VkSamplerReductionMode>

            static member Empty =
                VkSamplerReductionModeCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSamplerReductionMode>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "reductionMode = %A" x.reductionMode
                ] |> sprintf "VkSamplerReductionModeCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSemaphoreSignalInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphore : VkSemaphore
            val mutable public value : uint64

            new(pNext: nativeint, semaphore: VkSemaphore, value: uint64) =
                {
                    sType = 1000207005u
                    pNext = pNext
                    semaphore = semaphore
                    value = value
                }

            new(semaphore: VkSemaphore, value: uint64) =
                VkSemaphoreSignalInfo(Unchecked.defaultof<nativeint>, semaphore, value)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.value = Unchecked.defaultof<uint64>

            static member Empty =
                VkSemaphoreSignalInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphore = %A" x.semaphore
                    sprintf "value = %A" x.value
                ] |> sprintf "VkSemaphoreSignalInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSemaphoreTypeCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphoreType : VkSemaphoreType
            val mutable public initialValue : uint64

            new(pNext: nativeint, semaphoreType: VkSemaphoreType, initialValue: uint64) =
                {
                    sType = 1000207002u
                    pNext = pNext
                    semaphoreType = semaphoreType
                    initialValue = initialValue
                }

            new(semaphoreType: VkSemaphoreType, initialValue: uint64) =
                VkSemaphoreTypeCreateInfo(Unchecked.defaultof<nativeint>, semaphoreType, initialValue)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphoreType = Unchecked.defaultof<VkSemaphoreType> && x.initialValue = Unchecked.defaultof<uint64>

            static member Empty =
                VkSemaphoreTypeCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphoreType>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphoreType = %A" x.semaphoreType
                    sprintf "initialValue = %A" x.initialValue
                ] |> sprintf "VkSemaphoreTypeCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSemaphoreWaitInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkSemaphoreWaitFlags
            val mutable public semaphoreCount : uint32
            val mutable public pSemaphores : nativeptr<VkSemaphore>
            val mutable public pValues : nativeptr<uint64>

            new(pNext: nativeint, flags: VkSemaphoreWaitFlags, semaphoreCount: uint32, pSemaphores: nativeptr<VkSemaphore>, pValues: nativeptr<uint64>) =
                {
                    sType = 1000207004u
                    pNext = pNext
                    flags = flags
                    semaphoreCount = semaphoreCount
                    pSemaphores = pSemaphores
                    pValues = pValues
                }

            new(flags: VkSemaphoreWaitFlags, semaphoreCount: uint32, pSemaphores: nativeptr<VkSemaphore>, pValues: nativeptr<uint64>) =
                VkSemaphoreWaitInfo(Unchecked.defaultof<nativeint>, flags, semaphoreCount, pSemaphores, pValues)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkSemaphoreWaitFlags> && x.semaphoreCount = Unchecked.defaultof<uint32> && x.pSemaphores = Unchecked.defaultof<nativeptr<VkSemaphore>> && x.pValues = Unchecked.defaultof<nativeptr<uint64>>

            static member Empty =
                VkSemaphoreWaitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphoreWaitFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphore>>, Unchecked.defaultof<nativeptr<uint64>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "semaphoreCount = %A" x.semaphoreCount
                    sprintf "pSemaphores = %A" x.pSemaphores
                    sprintf "pValues = %A" x.pValues
                ] |> sprintf "VkSemaphoreWaitInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassBeginInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public contents : VkSubpassContents

            new(pNext: nativeint, contents: VkSubpassContents) =
                {
                    sType = 1000109005u
                    pNext = pNext
                    contents = contents
                }

            new(contents: VkSubpassContents) =
                VkSubpassBeginInfo(Unchecked.defaultof<nativeint>, contents)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.contents = Unchecked.defaultof<VkSubpassContents>

            static member Empty =
                VkSubpassBeginInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSubpassContents>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "contents = %A" x.contents
                ] |> sprintf "VkSubpassBeginInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassDescriptionDepthStencilResolve =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public depthResolveMode : VkResolveModeFlags
            val mutable public stencilResolveMode : VkResolveModeFlags
            val mutable public pDepthStencilResolveAttachment : nativeptr<VkAttachmentReference2>

            new(pNext: nativeint, depthResolveMode: VkResolveModeFlags, stencilResolveMode: VkResolveModeFlags, pDepthStencilResolveAttachment: nativeptr<VkAttachmentReference2>) =
                {
                    sType = 1000199001u
                    pNext = pNext
                    depthResolveMode = depthResolveMode
                    stencilResolveMode = stencilResolveMode
                    pDepthStencilResolveAttachment = pDepthStencilResolveAttachment
                }

            new(depthResolveMode: VkResolveModeFlags, stencilResolveMode: VkResolveModeFlags, pDepthStencilResolveAttachment: nativeptr<VkAttachmentReference2>) =
                VkSubpassDescriptionDepthStencilResolve(Unchecked.defaultof<nativeint>, depthResolveMode, stencilResolveMode, pDepthStencilResolveAttachment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.depthResolveMode = Unchecked.defaultof<VkResolveModeFlags> && x.stencilResolveMode = Unchecked.defaultof<VkResolveModeFlags> && x.pDepthStencilResolveAttachment = Unchecked.defaultof<nativeptr<VkAttachmentReference2>>

            static member Empty =
                VkSubpassDescriptionDepthStencilResolve(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<nativeptr<VkAttachmentReference2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "depthResolveMode = %A" x.depthResolveMode
                    sprintf "stencilResolveMode = %A" x.stencilResolveMode
                    sprintf "pDepthStencilResolveAttachment = %A" x.pDepthStencilResolveAttachment
                ] |> sprintf "VkSubpassDescriptionDepthStencilResolve { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassEndInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint

            new(pNext: nativeint) =
                {
                    sType = 1000109006u
                    pNext = pNext
                }

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint>

            static member Empty =
                VkSubpassEndInfo(Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                ] |> sprintf "VkSubpassEndInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkTimelineSemaphoreSubmitInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public waitSemaphoreValueCount : uint32
            val mutable public pWaitSemaphoreValues : nativeptr<uint64>
            val mutable public signalSemaphoreValueCount : uint32
            val mutable public pSignalSemaphoreValues : nativeptr<uint64>

            new(pNext: nativeint, waitSemaphoreValueCount: uint32, pWaitSemaphoreValues: nativeptr<uint64>, signalSemaphoreValueCount: uint32, pSignalSemaphoreValues: nativeptr<uint64>) =
                {
                    sType = 1000207003u
                    pNext = pNext
                    waitSemaphoreValueCount = waitSemaphoreValueCount
                    pWaitSemaphoreValues = pWaitSemaphoreValues
                    signalSemaphoreValueCount = signalSemaphoreValueCount
                    pSignalSemaphoreValues = pSignalSemaphoreValues
                }

            new(waitSemaphoreValueCount: uint32, pWaitSemaphoreValues: nativeptr<uint64>, signalSemaphoreValueCount: uint32, pSignalSemaphoreValues: nativeptr<uint64>) =
                VkTimelineSemaphoreSubmitInfo(Unchecked.defaultof<nativeint>, waitSemaphoreValueCount, pWaitSemaphoreValues, signalSemaphoreValueCount, pSignalSemaphoreValues)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.waitSemaphoreValueCount = Unchecked.defaultof<uint32> && x.pWaitSemaphoreValues = Unchecked.defaultof<nativeptr<uint64>> && x.signalSemaphoreValueCount = Unchecked.defaultof<uint32> && x.pSignalSemaphoreValues = Unchecked.defaultof<nativeptr<uint64>>

            static member Empty =
                VkTimelineSemaphoreSubmitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint64>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint64>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "waitSemaphoreValueCount = %A" x.waitSemaphoreValueCount
                    sprintf "pWaitSemaphoreValues = %A" x.pWaitSemaphoreValues
                    sprintf "signalSemaphoreValueCount = %A" x.signalSemaphoreValueCount
                    sprintf "pSignalSemaphoreValues = %A" x.pSignalSemaphoreValues
                ] |> sprintf "VkTimelineSemaphoreSubmitInfo { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkBufferCreateFlags with
              static member inline DeviceAddressCaptureReplayBit = enum<VkBufferCreateFlags> 0x00000010
         type VkBufferUsageFlags with
              static member inline ShaderDeviceAddressBit = enum<VkBufferUsageFlags> 0x00020000
         type VkDescriptorPoolCreateFlags with
              static member inline UpdateAfterBindBit = enum<VkDescriptorPoolCreateFlags> 0x00000002
         type VkDescriptorSetLayoutCreateFlags with
              static member inline UpdateAfterBindPoolBit = enum<VkDescriptorSetLayoutCreateFlags> 0x00000002
         type VkFormatFeatureFlags with
              /// Format can be used with min/max reduction filtering
              static member inline SampledImageFilterMinmaxBit = enum<VkFormatFeatureFlags> 0x00010000
         type VkFramebufferCreateFlags with
              static member inline ImagelessBit = enum<VkFramebufferCreateFlags> 0x00000001
         type VkImageLayout with
              static member inline DepthAttachmentOptimal = enum<VkImageLayout> 1000241000
              static member inline DepthReadOnlyOptimal = enum<VkImageLayout> 1000241001
              static member inline StencilAttachmentOptimal = enum<VkImageLayout> 1000241002
              static member inline StencilReadOnlyOptimal = enum<VkImageLayout> 1000241003
         type Vulkan11.VkMemoryAllocateFlags with
              static member inline DeviceAddressBit = enum<Vulkan11.VkMemoryAllocateFlags> 0x00000002
              static member inline DeviceAddressCaptureReplayBit = enum<Vulkan11.VkMemoryAllocateFlags> 0x00000004
         type VkResult with
              static member inline ErrorFragmentation = enum<VkResult> -1000161000
              static member inline ErrorInvalidOpaqueCaptureAddress = enum<VkResult> -1000257000
         type VkSamplerAddressMode with
              /// No need to add an extnumber attribute, since this uses a core enum value
              static member inline MirrorClampToEdge = enum<VkSamplerAddressMode> 4

    module VkRaw =
        open VkRaw

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64* pValue)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkWaitSemaphores(VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, uint64 timeout)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkSignalSemaphore(VkDevice device, VkSemaphoreSignalInfo* pSignalInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, VkBufferDeviceAddressInfo* pInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern uint64 vkGetBufferOpaqueCaptureAddress(VkDevice device, VkBufferDeviceAddressInfo* pInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern uint64 vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)



module Vulkan13 =

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPrivateDataSlot =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkPrivateDataSlot(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<Flags>]
    type VkPipelineCreationFeedbackFlags =
        | All = 7
        | None = 0
        | ValidBit = 0x00000001
        | ApplicationPipelineCacheHitBit = 0x00000002
        | BasePipelineAccelerationBit = 0x00000004

    [<Flags>]
    type VkToolPurposeFlags =
        | All = 31
        | None = 0
        | ValidationBit = 0x00000001
        | ProfilingBit = 0x00000002
        | TracingBit = 0x00000004
        | AdditionalFeaturesBit = 0x00000008
        | ModifyingFeaturesBit = 0x00000010

    [<Flags>]
    type VkPrivateDataSlotCreateFlags =
        | All = 0
        | None = 0

    [<Flags>]
    type VkPipelineStageFlags2 =
        | All = 131071
        | PipelineStage2None = 0
        | PipelineStage2TopOfPipeBit = 0x00000001
        | PipelineStage2DrawIndirectBit = 0x00000002
        | PipelineStage2VertexInputBit = 0x00000004
        | PipelineStage2VertexShaderBit = 0x00000008
        | PipelineStage2TessellationControlShaderBit = 0x00000010
        | PipelineStage2TessellationEvaluationShaderBit = 0x00000020
        | PipelineStage2GeometryShaderBit = 0x00000040
        | PipelineStage2FragmentShaderBit = 0x00000080
        | PipelineStage2EarlyFragmentTestsBit = 0x00000100
        | PipelineStage2LateFragmentTestsBit = 0x00000200
        | PipelineStage2ColorAttachmentOutputBit = 0x00000400
        | PipelineStage2ComputeShaderBit = 0x00000800
        | PipelineStage2AllTransferBit = 0x00001000
        | PipelineStage2TransferBit = 0x00001000
        | PipelineStage2BottomOfPipeBit = 0x00002000
        | PipelineStage2HostBit = 0x00004000
        | PipelineStage2AllGraphicsBit = 0x00008000
        | PipelineStage2AllCommandsBit = 0x00010000
        | PipelineStage2CopyBit = 0x00000001
        | PipelineStage2ResolveBit = 0x00000002
        | PipelineStage2BlitBit = 0x00000004
        | PipelineStage2ClearBit = 0x00000008
        | PipelineStage2IndexInputBit = 0x00000010
        | PipelineStage2VertexAttributeInputBit = 0x00000020
        | PipelineStage2PreRasterizationShadersBit = 0x00000040

    [<Flags>]
    type VkAccessFlags2 =
        | All = 131071
        | Access2None = 0
        | Access2IndirectCommandReadBit = 0x00000001
        | Access2IndexReadBit = 0x00000002
        | Access2VertexAttributeReadBit = 0x00000004
        | Access2UniformReadBit = 0x00000008
        | Access2InputAttachmentReadBit = 0x00000010
        | Access2ShaderReadBit = 0x00000020
        | Access2ShaderWriteBit = 0x00000040
        | Access2ColorAttachmentReadBit = 0x00000080
        | Access2ColorAttachmentWriteBit = 0x00000100
        | Access2DepthStencilAttachmentReadBit = 0x00000200
        | Access2DepthStencilAttachmentWriteBit = 0x00000400
        | Access2TransferReadBit = 0x00000800
        | Access2TransferWriteBit = 0x00001000
        | Access2HostReadBit = 0x00002000
        | Access2HostWriteBit = 0x00004000
        | Access2MemoryReadBit = 0x00008000
        | Access2MemoryWriteBit = 0x00010000
        | Access2ShaderSampledReadBit = 0x00000001
        | Access2ShaderStorageReadBit = 0x00000002
        | Access2ShaderStorageWriteBit = 0x00000004

    [<Flags>]
    type VkSubmitFlags =
        | All = 1
        | None = 0
        | ProtectedBit = 0x00000001

    [<Flags>]
    type VkRenderingFlags =
        | All = 7
        | None = 0
        | ContentsSecondaryCommandBuffersBit = 0x00000001
        | SuspendingBit = 0x00000002
        | ResumingBit = 0x00000004

    [<Flags>]
    type VkFormatFeatureFlags2 =
        | All = -2130714625
        | None = 0
        | FormatFeature2SampledImageBit = 0x00000001
        | FormatFeature2StorageImageBit = 0x00000002
        | FormatFeature2StorageImageAtomicBit = 0x00000004
        | FormatFeature2UniformTexelBufferBit = 0x00000008
        | FormatFeature2StorageTexelBufferBit = 0x00000010
        | FormatFeature2StorageTexelBufferAtomicBit = 0x00000020
        | FormatFeature2VertexBufferBit = 0x00000040
        | FormatFeature2ColorAttachmentBit = 0x00000080
        | FormatFeature2ColorAttachmentBlendBit = 0x00000100
        | FormatFeature2DepthStencilAttachmentBit = 0x00000200
        | FormatFeature2BlitSrcBit = 0x00000400
        | FormatFeature2BlitDstBit = 0x00000800
        | FormatFeature2SampledImageFilterLinearBit = 0x00001000
        | FormatFeature2TransferSrcBit = 0x00004000
        | FormatFeature2TransferDstBit = 0x00008000
        | FormatFeature2SampledImageFilterMinmaxBit = 0x00010000
        | FormatFeature2MidpointChromaSamplesBit = 0x00020000
        | FormatFeature2SampledImageYcbcrConversionLinearFilterBit = 0x00040000
        | FormatFeature2SampledImageYcbcrConversionSeparateReconstructionFilterBit = 0x00080000
        | FormatFeature2SampledImageYcbcrConversionChromaReconstructionExplicitBit = 0x00100000
        | FormatFeature2SampledImageYcbcrConversionChromaReconstructionExplicitForceableBit = 0x00200000
        | FormatFeature2DisjointBit = 0x00400000
        | FormatFeature2CositedChromaSamplesBit = 0x00800000
        | FormatFeature2StorageReadWithoutFormatBit = 0x80000000
        | FormatFeature2StorageWriteWithoutFormatBit = 0x00000001
        | FormatFeature2SampledImageDepthComparisonBit = 0x00000002


    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageBlit2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcSubresource : VkImageSubresourceLayers
            val mutable public srcOffsets : VkOffset3D_2
            val mutable public dstSubresource : VkImageSubresourceLayers
            val mutable public dstOffsets : VkOffset3D_2

            new(pNext: nativeint, srcSubresource: VkImageSubresourceLayers, srcOffsets: VkOffset3D_2, dstSubresource: VkImageSubresourceLayers, dstOffsets: VkOffset3D_2) =
                {
                    sType = 1000337008u
                    pNext = pNext
                    srcSubresource = srcSubresource
                    srcOffsets = srcOffsets
                    dstSubresource = dstSubresource
                    dstOffsets = dstOffsets
                }

            new(srcSubresource: VkImageSubresourceLayers, srcOffsets: VkOffset3D_2, dstSubresource: VkImageSubresourceLayers, dstOffsets: VkOffset3D_2) =
                VkImageBlit2(Unchecked.defaultof<nativeint>, srcSubresource, srcOffsets, dstSubresource, dstOffsets)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.srcOffsets = Unchecked.defaultof<VkOffset3D_2> && x.dstSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.dstOffsets = Unchecked.defaultof<VkOffset3D_2>

            static member Empty =
                VkImageBlit2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D_2>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D_2>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcSubresource = %A" x.srcSubresource
                    sprintf "srcOffsets = %A" x.srcOffsets
                    sprintf "dstSubresource = %A" x.dstSubresource
                    sprintf "dstOffsets = %A" x.dstOffsets
                ] |> sprintf "VkImageBlit2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBlitImageInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcImage : VkImage
            val mutable public srcImageLayout : VkImageLayout
            val mutable public dstImage : VkImage
            val mutable public dstImageLayout : VkImageLayout
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkImageBlit2>
            val mutable public filter : VkFilter

            new(pNext: nativeint, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<VkImageBlit2>, filter: VkFilter) =
                {
                    sType = 1000337004u
                    pNext = pNext
                    srcImage = srcImage
                    srcImageLayout = srcImageLayout
                    dstImage = dstImage
                    dstImageLayout = dstImageLayout
                    regionCount = regionCount
                    pRegions = pRegions
                    filter = filter
                }

            new(srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<VkImageBlit2>, filter: VkFilter) =
                VkBlitImageInfo2(Unchecked.defaultof<nativeint>, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcImage = Unchecked.defaultof<VkImage> && x.srcImageLayout = Unchecked.defaultof<VkImageLayout> && x.dstImage = Unchecked.defaultof<VkImage> && x.dstImageLayout = Unchecked.defaultof<VkImageLayout> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkImageBlit2>> && x.filter = Unchecked.defaultof<VkFilter>

            static member Empty =
                VkBlitImageInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageBlit2>>, Unchecked.defaultof<VkFilter>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcImage = %A" x.srcImage
                    sprintf "srcImageLayout = %A" x.srcImageLayout
                    sprintf "dstImage = %A" x.dstImage
                    sprintf "dstImageLayout = %A" x.dstImageLayout
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                    sprintf "filter = %A" x.filter
                ] |> sprintf "VkBlitImageInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferCopy2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcOffset : VkDeviceSize
            val mutable public dstOffset : VkDeviceSize
            val mutable public size : VkDeviceSize

            new(pNext: nativeint, srcOffset: VkDeviceSize, dstOffset: VkDeviceSize, size: VkDeviceSize) =
                {
                    sType = 1000337006u
                    pNext = pNext
                    srcOffset = srcOffset
                    dstOffset = dstOffset
                    size = size
                }

            new(srcOffset: VkDeviceSize, dstOffset: VkDeviceSize, size: VkDeviceSize) =
                VkBufferCopy2(Unchecked.defaultof<nativeint>, srcOffset, dstOffset, size)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcOffset = Unchecked.defaultof<VkDeviceSize> && x.dstOffset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkBufferCopy2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcOffset = %A" x.srcOffset
                    sprintf "dstOffset = %A" x.dstOffset
                    sprintf "size = %A" x.size
                ] |> sprintf "VkBufferCopy2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferImageCopy2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public bufferOffset : VkDeviceSize
            val mutable public bufferRowLength : uint32
            val mutable public bufferImageHeight : uint32
            val mutable public imageSubresource : VkImageSubresourceLayers
            val mutable public imageOffset : VkOffset3D
            val mutable public imageExtent : VkExtent3D

            new(pNext: nativeint, bufferOffset: VkDeviceSize, bufferRowLength: uint32, bufferImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D) =
                {
                    sType = 1000337009u
                    pNext = pNext
                    bufferOffset = bufferOffset
                    bufferRowLength = bufferRowLength
                    bufferImageHeight = bufferImageHeight
                    imageSubresource = imageSubresource
                    imageOffset = imageOffset
                    imageExtent = imageExtent
                }

            new(bufferOffset: VkDeviceSize, bufferRowLength: uint32, bufferImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D) =
                VkBufferImageCopy2(Unchecked.defaultof<nativeint>, bufferOffset, bufferRowLength, bufferImageHeight, imageSubresource, imageOffset, imageExtent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.bufferOffset = Unchecked.defaultof<VkDeviceSize> && x.bufferRowLength = Unchecked.defaultof<uint32> && x.bufferImageHeight = Unchecked.defaultof<uint32> && x.imageSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.imageOffset = Unchecked.defaultof<VkOffset3D> && x.imageExtent = Unchecked.defaultof<VkExtent3D>

            static member Empty =
                VkBufferImageCopy2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "bufferOffset = %A" x.bufferOffset
                    sprintf "bufferRowLength = %A" x.bufferRowLength
                    sprintf "bufferImageHeight = %A" x.bufferImageHeight
                    sprintf "imageSubresource = %A" x.imageSubresource
                    sprintf "imageOffset = %A" x.imageOffset
                    sprintf "imageExtent = %A" x.imageExtent
                ] |> sprintf "VkBufferImageCopy2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferMemoryBarrier2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcStageMask : VkPipelineStageFlags2
            val mutable public srcAccessMask : VkAccessFlags2
            val mutable public dstStageMask : VkPipelineStageFlags2
            val mutable public dstAccessMask : VkAccessFlags2
            val mutable public srcQueueFamilyIndex : uint32
            val mutable public dstQueueFamilyIndex : uint32
            val mutable public buffer : VkBuffer
            val mutable public offset : VkDeviceSize
            val mutable public size : VkDeviceSize

            new(pNext: nativeint, srcStageMask: VkPipelineStageFlags2, srcAccessMask: VkAccessFlags2, dstStageMask: VkPipelineStageFlags2, dstAccessMask: VkAccessFlags2, srcQueueFamilyIndex: uint32, dstQueueFamilyIndex: uint32, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize) =
                {
                    sType = 1000314001u
                    pNext = pNext
                    srcStageMask = srcStageMask
                    srcAccessMask = srcAccessMask
                    dstStageMask = dstStageMask
                    dstAccessMask = dstAccessMask
                    srcQueueFamilyIndex = srcQueueFamilyIndex
                    dstQueueFamilyIndex = dstQueueFamilyIndex
                    buffer = buffer
                    offset = offset
                    size = size
                }

            new(srcStageMask: VkPipelineStageFlags2, srcAccessMask: VkAccessFlags2, dstStageMask: VkPipelineStageFlags2, dstAccessMask: VkAccessFlags2, srcQueueFamilyIndex: uint32, dstQueueFamilyIndex: uint32, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize) =
                VkBufferMemoryBarrier2(Unchecked.defaultof<nativeint>, srcStageMask, srcAccessMask, dstStageMask, dstAccessMask, srcQueueFamilyIndex, dstQueueFamilyIndex, buffer, offset, size)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcStageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags2> && x.dstStageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags2> && x.srcQueueFamilyIndex = Unchecked.defaultof<uint32> && x.dstQueueFamilyIndex = Unchecked.defaultof<uint32> && x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkBufferMemoryBarrier2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<VkAccessFlags2>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<VkAccessFlags2>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcStageMask = %A" x.srcStageMask
                    sprintf "srcAccessMask = %A" x.srcAccessMask
                    sprintf "dstStageMask = %A" x.dstStageMask
                    sprintf "dstAccessMask = %A" x.dstAccessMask
                    sprintf "srcQueueFamilyIndex = %A" x.srcQueueFamilyIndex
                    sprintf "dstQueueFamilyIndex = %A" x.dstQueueFamilyIndex
                    sprintf "buffer = %A" x.buffer
                    sprintf "offset = %A" x.offset
                    sprintf "size = %A" x.size
                ] |> sprintf "VkBufferMemoryBarrier2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCommandBufferInheritanceRenderingInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkRenderingFlags
            val mutable public viewMask : uint32
            val mutable public colorAttachmentCount : uint32
            val mutable public pColorAttachmentFormats : nativeptr<VkFormat>
            val mutable public depthAttachmentFormat : VkFormat
            val mutable public stencilAttachmentFormat : VkFormat
            val mutable public rasterizationSamples : VkSampleCountFlags

            new(pNext: nativeint, flags: VkRenderingFlags, viewMask: uint32, colorAttachmentCount: uint32, pColorAttachmentFormats: nativeptr<VkFormat>, depthAttachmentFormat: VkFormat, stencilAttachmentFormat: VkFormat, rasterizationSamples: VkSampleCountFlags) =
                {
                    sType = 1000044004u
                    pNext = pNext
                    flags = flags
                    viewMask = viewMask
                    colorAttachmentCount = colorAttachmentCount
                    pColorAttachmentFormats = pColorAttachmentFormats
                    depthAttachmentFormat = depthAttachmentFormat
                    stencilAttachmentFormat = stencilAttachmentFormat
                    rasterizationSamples = rasterizationSamples
                }

            new(flags: VkRenderingFlags, viewMask: uint32, colorAttachmentCount: uint32, pColorAttachmentFormats: nativeptr<VkFormat>, depthAttachmentFormat: VkFormat, stencilAttachmentFormat: VkFormat, rasterizationSamples: VkSampleCountFlags) =
                VkCommandBufferInheritanceRenderingInfo(Unchecked.defaultof<nativeint>, flags, viewMask, colorAttachmentCount, pColorAttachmentFormats, depthAttachmentFormat, stencilAttachmentFormat, rasterizationSamples)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkRenderingFlags> && x.viewMask = Unchecked.defaultof<uint32> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachmentFormats = Unchecked.defaultof<nativeptr<VkFormat>> && x.depthAttachmentFormat = Unchecked.defaultof<VkFormat> && x.stencilAttachmentFormat = Unchecked.defaultof<VkFormat> && x.rasterizationSamples = Unchecked.defaultof<VkSampleCountFlags>

            static member Empty =
                VkCommandBufferInheritanceRenderingInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderingFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkFormat>>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkSampleCountFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "viewMask = %A" x.viewMask
                    sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                    sprintf "pColorAttachmentFormats = %A" x.pColorAttachmentFormats
                    sprintf "depthAttachmentFormat = %A" x.depthAttachmentFormat
                    sprintf "stencilAttachmentFormat = %A" x.stencilAttachmentFormat
                    sprintf "rasterizationSamples = %A" x.rasterizationSamples
                ] |> sprintf "VkCommandBufferInheritanceRenderingInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCommandBufferSubmitInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public commandBuffer : VkCommandBuffer
            val mutable public deviceMask : uint32

            new(pNext: nativeint, commandBuffer: VkCommandBuffer, deviceMask: uint32) =
                {
                    sType = 1000314006u
                    pNext = pNext
                    commandBuffer = commandBuffer
                    deviceMask = deviceMask
                }

            new(commandBuffer: VkCommandBuffer, deviceMask: uint32) =
                VkCommandBufferSubmitInfo(Unchecked.defaultof<nativeint>, commandBuffer, deviceMask)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.commandBuffer = Unchecked.defaultof<VkCommandBuffer> && x.deviceMask = Unchecked.defaultof<uint32>

            static member Empty =
                VkCommandBufferSubmitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCommandBuffer>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "commandBuffer = %A" x.commandBuffer
                    sprintf "deviceMask = %A" x.deviceMask
                ] |> sprintf "VkCommandBufferSubmitInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyBufferInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcBuffer : VkBuffer
            val mutable public dstBuffer : VkBuffer
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkBufferCopy2>

            new(pNext: nativeint, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: uint32, pRegions: nativeptr<VkBufferCopy2>) =
                {
                    sType = 1000337000u
                    pNext = pNext
                    srcBuffer = srcBuffer
                    dstBuffer = dstBuffer
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: uint32, pRegions: nativeptr<VkBufferCopy2>) =
                VkCopyBufferInfo2(Unchecked.defaultof<nativeint>, srcBuffer, dstBuffer, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcBuffer = Unchecked.defaultof<VkBuffer> && x.dstBuffer = Unchecked.defaultof<VkBuffer> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkBufferCopy2>>

            static member Empty =
                VkCopyBufferInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBufferCopy2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcBuffer = %A" x.srcBuffer
                    sprintf "dstBuffer = %A" x.dstBuffer
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkCopyBufferInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyBufferToImageInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcBuffer : VkBuffer
            val mutable public dstImage : VkImage
            val mutable public dstImageLayout : VkImageLayout
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkBufferImageCopy2>

            new(pNext: nativeint, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<VkBufferImageCopy2>) =
                {
                    sType = 1000337002u
                    pNext = pNext
                    srcBuffer = srcBuffer
                    dstImage = dstImage
                    dstImageLayout = dstImageLayout
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<VkBufferImageCopy2>) =
                VkCopyBufferToImageInfo2(Unchecked.defaultof<nativeint>, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcBuffer = Unchecked.defaultof<VkBuffer> && x.dstImage = Unchecked.defaultof<VkImage> && x.dstImageLayout = Unchecked.defaultof<VkImageLayout> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkBufferImageCopy2>>

            static member Empty =
                VkCopyBufferToImageInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBufferImageCopy2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcBuffer = %A" x.srcBuffer
                    sprintf "dstImage = %A" x.dstImage
                    sprintf "dstImageLayout = %A" x.dstImageLayout
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkCopyBufferToImageInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageCopy2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcSubresource : VkImageSubresourceLayers
            val mutable public srcOffset : VkOffset3D
            val mutable public dstSubresource : VkImageSubresourceLayers
            val mutable public dstOffset : VkOffset3D
            val mutable public extent : VkExtent3D

            new(pNext: nativeint, srcSubresource: VkImageSubresourceLayers, srcOffset: VkOffset3D, dstSubresource: VkImageSubresourceLayers, dstOffset: VkOffset3D, extent: VkExtent3D) =
                {
                    sType = 1000337007u
                    pNext = pNext
                    srcSubresource = srcSubresource
                    srcOffset = srcOffset
                    dstSubresource = dstSubresource
                    dstOffset = dstOffset
                    extent = extent
                }

            new(srcSubresource: VkImageSubresourceLayers, srcOffset: VkOffset3D, dstSubresource: VkImageSubresourceLayers, dstOffset: VkOffset3D, extent: VkExtent3D) =
                VkImageCopy2(Unchecked.defaultof<nativeint>, srcSubresource, srcOffset, dstSubresource, dstOffset, extent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.srcOffset = Unchecked.defaultof<VkOffset3D> && x.dstSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.dstOffset = Unchecked.defaultof<VkOffset3D> && x.extent = Unchecked.defaultof<VkExtent3D>

            static member Empty =
                VkImageCopy2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcSubresource = %A" x.srcSubresource
                    sprintf "srcOffset = %A" x.srcOffset
                    sprintf "dstSubresource = %A" x.dstSubresource
                    sprintf "dstOffset = %A" x.dstOffset
                    sprintf "extent = %A" x.extent
                ] |> sprintf "VkImageCopy2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyImageInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcImage : VkImage
            val mutable public srcImageLayout : VkImageLayout
            val mutable public dstImage : VkImage
            val mutable public dstImageLayout : VkImageLayout
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkImageCopy2>

            new(pNext: nativeint, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<VkImageCopy2>) =
                {
                    sType = 1000337001u
                    pNext = pNext
                    srcImage = srcImage
                    srcImageLayout = srcImageLayout
                    dstImage = dstImage
                    dstImageLayout = dstImageLayout
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<VkImageCopy2>) =
                VkCopyImageInfo2(Unchecked.defaultof<nativeint>, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcImage = Unchecked.defaultof<VkImage> && x.srcImageLayout = Unchecked.defaultof<VkImageLayout> && x.dstImage = Unchecked.defaultof<VkImage> && x.dstImageLayout = Unchecked.defaultof<VkImageLayout> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkImageCopy2>>

            static member Empty =
                VkCopyImageInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageCopy2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcImage = %A" x.srcImage
                    sprintf "srcImageLayout = %A" x.srcImageLayout
                    sprintf "dstImage = %A" x.dstImage
                    sprintf "dstImageLayout = %A" x.dstImageLayout
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkCopyImageInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyImageToBufferInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcImage : VkImage
            val mutable public srcImageLayout : VkImageLayout
            val mutable public dstBuffer : VkBuffer
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkBufferImageCopy2>

            new(pNext: nativeint, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: uint32, pRegions: nativeptr<VkBufferImageCopy2>) =
                {
                    sType = 1000337003u
                    pNext = pNext
                    srcImage = srcImage
                    srcImageLayout = srcImageLayout
                    dstBuffer = dstBuffer
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: uint32, pRegions: nativeptr<VkBufferImageCopy2>) =
                VkCopyImageToBufferInfo2(Unchecked.defaultof<nativeint>, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcImage = Unchecked.defaultof<VkImage> && x.srcImageLayout = Unchecked.defaultof<VkImageLayout> && x.dstBuffer = Unchecked.defaultof<VkBuffer> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkBufferImageCopy2>>

            static member Empty =
                VkCopyImageToBufferInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBufferImageCopy2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcImage = %A" x.srcImage
                    sprintf "srcImageLayout = %A" x.srcImageLayout
                    sprintf "dstBuffer = %A" x.dstBuffer
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkCopyImageToBufferInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryBarrier2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcStageMask : VkPipelineStageFlags2
            val mutable public srcAccessMask : VkAccessFlags2
            val mutable public dstStageMask : VkPipelineStageFlags2
            val mutable public dstAccessMask : VkAccessFlags2

            new(pNext: nativeint, srcStageMask: VkPipelineStageFlags2, srcAccessMask: VkAccessFlags2, dstStageMask: VkPipelineStageFlags2, dstAccessMask: VkAccessFlags2) =
                {
                    sType = 1000314000u
                    pNext = pNext
                    srcStageMask = srcStageMask
                    srcAccessMask = srcAccessMask
                    dstStageMask = dstStageMask
                    dstAccessMask = dstAccessMask
                }

            new(srcStageMask: VkPipelineStageFlags2, srcAccessMask: VkAccessFlags2, dstStageMask: VkPipelineStageFlags2, dstAccessMask: VkAccessFlags2) =
                VkMemoryBarrier2(Unchecked.defaultof<nativeint>, srcStageMask, srcAccessMask, dstStageMask, dstAccessMask)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcStageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags2> && x.dstStageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags2>

            static member Empty =
                VkMemoryBarrier2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<VkAccessFlags2>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<VkAccessFlags2>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcStageMask = %A" x.srcStageMask
                    sprintf "srcAccessMask = %A" x.srcAccessMask
                    sprintf "dstStageMask = %A" x.dstStageMask
                    sprintf "dstAccessMask = %A" x.dstAccessMask
                ] |> sprintf "VkMemoryBarrier2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageMemoryBarrier2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcStageMask : VkPipelineStageFlags2
            val mutable public srcAccessMask : VkAccessFlags2
            val mutable public dstStageMask : VkPipelineStageFlags2
            val mutable public dstAccessMask : VkAccessFlags2
            val mutable public oldLayout : VkImageLayout
            val mutable public newLayout : VkImageLayout
            val mutable public srcQueueFamilyIndex : uint32
            val mutable public dstQueueFamilyIndex : uint32
            val mutable public image : VkImage
            val mutable public subresourceRange : VkImageSubresourceRange

            new(pNext: nativeint, srcStageMask: VkPipelineStageFlags2, srcAccessMask: VkAccessFlags2, dstStageMask: VkPipelineStageFlags2, dstAccessMask: VkAccessFlags2, oldLayout: VkImageLayout, newLayout: VkImageLayout, srcQueueFamilyIndex: uint32, dstQueueFamilyIndex: uint32, image: VkImage, subresourceRange: VkImageSubresourceRange) =
                {
                    sType = 1000314002u
                    pNext = pNext
                    srcStageMask = srcStageMask
                    srcAccessMask = srcAccessMask
                    dstStageMask = dstStageMask
                    dstAccessMask = dstAccessMask
                    oldLayout = oldLayout
                    newLayout = newLayout
                    srcQueueFamilyIndex = srcQueueFamilyIndex
                    dstQueueFamilyIndex = dstQueueFamilyIndex
                    image = image
                    subresourceRange = subresourceRange
                }

            new(srcStageMask: VkPipelineStageFlags2, srcAccessMask: VkAccessFlags2, dstStageMask: VkPipelineStageFlags2, dstAccessMask: VkAccessFlags2, oldLayout: VkImageLayout, newLayout: VkImageLayout, srcQueueFamilyIndex: uint32, dstQueueFamilyIndex: uint32, image: VkImage, subresourceRange: VkImageSubresourceRange) =
                VkImageMemoryBarrier2(Unchecked.defaultof<nativeint>, srcStageMask, srcAccessMask, dstStageMask, dstAccessMask, oldLayout, newLayout, srcQueueFamilyIndex, dstQueueFamilyIndex, image, subresourceRange)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcStageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags2> && x.dstStageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags2> && x.oldLayout = Unchecked.defaultof<VkImageLayout> && x.newLayout = Unchecked.defaultof<VkImageLayout> && x.srcQueueFamilyIndex = Unchecked.defaultof<uint32> && x.dstQueueFamilyIndex = Unchecked.defaultof<uint32> && x.image = Unchecked.defaultof<VkImage> && x.subresourceRange = Unchecked.defaultof<VkImageSubresourceRange>

            static member Empty =
                VkImageMemoryBarrier2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<VkAccessFlags2>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<VkAccessFlags2>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageSubresourceRange>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcStageMask = %A" x.srcStageMask
                    sprintf "srcAccessMask = %A" x.srcAccessMask
                    sprintf "dstStageMask = %A" x.dstStageMask
                    sprintf "dstAccessMask = %A" x.dstAccessMask
                    sprintf "oldLayout = %A" x.oldLayout
                    sprintf "newLayout = %A" x.newLayout
                    sprintf "srcQueueFamilyIndex = %A" x.srcQueueFamilyIndex
                    sprintf "dstQueueFamilyIndex = %A" x.dstQueueFamilyIndex
                    sprintf "image = %A" x.image
                    sprintf "subresourceRange = %A" x.subresourceRange
                ] |> sprintf "VkImageMemoryBarrier2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDependencyInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public dependencyFlags : VkDependencyFlags
            val mutable public memoryBarrierCount : uint32
            val mutable public pMemoryBarriers : nativeptr<VkMemoryBarrier2>
            val mutable public bufferMemoryBarrierCount : uint32
            val mutable public pBufferMemoryBarriers : nativeptr<VkBufferMemoryBarrier2>
            val mutable public imageMemoryBarrierCount : uint32
            val mutable public pImageMemoryBarriers : nativeptr<VkImageMemoryBarrier2>

            new(pNext: nativeint, dependencyFlags: VkDependencyFlags, memoryBarrierCount: uint32, pMemoryBarriers: nativeptr<VkMemoryBarrier2>, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: nativeptr<VkBufferMemoryBarrier2>, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: nativeptr<VkImageMemoryBarrier2>) =
                {
                    sType = 1000314003u
                    pNext = pNext
                    dependencyFlags = dependencyFlags
                    memoryBarrierCount = memoryBarrierCount
                    pMemoryBarriers = pMemoryBarriers
                    bufferMemoryBarrierCount = bufferMemoryBarrierCount
                    pBufferMemoryBarriers = pBufferMemoryBarriers
                    imageMemoryBarrierCount = imageMemoryBarrierCount
                    pImageMemoryBarriers = pImageMemoryBarriers
                }

            new(dependencyFlags: VkDependencyFlags, memoryBarrierCount: uint32, pMemoryBarriers: nativeptr<VkMemoryBarrier2>, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: nativeptr<VkBufferMemoryBarrier2>, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: nativeptr<VkImageMemoryBarrier2>) =
                VkDependencyInfo(Unchecked.defaultof<nativeint>, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.dependencyFlags = Unchecked.defaultof<VkDependencyFlags> && x.memoryBarrierCount = Unchecked.defaultof<uint32> && x.pMemoryBarriers = Unchecked.defaultof<nativeptr<VkMemoryBarrier2>> && x.bufferMemoryBarrierCount = Unchecked.defaultof<uint32> && x.pBufferMemoryBarriers = Unchecked.defaultof<nativeptr<VkBufferMemoryBarrier2>> && x.imageMemoryBarrierCount = Unchecked.defaultof<uint32> && x.pImageMemoryBarriers = Unchecked.defaultof<nativeptr<VkImageMemoryBarrier2>>

            static member Empty =
                VkDependencyInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDependencyFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkMemoryBarrier2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBufferMemoryBarrier2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageMemoryBarrier2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "dependencyFlags = %A" x.dependencyFlags
                    sprintf "memoryBarrierCount = %A" x.memoryBarrierCount
                    sprintf "pMemoryBarriers = %A" x.pMemoryBarriers
                    sprintf "bufferMemoryBarrierCount = %A" x.bufferMemoryBarrierCount
                    sprintf "pBufferMemoryBarriers = %A" x.pBufferMemoryBarriers
                    sprintf "imageMemoryBarrierCount = %A" x.imageMemoryBarrierCount
                    sprintf "pImageMemoryBarriers = %A" x.pImageMemoryBarriers
                ] |> sprintf "VkDependencyInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorPoolInlineUniformBlockCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxInlineUniformBlockBindings : uint32

            new(pNext: nativeint, maxInlineUniformBlockBindings: uint32) =
                {
                    sType = 1000138003u
                    pNext = pNext
                    maxInlineUniformBlockBindings = maxInlineUniformBlockBindings
                }

            new(maxInlineUniformBlockBindings: uint32) =
                VkDescriptorPoolInlineUniformBlockCreateInfo(Unchecked.defaultof<nativeint>, maxInlineUniformBlockBindings)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxInlineUniformBlockBindings = Unchecked.defaultof<uint32>

            static member Empty =
                VkDescriptorPoolInlineUniformBlockCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxInlineUniformBlockBindings = %A" x.maxInlineUniformBlockBindings
                ] |> sprintf "VkDescriptorPoolInlineUniformBlockCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceBufferMemoryRequirements =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pCreateInfo : nativeptr<VkBufferCreateInfo>

            new(pNext: nativeint, pCreateInfo: nativeptr<VkBufferCreateInfo>) =
                {
                    sType = 1000413002u
                    pNext = pNext
                    pCreateInfo = pCreateInfo
                }

            new(pCreateInfo: nativeptr<VkBufferCreateInfo>) =
                VkDeviceBufferMemoryRequirements(Unchecked.defaultof<nativeint>, pCreateInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pCreateInfo = Unchecked.defaultof<nativeptr<VkBufferCreateInfo>>

            static member Empty =
                VkDeviceBufferMemoryRequirements(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkBufferCreateInfo>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "pCreateInfo = %A" x.pCreateInfo
                ] |> sprintf "VkDeviceBufferMemoryRequirements { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceImageMemoryRequirements =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pCreateInfo : nativeptr<VkImageCreateInfo>
            val mutable public planeAspect : VkImageAspectFlags

            new(pNext: nativeint, pCreateInfo: nativeptr<VkImageCreateInfo>, planeAspect: VkImageAspectFlags) =
                {
                    sType = 1000413003u
                    pNext = pNext
                    pCreateInfo = pCreateInfo
                    planeAspect = planeAspect
                }

            new(pCreateInfo: nativeptr<VkImageCreateInfo>, planeAspect: VkImageAspectFlags) =
                VkDeviceImageMemoryRequirements(Unchecked.defaultof<nativeint>, pCreateInfo, planeAspect)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pCreateInfo = Unchecked.defaultof<nativeptr<VkImageCreateInfo>> && x.planeAspect = Unchecked.defaultof<VkImageAspectFlags>

            static member Empty =
                VkDeviceImageMemoryRequirements(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkImageCreateInfo>>, Unchecked.defaultof<VkImageAspectFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "pCreateInfo = %A" x.pCreateInfo
                    sprintf "planeAspect = %A" x.planeAspect
                ] |> sprintf "VkDeviceImageMemoryRequirements { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDevicePrivateDataCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public privateDataSlotRequestCount : uint32

            new(pNext: nativeint, privateDataSlotRequestCount: uint32) =
                {
                    sType = 1000295001u
                    pNext = pNext
                    privateDataSlotRequestCount = privateDataSlotRequestCount
                }

            new(privateDataSlotRequestCount: uint32) =
                VkDevicePrivateDataCreateInfo(Unchecked.defaultof<nativeint>, privateDataSlotRequestCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.privateDataSlotRequestCount = Unchecked.defaultof<uint32>

            static member Empty =
                VkDevicePrivateDataCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "privateDataSlotRequestCount = %A" x.privateDataSlotRequestCount
                ] |> sprintf "VkDevicePrivateDataCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkFormatProperties3 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public linearTilingFeatures : VkFormatFeatureFlags2
            val mutable public optimalTilingFeatures : VkFormatFeatureFlags2
            val mutable public bufferFeatures : VkFormatFeatureFlags2

            new(pNext: nativeint, linearTilingFeatures: VkFormatFeatureFlags2, optimalTilingFeatures: VkFormatFeatureFlags2, bufferFeatures: VkFormatFeatureFlags2) =
                {
                    sType = 1000360000u
                    pNext = pNext
                    linearTilingFeatures = linearTilingFeatures
                    optimalTilingFeatures = optimalTilingFeatures
                    bufferFeatures = bufferFeatures
                }

            new(linearTilingFeatures: VkFormatFeatureFlags2, optimalTilingFeatures: VkFormatFeatureFlags2, bufferFeatures: VkFormatFeatureFlags2) =
                VkFormatProperties3(Unchecked.defaultof<nativeint>, linearTilingFeatures, optimalTilingFeatures, bufferFeatures)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.linearTilingFeatures = Unchecked.defaultof<VkFormatFeatureFlags2> && x.optimalTilingFeatures = Unchecked.defaultof<VkFormatFeatureFlags2> && x.bufferFeatures = Unchecked.defaultof<VkFormatFeatureFlags2>

            static member Empty =
                VkFormatProperties3(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormatFeatureFlags2>, Unchecked.defaultof<VkFormatFeatureFlags2>, Unchecked.defaultof<VkFormatFeatureFlags2>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "linearTilingFeatures = %A" x.linearTilingFeatures
                    sprintf "optimalTilingFeatures = %A" x.optimalTilingFeatures
                    sprintf "bufferFeatures = %A" x.bufferFeatures
                ] |> sprintf "VkFormatProperties3 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageResolve2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcSubresource : VkImageSubresourceLayers
            val mutable public srcOffset : VkOffset3D
            val mutable public dstSubresource : VkImageSubresourceLayers
            val mutable public dstOffset : VkOffset3D
            val mutable public extent : VkExtent3D

            new(pNext: nativeint, srcSubresource: VkImageSubresourceLayers, srcOffset: VkOffset3D, dstSubresource: VkImageSubresourceLayers, dstOffset: VkOffset3D, extent: VkExtent3D) =
                {
                    sType = 1000337010u
                    pNext = pNext
                    srcSubresource = srcSubresource
                    srcOffset = srcOffset
                    dstSubresource = dstSubresource
                    dstOffset = dstOffset
                    extent = extent
                }

            new(srcSubresource: VkImageSubresourceLayers, srcOffset: VkOffset3D, dstSubresource: VkImageSubresourceLayers, dstOffset: VkOffset3D, extent: VkExtent3D) =
                VkImageResolve2(Unchecked.defaultof<nativeint>, srcSubresource, srcOffset, dstSubresource, dstOffset, extent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.srcOffset = Unchecked.defaultof<VkOffset3D> && x.dstSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.dstOffset = Unchecked.defaultof<VkOffset3D> && x.extent = Unchecked.defaultof<VkExtent3D>

            static member Empty =
                VkImageResolve2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcSubresource = %A" x.srcSubresource
                    sprintf "srcOffset = %A" x.srcOffset
                    sprintf "dstSubresource = %A" x.dstSubresource
                    sprintf "dstOffset = %A" x.dstOffset
                    sprintf "extent = %A" x.extent
                ] |> sprintf "VkImageResolve2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDynamicRenderingFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public dynamicRendering : VkBool32

            new(pNext: nativeint, dynamicRendering: VkBool32) =
                {
                    sType = 1000044003u
                    pNext = pNext
                    dynamicRendering = dynamicRendering
                }

            new(dynamicRendering: VkBool32) =
                VkPhysicalDeviceDynamicRenderingFeatures(Unchecked.defaultof<nativeint>, dynamicRendering)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.dynamicRendering = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDynamicRenderingFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "dynamicRendering = %A" x.dynamicRendering
                ] |> sprintf "VkPhysicalDeviceDynamicRenderingFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceImageRobustnessFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public robustImageAccess : VkBool32

            new(pNext: nativeint, robustImageAccess: VkBool32) =
                {
                    sType = 1000335000u
                    pNext = pNext
                    robustImageAccess = robustImageAccess
                }

            new(robustImageAccess: VkBool32) =
                VkPhysicalDeviceImageRobustnessFeatures(Unchecked.defaultof<nativeint>, robustImageAccess)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.robustImageAccess = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceImageRobustnessFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "robustImageAccess = %A" x.robustImageAccess
                ] |> sprintf "VkPhysicalDeviceImageRobustnessFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceInlineUniformBlockFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public inlineUniformBlock : VkBool32
            val mutable public descriptorBindingInlineUniformBlockUpdateAfterBind : VkBool32

            new(pNext: nativeint, inlineUniformBlock: VkBool32, descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32) =
                {
                    sType = 1000138000u
                    pNext = pNext
                    inlineUniformBlock = inlineUniformBlock
                    descriptorBindingInlineUniformBlockUpdateAfterBind = descriptorBindingInlineUniformBlockUpdateAfterBind
                }

            new(inlineUniformBlock: VkBool32, descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32) =
                VkPhysicalDeviceInlineUniformBlockFeatures(Unchecked.defaultof<nativeint>, inlineUniformBlock, descriptorBindingInlineUniformBlockUpdateAfterBind)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.inlineUniformBlock = Unchecked.defaultof<VkBool32> && x.descriptorBindingInlineUniformBlockUpdateAfterBind = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceInlineUniformBlockFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "inlineUniformBlock = %A" x.inlineUniformBlock
                    sprintf "descriptorBindingInlineUniformBlockUpdateAfterBind = %A" x.descriptorBindingInlineUniformBlockUpdateAfterBind
                ] |> sprintf "VkPhysicalDeviceInlineUniformBlockFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceInlineUniformBlockProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxInlineUniformBlockSize : uint32
            val mutable public maxPerStageDescriptorInlineUniformBlocks : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks : uint32
            val mutable public maxDescriptorSetInlineUniformBlocks : uint32
            val mutable public maxDescriptorSetUpdateAfterBindInlineUniformBlocks : uint32

            new(pNext: nativeint, maxInlineUniformBlockSize: uint32, maxPerStageDescriptorInlineUniformBlocks: uint32, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: uint32, maxDescriptorSetInlineUniformBlocks: uint32, maxDescriptorSetUpdateAfterBindInlineUniformBlocks: uint32) =
                {
                    sType = 1000138001u
                    pNext = pNext
                    maxInlineUniformBlockSize = maxInlineUniformBlockSize
                    maxPerStageDescriptorInlineUniformBlocks = maxPerStageDescriptorInlineUniformBlocks
                    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
                    maxDescriptorSetInlineUniformBlocks = maxDescriptorSetInlineUniformBlocks
                    maxDescriptorSetUpdateAfterBindInlineUniformBlocks = maxDescriptorSetUpdateAfterBindInlineUniformBlocks
                }

            new(maxInlineUniformBlockSize: uint32, maxPerStageDescriptorInlineUniformBlocks: uint32, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: uint32, maxDescriptorSetInlineUniformBlocks: uint32, maxDescriptorSetUpdateAfterBindInlineUniformBlocks: uint32) =
                VkPhysicalDeviceInlineUniformBlockProperties(Unchecked.defaultof<nativeint>, maxInlineUniformBlockSize, maxPerStageDescriptorInlineUniformBlocks, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, maxDescriptorSetInlineUniformBlocks, maxDescriptorSetUpdateAfterBindInlineUniformBlocks)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxInlineUniformBlockSize = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxDescriptorSetInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceInlineUniformBlockProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxInlineUniformBlockSize = %A" x.maxInlineUniformBlockSize
                    sprintf "maxPerStageDescriptorInlineUniformBlocks = %A" x.maxPerStageDescriptorInlineUniformBlocks
                    sprintf "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = %A" x.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
                    sprintf "maxDescriptorSetInlineUniformBlocks = %A" x.maxDescriptorSetInlineUniformBlocks
                    sprintf "maxDescriptorSetUpdateAfterBindInlineUniformBlocks = %A" x.maxDescriptorSetUpdateAfterBindInlineUniformBlocks
                ] |> sprintf "VkPhysicalDeviceInlineUniformBlockProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMaintenance4Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maintenance4 : VkBool32

            new(pNext: nativeint, maintenance4: VkBool32) =
                {
                    sType = 1000413000u
                    pNext = pNext
                    maintenance4 = maintenance4
                }

            new(maintenance4: VkBool32) =
                VkPhysicalDeviceMaintenance4Features(Unchecked.defaultof<nativeint>, maintenance4)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maintenance4 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMaintenance4Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maintenance4 = %A" x.maintenance4
                ] |> sprintf "VkPhysicalDeviceMaintenance4Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMaintenance4Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxBufferSize : VkDeviceSize

            new(pNext: nativeint, maxBufferSize: VkDeviceSize) =
                {
                    sType = 1000413001u
                    pNext = pNext
                    maxBufferSize = maxBufferSize
                }

            new(maxBufferSize: VkDeviceSize) =
                VkPhysicalDeviceMaintenance4Properties(Unchecked.defaultof<nativeint>, maxBufferSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxBufferSize = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkPhysicalDeviceMaintenance4Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxBufferSize = %A" x.maxBufferSize
                ] |> sprintf "VkPhysicalDeviceMaintenance4Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePipelineCreationCacheControlFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipelineCreationCacheControl : VkBool32

            new(pNext: nativeint, pipelineCreationCacheControl: VkBool32) =
                {
                    sType = 1000297000u
                    pNext = pNext
                    pipelineCreationCacheControl = pipelineCreationCacheControl
                }

            new(pipelineCreationCacheControl: VkBool32) =
                VkPhysicalDevicePipelineCreationCacheControlFeatures(Unchecked.defaultof<nativeint>, pipelineCreationCacheControl)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipelineCreationCacheControl = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePipelineCreationCacheControlFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipelineCreationCacheControl = %A" x.pipelineCreationCacheControl
                ] |> sprintf "VkPhysicalDevicePipelineCreationCacheControlFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePrivateDataFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public privateData : VkBool32

            new(pNext: nativeint, privateData: VkBool32) =
                {
                    sType = 1000295000u
                    pNext = pNext
                    privateData = privateData
                }

            new(privateData: VkBool32) =
                VkPhysicalDevicePrivateDataFeatures(Unchecked.defaultof<nativeint>, privateData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.privateData = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePrivateDataFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "privateData = %A" x.privateData
                ] |> sprintf "VkPhysicalDevicePrivateDataFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderDemoteToHelperInvocation : VkBool32

            new(pNext: nativeint, shaderDemoteToHelperInvocation: VkBool32) =
                {
                    sType = 1000276000u
                    pNext = pNext
                    shaderDemoteToHelperInvocation = shaderDemoteToHelperInvocation
                }

            new(shaderDemoteToHelperInvocation: VkBool32) =
                VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(Unchecked.defaultof<nativeint>, shaderDemoteToHelperInvocation)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderDemoteToHelperInvocation = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderDemoteToHelperInvocation = %A" x.shaderDemoteToHelperInvocation
                ] |> sprintf "VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderIntegerDotProductFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderIntegerDotProduct : VkBool32

            new(pNext: nativeint, shaderIntegerDotProduct: VkBool32) =
                {
                    sType = 1000280000u
                    pNext = pNext
                    shaderIntegerDotProduct = shaderIntegerDotProduct
                }

            new(shaderIntegerDotProduct: VkBool32) =
                VkPhysicalDeviceShaderIntegerDotProductFeatures(Unchecked.defaultof<nativeint>, shaderIntegerDotProduct)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderIntegerDotProduct = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderIntegerDotProductFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderIntegerDotProduct = %A" x.shaderIntegerDotProduct
                ] |> sprintf "VkPhysicalDeviceShaderIntegerDotProductFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderIntegerDotProductProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public integerDotProduct8BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct8BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct8BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct4x8BitPackedUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct4x8BitPackedSignedAccelerated : VkBool32
            val mutable public integerDotProduct4x8BitPackedMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct16BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct16BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct16BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct32BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct32BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct32BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct64BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct64BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct64BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating8BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating8BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating16BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating16BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating32BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating32BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating64BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating64BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated : VkBool32

            new(pNext: nativeint, integerDotProduct8BitUnsignedAccelerated: VkBool32, integerDotProduct8BitSignedAccelerated: VkBool32, integerDotProduct8BitMixedSignednessAccelerated: VkBool32, integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32, integerDotProduct4x8BitPackedSignedAccelerated: VkBool32, integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32, integerDotProduct16BitUnsignedAccelerated: VkBool32, integerDotProduct16BitSignedAccelerated: VkBool32, integerDotProduct16BitMixedSignednessAccelerated: VkBool32, integerDotProduct32BitUnsignedAccelerated: VkBool32, integerDotProduct32BitSignedAccelerated: VkBool32, integerDotProduct32BitMixedSignednessAccelerated: VkBool32, integerDotProduct64BitUnsignedAccelerated: VkBool32, integerDotProduct64BitSignedAccelerated: VkBool32, integerDotProduct64BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32) =
                {
                    sType = 1000280001u
                    pNext = pNext
                    integerDotProduct8BitUnsignedAccelerated = integerDotProduct8BitUnsignedAccelerated
                    integerDotProduct8BitSignedAccelerated = integerDotProduct8BitSignedAccelerated
                    integerDotProduct8BitMixedSignednessAccelerated = integerDotProduct8BitMixedSignednessAccelerated
                    integerDotProduct4x8BitPackedUnsignedAccelerated = integerDotProduct4x8BitPackedUnsignedAccelerated
                    integerDotProduct4x8BitPackedSignedAccelerated = integerDotProduct4x8BitPackedSignedAccelerated
                    integerDotProduct4x8BitPackedMixedSignednessAccelerated = integerDotProduct4x8BitPackedMixedSignednessAccelerated
                    integerDotProduct16BitUnsignedAccelerated = integerDotProduct16BitUnsignedAccelerated
                    integerDotProduct16BitSignedAccelerated = integerDotProduct16BitSignedAccelerated
                    integerDotProduct16BitMixedSignednessAccelerated = integerDotProduct16BitMixedSignednessAccelerated
                    integerDotProduct32BitUnsignedAccelerated = integerDotProduct32BitUnsignedAccelerated
                    integerDotProduct32BitSignedAccelerated = integerDotProduct32BitSignedAccelerated
                    integerDotProduct32BitMixedSignednessAccelerated = integerDotProduct32BitMixedSignednessAccelerated
                    integerDotProduct64BitUnsignedAccelerated = integerDotProduct64BitUnsignedAccelerated
                    integerDotProduct64BitSignedAccelerated = integerDotProduct64BitSignedAccelerated
                    integerDotProduct64BitMixedSignednessAccelerated = integerDotProduct64BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = integerDotProductAccumulatingSaturating8BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating8BitSignedAccelerated = integerDotProductAccumulatingSaturating8BitSignedAccelerated
                    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated
                    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated
                    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = integerDotProductAccumulatingSaturating16BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating16BitSignedAccelerated = integerDotProductAccumulatingSaturating16BitSignedAccelerated
                    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = integerDotProductAccumulatingSaturating32BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating32BitSignedAccelerated = integerDotProductAccumulatingSaturating32BitSignedAccelerated
                    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = integerDotProductAccumulatingSaturating64BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating64BitSignedAccelerated = integerDotProductAccumulatingSaturating64BitSignedAccelerated
                    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated
                }

            new(integerDotProduct8BitUnsignedAccelerated: VkBool32, integerDotProduct8BitSignedAccelerated: VkBool32, integerDotProduct8BitMixedSignednessAccelerated: VkBool32, integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32, integerDotProduct4x8BitPackedSignedAccelerated: VkBool32, integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32, integerDotProduct16BitUnsignedAccelerated: VkBool32, integerDotProduct16BitSignedAccelerated: VkBool32, integerDotProduct16BitMixedSignednessAccelerated: VkBool32, integerDotProduct32BitUnsignedAccelerated: VkBool32, integerDotProduct32BitSignedAccelerated: VkBool32, integerDotProduct32BitMixedSignednessAccelerated: VkBool32, integerDotProduct64BitUnsignedAccelerated: VkBool32, integerDotProduct64BitSignedAccelerated: VkBool32, integerDotProduct64BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32) =
                VkPhysicalDeviceShaderIntegerDotProductProperties(Unchecked.defaultof<nativeint>, integerDotProduct8BitUnsignedAccelerated, integerDotProduct8BitSignedAccelerated, integerDotProduct8BitMixedSignednessAccelerated, integerDotProduct4x8BitPackedUnsignedAccelerated, integerDotProduct4x8BitPackedSignedAccelerated, integerDotProduct4x8BitPackedMixedSignednessAccelerated, integerDotProduct16BitUnsignedAccelerated, integerDotProduct16BitSignedAccelerated, integerDotProduct16BitMixedSignednessAccelerated, integerDotProduct32BitUnsignedAccelerated, integerDotProduct32BitSignedAccelerated, integerDotProduct32BitMixedSignednessAccelerated, integerDotProduct64BitUnsignedAccelerated, integerDotProduct64BitSignedAccelerated, integerDotProduct64BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, integerDotProductAccumulatingSaturating8BitSignedAccelerated, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, integerDotProductAccumulatingSaturating16BitSignedAccelerated, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, integerDotProductAccumulatingSaturating32BitSignedAccelerated, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, integerDotProductAccumulatingSaturating64BitSignedAccelerated, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.integerDotProduct8BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct8BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct8BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct4x8BitPackedUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct4x8BitPackedSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct4x8BitPackedMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct16BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct16BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct16BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct32BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct32BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct32BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct64BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct64BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct64BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating8BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating16BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating32BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating64BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderIntegerDotProductProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "integerDotProduct8BitUnsignedAccelerated = %A" x.integerDotProduct8BitUnsignedAccelerated
                    sprintf "integerDotProduct8BitSignedAccelerated = %A" x.integerDotProduct8BitSignedAccelerated
                    sprintf "integerDotProduct8BitMixedSignednessAccelerated = %A" x.integerDotProduct8BitMixedSignednessAccelerated
                    sprintf "integerDotProduct4x8BitPackedUnsignedAccelerated = %A" x.integerDotProduct4x8BitPackedUnsignedAccelerated
                    sprintf "integerDotProduct4x8BitPackedSignedAccelerated = %A" x.integerDotProduct4x8BitPackedSignedAccelerated
                    sprintf "integerDotProduct4x8BitPackedMixedSignednessAccelerated = %A" x.integerDotProduct4x8BitPackedMixedSignednessAccelerated
                    sprintf "integerDotProduct16BitUnsignedAccelerated = %A" x.integerDotProduct16BitUnsignedAccelerated
                    sprintf "integerDotProduct16BitSignedAccelerated = %A" x.integerDotProduct16BitSignedAccelerated
                    sprintf "integerDotProduct16BitMixedSignednessAccelerated = %A" x.integerDotProduct16BitMixedSignednessAccelerated
                    sprintf "integerDotProduct32BitUnsignedAccelerated = %A" x.integerDotProduct32BitUnsignedAccelerated
                    sprintf "integerDotProduct32BitSignedAccelerated = %A" x.integerDotProduct32BitSignedAccelerated
                    sprintf "integerDotProduct32BitMixedSignednessAccelerated = %A" x.integerDotProduct32BitMixedSignednessAccelerated
                    sprintf "integerDotProduct64BitUnsignedAccelerated = %A" x.integerDotProduct64BitUnsignedAccelerated
                    sprintf "integerDotProduct64BitSignedAccelerated = %A" x.integerDotProduct64BitSignedAccelerated
                    sprintf "integerDotProduct64BitMixedSignednessAccelerated = %A" x.integerDotProduct64BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating8BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating8BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating16BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating16BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating32BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating32BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating64BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating64BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated
                ] |> sprintf "VkPhysicalDeviceShaderIntegerDotProductProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderTerminateInvocationFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderTerminateInvocation : VkBool32

            new(pNext: nativeint, shaderTerminateInvocation: VkBool32) =
                {
                    sType = 1000215000u
                    pNext = pNext
                    shaderTerminateInvocation = shaderTerminateInvocation
                }

            new(shaderTerminateInvocation: VkBool32) =
                VkPhysicalDeviceShaderTerminateInvocationFeatures(Unchecked.defaultof<nativeint>, shaderTerminateInvocation)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderTerminateInvocation = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderTerminateInvocationFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderTerminateInvocation = %A" x.shaderTerminateInvocation
                ] |> sprintf "VkPhysicalDeviceShaderTerminateInvocationFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSubgroupSizeControlFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public subgroupSizeControl : VkBool32
            val mutable public computeFullSubgroups : VkBool32

            new(pNext: nativeint, subgroupSizeControl: VkBool32, computeFullSubgroups: VkBool32) =
                {
                    sType = 1000225002u
                    pNext = pNext
                    subgroupSizeControl = subgroupSizeControl
                    computeFullSubgroups = computeFullSubgroups
                }

            new(subgroupSizeControl: VkBool32, computeFullSubgroups: VkBool32) =
                VkPhysicalDeviceSubgroupSizeControlFeatures(Unchecked.defaultof<nativeint>, subgroupSizeControl, computeFullSubgroups)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.subgroupSizeControl = Unchecked.defaultof<VkBool32> && x.computeFullSubgroups = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSubgroupSizeControlFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "subgroupSizeControl = %A" x.subgroupSizeControl
                    sprintf "computeFullSubgroups = %A" x.computeFullSubgroups
                ] |> sprintf "VkPhysicalDeviceSubgroupSizeControlFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSubgroupSizeControlProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public minSubgroupSize : uint32
            val mutable public maxSubgroupSize : uint32
            val mutable public maxComputeWorkgroupSubgroups : uint32
            val mutable public requiredSubgroupSizeStages : VkShaderStageFlags

            new(pNext: nativeint, minSubgroupSize: uint32, maxSubgroupSize: uint32, maxComputeWorkgroupSubgroups: uint32, requiredSubgroupSizeStages: VkShaderStageFlags) =
                {
                    sType = 1000225000u
                    pNext = pNext
                    minSubgroupSize = minSubgroupSize
                    maxSubgroupSize = maxSubgroupSize
                    maxComputeWorkgroupSubgroups = maxComputeWorkgroupSubgroups
                    requiredSubgroupSizeStages = requiredSubgroupSizeStages
                }

            new(minSubgroupSize: uint32, maxSubgroupSize: uint32, maxComputeWorkgroupSubgroups: uint32, requiredSubgroupSizeStages: VkShaderStageFlags) =
                VkPhysicalDeviceSubgroupSizeControlProperties(Unchecked.defaultof<nativeint>, minSubgroupSize, maxSubgroupSize, maxComputeWorkgroupSubgroups, requiredSubgroupSizeStages)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.minSubgroupSize = Unchecked.defaultof<uint32> && x.maxSubgroupSize = Unchecked.defaultof<uint32> && x.maxComputeWorkgroupSubgroups = Unchecked.defaultof<uint32> && x.requiredSubgroupSizeStages = Unchecked.defaultof<VkShaderStageFlags>

            static member Empty =
                VkPhysicalDeviceSubgroupSizeControlProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkShaderStageFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "minSubgroupSize = %A" x.minSubgroupSize
                    sprintf "maxSubgroupSize = %A" x.maxSubgroupSize
                    sprintf "maxComputeWorkgroupSubgroups = %A" x.maxComputeWorkgroupSubgroups
                    sprintf "requiredSubgroupSizeStages = %A" x.requiredSubgroupSizeStages
                ] |> sprintf "VkPhysicalDeviceSubgroupSizeControlProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSynchronization2Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public synchronization2 : VkBool32

            new(pNext: nativeint, synchronization2: VkBool32) =
                {
                    sType = 1000314007u
                    pNext = pNext
                    synchronization2 = synchronization2
                }

            new(synchronization2: VkBool32) =
                VkPhysicalDeviceSynchronization2Features(Unchecked.defaultof<nativeint>, synchronization2)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.synchronization2 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSynchronization2Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "synchronization2 = %A" x.synchronization2
                ] |> sprintf "VkPhysicalDeviceSynchronization2Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceTexelBufferAlignmentProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public storageTexelBufferOffsetAlignmentBytes : VkDeviceSize
            val mutable public storageTexelBufferOffsetSingleTexelAlignment : VkBool32
            val mutable public uniformTexelBufferOffsetAlignmentBytes : VkDeviceSize
            val mutable public uniformTexelBufferOffsetSingleTexelAlignment : VkBool32

            new(pNext: nativeint, storageTexelBufferOffsetAlignmentBytes: VkDeviceSize, storageTexelBufferOffsetSingleTexelAlignment: VkBool32, uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize, uniformTexelBufferOffsetSingleTexelAlignment: VkBool32) =
                {
                    sType = 1000281001u
                    pNext = pNext
                    storageTexelBufferOffsetAlignmentBytes = storageTexelBufferOffsetAlignmentBytes
                    storageTexelBufferOffsetSingleTexelAlignment = storageTexelBufferOffsetSingleTexelAlignment
                    uniformTexelBufferOffsetAlignmentBytes = uniformTexelBufferOffsetAlignmentBytes
                    uniformTexelBufferOffsetSingleTexelAlignment = uniformTexelBufferOffsetSingleTexelAlignment
                }

            new(storageTexelBufferOffsetAlignmentBytes: VkDeviceSize, storageTexelBufferOffsetSingleTexelAlignment: VkBool32, uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize, uniformTexelBufferOffsetSingleTexelAlignment: VkBool32) =
                VkPhysicalDeviceTexelBufferAlignmentProperties(Unchecked.defaultof<nativeint>, storageTexelBufferOffsetAlignmentBytes, storageTexelBufferOffsetSingleTexelAlignment, uniformTexelBufferOffsetAlignmentBytes, uniformTexelBufferOffsetSingleTexelAlignment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.storageTexelBufferOffsetAlignmentBytes = Unchecked.defaultof<VkDeviceSize> && x.storageTexelBufferOffsetSingleTexelAlignment = Unchecked.defaultof<VkBool32> && x.uniformTexelBufferOffsetAlignmentBytes = Unchecked.defaultof<VkDeviceSize> && x.uniformTexelBufferOffsetSingleTexelAlignment = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceTexelBufferAlignmentProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "storageTexelBufferOffsetAlignmentBytes = %A" x.storageTexelBufferOffsetAlignmentBytes
                    sprintf "storageTexelBufferOffsetSingleTexelAlignment = %A" x.storageTexelBufferOffsetSingleTexelAlignment
                    sprintf "uniformTexelBufferOffsetAlignmentBytes = %A" x.uniformTexelBufferOffsetAlignmentBytes
                    sprintf "uniformTexelBufferOffsetSingleTexelAlignment = %A" x.uniformTexelBufferOffsetSingleTexelAlignment
                ] |> sprintf "VkPhysicalDeviceTexelBufferAlignmentProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceTextureCompressionASTCHDRFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public textureCompressionASTC_HDR : VkBool32

            new(pNext: nativeint, textureCompressionASTC_HDR: VkBool32) =
                {
                    sType = 1000066000u
                    pNext = pNext
                    textureCompressionASTC_HDR = textureCompressionASTC_HDR
                }

            new(textureCompressionASTC_HDR: VkBool32) =
                VkPhysicalDeviceTextureCompressionASTCHDRFeatures(Unchecked.defaultof<nativeint>, textureCompressionASTC_HDR)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.textureCompressionASTC_HDR = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceTextureCompressionASTCHDRFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "textureCompressionASTC_HDR = %A" x.textureCompressionASTC_HDR
                ] |> sprintf "VkPhysicalDeviceTextureCompressionASTCHDRFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceToolProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public name : String256
            val mutable public version : String256
            val mutable public purposes : VkToolPurposeFlags
            val mutable public description : String256
            val mutable public layer : String256

            new(pNext: nativeint, name: String256, version: String256, purposes: VkToolPurposeFlags, description: String256, layer: String256) =
                {
                    sType = 1000245000u
                    pNext = pNext
                    name = name
                    version = version
                    purposes = purposes
                    description = description
                    layer = layer
                }

            new(name: String256, version: String256, purposes: VkToolPurposeFlags, description: String256, layer: String256) =
                VkPhysicalDeviceToolProperties(Unchecked.defaultof<nativeint>, name, version, purposes, description, layer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.name = Unchecked.defaultof<String256> && x.version = Unchecked.defaultof<String256> && x.purposes = Unchecked.defaultof<VkToolPurposeFlags> && x.description = Unchecked.defaultof<String256> && x.layer = Unchecked.defaultof<String256>

            static member Empty =
                VkPhysicalDeviceToolProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<VkToolPurposeFlags>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "name = %A" x.name
                    sprintf "version = %A" x.version
                    sprintf "purposes = %A" x.purposes
                    sprintf "description = %A" x.description
                    sprintf "layer = %A" x.layer
                ] |> sprintf "VkPhysicalDeviceToolProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan13Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public robustImageAccess : VkBool32
            val mutable public inlineUniformBlock : VkBool32
            val mutable public descriptorBindingInlineUniformBlockUpdateAfterBind : VkBool32
            val mutable public pipelineCreationCacheControl : VkBool32
            val mutable public privateData : VkBool32
            val mutable public shaderDemoteToHelperInvocation : VkBool32
            val mutable public shaderTerminateInvocation : VkBool32
            val mutable public subgroupSizeControl : VkBool32
            val mutable public computeFullSubgroups : VkBool32
            val mutable public synchronization2 : VkBool32
            val mutable public textureCompressionASTC_HDR : VkBool32
            val mutable public shaderZeroInitializeWorkgroupMemory : VkBool32
            val mutable public dynamicRendering : VkBool32
            val mutable public shaderIntegerDotProduct : VkBool32
            val mutable public maintenance4 : VkBool32

            new(pNext: nativeint, robustImageAccess: VkBool32, inlineUniformBlock: VkBool32, descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32, pipelineCreationCacheControl: VkBool32, privateData: VkBool32, shaderDemoteToHelperInvocation: VkBool32, shaderTerminateInvocation: VkBool32, subgroupSizeControl: VkBool32, computeFullSubgroups: VkBool32, synchronization2: VkBool32, textureCompressionASTC_HDR: VkBool32, shaderZeroInitializeWorkgroupMemory: VkBool32, dynamicRendering: VkBool32, shaderIntegerDotProduct: VkBool32, maintenance4: VkBool32) =
                {
                    sType = 53u
                    pNext = pNext
                    robustImageAccess = robustImageAccess
                    inlineUniformBlock = inlineUniformBlock
                    descriptorBindingInlineUniformBlockUpdateAfterBind = descriptorBindingInlineUniformBlockUpdateAfterBind
                    pipelineCreationCacheControl = pipelineCreationCacheControl
                    privateData = privateData
                    shaderDemoteToHelperInvocation = shaderDemoteToHelperInvocation
                    shaderTerminateInvocation = shaderTerminateInvocation
                    subgroupSizeControl = subgroupSizeControl
                    computeFullSubgroups = computeFullSubgroups
                    synchronization2 = synchronization2
                    textureCompressionASTC_HDR = textureCompressionASTC_HDR
                    shaderZeroInitializeWorkgroupMemory = shaderZeroInitializeWorkgroupMemory
                    dynamicRendering = dynamicRendering
                    shaderIntegerDotProduct = shaderIntegerDotProduct
                    maintenance4 = maintenance4
                }

            new(robustImageAccess: VkBool32, inlineUniformBlock: VkBool32, descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32, pipelineCreationCacheControl: VkBool32, privateData: VkBool32, shaderDemoteToHelperInvocation: VkBool32, shaderTerminateInvocation: VkBool32, subgroupSizeControl: VkBool32, computeFullSubgroups: VkBool32, synchronization2: VkBool32, textureCompressionASTC_HDR: VkBool32, shaderZeroInitializeWorkgroupMemory: VkBool32, dynamicRendering: VkBool32, shaderIntegerDotProduct: VkBool32, maintenance4: VkBool32) =
                VkPhysicalDeviceVulkan13Features(Unchecked.defaultof<nativeint>, robustImageAccess, inlineUniformBlock, descriptorBindingInlineUniformBlockUpdateAfterBind, pipelineCreationCacheControl, privateData, shaderDemoteToHelperInvocation, shaderTerminateInvocation, subgroupSizeControl, computeFullSubgroups, synchronization2, textureCompressionASTC_HDR, shaderZeroInitializeWorkgroupMemory, dynamicRendering, shaderIntegerDotProduct, maintenance4)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.robustImageAccess = Unchecked.defaultof<VkBool32> && x.inlineUniformBlock = Unchecked.defaultof<VkBool32> && x.descriptorBindingInlineUniformBlockUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.pipelineCreationCacheControl = Unchecked.defaultof<VkBool32> && x.privateData = Unchecked.defaultof<VkBool32> && x.shaderDemoteToHelperInvocation = Unchecked.defaultof<VkBool32> && x.shaderTerminateInvocation = Unchecked.defaultof<VkBool32> && x.subgroupSizeControl = Unchecked.defaultof<VkBool32> && x.computeFullSubgroups = Unchecked.defaultof<VkBool32> && x.synchronization2 = Unchecked.defaultof<VkBool32> && x.textureCompressionASTC_HDR = Unchecked.defaultof<VkBool32> && x.shaderZeroInitializeWorkgroupMemory = Unchecked.defaultof<VkBool32> && x.dynamicRendering = Unchecked.defaultof<VkBool32> && x.shaderIntegerDotProduct = Unchecked.defaultof<VkBool32> && x.maintenance4 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVulkan13Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "robustImageAccess = %A" x.robustImageAccess
                    sprintf "inlineUniformBlock = %A" x.inlineUniformBlock
                    sprintf "descriptorBindingInlineUniformBlockUpdateAfterBind = %A" x.descriptorBindingInlineUniformBlockUpdateAfterBind
                    sprintf "pipelineCreationCacheControl = %A" x.pipelineCreationCacheControl
                    sprintf "privateData = %A" x.privateData
                    sprintf "shaderDemoteToHelperInvocation = %A" x.shaderDemoteToHelperInvocation
                    sprintf "shaderTerminateInvocation = %A" x.shaderTerminateInvocation
                    sprintf "subgroupSizeControl = %A" x.subgroupSizeControl
                    sprintf "computeFullSubgroups = %A" x.computeFullSubgroups
                    sprintf "synchronization2 = %A" x.synchronization2
                    sprintf "textureCompressionASTC_HDR = %A" x.textureCompressionASTC_HDR
                    sprintf "shaderZeroInitializeWorkgroupMemory = %A" x.shaderZeroInitializeWorkgroupMemory
                    sprintf "dynamicRendering = %A" x.dynamicRendering
                    sprintf "shaderIntegerDotProduct = %A" x.shaderIntegerDotProduct
                    sprintf "maintenance4 = %A" x.maintenance4
                ] |> sprintf "VkPhysicalDeviceVulkan13Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan13Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public minSubgroupSize : uint32
            val mutable public maxSubgroupSize : uint32
            val mutable public maxComputeWorkgroupSubgroups : uint32
            val mutable public requiredSubgroupSizeStages : VkShaderStageFlags
            val mutable public maxInlineUniformBlockSize : uint32
            val mutable public maxPerStageDescriptorInlineUniformBlocks : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks : uint32
            val mutable public maxDescriptorSetInlineUniformBlocks : uint32
            val mutable public maxDescriptorSetUpdateAfterBindInlineUniformBlocks : uint32
            val mutable public maxInlineUniformTotalSize : uint32
            val mutable public integerDotProduct8BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct8BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct8BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct4x8BitPackedUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct4x8BitPackedSignedAccelerated : VkBool32
            val mutable public integerDotProduct4x8BitPackedMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct16BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct16BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct16BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct32BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct32BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct32BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct64BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct64BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct64BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating8BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating8BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating16BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating16BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating32BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating32BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating64BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating64BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated : VkBool32
            val mutable public storageTexelBufferOffsetAlignmentBytes : VkDeviceSize
            val mutable public storageTexelBufferOffsetSingleTexelAlignment : VkBool32
            val mutable public uniformTexelBufferOffsetAlignmentBytes : VkDeviceSize
            val mutable public uniformTexelBufferOffsetSingleTexelAlignment : VkBool32
            val mutable public maxBufferSize : VkDeviceSize

            new(pNext: nativeint, minSubgroupSize: uint32, maxSubgroupSize: uint32, maxComputeWorkgroupSubgroups: uint32, requiredSubgroupSizeStages: VkShaderStageFlags, maxInlineUniformBlockSize: uint32, maxPerStageDescriptorInlineUniformBlocks: uint32, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: uint32, maxDescriptorSetInlineUniformBlocks: uint32, maxDescriptorSetUpdateAfterBindInlineUniformBlocks: uint32, maxInlineUniformTotalSize: uint32, integerDotProduct8BitUnsignedAccelerated: VkBool32, integerDotProduct8BitSignedAccelerated: VkBool32, integerDotProduct8BitMixedSignednessAccelerated: VkBool32, integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32, integerDotProduct4x8BitPackedSignedAccelerated: VkBool32, integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32, integerDotProduct16BitUnsignedAccelerated: VkBool32, integerDotProduct16BitSignedAccelerated: VkBool32, integerDotProduct16BitMixedSignednessAccelerated: VkBool32, integerDotProduct32BitUnsignedAccelerated: VkBool32, integerDotProduct32BitSignedAccelerated: VkBool32, integerDotProduct32BitMixedSignednessAccelerated: VkBool32, integerDotProduct64BitUnsignedAccelerated: VkBool32, integerDotProduct64BitSignedAccelerated: VkBool32, integerDotProduct64BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32, storageTexelBufferOffsetAlignmentBytes: VkDeviceSize, storageTexelBufferOffsetSingleTexelAlignment: VkBool32, uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize, uniformTexelBufferOffsetSingleTexelAlignment: VkBool32, maxBufferSize: VkDeviceSize) =
                {
                    sType = 54u
                    pNext = pNext
                    minSubgroupSize = minSubgroupSize
                    maxSubgroupSize = maxSubgroupSize
                    maxComputeWorkgroupSubgroups = maxComputeWorkgroupSubgroups
                    requiredSubgroupSizeStages = requiredSubgroupSizeStages
                    maxInlineUniformBlockSize = maxInlineUniformBlockSize
                    maxPerStageDescriptorInlineUniformBlocks = maxPerStageDescriptorInlineUniformBlocks
                    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
                    maxDescriptorSetInlineUniformBlocks = maxDescriptorSetInlineUniformBlocks
                    maxDescriptorSetUpdateAfterBindInlineUniformBlocks = maxDescriptorSetUpdateAfterBindInlineUniformBlocks
                    maxInlineUniformTotalSize = maxInlineUniformTotalSize
                    integerDotProduct8BitUnsignedAccelerated = integerDotProduct8BitUnsignedAccelerated
                    integerDotProduct8BitSignedAccelerated = integerDotProduct8BitSignedAccelerated
                    integerDotProduct8BitMixedSignednessAccelerated = integerDotProduct8BitMixedSignednessAccelerated
                    integerDotProduct4x8BitPackedUnsignedAccelerated = integerDotProduct4x8BitPackedUnsignedAccelerated
                    integerDotProduct4x8BitPackedSignedAccelerated = integerDotProduct4x8BitPackedSignedAccelerated
                    integerDotProduct4x8BitPackedMixedSignednessAccelerated = integerDotProduct4x8BitPackedMixedSignednessAccelerated
                    integerDotProduct16BitUnsignedAccelerated = integerDotProduct16BitUnsignedAccelerated
                    integerDotProduct16BitSignedAccelerated = integerDotProduct16BitSignedAccelerated
                    integerDotProduct16BitMixedSignednessAccelerated = integerDotProduct16BitMixedSignednessAccelerated
                    integerDotProduct32BitUnsignedAccelerated = integerDotProduct32BitUnsignedAccelerated
                    integerDotProduct32BitSignedAccelerated = integerDotProduct32BitSignedAccelerated
                    integerDotProduct32BitMixedSignednessAccelerated = integerDotProduct32BitMixedSignednessAccelerated
                    integerDotProduct64BitUnsignedAccelerated = integerDotProduct64BitUnsignedAccelerated
                    integerDotProduct64BitSignedAccelerated = integerDotProduct64BitSignedAccelerated
                    integerDotProduct64BitMixedSignednessAccelerated = integerDotProduct64BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = integerDotProductAccumulatingSaturating8BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating8BitSignedAccelerated = integerDotProductAccumulatingSaturating8BitSignedAccelerated
                    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated
                    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated
                    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = integerDotProductAccumulatingSaturating16BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating16BitSignedAccelerated = integerDotProductAccumulatingSaturating16BitSignedAccelerated
                    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = integerDotProductAccumulatingSaturating32BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating32BitSignedAccelerated = integerDotProductAccumulatingSaturating32BitSignedAccelerated
                    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = integerDotProductAccumulatingSaturating64BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating64BitSignedAccelerated = integerDotProductAccumulatingSaturating64BitSignedAccelerated
                    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated
                    storageTexelBufferOffsetAlignmentBytes = storageTexelBufferOffsetAlignmentBytes
                    storageTexelBufferOffsetSingleTexelAlignment = storageTexelBufferOffsetSingleTexelAlignment
                    uniformTexelBufferOffsetAlignmentBytes = uniformTexelBufferOffsetAlignmentBytes
                    uniformTexelBufferOffsetSingleTexelAlignment = uniformTexelBufferOffsetSingleTexelAlignment
                    maxBufferSize = maxBufferSize
                }

            new(minSubgroupSize: uint32, maxSubgroupSize: uint32, maxComputeWorkgroupSubgroups: uint32, requiredSubgroupSizeStages: VkShaderStageFlags, maxInlineUniformBlockSize: uint32, maxPerStageDescriptorInlineUniformBlocks: uint32, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: uint32, maxDescriptorSetInlineUniformBlocks: uint32, maxDescriptorSetUpdateAfterBindInlineUniformBlocks: uint32, maxInlineUniformTotalSize: uint32, integerDotProduct8BitUnsignedAccelerated: VkBool32, integerDotProduct8BitSignedAccelerated: VkBool32, integerDotProduct8BitMixedSignednessAccelerated: VkBool32, integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32, integerDotProduct4x8BitPackedSignedAccelerated: VkBool32, integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32, integerDotProduct16BitUnsignedAccelerated: VkBool32, integerDotProduct16BitSignedAccelerated: VkBool32, integerDotProduct16BitMixedSignednessAccelerated: VkBool32, integerDotProduct32BitUnsignedAccelerated: VkBool32, integerDotProduct32BitSignedAccelerated: VkBool32, integerDotProduct32BitMixedSignednessAccelerated: VkBool32, integerDotProduct64BitUnsignedAccelerated: VkBool32, integerDotProduct64BitSignedAccelerated: VkBool32, integerDotProduct64BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32, storageTexelBufferOffsetAlignmentBytes: VkDeviceSize, storageTexelBufferOffsetSingleTexelAlignment: VkBool32, uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize, uniformTexelBufferOffsetSingleTexelAlignment: VkBool32, maxBufferSize: VkDeviceSize) =
                VkPhysicalDeviceVulkan13Properties(Unchecked.defaultof<nativeint>, minSubgroupSize, maxSubgroupSize, maxComputeWorkgroupSubgroups, requiredSubgroupSizeStages, maxInlineUniformBlockSize, maxPerStageDescriptorInlineUniformBlocks, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, maxDescriptorSetInlineUniformBlocks, maxDescriptorSetUpdateAfterBindInlineUniformBlocks, maxInlineUniformTotalSize, integerDotProduct8BitUnsignedAccelerated, integerDotProduct8BitSignedAccelerated, integerDotProduct8BitMixedSignednessAccelerated, integerDotProduct4x8BitPackedUnsignedAccelerated, integerDotProduct4x8BitPackedSignedAccelerated, integerDotProduct4x8BitPackedMixedSignednessAccelerated, integerDotProduct16BitUnsignedAccelerated, integerDotProduct16BitSignedAccelerated, integerDotProduct16BitMixedSignednessAccelerated, integerDotProduct32BitUnsignedAccelerated, integerDotProduct32BitSignedAccelerated, integerDotProduct32BitMixedSignednessAccelerated, integerDotProduct64BitUnsignedAccelerated, integerDotProduct64BitSignedAccelerated, integerDotProduct64BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, integerDotProductAccumulatingSaturating8BitSignedAccelerated, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, integerDotProductAccumulatingSaturating16BitSignedAccelerated, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, integerDotProductAccumulatingSaturating32BitSignedAccelerated, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, integerDotProductAccumulatingSaturating64BitSignedAccelerated, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated, storageTexelBufferOffsetAlignmentBytes, storageTexelBufferOffsetSingleTexelAlignment, uniformTexelBufferOffsetAlignmentBytes, uniformTexelBufferOffsetSingleTexelAlignment, maxBufferSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.minSubgroupSize = Unchecked.defaultof<uint32> && x.maxSubgroupSize = Unchecked.defaultof<uint32> && x.maxComputeWorkgroupSubgroups = Unchecked.defaultof<uint32> && x.requiredSubgroupSizeStages = Unchecked.defaultof<VkShaderStageFlags> && x.maxInlineUniformBlockSize = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxDescriptorSetInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxInlineUniformTotalSize = Unchecked.defaultof<uint32> && x.integerDotProduct8BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct8BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct8BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct4x8BitPackedUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct4x8BitPackedSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct4x8BitPackedMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct16BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct16BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct16BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct32BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct32BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct32BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct64BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct64BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct64BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating8BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating16BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating32BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating64BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.storageTexelBufferOffsetAlignmentBytes = Unchecked.defaultof<VkDeviceSize> && x.storageTexelBufferOffsetSingleTexelAlignment = Unchecked.defaultof<VkBool32> && x.uniformTexelBufferOffsetAlignmentBytes = Unchecked.defaultof<VkDeviceSize> && x.uniformTexelBufferOffsetSingleTexelAlignment = Unchecked.defaultof<VkBool32> && x.maxBufferSize = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkPhysicalDeviceVulkan13Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "minSubgroupSize = %A" x.minSubgroupSize
                    sprintf "maxSubgroupSize = %A" x.maxSubgroupSize
                    sprintf "maxComputeWorkgroupSubgroups = %A" x.maxComputeWorkgroupSubgroups
                    sprintf "requiredSubgroupSizeStages = %A" x.requiredSubgroupSizeStages
                    sprintf "maxInlineUniformBlockSize = %A" x.maxInlineUniformBlockSize
                    sprintf "maxPerStageDescriptorInlineUniformBlocks = %A" x.maxPerStageDescriptorInlineUniformBlocks
                    sprintf "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = %A" x.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
                    sprintf "maxDescriptorSetInlineUniformBlocks = %A" x.maxDescriptorSetInlineUniformBlocks
                    sprintf "maxDescriptorSetUpdateAfterBindInlineUniformBlocks = %A" x.maxDescriptorSetUpdateAfterBindInlineUniformBlocks
                    sprintf "maxInlineUniformTotalSize = %A" x.maxInlineUniformTotalSize
                    sprintf "integerDotProduct8BitUnsignedAccelerated = %A" x.integerDotProduct8BitUnsignedAccelerated
                    sprintf "integerDotProduct8BitSignedAccelerated = %A" x.integerDotProduct8BitSignedAccelerated
                    sprintf "integerDotProduct8BitMixedSignednessAccelerated = %A" x.integerDotProduct8BitMixedSignednessAccelerated
                    sprintf "integerDotProduct4x8BitPackedUnsignedAccelerated = %A" x.integerDotProduct4x8BitPackedUnsignedAccelerated
                    sprintf "integerDotProduct4x8BitPackedSignedAccelerated = %A" x.integerDotProduct4x8BitPackedSignedAccelerated
                    sprintf "integerDotProduct4x8BitPackedMixedSignednessAccelerated = %A" x.integerDotProduct4x8BitPackedMixedSignednessAccelerated
                    sprintf "integerDotProduct16BitUnsignedAccelerated = %A" x.integerDotProduct16BitUnsignedAccelerated
                    sprintf "integerDotProduct16BitSignedAccelerated = %A" x.integerDotProduct16BitSignedAccelerated
                    sprintf "integerDotProduct16BitMixedSignednessAccelerated = %A" x.integerDotProduct16BitMixedSignednessAccelerated
                    sprintf "integerDotProduct32BitUnsignedAccelerated = %A" x.integerDotProduct32BitUnsignedAccelerated
                    sprintf "integerDotProduct32BitSignedAccelerated = %A" x.integerDotProduct32BitSignedAccelerated
                    sprintf "integerDotProduct32BitMixedSignednessAccelerated = %A" x.integerDotProduct32BitMixedSignednessAccelerated
                    sprintf "integerDotProduct64BitUnsignedAccelerated = %A" x.integerDotProduct64BitUnsignedAccelerated
                    sprintf "integerDotProduct64BitSignedAccelerated = %A" x.integerDotProduct64BitSignedAccelerated
                    sprintf "integerDotProduct64BitMixedSignednessAccelerated = %A" x.integerDotProduct64BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating8BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating8BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating16BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating16BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating32BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating32BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating64BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating64BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated
                    sprintf "storageTexelBufferOffsetAlignmentBytes = %A" x.storageTexelBufferOffsetAlignmentBytes
                    sprintf "storageTexelBufferOffsetSingleTexelAlignment = %A" x.storageTexelBufferOffsetSingleTexelAlignment
                    sprintf "uniformTexelBufferOffsetAlignmentBytes = %A" x.uniformTexelBufferOffsetAlignmentBytes
                    sprintf "uniformTexelBufferOffsetSingleTexelAlignment = %A" x.uniformTexelBufferOffsetSingleTexelAlignment
                    sprintf "maxBufferSize = %A" x.maxBufferSize
                ] |> sprintf "VkPhysicalDeviceVulkan13Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderZeroInitializeWorkgroupMemory : VkBool32

            new(pNext: nativeint, shaderZeroInitializeWorkgroupMemory: VkBool32) =
                {
                    sType = 1000325000u
                    pNext = pNext
                    shaderZeroInitializeWorkgroupMemory = shaderZeroInitializeWorkgroupMemory
                }

            new(shaderZeroInitializeWorkgroupMemory: VkBool32) =
                VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(Unchecked.defaultof<nativeint>, shaderZeroInitializeWorkgroupMemory)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderZeroInitializeWorkgroupMemory = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderZeroInitializeWorkgroupMemory = %A" x.shaderZeroInitializeWorkgroupMemory
                ] |> sprintf "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineCreationFeedback =
        struct
            val mutable public flags : VkPipelineCreationFeedbackFlags
            val mutable public duration : uint64

            new(flags: VkPipelineCreationFeedbackFlags, duration: uint64) =
                {
                    flags = flags
                    duration = duration
                }

            member x.IsEmpty =
                x.flags = Unchecked.defaultof<VkPipelineCreationFeedbackFlags> && x.duration = Unchecked.defaultof<uint64>

            static member Empty =
                VkPipelineCreationFeedback(Unchecked.defaultof<VkPipelineCreationFeedbackFlags>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "flags = %A" x.flags
                    sprintf "duration = %A" x.duration
                ] |> sprintf "VkPipelineCreationFeedback { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineCreationFeedbackCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pPipelineCreationFeedback : nativeptr<VkPipelineCreationFeedback>
            val mutable public pipelineStageCreationFeedbackCount : uint32
            val mutable public pPipelineStageCreationFeedbacks : nativeptr<VkPipelineCreationFeedback>

            new(pNext: nativeint, pPipelineCreationFeedback: nativeptr<VkPipelineCreationFeedback>, pipelineStageCreationFeedbackCount: uint32, pPipelineStageCreationFeedbacks: nativeptr<VkPipelineCreationFeedback>) =
                {
                    sType = 1000192000u
                    pNext = pNext
                    pPipelineCreationFeedback = pPipelineCreationFeedback
                    pipelineStageCreationFeedbackCount = pipelineStageCreationFeedbackCount
                    pPipelineStageCreationFeedbacks = pPipelineStageCreationFeedbacks
                }

            new(pPipelineCreationFeedback: nativeptr<VkPipelineCreationFeedback>, pipelineStageCreationFeedbackCount: uint32, pPipelineStageCreationFeedbacks: nativeptr<VkPipelineCreationFeedback>) =
                VkPipelineCreationFeedbackCreateInfo(Unchecked.defaultof<nativeint>, pPipelineCreationFeedback, pipelineStageCreationFeedbackCount, pPipelineStageCreationFeedbacks)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pPipelineCreationFeedback = Unchecked.defaultof<nativeptr<VkPipelineCreationFeedback>> && x.pipelineStageCreationFeedbackCount = Unchecked.defaultof<uint32> && x.pPipelineStageCreationFeedbacks = Unchecked.defaultof<nativeptr<VkPipelineCreationFeedback>>

            static member Empty =
                VkPipelineCreationFeedbackCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkPipelineCreationFeedback>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineCreationFeedback>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "pPipelineCreationFeedback = %A" x.pPipelineCreationFeedback
                    sprintf "pipelineStageCreationFeedbackCount = %A" x.pipelineStageCreationFeedbackCount
                    sprintf "pPipelineStageCreationFeedbacks = %A" x.pPipelineStageCreationFeedbacks
                ] |> sprintf "VkPipelineCreationFeedbackCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineRenderingCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public viewMask : uint32
            val mutable public colorAttachmentCount : uint32
            val mutable public pColorAttachmentFormats : nativeptr<VkFormat>
            val mutable public depthAttachmentFormat : VkFormat
            val mutable public stencilAttachmentFormat : VkFormat

            new(pNext: nativeint, viewMask: uint32, colorAttachmentCount: uint32, pColorAttachmentFormats: nativeptr<VkFormat>, depthAttachmentFormat: VkFormat, stencilAttachmentFormat: VkFormat) =
                {
                    sType = 1000044002u
                    pNext = pNext
                    viewMask = viewMask
                    colorAttachmentCount = colorAttachmentCount
                    pColorAttachmentFormats = pColorAttachmentFormats
                    depthAttachmentFormat = depthAttachmentFormat
                    stencilAttachmentFormat = stencilAttachmentFormat
                }

            new(viewMask: uint32, colorAttachmentCount: uint32, pColorAttachmentFormats: nativeptr<VkFormat>, depthAttachmentFormat: VkFormat, stencilAttachmentFormat: VkFormat) =
                VkPipelineRenderingCreateInfo(Unchecked.defaultof<nativeint>, viewMask, colorAttachmentCount, pColorAttachmentFormats, depthAttachmentFormat, stencilAttachmentFormat)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.viewMask = Unchecked.defaultof<uint32> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachmentFormats = Unchecked.defaultof<nativeptr<VkFormat>> && x.depthAttachmentFormat = Unchecked.defaultof<VkFormat> && x.stencilAttachmentFormat = Unchecked.defaultof<VkFormat>

            static member Empty =
                VkPipelineRenderingCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkFormat>>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkFormat>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "viewMask = %A" x.viewMask
                    sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                    sprintf "pColorAttachmentFormats = %A" x.pColorAttachmentFormats
                    sprintf "depthAttachmentFormat = %A" x.depthAttachmentFormat
                    sprintf "stencilAttachmentFormat = %A" x.stencilAttachmentFormat
                ] |> sprintf "VkPipelineRenderingCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineShaderStageRequiredSubgroupSizeCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public requiredSubgroupSize : uint32

            new(pNext: nativeint, requiredSubgroupSize: uint32) =
                {
                    sType = 1000225001u
                    pNext = pNext
                    requiredSubgroupSize = requiredSubgroupSize
                }

            new(requiredSubgroupSize: uint32) =
                VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(Unchecked.defaultof<nativeint>, requiredSubgroupSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.requiredSubgroupSize = Unchecked.defaultof<uint32>

            static member Empty =
                VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "requiredSubgroupSize = %A" x.requiredSubgroupSize
                ] |> sprintf "VkPipelineShaderStageRequiredSubgroupSizeCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPrivateDataSlotCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPrivateDataSlotCreateFlags

            new(pNext: nativeint, flags: VkPrivateDataSlotCreateFlags) =
                {
                    sType = 1000295002u
                    pNext = pNext
                    flags = flags
                }

            new(flags: VkPrivateDataSlotCreateFlags) =
                VkPrivateDataSlotCreateInfo(Unchecked.defaultof<nativeint>, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPrivateDataSlotCreateFlags>

            static member Empty =
                VkPrivateDataSlotCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPrivateDataSlotCreateFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkPrivateDataSlotCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderingAttachmentInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageView : VkImageView
            val mutable public imageLayout : VkImageLayout
            val mutable public resolveMode : Vulkan12.VkResolveModeFlags
            val mutable public resolveImageView : VkImageView
            val mutable public resolveImageLayout : VkImageLayout
            val mutable public loadOp : VkAttachmentLoadOp
            val mutable public storeOp : VkAttachmentStoreOp
            val mutable public clearValue : VkClearValue

            new(pNext: nativeint, imageView: VkImageView, imageLayout: VkImageLayout, resolveMode: Vulkan12.VkResolveModeFlags, resolveImageView: VkImageView, resolveImageLayout: VkImageLayout, loadOp: VkAttachmentLoadOp, storeOp: VkAttachmentStoreOp, clearValue: VkClearValue) =
                {
                    sType = 1000044001u
                    pNext = pNext
                    imageView = imageView
                    imageLayout = imageLayout
                    resolveMode = resolveMode
                    resolveImageView = resolveImageView
                    resolveImageLayout = resolveImageLayout
                    loadOp = loadOp
                    storeOp = storeOp
                    clearValue = clearValue
                }

            new(imageView: VkImageView, imageLayout: VkImageLayout, resolveMode: Vulkan12.VkResolveModeFlags, resolveImageView: VkImageView, resolveImageLayout: VkImageLayout, loadOp: VkAttachmentLoadOp, storeOp: VkAttachmentStoreOp, clearValue: VkClearValue) =
                VkRenderingAttachmentInfo(Unchecked.defaultof<nativeint>, imageView, imageLayout, resolveMode, resolveImageView, resolveImageLayout, loadOp, storeOp, clearValue)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageView = Unchecked.defaultof<VkImageView> && x.imageLayout = Unchecked.defaultof<VkImageLayout> && x.resolveMode = Unchecked.defaultof<Vulkan12.VkResolveModeFlags> && x.resolveImageView = Unchecked.defaultof<VkImageView> && x.resolveImageLayout = Unchecked.defaultof<VkImageLayout> && x.loadOp = Unchecked.defaultof<VkAttachmentLoadOp> && x.storeOp = Unchecked.defaultof<VkAttachmentStoreOp> && x.clearValue = Unchecked.defaultof<VkClearValue>

            static member Empty =
                VkRenderingAttachmentInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<Vulkan12.VkResolveModeFlags>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkAttachmentLoadOp>, Unchecked.defaultof<VkAttachmentStoreOp>, Unchecked.defaultof<VkClearValue>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageView = %A" x.imageView
                    sprintf "imageLayout = %A" x.imageLayout
                    sprintf "resolveMode = %A" x.resolveMode
                    sprintf "resolveImageView = %A" x.resolveImageView
                    sprintf "resolveImageLayout = %A" x.resolveImageLayout
                    sprintf "loadOp = %A" x.loadOp
                    sprintf "storeOp = %A" x.storeOp
                    sprintf "clearValue = %A" x.clearValue
                ] |> sprintf "VkRenderingAttachmentInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderingInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkRenderingFlags
            val mutable public renderArea : VkRect2D
            val mutable public layerCount : uint32
            val mutable public viewMask : uint32
            val mutable public colorAttachmentCount : uint32
            val mutable public pColorAttachments : nativeptr<VkRenderingAttachmentInfo>
            val mutable public pDepthAttachment : nativeptr<VkRenderingAttachmentInfo>
            val mutable public pStencilAttachment : nativeptr<VkRenderingAttachmentInfo>

            new(pNext: nativeint, flags: VkRenderingFlags, renderArea: VkRect2D, layerCount: uint32, viewMask: uint32, colorAttachmentCount: uint32, pColorAttachments: nativeptr<VkRenderingAttachmentInfo>, pDepthAttachment: nativeptr<VkRenderingAttachmentInfo>, pStencilAttachment: nativeptr<VkRenderingAttachmentInfo>) =
                {
                    sType = 1000044000u
                    pNext = pNext
                    flags = flags
                    renderArea = renderArea
                    layerCount = layerCount
                    viewMask = viewMask
                    colorAttachmentCount = colorAttachmentCount
                    pColorAttachments = pColorAttachments
                    pDepthAttachment = pDepthAttachment
                    pStencilAttachment = pStencilAttachment
                }

            new(flags: VkRenderingFlags, renderArea: VkRect2D, layerCount: uint32, viewMask: uint32, colorAttachmentCount: uint32, pColorAttachments: nativeptr<VkRenderingAttachmentInfo>, pDepthAttachment: nativeptr<VkRenderingAttachmentInfo>, pStencilAttachment: nativeptr<VkRenderingAttachmentInfo>) =
                VkRenderingInfo(Unchecked.defaultof<nativeint>, flags, renderArea, layerCount, viewMask, colorAttachmentCount, pColorAttachments, pDepthAttachment, pStencilAttachment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkRenderingFlags> && x.renderArea = Unchecked.defaultof<VkRect2D> && x.layerCount = Unchecked.defaultof<uint32> && x.viewMask = Unchecked.defaultof<uint32> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachments = Unchecked.defaultof<nativeptr<VkRenderingAttachmentInfo>> && x.pDepthAttachment = Unchecked.defaultof<nativeptr<VkRenderingAttachmentInfo>> && x.pStencilAttachment = Unchecked.defaultof<nativeptr<VkRenderingAttachmentInfo>>

            static member Empty =
                VkRenderingInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderingFlags>, Unchecked.defaultof<VkRect2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRenderingAttachmentInfo>>, Unchecked.defaultof<nativeptr<VkRenderingAttachmentInfo>>, Unchecked.defaultof<nativeptr<VkRenderingAttachmentInfo>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "renderArea = %A" x.renderArea
                    sprintf "layerCount = %A" x.layerCount
                    sprintf "viewMask = %A" x.viewMask
                    sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                    sprintf "pColorAttachments = %A" x.pColorAttachments
                    sprintf "pDepthAttachment = %A" x.pDepthAttachment
                    sprintf "pStencilAttachment = %A" x.pStencilAttachment
                ] |> sprintf "VkRenderingInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkResolveImageInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcImage : VkImage
            val mutable public srcImageLayout : VkImageLayout
            val mutable public dstImage : VkImage
            val mutable public dstImageLayout : VkImageLayout
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkImageResolve2>

            new(pNext: nativeint, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<VkImageResolve2>) =
                {
                    sType = 1000337005u
                    pNext = pNext
                    srcImage = srcImage
                    srcImageLayout = srcImageLayout
                    dstImage = dstImage
                    dstImageLayout = dstImageLayout
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<VkImageResolve2>) =
                VkResolveImageInfo2(Unchecked.defaultof<nativeint>, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcImage = Unchecked.defaultof<VkImage> && x.srcImageLayout = Unchecked.defaultof<VkImageLayout> && x.dstImage = Unchecked.defaultof<VkImage> && x.dstImageLayout = Unchecked.defaultof<VkImageLayout> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkImageResolve2>>

            static member Empty =
                VkResolveImageInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageResolve2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcImage = %A" x.srcImage
                    sprintf "srcImageLayout = %A" x.srcImageLayout
                    sprintf "dstImage = %A" x.dstImage
                    sprintf "dstImageLayout = %A" x.dstImageLayout
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkResolveImageInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSemaphoreSubmitInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphore : VkSemaphore
            val mutable public value : uint64
            val mutable public stageMask : VkPipelineStageFlags2
            val mutable public deviceIndex : uint32

            new(pNext: nativeint, semaphore: VkSemaphore, value: uint64, stageMask: VkPipelineStageFlags2, deviceIndex: uint32) =
                {
                    sType = 1000314005u
                    pNext = pNext
                    semaphore = semaphore
                    value = value
                    stageMask = stageMask
                    deviceIndex = deviceIndex
                }

            new(semaphore: VkSemaphore, value: uint64, stageMask: VkPipelineStageFlags2, deviceIndex: uint32) =
                VkSemaphoreSubmitInfo(Unchecked.defaultof<nativeint>, semaphore, value, stageMask, deviceIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.value = Unchecked.defaultof<uint64> && x.stageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.deviceIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkSemaphoreSubmitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphore = %A" x.semaphore
                    sprintf "value = %A" x.value
                    sprintf "stageMask = %A" x.stageMask
                    sprintf "deviceIndex = %A" x.deviceIndex
                ] |> sprintf "VkSemaphoreSubmitInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubmitInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkSubmitFlags
            val mutable public waitSemaphoreInfoCount : uint32
            val mutable public pWaitSemaphoreInfos : nativeptr<VkSemaphoreSubmitInfo>
            val mutable public commandBufferInfoCount : uint32
            val mutable public pCommandBufferInfos : nativeptr<VkCommandBufferSubmitInfo>
            val mutable public signalSemaphoreInfoCount : uint32
            val mutable public pSignalSemaphoreInfos : nativeptr<VkSemaphoreSubmitInfo>

            new(pNext: nativeint, flags: VkSubmitFlags, waitSemaphoreInfoCount: uint32, pWaitSemaphoreInfos: nativeptr<VkSemaphoreSubmitInfo>, commandBufferInfoCount: uint32, pCommandBufferInfos: nativeptr<VkCommandBufferSubmitInfo>, signalSemaphoreInfoCount: uint32, pSignalSemaphoreInfos: nativeptr<VkSemaphoreSubmitInfo>) =
                {
                    sType = 1000314004u
                    pNext = pNext
                    flags = flags
                    waitSemaphoreInfoCount = waitSemaphoreInfoCount
                    pWaitSemaphoreInfos = pWaitSemaphoreInfos
                    commandBufferInfoCount = commandBufferInfoCount
                    pCommandBufferInfos = pCommandBufferInfos
                    signalSemaphoreInfoCount = signalSemaphoreInfoCount
                    pSignalSemaphoreInfos = pSignalSemaphoreInfos
                }

            new(flags: VkSubmitFlags, waitSemaphoreInfoCount: uint32, pWaitSemaphoreInfos: nativeptr<VkSemaphoreSubmitInfo>, commandBufferInfoCount: uint32, pCommandBufferInfos: nativeptr<VkCommandBufferSubmitInfo>, signalSemaphoreInfoCount: uint32, pSignalSemaphoreInfos: nativeptr<VkSemaphoreSubmitInfo>) =
                VkSubmitInfo2(Unchecked.defaultof<nativeint>, flags, waitSemaphoreInfoCount, pWaitSemaphoreInfos, commandBufferInfoCount, pCommandBufferInfos, signalSemaphoreInfoCount, pSignalSemaphoreInfos)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkSubmitFlags> && x.waitSemaphoreInfoCount = Unchecked.defaultof<uint32> && x.pWaitSemaphoreInfos = Unchecked.defaultof<nativeptr<VkSemaphoreSubmitInfo>> && x.commandBufferInfoCount = Unchecked.defaultof<uint32> && x.pCommandBufferInfos = Unchecked.defaultof<nativeptr<VkCommandBufferSubmitInfo>> && x.signalSemaphoreInfoCount = Unchecked.defaultof<uint32> && x.pSignalSemaphoreInfos = Unchecked.defaultof<nativeptr<VkSemaphoreSubmitInfo>>

            static member Empty =
                VkSubmitInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSubmitFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphoreSubmitInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkCommandBufferSubmitInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphoreSubmitInfo>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "waitSemaphoreInfoCount = %A" x.waitSemaphoreInfoCount
                    sprintf "pWaitSemaphoreInfos = %A" x.pWaitSemaphoreInfos
                    sprintf "commandBufferInfoCount = %A" x.commandBufferInfoCount
                    sprintf "pCommandBufferInfos = %A" x.pCommandBufferInfos
                    sprintf "signalSemaphoreInfoCount = %A" x.signalSemaphoreInfoCount
                    sprintf "pSignalSemaphoreInfos = %A" x.pSignalSemaphoreInfos
                ] |> sprintf "VkSubmitInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkWriteDescriptorSetInlineUniformBlock =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public dataSize : uint32
            val mutable public pData : nativeint

            new(pNext: nativeint, dataSize: uint32, pData: nativeint) =
                {
                    sType = 1000138002u
                    pNext = pNext
                    dataSize = dataSize
                    pData = pData
                }

            new(dataSize: uint32, pData: nativeint) =
                VkWriteDescriptorSetInlineUniformBlock(Unchecked.defaultof<nativeint>, dataSize, pData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.dataSize = Unchecked.defaultof<uint32> && x.pData = Unchecked.defaultof<nativeint>

            static member Empty =
                VkWriteDescriptorSetInlineUniformBlock(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "dataSize = %A" x.dataSize
                    sprintf "pData = %A" x.pData
                ] |> sprintf "VkWriteDescriptorSetInlineUniformBlock { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags with
              static member inline None = enum<VkAccessFlags> 0
         type VkAttachmentStoreOp with
              static member inline None = enum<VkAttachmentStoreOp> 1000301000
         type VkDescriptorType with
              static member inline InlineUniformBlock = enum<VkDescriptorType> 1000138000
         type VkDynamicState with
              static member inline CullMode = enum<VkDynamicState> 1000267000
              static member inline FrontFace = enum<VkDynamicState> 1000267001
              static member inline PrimitiveTopology = enum<VkDynamicState> 1000267002
              static member inline ViewportWithCount = enum<VkDynamicState> 1000267003
              static member inline ScissorWithCount = enum<VkDynamicState> 1000267004
              static member inline VertexInputBindingStride = enum<VkDynamicState> 1000267005
              static member inline DepthTestEnable = enum<VkDynamicState> 1000267006
              static member inline DepthWriteEnable = enum<VkDynamicState> 1000267007
              static member inline DepthCompareOp = enum<VkDynamicState> 1000267008
              static member inline DepthBoundsTestEnable = enum<VkDynamicState> 1000267009
              static member inline StencilTestEnable = enum<VkDynamicState> 1000267010
              static member inline StencilOp = enum<VkDynamicState> 1000267011
              static member inline RasterizerDiscardEnable = enum<VkDynamicState> 1000377001
              static member inline DepthBiasEnable = enum<VkDynamicState> 1000377002
              static member inline PrimitiveRestartEnable = enum<VkDynamicState> 1000377004
         type VkEventCreateFlags with
              static member inline DeviceOnlyBit = enum<VkEventCreateFlags> 0x00000001
         type VkFormat with
              static member inline G8B8r82plane444Unorm = enum<VkFormat> 1000330000
              static member inline G10x6B10x6r10x62plane444Unorm3pack16 = enum<VkFormat> 1000330001
              static member inline G12x4B12x4r12x42plane444Unorm3pack16 = enum<VkFormat> 1000330002
              static member inline G16B16r162plane444Unorm = enum<VkFormat> 1000330003
              static member inline A4r4g4b4UnormPack16 = enum<VkFormat> 1000340000
              static member inline A4b4g4r4UnormPack16 = enum<VkFormat> 1000340001
              static member inline Astc44SfloatBlock = enum<VkFormat> 1000066000
              static member inline Astc54SfloatBlock = enum<VkFormat> 1000066001
              static member inline Astc55SfloatBlock = enum<VkFormat> 1000066002
              static member inline Astc65SfloatBlock = enum<VkFormat> 1000066003
              static member inline Astc66SfloatBlock = enum<VkFormat> 1000066004
              static member inline Astc85SfloatBlock = enum<VkFormat> 1000066005
              static member inline Astc86SfloatBlock = enum<VkFormat> 1000066006
              static member inline Astc88SfloatBlock = enum<VkFormat> 1000066007
              static member inline Astc105SfloatBlock = enum<VkFormat> 1000066008
              static member inline Astc106SfloatBlock = enum<VkFormat> 1000066009
              static member inline Astc108SfloatBlock = enum<VkFormat> 1000066010
              static member inline Astc1010SfloatBlock = enum<VkFormat> 1000066011
              static member inline Astc1210SfloatBlock = enum<VkFormat> 1000066012
              static member inline Astc1212SfloatBlock = enum<VkFormat> 1000066013
         type VkFormatFeatureFlags2 with
              /// This is an interaction with EXT_filter_cubic, though not tagged that way
              static member inline FormatFeature2SampledImageFilterCubicBit = enum<VkFormatFeatureFlags2> 0x00002000
         type VkImageAspectFlags with
              static member inline None = enum<VkImageAspectFlags> 0
         type VkImageLayout with
              static member inline ReadOnlyOptimal = enum<VkImageLayout> 1000314000
              static member inline AttachmentOptimal = enum<VkImageLayout> 1000314001
         type VkObjectType with
              static member inline PrivateDataSlot = enum<VkObjectType> 1000295000
         type VkPipelineCacheCreateFlags with
              static member inline ExternallySynchronizedBit = enum<VkPipelineCacheCreateFlags> 0x00000001
         type VkPipelineCreateFlags with
              static member inline FailOnPipelineCompileRequiredBit = enum<VkPipelineCreateFlags> 0x00000100
              static member inline EarlyReturnOnFailureBit = enum<VkPipelineCreateFlags> 0x00000200
         type VkPipelineShaderStageCreateFlags with
              static member inline AllowVaryingSubgroupSizeBit = enum<VkPipelineShaderStageCreateFlags> 0x00000001
              static member inline RequireFullSubgroupsBit = enum<VkPipelineShaderStageCreateFlags> 0x00000002
         type VkPipelineStageFlags with
              static member inline None = enum<VkPipelineStageFlags> 0
         type VkResult with
              static member inline PipelineCompileRequired = enum<VkResult> 1000297000

    module VkRaw =
        open VkRaw

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkCreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* pAllocator)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64 objectHandle, VkPrivateDataSlot privateDataSlot, uint64 data)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64 objectHandle, VkPrivateDataSlot privateDataSlot, uint64* pData)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkDependencyInfo* pDependencyInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32 eventCount, VkEvent* pEvents, VkDependencyInfo* pDependencyInfos)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32 query)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkQueueSubmit2(VkQueue queue, uint32 submitCount, VkSubmitInfo2* pSubmits, VkFence fence)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdCopyImage2(VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdBlitImage2(VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdResolveImage2(VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdBeginRendering(VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdEndRendering(VkCommandBuffer commandBuffer)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32 viewportCount, VkViewport* pViewports)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32 scissorCount, VkRect2D* pScissors)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32 firstBinding, uint32 bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDeviceBufferMemoryRequirements(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, Vulkan11.VkMemoryRequirements2* pMemoryRequirements)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDeviceImageMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, Vulkan11.VkMemoryRequirements2* pMemoryRequirements)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, uint32* pSparseMemoryRequirementCount, Vulkan11.VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)



module Vulkan14 =
    type VkQueueGlobalPriority =
        | Low = 128
        | Medium = 256
        | High = 512
        | Realtime = 1024

    /// Array of 16 VkQueueGlobalPriority values.
    [<StructLayout(LayoutKind.Explicit, Size = 64)>]
    type VkQueueGlobalPriority_16 =
        struct
            [<FieldOffset(0)>]
            val mutable public First : VkQueueGlobalPriority

            member x.Item
                with get (i : int) : VkQueueGlobalPriority =
                    if i < 0 || i > 15 then raise <| IndexOutOfRangeException()
                    let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                    NativePtr.get ptr i
                and set (i : int) (value : VkQueueGlobalPriority) =
                    if i < 0 || i > 15 then raise <| IndexOutOfRangeException()
                    let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                    NativePtr.set ptr i value

            member x.Length = 16

            interface System.Collections.IEnumerable with
                member x.GetEnumerator() = let x = x in (Seq.init 16 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
            interface System.Collections.Generic.IEnumerable<VkQueueGlobalPriority> with
                member x.GetEnumerator() = let x = x in (Seq.init 16 (fun i -> x.[i])).GetEnumerator()
        end
    type VkLineRasterizationMode =
        | Default = 0
        | Rectangular = 1
        | Bresenham = 2
        | RectangularSmooth = 3

    [<Flags>]
    type VkMemoryUnmapFlags =
        | All = 0
        | None = 0

    [<Flags>]
    type VkPipelineCreateFlags2 =
        | All = 1207960351
        | None = 0
        | PipelineCreate2DisableOptimizationBit = 0x00000001
        | PipelineCreate2AllowDerivativesBit = 0x00000002
        | PipelineCreate2DerivativeBit = 0x00000004
        | PipelineCreate2ViewIndexFromDeviceIndexBit = 0x00000008
        | PipelineCreate2DispatchBaseBit = 0x00000010
        | PipelineCreate2FailOnPipelineCompileRequiredBit = 0x00000100
        | PipelineCreate2EarlyReturnOnFailureBit = 0x00000200
        | PipelineCreate2NoProtectedAccessBit = 0x08000000
        | PipelineCreate2ProtectedAccessOnlyBit = 0x40000000

    [<Flags>]
    type VkBufferUsageFlags2 =
        | All = 511
        | None = 0
        | BufferUsage2TransferSrcBit = 0x00000001
        | BufferUsage2TransferDstBit = 0x00000002
        | BufferUsage2UniformTexelBufferBit = 0x00000004
        | BufferUsage2StorageTexelBufferBit = 0x00000008
        | BufferUsage2UniformBufferBit = 0x00000010
        | BufferUsage2StorageBufferBit = 0x00000020
        | BufferUsage2IndexBufferBit = 0x00000040
        | BufferUsage2VertexBufferBit = 0x00000080
        | BufferUsage2IndirectBufferBit = 0x00000100

    type VkPipelineRobustnessBufferBehavior =
        | DeviceDefault = 0
        | Disabled = 1
        | RobustBufferAccess = 2
        | RobustBufferAccess2 = 3

    type VkPipelineRobustnessImageBehavior =
        | DeviceDefault = 0
        | Disabled = 1
        | RobustImageAccess = 2
        | RobustImageAccess2 = 3

    [<Flags>]
    type VkHostImageCopyFlags =
        | All = 1
        | None = 0
        | Memcpy = 0x00000001


    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindDescriptorSetsInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stageFlags : VkShaderStageFlags
            val mutable public layout : VkPipelineLayout
            val mutable public firstSet : uint32
            val mutable public descriptorSetCount : uint32
            val mutable public pDescriptorSets : nativeptr<VkDescriptorSet>
            val mutable public dynamicOffsetCount : uint32
            val mutable public pDynamicOffsets : nativeptr<uint32>

            new(pNext: nativeint, stageFlags: VkShaderStageFlags, layout: VkPipelineLayout, firstSet: uint32, descriptorSetCount: uint32, pDescriptorSets: nativeptr<VkDescriptorSet>, dynamicOffsetCount: uint32, pDynamicOffsets: nativeptr<uint32>) =
                {
                    sType = 1000545003u
                    pNext = pNext
                    stageFlags = stageFlags
                    layout = layout
                    firstSet = firstSet
                    descriptorSetCount = descriptorSetCount
                    pDescriptorSets = pDescriptorSets
                    dynamicOffsetCount = dynamicOffsetCount
                    pDynamicOffsets = pDynamicOffsets
                }

            new(stageFlags: VkShaderStageFlags, layout: VkPipelineLayout, firstSet: uint32, descriptorSetCount: uint32, pDescriptorSets: nativeptr<VkDescriptorSet>, dynamicOffsetCount: uint32, pDynamicOffsets: nativeptr<uint32>) =
                VkBindDescriptorSetsInfo(Unchecked.defaultof<nativeint>, stageFlags, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stageFlags = Unchecked.defaultof<VkShaderStageFlags> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.firstSet = Unchecked.defaultof<uint32> && x.descriptorSetCount = Unchecked.defaultof<uint32> && x.pDescriptorSets = Unchecked.defaultof<nativeptr<VkDescriptorSet>> && x.dynamicOffsetCount = Unchecked.defaultof<uint32> && x.pDynamicOffsets = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkBindDescriptorSetsInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorSet>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "stageFlags = %A" x.stageFlags
                    sprintf "layout = %A" x.layout
                    sprintf "firstSet = %A" x.firstSet
                    sprintf "descriptorSetCount = %A" x.descriptorSetCount
                    sprintf "pDescriptorSets = %A" x.pDescriptorSets
                    sprintf "dynamicOffsetCount = %A" x.dynamicOffsetCount
                    sprintf "pDynamicOffsets = %A" x.pDynamicOffsets
                ] |> sprintf "VkBindDescriptorSetsInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindMemoryStatus =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pResult : nativeptr<VkResult>

            new(pNext: nativeint, pResult: nativeptr<VkResult>) =
                {
                    sType = 1000545002u
                    pNext = pNext
                    pResult = pResult
                }

            new(pResult: nativeptr<VkResult>) =
                VkBindMemoryStatus(Unchecked.defaultof<nativeint>, pResult)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pResult = Unchecked.defaultof<nativeptr<VkResult>>

            static member Empty =
                VkBindMemoryStatus(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkResult>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "pResult = %A" x.pResult
                ] |> sprintf "VkBindMemoryStatus { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferUsageFlags2CreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public usage : VkBufferUsageFlags2

            new(pNext: nativeint, usage: VkBufferUsageFlags2) =
                {
                    sType = 1000470006u
                    pNext = pNext
                    usage = usage
                }

            new(usage: VkBufferUsageFlags2) =
                VkBufferUsageFlags2CreateInfo(Unchecked.defaultof<nativeint>, usage)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.usage = Unchecked.defaultof<VkBufferUsageFlags2>

            static member Empty =
                VkBufferUsageFlags2CreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferUsageFlags2>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "usage = %A" x.usage
                ] |> sprintf "VkBufferUsageFlags2CreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyImageToImageInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkHostImageCopyFlags
            val mutable public srcImage : VkImage
            val mutable public srcImageLayout : VkImageLayout
            val mutable public dstImage : VkImage
            val mutable public dstImageLayout : VkImageLayout
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<Vulkan13.VkImageCopy2>

            new(pNext: nativeint, flags: VkHostImageCopyFlags, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<Vulkan13.VkImageCopy2>) =
                {
                    sType = 1000270007u
                    pNext = pNext
                    flags = flags
                    srcImage = srcImage
                    srcImageLayout = srcImageLayout
                    dstImage = dstImage
                    dstImageLayout = dstImageLayout
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(flags: VkHostImageCopyFlags, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<Vulkan13.VkImageCopy2>) =
                VkCopyImageToImageInfo(Unchecked.defaultof<nativeint>, flags, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkHostImageCopyFlags> && x.srcImage = Unchecked.defaultof<VkImage> && x.srcImageLayout = Unchecked.defaultof<VkImageLayout> && x.dstImage = Unchecked.defaultof<VkImage> && x.dstImageLayout = Unchecked.defaultof<VkImageLayout> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<Vulkan13.VkImageCopy2>>

            static member Empty =
                VkCopyImageToImageInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkHostImageCopyFlags>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<Vulkan13.VkImageCopy2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "srcImage = %A" x.srcImage
                    sprintf "srcImageLayout = %A" x.srcImageLayout
                    sprintf "dstImage = %A" x.dstImage
                    sprintf "dstImageLayout = %A" x.dstImageLayout
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkCopyImageToImageInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageToMemoryCopy =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pHostPointer : nativeint
            val mutable public memoryRowLength : uint32
            val mutable public memoryImageHeight : uint32
            val mutable public imageSubresource : VkImageSubresourceLayers
            val mutable public imageOffset : VkOffset3D
            val mutable public imageExtent : VkExtent3D

            new(pNext: nativeint, pHostPointer: nativeint, memoryRowLength: uint32, memoryImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D) =
                {
                    sType = 1000270003u
                    pNext = pNext
                    pHostPointer = pHostPointer
                    memoryRowLength = memoryRowLength
                    memoryImageHeight = memoryImageHeight
                    imageSubresource = imageSubresource
                    imageOffset = imageOffset
                    imageExtent = imageExtent
                }

            new(pHostPointer: nativeint, memoryRowLength: uint32, memoryImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D) =
                VkImageToMemoryCopy(Unchecked.defaultof<nativeint>, pHostPointer, memoryRowLength, memoryImageHeight, imageSubresource, imageOffset, imageExtent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pHostPointer = Unchecked.defaultof<nativeint> && x.memoryRowLength = Unchecked.defaultof<uint32> && x.memoryImageHeight = Unchecked.defaultof<uint32> && x.imageSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.imageOffset = Unchecked.defaultof<VkOffset3D> && x.imageExtent = Unchecked.defaultof<VkExtent3D>

            static member Empty =
                VkImageToMemoryCopy(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "pHostPointer = %A" x.pHostPointer
                    sprintf "memoryRowLength = %A" x.memoryRowLength
                    sprintf "memoryImageHeight = %A" x.memoryImageHeight
                    sprintf "imageSubresource = %A" x.imageSubresource
                    sprintf "imageOffset = %A" x.imageOffset
                    sprintf "imageExtent = %A" x.imageExtent
                ] |> sprintf "VkImageToMemoryCopy { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyImageToMemoryInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkHostImageCopyFlags
            val mutable public srcImage : VkImage
            val mutable public srcImageLayout : VkImageLayout
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkImageToMemoryCopy>

            new(pNext: nativeint, flags: VkHostImageCopyFlags, srcImage: VkImage, srcImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<VkImageToMemoryCopy>) =
                {
                    sType = 1000270004u
                    pNext = pNext
                    flags = flags
                    srcImage = srcImage
                    srcImageLayout = srcImageLayout
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(flags: VkHostImageCopyFlags, srcImage: VkImage, srcImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<VkImageToMemoryCopy>) =
                VkCopyImageToMemoryInfo(Unchecked.defaultof<nativeint>, flags, srcImage, srcImageLayout, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkHostImageCopyFlags> && x.srcImage = Unchecked.defaultof<VkImage> && x.srcImageLayout = Unchecked.defaultof<VkImageLayout> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkImageToMemoryCopy>>

            static member Empty =
                VkCopyImageToMemoryInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkHostImageCopyFlags>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageToMemoryCopy>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "srcImage = %A" x.srcImage
                    sprintf "srcImageLayout = %A" x.srcImageLayout
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkCopyImageToMemoryInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryToImageCopy =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pHostPointer : nativeint
            val mutable public memoryRowLength : uint32
            val mutable public memoryImageHeight : uint32
            val mutable public imageSubresource : VkImageSubresourceLayers
            val mutable public imageOffset : VkOffset3D
            val mutable public imageExtent : VkExtent3D

            new(pNext: nativeint, pHostPointer: nativeint, memoryRowLength: uint32, memoryImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D) =
                {
                    sType = 1000270002u
                    pNext = pNext
                    pHostPointer = pHostPointer
                    memoryRowLength = memoryRowLength
                    memoryImageHeight = memoryImageHeight
                    imageSubresource = imageSubresource
                    imageOffset = imageOffset
                    imageExtent = imageExtent
                }

            new(pHostPointer: nativeint, memoryRowLength: uint32, memoryImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D) =
                VkMemoryToImageCopy(Unchecked.defaultof<nativeint>, pHostPointer, memoryRowLength, memoryImageHeight, imageSubresource, imageOffset, imageExtent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pHostPointer = Unchecked.defaultof<nativeint> && x.memoryRowLength = Unchecked.defaultof<uint32> && x.memoryImageHeight = Unchecked.defaultof<uint32> && x.imageSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.imageOffset = Unchecked.defaultof<VkOffset3D> && x.imageExtent = Unchecked.defaultof<VkExtent3D>

            static member Empty =
                VkMemoryToImageCopy(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "pHostPointer = %A" x.pHostPointer
                    sprintf "memoryRowLength = %A" x.memoryRowLength
                    sprintf "memoryImageHeight = %A" x.memoryImageHeight
                    sprintf "imageSubresource = %A" x.imageSubresource
                    sprintf "imageOffset = %A" x.imageOffset
                    sprintf "imageExtent = %A" x.imageExtent
                ] |> sprintf "VkMemoryToImageCopy { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyMemoryToImageInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkHostImageCopyFlags
            val mutable public dstImage : VkImage
            val mutable public dstImageLayout : VkImageLayout
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkMemoryToImageCopy>

            new(pNext: nativeint, flags: VkHostImageCopyFlags, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<VkMemoryToImageCopy>) =
                {
                    sType = 1000270005u
                    pNext = pNext
                    flags = flags
                    dstImage = dstImage
                    dstImageLayout = dstImageLayout
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(flags: VkHostImageCopyFlags, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: nativeptr<VkMemoryToImageCopy>) =
                VkCopyMemoryToImageInfo(Unchecked.defaultof<nativeint>, flags, dstImage, dstImageLayout, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkHostImageCopyFlags> && x.dstImage = Unchecked.defaultof<VkImage> && x.dstImageLayout = Unchecked.defaultof<VkImageLayout> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkMemoryToImageCopy>>

            static member Empty =
                VkCopyMemoryToImageInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkHostImageCopyFlags>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkMemoryToImageCopy>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "dstImage = %A" x.dstImage
                    sprintf "dstImageLayout = %A" x.dstImageLayout
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkCopyMemoryToImageInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageSubresource2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageSubresource : VkImageSubresource

            new(pNext: nativeint, imageSubresource: VkImageSubresource) =
                {
                    sType = 1000338003u
                    pNext = pNext
                    imageSubresource = imageSubresource
                }

            new(imageSubresource: VkImageSubresource) =
                VkImageSubresource2(Unchecked.defaultof<nativeint>, imageSubresource)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageSubresource = Unchecked.defaultof<VkImageSubresource>

            static member Empty =
                VkImageSubresource2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageSubresource>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageSubresource = %A" x.imageSubresource
                ] |> sprintf "VkImageSubresource2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceImageSubresourceInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pCreateInfo : nativeptr<VkImageCreateInfo>
            val mutable public pSubresource : nativeptr<VkImageSubresource2>

            new(pNext: nativeint, pCreateInfo: nativeptr<VkImageCreateInfo>, pSubresource: nativeptr<VkImageSubresource2>) =
                {
                    sType = 1000470004u
                    pNext = pNext
                    pCreateInfo = pCreateInfo
                    pSubresource = pSubresource
                }

            new(pCreateInfo: nativeptr<VkImageCreateInfo>, pSubresource: nativeptr<VkImageSubresource2>) =
                VkDeviceImageSubresourceInfo(Unchecked.defaultof<nativeint>, pCreateInfo, pSubresource)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pCreateInfo = Unchecked.defaultof<nativeptr<VkImageCreateInfo>> && x.pSubresource = Unchecked.defaultof<nativeptr<VkImageSubresource2>>

            static member Empty =
                VkDeviceImageSubresourceInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkImageCreateInfo>>, Unchecked.defaultof<nativeptr<VkImageSubresource2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "pCreateInfo = %A" x.pCreateInfo
                    sprintf "pSubresource = %A" x.pSubresource
                ] |> sprintf "VkDeviceImageSubresourceInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceQueueGlobalPriorityCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public globalPriority : VkQueueGlobalPriority

            new(pNext: nativeint, globalPriority: VkQueueGlobalPriority) =
                {
                    sType = 1000174000u
                    pNext = pNext
                    globalPriority = globalPriority
                }

            new(globalPriority: VkQueueGlobalPriority) =
                VkDeviceQueueGlobalPriorityCreateInfo(Unchecked.defaultof<nativeint>, globalPriority)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.globalPriority = Unchecked.defaultof<VkQueueGlobalPriority>

            static member Empty =
                VkDeviceQueueGlobalPriorityCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkQueueGlobalPriority>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "globalPriority = %A" x.globalPriority
                ] |> sprintf "VkDeviceQueueGlobalPriorityCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkHostImageCopyDevicePerformanceQuery =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public optimalDeviceAccess : VkBool32
            val mutable public identicalMemoryLayout : VkBool32

            new(pNext: nativeint, optimalDeviceAccess: VkBool32, identicalMemoryLayout: VkBool32) =
                {
                    sType = 1000270009u
                    pNext = pNext
                    optimalDeviceAccess = optimalDeviceAccess
                    identicalMemoryLayout = identicalMemoryLayout
                }

            new(optimalDeviceAccess: VkBool32, identicalMemoryLayout: VkBool32) =
                VkHostImageCopyDevicePerformanceQuery(Unchecked.defaultof<nativeint>, optimalDeviceAccess, identicalMemoryLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.optimalDeviceAccess = Unchecked.defaultof<VkBool32> && x.identicalMemoryLayout = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkHostImageCopyDevicePerformanceQuery(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "optimalDeviceAccess = %A" x.optimalDeviceAccess
                    sprintf "identicalMemoryLayout = %A" x.identicalMemoryLayout
                ] |> sprintf "VkHostImageCopyDevicePerformanceQuery { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkHostImageLayoutTransitionInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image : VkImage
            val mutable public oldLayout : VkImageLayout
            val mutable public newLayout : VkImageLayout
            val mutable public subresourceRange : VkImageSubresourceRange

            new(pNext: nativeint, image: VkImage, oldLayout: VkImageLayout, newLayout: VkImageLayout, subresourceRange: VkImageSubresourceRange) =
                {
                    sType = 1000270006u
                    pNext = pNext
                    image = image
                    oldLayout = oldLayout
                    newLayout = newLayout
                    subresourceRange = subresourceRange
                }

            new(image: VkImage, oldLayout: VkImageLayout, newLayout: VkImageLayout, subresourceRange: VkImageSubresourceRange) =
                VkHostImageLayoutTransitionInfo(Unchecked.defaultof<nativeint>, image, oldLayout, newLayout, subresourceRange)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage> && x.oldLayout = Unchecked.defaultof<VkImageLayout> && x.newLayout = Unchecked.defaultof<VkImageLayout> && x.subresourceRange = Unchecked.defaultof<VkImageSubresourceRange>

            static member Empty =
                VkHostImageLayoutTransitionInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageSubresourceRange>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "image = %A" x.image
                    sprintf "oldLayout = %A" x.oldLayout
                    sprintf "newLayout = %A" x.newLayout
                    sprintf "subresourceRange = %A" x.subresourceRange
                ] |> sprintf "VkHostImageLayoutTransitionInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryMapInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkMemoryMapFlags
            val mutable public memory : VkDeviceMemory
            val mutable public offset : VkDeviceSize
            val mutable public size : VkDeviceSize

            new(pNext: nativeint, flags: VkMemoryMapFlags, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize) =
                {
                    sType = 1000271000u
                    pNext = pNext
                    flags = flags
                    memory = memory
                    offset = offset
                    size = size
                }

            new(flags: VkMemoryMapFlags, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize) =
                VkMemoryMapInfo(Unchecked.defaultof<nativeint>, flags, memory, offset, size)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkMemoryMapFlags> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkMemoryMapInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMemoryMapFlags>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "memory = %A" x.memory
                    sprintf "offset = %A" x.offset
                    sprintf "size = %A" x.size
                ] |> sprintf "VkMemoryMapInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryUnmapInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkMemoryUnmapFlags
            val mutable public memory : VkDeviceMemory

            new(pNext: nativeint, flags: VkMemoryUnmapFlags, memory: VkDeviceMemory) =
                {
                    sType = 1000271001u
                    pNext = pNext
                    flags = flags
                    memory = memory
                }

            new(flags: VkMemoryUnmapFlags, memory: VkDeviceMemory) =
                VkMemoryUnmapInfo(Unchecked.defaultof<nativeint>, flags, memory)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkMemoryUnmapFlags> && x.memory = Unchecked.defaultof<VkDeviceMemory>

            static member Empty =
                VkMemoryUnmapInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMemoryUnmapFlags>, Unchecked.defaultof<VkDeviceMemory>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "memory = %A" x.memory
                ] |> sprintf "VkMemoryUnmapInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDynamicRenderingLocalReadFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public dynamicRenderingLocalRead : VkBool32

            new(pNext: nativeint, dynamicRenderingLocalRead: VkBool32) =
                {
                    sType = 1000232000u
                    pNext = pNext
                    dynamicRenderingLocalRead = dynamicRenderingLocalRead
                }

            new(dynamicRenderingLocalRead: VkBool32) =
                VkPhysicalDeviceDynamicRenderingLocalReadFeatures(Unchecked.defaultof<nativeint>, dynamicRenderingLocalRead)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.dynamicRenderingLocalRead = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDynamicRenderingLocalReadFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "dynamicRenderingLocalRead = %A" x.dynamicRenderingLocalRead
                ] |> sprintf "VkPhysicalDeviceDynamicRenderingLocalReadFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceGlobalPriorityQueryFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public globalPriorityQuery : VkBool32

            new(pNext: nativeint, globalPriorityQuery: VkBool32) =
                {
                    sType = 1000388000u
                    pNext = pNext
                    globalPriorityQuery = globalPriorityQuery
                }

            new(globalPriorityQuery: VkBool32) =
                VkPhysicalDeviceGlobalPriorityQueryFeatures(Unchecked.defaultof<nativeint>, globalPriorityQuery)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.globalPriorityQuery = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceGlobalPriorityQueryFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "globalPriorityQuery = %A" x.globalPriorityQuery
                ] |> sprintf "VkPhysicalDeviceGlobalPriorityQueryFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceHostImageCopyFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public hostImageCopy : VkBool32

            new(pNext: nativeint, hostImageCopy: VkBool32) =
                {
                    sType = 1000270000u
                    pNext = pNext
                    hostImageCopy = hostImageCopy
                }

            new(hostImageCopy: VkBool32) =
                VkPhysicalDeviceHostImageCopyFeatures(Unchecked.defaultof<nativeint>, hostImageCopy)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.hostImageCopy = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceHostImageCopyFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "hostImageCopy = %A" x.hostImageCopy
                ] |> sprintf "VkPhysicalDeviceHostImageCopyFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceHostImageCopyProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public copySrcLayoutCount : uint32
            val mutable public pCopySrcLayouts : nativeptr<VkImageLayout>
            val mutable public copyDstLayoutCount : uint32
            val mutable public pCopyDstLayouts : nativeptr<VkImageLayout>
            val mutable public optimalTilingLayoutUUID : Guid
            val mutable public identicalMemoryTypeRequirements : VkBool32

            new(pNext: nativeint, copySrcLayoutCount: uint32, pCopySrcLayouts: nativeptr<VkImageLayout>, copyDstLayoutCount: uint32, pCopyDstLayouts: nativeptr<VkImageLayout>, optimalTilingLayoutUUID: Guid, identicalMemoryTypeRequirements: VkBool32) =
                {
                    sType = 1000270001u
                    pNext = pNext
                    copySrcLayoutCount = copySrcLayoutCount
                    pCopySrcLayouts = pCopySrcLayouts
                    copyDstLayoutCount = copyDstLayoutCount
                    pCopyDstLayouts = pCopyDstLayouts
                    optimalTilingLayoutUUID = optimalTilingLayoutUUID
                    identicalMemoryTypeRequirements = identicalMemoryTypeRequirements
                }

            new(copySrcLayoutCount: uint32, pCopySrcLayouts: nativeptr<VkImageLayout>, copyDstLayoutCount: uint32, pCopyDstLayouts: nativeptr<VkImageLayout>, optimalTilingLayoutUUID: Guid, identicalMemoryTypeRequirements: VkBool32) =
                VkPhysicalDeviceHostImageCopyProperties(Unchecked.defaultof<nativeint>, copySrcLayoutCount, pCopySrcLayouts, copyDstLayoutCount, pCopyDstLayouts, optimalTilingLayoutUUID, identicalMemoryTypeRequirements)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.copySrcLayoutCount = Unchecked.defaultof<uint32> && x.pCopySrcLayouts = Unchecked.defaultof<nativeptr<VkImageLayout>> && x.copyDstLayoutCount = Unchecked.defaultof<uint32> && x.pCopyDstLayouts = Unchecked.defaultof<nativeptr<VkImageLayout>> && x.optimalTilingLayoutUUID = Unchecked.defaultof<Guid> && x.identicalMemoryTypeRequirements = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceHostImageCopyProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageLayout>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageLayout>>, Unchecked.defaultof<Guid>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "copySrcLayoutCount = %A" x.copySrcLayoutCount
                    sprintf "pCopySrcLayouts = %A" x.pCopySrcLayouts
                    sprintf "copyDstLayoutCount = %A" x.copyDstLayoutCount
                    sprintf "pCopyDstLayouts = %A" x.pCopyDstLayouts
                    sprintf "optimalTilingLayoutUUID = %A" x.optimalTilingLayoutUUID
                    sprintf "identicalMemoryTypeRequirements = %A" x.identicalMemoryTypeRequirements
                ] |> sprintf "VkPhysicalDeviceHostImageCopyProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceIndexTypeUint8Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public indexTypeUint8 : VkBool32

            new(pNext: nativeint, indexTypeUint8: VkBool32) =
                {
                    sType = 1000265000u
                    pNext = pNext
                    indexTypeUint8 = indexTypeUint8
                }

            new(indexTypeUint8: VkBool32) =
                VkPhysicalDeviceIndexTypeUint8Features(Unchecked.defaultof<nativeint>, indexTypeUint8)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.indexTypeUint8 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceIndexTypeUint8Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "indexTypeUint8 = %A" x.indexTypeUint8
                ] |> sprintf "VkPhysicalDeviceIndexTypeUint8Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceLineRasterizationFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public rectangularLines : VkBool32
            val mutable public bresenhamLines : VkBool32
            val mutable public smoothLines : VkBool32
            val mutable public stippledRectangularLines : VkBool32
            val mutable public stippledBresenhamLines : VkBool32
            val mutable public stippledSmoothLines : VkBool32

            new(pNext: nativeint, rectangularLines: VkBool32, bresenhamLines: VkBool32, smoothLines: VkBool32, stippledRectangularLines: VkBool32, stippledBresenhamLines: VkBool32, stippledSmoothLines: VkBool32) =
                {
                    sType = 1000259000u
                    pNext = pNext
                    rectangularLines = rectangularLines
                    bresenhamLines = bresenhamLines
                    smoothLines = smoothLines
                    stippledRectangularLines = stippledRectangularLines
                    stippledBresenhamLines = stippledBresenhamLines
                    stippledSmoothLines = stippledSmoothLines
                }

            new(rectangularLines: VkBool32, bresenhamLines: VkBool32, smoothLines: VkBool32, stippledRectangularLines: VkBool32, stippledBresenhamLines: VkBool32, stippledSmoothLines: VkBool32) =
                VkPhysicalDeviceLineRasterizationFeatures(Unchecked.defaultof<nativeint>, rectangularLines, bresenhamLines, smoothLines, stippledRectangularLines, stippledBresenhamLines, stippledSmoothLines)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.rectangularLines = Unchecked.defaultof<VkBool32> && x.bresenhamLines = Unchecked.defaultof<VkBool32> && x.smoothLines = Unchecked.defaultof<VkBool32> && x.stippledRectangularLines = Unchecked.defaultof<VkBool32> && x.stippledBresenhamLines = Unchecked.defaultof<VkBool32> && x.stippledSmoothLines = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceLineRasterizationFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "rectangularLines = %A" x.rectangularLines
                    sprintf "bresenhamLines = %A" x.bresenhamLines
                    sprintf "smoothLines = %A" x.smoothLines
                    sprintf "stippledRectangularLines = %A" x.stippledRectangularLines
                    sprintf "stippledBresenhamLines = %A" x.stippledBresenhamLines
                    sprintf "stippledSmoothLines = %A" x.stippledSmoothLines
                ] |> sprintf "VkPhysicalDeviceLineRasterizationFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceLineRasterizationProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public lineSubPixelPrecisionBits : uint32

            new(pNext: nativeint, lineSubPixelPrecisionBits: uint32) =
                {
                    sType = 1000259002u
                    pNext = pNext
                    lineSubPixelPrecisionBits = lineSubPixelPrecisionBits
                }

            new(lineSubPixelPrecisionBits: uint32) =
                VkPhysicalDeviceLineRasterizationProperties(Unchecked.defaultof<nativeint>, lineSubPixelPrecisionBits)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.lineSubPixelPrecisionBits = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceLineRasterizationProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "lineSubPixelPrecisionBits = %A" x.lineSubPixelPrecisionBits
                ] |> sprintf "VkPhysicalDeviceLineRasterizationProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMaintenance5Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maintenance5 : VkBool32

            new(pNext: nativeint, maintenance5: VkBool32) =
                {
                    sType = 1000470000u
                    pNext = pNext
                    maintenance5 = maintenance5
                }

            new(maintenance5: VkBool32) =
                VkPhysicalDeviceMaintenance5Features(Unchecked.defaultof<nativeint>, maintenance5)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maintenance5 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMaintenance5Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maintenance5 = %A" x.maintenance5
                ] |> sprintf "VkPhysicalDeviceMaintenance5Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMaintenance5Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public earlyFragmentMultisampleCoverageAfterSampleCounting : VkBool32
            val mutable public earlyFragmentSampleMaskTestBeforeSampleCounting : VkBool32
            val mutable public depthStencilSwizzleOneSupport : VkBool32
            val mutable public polygonModePointSize : VkBool32
            val mutable public nonStrictSinglePixelWideLinesUseParallelogram : VkBool32
            val mutable public nonStrictWideLinesUseParallelogram : VkBool32

            new(pNext: nativeint, earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32, earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32, depthStencilSwizzleOneSupport: VkBool32, polygonModePointSize: VkBool32, nonStrictSinglePixelWideLinesUseParallelogram: VkBool32, nonStrictWideLinesUseParallelogram: VkBool32) =
                {
                    sType = 1000470001u
                    pNext = pNext
                    earlyFragmentMultisampleCoverageAfterSampleCounting = earlyFragmentMultisampleCoverageAfterSampleCounting
                    earlyFragmentSampleMaskTestBeforeSampleCounting = earlyFragmentSampleMaskTestBeforeSampleCounting
                    depthStencilSwizzleOneSupport = depthStencilSwizzleOneSupport
                    polygonModePointSize = polygonModePointSize
                    nonStrictSinglePixelWideLinesUseParallelogram = nonStrictSinglePixelWideLinesUseParallelogram
                    nonStrictWideLinesUseParallelogram = nonStrictWideLinesUseParallelogram
                }

            new(earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32, earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32, depthStencilSwizzleOneSupport: VkBool32, polygonModePointSize: VkBool32, nonStrictSinglePixelWideLinesUseParallelogram: VkBool32, nonStrictWideLinesUseParallelogram: VkBool32) =
                VkPhysicalDeviceMaintenance5Properties(Unchecked.defaultof<nativeint>, earlyFragmentMultisampleCoverageAfterSampleCounting, earlyFragmentSampleMaskTestBeforeSampleCounting, depthStencilSwizzleOneSupport, polygonModePointSize, nonStrictSinglePixelWideLinesUseParallelogram, nonStrictWideLinesUseParallelogram)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.earlyFragmentMultisampleCoverageAfterSampleCounting = Unchecked.defaultof<VkBool32> && x.earlyFragmentSampleMaskTestBeforeSampleCounting = Unchecked.defaultof<VkBool32> && x.depthStencilSwizzleOneSupport = Unchecked.defaultof<VkBool32> && x.polygonModePointSize = Unchecked.defaultof<VkBool32> && x.nonStrictSinglePixelWideLinesUseParallelogram = Unchecked.defaultof<VkBool32> && x.nonStrictWideLinesUseParallelogram = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMaintenance5Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "earlyFragmentMultisampleCoverageAfterSampleCounting = %A" x.earlyFragmentMultisampleCoverageAfterSampleCounting
                    sprintf "earlyFragmentSampleMaskTestBeforeSampleCounting = %A" x.earlyFragmentSampleMaskTestBeforeSampleCounting
                    sprintf "depthStencilSwizzleOneSupport = %A" x.depthStencilSwizzleOneSupport
                    sprintf "polygonModePointSize = %A" x.polygonModePointSize
                    sprintf "nonStrictSinglePixelWideLinesUseParallelogram = %A" x.nonStrictSinglePixelWideLinesUseParallelogram
                    sprintf "nonStrictWideLinesUseParallelogram = %A" x.nonStrictWideLinesUseParallelogram
                ] |> sprintf "VkPhysicalDeviceMaintenance5Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMaintenance6Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maintenance6 : VkBool32

            new(pNext: nativeint, maintenance6: VkBool32) =
                {
                    sType = 1000545000u
                    pNext = pNext
                    maintenance6 = maintenance6
                }

            new(maintenance6: VkBool32) =
                VkPhysicalDeviceMaintenance6Features(Unchecked.defaultof<nativeint>, maintenance6)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maintenance6 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMaintenance6Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maintenance6 = %A" x.maintenance6
                ] |> sprintf "VkPhysicalDeviceMaintenance6Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMaintenance6Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public blockTexelViewCompatibleMultipleLayers : VkBool32
            val mutable public maxCombinedImageSamplerDescriptorCount : uint32
            val mutable public fragmentShadingRateClampCombinerInputs : VkBool32

            new(pNext: nativeint, blockTexelViewCompatibleMultipleLayers: VkBool32, maxCombinedImageSamplerDescriptorCount: uint32, fragmentShadingRateClampCombinerInputs: VkBool32) =
                {
                    sType = 1000545001u
                    pNext = pNext
                    blockTexelViewCompatibleMultipleLayers = blockTexelViewCompatibleMultipleLayers
                    maxCombinedImageSamplerDescriptorCount = maxCombinedImageSamplerDescriptorCount
                    fragmentShadingRateClampCombinerInputs = fragmentShadingRateClampCombinerInputs
                }

            new(blockTexelViewCompatibleMultipleLayers: VkBool32, maxCombinedImageSamplerDescriptorCount: uint32, fragmentShadingRateClampCombinerInputs: VkBool32) =
                VkPhysicalDeviceMaintenance6Properties(Unchecked.defaultof<nativeint>, blockTexelViewCompatibleMultipleLayers, maxCombinedImageSamplerDescriptorCount, fragmentShadingRateClampCombinerInputs)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.blockTexelViewCompatibleMultipleLayers = Unchecked.defaultof<VkBool32> && x.maxCombinedImageSamplerDescriptorCount = Unchecked.defaultof<uint32> && x.fragmentShadingRateClampCombinerInputs = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMaintenance6Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "blockTexelViewCompatibleMultipleLayers = %A" x.blockTexelViewCompatibleMultipleLayers
                    sprintf "maxCombinedImageSamplerDescriptorCount = %A" x.maxCombinedImageSamplerDescriptorCount
                    sprintf "fragmentShadingRateClampCombinerInputs = %A" x.fragmentShadingRateClampCombinerInputs
                ] |> sprintf "VkPhysicalDeviceMaintenance6Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePipelineProtectedAccessFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipelineProtectedAccess : VkBool32

            new(pNext: nativeint, pipelineProtectedAccess: VkBool32) =
                {
                    sType = 1000466000u
                    pNext = pNext
                    pipelineProtectedAccess = pipelineProtectedAccess
                }

            new(pipelineProtectedAccess: VkBool32) =
                VkPhysicalDevicePipelineProtectedAccessFeatures(Unchecked.defaultof<nativeint>, pipelineProtectedAccess)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipelineProtectedAccess = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePipelineProtectedAccessFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipelineProtectedAccess = %A" x.pipelineProtectedAccess
                ] |> sprintf "VkPhysicalDevicePipelineProtectedAccessFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePipelineRobustnessFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipelineRobustness : VkBool32

            new(pNext: nativeint, pipelineRobustness: VkBool32) =
                {
                    sType = 1000068001u
                    pNext = pNext
                    pipelineRobustness = pipelineRobustness
                }

            new(pipelineRobustness: VkBool32) =
                VkPhysicalDevicePipelineRobustnessFeatures(Unchecked.defaultof<nativeint>, pipelineRobustness)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipelineRobustness = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePipelineRobustnessFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipelineRobustness = %A" x.pipelineRobustness
                ] |> sprintf "VkPhysicalDevicePipelineRobustnessFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePipelineRobustnessProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public defaultRobustnessStorageBuffers : VkPipelineRobustnessBufferBehavior
            val mutable public defaultRobustnessUniformBuffers : VkPipelineRobustnessBufferBehavior
            val mutable public defaultRobustnessVertexInputs : VkPipelineRobustnessBufferBehavior
            val mutable public defaultRobustnessImages : VkPipelineRobustnessImageBehavior

            new(pNext: nativeint, defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehavior, defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehavior, defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehavior, defaultRobustnessImages: VkPipelineRobustnessImageBehavior) =
                {
                    sType = 1000068002u
                    pNext = pNext
                    defaultRobustnessStorageBuffers = defaultRobustnessStorageBuffers
                    defaultRobustnessUniformBuffers = defaultRobustnessUniformBuffers
                    defaultRobustnessVertexInputs = defaultRobustnessVertexInputs
                    defaultRobustnessImages = defaultRobustnessImages
                }

            new(defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehavior, defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehavior, defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehavior, defaultRobustnessImages: VkPipelineRobustnessImageBehavior) =
                VkPhysicalDevicePipelineRobustnessProperties(Unchecked.defaultof<nativeint>, defaultRobustnessStorageBuffers, defaultRobustnessUniformBuffers, defaultRobustnessVertexInputs, defaultRobustnessImages)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.defaultRobustnessStorageBuffers = Unchecked.defaultof<VkPipelineRobustnessBufferBehavior> && x.defaultRobustnessUniformBuffers = Unchecked.defaultof<VkPipelineRobustnessBufferBehavior> && x.defaultRobustnessVertexInputs = Unchecked.defaultof<VkPipelineRobustnessBufferBehavior> && x.defaultRobustnessImages = Unchecked.defaultof<VkPipelineRobustnessImageBehavior>

            static member Empty =
                VkPhysicalDevicePipelineRobustnessProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineRobustnessBufferBehavior>, Unchecked.defaultof<VkPipelineRobustnessBufferBehavior>, Unchecked.defaultof<VkPipelineRobustnessBufferBehavior>, Unchecked.defaultof<VkPipelineRobustnessImageBehavior>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "defaultRobustnessStorageBuffers = %A" x.defaultRobustnessStorageBuffers
                    sprintf "defaultRobustnessUniformBuffers = %A" x.defaultRobustnessUniformBuffers
                    sprintf "defaultRobustnessVertexInputs = %A" x.defaultRobustnessVertexInputs
                    sprintf "defaultRobustnessImages = %A" x.defaultRobustnessImages
                ] |> sprintf "VkPhysicalDevicePipelineRobustnessProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePushDescriptorProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxPushDescriptors : uint32

            new(pNext: nativeint, maxPushDescriptors: uint32) =
                {
                    sType = 1000080000u
                    pNext = pNext
                    maxPushDescriptors = maxPushDescriptors
                }

            new(maxPushDescriptors: uint32) =
                VkPhysicalDevicePushDescriptorProperties(Unchecked.defaultof<nativeint>, maxPushDescriptors)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxPushDescriptors = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDevicePushDescriptorProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxPushDescriptors = %A" x.maxPushDescriptors
                ] |> sprintf "VkPhysicalDevicePushDescriptorProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderExpectAssumeFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderExpectAssume : VkBool32

            new(pNext: nativeint, shaderExpectAssume: VkBool32) =
                {
                    sType = 1000544000u
                    pNext = pNext
                    shaderExpectAssume = shaderExpectAssume
                }

            new(shaderExpectAssume: VkBool32) =
                VkPhysicalDeviceShaderExpectAssumeFeatures(Unchecked.defaultof<nativeint>, shaderExpectAssume)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderExpectAssume = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderExpectAssumeFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderExpectAssume = %A" x.shaderExpectAssume
                ] |> sprintf "VkPhysicalDeviceShaderExpectAssumeFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderFloatControls2Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderFloatControls2 : VkBool32

            new(pNext: nativeint, shaderFloatControls2: VkBool32) =
                {
                    sType = 1000528000u
                    pNext = pNext
                    shaderFloatControls2 = shaderFloatControls2
                }

            new(shaderFloatControls2: VkBool32) =
                VkPhysicalDeviceShaderFloatControls2Features(Unchecked.defaultof<nativeint>, shaderFloatControls2)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderFloatControls2 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderFloatControls2Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderFloatControls2 = %A" x.shaderFloatControls2
                ] |> sprintf "VkPhysicalDeviceShaderFloatControls2Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderSubgroupRotateFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderSubgroupRotate : VkBool32
            val mutable public shaderSubgroupRotateClustered : VkBool32

            new(pNext: nativeint, shaderSubgroupRotate: VkBool32, shaderSubgroupRotateClustered: VkBool32) =
                {
                    sType = 1000416000u
                    pNext = pNext
                    shaderSubgroupRotate = shaderSubgroupRotate
                    shaderSubgroupRotateClustered = shaderSubgroupRotateClustered
                }

            new(shaderSubgroupRotate: VkBool32, shaderSubgroupRotateClustered: VkBool32) =
                VkPhysicalDeviceShaderSubgroupRotateFeatures(Unchecked.defaultof<nativeint>, shaderSubgroupRotate, shaderSubgroupRotateClustered)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderSubgroupRotate = Unchecked.defaultof<VkBool32> && x.shaderSubgroupRotateClustered = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderSubgroupRotateFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderSubgroupRotate = %A" x.shaderSubgroupRotate
                    sprintf "shaderSubgroupRotateClustered = %A" x.shaderSubgroupRotateClustered
                ] |> sprintf "VkPhysicalDeviceShaderSubgroupRotateFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVertexAttributeDivisorFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vertexAttributeInstanceRateDivisor : VkBool32
            val mutable public vertexAttributeInstanceRateZeroDivisor : VkBool32

            new(pNext: nativeint, vertexAttributeInstanceRateDivisor: VkBool32, vertexAttributeInstanceRateZeroDivisor: VkBool32) =
                {
                    sType = 1000190002u
                    pNext = pNext
                    vertexAttributeInstanceRateDivisor = vertexAttributeInstanceRateDivisor
                    vertexAttributeInstanceRateZeroDivisor = vertexAttributeInstanceRateZeroDivisor
                }

            new(vertexAttributeInstanceRateDivisor: VkBool32, vertexAttributeInstanceRateZeroDivisor: VkBool32) =
                VkPhysicalDeviceVertexAttributeDivisorFeatures(Unchecked.defaultof<nativeint>, vertexAttributeInstanceRateDivisor, vertexAttributeInstanceRateZeroDivisor)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vertexAttributeInstanceRateDivisor = Unchecked.defaultof<VkBool32> && x.vertexAttributeInstanceRateZeroDivisor = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVertexAttributeDivisorFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "vertexAttributeInstanceRateDivisor = %A" x.vertexAttributeInstanceRateDivisor
                    sprintf "vertexAttributeInstanceRateZeroDivisor = %A" x.vertexAttributeInstanceRateZeroDivisor
                ] |> sprintf "VkPhysicalDeviceVertexAttributeDivisorFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVertexAttributeDivisorProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxVertexAttribDivisor : uint32
            val mutable public supportsNonZeroFirstInstance : VkBool32

            new(pNext: nativeint, maxVertexAttribDivisor: uint32, supportsNonZeroFirstInstance: VkBool32) =
                {
                    sType = 1000525000u
                    pNext = pNext
                    maxVertexAttribDivisor = maxVertexAttribDivisor
                    supportsNonZeroFirstInstance = supportsNonZeroFirstInstance
                }

            new(maxVertexAttribDivisor: uint32, supportsNonZeroFirstInstance: VkBool32) =
                VkPhysicalDeviceVertexAttributeDivisorProperties(Unchecked.defaultof<nativeint>, maxVertexAttribDivisor, supportsNonZeroFirstInstance)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxVertexAttribDivisor = Unchecked.defaultof<uint32> && x.supportsNonZeroFirstInstance = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVertexAttributeDivisorProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxVertexAttribDivisor = %A" x.maxVertexAttribDivisor
                    sprintf "supportsNonZeroFirstInstance = %A" x.supportsNonZeroFirstInstance
                ] |> sprintf "VkPhysicalDeviceVertexAttributeDivisorProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan14Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public globalPriorityQuery : VkBool32
            val mutable public shaderSubgroupRotate : VkBool32
            val mutable public shaderSubgroupRotateClustered : VkBool32
            val mutable public shaderFloatControls2 : VkBool32
            val mutable public shaderExpectAssume : VkBool32
            val mutable public rectangularLines : VkBool32
            val mutable public bresenhamLines : VkBool32
            val mutable public smoothLines : VkBool32
            val mutable public stippledRectangularLines : VkBool32
            val mutable public stippledBresenhamLines : VkBool32
            val mutable public stippledSmoothLines : VkBool32
            val mutable public vertexAttributeInstanceRateDivisor : VkBool32
            val mutable public vertexAttributeInstanceRateZeroDivisor : VkBool32
            val mutable public indexTypeUint8 : VkBool32
            val mutable public dynamicRenderingLocalRead : VkBool32
            val mutable public maintenance5 : VkBool32
            val mutable public maintenance6 : VkBool32
            val mutable public pipelineProtectedAccess : VkBool32
            val mutable public pipelineRobustness : VkBool32
            val mutable public hostImageCopy : VkBool32
            val mutable public pushDescriptor : VkBool32

            new(pNext: nativeint, globalPriorityQuery: VkBool32, shaderSubgroupRotate: VkBool32, shaderSubgroupRotateClustered: VkBool32, shaderFloatControls2: VkBool32, shaderExpectAssume: VkBool32, rectangularLines: VkBool32, bresenhamLines: VkBool32, smoothLines: VkBool32, stippledRectangularLines: VkBool32, stippledBresenhamLines: VkBool32, stippledSmoothLines: VkBool32, vertexAttributeInstanceRateDivisor: VkBool32, vertexAttributeInstanceRateZeroDivisor: VkBool32, indexTypeUint8: VkBool32, dynamicRenderingLocalRead: VkBool32, maintenance5: VkBool32, maintenance6: VkBool32, pipelineProtectedAccess: VkBool32, pipelineRobustness: VkBool32, hostImageCopy: VkBool32, pushDescriptor: VkBool32) =
                {
                    sType = 55u
                    pNext = pNext
                    globalPriorityQuery = globalPriorityQuery
                    shaderSubgroupRotate = shaderSubgroupRotate
                    shaderSubgroupRotateClustered = shaderSubgroupRotateClustered
                    shaderFloatControls2 = shaderFloatControls2
                    shaderExpectAssume = shaderExpectAssume
                    rectangularLines = rectangularLines
                    bresenhamLines = bresenhamLines
                    smoothLines = smoothLines
                    stippledRectangularLines = stippledRectangularLines
                    stippledBresenhamLines = stippledBresenhamLines
                    stippledSmoothLines = stippledSmoothLines
                    vertexAttributeInstanceRateDivisor = vertexAttributeInstanceRateDivisor
                    vertexAttributeInstanceRateZeroDivisor = vertexAttributeInstanceRateZeroDivisor
                    indexTypeUint8 = indexTypeUint8
                    dynamicRenderingLocalRead = dynamicRenderingLocalRead
                    maintenance5 = maintenance5
                    maintenance6 = maintenance6
                    pipelineProtectedAccess = pipelineProtectedAccess
                    pipelineRobustness = pipelineRobustness
                    hostImageCopy = hostImageCopy
                    pushDescriptor = pushDescriptor
                }

            new(globalPriorityQuery: VkBool32, shaderSubgroupRotate: VkBool32, shaderSubgroupRotateClustered: VkBool32, shaderFloatControls2: VkBool32, shaderExpectAssume: VkBool32, rectangularLines: VkBool32, bresenhamLines: VkBool32, smoothLines: VkBool32, stippledRectangularLines: VkBool32, stippledBresenhamLines: VkBool32, stippledSmoothLines: VkBool32, vertexAttributeInstanceRateDivisor: VkBool32, vertexAttributeInstanceRateZeroDivisor: VkBool32, indexTypeUint8: VkBool32, dynamicRenderingLocalRead: VkBool32, maintenance5: VkBool32, maintenance6: VkBool32, pipelineProtectedAccess: VkBool32, pipelineRobustness: VkBool32, hostImageCopy: VkBool32, pushDescriptor: VkBool32) =
                VkPhysicalDeviceVulkan14Features(Unchecked.defaultof<nativeint>, globalPriorityQuery, shaderSubgroupRotate, shaderSubgroupRotateClustered, shaderFloatControls2, shaderExpectAssume, rectangularLines, bresenhamLines, smoothLines, stippledRectangularLines, stippledBresenhamLines, stippledSmoothLines, vertexAttributeInstanceRateDivisor, vertexAttributeInstanceRateZeroDivisor, indexTypeUint8, dynamicRenderingLocalRead, maintenance5, maintenance6, pipelineProtectedAccess, pipelineRobustness, hostImageCopy, pushDescriptor)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.globalPriorityQuery = Unchecked.defaultof<VkBool32> && x.shaderSubgroupRotate = Unchecked.defaultof<VkBool32> && x.shaderSubgroupRotateClustered = Unchecked.defaultof<VkBool32> && x.shaderFloatControls2 = Unchecked.defaultof<VkBool32> && x.shaderExpectAssume = Unchecked.defaultof<VkBool32> && x.rectangularLines = Unchecked.defaultof<VkBool32> && x.bresenhamLines = Unchecked.defaultof<VkBool32> && x.smoothLines = Unchecked.defaultof<VkBool32> && x.stippledRectangularLines = Unchecked.defaultof<VkBool32> && x.stippledBresenhamLines = Unchecked.defaultof<VkBool32> && x.stippledSmoothLines = Unchecked.defaultof<VkBool32> && x.vertexAttributeInstanceRateDivisor = Unchecked.defaultof<VkBool32> && x.vertexAttributeInstanceRateZeroDivisor = Unchecked.defaultof<VkBool32> && x.indexTypeUint8 = Unchecked.defaultof<VkBool32> && x.dynamicRenderingLocalRead = Unchecked.defaultof<VkBool32> && x.maintenance5 = Unchecked.defaultof<VkBool32> && x.maintenance6 = Unchecked.defaultof<VkBool32> && x.pipelineProtectedAccess = Unchecked.defaultof<VkBool32> && x.pipelineRobustness = Unchecked.defaultof<VkBool32> && x.hostImageCopy = Unchecked.defaultof<VkBool32> && x.pushDescriptor = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVulkan14Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "globalPriorityQuery = %A" x.globalPriorityQuery
                    sprintf "shaderSubgroupRotate = %A" x.shaderSubgroupRotate
                    sprintf "shaderSubgroupRotateClustered = %A" x.shaderSubgroupRotateClustered
                    sprintf "shaderFloatControls2 = %A" x.shaderFloatControls2
                    sprintf "shaderExpectAssume = %A" x.shaderExpectAssume
                    sprintf "rectangularLines = %A" x.rectangularLines
                    sprintf "bresenhamLines = %A" x.bresenhamLines
                    sprintf "smoothLines = %A" x.smoothLines
                    sprintf "stippledRectangularLines = %A" x.stippledRectangularLines
                    sprintf "stippledBresenhamLines = %A" x.stippledBresenhamLines
                    sprintf "stippledSmoothLines = %A" x.stippledSmoothLines
                    sprintf "vertexAttributeInstanceRateDivisor = %A" x.vertexAttributeInstanceRateDivisor
                    sprintf "vertexAttributeInstanceRateZeroDivisor = %A" x.vertexAttributeInstanceRateZeroDivisor
                    sprintf "indexTypeUint8 = %A" x.indexTypeUint8
                    sprintf "dynamicRenderingLocalRead = %A" x.dynamicRenderingLocalRead
                    sprintf "maintenance5 = %A" x.maintenance5
                    sprintf "maintenance6 = %A" x.maintenance6
                    sprintf "pipelineProtectedAccess = %A" x.pipelineProtectedAccess
                    sprintf "pipelineRobustness = %A" x.pipelineRobustness
                    sprintf "hostImageCopy = %A" x.hostImageCopy
                    sprintf "pushDescriptor = %A" x.pushDescriptor
                ] |> sprintf "VkPhysicalDeviceVulkan14Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan14Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public lineSubPixelPrecisionBits : uint32
            val mutable public maxVertexAttribDivisor : uint32
            val mutable public supportsNonZeroFirstInstance : VkBool32
            val mutable public maxPushDescriptors : uint32
            val mutable public dynamicRenderingLocalReadDepthStencilAttachments : VkBool32
            val mutable public dynamicRenderingLocalReadMultisampledAttachments : VkBool32
            val mutable public earlyFragmentMultisampleCoverageAfterSampleCounting : VkBool32
            val mutable public earlyFragmentSampleMaskTestBeforeSampleCounting : VkBool32
            val mutable public depthStencilSwizzleOneSupport : VkBool32
            val mutable public polygonModePointSize : VkBool32
            val mutable public nonStrictSinglePixelWideLinesUseParallelogram : VkBool32
            val mutable public nonStrictWideLinesUseParallelogram : VkBool32
            val mutable public blockTexelViewCompatibleMultipleLayers : VkBool32
            val mutable public maxCombinedImageSamplerDescriptorCount : uint32
            val mutable public fragmentShadingRateClampCombinerInputs : VkBool32
            val mutable public defaultRobustnessStorageBuffers : VkPipelineRobustnessBufferBehavior
            val mutable public defaultRobustnessUniformBuffers : VkPipelineRobustnessBufferBehavior
            val mutable public defaultRobustnessVertexInputs : VkPipelineRobustnessBufferBehavior
            val mutable public defaultRobustnessImages : VkPipelineRobustnessImageBehavior
            val mutable public copySrcLayoutCount : uint32
            val mutable public pCopySrcLayouts : nativeptr<VkImageLayout>
            val mutable public copyDstLayoutCount : uint32
            val mutable public pCopyDstLayouts : nativeptr<VkImageLayout>
            val mutable public optimalTilingLayoutUUID : Guid
            val mutable public identicalMemoryTypeRequirements : VkBool32

            new(pNext: nativeint, lineSubPixelPrecisionBits: uint32, maxVertexAttribDivisor: uint32, supportsNonZeroFirstInstance: VkBool32, maxPushDescriptors: uint32, dynamicRenderingLocalReadDepthStencilAttachments: VkBool32, dynamicRenderingLocalReadMultisampledAttachments: VkBool32, earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32, earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32, depthStencilSwizzleOneSupport: VkBool32, polygonModePointSize: VkBool32, nonStrictSinglePixelWideLinesUseParallelogram: VkBool32, nonStrictWideLinesUseParallelogram: VkBool32, blockTexelViewCompatibleMultipleLayers: VkBool32, maxCombinedImageSamplerDescriptorCount: uint32, fragmentShadingRateClampCombinerInputs: VkBool32, defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehavior, defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehavior, defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehavior, defaultRobustnessImages: VkPipelineRobustnessImageBehavior, copySrcLayoutCount: uint32, pCopySrcLayouts: nativeptr<VkImageLayout>, copyDstLayoutCount: uint32, pCopyDstLayouts: nativeptr<VkImageLayout>, optimalTilingLayoutUUID: Guid, identicalMemoryTypeRequirements: VkBool32) =
                {
                    sType = 56u
                    pNext = pNext
                    lineSubPixelPrecisionBits = lineSubPixelPrecisionBits
                    maxVertexAttribDivisor = maxVertexAttribDivisor
                    supportsNonZeroFirstInstance = supportsNonZeroFirstInstance
                    maxPushDescriptors = maxPushDescriptors
                    dynamicRenderingLocalReadDepthStencilAttachments = dynamicRenderingLocalReadDepthStencilAttachments
                    dynamicRenderingLocalReadMultisampledAttachments = dynamicRenderingLocalReadMultisampledAttachments
                    earlyFragmentMultisampleCoverageAfterSampleCounting = earlyFragmentMultisampleCoverageAfterSampleCounting
                    earlyFragmentSampleMaskTestBeforeSampleCounting = earlyFragmentSampleMaskTestBeforeSampleCounting
                    depthStencilSwizzleOneSupport = depthStencilSwizzleOneSupport
                    polygonModePointSize = polygonModePointSize
                    nonStrictSinglePixelWideLinesUseParallelogram = nonStrictSinglePixelWideLinesUseParallelogram
                    nonStrictWideLinesUseParallelogram = nonStrictWideLinesUseParallelogram
                    blockTexelViewCompatibleMultipleLayers = blockTexelViewCompatibleMultipleLayers
                    maxCombinedImageSamplerDescriptorCount = maxCombinedImageSamplerDescriptorCount
                    fragmentShadingRateClampCombinerInputs = fragmentShadingRateClampCombinerInputs
                    defaultRobustnessStorageBuffers = defaultRobustnessStorageBuffers
                    defaultRobustnessUniformBuffers = defaultRobustnessUniformBuffers
                    defaultRobustnessVertexInputs = defaultRobustnessVertexInputs
                    defaultRobustnessImages = defaultRobustnessImages
                    copySrcLayoutCount = copySrcLayoutCount
                    pCopySrcLayouts = pCopySrcLayouts
                    copyDstLayoutCount = copyDstLayoutCount
                    pCopyDstLayouts = pCopyDstLayouts
                    optimalTilingLayoutUUID = optimalTilingLayoutUUID
                    identicalMemoryTypeRequirements = identicalMemoryTypeRequirements
                }

            new(lineSubPixelPrecisionBits: uint32, maxVertexAttribDivisor: uint32, supportsNonZeroFirstInstance: VkBool32, maxPushDescriptors: uint32, dynamicRenderingLocalReadDepthStencilAttachments: VkBool32, dynamicRenderingLocalReadMultisampledAttachments: VkBool32, earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32, earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32, depthStencilSwizzleOneSupport: VkBool32, polygonModePointSize: VkBool32, nonStrictSinglePixelWideLinesUseParallelogram: VkBool32, nonStrictWideLinesUseParallelogram: VkBool32, blockTexelViewCompatibleMultipleLayers: VkBool32, maxCombinedImageSamplerDescriptorCount: uint32, fragmentShadingRateClampCombinerInputs: VkBool32, defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehavior, defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehavior, defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehavior, defaultRobustnessImages: VkPipelineRobustnessImageBehavior, copySrcLayoutCount: uint32, pCopySrcLayouts: nativeptr<VkImageLayout>, copyDstLayoutCount: uint32, pCopyDstLayouts: nativeptr<VkImageLayout>, optimalTilingLayoutUUID: Guid, identicalMemoryTypeRequirements: VkBool32) =
                VkPhysicalDeviceVulkan14Properties(Unchecked.defaultof<nativeint>, lineSubPixelPrecisionBits, maxVertexAttribDivisor, supportsNonZeroFirstInstance, maxPushDescriptors, dynamicRenderingLocalReadDepthStencilAttachments, dynamicRenderingLocalReadMultisampledAttachments, earlyFragmentMultisampleCoverageAfterSampleCounting, earlyFragmentSampleMaskTestBeforeSampleCounting, depthStencilSwizzleOneSupport, polygonModePointSize, nonStrictSinglePixelWideLinesUseParallelogram, nonStrictWideLinesUseParallelogram, blockTexelViewCompatibleMultipleLayers, maxCombinedImageSamplerDescriptorCount, fragmentShadingRateClampCombinerInputs, defaultRobustnessStorageBuffers, defaultRobustnessUniformBuffers, defaultRobustnessVertexInputs, defaultRobustnessImages, copySrcLayoutCount, pCopySrcLayouts, copyDstLayoutCount, pCopyDstLayouts, optimalTilingLayoutUUID, identicalMemoryTypeRequirements)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.lineSubPixelPrecisionBits = Unchecked.defaultof<uint32> && x.maxVertexAttribDivisor = Unchecked.defaultof<uint32> && x.supportsNonZeroFirstInstance = Unchecked.defaultof<VkBool32> && x.maxPushDescriptors = Unchecked.defaultof<uint32> && x.dynamicRenderingLocalReadDepthStencilAttachments = Unchecked.defaultof<VkBool32> && x.dynamicRenderingLocalReadMultisampledAttachments = Unchecked.defaultof<VkBool32> && x.earlyFragmentMultisampleCoverageAfterSampleCounting = Unchecked.defaultof<VkBool32> && x.earlyFragmentSampleMaskTestBeforeSampleCounting = Unchecked.defaultof<VkBool32> && x.depthStencilSwizzleOneSupport = Unchecked.defaultof<VkBool32> && x.polygonModePointSize = Unchecked.defaultof<VkBool32> && x.nonStrictSinglePixelWideLinesUseParallelogram = Unchecked.defaultof<VkBool32> && x.nonStrictWideLinesUseParallelogram = Unchecked.defaultof<VkBool32> && x.blockTexelViewCompatibleMultipleLayers = Unchecked.defaultof<VkBool32> && x.maxCombinedImageSamplerDescriptorCount = Unchecked.defaultof<uint32> && x.fragmentShadingRateClampCombinerInputs = Unchecked.defaultof<VkBool32> && x.defaultRobustnessStorageBuffers = Unchecked.defaultof<VkPipelineRobustnessBufferBehavior> && x.defaultRobustnessUniformBuffers = Unchecked.defaultof<VkPipelineRobustnessBufferBehavior> && x.defaultRobustnessVertexInputs = Unchecked.defaultof<VkPipelineRobustnessBufferBehavior> && x.defaultRobustnessImages = Unchecked.defaultof<VkPipelineRobustnessImageBehavior> && x.copySrcLayoutCount = Unchecked.defaultof<uint32> && x.pCopySrcLayouts = Unchecked.defaultof<nativeptr<VkImageLayout>> && x.copyDstLayoutCount = Unchecked.defaultof<uint32> && x.pCopyDstLayouts = Unchecked.defaultof<nativeptr<VkImageLayout>> && x.optimalTilingLayoutUUID = Unchecked.defaultof<Guid> && x.identicalMemoryTypeRequirements = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVulkan14Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkPipelineRobustnessBufferBehavior>, Unchecked.defaultof<VkPipelineRobustnessBufferBehavior>, Unchecked.defaultof<VkPipelineRobustnessBufferBehavior>, Unchecked.defaultof<VkPipelineRobustnessImageBehavior>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageLayout>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageLayout>>, Unchecked.defaultof<Guid>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "lineSubPixelPrecisionBits = %A" x.lineSubPixelPrecisionBits
                    sprintf "maxVertexAttribDivisor = %A" x.maxVertexAttribDivisor
                    sprintf "supportsNonZeroFirstInstance = %A" x.supportsNonZeroFirstInstance
                    sprintf "maxPushDescriptors = %A" x.maxPushDescriptors
                    sprintf "dynamicRenderingLocalReadDepthStencilAttachments = %A" x.dynamicRenderingLocalReadDepthStencilAttachments
                    sprintf "dynamicRenderingLocalReadMultisampledAttachments = %A" x.dynamicRenderingLocalReadMultisampledAttachments
                    sprintf "earlyFragmentMultisampleCoverageAfterSampleCounting = %A" x.earlyFragmentMultisampleCoverageAfterSampleCounting
                    sprintf "earlyFragmentSampleMaskTestBeforeSampleCounting = %A" x.earlyFragmentSampleMaskTestBeforeSampleCounting
                    sprintf "depthStencilSwizzleOneSupport = %A" x.depthStencilSwizzleOneSupport
                    sprintf "polygonModePointSize = %A" x.polygonModePointSize
                    sprintf "nonStrictSinglePixelWideLinesUseParallelogram = %A" x.nonStrictSinglePixelWideLinesUseParallelogram
                    sprintf "nonStrictWideLinesUseParallelogram = %A" x.nonStrictWideLinesUseParallelogram
                    sprintf "blockTexelViewCompatibleMultipleLayers = %A" x.blockTexelViewCompatibleMultipleLayers
                    sprintf "maxCombinedImageSamplerDescriptorCount = %A" x.maxCombinedImageSamplerDescriptorCount
                    sprintf "fragmentShadingRateClampCombinerInputs = %A" x.fragmentShadingRateClampCombinerInputs
                    sprintf "defaultRobustnessStorageBuffers = %A" x.defaultRobustnessStorageBuffers
                    sprintf "defaultRobustnessUniformBuffers = %A" x.defaultRobustnessUniformBuffers
                    sprintf "defaultRobustnessVertexInputs = %A" x.defaultRobustnessVertexInputs
                    sprintf "defaultRobustnessImages = %A" x.defaultRobustnessImages
                    sprintf "copySrcLayoutCount = %A" x.copySrcLayoutCount
                    sprintf "pCopySrcLayouts = %A" x.pCopySrcLayouts
                    sprintf "copyDstLayoutCount = %A" x.copyDstLayoutCount
                    sprintf "pCopyDstLayouts = %A" x.pCopyDstLayouts
                    sprintf "optimalTilingLayoutUUID = %A" x.optimalTilingLayoutUUID
                    sprintf "identicalMemoryTypeRequirements = %A" x.identicalMemoryTypeRequirements
                ] |> sprintf "VkPhysicalDeviceVulkan14Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineCreateFlags2CreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPipelineCreateFlags2

            new(pNext: nativeint, flags: VkPipelineCreateFlags2) =
                {
                    sType = 1000470005u
                    pNext = pNext
                    flags = flags
                }

            new(flags: VkPipelineCreateFlags2) =
                VkPipelineCreateFlags2CreateInfo(Unchecked.defaultof<nativeint>, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCreateFlags2>

            static member Empty =
                VkPipelineCreateFlags2CreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCreateFlags2>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkPipelineCreateFlags2CreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineRasterizationLineStateCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public lineRasterizationMode : VkLineRasterizationMode
            val mutable public stippledLineEnable : VkBool32
            val mutable public lineStippleFactor : uint32
            val mutable public lineStipplePattern : uint16

            new(pNext: nativeint, lineRasterizationMode: VkLineRasterizationMode, stippledLineEnable: VkBool32, lineStippleFactor: uint32, lineStipplePattern: uint16) =
                {
                    sType = 1000259001u
                    pNext = pNext
                    lineRasterizationMode = lineRasterizationMode
                    stippledLineEnable = stippledLineEnable
                    lineStippleFactor = lineStippleFactor
                    lineStipplePattern = lineStipplePattern
                }

            new(lineRasterizationMode: VkLineRasterizationMode, stippledLineEnable: VkBool32, lineStippleFactor: uint32, lineStipplePattern: uint16) =
                VkPipelineRasterizationLineStateCreateInfo(Unchecked.defaultof<nativeint>, lineRasterizationMode, stippledLineEnable, lineStippleFactor, lineStipplePattern)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.lineRasterizationMode = Unchecked.defaultof<VkLineRasterizationMode> && x.stippledLineEnable = Unchecked.defaultof<VkBool32> && x.lineStippleFactor = Unchecked.defaultof<uint32> && x.lineStipplePattern = Unchecked.defaultof<uint16>

            static member Empty =
                VkPipelineRasterizationLineStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkLineRasterizationMode>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint16>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "lineRasterizationMode = %A" x.lineRasterizationMode
                    sprintf "stippledLineEnable = %A" x.stippledLineEnable
                    sprintf "lineStippleFactor = %A" x.lineStippleFactor
                    sprintf "lineStipplePattern = %A" x.lineStipplePattern
                ] |> sprintf "VkPipelineRasterizationLineStateCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineRobustnessCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public storageBuffers : VkPipelineRobustnessBufferBehavior
            val mutable public uniformBuffers : VkPipelineRobustnessBufferBehavior
            val mutable public vertexInputs : VkPipelineRobustnessBufferBehavior
            val mutable public images : VkPipelineRobustnessImageBehavior

            new(pNext: nativeint, storageBuffers: VkPipelineRobustnessBufferBehavior, uniformBuffers: VkPipelineRobustnessBufferBehavior, vertexInputs: VkPipelineRobustnessBufferBehavior, images: VkPipelineRobustnessImageBehavior) =
                {
                    sType = 1000068000u
                    pNext = pNext
                    storageBuffers = storageBuffers
                    uniformBuffers = uniformBuffers
                    vertexInputs = vertexInputs
                    images = images
                }

            new(storageBuffers: VkPipelineRobustnessBufferBehavior, uniformBuffers: VkPipelineRobustnessBufferBehavior, vertexInputs: VkPipelineRobustnessBufferBehavior, images: VkPipelineRobustnessImageBehavior) =
                VkPipelineRobustnessCreateInfo(Unchecked.defaultof<nativeint>, storageBuffers, uniformBuffers, vertexInputs, images)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.storageBuffers = Unchecked.defaultof<VkPipelineRobustnessBufferBehavior> && x.uniformBuffers = Unchecked.defaultof<VkPipelineRobustnessBufferBehavior> && x.vertexInputs = Unchecked.defaultof<VkPipelineRobustnessBufferBehavior> && x.images = Unchecked.defaultof<VkPipelineRobustnessImageBehavior>

            static member Empty =
                VkPipelineRobustnessCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineRobustnessBufferBehavior>, Unchecked.defaultof<VkPipelineRobustnessBufferBehavior>, Unchecked.defaultof<VkPipelineRobustnessBufferBehavior>, Unchecked.defaultof<VkPipelineRobustnessImageBehavior>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "storageBuffers = %A" x.storageBuffers
                    sprintf "uniformBuffers = %A" x.uniformBuffers
                    sprintf "vertexInputs = %A" x.vertexInputs
                    sprintf "images = %A" x.images
                ] |> sprintf "VkPipelineRobustnessCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVertexInputBindingDivisorDescription =
        struct
            val mutable public binding : uint32
            val mutable public divisor : uint32

            new(binding: uint32, divisor: uint32) =
                {
                    binding = binding
                    divisor = divisor
                }

            member x.IsEmpty =
                x.binding = Unchecked.defaultof<uint32> && x.divisor = Unchecked.defaultof<uint32>

            static member Empty =
                VkVertexInputBindingDivisorDescription(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "binding = %A" x.binding
                    sprintf "divisor = %A" x.divisor
                ] |> sprintf "VkVertexInputBindingDivisorDescription { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineVertexInputDivisorStateCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vertexBindingDivisorCount : uint32
            val mutable public pVertexBindingDivisors : nativeptr<VkVertexInputBindingDivisorDescription>

            new(pNext: nativeint, vertexBindingDivisorCount: uint32, pVertexBindingDivisors: nativeptr<VkVertexInputBindingDivisorDescription>) =
                {
                    sType = 1000190001u
                    pNext = pNext
                    vertexBindingDivisorCount = vertexBindingDivisorCount
                    pVertexBindingDivisors = pVertexBindingDivisors
                }

            new(vertexBindingDivisorCount: uint32, pVertexBindingDivisors: nativeptr<VkVertexInputBindingDivisorDescription>) =
                VkPipelineVertexInputDivisorStateCreateInfo(Unchecked.defaultof<nativeint>, vertexBindingDivisorCount, pVertexBindingDivisors)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vertexBindingDivisorCount = Unchecked.defaultof<uint32> && x.pVertexBindingDivisors = Unchecked.defaultof<nativeptr<VkVertexInputBindingDivisorDescription>>

            static member Empty =
                VkPipelineVertexInputDivisorStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVertexInputBindingDivisorDescription>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "vertexBindingDivisorCount = %A" x.vertexBindingDivisorCount
                    sprintf "pVertexBindingDivisors = %A" x.pVertexBindingDivisors
                ] |> sprintf "VkPipelineVertexInputDivisorStateCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPushConstantsInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public layout : VkPipelineLayout
            val mutable public stageFlags : VkShaderStageFlags
            val mutable public offset : uint32
            val mutable public size : uint32
            val mutable public pValues : nativeint

            new(pNext: nativeint, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: uint32, size: uint32, pValues: nativeint) =
                {
                    sType = 1000545004u
                    pNext = pNext
                    layout = layout
                    stageFlags = stageFlags
                    offset = offset
                    size = size
                    pValues = pValues
                }

            new(layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: uint32, size: uint32, pValues: nativeint) =
                VkPushConstantsInfo(Unchecked.defaultof<nativeint>, layout, stageFlags, offset, size, pValues)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.stageFlags = Unchecked.defaultof<VkShaderStageFlags> && x.offset = Unchecked.defaultof<uint32> && x.size = Unchecked.defaultof<uint32> && x.pValues = Unchecked.defaultof<nativeint>

            static member Empty =
                VkPushConstantsInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "layout = %A" x.layout
                    sprintf "stageFlags = %A" x.stageFlags
                    sprintf "offset = %A" x.offset
                    sprintf "size = %A" x.size
                    sprintf "pValues = %A" x.pValues
                ] |> sprintf "VkPushConstantsInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPushDescriptorSetInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stageFlags : VkShaderStageFlags
            val mutable public layout : VkPipelineLayout
            val mutable public set : uint32
            val mutable public descriptorWriteCount : uint32
            val mutable public pDescriptorWrites : nativeptr<VkWriteDescriptorSet>

            new(pNext: nativeint, stageFlags: VkShaderStageFlags, layout: VkPipelineLayout, set: uint32, descriptorWriteCount: uint32, pDescriptorWrites: nativeptr<VkWriteDescriptorSet>) =
                {
                    sType = 1000545005u
                    pNext = pNext
                    stageFlags = stageFlags
                    layout = layout
                    set = set
                    descriptorWriteCount = descriptorWriteCount
                    pDescriptorWrites = pDescriptorWrites
                }

            new(stageFlags: VkShaderStageFlags, layout: VkPipelineLayout, set: uint32, descriptorWriteCount: uint32, pDescriptorWrites: nativeptr<VkWriteDescriptorSet>) =
                VkPushDescriptorSetInfo(Unchecked.defaultof<nativeint>, stageFlags, layout, set, descriptorWriteCount, pDescriptorWrites)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stageFlags = Unchecked.defaultof<VkShaderStageFlags> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.set = Unchecked.defaultof<uint32> && x.descriptorWriteCount = Unchecked.defaultof<uint32> && x.pDescriptorWrites = Unchecked.defaultof<nativeptr<VkWriteDescriptorSet>>

            static member Empty =
                VkPushDescriptorSetInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkWriteDescriptorSet>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "stageFlags = %A" x.stageFlags
                    sprintf "layout = %A" x.layout
                    sprintf "set = %A" x.set
                    sprintf "descriptorWriteCount = %A" x.descriptorWriteCount
                    sprintf "pDescriptorWrites = %A" x.pDescriptorWrites
                ] |> sprintf "VkPushDescriptorSetInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPushDescriptorSetWithTemplateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public descriptorUpdateTemplate : Vulkan11.VkDescriptorUpdateTemplate
            val mutable public layout : VkPipelineLayout
            val mutable public set : uint32
            val mutable public pData : nativeint

            new(pNext: nativeint, descriptorUpdateTemplate: Vulkan11.VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: uint32, pData: nativeint) =
                {
                    sType = 1000545006u
                    pNext = pNext
                    descriptorUpdateTemplate = descriptorUpdateTemplate
                    layout = layout
                    set = set
                    pData = pData
                }

            new(descriptorUpdateTemplate: Vulkan11.VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: uint32, pData: nativeint) =
                VkPushDescriptorSetWithTemplateInfo(Unchecked.defaultof<nativeint>, descriptorUpdateTemplate, layout, set, pData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.descriptorUpdateTemplate = Unchecked.defaultof<Vulkan11.VkDescriptorUpdateTemplate> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.set = Unchecked.defaultof<uint32> && x.pData = Unchecked.defaultof<nativeint>

            static member Empty =
                VkPushDescriptorSetWithTemplateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Vulkan11.VkDescriptorUpdateTemplate>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "descriptorUpdateTemplate = %A" x.descriptorUpdateTemplate
                    sprintf "layout = %A" x.layout
                    sprintf "set = %A" x.set
                    sprintf "pData = %A" x.pData
                ] |> sprintf "VkPushDescriptorSetWithTemplateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkQueueFamilyGlobalPriorityProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public priorityCount : uint32
            val mutable public priorities : VkQueueGlobalPriority_16

            new(pNext: nativeint, priorityCount: uint32, priorities: VkQueueGlobalPriority_16) =
                {
                    sType = 1000388001u
                    pNext = pNext
                    priorityCount = priorityCount
                    priorities = priorities
                }

            new(priorityCount: uint32, priorities: VkQueueGlobalPriority_16) =
                VkQueueFamilyGlobalPriorityProperties(Unchecked.defaultof<nativeint>, priorityCount, priorities)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.priorityCount = Unchecked.defaultof<uint32> && x.priorities = Unchecked.defaultof<VkQueueGlobalPriority_16>

            static member Empty =
                VkQueueFamilyGlobalPriorityProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkQueueGlobalPriority_16>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "priorityCount = %A" x.priorityCount
                    sprintf "priorities = %A" x.priorities
                ] |> sprintf "VkQueueFamilyGlobalPriorityProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderingAreaInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public viewMask : uint32
            val mutable public colorAttachmentCount : uint32
            val mutable public pColorAttachmentFormats : nativeptr<VkFormat>
            val mutable public depthAttachmentFormat : VkFormat
            val mutable public stencilAttachmentFormat : VkFormat

            new(pNext: nativeint, viewMask: uint32, colorAttachmentCount: uint32, pColorAttachmentFormats: nativeptr<VkFormat>, depthAttachmentFormat: VkFormat, stencilAttachmentFormat: VkFormat) =
                {
                    sType = 1000470003u
                    pNext = pNext
                    viewMask = viewMask
                    colorAttachmentCount = colorAttachmentCount
                    pColorAttachmentFormats = pColorAttachmentFormats
                    depthAttachmentFormat = depthAttachmentFormat
                    stencilAttachmentFormat = stencilAttachmentFormat
                }

            new(viewMask: uint32, colorAttachmentCount: uint32, pColorAttachmentFormats: nativeptr<VkFormat>, depthAttachmentFormat: VkFormat, stencilAttachmentFormat: VkFormat) =
                VkRenderingAreaInfo(Unchecked.defaultof<nativeint>, viewMask, colorAttachmentCount, pColorAttachmentFormats, depthAttachmentFormat, stencilAttachmentFormat)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.viewMask = Unchecked.defaultof<uint32> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachmentFormats = Unchecked.defaultof<nativeptr<VkFormat>> && x.depthAttachmentFormat = Unchecked.defaultof<VkFormat> && x.stencilAttachmentFormat = Unchecked.defaultof<VkFormat>

            static member Empty =
                VkRenderingAreaInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkFormat>>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkFormat>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "viewMask = %A" x.viewMask
                    sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                    sprintf "pColorAttachmentFormats = %A" x.pColorAttachmentFormats
                    sprintf "depthAttachmentFormat = %A" x.depthAttachmentFormat
                    sprintf "stencilAttachmentFormat = %A" x.stencilAttachmentFormat
                ] |> sprintf "VkRenderingAreaInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderingAttachmentLocationInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public colorAttachmentCount : uint32
            val mutable public pColorAttachmentLocations : nativeptr<uint32>

            new(pNext: nativeint, colorAttachmentCount: uint32, pColorAttachmentLocations: nativeptr<uint32>) =
                {
                    sType = 1000232001u
                    pNext = pNext
                    colorAttachmentCount = colorAttachmentCount
                    pColorAttachmentLocations = pColorAttachmentLocations
                }

            new(colorAttachmentCount: uint32, pColorAttachmentLocations: nativeptr<uint32>) =
                VkRenderingAttachmentLocationInfo(Unchecked.defaultof<nativeint>, colorAttachmentCount, pColorAttachmentLocations)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachmentLocations = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkRenderingAttachmentLocationInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                    sprintf "pColorAttachmentLocations = %A" x.pColorAttachmentLocations
                ] |> sprintf "VkRenderingAttachmentLocationInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderingInputAttachmentIndexInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public colorAttachmentCount : uint32
            val mutable public pColorAttachmentInputIndices : nativeptr<uint32>
            val mutable public pDepthInputAttachmentIndex : nativeptr<uint32>
            val mutable public pStencilInputAttachmentIndex : nativeptr<uint32>

            new(pNext: nativeint, colorAttachmentCount: uint32, pColorAttachmentInputIndices: nativeptr<uint32>, pDepthInputAttachmentIndex: nativeptr<uint32>, pStencilInputAttachmentIndex: nativeptr<uint32>) =
                {
                    sType = 1000232002u
                    pNext = pNext
                    colorAttachmentCount = colorAttachmentCount
                    pColorAttachmentInputIndices = pColorAttachmentInputIndices
                    pDepthInputAttachmentIndex = pDepthInputAttachmentIndex
                    pStencilInputAttachmentIndex = pStencilInputAttachmentIndex
                }

            new(colorAttachmentCount: uint32, pColorAttachmentInputIndices: nativeptr<uint32>, pDepthInputAttachmentIndex: nativeptr<uint32>, pStencilInputAttachmentIndex: nativeptr<uint32>) =
                VkRenderingInputAttachmentIndexInfo(Unchecked.defaultof<nativeint>, colorAttachmentCount, pColorAttachmentInputIndices, pDepthInputAttachmentIndex, pStencilInputAttachmentIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachmentInputIndices = Unchecked.defaultof<nativeptr<uint32>> && x.pDepthInputAttachmentIndex = Unchecked.defaultof<nativeptr<uint32>> && x.pStencilInputAttachmentIndex = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkRenderingInputAttachmentIndexInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                    sprintf "pColorAttachmentInputIndices = %A" x.pColorAttachmentInputIndices
                    sprintf "pDepthInputAttachmentIndex = %A" x.pDepthInputAttachmentIndex
                    sprintf "pStencilInputAttachmentIndex = %A" x.pStencilInputAttachmentIndex
                ] |> sprintf "VkRenderingInputAttachmentIndexInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubresourceHostMemcpySize =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public size : VkDeviceSize

            new(pNext: nativeint, size: VkDeviceSize) =
                {
                    sType = 1000270008u
                    pNext = pNext
                    size = size
                }

            new(size: VkDeviceSize) =
                VkSubresourceHostMemcpySize(Unchecked.defaultof<nativeint>, size)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.size = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkSubresourceHostMemcpySize(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "size = %A" x.size
                ] |> sprintf "VkSubresourceHostMemcpySize { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubresourceLayout2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public subresourceLayout : VkSubresourceLayout

            new(pNext: nativeint, subresourceLayout: VkSubresourceLayout) =
                {
                    sType = 1000338002u
                    pNext = pNext
                    subresourceLayout = subresourceLayout
                }

            new(subresourceLayout: VkSubresourceLayout) =
                VkSubresourceLayout2(Unchecked.defaultof<nativeint>, subresourceLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.subresourceLayout = Unchecked.defaultof<VkSubresourceLayout>

            static member Empty =
                VkSubresourceLayout2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSubresourceLayout>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pNext = %A" x.pNext
                    sprintf "subresourceLayout = %A" x.subresourceLayout
                ] |> sprintf "VkSubresourceLayout2 { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAttachmentLoadOp with
              static member inline None = enum<VkAttachmentLoadOp> 1000400000
         type VkBufferUsageFlags2 with
              static member inline BufferUsage2ShaderDeviceAddressBit = enum<VkBufferUsageFlags2> 0x00020000
         type VkDescriptorSetLayoutCreateFlags with
              static member inline PushDescriptorBit = enum<VkDescriptorSetLayoutCreateFlags> 0x00000001
         type Vulkan11.VkDescriptorUpdateTemplateType with
              static member inline PushDescriptors = enum<Vulkan11.VkDescriptorUpdateTemplateType> 1
         type VkDynamicState with
              static member inline LineStipple = enum<VkDynamicState> 1000259000
         type VkFormat with
              static member inline A1b5g5r5UnormPack16 = enum<VkFormat> 1000470000
              static member inline A8Unorm = enum<VkFormat> 1000470001
         type Vulkan13.VkFormatFeatureFlags2 with
              static member inline FormatFeature2HostImageTransferBit = enum<Vulkan13.VkFormatFeatureFlags2> 0x00004000
         type VkImageLayout with
              static member inline RenderingLocalRead = enum<VkImageLayout> 1000232000
         type VkImageUsageFlags with
              static member inline HostTransferBit = enum<VkImageUsageFlags> 0x00400000
         type VkIndexType with
              static member inline Uint8 = enum<VkIndexType> 1000265000
         type VkPipelineCreateFlags with
              static member inline NoProtectedAccessBit = enum<VkPipelineCreateFlags> 0x08000000
              static member inline ProtectedAccessOnlyBit = enum<VkPipelineCreateFlags> 0x40000000
         type VkResult with
              static member inline ErrorNotPermitted = enum<VkResult> -1000174001
         type Vulkan11.VkSubgroupFeatureFlags with
              static member inline RotateBit = enum<Vulkan11.VkSubgroupFeatureFlags> 0x00000200
              static member inline RotateClusteredBit = enum<Vulkan11.VkSubgroupFeatureFlags> 0x00000400

    module VkRaw =
        open VkRaw

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetLineStipple(VkCommandBuffer commandBuffer, uint32 lineStippleFactor, uint16 lineStipplePattern)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkMapMemory2(VkDevice device, VkMemoryMapInfo* pMemoryMapInfo, nativeint* ppData)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkUnmapMemory2(VkDevice device, VkMemoryUnmapInfo* pMemoryUnmapInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdBindIndexBuffer2(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetRenderingAreaGranularity(VkDevice device, VkRenderingAreaInfo* pRenderingAreaInfo, VkExtent2D* pGranularity)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDeviceImageSubresourceLayout(VkDevice device, VkDeviceImageSubresourceInfo* pInfo, VkSubresourceLayout2* pLayout)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetImageSubresourceLayout2(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, VkSubresourceLayout2* pLayout)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdPushDescriptorSet(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 set, uint32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdPushDescriptorSetWithTemplate(VkCommandBuffer commandBuffer, Vulkan11.VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32 set, nativeint pData)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetRenderingAttachmentLocations(VkCommandBuffer commandBuffer, VkRenderingAttachmentLocationInfo* pLocationInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetRenderingInputAttachmentIndices(VkCommandBuffer commandBuffer, VkRenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdBindDescriptorSets2(VkCommandBuffer commandBuffer, VkBindDescriptorSetsInfo* pBindDescriptorSetsInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdPushConstants2(VkCommandBuffer commandBuffer, VkPushConstantsInfo* pPushConstantsInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdPushDescriptorSet2(VkCommandBuffer commandBuffer, VkPushDescriptorSetInfo* pPushDescriptorSetInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdPushDescriptorSetWithTemplate2(VkCommandBuffer commandBuffer, VkPushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkCopyMemoryToImage(VkDevice device, VkCopyMemoryToImageInfo* pCopyMemoryToImageInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkCopyImageToMemory(VkDevice device, VkCopyImageToMemoryInfo* pCopyImageToMemoryInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkCopyImageToImage(VkDevice device, VkCopyImageToImageInfo* pCopyImageToImageInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkTransitionImageLayout(VkDevice device, uint32 transitionCount, VkHostImageLayoutTransitionInfo* pTransitions)



[<AutoOpen>]
module rec Extensions =

    module KHRSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_surface"
        let Number = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfaceKHR =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkSurfaceKHR(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<Flags>]
        type VkSurfaceTransformFlagsKHR =
            | All = 511
            | None = 0
            | IdentityBit = 0x00000001
            | Rotate90Bit = 0x00000002
            | Rotate180Bit = 0x00000004
            | Rotate270Bit = 0x00000008
            | HorizontalMirrorBit = 0x00000010
            | HorizontalMirrorRotate90Bit = 0x00000020
            | HorizontalMirrorRotate180Bit = 0x00000040
            | HorizontalMirrorRotate270Bit = 0x00000080
            | InheritBit = 0x00000100

        type VkPresentModeKHR =
            | Immediate = 0
            | Mailbox = 1
            | Fifo = 2
            | FifoRelaxed = 3

        type VkColorSpaceKHR =
            | SrgbNonlinear = 0

        [<Flags>]
        type VkCompositeAlphaFlagsKHR =
            | All = 15
            | None = 0
            | OpaqueBit = 0x00000001
            | PreMultipliedBit = 0x00000002
            | PostMultipliedBit = 0x00000004
            | InheritBit = 0x00000008


        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfaceCapabilitiesKHR =
            struct
                val mutable public minImageCount : uint32
                val mutable public maxImageCount : uint32
                val mutable public currentExtent : VkExtent2D
                val mutable public minImageExtent : VkExtent2D
                val mutable public maxImageExtent : VkExtent2D
                val mutable public maxImageArrayLayers : uint32
                val mutable public supportedTransforms : VkSurfaceTransformFlagsKHR
                val mutable public currentTransform : VkSurfaceTransformFlagsKHR
                val mutable public supportedCompositeAlpha : VkCompositeAlphaFlagsKHR
                val mutable public supportedUsageFlags : VkImageUsageFlags

                new(minImageCount: uint32, maxImageCount: uint32, currentExtent: VkExtent2D, minImageExtent: VkExtent2D, maxImageExtent: VkExtent2D, maxImageArrayLayers: uint32, supportedTransforms: VkSurfaceTransformFlagsKHR, currentTransform: VkSurfaceTransformFlagsKHR, supportedCompositeAlpha: VkCompositeAlphaFlagsKHR, supportedUsageFlags: VkImageUsageFlags) =
                    {
                        minImageCount = minImageCount
                        maxImageCount = maxImageCount
                        currentExtent = currentExtent
                        minImageExtent = minImageExtent
                        maxImageExtent = maxImageExtent
                        maxImageArrayLayers = maxImageArrayLayers
                        supportedTransforms = supportedTransforms
                        currentTransform = currentTransform
                        supportedCompositeAlpha = supportedCompositeAlpha
                        supportedUsageFlags = supportedUsageFlags
                    }

                member x.IsEmpty =
                    x.minImageCount = Unchecked.defaultof<uint32> && x.maxImageCount = Unchecked.defaultof<uint32> && x.currentExtent = Unchecked.defaultof<VkExtent2D> && x.minImageExtent = Unchecked.defaultof<VkExtent2D> && x.maxImageExtent = Unchecked.defaultof<VkExtent2D> && x.maxImageArrayLayers = Unchecked.defaultof<uint32> && x.supportedTransforms = Unchecked.defaultof<VkSurfaceTransformFlagsKHR> && x.currentTransform = Unchecked.defaultof<VkSurfaceTransformFlagsKHR> && x.supportedCompositeAlpha = Unchecked.defaultof<VkCompositeAlphaFlagsKHR> && x.supportedUsageFlags = Unchecked.defaultof<VkImageUsageFlags>

                static member Empty =
                    VkSurfaceCapabilitiesKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<VkCompositeAlphaFlagsKHR>, Unchecked.defaultof<VkImageUsageFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "minImageCount = %A" x.minImageCount
                        sprintf "maxImageCount = %A" x.maxImageCount
                        sprintf "currentExtent = %A" x.currentExtent
                        sprintf "minImageExtent = %A" x.minImageExtent
                        sprintf "maxImageExtent = %A" x.maxImageExtent
                        sprintf "maxImageArrayLayers = %A" x.maxImageArrayLayers
                        sprintf "supportedTransforms = %A" x.supportedTransforms
                        sprintf "currentTransform = %A" x.currentTransform
                        sprintf "supportedCompositeAlpha = %A" x.supportedCompositeAlpha
                        sprintf "supportedUsageFlags = %A" x.supportedUsageFlags
                    ] |> sprintf "VkSurfaceCapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfaceFormatKHR =
            struct
                val mutable public format : VkFormat
                val mutable public colorSpace : VkColorSpaceKHR

                new(format: VkFormat, colorSpace: VkColorSpaceKHR) =
                    {
                        format = format
                        colorSpace = colorSpace
                    }

                member x.IsEmpty =
                    x.format = Unchecked.defaultof<VkFormat> && x.colorSpace = Unchecked.defaultof<VkColorSpaceKHR>

                static member Empty =
                    VkSurfaceFormatKHR(Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkColorSpaceKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "format = %A" x.format
                        sprintf "colorSpace = %A" x.colorSpace
                    ] |> sprintf "VkSurfaceFormatKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  static member inline SurfaceKhr = enum<VkObjectType> 1000000000
             type VkResult with
                  static member inline ErrorSurfaceLostKhr = enum<VkResult> -1000000000
                  static member inline ErrorNativeWindowInUseKhr = enum<VkResult> -1000000001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroySurfaceKHRDel = delegate of VkInstance * VkSurfaceKHR * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceSurfaceSupportKHRDel = delegate of VkPhysicalDevice * uint32 * VkSurfaceKHR * nativeptr<VkBool32> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceSurfaceCapabilitiesKHRDel = delegate of VkPhysicalDevice * VkSurfaceKHR * nativeptr<VkSurfaceCapabilitiesKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceSurfaceFormatsKHRDel = delegate of VkPhysicalDevice * VkSurfaceKHR * nativeptr<uint32> * nativeptr<VkSurfaceFormatKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceSurfacePresentModesKHRDel = delegate of VkPhysicalDevice * VkSurfaceKHR * nativeptr<uint32> * nativeptr<VkPresentModeKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRSurface")
                static let s_vkDestroySurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroySurfaceKHRDel> "vkDestroySurfaceKHR"
                static let s_vkGetPhysicalDeviceSurfaceSupportKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfaceSupportKHRDel> "vkGetPhysicalDeviceSurfaceSupportKHR"
                static let s_vkGetPhysicalDeviceSurfaceCapabilitiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfaceCapabilitiesKHRDel> "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"
                static let s_vkGetPhysicalDeviceSurfaceFormatsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfaceFormatsKHRDel> "vkGetPhysicalDeviceSurfaceFormatsKHR"
                static let s_vkGetPhysicalDeviceSurfacePresentModesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfacePresentModesKHRDel> "vkGetPhysicalDeviceSurfacePresentModesKHR"
                static do Report.End(3) |> ignore
                static member vkDestroySurfaceKHR = s_vkDestroySurfaceKHRDel
                static member vkGetPhysicalDeviceSurfaceSupportKHR = s_vkGetPhysicalDeviceSurfaceSupportKHRDel
                static member vkGetPhysicalDeviceSurfaceCapabilitiesKHR = s_vkGetPhysicalDeviceSurfaceCapabilitiesKHRDel
                static member vkGetPhysicalDeviceSurfaceFormatsKHR = s_vkGetPhysicalDeviceSurfaceFormatsKHRDel
                static member vkGetPhysicalDeviceSurfacePresentModesKHR = s_vkGetPhysicalDeviceSurfacePresentModesKHRDel
            let vkDestroySurfaceKHR(instance : VkInstance, surface : VkSurfaceKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroySurfaceKHR.Invoke(instance, surface, pAllocator)
            let vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, surface : VkSurfaceKHR, pSupported : nativeptr<VkBool32>) = Loader<unit>.vkGetPhysicalDeviceSurfaceSupportKHR.Invoke(physicalDevice, queueFamilyIndex, surface, pSupported)
            let vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice : VkPhysicalDevice, surface : VkSurfaceKHR, pSurfaceCapabilities : nativeptr<VkSurfaceCapabilitiesKHR>) = Loader<unit>.vkGetPhysicalDeviceSurfaceCapabilitiesKHR.Invoke(physicalDevice, surface, pSurfaceCapabilities)
            let vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice : VkPhysicalDevice, surface : VkSurfaceKHR, pSurfaceFormatCount : nativeptr<uint32>, pSurfaceFormats : nativeptr<VkSurfaceFormatKHR>) = Loader<unit>.vkGetPhysicalDeviceSurfaceFormatsKHR.Invoke(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats)
            let vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice : VkPhysicalDevice, surface : VkSurfaceKHR, pPresentModeCount : nativeptr<uint32>, pPresentModes : nativeptr<VkPresentModeKHR>) = Loader<unit>.vkGetPhysicalDeviceSurfacePresentModesKHR.Invoke(physicalDevice, surface, pPresentModeCount, pPresentModes)

    /// Requires KHRSurface.
    module KHRSwapchain =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_swapchain"
        let Number = 2


        [<StructLayout(LayoutKind.Sequential)>]
        type VkSwapchainKHR =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkSwapchainKHR(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<Flags>]
        type VkSwapchainCreateFlagsKHR =
            | All = 0
            | None = 0


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPresentInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public waitSemaphoreCount : uint32
                val mutable public pWaitSemaphores : nativeptr<VkSemaphore>
                val mutable public swapchainCount : uint32
                val mutable public pSwapchains : nativeptr<VkSwapchainKHR>
                val mutable public pImageIndices : nativeptr<uint32>
                val mutable public pResults : nativeptr<VkResult>

                new(pNext: nativeint, waitSemaphoreCount: uint32, pWaitSemaphores: nativeptr<VkSemaphore>, swapchainCount: uint32, pSwapchains: nativeptr<VkSwapchainKHR>, pImageIndices: nativeptr<uint32>, pResults: nativeptr<VkResult>) =
                    {
                        sType = 1000001001u
                        pNext = pNext
                        waitSemaphoreCount = waitSemaphoreCount
                        pWaitSemaphores = pWaitSemaphores
                        swapchainCount = swapchainCount
                        pSwapchains = pSwapchains
                        pImageIndices = pImageIndices
                        pResults = pResults
                    }

                new(waitSemaphoreCount: uint32, pWaitSemaphores: nativeptr<VkSemaphore>, swapchainCount: uint32, pSwapchains: nativeptr<VkSwapchainKHR>, pImageIndices: nativeptr<uint32>, pResults: nativeptr<VkResult>) =
                    VkPresentInfoKHR(Unchecked.defaultof<nativeint>, waitSemaphoreCount, pWaitSemaphores, swapchainCount, pSwapchains, pImageIndices, pResults)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.waitSemaphoreCount = Unchecked.defaultof<uint32> && x.pWaitSemaphores = Unchecked.defaultof<nativeptr<VkSemaphore>> && x.swapchainCount = Unchecked.defaultof<uint32> && x.pSwapchains = Unchecked.defaultof<nativeptr<VkSwapchainKHR>> && x.pImageIndices = Unchecked.defaultof<nativeptr<uint32>> && x.pResults = Unchecked.defaultof<nativeptr<VkResult>>

                static member Empty =
                    VkPresentInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphore>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSwapchainKHR>>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<nativeptr<VkResult>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "waitSemaphoreCount = %A" x.waitSemaphoreCount
                        sprintf "pWaitSemaphores = %A" x.pWaitSemaphores
                        sprintf "swapchainCount = %A" x.swapchainCount
                        sprintf "pSwapchains = %A" x.pSwapchains
                        sprintf "pImageIndices = %A" x.pImageIndices
                        sprintf "pResults = %A" x.pResults
                    ] |> sprintf "VkPresentInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSwapchainCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkSwapchainCreateFlagsKHR
                val mutable public surface : KHRSurface.VkSurfaceKHR
                val mutable public minImageCount : uint32
                val mutable public imageFormat : VkFormat
                val mutable public imageColorSpace : KHRSurface.VkColorSpaceKHR
                val mutable public imageExtent : VkExtent2D
                val mutable public imageArrayLayers : uint32
                val mutable public imageUsage : VkImageUsageFlags
                val mutable public imageSharingMode : VkSharingMode
                val mutable public queueFamilyIndexCount : uint32
                val mutable public pQueueFamilyIndices : nativeptr<uint32>
                val mutable public preTransform : KHRSurface.VkSurfaceTransformFlagsKHR
                val mutable public compositeAlpha : KHRSurface.VkCompositeAlphaFlagsKHR
                val mutable public presentMode : KHRSurface.VkPresentModeKHR
                val mutable public clipped : VkBool32
                val mutable public oldSwapchain : VkSwapchainKHR

                new(pNext: nativeint, flags: VkSwapchainCreateFlagsKHR, surface: KHRSurface.VkSurfaceKHR, minImageCount: uint32, imageFormat: VkFormat, imageColorSpace: KHRSurface.VkColorSpaceKHR, imageExtent: VkExtent2D, imageArrayLayers: uint32, imageUsage: VkImageUsageFlags, imageSharingMode: VkSharingMode, queueFamilyIndexCount: uint32, pQueueFamilyIndices: nativeptr<uint32>, preTransform: KHRSurface.VkSurfaceTransformFlagsKHR, compositeAlpha: KHRSurface.VkCompositeAlphaFlagsKHR, presentMode: KHRSurface.VkPresentModeKHR, clipped: VkBool32, oldSwapchain: VkSwapchainKHR) =
                    {
                        sType = 1000001000u
                        pNext = pNext
                        flags = flags
                        surface = surface
                        minImageCount = minImageCount
                        imageFormat = imageFormat
                        imageColorSpace = imageColorSpace
                        imageExtent = imageExtent
                        imageArrayLayers = imageArrayLayers
                        imageUsage = imageUsage
                        imageSharingMode = imageSharingMode
                        queueFamilyIndexCount = queueFamilyIndexCount
                        pQueueFamilyIndices = pQueueFamilyIndices
                        preTransform = preTransform
                        compositeAlpha = compositeAlpha
                        presentMode = presentMode
                        clipped = clipped
                        oldSwapchain = oldSwapchain
                    }

                new(flags: VkSwapchainCreateFlagsKHR, surface: KHRSurface.VkSurfaceKHR, minImageCount: uint32, imageFormat: VkFormat, imageColorSpace: KHRSurface.VkColorSpaceKHR, imageExtent: VkExtent2D, imageArrayLayers: uint32, imageUsage: VkImageUsageFlags, imageSharingMode: VkSharingMode, queueFamilyIndexCount: uint32, pQueueFamilyIndices: nativeptr<uint32>, preTransform: KHRSurface.VkSurfaceTransformFlagsKHR, compositeAlpha: KHRSurface.VkCompositeAlphaFlagsKHR, presentMode: KHRSurface.VkPresentModeKHR, clipped: VkBool32, oldSwapchain: VkSwapchainKHR) =
                    VkSwapchainCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, surface, minImageCount, imageFormat, imageColorSpace, imageExtent, imageArrayLayers, imageUsage, imageSharingMode, queueFamilyIndexCount, pQueueFamilyIndices, preTransform, compositeAlpha, presentMode, clipped, oldSwapchain)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkSwapchainCreateFlagsKHR> && x.surface = Unchecked.defaultof<KHRSurface.VkSurfaceKHR> && x.minImageCount = Unchecked.defaultof<uint32> && x.imageFormat = Unchecked.defaultof<VkFormat> && x.imageColorSpace = Unchecked.defaultof<KHRSurface.VkColorSpaceKHR> && x.imageExtent = Unchecked.defaultof<VkExtent2D> && x.imageArrayLayers = Unchecked.defaultof<uint32> && x.imageUsage = Unchecked.defaultof<VkImageUsageFlags> && x.imageSharingMode = Unchecked.defaultof<VkSharingMode> && x.queueFamilyIndexCount = Unchecked.defaultof<uint32> && x.pQueueFamilyIndices = Unchecked.defaultof<nativeptr<uint32>> && x.preTransform = Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR> && x.compositeAlpha = Unchecked.defaultof<KHRSurface.VkCompositeAlphaFlagsKHR> && x.presentMode = Unchecked.defaultof<KHRSurface.VkPresentModeKHR> && x.clipped = Unchecked.defaultof<VkBool32> && x.oldSwapchain = Unchecked.defaultof<VkSwapchainKHR>

                static member Empty =
                    VkSwapchainCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSwapchainCreateFlagsKHR>, Unchecked.defaultof<KHRSurface.VkSurfaceKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<KHRSurface.VkColorSpaceKHR>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<VkSharingMode>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<KHRSurface.VkCompositeAlphaFlagsKHR>, Unchecked.defaultof<KHRSurface.VkPresentModeKHR>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkSwapchainKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "surface = %A" x.surface
                        sprintf "minImageCount = %A" x.minImageCount
                        sprintf "imageFormat = %A" x.imageFormat
                        sprintf "imageColorSpace = %A" x.imageColorSpace
                        sprintf "imageExtent = %A" x.imageExtent
                        sprintf "imageArrayLayers = %A" x.imageArrayLayers
                        sprintf "imageUsage = %A" x.imageUsage
                        sprintf "imageSharingMode = %A" x.imageSharingMode
                        sprintf "queueFamilyIndexCount = %A" x.queueFamilyIndexCount
                        sprintf "pQueueFamilyIndices = %A" x.pQueueFamilyIndices
                        sprintf "preTransform = %A" x.preTransform
                        sprintf "compositeAlpha = %A" x.compositeAlpha
                        sprintf "presentMode = %A" x.presentMode
                        sprintf "clipped = %A" x.clipped
                        sprintf "oldSwapchain = %A" x.oldSwapchain
                    ] |> sprintf "VkSwapchainCreateInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageLayout with
                  static member inline PresentSrcKhr = enum<VkImageLayout> 1000001002
             type VkObjectType with
                  static member inline SwapchainKhr = enum<VkObjectType> 1000001000
             type VkResult with
                  static member inline SuboptimalKhr = enum<VkResult> 1000001003
                  static member inline ErrorOutOfDateKhr = enum<VkResult> -1000001004

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateSwapchainKHRDel = delegate of VkDevice * nativeptr<VkSwapchainCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSwapchainKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroySwapchainKHRDel = delegate of VkDevice * VkSwapchainKHR * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetSwapchainImagesKHRDel = delegate of VkDevice * VkSwapchainKHR * nativeptr<uint32> * nativeptr<VkImage> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkAcquireNextImageKHRDel = delegate of VkDevice * VkSwapchainKHR * uint64 * VkSemaphore * VkFence * nativeptr<uint32> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkQueuePresentKHRDel = delegate of VkQueue * nativeptr<VkPresentInfoKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRSwapchain")
                static let s_vkCreateSwapchainKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateSwapchainKHRDel> "vkCreateSwapchainKHR"
                static let s_vkDestroySwapchainKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroySwapchainKHRDel> "vkDestroySwapchainKHR"
                static let s_vkGetSwapchainImagesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetSwapchainImagesKHRDel> "vkGetSwapchainImagesKHR"
                static let s_vkAcquireNextImageKHRDel = VkRaw.vkImportInstanceDelegate<VkAcquireNextImageKHRDel> "vkAcquireNextImageKHR"
                static let s_vkQueuePresentKHRDel = VkRaw.vkImportInstanceDelegate<VkQueuePresentKHRDel> "vkQueuePresentKHR"
                static do Report.End(3) |> ignore
                static member vkCreateSwapchainKHR = s_vkCreateSwapchainKHRDel
                static member vkDestroySwapchainKHR = s_vkDestroySwapchainKHRDel
                static member vkGetSwapchainImagesKHR = s_vkGetSwapchainImagesKHRDel
                static member vkAcquireNextImageKHR = s_vkAcquireNextImageKHRDel
                static member vkQueuePresentKHR = s_vkQueuePresentKHRDel
            let vkCreateSwapchainKHR(device : VkDevice, pCreateInfo : nativeptr<VkSwapchainCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSwapchain : nativeptr<VkSwapchainKHR>) = Loader<unit>.vkCreateSwapchainKHR.Invoke(device, pCreateInfo, pAllocator, pSwapchain)
            let vkDestroySwapchainKHR(device : VkDevice, swapchain : VkSwapchainKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroySwapchainKHR.Invoke(device, swapchain, pAllocator)
            let vkGetSwapchainImagesKHR(device : VkDevice, swapchain : VkSwapchainKHR, pSwapchainImageCount : nativeptr<uint32>, pSwapchainImages : nativeptr<VkImage>) = Loader<unit>.vkGetSwapchainImagesKHR.Invoke(device, swapchain, pSwapchainImageCount, pSwapchainImages)
            let vkAcquireNextImageKHR(device : VkDevice, swapchain : VkSwapchainKHR, timeout : uint64, semaphore : VkSemaphore, fence : VkFence, pImageIndex : nativeptr<uint32>) = Loader<unit>.vkAcquireNextImageKHR.Invoke(device, swapchain, timeout, semaphore, fence, pImageIndex)
            let vkQueuePresentKHR(queue : VkQueue, pPresentInfo : nativeptr<VkPresentInfoKHR>) = Loader<unit>.vkQueuePresentKHR.Invoke(queue, pPresentInfo)

        [<AutoOpen>]
        module ``Vulkan11`` =
            [<Flags>]
            type VkDeviceGroupPresentModeFlagsKHR =
                | All = 15
                | None = 0
                /// Present from local memory
                | LocalBit = 0x00000001
                /// Present from remote memory
                | RemoteBit = 0x00000002
                /// Present sum of local and/or remote memory
                | SumBit = 0x00000004
                /// Each physical device presents from local memory
                | LocalMultiDeviceBit = 0x00000008


            [<StructLayout(LayoutKind.Sequential)>]
            type VkAcquireNextImageInfoKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public swapchain : VkSwapchainKHR
                    val mutable public timeout : uint64
                    val mutable public semaphore : VkSemaphore
                    val mutable public fence : VkFence
                    val mutable public deviceMask : uint32

                    new(pNext: nativeint, swapchain: VkSwapchainKHR, timeout: uint64, semaphore: VkSemaphore, fence: VkFence, deviceMask: uint32) =
                        {
                            sType = 1000060010u
                            pNext = pNext
                            swapchain = swapchain
                            timeout = timeout
                            semaphore = semaphore
                            fence = fence
                            deviceMask = deviceMask
                        }

                    new(swapchain: VkSwapchainKHR, timeout: uint64, semaphore: VkSemaphore, fence: VkFence, deviceMask: uint32) =
                        VkAcquireNextImageInfoKHR(Unchecked.defaultof<nativeint>, swapchain, timeout, semaphore, fence, deviceMask)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.swapchain = Unchecked.defaultof<VkSwapchainKHR> && x.timeout = Unchecked.defaultof<uint64> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.fence = Unchecked.defaultof<VkFence> && x.deviceMask = Unchecked.defaultof<uint32>

                    static member Empty =
                        VkAcquireNextImageInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSwapchainKHR>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<VkFence>, Unchecked.defaultof<uint32>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "swapchain = %A" x.swapchain
                            sprintf "timeout = %A" x.timeout
                            sprintf "semaphore = %A" x.semaphore
                            sprintf "fence = %A" x.fence
                            sprintf "deviceMask = %A" x.deviceMask
                        ] |> sprintf "VkAcquireNextImageInfoKHR { %s }"
                end

            [<StructLayout(LayoutKind.Sequential)>]
            type VkBindImageMemorySwapchainInfoKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public swapchain : VkSwapchainKHR
                    val mutable public imageIndex : uint32

                    new(pNext: nativeint, swapchain: VkSwapchainKHR, imageIndex: uint32) =
                        {
                            sType = 1000060009u
                            pNext = pNext
                            swapchain = swapchain
                            imageIndex = imageIndex
                        }

                    new(swapchain: VkSwapchainKHR, imageIndex: uint32) =
                        VkBindImageMemorySwapchainInfoKHR(Unchecked.defaultof<nativeint>, swapchain, imageIndex)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.swapchain = Unchecked.defaultof<VkSwapchainKHR> && x.imageIndex = Unchecked.defaultof<uint32>

                    static member Empty =
                        VkBindImageMemorySwapchainInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSwapchainKHR>, Unchecked.defaultof<uint32>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "swapchain = %A" x.swapchain
                            sprintf "imageIndex = %A" x.imageIndex
                        ] |> sprintf "VkBindImageMemorySwapchainInfoKHR { %s }"
                end

            [<StructLayout(LayoutKind.Sequential)>]
            type VkDeviceGroupPresentCapabilitiesKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public presentMask : uint32_32
                    val mutable public modes : VkDeviceGroupPresentModeFlagsKHR

                    new(pNext: nativeint, presentMask: uint32_32, modes: VkDeviceGroupPresentModeFlagsKHR) =
                        {
                            sType = 1000060007u
                            pNext = pNext
                            presentMask = presentMask
                            modes = modes
                        }

                    new(presentMask: uint32_32, modes: VkDeviceGroupPresentModeFlagsKHR) =
                        VkDeviceGroupPresentCapabilitiesKHR(Unchecked.defaultof<nativeint>, presentMask, modes)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.presentMask = Unchecked.defaultof<uint32_32> && x.modes = Unchecked.defaultof<VkDeviceGroupPresentModeFlagsKHR>

                    static member Empty =
                        VkDeviceGroupPresentCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32_32>, Unchecked.defaultof<VkDeviceGroupPresentModeFlagsKHR>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "presentMask = %A" x.presentMask
                            sprintf "modes = %A" x.modes
                        ] |> sprintf "VkDeviceGroupPresentCapabilitiesKHR { %s }"
                end

            [<StructLayout(LayoutKind.Sequential)>]
            type VkDeviceGroupPresentInfoKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public swapchainCount : uint32
                    val mutable public pDeviceMasks : nativeptr<uint32>
                    val mutable public mode : VkDeviceGroupPresentModeFlagsKHR

                    new(pNext: nativeint, swapchainCount: uint32, pDeviceMasks: nativeptr<uint32>, mode: VkDeviceGroupPresentModeFlagsKHR) =
                        {
                            sType = 1000060011u
                            pNext = pNext
                            swapchainCount = swapchainCount
                            pDeviceMasks = pDeviceMasks
                            mode = mode
                        }

                    new(swapchainCount: uint32, pDeviceMasks: nativeptr<uint32>, mode: VkDeviceGroupPresentModeFlagsKHR) =
                        VkDeviceGroupPresentInfoKHR(Unchecked.defaultof<nativeint>, swapchainCount, pDeviceMasks, mode)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.swapchainCount = Unchecked.defaultof<uint32> && x.pDeviceMasks = Unchecked.defaultof<nativeptr<uint32>> && x.mode = Unchecked.defaultof<VkDeviceGroupPresentModeFlagsKHR>

                    static member Empty =
                        VkDeviceGroupPresentInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<VkDeviceGroupPresentModeFlagsKHR>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "swapchainCount = %A" x.swapchainCount
                            sprintf "pDeviceMasks = %A" x.pDeviceMasks
                            sprintf "mode = %A" x.mode
                        ] |> sprintf "VkDeviceGroupPresentInfoKHR { %s }"
                end

            [<StructLayout(LayoutKind.Sequential)>]
            type VkDeviceGroupSwapchainCreateInfoKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public modes : VkDeviceGroupPresentModeFlagsKHR

                    new(pNext: nativeint, modes: VkDeviceGroupPresentModeFlagsKHR) =
                        {
                            sType = 1000060012u
                            pNext = pNext
                            modes = modes
                        }

                    new(modes: VkDeviceGroupPresentModeFlagsKHR) =
                        VkDeviceGroupSwapchainCreateInfoKHR(Unchecked.defaultof<nativeint>, modes)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.modes = Unchecked.defaultof<VkDeviceGroupPresentModeFlagsKHR>

                    static member Empty =
                        VkDeviceGroupSwapchainCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceGroupPresentModeFlagsKHR>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "modes = %A" x.modes
                        ] |> sprintf "VkDeviceGroupSwapchainCreateInfoKHR { %s }"
                end

            [<StructLayout(LayoutKind.Sequential)>]
            type VkImageSwapchainCreateInfoKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public swapchain : VkSwapchainKHR

                    new(pNext: nativeint, swapchain: VkSwapchainKHR) =
                        {
                            sType = 1000060008u
                            pNext = pNext
                            swapchain = swapchain
                        }

                    new(swapchain: VkSwapchainKHR) =
                        VkImageSwapchainCreateInfoKHR(Unchecked.defaultof<nativeint>, swapchain)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.swapchain = Unchecked.defaultof<VkSwapchainKHR>

                    static member Empty =
                        VkImageSwapchainCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSwapchainKHR>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "swapchain = %A" x.swapchain
                        ] |> sprintf "VkImageSwapchainCreateInfoKHR { %s }"
                end


            [<AutoOpen>]
            module EnumExtensions =
                 type VkSwapchainCreateFlagsKHR with
                      /// Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
                      static member inline SplitInstanceBindRegionsBit = enum<VkSwapchainCreateFlagsKHR> 0x00000001
                      /// Swapchain is protected
                      static member inline ProtectedBit = enum<VkSwapchainCreateFlagsKHR> 0x00000002

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkGetDeviceGroupPresentCapabilitiesKHRDel = delegate of VkDevice * nativeptr<VkDeviceGroupPresentCapabilitiesKHR> -> VkResult
                [<SuppressUnmanagedCodeSecurity>]
                type VkGetDeviceGroupSurfacePresentModesKHRDel = delegate of VkDevice * KHRSurface.VkSurfaceKHR * nativeptr<VkDeviceGroupPresentModeFlagsKHR> -> VkResult
                [<SuppressUnmanagedCodeSecurity>]
                type VkGetPhysicalDevicePresentRectanglesKHRDel = delegate of VkPhysicalDevice * KHRSurface.VkSurfaceKHR * nativeptr<uint32> * nativeptr<VkRect2D> -> VkResult
                [<SuppressUnmanagedCodeSecurity>]
                type VkAcquireNextImage2KHRDel = delegate of VkDevice * nativeptr<VkAcquireNextImageInfoKHR> * nativeptr<uint32> -> VkResult

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading KHRSwapchain -> Vulkan11")
                    static let s_vkGetDeviceGroupPresentCapabilitiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceGroupPresentCapabilitiesKHRDel> "vkGetDeviceGroupPresentCapabilitiesKHR"
                    static let s_vkGetDeviceGroupSurfacePresentModesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceGroupSurfacePresentModesKHRDel> "vkGetDeviceGroupSurfacePresentModesKHR"
                    static let s_vkGetPhysicalDevicePresentRectanglesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDevicePresentRectanglesKHRDel> "vkGetPhysicalDevicePresentRectanglesKHR"
                    static let s_vkAcquireNextImage2KHRDel = VkRaw.vkImportInstanceDelegate<VkAcquireNextImage2KHRDel> "vkAcquireNextImage2KHR"
                    static do Report.End(3) |> ignore
                    static member vkGetDeviceGroupPresentCapabilitiesKHR = s_vkGetDeviceGroupPresentCapabilitiesKHRDel
                    static member vkGetDeviceGroupSurfacePresentModesKHR = s_vkGetDeviceGroupSurfacePresentModesKHRDel
                    static member vkGetPhysicalDevicePresentRectanglesKHR = s_vkGetPhysicalDevicePresentRectanglesKHRDel
                    static member vkAcquireNextImage2KHR = s_vkAcquireNextImage2KHRDel
                let vkGetDeviceGroupPresentCapabilitiesKHR(device : VkDevice, pDeviceGroupPresentCapabilities : nativeptr<VkDeviceGroupPresentCapabilitiesKHR>) = Loader<unit>.vkGetDeviceGroupPresentCapabilitiesKHR.Invoke(device, pDeviceGroupPresentCapabilities)
                let vkGetDeviceGroupSurfacePresentModesKHR(device : VkDevice, surface : KHRSurface.VkSurfaceKHR, pModes : nativeptr<VkDeviceGroupPresentModeFlagsKHR>) = Loader<unit>.vkGetDeviceGroupSurfacePresentModesKHR.Invoke(device, surface, pModes)
                let vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice : VkPhysicalDevice, surface : KHRSurface.VkSurfaceKHR, pRectCount : nativeptr<uint32>, pRects : nativeptr<VkRect2D>) = Loader<unit>.vkGetPhysicalDevicePresentRectanglesKHR.Invoke(physicalDevice, surface, pRectCount, pRects)
                let vkAcquireNextImage2KHR(device : VkDevice, pAcquireInfo : nativeptr<VkAcquireNextImageInfoKHR>, pImageIndex : nativeptr<uint32>) = Loader<unit>.vkAcquireNextImage2KHR.Invoke(device, pAcquireInfo, pImageIndex)

    /// Requires KHRSurface.
    module KHRDisplay =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_display"
        let Number = 3


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayKHR =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkDisplayKHR(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayModeKHR =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkDisplayModeKHR(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<Flags>]
        type VkDisplayPlaneAlphaFlagsKHR =
            | All = 15
            | None = 0
            | OpaqueBit = 0x00000001
            | GlobalBit = 0x00000002
            | PerPixelBit = 0x00000004
            | PerPixelPremultipliedBit = 0x00000008

        type VkSurfaceTransformFlagsKHR = KHRSurface.VkSurfaceTransformFlagsKHR

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayModeParametersKHR =
            struct
                val mutable public visibleRegion : VkExtent2D
                val mutable public refreshRate : uint32

                new(visibleRegion: VkExtent2D, refreshRate: uint32) =
                    {
                        visibleRegion = visibleRegion
                        refreshRate = refreshRate
                    }

                member x.IsEmpty =
                    x.visibleRegion = Unchecked.defaultof<VkExtent2D> && x.refreshRate = Unchecked.defaultof<uint32>

                static member Empty =
                    VkDisplayModeParametersKHR(Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "visibleRegion = %A" x.visibleRegion
                        sprintf "refreshRate = %A" x.refreshRate
                    ] |> sprintf "VkDisplayModeParametersKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayModeCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkDisplayModeCreateFlagsKHR
                val mutable public parameters : VkDisplayModeParametersKHR

                new(pNext: nativeint, flags: VkDisplayModeCreateFlagsKHR, parameters: VkDisplayModeParametersKHR) =
                    {
                        sType = 1000002000u
                        pNext = pNext
                        flags = flags
                        parameters = parameters
                    }

                new(flags: VkDisplayModeCreateFlagsKHR, parameters: VkDisplayModeParametersKHR) =
                    VkDisplayModeCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, parameters)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDisplayModeCreateFlagsKHR> && x.parameters = Unchecked.defaultof<VkDisplayModeParametersKHR>

                static member Empty =
                    VkDisplayModeCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplayModeCreateFlagsKHR>, Unchecked.defaultof<VkDisplayModeParametersKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "parameters = %A" x.parameters
                    ] |> sprintf "VkDisplayModeCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayModePropertiesKHR =
            struct
                val mutable public displayMode : VkDisplayModeKHR
                val mutable public parameters : VkDisplayModeParametersKHR

                new(displayMode: VkDisplayModeKHR, parameters: VkDisplayModeParametersKHR) =
                    {
                        displayMode = displayMode
                        parameters = parameters
                    }

                member x.IsEmpty =
                    x.displayMode = Unchecked.defaultof<VkDisplayModeKHR> && x.parameters = Unchecked.defaultof<VkDisplayModeParametersKHR>

                static member Empty =
                    VkDisplayModePropertiesKHR(Unchecked.defaultof<VkDisplayModeKHR>, Unchecked.defaultof<VkDisplayModeParametersKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "displayMode = %A" x.displayMode
                        sprintf "parameters = %A" x.parameters
                    ] |> sprintf "VkDisplayModePropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayPlaneCapabilitiesKHR =
            struct
                val mutable public supportedAlpha : VkDisplayPlaneAlphaFlagsKHR
                val mutable public minSrcPosition : VkOffset2D
                val mutable public maxSrcPosition : VkOffset2D
                val mutable public minSrcExtent : VkExtent2D
                val mutable public maxSrcExtent : VkExtent2D
                val mutable public minDstPosition : VkOffset2D
                val mutable public maxDstPosition : VkOffset2D
                val mutable public minDstExtent : VkExtent2D
                val mutable public maxDstExtent : VkExtent2D

                new(supportedAlpha: VkDisplayPlaneAlphaFlagsKHR, minSrcPosition: VkOffset2D, maxSrcPosition: VkOffset2D, minSrcExtent: VkExtent2D, maxSrcExtent: VkExtent2D, minDstPosition: VkOffset2D, maxDstPosition: VkOffset2D, minDstExtent: VkExtent2D, maxDstExtent: VkExtent2D) =
                    {
                        supportedAlpha = supportedAlpha
                        minSrcPosition = minSrcPosition
                        maxSrcPosition = maxSrcPosition
                        minSrcExtent = minSrcExtent
                        maxSrcExtent = maxSrcExtent
                        minDstPosition = minDstPosition
                        maxDstPosition = maxDstPosition
                        minDstExtent = minDstExtent
                        maxDstExtent = maxDstExtent
                    }

                member x.IsEmpty =
                    x.supportedAlpha = Unchecked.defaultof<VkDisplayPlaneAlphaFlagsKHR> && x.minSrcPosition = Unchecked.defaultof<VkOffset2D> && x.maxSrcPosition = Unchecked.defaultof<VkOffset2D> && x.minSrcExtent = Unchecked.defaultof<VkExtent2D> && x.maxSrcExtent = Unchecked.defaultof<VkExtent2D> && x.minDstPosition = Unchecked.defaultof<VkOffset2D> && x.maxDstPosition = Unchecked.defaultof<VkOffset2D> && x.minDstExtent = Unchecked.defaultof<VkExtent2D> && x.maxDstExtent = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkDisplayPlaneCapabilitiesKHR(Unchecked.defaultof<VkDisplayPlaneAlphaFlagsKHR>, Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "supportedAlpha = %A" x.supportedAlpha
                        sprintf "minSrcPosition = %A" x.minSrcPosition
                        sprintf "maxSrcPosition = %A" x.maxSrcPosition
                        sprintf "minSrcExtent = %A" x.minSrcExtent
                        sprintf "maxSrcExtent = %A" x.maxSrcExtent
                        sprintf "minDstPosition = %A" x.minDstPosition
                        sprintf "maxDstPosition = %A" x.maxDstPosition
                        sprintf "minDstExtent = %A" x.minDstExtent
                        sprintf "maxDstExtent = %A" x.maxDstExtent
                    ] |> sprintf "VkDisplayPlaneCapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayPlanePropertiesKHR =
            struct
                val mutable public currentDisplay : VkDisplayKHR
                val mutable public currentStackIndex : uint32

                new(currentDisplay: VkDisplayKHR, currentStackIndex: uint32) =
                    {
                        currentDisplay = currentDisplay
                        currentStackIndex = currentStackIndex
                    }

                member x.IsEmpty =
                    x.currentDisplay = Unchecked.defaultof<VkDisplayKHR> && x.currentStackIndex = Unchecked.defaultof<uint32>

                static member Empty =
                    VkDisplayPlanePropertiesKHR(Unchecked.defaultof<VkDisplayKHR>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "currentDisplay = %A" x.currentDisplay
                        sprintf "currentStackIndex = %A" x.currentStackIndex
                    ] |> sprintf "VkDisplayPlanePropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayPropertiesKHR =
            struct
                val mutable public display : VkDisplayKHR
                val mutable public displayName : cstr
                val mutable public physicalDimensions : VkExtent2D
                val mutable public physicalResolution : VkExtent2D
                val mutable public supportedTransforms : KHRSurface.VkSurfaceTransformFlagsKHR
                val mutable public planeReorderPossible : VkBool32
                val mutable public persistentContent : VkBool32

                new(display: VkDisplayKHR, displayName: cstr, physicalDimensions: VkExtent2D, physicalResolution: VkExtent2D, supportedTransforms: KHRSurface.VkSurfaceTransformFlagsKHR, planeReorderPossible: VkBool32, persistentContent: VkBool32) =
                    {
                        display = display
                        displayName = displayName
                        physicalDimensions = physicalDimensions
                        physicalResolution = physicalResolution
                        supportedTransforms = supportedTransforms
                        planeReorderPossible = planeReorderPossible
                        persistentContent = persistentContent
                    }

                member x.IsEmpty =
                    x.display = Unchecked.defaultof<VkDisplayKHR> && x.displayName = Unchecked.defaultof<cstr> && x.physicalDimensions = Unchecked.defaultof<VkExtent2D> && x.physicalResolution = Unchecked.defaultof<VkExtent2D> && x.supportedTransforms = Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR> && x.planeReorderPossible = Unchecked.defaultof<VkBool32> && x.persistentContent = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkDisplayPropertiesKHR(Unchecked.defaultof<VkDisplayKHR>, Unchecked.defaultof<cstr>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "display = %A" x.display
                        sprintf "displayName = %A" x.displayName
                        sprintf "physicalDimensions = %A" x.physicalDimensions
                        sprintf "physicalResolution = %A" x.physicalResolution
                        sprintf "supportedTransforms = %A" x.supportedTransforms
                        sprintf "planeReorderPossible = %A" x.planeReorderPossible
                        sprintf "persistentContent = %A" x.persistentContent
                    ] |> sprintf "VkDisplayPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplaySurfaceCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkDisplaySurfaceCreateFlagsKHR
                val mutable public displayMode : VkDisplayModeKHR
                val mutable public planeIndex : uint32
                val mutable public planeStackIndex : uint32
                val mutable public transform : KHRSurface.VkSurfaceTransformFlagsKHR
                val mutable public globalAlpha : float32
                val mutable public alphaMode : VkDisplayPlaneAlphaFlagsKHR
                val mutable public imageExtent : VkExtent2D

                new(pNext: nativeint, flags: VkDisplaySurfaceCreateFlagsKHR, displayMode: VkDisplayModeKHR, planeIndex: uint32, planeStackIndex: uint32, transform: KHRSurface.VkSurfaceTransformFlagsKHR, globalAlpha: float32, alphaMode: VkDisplayPlaneAlphaFlagsKHR, imageExtent: VkExtent2D) =
                    {
                        sType = 1000002001u
                        pNext = pNext
                        flags = flags
                        displayMode = displayMode
                        planeIndex = planeIndex
                        planeStackIndex = planeStackIndex
                        transform = transform
                        globalAlpha = globalAlpha
                        alphaMode = alphaMode
                        imageExtent = imageExtent
                    }

                new(flags: VkDisplaySurfaceCreateFlagsKHR, displayMode: VkDisplayModeKHR, planeIndex: uint32, planeStackIndex: uint32, transform: KHRSurface.VkSurfaceTransformFlagsKHR, globalAlpha: float32, alphaMode: VkDisplayPlaneAlphaFlagsKHR, imageExtent: VkExtent2D) =
                    VkDisplaySurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, displayMode, planeIndex, planeStackIndex, transform, globalAlpha, alphaMode, imageExtent)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDisplaySurfaceCreateFlagsKHR> && x.displayMode = Unchecked.defaultof<VkDisplayModeKHR> && x.planeIndex = Unchecked.defaultof<uint32> && x.planeStackIndex = Unchecked.defaultof<uint32> && x.transform = Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR> && x.globalAlpha = Unchecked.defaultof<float32> && x.alphaMode = Unchecked.defaultof<VkDisplayPlaneAlphaFlagsKHR> && x.imageExtent = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkDisplaySurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplaySurfaceCreateFlagsKHR>, Unchecked.defaultof<VkDisplayModeKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<float32>, Unchecked.defaultof<VkDisplayPlaneAlphaFlagsKHR>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "displayMode = %A" x.displayMode
                        sprintf "planeIndex = %A" x.planeIndex
                        sprintf "planeStackIndex = %A" x.planeStackIndex
                        sprintf "transform = %A" x.transform
                        sprintf "globalAlpha = %A" x.globalAlpha
                        sprintf "alphaMode = %A" x.alphaMode
                        sprintf "imageExtent = %A" x.imageExtent
                    ] |> sprintf "VkDisplaySurfaceCreateInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  static member inline DisplayKhr = enum<VkObjectType> 1000002000
                  static member inline DisplayModeKhr = enum<VkObjectType> 1000002001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceDisplayPropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkDisplayPropertiesKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceDisplayPlanePropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkDisplayPlanePropertiesKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDisplayPlaneSupportedDisplaysKHRDel = delegate of VkPhysicalDevice * uint32 * nativeptr<uint32> * nativeptr<VkDisplayKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDisplayModePropertiesKHRDel = delegate of VkPhysicalDevice * VkDisplayKHR * nativeptr<uint32> * nativeptr<VkDisplayModePropertiesKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateDisplayModeKHRDel = delegate of VkPhysicalDevice * VkDisplayKHR * nativeptr<VkDisplayModeCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkDisplayModeKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDisplayPlaneCapabilitiesKHRDel = delegate of VkPhysicalDevice * VkDisplayModeKHR * uint32 * nativeptr<VkDisplayPlaneCapabilitiesKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateDisplayPlaneSurfaceKHRDel = delegate of VkInstance * nativeptr<VkDisplaySurfaceCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRDisplay")
                static let s_vkGetPhysicalDeviceDisplayPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceDisplayPropertiesKHRDel> "vkGetPhysicalDeviceDisplayPropertiesKHR"
                static let s_vkGetPhysicalDeviceDisplayPlanePropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceDisplayPlanePropertiesKHRDel> "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"
                static let s_vkGetDisplayPlaneSupportedDisplaysKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDisplayPlaneSupportedDisplaysKHRDel> "vkGetDisplayPlaneSupportedDisplaysKHR"
                static let s_vkGetDisplayModePropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDisplayModePropertiesKHRDel> "vkGetDisplayModePropertiesKHR"
                static let s_vkCreateDisplayModeKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateDisplayModeKHRDel> "vkCreateDisplayModeKHR"
                static let s_vkGetDisplayPlaneCapabilitiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDisplayPlaneCapabilitiesKHRDel> "vkGetDisplayPlaneCapabilitiesKHR"
                static let s_vkCreateDisplayPlaneSurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateDisplayPlaneSurfaceKHRDel> "vkCreateDisplayPlaneSurfaceKHR"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceDisplayPropertiesKHR = s_vkGetPhysicalDeviceDisplayPropertiesKHRDel
                static member vkGetPhysicalDeviceDisplayPlanePropertiesKHR = s_vkGetPhysicalDeviceDisplayPlanePropertiesKHRDel
                static member vkGetDisplayPlaneSupportedDisplaysKHR = s_vkGetDisplayPlaneSupportedDisplaysKHRDel
                static member vkGetDisplayModePropertiesKHR = s_vkGetDisplayModePropertiesKHRDel
                static member vkCreateDisplayModeKHR = s_vkCreateDisplayModeKHRDel
                static member vkGetDisplayPlaneCapabilitiesKHR = s_vkGetDisplayPlaneCapabilitiesKHRDel
                static member vkCreateDisplayPlaneSurfaceKHR = s_vkCreateDisplayPlaneSurfaceKHRDel
            let vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkDisplayPropertiesKHR>) = Loader<unit>.vkGetPhysicalDeviceDisplayPropertiesKHR.Invoke(physicalDevice, pPropertyCount, pProperties)
            let vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkDisplayPlanePropertiesKHR>) = Loader<unit>.vkGetPhysicalDeviceDisplayPlanePropertiesKHR.Invoke(physicalDevice, pPropertyCount, pProperties)
            let vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice : VkPhysicalDevice, planeIndex : uint32, pDisplayCount : nativeptr<uint32>, pDisplays : nativeptr<VkDisplayKHR>) = Loader<unit>.vkGetDisplayPlaneSupportedDisplaysKHR.Invoke(physicalDevice, planeIndex, pDisplayCount, pDisplays)
            let vkGetDisplayModePropertiesKHR(physicalDevice : VkPhysicalDevice, display : VkDisplayKHR, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkDisplayModePropertiesKHR>) = Loader<unit>.vkGetDisplayModePropertiesKHR.Invoke(physicalDevice, display, pPropertyCount, pProperties)
            let vkCreateDisplayModeKHR(physicalDevice : VkPhysicalDevice, display : VkDisplayKHR, pCreateInfo : nativeptr<VkDisplayModeCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pMode : nativeptr<VkDisplayModeKHR>) = Loader<unit>.vkCreateDisplayModeKHR.Invoke(physicalDevice, display, pCreateInfo, pAllocator, pMode)
            let vkGetDisplayPlaneCapabilitiesKHR(physicalDevice : VkPhysicalDevice, mode : VkDisplayModeKHR, planeIndex : uint32, pCapabilities : nativeptr<VkDisplayPlaneCapabilitiesKHR>) = Loader<unit>.vkGetDisplayPlaneCapabilitiesKHR.Invoke(physicalDevice, mode, planeIndex, pCapabilities)
            let vkCreateDisplayPlaneSurfaceKHR(instance : VkInstance, pCreateInfo : nativeptr<VkDisplaySurfaceCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateDisplayPlaneSurfaceKHR.Invoke(instance, pCreateInfo, pAllocator, pSurface)

    /// Requires KHRSwapchain, KHRDisplay.
    module KHRDisplaySwapchain =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_display_swapchain"
        let Number = 4

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayPresentInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public srcRect : VkRect2D
                val mutable public dstRect : VkRect2D
                val mutable public persistent : VkBool32

                new(pNext: nativeint, srcRect: VkRect2D, dstRect: VkRect2D, persistent: VkBool32) =
                    {
                        sType = 1000003000u
                        pNext = pNext
                        srcRect = srcRect
                        dstRect = dstRect
                        persistent = persistent
                    }

                new(srcRect: VkRect2D, dstRect: VkRect2D, persistent: VkBool32) =
                    VkDisplayPresentInfoKHR(Unchecked.defaultof<nativeint>, srcRect, dstRect, persistent)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.srcRect = Unchecked.defaultof<VkRect2D> && x.dstRect = Unchecked.defaultof<VkRect2D> && x.persistent = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkDisplayPresentInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRect2D>, Unchecked.defaultof<VkRect2D>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "srcRect = %A" x.srcRect
                        sprintf "dstRect = %A" x.dstRect
                        sprintf "persistent = %A" x.persistent
                    ] |> sprintf "VkDisplayPresentInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkResult with
                  static member inline ErrorIncompatibleDisplayKhr = enum<VkResult> -1000003001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateSharedSwapchainsKHRDel = delegate of VkDevice * uint32 * nativeptr<KHRSwapchain.VkSwapchainCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSwapchain.VkSwapchainKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRDisplaySwapchain")
                static let s_vkCreateSharedSwapchainsKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateSharedSwapchainsKHRDel> "vkCreateSharedSwapchainsKHR"
                static do Report.End(3) |> ignore
                static member vkCreateSharedSwapchainsKHR = s_vkCreateSharedSwapchainsKHRDel
            let vkCreateSharedSwapchainsKHR(device : VkDevice, swapchainCount : uint32, pCreateInfos : nativeptr<KHRSwapchain.VkSwapchainCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSwapchains : nativeptr<KHRSwapchain.VkSwapchainKHR>) = Loader<unit>.vkCreateSharedSwapchainsKHR.Invoke(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains)

    /// Requires KHRSurface.
    module KHRXlibSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_xlib_surface"
        let Number = 5

        [<StructLayout(LayoutKind.Sequential)>]
        type VkXlibSurfaceCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkXlibSurfaceCreateFlagsKHR
                val mutable public dpy : nativeptr<nativeint>
                val mutable public window : nativeint

                new(pNext: nativeint, flags: VkXlibSurfaceCreateFlagsKHR, dpy: nativeptr<nativeint>, window: nativeint) =
                    {
                        sType = 1000004000u
                        pNext = pNext
                        flags = flags
                        dpy = dpy
                        window = window
                    }

                new(flags: VkXlibSurfaceCreateFlagsKHR, dpy: nativeptr<nativeint>, window: nativeint) =
                    VkXlibSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, dpy, window)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkXlibSurfaceCreateFlagsKHR> && x.dpy = Unchecked.defaultof<nativeptr<nativeint>> && x.window = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkXlibSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkXlibSurfaceCreateFlagsKHR>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "dpy = %A" x.dpy
                        sprintf "window = %A" x.window
                    ] |> sprintf "VkXlibSurfaceCreateInfoKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateXlibSurfaceKHRDel = delegate of VkInstance * nativeptr<VkXlibSurfaceCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceXlibPresentationSupportKHRDel = delegate of VkPhysicalDevice * uint32 * nativeptr<nativeint> * nativeint -> VkBool32

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRXlibSurface")
                static let s_vkCreateXlibSurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateXlibSurfaceKHRDel> "vkCreateXlibSurfaceKHR"
                static let s_vkGetPhysicalDeviceXlibPresentationSupportKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceXlibPresentationSupportKHRDel> "vkGetPhysicalDeviceXlibPresentationSupportKHR"
                static do Report.End(3) |> ignore
                static member vkCreateXlibSurfaceKHR = s_vkCreateXlibSurfaceKHRDel
                static member vkGetPhysicalDeviceXlibPresentationSupportKHR = s_vkGetPhysicalDeviceXlibPresentationSupportKHRDel
            let vkCreateXlibSurfaceKHR(instance : VkInstance, pCreateInfo : nativeptr<VkXlibSurfaceCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateXlibSurfaceKHR.Invoke(instance, pCreateInfo, pAllocator, pSurface)
            let vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, dpy : nativeptr<nativeint>, visualID : nativeint) = Loader<unit>.vkGetPhysicalDeviceXlibPresentationSupportKHR.Invoke(physicalDevice, queueFamilyIndex, dpy, visualID)

    /// Requires KHRSurface.
    module KHRXcbSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_xcb_surface"
        let Number = 6

        [<StructLayout(LayoutKind.Sequential)>]
        type VkXcbSurfaceCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkXcbSurfaceCreateFlagsKHR
                val mutable public connection : nativeptr<nativeint>
                val mutable public window : nativeint

                new(pNext: nativeint, flags: VkXcbSurfaceCreateFlagsKHR, connection: nativeptr<nativeint>, window: nativeint) =
                    {
                        sType = 1000005000u
                        pNext = pNext
                        flags = flags
                        connection = connection
                        window = window
                    }

                new(flags: VkXcbSurfaceCreateFlagsKHR, connection: nativeptr<nativeint>, window: nativeint) =
                    VkXcbSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, connection, window)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkXcbSurfaceCreateFlagsKHR> && x.connection = Unchecked.defaultof<nativeptr<nativeint>> && x.window = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkXcbSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkXcbSurfaceCreateFlagsKHR>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "connection = %A" x.connection
                        sprintf "window = %A" x.window
                    ] |> sprintf "VkXcbSurfaceCreateInfoKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateXcbSurfaceKHRDel = delegate of VkInstance * nativeptr<VkXcbSurfaceCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceXcbPresentationSupportKHRDel = delegate of VkPhysicalDevice * uint32 * nativeptr<nativeint> * nativeint -> VkBool32

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRXcbSurface")
                static let s_vkCreateXcbSurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateXcbSurfaceKHRDel> "vkCreateXcbSurfaceKHR"
                static let s_vkGetPhysicalDeviceXcbPresentationSupportKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceXcbPresentationSupportKHRDel> "vkGetPhysicalDeviceXcbPresentationSupportKHR"
                static do Report.End(3) |> ignore
                static member vkCreateXcbSurfaceKHR = s_vkCreateXcbSurfaceKHRDel
                static member vkGetPhysicalDeviceXcbPresentationSupportKHR = s_vkGetPhysicalDeviceXcbPresentationSupportKHRDel
            let vkCreateXcbSurfaceKHR(instance : VkInstance, pCreateInfo : nativeptr<VkXcbSurfaceCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateXcbSurfaceKHR.Invoke(instance, pCreateInfo, pAllocator, pSurface)
            let vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, connection : nativeptr<nativeint>, visual_id : nativeint) = Loader<unit>.vkGetPhysicalDeviceXcbPresentationSupportKHR.Invoke(physicalDevice, queueFamilyIndex, connection, visual_id)

    /// Requires KHRSurface.
    module KHRWaylandSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_wayland_surface"
        let Number = 7

        [<Flags>]
        type VkWaylandSurfaceCreateFlagsKHR =
            | All = 0
            | None = 0


        [<StructLayout(LayoutKind.Sequential)>]
        type VkWaylandSurfaceCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkWaylandSurfaceCreateFlagsKHR
                val mutable public display : nativeptr<nativeint>
                val mutable public surface : nativeptr<nativeint>

                new(pNext: nativeint, flags: VkWaylandSurfaceCreateFlagsKHR, display: nativeptr<nativeint>, surface: nativeptr<nativeint>) =
                    {
                        sType = 1000006000u
                        pNext = pNext
                        flags = flags
                        display = display
                        surface = surface
                    }

                new(flags: VkWaylandSurfaceCreateFlagsKHR, display: nativeptr<nativeint>, surface: nativeptr<nativeint>) =
                    VkWaylandSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, display, surface)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkWaylandSurfaceCreateFlagsKHR> && x.display = Unchecked.defaultof<nativeptr<nativeint>> && x.surface = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkWaylandSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkWaylandSurfaceCreateFlagsKHR>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "display = %A" x.display
                        sprintf "surface = %A" x.surface
                    ] |> sprintf "VkWaylandSurfaceCreateInfoKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateWaylandSurfaceKHRDel = delegate of VkInstance * nativeptr<VkWaylandSurfaceCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceWaylandPresentationSupportKHRDel = delegate of VkPhysicalDevice * uint32 * nativeptr<nativeint> -> VkBool32

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRWaylandSurface")
                static let s_vkCreateWaylandSurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateWaylandSurfaceKHRDel> "vkCreateWaylandSurfaceKHR"
                static let s_vkGetPhysicalDeviceWaylandPresentationSupportKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceWaylandPresentationSupportKHRDel> "vkGetPhysicalDeviceWaylandPresentationSupportKHR"
                static do Report.End(3) |> ignore
                static member vkCreateWaylandSurfaceKHR = s_vkCreateWaylandSurfaceKHRDel
                static member vkGetPhysicalDeviceWaylandPresentationSupportKHR = s_vkGetPhysicalDeviceWaylandPresentationSupportKHRDel
            let vkCreateWaylandSurfaceKHR(instance : VkInstance, pCreateInfo : nativeptr<VkWaylandSurfaceCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateWaylandSurfaceKHR.Invoke(instance, pCreateInfo, pAllocator, pSurface)
            let vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, display : nativeptr<nativeint>) = Loader<unit>.vkGetPhysicalDeviceWaylandPresentationSupportKHR.Invoke(physicalDevice, queueFamilyIndex, display)

    /// Requires KHRSurface.
    module KHRAndroidSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_android_surface"
        let Number = 9

        type ANativeWindow = nativeint

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAndroidSurfaceCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkAndroidSurfaceCreateFlagsKHR
                val mutable public window : nativeptr<nativeint>

                new(pNext: nativeint, flags: VkAndroidSurfaceCreateFlagsKHR, window: nativeptr<nativeint>) =
                    {
                        sType = 1000008000u
                        pNext = pNext
                        flags = flags
                        window = window
                    }

                new(flags: VkAndroidSurfaceCreateFlagsKHR, window: nativeptr<nativeint>) =
                    VkAndroidSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, window)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkAndroidSurfaceCreateFlagsKHR> && x.window = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkAndroidSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAndroidSurfaceCreateFlagsKHR>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "window = %A" x.window
                    ] |> sprintf "VkAndroidSurfaceCreateInfoKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateAndroidSurfaceKHRDel = delegate of VkInstance * nativeptr<VkAndroidSurfaceCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRAndroidSurface")
                static let s_vkCreateAndroidSurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateAndroidSurfaceKHRDel> "vkCreateAndroidSurfaceKHR"
                static do Report.End(3) |> ignore
                static member vkCreateAndroidSurfaceKHR = s_vkCreateAndroidSurfaceKHRDel
            let vkCreateAndroidSurfaceKHR(instance : VkInstance, pCreateInfo : nativeptr<VkAndroidSurfaceCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateAndroidSurfaceKHR.Invoke(instance, pCreateInfo, pAllocator, pSurface)

    /// Requires KHRSurface.
    module KHRWin32Surface =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_win32_surface"
        let Number = 10

        [<StructLayout(LayoutKind.Sequential)>]
        type VkWin32SurfaceCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkWin32SurfaceCreateFlagsKHR
                val mutable public hinstance : nativeint
                val mutable public hwnd : nativeint

                new(pNext: nativeint, flags: VkWin32SurfaceCreateFlagsKHR, hinstance: nativeint, hwnd: nativeint) =
                    {
                        sType = 1000009000u
                        pNext = pNext
                        flags = flags
                        hinstance = hinstance
                        hwnd = hwnd
                    }

                new(flags: VkWin32SurfaceCreateFlagsKHR, hinstance: nativeint, hwnd: nativeint) =
                    VkWin32SurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, hinstance, hwnd)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkWin32SurfaceCreateFlagsKHR> && x.hinstance = Unchecked.defaultof<nativeint> && x.hwnd = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkWin32SurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkWin32SurfaceCreateFlagsKHR>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "hinstance = %A" x.hinstance
                        sprintf "hwnd = %A" x.hwnd
                    ] |> sprintf "VkWin32SurfaceCreateInfoKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateWin32SurfaceKHRDel = delegate of VkInstance * nativeptr<VkWin32SurfaceCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceWin32PresentationSupportKHRDel = delegate of VkPhysicalDevice * uint32 -> VkBool32

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRWin32Surface")
                static let s_vkCreateWin32SurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateWin32SurfaceKHRDel> "vkCreateWin32SurfaceKHR"
                static let s_vkGetPhysicalDeviceWin32PresentationSupportKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceWin32PresentationSupportKHRDel> "vkGetPhysicalDeviceWin32PresentationSupportKHR"
                static do Report.End(3) |> ignore
                static member vkCreateWin32SurfaceKHR = s_vkCreateWin32SurfaceKHRDel
                static member vkGetPhysicalDeviceWin32PresentationSupportKHR = s_vkGetPhysicalDeviceWin32PresentationSupportKHRDel
            let vkCreateWin32SurfaceKHR(instance : VkInstance, pCreateInfo : nativeptr<VkWin32SurfaceCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateWin32SurfaceKHR.Invoke(instance, pCreateInfo, pAllocator, pSurface)
            let vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32) = Loader<unit>.vkGetPhysicalDeviceWin32PresentationSupportKHR.Invoke(physicalDevice, queueFamilyIndex)

    /// Deprecated by EXTDebugUtils.
    module EXTDebugReport =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_debug_report"
        let Number = 12

        type PFN_vkDebugReportCallbackEXT = nativeint


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDebugReportCallbackEXT =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkDebugReportCallbackEXT(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<Flags>]
        type VkDebugReportFlagsEXT =
            | All = 31
            | None = 0
            | InformationBit = 0x00000001
            | WarningBit = 0x00000002
            | PerformanceWarningBit = 0x00000004
            | ErrorBit = 0x00000008
            | DebugBit = 0x00000010

        type VkDebugReportObjectTypeEXT =
            | Unknown = 0
            | Instance = 1
            | PhysicalDevice = 2
            | Device = 3
            | Queue = 4
            | Semaphore = 5
            | CommandBuffer = 6
            | Fence = 7
            | DeviceMemory = 8
            | Buffer = 9
            | Image = 10
            | Event = 11
            | QueryPool = 12
            | BufferView = 13
            | ImageView = 14
            | ShaderModule = 15
            | PipelineCache = 16
            | PipelineLayout = 17
            | RenderPass = 18
            | Pipeline = 19
            | DescriptorSetLayout = 20
            | Sampler = 21
            | DescriptorPool = 22
            | DescriptorSet = 23
            | Framebuffer = 24
            | CommandPool = 25
            | Surface = 26
            | Swapchain = 27
            | DebugReportCallback = 28
            | Display = 29
            | DisplayMode = 30
            | ValidationCache = 33


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDebugReportCallbackCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkDebugReportFlagsEXT
                val mutable public pfnCallback : PFN_vkDebugReportCallbackEXT
                val mutable public pUserData : nativeint

                new(pNext: nativeint, flags: VkDebugReportFlagsEXT, pfnCallback: PFN_vkDebugReportCallbackEXT, pUserData: nativeint) =
                    {
                        sType = 1000011000u
                        pNext = pNext
                        flags = flags
                        pfnCallback = pfnCallback
                        pUserData = pUserData
                    }

                new(flags: VkDebugReportFlagsEXT, pfnCallback: PFN_vkDebugReportCallbackEXT, pUserData: nativeint) =
                    VkDebugReportCallbackCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, pfnCallback, pUserData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDebugReportFlagsEXT> && x.pfnCallback = Unchecked.defaultof<PFN_vkDebugReportCallbackEXT> && x.pUserData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkDebugReportCallbackCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDebugReportFlagsEXT>, Unchecked.defaultof<PFN_vkDebugReportCallbackEXT>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "pfnCallback = %A" x.pfnCallback
                        sprintf "pUserData = %A" x.pUserData
                    ] |> sprintf "VkDebugReportCallbackCreateInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  static member inline DebugReportCallbackExt = enum<VkObjectType> 1000011000
             type VkResult with
                  static member inline ErrorValidationFailedExt = enum<VkResult> -1000011001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateDebugReportCallbackEXTDel = delegate of VkInstance * nativeptr<VkDebugReportCallbackCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkDebugReportCallbackEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyDebugReportCallbackEXTDel = delegate of VkInstance * VkDebugReportCallbackEXT * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkDebugReportMessageEXTDel = delegate of VkInstance * VkDebugReportFlagsEXT * VkDebugReportObjectTypeEXT * uint64 * uint64 * int32 * cstr * cstr -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTDebugReport")
                static let s_vkCreateDebugReportCallbackEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateDebugReportCallbackEXTDel> "vkCreateDebugReportCallbackEXT"
                static let s_vkDestroyDebugReportCallbackEXTDel = VkRaw.vkImportInstanceDelegate<VkDestroyDebugReportCallbackEXTDel> "vkDestroyDebugReportCallbackEXT"
                static let s_vkDebugReportMessageEXTDel = VkRaw.vkImportInstanceDelegate<VkDebugReportMessageEXTDel> "vkDebugReportMessageEXT"
                static do Report.End(3) |> ignore
                static member vkCreateDebugReportCallbackEXT = s_vkCreateDebugReportCallbackEXTDel
                static member vkDestroyDebugReportCallbackEXT = s_vkDestroyDebugReportCallbackEXTDel
                static member vkDebugReportMessageEXT = s_vkDebugReportMessageEXTDel
            let vkCreateDebugReportCallbackEXT(instance : VkInstance, pCreateInfo : nativeptr<VkDebugReportCallbackCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pCallback : nativeptr<VkDebugReportCallbackEXT>) = Loader<unit>.vkCreateDebugReportCallbackEXT.Invoke(instance, pCreateInfo, pAllocator, pCallback)
            let vkDestroyDebugReportCallbackEXT(instance : VkInstance, callback : VkDebugReportCallbackEXT, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyDebugReportCallbackEXT.Invoke(instance, callback, pAllocator)
            let vkDebugReportMessageEXT(instance : VkInstance, flags : VkDebugReportFlagsEXT, objectType : VkDebugReportObjectTypeEXT, _object : uint64, location : uint64, messageCode : int32, pLayerPrefix : cstr, pMessage : cstr) = Loader<unit>.vkDebugReportMessageEXT.Invoke(instance, flags, objectType, _object, location, messageCode, pLayerPrefix, pMessage)

        [<AutoOpen>]
        module ``Vulkan11`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDebugReportObjectTypeEXT with
                      static member inline SamplerYcbcrConversion = enum<VkDebugReportObjectTypeEXT> 1000156000
                      static member inline DescriptorUpdateTemplate = enum<VkDebugReportObjectTypeEXT> 1000085000


    /// Deprecated.
    module NVGlslShader =
        let Type = ExtensionType.Device
        let Name = "VK_NV_glsl_shader"
        let Number = 13

        [<AutoOpen>]
        module EnumExtensions =
             type VkResult with
                  static member inline ErrorInvalidShaderNv = enum<VkResult> -1000012000


    module EXTDepthRangeUnrestricted =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_depth_range_unrestricted"
        let Number = 14

    /// Promoted to Vulkan12.
    module KHRSamplerMirrorClampToEdge =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_sampler_mirror_clamp_to_edge"
        let Number = 15

        [<AutoOpen>]
        module EnumExtensions =
             type VkSamplerAddressMode with
                  /// Note that this defines what was previously a core enum, and so uses the 'value' attribute rather than 'offset', and does not have a suffix. This is a special case, and should not be repeated
                  static member inline MirrorClampToEdge = enum<VkSamplerAddressMode> 4


    module IMGFilterCubic =
        let Type = ExtensionType.Device
        let Name = "VK_IMG_filter_cubic"
        let Number = 16

        [<AutoOpen>]
        module EnumExtensions =
             type VkFilter with
                  static member inline CubicImg = enum<VkFilter> 1000015000
             type VkFormatFeatureFlags with
                  /// Format can be filtered with VK_FILTER_CUBIC_IMG when being sampled
                  static member inline SampledImageFilterCubicBitImg = enum<VkFormatFeatureFlags> 0x00002000


    module AMDRasterizationOrder =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_rasterization_order"
        let Number = 19

        type VkRasterizationOrderAMD =
            | Strict = 0
            | Relaxed = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineRasterizationStateRasterizationOrderAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public rasterizationOrder : VkRasterizationOrderAMD

                new(pNext: nativeint, rasterizationOrder: VkRasterizationOrderAMD) =
                    {
                        sType = 1000018000u
                        pNext = pNext
                        rasterizationOrder = rasterizationOrder
                    }

                new(rasterizationOrder: VkRasterizationOrderAMD) =
                    VkPipelineRasterizationStateRasterizationOrderAMD(Unchecked.defaultof<nativeint>, rasterizationOrder)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.rasterizationOrder = Unchecked.defaultof<VkRasterizationOrderAMD>

                static member Empty =
                    VkPipelineRasterizationStateRasterizationOrderAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRasterizationOrderAMD>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "rasterizationOrder = %A" x.rasterizationOrder
                    ] |> sprintf "VkPipelineRasterizationStateRasterizationOrderAMD { %s }"
            end



    module AMDShaderTrinaryMinmax =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_shader_trinary_minmax"
        let Number = 21

    module AMDShaderExplicitVertexParameter =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_shader_explicit_vertex_parameter"
        let Number = 22

    /// Requires EXTDebugReport.
    /// Promoted to EXTDebugUtils.
    module EXTDebugMarker =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_debug_marker"
        let Number = 23

        type VkDebugReportObjectTypeEXT = EXTDebugReport.VkDebugReportObjectTypeEXT

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDebugMarkerMarkerInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pMarkerName : cstr
                val mutable public color : V4f

                new(pNext: nativeint, pMarkerName: cstr, color: V4f) =
                    {
                        sType = 1000022002u
                        pNext = pNext
                        pMarkerName = pMarkerName
                        color = color
                    }

                new(pMarkerName: cstr, color: V4f) =
                    VkDebugMarkerMarkerInfoEXT(Unchecked.defaultof<nativeint>, pMarkerName, color)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pMarkerName = Unchecked.defaultof<cstr> && x.color = Unchecked.defaultof<V4f>

                static member Empty =
                    VkDebugMarkerMarkerInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>, Unchecked.defaultof<V4f>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pMarkerName = %A" x.pMarkerName
                        sprintf "color = %A" x.color
                    ] |> sprintf "VkDebugMarkerMarkerInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDebugMarkerObjectNameInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public objectType : EXTDebugReport.VkDebugReportObjectTypeEXT
                val mutable public _object : uint64
                val mutable public pObjectName : cstr

                new(pNext: nativeint, objectType: EXTDebugReport.VkDebugReportObjectTypeEXT, _object: uint64, pObjectName: cstr) =
                    {
                        sType = 1000022000u
                        pNext = pNext
                        objectType = objectType
                        _object = _object
                        pObjectName = pObjectName
                    }

                new(objectType: EXTDebugReport.VkDebugReportObjectTypeEXT, _object: uint64, pObjectName: cstr) =
                    VkDebugMarkerObjectNameInfoEXT(Unchecked.defaultof<nativeint>, objectType, _object, pObjectName)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.objectType = Unchecked.defaultof<EXTDebugReport.VkDebugReportObjectTypeEXT> && x._object = Unchecked.defaultof<uint64> && x.pObjectName = Unchecked.defaultof<cstr>

                static member Empty =
                    VkDebugMarkerObjectNameInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<EXTDebugReport.VkDebugReportObjectTypeEXT>, Unchecked.defaultof<uint64>, Unchecked.defaultof<cstr>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "objectType = %A" x.objectType
                        sprintf "_object = %A" x._object
                        sprintf "pObjectName = %A" x.pObjectName
                    ] |> sprintf "VkDebugMarkerObjectNameInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDebugMarkerObjectTagInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public objectType : EXTDebugReport.VkDebugReportObjectTypeEXT
                val mutable public _object : uint64
                val mutable public tagName : uint64
                val mutable public tagSize : uint64
                val mutable public pTag : nativeint

                new(pNext: nativeint, objectType: EXTDebugReport.VkDebugReportObjectTypeEXT, _object: uint64, tagName: uint64, tagSize: uint64, pTag: nativeint) =
                    {
                        sType = 1000022001u
                        pNext = pNext
                        objectType = objectType
                        _object = _object
                        tagName = tagName
                        tagSize = tagSize
                        pTag = pTag
                    }

                new(objectType: EXTDebugReport.VkDebugReportObjectTypeEXT, _object: uint64, tagName: uint64, tagSize: uint64, pTag: nativeint) =
                    VkDebugMarkerObjectTagInfoEXT(Unchecked.defaultof<nativeint>, objectType, _object, tagName, tagSize, pTag)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.objectType = Unchecked.defaultof<EXTDebugReport.VkDebugReportObjectTypeEXT> && x._object = Unchecked.defaultof<uint64> && x.tagName = Unchecked.defaultof<uint64> && x.tagSize = Unchecked.defaultof<uint64> && x.pTag = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkDebugMarkerObjectTagInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<EXTDebugReport.VkDebugReportObjectTypeEXT>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "objectType = %A" x.objectType
                        sprintf "_object = %A" x._object
                        sprintf "tagName = %A" x.tagName
                        sprintf "tagSize = %A" x.tagSize
                        sprintf "pTag = %A" x.pTag
                    ] |> sprintf "VkDebugMarkerObjectTagInfoEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkDebugMarkerSetObjectTagEXTDel = delegate of VkDevice * nativeptr<VkDebugMarkerObjectTagInfoEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDebugMarkerSetObjectNameEXTDel = delegate of VkDevice * nativeptr<VkDebugMarkerObjectNameInfoEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDebugMarkerBeginEXTDel = delegate of VkCommandBuffer * nativeptr<VkDebugMarkerMarkerInfoEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDebugMarkerEndEXTDel = delegate of VkCommandBuffer -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDebugMarkerInsertEXTDel = delegate of VkCommandBuffer * nativeptr<VkDebugMarkerMarkerInfoEXT> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTDebugMarker")
                static let s_vkDebugMarkerSetObjectTagEXTDel = VkRaw.vkImportInstanceDelegate<VkDebugMarkerSetObjectTagEXTDel> "vkDebugMarkerSetObjectTagEXT"
                static let s_vkDebugMarkerSetObjectNameEXTDel = VkRaw.vkImportInstanceDelegate<VkDebugMarkerSetObjectNameEXTDel> "vkDebugMarkerSetObjectNameEXT"
                static let s_vkCmdDebugMarkerBeginEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDebugMarkerBeginEXTDel> "vkCmdDebugMarkerBeginEXT"
                static let s_vkCmdDebugMarkerEndEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDebugMarkerEndEXTDel> "vkCmdDebugMarkerEndEXT"
                static let s_vkCmdDebugMarkerInsertEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDebugMarkerInsertEXTDel> "vkCmdDebugMarkerInsertEXT"
                static do Report.End(3) |> ignore
                static member vkDebugMarkerSetObjectTagEXT = s_vkDebugMarkerSetObjectTagEXTDel
                static member vkDebugMarkerSetObjectNameEXT = s_vkDebugMarkerSetObjectNameEXTDel
                static member vkCmdDebugMarkerBeginEXT = s_vkCmdDebugMarkerBeginEXTDel
                static member vkCmdDebugMarkerEndEXT = s_vkCmdDebugMarkerEndEXTDel
                static member vkCmdDebugMarkerInsertEXT = s_vkCmdDebugMarkerInsertEXTDel
            let vkDebugMarkerSetObjectTagEXT(device : VkDevice, pTagInfo : nativeptr<VkDebugMarkerObjectTagInfoEXT>) = Loader<unit>.vkDebugMarkerSetObjectTagEXT.Invoke(device, pTagInfo)
            let vkDebugMarkerSetObjectNameEXT(device : VkDevice, pNameInfo : nativeptr<VkDebugMarkerObjectNameInfoEXT>) = Loader<unit>.vkDebugMarkerSetObjectNameEXT.Invoke(device, pNameInfo)
            let vkCmdDebugMarkerBeginEXT(commandBuffer : VkCommandBuffer, pMarkerInfo : nativeptr<VkDebugMarkerMarkerInfoEXT>) = Loader<unit>.vkCmdDebugMarkerBeginEXT.Invoke(commandBuffer, pMarkerInfo)
            let vkCmdDebugMarkerEndEXT(commandBuffer : VkCommandBuffer) = Loader<unit>.vkCmdDebugMarkerEndEXT.Invoke(commandBuffer)
            let vkCmdDebugMarkerInsertEXT(commandBuffer : VkCommandBuffer, pMarkerInfo : nativeptr<VkDebugMarkerMarkerInfoEXT>) = Loader<unit>.vkCmdDebugMarkerInsertEXT.Invoke(commandBuffer, pMarkerInfo)

    /// Requires (Vulkan11, KHRSynchronization2) | Vulkan13.
    module KHRVideoQueue =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_video_queue"
        let Number = 24


        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoSessionKHR =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkVideoSessionKHR(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoSessionParametersKHR =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkVideoSessionParametersKHR(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<Flags>]
        type VkVideoCodecOperationFlagsKHR =
            | All = 0
            | None = 0

        [<Flags>]
        type VkVideoChromaSubsamplingFlagsKHR =
            | All = 15
            | Invalid = 0
            | MonochromeBit = 0x00000001
            | D420Bit = 0x00000002
            | D422Bit = 0x00000004
            | D444Bit = 0x00000008

        [<Flags>]
        type VkVideoComponentBitDepthFlagsKHR =
            | All = 21
            | Invalid = 0
            | D8Bit = 0x00000001
            | D10Bit = 0x00000004
            | D12Bit = 0x00000010

        [<Flags>]
        type VkVideoCapabilityFlagsKHR =
            | All = 3
            | None = 0
            | ProtectedContentBit = 0x00000001
            | SeparateReferenceImagesBit = 0x00000002

        [<Flags>]
        type VkVideoSessionCreateFlagsKHR =
            | All = 1
            | None = 0
            | ProtectedContentBit = 0x00000001

        [<Flags>]
        type VkVideoSessionParametersCreateFlagsKHR =
            | All = 0
            | None = 0

        [<Flags>]
        type VkVideoCodingControlFlagsKHR =
            | All = 1
            | None = 0
            | ResetBit = 0x00000001

        type VkQueryResultStatusKHR =
            | Error = -1
            | NotReady = 0
            | Complete = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkBindVideoSessionMemoryInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memoryBindIndex : uint32
                val mutable public memory : VkDeviceMemory
                val mutable public memoryOffset : VkDeviceSize
                val mutable public memorySize : VkDeviceSize

                new(pNext: nativeint, memoryBindIndex: uint32, memory: VkDeviceMemory, memoryOffset: VkDeviceSize, memorySize: VkDeviceSize) =
                    {
                        sType = 1000023004u
                        pNext = pNext
                        memoryBindIndex = memoryBindIndex
                        memory = memory
                        memoryOffset = memoryOffset
                        memorySize = memorySize
                    }

                new(memoryBindIndex: uint32, memory: VkDeviceMemory, memoryOffset: VkDeviceSize, memorySize: VkDeviceSize) =
                    VkBindVideoSessionMemoryInfoKHR(Unchecked.defaultof<nativeint>, memoryBindIndex, memory, memoryOffset, memorySize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memoryBindIndex = Unchecked.defaultof<uint32> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.memoryOffset = Unchecked.defaultof<VkDeviceSize> && x.memorySize = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkBindVideoSessionMemoryInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memoryBindIndex = %A" x.memoryBindIndex
                        sprintf "memory = %A" x.memory
                        sprintf "memoryOffset = %A" x.memoryOffset
                        sprintf "memorySize = %A" x.memorySize
                    ] |> sprintf "VkBindVideoSessionMemoryInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceVideoFormatInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageUsage : VkImageUsageFlags

                new(pNext: nativeint, imageUsage: VkImageUsageFlags) =
                    {
                        sType = 1000023014u
                        pNext = pNext
                        imageUsage = imageUsage
                    }

                new(imageUsage: VkImageUsageFlags) =
                    VkPhysicalDeviceVideoFormatInfoKHR(Unchecked.defaultof<nativeint>, imageUsage)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageUsage = Unchecked.defaultof<VkImageUsageFlags>

                static member Empty =
                    VkPhysicalDeviceVideoFormatInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageUsageFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageUsage = %A" x.imageUsage
                    ] |> sprintf "VkPhysicalDeviceVideoFormatInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkQueueFamilyQueryResultStatusPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public queryResultStatusSupport : VkBool32

                new(pNext: nativeint, queryResultStatusSupport: VkBool32) =
                    {
                        sType = 1000023016u
                        pNext = pNext
                        queryResultStatusSupport = queryResultStatusSupport
                    }

                new(queryResultStatusSupport: VkBool32) =
                    VkQueueFamilyQueryResultStatusPropertiesKHR(Unchecked.defaultof<nativeint>, queryResultStatusSupport)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.queryResultStatusSupport = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkQueueFamilyQueryResultStatusPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "queryResultStatusSupport = %A" x.queryResultStatusSupport
                    ] |> sprintf "VkQueueFamilyQueryResultStatusPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkQueueFamilyVideoPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public videoCodecOperations : VkVideoCodecOperationFlagsKHR

                new(pNext: nativeint, videoCodecOperations: VkVideoCodecOperationFlagsKHR) =
                    {
                        sType = 1000023012u
                        pNext = pNext
                        videoCodecOperations = videoCodecOperations
                    }

                new(videoCodecOperations: VkVideoCodecOperationFlagsKHR) =
                    VkQueueFamilyVideoPropertiesKHR(Unchecked.defaultof<nativeint>, videoCodecOperations)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.videoCodecOperations = Unchecked.defaultof<VkVideoCodecOperationFlagsKHR>

                static member Empty =
                    VkQueueFamilyVideoPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoCodecOperationFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "videoCodecOperations = %A" x.videoCodecOperations
                    ] |> sprintf "VkQueueFamilyVideoPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoPictureResourceInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public codedOffset : VkOffset2D
                val mutable public codedExtent : VkExtent2D
                val mutable public baseArrayLayer : uint32
                val mutable public imageViewBinding : VkImageView

                new(pNext: nativeint, codedOffset: VkOffset2D, codedExtent: VkExtent2D, baseArrayLayer: uint32, imageViewBinding: VkImageView) =
                    {
                        sType = 1000023002u
                        pNext = pNext
                        codedOffset = codedOffset
                        codedExtent = codedExtent
                        baseArrayLayer = baseArrayLayer
                        imageViewBinding = imageViewBinding
                    }

                new(codedOffset: VkOffset2D, codedExtent: VkExtent2D, baseArrayLayer: uint32, imageViewBinding: VkImageView) =
                    VkVideoPictureResourceInfoKHR(Unchecked.defaultof<nativeint>, codedOffset, codedExtent, baseArrayLayer, imageViewBinding)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.codedOffset = Unchecked.defaultof<VkOffset2D> && x.codedExtent = Unchecked.defaultof<VkExtent2D> && x.baseArrayLayer = Unchecked.defaultof<uint32> && x.imageViewBinding = Unchecked.defaultof<VkImageView>

                static member Empty =
                    VkVideoPictureResourceInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageView>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "codedOffset = %A" x.codedOffset
                        sprintf "codedExtent = %A" x.codedExtent
                        sprintf "baseArrayLayer = %A" x.baseArrayLayer
                        sprintf "imageViewBinding = %A" x.imageViewBinding
                    ] |> sprintf "VkVideoPictureResourceInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoReferenceSlotInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public slotIndex : int32
                val mutable public pPictureResource : nativeptr<VkVideoPictureResourceInfoKHR>

                new(pNext: nativeint, slotIndex: int32, pPictureResource: nativeptr<VkVideoPictureResourceInfoKHR>) =
                    {
                        sType = 1000023011u
                        pNext = pNext
                        slotIndex = slotIndex
                        pPictureResource = pPictureResource
                    }

                new(slotIndex: int32, pPictureResource: nativeptr<VkVideoPictureResourceInfoKHR>) =
                    VkVideoReferenceSlotInfoKHR(Unchecked.defaultof<nativeint>, slotIndex, pPictureResource)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.slotIndex = Unchecked.defaultof<int32> && x.pPictureResource = Unchecked.defaultof<nativeptr<VkVideoPictureResourceInfoKHR>>

                static member Empty =
                    VkVideoReferenceSlotInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<int32>, Unchecked.defaultof<nativeptr<VkVideoPictureResourceInfoKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "slotIndex = %A" x.slotIndex
                        sprintf "pPictureResource = %A" x.pPictureResource
                    ] |> sprintf "VkVideoReferenceSlotInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoBeginCodingInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoBeginCodingFlagsKHR
                val mutable public videoSession : VkVideoSessionKHR
                val mutable public videoSessionParameters : VkVideoSessionParametersKHR
                val mutable public referenceSlotCount : uint32
                val mutable public pReferenceSlots : nativeptr<VkVideoReferenceSlotInfoKHR>

                new(pNext: nativeint, flags: VkVideoBeginCodingFlagsKHR, videoSession: VkVideoSessionKHR, videoSessionParameters: VkVideoSessionParametersKHR, referenceSlotCount: uint32, pReferenceSlots: nativeptr<VkVideoReferenceSlotInfoKHR>) =
                    {
                        sType = 1000023008u
                        pNext = pNext
                        flags = flags
                        videoSession = videoSession
                        videoSessionParameters = videoSessionParameters
                        referenceSlotCount = referenceSlotCount
                        pReferenceSlots = pReferenceSlots
                    }

                new(flags: VkVideoBeginCodingFlagsKHR, videoSession: VkVideoSessionKHR, videoSessionParameters: VkVideoSessionParametersKHR, referenceSlotCount: uint32, pReferenceSlots: nativeptr<VkVideoReferenceSlotInfoKHR>) =
                    VkVideoBeginCodingInfoKHR(Unchecked.defaultof<nativeint>, flags, videoSession, videoSessionParameters, referenceSlotCount, pReferenceSlots)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoBeginCodingFlagsKHR> && x.videoSession = Unchecked.defaultof<VkVideoSessionKHR> && x.videoSessionParameters = Unchecked.defaultof<VkVideoSessionParametersKHR> && x.referenceSlotCount = Unchecked.defaultof<uint32> && x.pReferenceSlots = Unchecked.defaultof<nativeptr<VkVideoReferenceSlotInfoKHR>>

                static member Empty =
                    VkVideoBeginCodingInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoBeginCodingFlagsKHR>, Unchecked.defaultof<VkVideoSessionKHR>, Unchecked.defaultof<VkVideoSessionParametersKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoReferenceSlotInfoKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "videoSession = %A" x.videoSession
                        sprintf "videoSessionParameters = %A" x.videoSessionParameters
                        sprintf "referenceSlotCount = %A" x.referenceSlotCount
                        sprintf "pReferenceSlots = %A" x.pReferenceSlots
                    ] |> sprintf "VkVideoBeginCodingInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoCapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoCapabilityFlagsKHR
                val mutable public minBitstreamBufferOffsetAlignment : VkDeviceSize
                val mutable public minBitstreamBufferSizeAlignment : VkDeviceSize
                val mutable public pictureAccessGranularity : VkExtent2D
                val mutable public minCodedExtent : VkExtent2D
                val mutable public maxCodedExtent : VkExtent2D
                val mutable public maxDpbSlots : uint32
                val mutable public maxActiveReferencePictures : uint32
                val mutable public stdHeaderVersion : VkExtensionProperties

                new(pNext: nativeint, flags: VkVideoCapabilityFlagsKHR, minBitstreamBufferOffsetAlignment: VkDeviceSize, minBitstreamBufferSizeAlignment: VkDeviceSize, pictureAccessGranularity: VkExtent2D, minCodedExtent: VkExtent2D, maxCodedExtent: VkExtent2D, maxDpbSlots: uint32, maxActiveReferencePictures: uint32, stdHeaderVersion: VkExtensionProperties) =
                    {
                        sType = 1000023001u
                        pNext = pNext
                        flags = flags
                        minBitstreamBufferOffsetAlignment = minBitstreamBufferOffsetAlignment
                        minBitstreamBufferSizeAlignment = minBitstreamBufferSizeAlignment
                        pictureAccessGranularity = pictureAccessGranularity
                        minCodedExtent = minCodedExtent
                        maxCodedExtent = maxCodedExtent
                        maxDpbSlots = maxDpbSlots
                        maxActiveReferencePictures = maxActiveReferencePictures
                        stdHeaderVersion = stdHeaderVersion
                    }

                new(flags: VkVideoCapabilityFlagsKHR, minBitstreamBufferOffsetAlignment: VkDeviceSize, minBitstreamBufferSizeAlignment: VkDeviceSize, pictureAccessGranularity: VkExtent2D, minCodedExtent: VkExtent2D, maxCodedExtent: VkExtent2D, maxDpbSlots: uint32, maxActiveReferencePictures: uint32, stdHeaderVersion: VkExtensionProperties) =
                    VkVideoCapabilitiesKHR(Unchecked.defaultof<nativeint>, flags, minBitstreamBufferOffsetAlignment, minBitstreamBufferSizeAlignment, pictureAccessGranularity, minCodedExtent, maxCodedExtent, maxDpbSlots, maxActiveReferencePictures, stdHeaderVersion)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoCapabilityFlagsKHR> && x.minBitstreamBufferOffsetAlignment = Unchecked.defaultof<VkDeviceSize> && x.minBitstreamBufferSizeAlignment = Unchecked.defaultof<VkDeviceSize> && x.pictureAccessGranularity = Unchecked.defaultof<VkExtent2D> && x.minCodedExtent = Unchecked.defaultof<VkExtent2D> && x.maxCodedExtent = Unchecked.defaultof<VkExtent2D> && x.maxDpbSlots = Unchecked.defaultof<uint32> && x.maxActiveReferencePictures = Unchecked.defaultof<uint32> && x.stdHeaderVersion = Unchecked.defaultof<VkExtensionProperties>

                static member Empty =
                    VkVideoCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoCapabilityFlagsKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkExtensionProperties>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "minBitstreamBufferOffsetAlignment = %A" x.minBitstreamBufferOffsetAlignment
                        sprintf "minBitstreamBufferSizeAlignment = %A" x.minBitstreamBufferSizeAlignment
                        sprintf "pictureAccessGranularity = %A" x.pictureAccessGranularity
                        sprintf "minCodedExtent = %A" x.minCodedExtent
                        sprintf "maxCodedExtent = %A" x.maxCodedExtent
                        sprintf "maxDpbSlots = %A" x.maxDpbSlots
                        sprintf "maxActiveReferencePictures = %A" x.maxActiveReferencePictures
                        sprintf "stdHeaderVersion = %A" x.stdHeaderVersion
                    ] |> sprintf "VkVideoCapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoCodingControlInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoCodingControlFlagsKHR

                new(pNext: nativeint, flags: VkVideoCodingControlFlagsKHR) =
                    {
                        sType = 1000023010u
                        pNext = pNext
                        flags = flags
                    }

                new(flags: VkVideoCodingControlFlagsKHR) =
                    VkVideoCodingControlInfoKHR(Unchecked.defaultof<nativeint>, flags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoCodingControlFlagsKHR>

                static member Empty =
                    VkVideoCodingControlInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoCodingControlFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                    ] |> sprintf "VkVideoCodingControlInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEndCodingInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoEndCodingFlagsKHR

                new(pNext: nativeint, flags: VkVideoEndCodingFlagsKHR) =
                    {
                        sType = 1000023009u
                        pNext = pNext
                        flags = flags
                    }

                new(flags: VkVideoEndCodingFlagsKHR) =
                    VkVideoEndCodingInfoKHR(Unchecked.defaultof<nativeint>, flags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEndCodingFlagsKHR>

                static member Empty =
                    VkVideoEndCodingInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEndCodingFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                    ] |> sprintf "VkVideoEndCodingInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoFormatPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public format : VkFormat
                val mutable public componentMapping : VkComponentMapping
                val mutable public imageCreateFlags : VkImageCreateFlags
                val mutable public imageType : VkImageType
                val mutable public imageTiling : VkImageTiling
                val mutable public imageUsageFlags : VkImageUsageFlags

                new(pNext: nativeint, format: VkFormat, componentMapping: VkComponentMapping, imageCreateFlags: VkImageCreateFlags, imageType: VkImageType, imageTiling: VkImageTiling, imageUsageFlags: VkImageUsageFlags) =
                    {
                        sType = 1000023015u
                        pNext = pNext
                        format = format
                        componentMapping = componentMapping
                        imageCreateFlags = imageCreateFlags
                        imageType = imageType
                        imageTiling = imageTiling
                        imageUsageFlags = imageUsageFlags
                    }

                new(format: VkFormat, componentMapping: VkComponentMapping, imageCreateFlags: VkImageCreateFlags, imageType: VkImageType, imageTiling: VkImageTiling, imageUsageFlags: VkImageUsageFlags) =
                    VkVideoFormatPropertiesKHR(Unchecked.defaultof<nativeint>, format, componentMapping, imageCreateFlags, imageType, imageTiling, imageUsageFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x.componentMapping = Unchecked.defaultof<VkComponentMapping> && x.imageCreateFlags = Unchecked.defaultof<VkImageCreateFlags> && x.imageType = Unchecked.defaultof<VkImageType> && x.imageTiling = Unchecked.defaultof<VkImageTiling> && x.imageUsageFlags = Unchecked.defaultof<VkImageUsageFlags>

                static member Empty =
                    VkVideoFormatPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<VkImageCreateFlags>, Unchecked.defaultof<VkImageType>, Unchecked.defaultof<VkImageTiling>, Unchecked.defaultof<VkImageUsageFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "format = %A" x.format
                        sprintf "componentMapping = %A" x.componentMapping
                        sprintf "imageCreateFlags = %A" x.imageCreateFlags
                        sprintf "imageType = %A" x.imageType
                        sprintf "imageTiling = %A" x.imageTiling
                        sprintf "imageUsageFlags = %A" x.imageUsageFlags
                    ] |> sprintf "VkVideoFormatPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoProfileInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public videoCodecOperation : VkVideoCodecOperationFlagsKHR
                val mutable public chromaSubsampling : VkVideoChromaSubsamplingFlagsKHR
                val mutable public lumaBitDepth : VkVideoComponentBitDepthFlagsKHR
                val mutable public chromaBitDepth : VkVideoComponentBitDepthFlagsKHR

                new(pNext: nativeint, videoCodecOperation: VkVideoCodecOperationFlagsKHR, chromaSubsampling: VkVideoChromaSubsamplingFlagsKHR, lumaBitDepth: VkVideoComponentBitDepthFlagsKHR, chromaBitDepth: VkVideoComponentBitDepthFlagsKHR) =
                    {
                        sType = 1000023000u
                        pNext = pNext
                        videoCodecOperation = videoCodecOperation
                        chromaSubsampling = chromaSubsampling
                        lumaBitDepth = lumaBitDepth
                        chromaBitDepth = chromaBitDepth
                    }

                new(videoCodecOperation: VkVideoCodecOperationFlagsKHR, chromaSubsampling: VkVideoChromaSubsamplingFlagsKHR, lumaBitDepth: VkVideoComponentBitDepthFlagsKHR, chromaBitDepth: VkVideoComponentBitDepthFlagsKHR) =
                    VkVideoProfileInfoKHR(Unchecked.defaultof<nativeint>, videoCodecOperation, chromaSubsampling, lumaBitDepth, chromaBitDepth)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.videoCodecOperation = Unchecked.defaultof<VkVideoCodecOperationFlagsKHR> && x.chromaSubsampling = Unchecked.defaultof<VkVideoChromaSubsamplingFlagsKHR> && x.lumaBitDepth = Unchecked.defaultof<VkVideoComponentBitDepthFlagsKHR> && x.chromaBitDepth = Unchecked.defaultof<VkVideoComponentBitDepthFlagsKHR>

                static member Empty =
                    VkVideoProfileInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoCodecOperationFlagsKHR>, Unchecked.defaultof<VkVideoChromaSubsamplingFlagsKHR>, Unchecked.defaultof<VkVideoComponentBitDepthFlagsKHR>, Unchecked.defaultof<VkVideoComponentBitDepthFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "videoCodecOperation = %A" x.videoCodecOperation
                        sprintf "chromaSubsampling = %A" x.chromaSubsampling
                        sprintf "lumaBitDepth = %A" x.lumaBitDepth
                        sprintf "chromaBitDepth = %A" x.chromaBitDepth
                    ] |> sprintf "VkVideoProfileInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoProfileListInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public profileCount : uint32
                val mutable public pProfiles : nativeptr<VkVideoProfileInfoKHR>

                new(pNext: nativeint, profileCount: uint32, pProfiles: nativeptr<VkVideoProfileInfoKHR>) =
                    {
                        sType = 1000023013u
                        pNext = pNext
                        profileCount = profileCount
                        pProfiles = pProfiles
                    }

                new(profileCount: uint32, pProfiles: nativeptr<VkVideoProfileInfoKHR>) =
                    VkVideoProfileListInfoKHR(Unchecked.defaultof<nativeint>, profileCount, pProfiles)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.profileCount = Unchecked.defaultof<uint32> && x.pProfiles = Unchecked.defaultof<nativeptr<VkVideoProfileInfoKHR>>

                static member Empty =
                    VkVideoProfileListInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoProfileInfoKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "profileCount = %A" x.profileCount
                        sprintf "pProfiles = %A" x.pProfiles
                    ] |> sprintf "VkVideoProfileListInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoSessionCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public queueFamilyIndex : uint32
                val mutable public flags : VkVideoSessionCreateFlagsKHR
                val mutable public pVideoProfile : nativeptr<VkVideoProfileInfoKHR>
                val mutable public pictureFormat : VkFormat
                val mutable public maxCodedExtent : VkExtent2D
                val mutable public referencePictureFormat : VkFormat
                val mutable public maxDpbSlots : uint32
                val mutable public maxActiveReferencePictures : uint32
                val mutable public pStdHeaderVersion : nativeptr<VkExtensionProperties>

                new(pNext: nativeint, queueFamilyIndex: uint32, flags: VkVideoSessionCreateFlagsKHR, pVideoProfile: nativeptr<VkVideoProfileInfoKHR>, pictureFormat: VkFormat, maxCodedExtent: VkExtent2D, referencePictureFormat: VkFormat, maxDpbSlots: uint32, maxActiveReferencePictures: uint32, pStdHeaderVersion: nativeptr<VkExtensionProperties>) =
                    {
                        sType = 1000023005u
                        pNext = pNext
                        queueFamilyIndex = queueFamilyIndex
                        flags = flags
                        pVideoProfile = pVideoProfile
                        pictureFormat = pictureFormat
                        maxCodedExtent = maxCodedExtent
                        referencePictureFormat = referencePictureFormat
                        maxDpbSlots = maxDpbSlots
                        maxActiveReferencePictures = maxActiveReferencePictures
                        pStdHeaderVersion = pStdHeaderVersion
                    }

                new(queueFamilyIndex: uint32, flags: VkVideoSessionCreateFlagsKHR, pVideoProfile: nativeptr<VkVideoProfileInfoKHR>, pictureFormat: VkFormat, maxCodedExtent: VkExtent2D, referencePictureFormat: VkFormat, maxDpbSlots: uint32, maxActiveReferencePictures: uint32, pStdHeaderVersion: nativeptr<VkExtensionProperties>) =
                    VkVideoSessionCreateInfoKHR(Unchecked.defaultof<nativeint>, queueFamilyIndex, flags, pVideoProfile, pictureFormat, maxCodedExtent, referencePictureFormat, maxDpbSlots, maxActiveReferencePictures, pStdHeaderVersion)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.queueFamilyIndex = Unchecked.defaultof<uint32> && x.flags = Unchecked.defaultof<VkVideoSessionCreateFlagsKHR> && x.pVideoProfile = Unchecked.defaultof<nativeptr<VkVideoProfileInfoKHR>> && x.pictureFormat = Unchecked.defaultof<VkFormat> && x.maxCodedExtent = Unchecked.defaultof<VkExtent2D> && x.referencePictureFormat = Unchecked.defaultof<VkFormat> && x.maxDpbSlots = Unchecked.defaultof<uint32> && x.maxActiveReferencePictures = Unchecked.defaultof<uint32> && x.pStdHeaderVersion = Unchecked.defaultof<nativeptr<VkExtensionProperties>>

                static member Empty =
                    VkVideoSessionCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkVideoSessionCreateFlagsKHR>, Unchecked.defaultof<nativeptr<VkVideoProfileInfoKHR>>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkExtensionProperties>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "queueFamilyIndex = %A" x.queueFamilyIndex
                        sprintf "flags = %A" x.flags
                        sprintf "pVideoProfile = %A" x.pVideoProfile
                        sprintf "pictureFormat = %A" x.pictureFormat
                        sprintf "maxCodedExtent = %A" x.maxCodedExtent
                        sprintf "referencePictureFormat = %A" x.referencePictureFormat
                        sprintf "maxDpbSlots = %A" x.maxDpbSlots
                        sprintf "maxActiveReferencePictures = %A" x.maxActiveReferencePictures
                        sprintf "pStdHeaderVersion = %A" x.pStdHeaderVersion
                    ] |> sprintf "VkVideoSessionCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoSessionMemoryRequirementsKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memoryBindIndex : uint32
                val mutable public memoryRequirements : VkMemoryRequirements

                new(pNext: nativeint, memoryBindIndex: uint32, memoryRequirements: VkMemoryRequirements) =
                    {
                        sType = 1000023003u
                        pNext = pNext
                        memoryBindIndex = memoryBindIndex
                        memoryRequirements = memoryRequirements
                    }

                new(memoryBindIndex: uint32, memoryRequirements: VkMemoryRequirements) =
                    VkVideoSessionMemoryRequirementsKHR(Unchecked.defaultof<nativeint>, memoryBindIndex, memoryRequirements)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memoryBindIndex = Unchecked.defaultof<uint32> && x.memoryRequirements = Unchecked.defaultof<VkMemoryRequirements>

                static member Empty =
                    VkVideoSessionMemoryRequirementsKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkMemoryRequirements>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memoryBindIndex = %A" x.memoryBindIndex
                        sprintf "memoryRequirements = %A" x.memoryRequirements
                    ] |> sprintf "VkVideoSessionMemoryRequirementsKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoSessionParametersCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoSessionParametersCreateFlagsKHR
                val mutable public videoSessionParametersTemplate : VkVideoSessionParametersKHR
                val mutable public videoSession : VkVideoSessionKHR

                new(pNext: nativeint, flags: VkVideoSessionParametersCreateFlagsKHR, videoSessionParametersTemplate: VkVideoSessionParametersKHR, videoSession: VkVideoSessionKHR) =
                    {
                        sType = 1000023006u
                        pNext = pNext
                        flags = flags
                        videoSessionParametersTemplate = videoSessionParametersTemplate
                        videoSession = videoSession
                    }

                new(flags: VkVideoSessionParametersCreateFlagsKHR, videoSessionParametersTemplate: VkVideoSessionParametersKHR, videoSession: VkVideoSessionKHR) =
                    VkVideoSessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, videoSessionParametersTemplate, videoSession)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoSessionParametersCreateFlagsKHR> && x.videoSessionParametersTemplate = Unchecked.defaultof<VkVideoSessionParametersKHR> && x.videoSession = Unchecked.defaultof<VkVideoSessionKHR>

                static member Empty =
                    VkVideoSessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoSessionParametersCreateFlagsKHR>, Unchecked.defaultof<VkVideoSessionParametersKHR>, Unchecked.defaultof<VkVideoSessionKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "videoSessionParametersTemplate = %A" x.videoSessionParametersTemplate
                        sprintf "videoSession = %A" x.videoSession
                    ] |> sprintf "VkVideoSessionParametersCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoSessionParametersUpdateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public updateSequenceCount : uint32

                new(pNext: nativeint, updateSequenceCount: uint32) =
                    {
                        sType = 1000023007u
                        pNext = pNext
                        updateSequenceCount = updateSequenceCount
                    }

                new(updateSequenceCount: uint32) =
                    VkVideoSessionParametersUpdateInfoKHR(Unchecked.defaultof<nativeint>, updateSequenceCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.updateSequenceCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoSessionParametersUpdateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "updateSequenceCount = %A" x.updateSequenceCount
                    ] |> sprintf "VkVideoSessionParametersUpdateInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  /// VkVideoSessionKHR
                  static member inline VideoSessionKhr = enum<VkObjectType> 1000023000
                  /// VkVideoSessionParametersKHR
                  static member inline VideoSessionParametersKhr = enum<VkObjectType> 1000023001
             type VkQueryResultFlags with
                  static member inline WithStatusBitKhr = enum<VkQueryResultFlags> 0x00000010
             type VkQueryType with
                  static member inline ResultStatusOnlyKhr = enum<VkQueryType> 1000023000
             type VkResult with
                  static member inline ErrorImageUsageNotSupportedKhr = enum<VkResult> -1000023000
                  static member inline ErrorVideoPictureLayoutNotSupportedKhr = enum<VkResult> -1000023001
                  static member inline ErrorVideoProfileOperationNotSupportedKhr = enum<VkResult> -1000023002
                  static member inline ErrorVideoProfileFormatNotSupportedKhr = enum<VkResult> -1000023003
                  static member inline ErrorVideoProfileCodecNotSupportedKhr = enum<VkResult> -1000023004
                  static member inline ErrorVideoStdVersionNotSupportedKhr = enum<VkResult> -1000023005

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceVideoCapabilitiesKHRDel = delegate of VkPhysicalDevice * nativeptr<VkVideoProfileInfoKHR> * nativeptr<VkVideoCapabilitiesKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceVideoFormatPropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceVideoFormatInfoKHR> * nativeptr<uint32> * nativeptr<VkVideoFormatPropertiesKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateVideoSessionKHRDel = delegate of VkDevice * nativeptr<VkVideoSessionCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkVideoSessionKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyVideoSessionKHRDel = delegate of VkDevice * VkVideoSessionKHR * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetVideoSessionMemoryRequirementsKHRDel = delegate of VkDevice * VkVideoSessionKHR * nativeptr<uint32> * nativeptr<VkVideoSessionMemoryRequirementsKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkBindVideoSessionMemoryKHRDel = delegate of VkDevice * VkVideoSessionKHR * uint32 * nativeptr<VkBindVideoSessionMemoryInfoKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateVideoSessionParametersKHRDel = delegate of VkDevice * nativeptr<VkVideoSessionParametersCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkVideoSessionParametersKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkUpdateVideoSessionParametersKHRDel = delegate of VkDevice * VkVideoSessionParametersKHR * nativeptr<VkVideoSessionParametersUpdateInfoKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyVideoSessionParametersKHRDel = delegate of VkDevice * VkVideoSessionParametersKHR * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBeginVideoCodingKHRDel = delegate of VkCommandBuffer * nativeptr<VkVideoBeginCodingInfoKHR> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdEndVideoCodingKHRDel = delegate of VkCommandBuffer * nativeptr<VkVideoEndCodingInfoKHR> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdControlVideoCodingKHRDel = delegate of VkCommandBuffer * nativeptr<VkVideoCodingControlInfoKHR> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRVideoQueue")
                static let s_vkGetPhysicalDeviceVideoCapabilitiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceVideoCapabilitiesKHRDel> "vkGetPhysicalDeviceVideoCapabilitiesKHR"
                static let s_vkGetPhysicalDeviceVideoFormatPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceVideoFormatPropertiesKHRDel> "vkGetPhysicalDeviceVideoFormatPropertiesKHR"
                static let s_vkCreateVideoSessionKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateVideoSessionKHRDel> "vkCreateVideoSessionKHR"
                static let s_vkDestroyVideoSessionKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroyVideoSessionKHRDel> "vkDestroyVideoSessionKHR"
                static let s_vkGetVideoSessionMemoryRequirementsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetVideoSessionMemoryRequirementsKHRDel> "vkGetVideoSessionMemoryRequirementsKHR"
                static let s_vkBindVideoSessionMemoryKHRDel = VkRaw.vkImportInstanceDelegate<VkBindVideoSessionMemoryKHRDel> "vkBindVideoSessionMemoryKHR"
                static let s_vkCreateVideoSessionParametersKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateVideoSessionParametersKHRDel> "vkCreateVideoSessionParametersKHR"
                static let s_vkUpdateVideoSessionParametersKHRDel = VkRaw.vkImportInstanceDelegate<VkUpdateVideoSessionParametersKHRDel> "vkUpdateVideoSessionParametersKHR"
                static let s_vkDestroyVideoSessionParametersKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroyVideoSessionParametersKHRDel> "vkDestroyVideoSessionParametersKHR"
                static let s_vkCmdBeginVideoCodingKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginVideoCodingKHRDel> "vkCmdBeginVideoCodingKHR"
                static let s_vkCmdEndVideoCodingKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdEndVideoCodingKHRDel> "vkCmdEndVideoCodingKHR"
                static let s_vkCmdControlVideoCodingKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdControlVideoCodingKHRDel> "vkCmdControlVideoCodingKHR"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceVideoCapabilitiesKHR = s_vkGetPhysicalDeviceVideoCapabilitiesKHRDel
                static member vkGetPhysicalDeviceVideoFormatPropertiesKHR = s_vkGetPhysicalDeviceVideoFormatPropertiesKHRDel
                static member vkCreateVideoSessionKHR = s_vkCreateVideoSessionKHRDel
                static member vkDestroyVideoSessionKHR = s_vkDestroyVideoSessionKHRDel
                static member vkGetVideoSessionMemoryRequirementsKHR = s_vkGetVideoSessionMemoryRequirementsKHRDel
                static member vkBindVideoSessionMemoryKHR = s_vkBindVideoSessionMemoryKHRDel
                static member vkCreateVideoSessionParametersKHR = s_vkCreateVideoSessionParametersKHRDel
                static member vkUpdateVideoSessionParametersKHR = s_vkUpdateVideoSessionParametersKHRDel
                static member vkDestroyVideoSessionParametersKHR = s_vkDestroyVideoSessionParametersKHRDel
                static member vkCmdBeginVideoCodingKHR = s_vkCmdBeginVideoCodingKHRDel
                static member vkCmdEndVideoCodingKHR = s_vkCmdEndVideoCodingKHRDel
                static member vkCmdControlVideoCodingKHR = s_vkCmdControlVideoCodingKHRDel
            let vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice : VkPhysicalDevice, pVideoProfile : nativeptr<VkVideoProfileInfoKHR>, pCapabilities : nativeptr<VkVideoCapabilitiesKHR>) = Loader<unit>.vkGetPhysicalDeviceVideoCapabilitiesKHR.Invoke(physicalDevice, pVideoProfile, pCapabilities)
            let vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice : VkPhysicalDevice, pVideoFormatInfo : nativeptr<VkPhysicalDeviceVideoFormatInfoKHR>, pVideoFormatPropertyCount : nativeptr<uint32>, pVideoFormatProperties : nativeptr<VkVideoFormatPropertiesKHR>) = Loader<unit>.vkGetPhysicalDeviceVideoFormatPropertiesKHR.Invoke(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties)
            let vkCreateVideoSessionKHR(device : VkDevice, pCreateInfo : nativeptr<VkVideoSessionCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pVideoSession : nativeptr<VkVideoSessionKHR>) = Loader<unit>.vkCreateVideoSessionKHR.Invoke(device, pCreateInfo, pAllocator, pVideoSession)
            let vkDestroyVideoSessionKHR(device : VkDevice, videoSession : VkVideoSessionKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyVideoSessionKHR.Invoke(device, videoSession, pAllocator)
            let vkGetVideoSessionMemoryRequirementsKHR(device : VkDevice, videoSession : VkVideoSessionKHR, pMemoryRequirementsCount : nativeptr<uint32>, pMemoryRequirements : nativeptr<VkVideoSessionMemoryRequirementsKHR>) = Loader<unit>.vkGetVideoSessionMemoryRequirementsKHR.Invoke(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements)
            let vkBindVideoSessionMemoryKHR(device : VkDevice, videoSession : VkVideoSessionKHR, bindSessionMemoryInfoCount : uint32, pBindSessionMemoryInfos : nativeptr<VkBindVideoSessionMemoryInfoKHR>) = Loader<unit>.vkBindVideoSessionMemoryKHR.Invoke(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos)
            let vkCreateVideoSessionParametersKHR(device : VkDevice, pCreateInfo : nativeptr<VkVideoSessionParametersCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pVideoSessionParameters : nativeptr<VkVideoSessionParametersKHR>) = Loader<unit>.vkCreateVideoSessionParametersKHR.Invoke(device, pCreateInfo, pAllocator, pVideoSessionParameters)
            let vkUpdateVideoSessionParametersKHR(device : VkDevice, videoSessionParameters : VkVideoSessionParametersKHR, pUpdateInfo : nativeptr<VkVideoSessionParametersUpdateInfoKHR>) = Loader<unit>.vkUpdateVideoSessionParametersKHR.Invoke(device, videoSessionParameters, pUpdateInfo)
            let vkDestroyVideoSessionParametersKHR(device : VkDevice, videoSessionParameters : VkVideoSessionParametersKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyVideoSessionParametersKHR.Invoke(device, videoSessionParameters, pAllocator)
            let vkCmdBeginVideoCodingKHR(commandBuffer : VkCommandBuffer, pBeginInfo : nativeptr<VkVideoBeginCodingInfoKHR>) = Loader<unit>.vkCmdBeginVideoCodingKHR.Invoke(commandBuffer, pBeginInfo)
            let vkCmdEndVideoCodingKHR(commandBuffer : VkCommandBuffer, pEndCodingInfo : nativeptr<VkVideoEndCodingInfoKHR>) = Loader<unit>.vkCmdEndVideoCodingKHR.Invoke(commandBuffer, pEndCodingInfo)
            let vkCmdControlVideoCodingKHR(commandBuffer : VkCommandBuffer, pCodingControlInfo : nativeptr<VkVideoCodingControlInfoKHR>) = Loader<unit>.vkCmdControlVideoCodingKHR.Invoke(commandBuffer, pCodingControlInfo)

    /// Requires KHRVideoQueue, (KHRSynchronization2 | Vulkan13).
    module KHRVideoDecodeQueue =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_video_decode_queue"
        let Number = 25

        [<Flags>]
        type VkVideoDecodeCapabilityFlagsKHR =
            | All = 3
            | None = 0
            | DpbAndOutputCoincideBit = 0x00000001
            | DpbAndOutputDistinctBit = 0x00000002

        [<Flags>]
        type VkVideoDecodeUsageFlagsKHR =
            | All = 7
            | Default = 0
            | TranscodingBit = 0x00000001
            | OfflineBit = 0x00000002
            | StreamingBit = 0x00000004


        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeCapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoDecodeCapabilityFlagsKHR

                new(pNext: nativeint, flags: VkVideoDecodeCapabilityFlagsKHR) =
                    {
                        sType = 1000024001u
                        pNext = pNext
                        flags = flags
                    }

                new(flags: VkVideoDecodeCapabilityFlagsKHR) =
                    VkVideoDecodeCapabilitiesKHR(Unchecked.defaultof<nativeint>, flags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoDecodeCapabilityFlagsKHR>

                static member Empty =
                    VkVideoDecodeCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoDecodeCapabilityFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                    ] |> sprintf "VkVideoDecodeCapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoDecodeFlagsKHR
                val mutable public srcBuffer : VkBuffer
                val mutable public srcBufferOffset : VkDeviceSize
                val mutable public srcBufferRange : VkDeviceSize
                val mutable public dstPictureResource : KHRVideoQueue.VkVideoPictureResourceInfoKHR
                val mutable public pSetupReferenceSlot : nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>
                val mutable public referenceSlotCount : uint32
                val mutable public pReferenceSlots : nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>

                new(pNext: nativeint, flags: VkVideoDecodeFlagsKHR, srcBuffer: VkBuffer, srcBufferOffset: VkDeviceSize, srcBufferRange: VkDeviceSize, dstPictureResource: KHRVideoQueue.VkVideoPictureResourceInfoKHR, pSetupReferenceSlot: nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>, referenceSlotCount: uint32, pReferenceSlots: nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>) =
                    {
                        sType = 1000024000u
                        pNext = pNext
                        flags = flags
                        srcBuffer = srcBuffer
                        srcBufferOffset = srcBufferOffset
                        srcBufferRange = srcBufferRange
                        dstPictureResource = dstPictureResource
                        pSetupReferenceSlot = pSetupReferenceSlot
                        referenceSlotCount = referenceSlotCount
                        pReferenceSlots = pReferenceSlots
                    }

                new(flags: VkVideoDecodeFlagsKHR, srcBuffer: VkBuffer, srcBufferOffset: VkDeviceSize, srcBufferRange: VkDeviceSize, dstPictureResource: KHRVideoQueue.VkVideoPictureResourceInfoKHR, pSetupReferenceSlot: nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>, referenceSlotCount: uint32, pReferenceSlots: nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>) =
                    VkVideoDecodeInfoKHR(Unchecked.defaultof<nativeint>, flags, srcBuffer, srcBufferOffset, srcBufferRange, dstPictureResource, pSetupReferenceSlot, referenceSlotCount, pReferenceSlots)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoDecodeFlagsKHR> && x.srcBuffer = Unchecked.defaultof<VkBuffer> && x.srcBufferOffset = Unchecked.defaultof<VkDeviceSize> && x.srcBufferRange = Unchecked.defaultof<VkDeviceSize> && x.dstPictureResource = Unchecked.defaultof<KHRVideoQueue.VkVideoPictureResourceInfoKHR> && x.pSetupReferenceSlot = Unchecked.defaultof<nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>> && x.referenceSlotCount = Unchecked.defaultof<uint32> && x.pReferenceSlots = Unchecked.defaultof<nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>>

                static member Empty =
                    VkVideoDecodeInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoDecodeFlagsKHR>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<KHRVideoQueue.VkVideoPictureResourceInfoKHR>, Unchecked.defaultof<nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "srcBuffer = %A" x.srcBuffer
                        sprintf "srcBufferOffset = %A" x.srcBufferOffset
                        sprintf "srcBufferRange = %A" x.srcBufferRange
                        sprintf "dstPictureResource = %A" x.dstPictureResource
                        sprintf "pSetupReferenceSlot = %A" x.pSetupReferenceSlot
                        sprintf "referenceSlotCount = %A" x.referenceSlotCount
                        sprintf "pReferenceSlots = %A" x.pReferenceSlots
                    ] |> sprintf "VkVideoDecodeInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeUsageInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public videoUsageHints : VkVideoDecodeUsageFlagsKHR

                new(pNext: nativeint, videoUsageHints: VkVideoDecodeUsageFlagsKHR) =
                    {
                        sType = 1000024002u
                        pNext = pNext
                        videoUsageHints = videoUsageHints
                    }

                new(videoUsageHints: VkVideoDecodeUsageFlagsKHR) =
                    VkVideoDecodeUsageInfoKHR(Unchecked.defaultof<nativeint>, videoUsageHints)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.videoUsageHints = Unchecked.defaultof<VkVideoDecodeUsageFlagsKHR>

                static member Empty =
                    VkVideoDecodeUsageInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoDecodeUsageFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "videoUsageHints = %A" x.videoUsageHints
                    ] |> sprintf "VkVideoDecodeUsageInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkAccessFlags2 with
                  static member inline Access2VideoDecodeReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000008
                  static member inline Access2VideoDecodeWriteBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000010
             type VkBufferUsageFlags with
                  static member inline VideoDecodeSrcBitKhr = enum<VkBufferUsageFlags> 0x00002000
                  static member inline VideoDecodeDstBitKhr = enum<VkBufferUsageFlags> 0x00004000
             type VkFormatFeatureFlags with
                  static member inline VideoDecodeOutputBitKhr = enum<VkFormatFeatureFlags> 0x02000000
                  static member inline VideoDecodeDpbBitKhr = enum<VkFormatFeatureFlags> 0x04000000
             type VkImageLayout with
                  static member inline VideoDecodeDstKhr = enum<VkImageLayout> 1000024000
                  static member inline VideoDecodeSrcKhr = enum<VkImageLayout> 1000024001
                  static member inline VideoDecodeDpbKhr = enum<VkImageLayout> 1000024002
             type VkImageUsageFlags with
                  static member inline VideoDecodeDstBitKhr = enum<VkImageUsageFlags> 0x00000400
                  static member inline VideoDecodeSrcBitKhr = enum<VkImageUsageFlags> 0x00000800
                  static member inline VideoDecodeDpbBitKhr = enum<VkImageUsageFlags> 0x00001000
             type Vulkan13.VkPipelineStageFlags2 with
                  static member inline PipelineStage2VideoDecodeBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x04000000
             type VkQueueFlags with
                  static member inline VideoDecodeBitKhr = enum<VkQueueFlags> 0x00000020

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDecodeVideoKHRDel = delegate of VkCommandBuffer * nativeptr<VkVideoDecodeInfoKHR> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRVideoDecodeQueue")
                static let s_vkCmdDecodeVideoKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdDecodeVideoKHRDel> "vkCmdDecodeVideoKHR"
                static do Report.End(3) |> ignore
                static member vkCmdDecodeVideoKHR = s_vkCmdDecodeVideoKHRDel
            let vkCmdDecodeVideoKHR(commandBuffer : VkCommandBuffer, pDecodeInfo : nativeptr<VkVideoDecodeInfoKHR>) = Loader<unit>.vkCmdDecodeVideoKHR.Invoke(commandBuffer, pDecodeInfo)

        [<AutoOpen>]
        module ``KHRFormatFeatureFlags2 | Vulkan13`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkFormatFeatureFlags2 with
                      static member inline FormatFeature2VideoDecodeOutputBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x02000000
                      static member inline FormatFeature2VideoDecodeDpbBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x04000000


    module AMDGcnShader =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_gcn_shader"
        let Number = 26

    /// Deprecated by KHRDedicatedAllocation.
    module NVDedicatedAllocation =
        let Type = ExtensionType.Device
        let Name = "VK_NV_dedicated_allocation"
        let Number = 27

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDedicatedAllocationBufferCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public dedicatedAllocation : VkBool32

                new(pNext: nativeint, dedicatedAllocation: VkBool32) =
                    {
                        sType = 1000026001u
                        pNext = pNext
                        dedicatedAllocation = dedicatedAllocation
                    }

                new(dedicatedAllocation: VkBool32) =
                    VkDedicatedAllocationBufferCreateInfoNV(Unchecked.defaultof<nativeint>, dedicatedAllocation)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.dedicatedAllocation = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkDedicatedAllocationBufferCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "dedicatedAllocation = %A" x.dedicatedAllocation
                    ] |> sprintf "VkDedicatedAllocationBufferCreateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDedicatedAllocationImageCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public dedicatedAllocation : VkBool32

                new(pNext: nativeint, dedicatedAllocation: VkBool32) =
                    {
                        sType = 1000026000u
                        pNext = pNext
                        dedicatedAllocation = dedicatedAllocation
                    }

                new(dedicatedAllocation: VkBool32) =
                    VkDedicatedAllocationImageCreateInfoNV(Unchecked.defaultof<nativeint>, dedicatedAllocation)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.dedicatedAllocation = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkDedicatedAllocationImageCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "dedicatedAllocation = %A" x.dedicatedAllocation
                    ] |> sprintf "VkDedicatedAllocationImageCreateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDedicatedAllocationMemoryAllocateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public image : VkImage
                val mutable public buffer : VkBuffer

                new(pNext: nativeint, image: VkImage, buffer: VkBuffer) =
                    {
                        sType = 1000026002u
                        pNext = pNext
                        image = image
                        buffer = buffer
                    }

                new(image: VkImage, buffer: VkBuffer) =
                    VkDedicatedAllocationMemoryAllocateInfoNV(Unchecked.defaultof<nativeint>, image, buffer)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage> && x.buffer = Unchecked.defaultof<VkBuffer>

                static member Empty =
                    VkDedicatedAllocationMemoryAllocateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkBuffer>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "image = %A" x.image
                        sprintf "buffer = %A" x.buffer
                    ] |> sprintf "VkDedicatedAllocationMemoryAllocateInfoNV { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTTransformFeedback =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_transform_feedback"
        let Number = 29

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceTransformFeedbackFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public transformFeedback : VkBool32
                val mutable public geometryStreams : VkBool32

                new(pNext: nativeint, transformFeedback: VkBool32, geometryStreams: VkBool32) =
                    {
                        sType = 1000028000u
                        pNext = pNext
                        transformFeedback = transformFeedback
                        geometryStreams = geometryStreams
                    }

                new(transformFeedback: VkBool32, geometryStreams: VkBool32) =
                    VkPhysicalDeviceTransformFeedbackFeaturesEXT(Unchecked.defaultof<nativeint>, transformFeedback, geometryStreams)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.transformFeedback = Unchecked.defaultof<VkBool32> && x.geometryStreams = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceTransformFeedbackFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "transformFeedback = %A" x.transformFeedback
                        sprintf "geometryStreams = %A" x.geometryStreams
                    ] |> sprintf "VkPhysicalDeviceTransformFeedbackFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceTransformFeedbackPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxTransformFeedbackStreams : uint32
                val mutable public maxTransformFeedbackBuffers : uint32
                val mutable public maxTransformFeedbackBufferSize : VkDeviceSize
                val mutable public maxTransformFeedbackStreamDataSize : uint32
                val mutable public maxTransformFeedbackBufferDataSize : uint32
                val mutable public maxTransformFeedbackBufferDataStride : uint32
                val mutable public transformFeedbackQueries : VkBool32
                val mutable public transformFeedbackStreamsLinesTriangles : VkBool32
                val mutable public transformFeedbackRasterizationStreamSelect : VkBool32
                val mutable public transformFeedbackDraw : VkBool32

                new(pNext: nativeint, maxTransformFeedbackStreams: uint32, maxTransformFeedbackBuffers: uint32, maxTransformFeedbackBufferSize: VkDeviceSize, maxTransformFeedbackStreamDataSize: uint32, maxTransformFeedbackBufferDataSize: uint32, maxTransformFeedbackBufferDataStride: uint32, transformFeedbackQueries: VkBool32, transformFeedbackStreamsLinesTriangles: VkBool32, transformFeedbackRasterizationStreamSelect: VkBool32, transformFeedbackDraw: VkBool32) =
                    {
                        sType = 1000028001u
                        pNext = pNext
                        maxTransformFeedbackStreams = maxTransformFeedbackStreams
                        maxTransformFeedbackBuffers = maxTransformFeedbackBuffers
                        maxTransformFeedbackBufferSize = maxTransformFeedbackBufferSize
                        maxTransformFeedbackStreamDataSize = maxTransformFeedbackStreamDataSize
                        maxTransformFeedbackBufferDataSize = maxTransformFeedbackBufferDataSize
                        maxTransformFeedbackBufferDataStride = maxTransformFeedbackBufferDataStride
                        transformFeedbackQueries = transformFeedbackQueries
                        transformFeedbackStreamsLinesTriangles = transformFeedbackStreamsLinesTriangles
                        transformFeedbackRasterizationStreamSelect = transformFeedbackRasterizationStreamSelect
                        transformFeedbackDraw = transformFeedbackDraw
                    }

                new(maxTransformFeedbackStreams: uint32, maxTransformFeedbackBuffers: uint32, maxTransformFeedbackBufferSize: VkDeviceSize, maxTransformFeedbackStreamDataSize: uint32, maxTransformFeedbackBufferDataSize: uint32, maxTransformFeedbackBufferDataStride: uint32, transformFeedbackQueries: VkBool32, transformFeedbackStreamsLinesTriangles: VkBool32, transformFeedbackRasterizationStreamSelect: VkBool32, transformFeedbackDraw: VkBool32) =
                    VkPhysicalDeviceTransformFeedbackPropertiesEXT(Unchecked.defaultof<nativeint>, maxTransformFeedbackStreams, maxTransformFeedbackBuffers, maxTransformFeedbackBufferSize, maxTransformFeedbackStreamDataSize, maxTransformFeedbackBufferDataSize, maxTransformFeedbackBufferDataStride, transformFeedbackQueries, transformFeedbackStreamsLinesTriangles, transformFeedbackRasterizationStreamSelect, transformFeedbackDraw)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxTransformFeedbackStreams = Unchecked.defaultof<uint32> && x.maxTransformFeedbackBuffers = Unchecked.defaultof<uint32> && x.maxTransformFeedbackBufferSize = Unchecked.defaultof<VkDeviceSize> && x.maxTransformFeedbackStreamDataSize = Unchecked.defaultof<uint32> && x.maxTransformFeedbackBufferDataSize = Unchecked.defaultof<uint32> && x.maxTransformFeedbackBufferDataStride = Unchecked.defaultof<uint32> && x.transformFeedbackQueries = Unchecked.defaultof<VkBool32> && x.transformFeedbackStreamsLinesTriangles = Unchecked.defaultof<VkBool32> && x.transformFeedbackRasterizationStreamSelect = Unchecked.defaultof<VkBool32> && x.transformFeedbackDraw = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceTransformFeedbackPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxTransformFeedbackStreams = %A" x.maxTransformFeedbackStreams
                        sprintf "maxTransformFeedbackBuffers = %A" x.maxTransformFeedbackBuffers
                        sprintf "maxTransformFeedbackBufferSize = %A" x.maxTransformFeedbackBufferSize
                        sprintf "maxTransformFeedbackStreamDataSize = %A" x.maxTransformFeedbackStreamDataSize
                        sprintf "maxTransformFeedbackBufferDataSize = %A" x.maxTransformFeedbackBufferDataSize
                        sprintf "maxTransformFeedbackBufferDataStride = %A" x.maxTransformFeedbackBufferDataStride
                        sprintf "transformFeedbackQueries = %A" x.transformFeedbackQueries
                        sprintf "transformFeedbackStreamsLinesTriangles = %A" x.transformFeedbackStreamsLinesTriangles
                        sprintf "transformFeedbackRasterizationStreamSelect = %A" x.transformFeedbackRasterizationStreamSelect
                        sprintf "transformFeedbackDraw = %A" x.transformFeedbackDraw
                    ] |> sprintf "VkPhysicalDeviceTransformFeedbackPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineRasterizationStateStreamCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkPipelineRasterizationStateStreamCreateFlagsEXT
                val mutable public rasterizationStream : uint32

                new(pNext: nativeint, flags: VkPipelineRasterizationStateStreamCreateFlagsEXT, rasterizationStream: uint32) =
                    {
                        sType = 1000028002u
                        pNext = pNext
                        flags = flags
                        rasterizationStream = rasterizationStream
                    }

                new(flags: VkPipelineRasterizationStateStreamCreateFlagsEXT, rasterizationStream: uint32) =
                    VkPipelineRasterizationStateStreamCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, rasterizationStream)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineRasterizationStateStreamCreateFlagsEXT> && x.rasterizationStream = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPipelineRasterizationStateStreamCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineRasterizationStateStreamCreateFlagsEXT>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "rasterizationStream = %A" x.rasterizationStream
                    ] |> sprintf "VkPipelineRasterizationStateStreamCreateInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags with
                  static member inline TransformFeedbackWriteBitExt = enum<VkAccessFlags> 0x02000000
                  static member inline TransformFeedbackCounterReadBitExt = enum<VkAccessFlags> 0x04000000
                  static member inline TransformFeedbackCounterWriteBitExt = enum<VkAccessFlags> 0x08000000
             type VkBufferUsageFlags with
                  static member inline TransformFeedbackBufferBitExt = enum<VkBufferUsageFlags> 0x00000800
                  static member inline TransformFeedbackCounterBufferBitExt = enum<VkBufferUsageFlags> 0x00001000
             type VkPipelineStageFlags with
                  static member inline TransformFeedbackBitExt = enum<VkPipelineStageFlags> 0x01000000
             type VkQueryType with
                  static member inline TransformFeedbackStreamExt = enum<VkQueryType> 1000028004

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBindTransformFeedbackBuffersEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkBuffer> * nativeptr<VkDeviceSize> * nativeptr<VkDeviceSize> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBeginTransformFeedbackEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkBuffer> * nativeptr<VkDeviceSize> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdEndTransformFeedbackEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkBuffer> * nativeptr<VkDeviceSize> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBeginQueryIndexedEXTDel = delegate of VkCommandBuffer * VkQueryPool * uint32 * VkQueryControlFlags * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdEndQueryIndexedEXTDel = delegate of VkCommandBuffer * VkQueryPool * uint32 * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawIndirectByteCountEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTTransformFeedback")
                static let s_vkCmdBindTransformFeedbackBuffersEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBindTransformFeedbackBuffersEXTDel> "vkCmdBindTransformFeedbackBuffersEXT"
                static let s_vkCmdBeginTransformFeedbackEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginTransformFeedbackEXTDel> "vkCmdBeginTransformFeedbackEXT"
                static let s_vkCmdEndTransformFeedbackEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdEndTransformFeedbackEXTDel> "vkCmdEndTransformFeedbackEXT"
                static let s_vkCmdBeginQueryIndexedEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginQueryIndexedEXTDel> "vkCmdBeginQueryIndexedEXT"
                static let s_vkCmdEndQueryIndexedEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdEndQueryIndexedEXTDel> "vkCmdEndQueryIndexedEXT"
                static let s_vkCmdDrawIndirectByteCountEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawIndirectByteCountEXTDel> "vkCmdDrawIndirectByteCountEXT"
                static do Report.End(3) |> ignore
                static member vkCmdBindTransformFeedbackBuffersEXT = s_vkCmdBindTransformFeedbackBuffersEXTDel
                static member vkCmdBeginTransformFeedbackEXT = s_vkCmdBeginTransformFeedbackEXTDel
                static member vkCmdEndTransformFeedbackEXT = s_vkCmdEndTransformFeedbackEXTDel
                static member vkCmdBeginQueryIndexedEXT = s_vkCmdBeginQueryIndexedEXTDel
                static member vkCmdEndQueryIndexedEXT = s_vkCmdEndQueryIndexedEXTDel
                static member vkCmdDrawIndirectByteCountEXT = s_vkCmdDrawIndirectByteCountEXTDel
            let vkCmdBindTransformFeedbackBuffersEXT(commandBuffer : VkCommandBuffer, firstBinding : uint32, bindingCount : uint32, pBuffers : nativeptr<VkBuffer>, pOffsets : nativeptr<VkDeviceSize>, pSizes : nativeptr<VkDeviceSize>) = Loader<unit>.vkCmdBindTransformFeedbackBuffersEXT.Invoke(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes)
            let vkCmdBeginTransformFeedbackEXT(commandBuffer : VkCommandBuffer, firstCounterBuffer : uint32, counterBufferCount : uint32, pCounterBuffers : nativeptr<VkBuffer>, pCounterBufferOffsets : nativeptr<VkDeviceSize>) = Loader<unit>.vkCmdBeginTransformFeedbackEXT.Invoke(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets)
            let vkCmdEndTransformFeedbackEXT(commandBuffer : VkCommandBuffer, firstCounterBuffer : uint32, counterBufferCount : uint32, pCounterBuffers : nativeptr<VkBuffer>, pCounterBufferOffsets : nativeptr<VkDeviceSize>) = Loader<unit>.vkCmdEndTransformFeedbackEXT.Invoke(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets)
            let vkCmdBeginQueryIndexedEXT(commandBuffer : VkCommandBuffer, queryPool : VkQueryPool, query : uint32, flags : VkQueryControlFlags, index : uint32) = Loader<unit>.vkCmdBeginQueryIndexedEXT.Invoke(commandBuffer, queryPool, query, flags, index)
            let vkCmdEndQueryIndexedEXT(commandBuffer : VkCommandBuffer, queryPool : VkQueryPool, query : uint32, index : uint32) = Loader<unit>.vkCmdEndQueryIndexedEXT.Invoke(commandBuffer, queryPool, query, index)
            let vkCmdDrawIndirectByteCountEXT(commandBuffer : VkCommandBuffer, instanceCount : uint32, firstInstance : uint32, counterBuffer : VkBuffer, counterBufferOffset : VkDeviceSize, counterOffset : uint32, vertexStride : uint32) = Loader<unit>.vkCmdDrawIndirectByteCountEXT.Invoke(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride)

    module NVXBinaryImport =
        let Type = ExtensionType.Device
        let Name = "VK_NVX_binary_import"
        let Number = 30


        [<StructLayout(LayoutKind.Sequential)>]
        type VkCuModuleNVX =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkCuModuleNVX(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCuFunctionNVX =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkCuFunctionNVX(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCuFunctionCreateInfoNVX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _module : VkCuModuleNVX
                val mutable public pName : cstr

                new(pNext: nativeint, _module: VkCuModuleNVX, pName: cstr) =
                    {
                        sType = 1000029001u
                        pNext = pNext
                        _module = _module
                        pName = pName
                    }

                new(_module: VkCuModuleNVX, pName: cstr) =
                    VkCuFunctionCreateInfoNVX(Unchecked.defaultof<nativeint>, _module, pName)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._module = Unchecked.defaultof<VkCuModuleNVX> && x.pName = Unchecked.defaultof<cstr>

                static member Empty =
                    VkCuFunctionCreateInfoNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCuModuleNVX>, Unchecked.defaultof<cstr>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_module = %A" x._module
                        sprintf "pName = %A" x.pName
                    ] |> sprintf "VkCuFunctionCreateInfoNVX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCuLaunchInfoNVX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _function : VkCuFunctionNVX
                val mutable public gridDimX : uint32
                val mutable public gridDimY : uint32
                val mutable public gridDimZ : uint32
                val mutable public blockDimX : uint32
                val mutable public blockDimY : uint32
                val mutable public blockDimZ : uint32
                val mutable public sharedMemBytes : uint32
                val mutable public paramCount : uint64
                val mutable public pParams : nativeptr<nativeint>
                val mutable public extraCount : uint64
                val mutable public pExtras : nativeptr<nativeint>

                new(pNext: nativeint, _function: VkCuFunctionNVX, gridDimX: uint32, gridDimY: uint32, gridDimZ: uint32, blockDimX: uint32, blockDimY: uint32, blockDimZ: uint32, sharedMemBytes: uint32, paramCount: uint64, pParams: nativeptr<nativeint>, extraCount: uint64, pExtras: nativeptr<nativeint>) =
                    {
                        sType = 1000029002u
                        pNext = pNext
                        _function = _function
                        gridDimX = gridDimX
                        gridDimY = gridDimY
                        gridDimZ = gridDimZ
                        blockDimX = blockDimX
                        blockDimY = blockDimY
                        blockDimZ = blockDimZ
                        sharedMemBytes = sharedMemBytes
                        paramCount = paramCount
                        pParams = pParams
                        extraCount = extraCount
                        pExtras = pExtras
                    }

                new(_function: VkCuFunctionNVX, gridDimX: uint32, gridDimY: uint32, gridDimZ: uint32, blockDimX: uint32, blockDimY: uint32, blockDimZ: uint32, sharedMemBytes: uint32, paramCount: uint64, pParams: nativeptr<nativeint>, extraCount: uint64, pExtras: nativeptr<nativeint>) =
                    VkCuLaunchInfoNVX(Unchecked.defaultof<nativeint>, _function, gridDimX, gridDimY, gridDimZ, blockDimX, blockDimY, blockDimZ, sharedMemBytes, paramCount, pParams, extraCount, pExtras)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._function = Unchecked.defaultof<VkCuFunctionNVX> && x.gridDimX = Unchecked.defaultof<uint32> && x.gridDimY = Unchecked.defaultof<uint32> && x.gridDimZ = Unchecked.defaultof<uint32> && x.blockDimX = Unchecked.defaultof<uint32> && x.blockDimY = Unchecked.defaultof<uint32> && x.blockDimZ = Unchecked.defaultof<uint32> && x.sharedMemBytes = Unchecked.defaultof<uint32> && x.paramCount = Unchecked.defaultof<uint64> && x.pParams = Unchecked.defaultof<nativeptr<nativeint>> && x.extraCount = Unchecked.defaultof<uint64> && x.pExtras = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkCuLaunchInfoNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCuFunctionNVX>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_function = %A" x._function
                        sprintf "gridDimX = %A" x.gridDimX
                        sprintf "gridDimY = %A" x.gridDimY
                        sprintf "gridDimZ = %A" x.gridDimZ
                        sprintf "blockDimX = %A" x.blockDimX
                        sprintf "blockDimY = %A" x.blockDimY
                        sprintf "blockDimZ = %A" x.blockDimZ
                        sprintf "sharedMemBytes = %A" x.sharedMemBytes
                        sprintf "paramCount = %A" x.paramCount
                        sprintf "pParams = %A" x.pParams
                        sprintf "extraCount = %A" x.extraCount
                        sprintf "pExtras = %A" x.pExtras
                    ] |> sprintf "VkCuLaunchInfoNVX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCuModuleCreateInfoNVX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public dataSize : uint64
                val mutable public pData : nativeint

                new(pNext: nativeint, dataSize: uint64, pData: nativeint) =
                    {
                        sType = 1000029000u
                        pNext = pNext
                        dataSize = dataSize
                        pData = pData
                    }

                new(dataSize: uint64, pData: nativeint) =
                    VkCuModuleCreateInfoNVX(Unchecked.defaultof<nativeint>, dataSize, pData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.dataSize = Unchecked.defaultof<uint64> && x.pData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkCuModuleCreateInfoNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "dataSize = %A" x.dataSize
                        sprintf "pData = %A" x.pData
                    ] |> sprintf "VkCuModuleCreateInfoNVX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCuModuleTexturingModeCreateInfoNVX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public use64bitTexturing : VkBool32

                new(pNext: nativeint, use64bitTexturing: VkBool32) =
                    {
                        sType = 1000029004u
                        pNext = pNext
                        use64bitTexturing = use64bitTexturing
                    }

                new(use64bitTexturing: VkBool32) =
                    VkCuModuleTexturingModeCreateInfoNVX(Unchecked.defaultof<nativeint>, use64bitTexturing)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.use64bitTexturing = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkCuModuleTexturingModeCreateInfoNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "use64bitTexturing = %A" x.use64bitTexturing
                    ] |> sprintf "VkCuModuleTexturingModeCreateInfoNVX { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  static member inline CuModuleNvx = enum<VkObjectType> 1000029000
                  static member inline CuFunctionNvx = enum<VkObjectType> 1000029001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateCuModuleNVXDel = delegate of VkDevice * nativeptr<VkCuModuleCreateInfoNVX> * nativeptr<VkAllocationCallbacks> * nativeptr<VkCuModuleNVX> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateCuFunctionNVXDel = delegate of VkDevice * nativeptr<VkCuFunctionCreateInfoNVX> * nativeptr<VkAllocationCallbacks> * nativeptr<VkCuFunctionNVX> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyCuModuleNVXDel = delegate of VkDevice * VkCuModuleNVX * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyCuFunctionNVXDel = delegate of VkDevice * VkCuFunctionNVX * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCuLaunchKernelNVXDel = delegate of VkCommandBuffer * nativeptr<VkCuLaunchInfoNVX> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVXBinaryImport")
                static let s_vkCreateCuModuleNVXDel = VkRaw.vkImportInstanceDelegate<VkCreateCuModuleNVXDel> "vkCreateCuModuleNVX"
                static let s_vkCreateCuFunctionNVXDel = VkRaw.vkImportInstanceDelegate<VkCreateCuFunctionNVXDel> "vkCreateCuFunctionNVX"
                static let s_vkDestroyCuModuleNVXDel = VkRaw.vkImportInstanceDelegate<VkDestroyCuModuleNVXDel> "vkDestroyCuModuleNVX"
                static let s_vkDestroyCuFunctionNVXDel = VkRaw.vkImportInstanceDelegate<VkDestroyCuFunctionNVXDel> "vkDestroyCuFunctionNVX"
                static let s_vkCmdCuLaunchKernelNVXDel = VkRaw.vkImportInstanceDelegate<VkCmdCuLaunchKernelNVXDel> "vkCmdCuLaunchKernelNVX"
                static do Report.End(3) |> ignore
                static member vkCreateCuModuleNVX = s_vkCreateCuModuleNVXDel
                static member vkCreateCuFunctionNVX = s_vkCreateCuFunctionNVXDel
                static member vkDestroyCuModuleNVX = s_vkDestroyCuModuleNVXDel
                static member vkDestroyCuFunctionNVX = s_vkDestroyCuFunctionNVXDel
                static member vkCmdCuLaunchKernelNVX = s_vkCmdCuLaunchKernelNVXDel
            let vkCreateCuModuleNVX(device : VkDevice, pCreateInfo : nativeptr<VkCuModuleCreateInfoNVX>, pAllocator : nativeptr<VkAllocationCallbacks>, pModule : nativeptr<VkCuModuleNVX>) = Loader<unit>.vkCreateCuModuleNVX.Invoke(device, pCreateInfo, pAllocator, pModule)
            let vkCreateCuFunctionNVX(device : VkDevice, pCreateInfo : nativeptr<VkCuFunctionCreateInfoNVX>, pAllocator : nativeptr<VkAllocationCallbacks>, pFunction : nativeptr<VkCuFunctionNVX>) = Loader<unit>.vkCreateCuFunctionNVX.Invoke(device, pCreateInfo, pAllocator, pFunction)
            let vkDestroyCuModuleNVX(device : VkDevice, _module : VkCuModuleNVX, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyCuModuleNVX.Invoke(device, _module, pAllocator)
            let vkDestroyCuFunctionNVX(device : VkDevice, _function : VkCuFunctionNVX, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyCuFunctionNVX.Invoke(device, _function, pAllocator)
            let vkCmdCuLaunchKernelNVX(commandBuffer : VkCommandBuffer, pLaunchInfo : nativeptr<VkCuLaunchInfoNVX>) = Loader<unit>.vkCmdCuLaunchKernelNVX.Invoke(commandBuffer, pLaunchInfo)

        [<AutoOpen>]
        module ``EXTDebugReport`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type EXTDebugReport.VkDebugReportObjectTypeEXT with
                      static member inline CuModuleNvx = enum<EXTDebugReport.VkDebugReportObjectTypeEXT> 1000029000
                      static member inline CuFunctionNvx = enum<EXTDebugReport.VkDebugReportObjectTypeEXT> 1000029001


    module NVXImageViewHandle =
        let Type = ExtensionType.Device
        let Name = "VK_NVX_image_view_handle"
        let Number = 31

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageViewAddressPropertiesNVX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public deviceAddress : VkDeviceAddress
                val mutable public size : VkDeviceSize

                new(pNext: nativeint, deviceAddress: VkDeviceAddress, size: VkDeviceSize) =
                    {
                        sType = 1000030001u
                        pNext = pNext
                        deviceAddress = deviceAddress
                        size = size
                    }

                new(deviceAddress: VkDeviceAddress, size: VkDeviceSize) =
                    VkImageViewAddressPropertiesNVX(Unchecked.defaultof<nativeint>, deviceAddress, size)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.deviceAddress = Unchecked.defaultof<VkDeviceAddress> && x.size = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkImageViewAddressPropertiesNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "deviceAddress = %A" x.deviceAddress
                        sprintf "size = %A" x.size
                    ] |> sprintf "VkImageViewAddressPropertiesNVX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageViewHandleInfoNVX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageView : VkImageView
                val mutable public descriptorType : VkDescriptorType
                val mutable public sampler : VkSampler

                new(pNext: nativeint, imageView: VkImageView, descriptorType: VkDescriptorType, sampler: VkSampler) =
                    {
                        sType = 1000030000u
                        pNext = pNext
                        imageView = imageView
                        descriptorType = descriptorType
                        sampler = sampler
                    }

                new(imageView: VkImageView, descriptorType: VkDescriptorType, sampler: VkSampler) =
                    VkImageViewHandleInfoNVX(Unchecked.defaultof<nativeint>, imageView, descriptorType, sampler)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageView = Unchecked.defaultof<VkImageView> && x.descriptorType = Unchecked.defaultof<VkDescriptorType> && x.sampler = Unchecked.defaultof<VkSampler>

                static member Empty =
                    VkImageViewHandleInfoNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkDescriptorType>, Unchecked.defaultof<VkSampler>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageView = %A" x.imageView
                        sprintf "descriptorType = %A" x.descriptorType
                        sprintf "sampler = %A" x.sampler
                    ] |> sprintf "VkImageViewHandleInfoNVX { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetImageViewHandleNVXDel = delegate of VkDevice * nativeptr<VkImageViewHandleInfoNVX> -> uint32
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetImageViewHandle64NVXDel = delegate of VkDevice * nativeptr<VkImageViewHandleInfoNVX> -> uint64
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetImageViewAddressNVXDel = delegate of VkDevice * VkImageView * nativeptr<VkImageViewAddressPropertiesNVX> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVXImageViewHandle")
                static let s_vkGetImageViewHandleNVXDel = VkRaw.vkImportInstanceDelegate<VkGetImageViewHandleNVXDel> "vkGetImageViewHandleNVX"
                static let s_vkGetImageViewHandle64NVXDel = VkRaw.vkImportInstanceDelegate<VkGetImageViewHandle64NVXDel> "vkGetImageViewHandle64NVX"
                static let s_vkGetImageViewAddressNVXDel = VkRaw.vkImportInstanceDelegate<VkGetImageViewAddressNVXDel> "vkGetImageViewAddressNVX"
                static do Report.End(3) |> ignore
                static member vkGetImageViewHandleNVX = s_vkGetImageViewHandleNVXDel
                static member vkGetImageViewHandle64NVX = s_vkGetImageViewHandle64NVXDel
                static member vkGetImageViewAddressNVX = s_vkGetImageViewAddressNVXDel
            let vkGetImageViewHandleNVX(device : VkDevice, pInfo : nativeptr<VkImageViewHandleInfoNVX>) = Loader<unit>.vkGetImageViewHandleNVX.Invoke(device, pInfo)
            let vkGetImageViewHandle64NVX(device : VkDevice, pInfo : nativeptr<VkImageViewHandleInfoNVX>) = Loader<unit>.vkGetImageViewHandle64NVX.Invoke(device, pInfo)
            let vkGetImageViewAddressNVX(device : VkDevice, imageView : VkImageView, pProperties : nativeptr<VkImageViewAddressPropertiesNVX>) = Loader<unit>.vkGetImageViewAddressNVX.Invoke(device, imageView, pProperties)

    /// Promoted to KHRDrawIndirectCount.
    module AMDDrawIndirectCount =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_draw_indirect_count"
        let Number = 34

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawIndirectCountAMDDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawIndexedIndirectCountAMDDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading AMDDrawIndirectCount")
                static let s_vkCmdDrawIndirectCountAMDDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawIndirectCountAMDDel> "vkCmdDrawIndirectCountAMD"
                static let s_vkCmdDrawIndexedIndirectCountAMDDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawIndexedIndirectCountAMDDel> "vkCmdDrawIndexedIndirectCountAMD"
                static do Report.End(3) |> ignore
                static member vkCmdDrawIndirectCountAMD = s_vkCmdDrawIndirectCountAMDDel
                static member vkCmdDrawIndexedIndirectCountAMD = s_vkCmdDrawIndexedIndirectCountAMDDel
            let vkCmdDrawIndirectCountAMD(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, countBuffer : VkBuffer, countBufferOffset : VkDeviceSize, maxDrawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawIndirectCountAMD.Invoke(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
            let vkCmdDrawIndexedIndirectCountAMD(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, countBuffer : VkBuffer, countBufferOffset : VkDeviceSize, maxDrawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawIndexedIndirectCountAMD.Invoke(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)

    /// Incompatible with KHRMaintenance1.
    module AMDNegativeViewportHeight =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_negative_viewport_height"
        let Number = 36

    /// Deprecated by KHRShaderFloat16Int8.
    module AMDGpuShaderHalfFloat =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_gpu_shader_half_float"
        let Number = 37

    module AMDShaderBallot =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_shader_ballot"
        let Number = 38

    /// Requires KHRVideoEncodeQueue.
    module KHRVideoEncodeH264 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_video_encode_h264"
        let Number = 39

        [<Flags>]
        type VkVideoEncodeH264CapabilityFlagsKHR =
            | All = 511
            | None = 0
            | HrdComplianceBit = 0x00000001
            | PredictionWeightTableGeneratedBit = 0x00000002
            | RowUnalignedSliceBit = 0x00000004
            | DifferentSliceTypeBit = 0x00000008
            | BFrameInL0ListBit = 0x00000010
            | BFrameInL1ListBit = 0x00000020
            | PerPictureTypeMinMaxQpBit = 0x00000040
            | PerSliceConstantQpBit = 0x00000080
            | GeneratePrefixNaluBit = 0x00000100

        [<Flags>]
        type VkVideoEncodeH264StdFlagsKHR =
            | All = 1835007
            | None = 0
            | SeparateColorPlaneFlagSetBit = 0x00000001
            | QpprimeYZeroTransformBypassFlagSetBit = 0x00000002
            | ScalingMatrixPresentFlagSetBit = 0x00000004
            | ChromaQpIndexOffsetBit = 0x00000008
            | SecondChromaQpIndexOffsetBit = 0x00000010
            | PicInitQpMinus26Bit = 0x00000020
            | WeightedPredFlagSetBit = 0x00000040
            | WeightedBipredIdcExplicitBit = 0x00000080
            | WeightedBipredIdcImplicitBit = 0x00000100
            | Transform8x8ModeFlagSetBit = 0x00000200
            | DirectSpatialMvPredFlagUnsetBit = 0x00000400
            | EntropyCodingModeFlagUnsetBit = 0x00000800
            | EntropyCodingModeFlagSetBit = 0x00001000
            | Direct8x8InferenceFlagUnsetBit = 0x00002000
            | ConstrainedIntraPredFlagSetBit = 0x00004000
            | DeblockingFilterDisabledBit = 0x00008000
            | DeblockingFilterEnabledBit = 0x00010000
            | DeblockingFilterPartialBit = 0x00020000
            | SliceQpDeltaBit = 0x00080000
            | DifferentSliceQpDeltaBit = 0x00100000

        [<Flags>]
        type VkVideoEncodeH264RateControlFlagsKHR =
            | All = 31
            | None = 0
            | AttemptHrdComplianceBit = 0x00000001
            | RegularGopBit = 0x00000002
            | ReferencePatternFlatBit = 0x00000004
            | ReferencePatternDyadicBit = 0x00000008
            | TemporalLayerPatternDyadicBit = 0x00000010


        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264CapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoEncodeH264CapabilityFlagsKHR
                val mutable public maxLevelIdc : nativeint
                val mutable public maxSliceCount : uint32
                val mutable public maxPPictureL0ReferenceCount : uint32
                val mutable public maxBPictureL0ReferenceCount : uint32
                val mutable public maxL1ReferenceCount : uint32
                val mutable public maxTemporalLayerCount : uint32
                val mutable public expectDyadicTemporalLayerPattern : VkBool32
                val mutable public minQp : int32
                val mutable public maxQp : int32
                val mutable public prefersGopRemainingFrames : VkBool32
                val mutable public requiresGopRemainingFrames : VkBool32
                val mutable public stdSyntaxFlags : VkVideoEncodeH264StdFlagsKHR

                new(pNext: nativeint, flags: VkVideoEncodeH264CapabilityFlagsKHR, maxLevelIdc: nativeint, maxSliceCount: uint32, maxPPictureL0ReferenceCount: uint32, maxBPictureL0ReferenceCount: uint32, maxL1ReferenceCount: uint32, maxTemporalLayerCount: uint32, expectDyadicTemporalLayerPattern: VkBool32, minQp: int32, maxQp: int32, prefersGopRemainingFrames: VkBool32, requiresGopRemainingFrames: VkBool32, stdSyntaxFlags: VkVideoEncodeH264StdFlagsKHR) =
                    {
                        sType = 1000038000u
                        pNext = pNext
                        flags = flags
                        maxLevelIdc = maxLevelIdc
                        maxSliceCount = maxSliceCount
                        maxPPictureL0ReferenceCount = maxPPictureL0ReferenceCount
                        maxBPictureL0ReferenceCount = maxBPictureL0ReferenceCount
                        maxL1ReferenceCount = maxL1ReferenceCount
                        maxTemporalLayerCount = maxTemporalLayerCount
                        expectDyadicTemporalLayerPattern = expectDyadicTemporalLayerPattern
                        minQp = minQp
                        maxQp = maxQp
                        prefersGopRemainingFrames = prefersGopRemainingFrames
                        requiresGopRemainingFrames = requiresGopRemainingFrames
                        stdSyntaxFlags = stdSyntaxFlags
                    }

                new(flags: VkVideoEncodeH264CapabilityFlagsKHR, maxLevelIdc: nativeint, maxSliceCount: uint32, maxPPictureL0ReferenceCount: uint32, maxBPictureL0ReferenceCount: uint32, maxL1ReferenceCount: uint32, maxTemporalLayerCount: uint32, expectDyadicTemporalLayerPattern: VkBool32, minQp: int32, maxQp: int32, prefersGopRemainingFrames: VkBool32, requiresGopRemainingFrames: VkBool32, stdSyntaxFlags: VkVideoEncodeH264StdFlagsKHR) =
                    VkVideoEncodeH264CapabilitiesKHR(Unchecked.defaultof<nativeint>, flags, maxLevelIdc, maxSliceCount, maxPPictureL0ReferenceCount, maxBPictureL0ReferenceCount, maxL1ReferenceCount, maxTemporalLayerCount, expectDyadicTemporalLayerPattern, minQp, maxQp, prefersGopRemainingFrames, requiresGopRemainingFrames, stdSyntaxFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeH264CapabilityFlagsKHR> && x.maxLevelIdc = Unchecked.defaultof<nativeint> && x.maxSliceCount = Unchecked.defaultof<uint32> && x.maxPPictureL0ReferenceCount = Unchecked.defaultof<uint32> && x.maxBPictureL0ReferenceCount = Unchecked.defaultof<uint32> && x.maxL1ReferenceCount = Unchecked.defaultof<uint32> && x.maxTemporalLayerCount = Unchecked.defaultof<uint32> && x.expectDyadicTemporalLayerPattern = Unchecked.defaultof<VkBool32> && x.minQp = Unchecked.defaultof<int32> && x.maxQp = Unchecked.defaultof<int32> && x.prefersGopRemainingFrames = Unchecked.defaultof<VkBool32> && x.requiresGopRemainingFrames = Unchecked.defaultof<VkBool32> && x.stdSyntaxFlags = Unchecked.defaultof<VkVideoEncodeH264StdFlagsKHR>

                static member Empty =
                    VkVideoEncodeH264CapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeH264CapabilityFlagsKHR>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<int32>, Unchecked.defaultof<int32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH264StdFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "maxLevelIdc = %A" x.maxLevelIdc
                        sprintf "maxSliceCount = %A" x.maxSliceCount
                        sprintf "maxPPictureL0ReferenceCount = %A" x.maxPPictureL0ReferenceCount
                        sprintf "maxBPictureL0ReferenceCount = %A" x.maxBPictureL0ReferenceCount
                        sprintf "maxL1ReferenceCount = %A" x.maxL1ReferenceCount
                        sprintf "maxTemporalLayerCount = %A" x.maxTemporalLayerCount
                        sprintf "expectDyadicTemporalLayerPattern = %A" x.expectDyadicTemporalLayerPattern
                        sprintf "minQp = %A" x.minQp
                        sprintf "maxQp = %A" x.maxQp
                        sprintf "prefersGopRemainingFrames = %A" x.prefersGopRemainingFrames
                        sprintf "requiresGopRemainingFrames = %A" x.requiresGopRemainingFrames
                        sprintf "stdSyntaxFlags = %A" x.stdSyntaxFlags
                    ] |> sprintf "VkVideoEncodeH264CapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264DpbSlotInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pStdReferenceInfo : nativeptr<nativeint>

                new(pNext: nativeint, pStdReferenceInfo: nativeptr<nativeint>) =
                    {
                        sType = 1000038004u
                        pNext = pNext
                        pStdReferenceInfo = pStdReferenceInfo
                    }

                new(pStdReferenceInfo: nativeptr<nativeint>) =
                    VkVideoEncodeH264DpbSlotInfoKHR(Unchecked.defaultof<nativeint>, pStdReferenceInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pStdReferenceInfo = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoEncodeH264DpbSlotInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pStdReferenceInfo = %A" x.pStdReferenceInfo
                    ] |> sprintf "VkVideoEncodeH264DpbSlotInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264FrameSizeKHR =
            struct
                val mutable public frameISize : uint32
                val mutable public framePSize : uint32
                val mutable public frameBSize : uint32

                new(frameISize: uint32, framePSize: uint32, frameBSize: uint32) =
                    {
                        frameISize = frameISize
                        framePSize = framePSize
                        frameBSize = frameBSize
                    }

                member x.IsEmpty =
                    x.frameISize = Unchecked.defaultof<uint32> && x.framePSize = Unchecked.defaultof<uint32> && x.frameBSize = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeH264FrameSizeKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "frameISize = %A" x.frameISize
                        sprintf "framePSize = %A" x.framePSize
                        sprintf "frameBSize = %A" x.frameBSize
                    ] |> sprintf "VkVideoEncodeH264FrameSizeKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264GopRemainingFrameInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public useGopRemainingFrames : VkBool32
                val mutable public gopRemainingI : uint32
                val mutable public gopRemainingP : uint32
                val mutable public gopRemainingB : uint32

                new(pNext: nativeint, useGopRemainingFrames: VkBool32, gopRemainingI: uint32, gopRemainingP: uint32, gopRemainingB: uint32) =
                    {
                        sType = 1000038006u
                        pNext = pNext
                        useGopRemainingFrames = useGopRemainingFrames
                        gopRemainingI = gopRemainingI
                        gopRemainingP = gopRemainingP
                        gopRemainingB = gopRemainingB
                    }

                new(useGopRemainingFrames: VkBool32, gopRemainingI: uint32, gopRemainingP: uint32, gopRemainingB: uint32) =
                    VkVideoEncodeH264GopRemainingFrameInfoKHR(Unchecked.defaultof<nativeint>, useGopRemainingFrames, gopRemainingI, gopRemainingP, gopRemainingB)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.useGopRemainingFrames = Unchecked.defaultof<VkBool32> && x.gopRemainingI = Unchecked.defaultof<uint32> && x.gopRemainingP = Unchecked.defaultof<uint32> && x.gopRemainingB = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeH264GopRemainingFrameInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "useGopRemainingFrames = %A" x.useGopRemainingFrames
                        sprintf "gopRemainingI = %A" x.gopRemainingI
                        sprintf "gopRemainingP = %A" x.gopRemainingP
                        sprintf "gopRemainingB = %A" x.gopRemainingB
                    ] |> sprintf "VkVideoEncodeH264GopRemainingFrameInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264NaluSliceInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public constantQp : int32
                val mutable public pStdSliceHeader : nativeptr<nativeint>

                new(pNext: nativeint, constantQp: int32, pStdSliceHeader: nativeptr<nativeint>) =
                    {
                        sType = 1000038005u
                        pNext = pNext
                        constantQp = constantQp
                        pStdSliceHeader = pStdSliceHeader
                    }

                new(constantQp: int32, pStdSliceHeader: nativeptr<nativeint>) =
                    VkVideoEncodeH264NaluSliceInfoKHR(Unchecked.defaultof<nativeint>, constantQp, pStdSliceHeader)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.constantQp = Unchecked.defaultof<int32> && x.pStdSliceHeader = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoEncodeH264NaluSliceInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<int32>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "constantQp = %A" x.constantQp
                        sprintf "pStdSliceHeader = %A" x.pStdSliceHeader
                    ] |> sprintf "VkVideoEncodeH264NaluSliceInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264PictureInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public naluSliceEntryCount : uint32
                val mutable public pNaluSliceEntries : nativeptr<VkVideoEncodeH264NaluSliceInfoKHR>
                val mutable public pStdPictureInfo : nativeptr<nativeint>
                val mutable public generatePrefixNalu : VkBool32

                new(pNext: nativeint, naluSliceEntryCount: uint32, pNaluSliceEntries: nativeptr<VkVideoEncodeH264NaluSliceInfoKHR>, pStdPictureInfo: nativeptr<nativeint>, generatePrefixNalu: VkBool32) =
                    {
                        sType = 1000038003u
                        pNext = pNext
                        naluSliceEntryCount = naluSliceEntryCount
                        pNaluSliceEntries = pNaluSliceEntries
                        pStdPictureInfo = pStdPictureInfo
                        generatePrefixNalu = generatePrefixNalu
                    }

                new(naluSliceEntryCount: uint32, pNaluSliceEntries: nativeptr<VkVideoEncodeH264NaluSliceInfoKHR>, pStdPictureInfo: nativeptr<nativeint>, generatePrefixNalu: VkBool32) =
                    VkVideoEncodeH264PictureInfoKHR(Unchecked.defaultof<nativeint>, naluSliceEntryCount, pNaluSliceEntries, pStdPictureInfo, generatePrefixNalu)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.naluSliceEntryCount = Unchecked.defaultof<uint32> && x.pNaluSliceEntries = Unchecked.defaultof<nativeptr<VkVideoEncodeH264NaluSliceInfoKHR>> && x.pStdPictureInfo = Unchecked.defaultof<nativeptr<nativeint>> && x.generatePrefixNalu = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkVideoEncodeH264PictureInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoEncodeH264NaluSliceInfoKHR>>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "naluSliceEntryCount = %A" x.naluSliceEntryCount
                        sprintf "pNaluSliceEntries = %A" x.pNaluSliceEntries
                        sprintf "pStdPictureInfo = %A" x.pStdPictureInfo
                        sprintf "generatePrefixNalu = %A" x.generatePrefixNalu
                    ] |> sprintf "VkVideoEncodeH264PictureInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264ProfileInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stdProfileIdc : nativeint

                new(pNext: nativeint, stdProfileIdc: nativeint) =
                    {
                        sType = 1000038007u
                        pNext = pNext
                        stdProfileIdc = stdProfileIdc
                    }

                new(stdProfileIdc: nativeint) =
                    VkVideoEncodeH264ProfileInfoKHR(Unchecked.defaultof<nativeint>, stdProfileIdc)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stdProfileIdc = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkVideoEncodeH264ProfileInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stdProfileIdc = %A" x.stdProfileIdc
                    ] |> sprintf "VkVideoEncodeH264ProfileInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264QpKHR =
            struct
                val mutable public qpI : int32
                val mutable public qpP : int32
                val mutable public qpB : int32

                new(qpI: int32, qpP: int32, qpB: int32) =
                    {
                        qpI = qpI
                        qpP = qpP
                        qpB = qpB
                    }

                member x.IsEmpty =
                    x.qpI = Unchecked.defaultof<int32> && x.qpP = Unchecked.defaultof<int32> && x.qpB = Unchecked.defaultof<int32>

                static member Empty =
                    VkVideoEncodeH264QpKHR(Unchecked.defaultof<int32>, Unchecked.defaultof<int32>, Unchecked.defaultof<int32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "qpI = %A" x.qpI
                        sprintf "qpP = %A" x.qpP
                        sprintf "qpB = %A" x.qpB
                    ] |> sprintf "VkVideoEncodeH264QpKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264QualityLevelPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public preferredRateControlFlags : VkVideoEncodeH264RateControlFlagsKHR
                val mutable public preferredGopFrameCount : uint32
                val mutable public preferredIdrPeriod : uint32
                val mutable public preferredConsecutiveBFrameCount : uint32
                val mutable public preferredTemporalLayerCount : uint32
                val mutable public preferredConstantQp : VkVideoEncodeH264QpKHR
                val mutable public preferredMaxL0ReferenceCount : uint32
                val mutable public preferredMaxL1ReferenceCount : uint32
                val mutable public preferredStdEntropyCodingModeFlag : VkBool32

                new(pNext: nativeint, preferredRateControlFlags: VkVideoEncodeH264RateControlFlagsKHR, preferredGopFrameCount: uint32, preferredIdrPeriod: uint32, preferredConsecutiveBFrameCount: uint32, preferredTemporalLayerCount: uint32, preferredConstantQp: VkVideoEncodeH264QpKHR, preferredMaxL0ReferenceCount: uint32, preferredMaxL1ReferenceCount: uint32, preferredStdEntropyCodingModeFlag: VkBool32) =
                    {
                        sType = 1000038011u
                        pNext = pNext
                        preferredRateControlFlags = preferredRateControlFlags
                        preferredGopFrameCount = preferredGopFrameCount
                        preferredIdrPeriod = preferredIdrPeriod
                        preferredConsecutiveBFrameCount = preferredConsecutiveBFrameCount
                        preferredTemporalLayerCount = preferredTemporalLayerCount
                        preferredConstantQp = preferredConstantQp
                        preferredMaxL0ReferenceCount = preferredMaxL0ReferenceCount
                        preferredMaxL1ReferenceCount = preferredMaxL1ReferenceCount
                        preferredStdEntropyCodingModeFlag = preferredStdEntropyCodingModeFlag
                    }

                new(preferredRateControlFlags: VkVideoEncodeH264RateControlFlagsKHR, preferredGopFrameCount: uint32, preferredIdrPeriod: uint32, preferredConsecutiveBFrameCount: uint32, preferredTemporalLayerCount: uint32, preferredConstantQp: VkVideoEncodeH264QpKHR, preferredMaxL0ReferenceCount: uint32, preferredMaxL1ReferenceCount: uint32, preferredStdEntropyCodingModeFlag: VkBool32) =
                    VkVideoEncodeH264QualityLevelPropertiesKHR(Unchecked.defaultof<nativeint>, preferredRateControlFlags, preferredGopFrameCount, preferredIdrPeriod, preferredConsecutiveBFrameCount, preferredTemporalLayerCount, preferredConstantQp, preferredMaxL0ReferenceCount, preferredMaxL1ReferenceCount, preferredStdEntropyCodingModeFlag)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.preferredRateControlFlags = Unchecked.defaultof<VkVideoEncodeH264RateControlFlagsKHR> && x.preferredGopFrameCount = Unchecked.defaultof<uint32> && x.preferredIdrPeriod = Unchecked.defaultof<uint32> && x.preferredConsecutiveBFrameCount = Unchecked.defaultof<uint32> && x.preferredTemporalLayerCount = Unchecked.defaultof<uint32> && x.preferredConstantQp = Unchecked.defaultof<VkVideoEncodeH264QpKHR> && x.preferredMaxL0ReferenceCount = Unchecked.defaultof<uint32> && x.preferredMaxL1ReferenceCount = Unchecked.defaultof<uint32> && x.preferredStdEntropyCodingModeFlag = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkVideoEncodeH264QualityLevelPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeH264RateControlFlagsKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkVideoEncodeH264QpKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "preferredRateControlFlags = %A" x.preferredRateControlFlags
                        sprintf "preferredGopFrameCount = %A" x.preferredGopFrameCount
                        sprintf "preferredIdrPeriod = %A" x.preferredIdrPeriod
                        sprintf "preferredConsecutiveBFrameCount = %A" x.preferredConsecutiveBFrameCount
                        sprintf "preferredTemporalLayerCount = %A" x.preferredTemporalLayerCount
                        sprintf "preferredConstantQp = %A" x.preferredConstantQp
                        sprintf "preferredMaxL0ReferenceCount = %A" x.preferredMaxL0ReferenceCount
                        sprintf "preferredMaxL1ReferenceCount = %A" x.preferredMaxL1ReferenceCount
                        sprintf "preferredStdEntropyCodingModeFlag = %A" x.preferredStdEntropyCodingModeFlag
                    ] |> sprintf "VkVideoEncodeH264QualityLevelPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264RateControlInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoEncodeH264RateControlFlagsKHR
                val mutable public gopFrameCount : uint32
                val mutable public idrPeriod : uint32
                val mutable public consecutiveBFrameCount : uint32
                val mutable public temporalLayerCount : uint32

                new(pNext: nativeint, flags: VkVideoEncodeH264RateControlFlagsKHR, gopFrameCount: uint32, idrPeriod: uint32, consecutiveBFrameCount: uint32, temporalLayerCount: uint32) =
                    {
                        sType = 1000038008u
                        pNext = pNext
                        flags = flags
                        gopFrameCount = gopFrameCount
                        idrPeriod = idrPeriod
                        consecutiveBFrameCount = consecutiveBFrameCount
                        temporalLayerCount = temporalLayerCount
                    }

                new(flags: VkVideoEncodeH264RateControlFlagsKHR, gopFrameCount: uint32, idrPeriod: uint32, consecutiveBFrameCount: uint32, temporalLayerCount: uint32) =
                    VkVideoEncodeH264RateControlInfoKHR(Unchecked.defaultof<nativeint>, flags, gopFrameCount, idrPeriod, consecutiveBFrameCount, temporalLayerCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeH264RateControlFlagsKHR> && x.gopFrameCount = Unchecked.defaultof<uint32> && x.idrPeriod = Unchecked.defaultof<uint32> && x.consecutiveBFrameCount = Unchecked.defaultof<uint32> && x.temporalLayerCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeH264RateControlInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeH264RateControlFlagsKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "gopFrameCount = %A" x.gopFrameCount
                        sprintf "idrPeriod = %A" x.idrPeriod
                        sprintf "consecutiveBFrameCount = %A" x.consecutiveBFrameCount
                        sprintf "temporalLayerCount = %A" x.temporalLayerCount
                    ] |> sprintf "VkVideoEncodeH264RateControlInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264RateControlLayerInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public useMinQp : VkBool32
                val mutable public minQp : VkVideoEncodeH264QpKHR
                val mutable public useMaxQp : VkBool32
                val mutable public maxQp : VkVideoEncodeH264QpKHR
                val mutable public useMaxFrameSize : VkBool32
                val mutable public maxFrameSize : VkVideoEncodeH264FrameSizeKHR

                new(pNext: nativeint, useMinQp: VkBool32, minQp: VkVideoEncodeH264QpKHR, useMaxQp: VkBool32, maxQp: VkVideoEncodeH264QpKHR, useMaxFrameSize: VkBool32, maxFrameSize: VkVideoEncodeH264FrameSizeKHR) =
                    {
                        sType = 1000038009u
                        pNext = pNext
                        useMinQp = useMinQp
                        minQp = minQp
                        useMaxQp = useMaxQp
                        maxQp = maxQp
                        useMaxFrameSize = useMaxFrameSize
                        maxFrameSize = maxFrameSize
                    }

                new(useMinQp: VkBool32, minQp: VkVideoEncodeH264QpKHR, useMaxQp: VkBool32, maxQp: VkVideoEncodeH264QpKHR, useMaxFrameSize: VkBool32, maxFrameSize: VkVideoEncodeH264FrameSizeKHR) =
                    VkVideoEncodeH264RateControlLayerInfoKHR(Unchecked.defaultof<nativeint>, useMinQp, minQp, useMaxQp, maxQp, useMaxFrameSize, maxFrameSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.useMinQp = Unchecked.defaultof<VkBool32> && x.minQp = Unchecked.defaultof<VkVideoEncodeH264QpKHR> && x.useMaxQp = Unchecked.defaultof<VkBool32> && x.maxQp = Unchecked.defaultof<VkVideoEncodeH264QpKHR> && x.useMaxFrameSize = Unchecked.defaultof<VkBool32> && x.maxFrameSize = Unchecked.defaultof<VkVideoEncodeH264FrameSizeKHR>

                static member Empty =
                    VkVideoEncodeH264RateControlLayerInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH264QpKHR>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH264QpKHR>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH264FrameSizeKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "useMinQp = %A" x.useMinQp
                        sprintf "minQp = %A" x.minQp
                        sprintf "useMaxQp = %A" x.useMaxQp
                        sprintf "maxQp = %A" x.maxQp
                        sprintf "useMaxFrameSize = %A" x.useMaxFrameSize
                        sprintf "maxFrameSize = %A" x.maxFrameSize
                    ] |> sprintf "VkVideoEncodeH264RateControlLayerInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264SessionCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public useMaxLevelIdc : VkBool32
                val mutable public maxLevelIdc : nativeint

                new(pNext: nativeint, useMaxLevelIdc: VkBool32, maxLevelIdc: nativeint) =
                    {
                        sType = 1000038010u
                        pNext = pNext
                        useMaxLevelIdc = useMaxLevelIdc
                        maxLevelIdc = maxLevelIdc
                    }

                new(useMaxLevelIdc: VkBool32, maxLevelIdc: nativeint) =
                    VkVideoEncodeH264SessionCreateInfoKHR(Unchecked.defaultof<nativeint>, useMaxLevelIdc, maxLevelIdc)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.useMaxLevelIdc = Unchecked.defaultof<VkBool32> && x.maxLevelIdc = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkVideoEncodeH264SessionCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "useMaxLevelIdc = %A" x.useMaxLevelIdc
                        sprintf "maxLevelIdc = %A" x.maxLevelIdc
                    ] |> sprintf "VkVideoEncodeH264SessionCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264SessionParametersAddInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stdSPSCount : uint32
                val mutable public pStdSPSs : nativeptr<nativeint>
                val mutable public stdPPSCount : uint32
                val mutable public pStdPPSs : nativeptr<nativeint>

                new(pNext: nativeint, stdSPSCount: uint32, pStdSPSs: nativeptr<nativeint>, stdPPSCount: uint32, pStdPPSs: nativeptr<nativeint>) =
                    {
                        sType = 1000038002u
                        pNext = pNext
                        stdSPSCount = stdSPSCount
                        pStdSPSs = pStdSPSs
                        stdPPSCount = stdPPSCount
                        pStdPPSs = pStdPPSs
                    }

                new(stdSPSCount: uint32, pStdSPSs: nativeptr<nativeint>, stdPPSCount: uint32, pStdPPSs: nativeptr<nativeint>) =
                    VkVideoEncodeH264SessionParametersAddInfoKHR(Unchecked.defaultof<nativeint>, stdSPSCount, pStdSPSs, stdPPSCount, pStdPPSs)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stdSPSCount = Unchecked.defaultof<uint32> && x.pStdSPSs = Unchecked.defaultof<nativeptr<nativeint>> && x.stdPPSCount = Unchecked.defaultof<uint32> && x.pStdPPSs = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoEncodeH264SessionParametersAddInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stdSPSCount = %A" x.stdSPSCount
                        sprintf "pStdSPSs = %A" x.pStdSPSs
                        sprintf "stdPPSCount = %A" x.stdPPSCount
                        sprintf "pStdPPSs = %A" x.pStdPPSs
                    ] |> sprintf "VkVideoEncodeH264SessionParametersAddInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264SessionParametersCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxStdSPSCount : uint32
                val mutable public maxStdPPSCount : uint32
                val mutable public pParametersAddInfo : nativeptr<VkVideoEncodeH264SessionParametersAddInfoKHR>

                new(pNext: nativeint, maxStdSPSCount: uint32, maxStdPPSCount: uint32, pParametersAddInfo: nativeptr<VkVideoEncodeH264SessionParametersAddInfoKHR>) =
                    {
                        sType = 1000038001u
                        pNext = pNext
                        maxStdSPSCount = maxStdSPSCount
                        maxStdPPSCount = maxStdPPSCount
                        pParametersAddInfo = pParametersAddInfo
                    }

                new(maxStdSPSCount: uint32, maxStdPPSCount: uint32, pParametersAddInfo: nativeptr<VkVideoEncodeH264SessionParametersAddInfoKHR>) =
                    VkVideoEncodeH264SessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, maxStdSPSCount, maxStdPPSCount, pParametersAddInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxStdSPSCount = Unchecked.defaultof<uint32> && x.maxStdPPSCount = Unchecked.defaultof<uint32> && x.pParametersAddInfo = Unchecked.defaultof<nativeptr<VkVideoEncodeH264SessionParametersAddInfoKHR>>

                static member Empty =
                    VkVideoEncodeH264SessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoEncodeH264SessionParametersAddInfoKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxStdSPSCount = %A" x.maxStdSPSCount
                        sprintf "maxStdPPSCount = %A" x.maxStdPPSCount
                        sprintf "pParametersAddInfo = %A" x.pParametersAddInfo
                    ] |> sprintf "VkVideoEncodeH264SessionParametersCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264SessionParametersFeedbackInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public hasStdSPSOverrides : VkBool32
                val mutable public hasStdPPSOverrides : VkBool32

                new(pNext: nativeint, hasStdSPSOverrides: VkBool32, hasStdPPSOverrides: VkBool32) =
                    {
                        sType = 1000038013u
                        pNext = pNext
                        hasStdSPSOverrides = hasStdSPSOverrides
                        hasStdPPSOverrides = hasStdPPSOverrides
                    }

                new(hasStdSPSOverrides: VkBool32, hasStdPPSOverrides: VkBool32) =
                    VkVideoEncodeH264SessionParametersFeedbackInfoKHR(Unchecked.defaultof<nativeint>, hasStdSPSOverrides, hasStdPPSOverrides)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.hasStdSPSOverrides = Unchecked.defaultof<VkBool32> && x.hasStdPPSOverrides = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkVideoEncodeH264SessionParametersFeedbackInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "hasStdSPSOverrides = %A" x.hasStdSPSOverrides
                        sprintf "hasStdPPSOverrides = %A" x.hasStdPPSOverrides
                    ] |> sprintf "VkVideoEncodeH264SessionParametersFeedbackInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH264SessionParametersGetInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public writeStdSPS : VkBool32
                val mutable public writeStdPPS : VkBool32
                val mutable public stdSPSId : uint32
                val mutable public stdPPSId : uint32

                new(pNext: nativeint, writeStdSPS: VkBool32, writeStdPPS: VkBool32, stdSPSId: uint32, stdPPSId: uint32) =
                    {
                        sType = 1000038012u
                        pNext = pNext
                        writeStdSPS = writeStdSPS
                        writeStdPPS = writeStdPPS
                        stdSPSId = stdSPSId
                        stdPPSId = stdPPSId
                    }

                new(writeStdSPS: VkBool32, writeStdPPS: VkBool32, stdSPSId: uint32, stdPPSId: uint32) =
                    VkVideoEncodeH264SessionParametersGetInfoKHR(Unchecked.defaultof<nativeint>, writeStdSPS, writeStdPPS, stdSPSId, stdPPSId)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.writeStdSPS = Unchecked.defaultof<VkBool32> && x.writeStdPPS = Unchecked.defaultof<VkBool32> && x.stdSPSId = Unchecked.defaultof<uint32> && x.stdPPSId = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeH264SessionParametersGetInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "writeStdSPS = %A" x.writeStdSPS
                        sprintf "writeStdPPS = %A" x.writeStdPPS
                        sprintf "stdSPSId = %A" x.stdSPSId
                        sprintf "stdPPSId = %A" x.stdPPSId
                    ] |> sprintf "VkVideoEncodeH264SessionParametersGetInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRVideoQueue.VkVideoCodecOperationFlagsKHR with
                  static member inline EncodeH264Bit = enum<KHRVideoQueue.VkVideoCodecOperationFlagsKHR> 0x00010000


    /// Requires KHRVideoEncodeQueue.
    module KHRVideoEncodeH265 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_video_encode_h265"
        let Number = 40

        [<Flags>]
        type VkVideoEncodeH265CapabilityFlagsKHR =
            | All = 1023
            | None = 0
            | HrdComplianceBit = 0x00000001
            | PredictionWeightTableGeneratedBit = 0x00000002
            | RowUnalignedSliceSegmentBit = 0x00000004
            | DifferentSliceSegmentTypeBit = 0x00000008
            | BFrameInL0ListBit = 0x00000010
            | BFrameInL1ListBit = 0x00000020
            | PerPictureTypeMinMaxQpBit = 0x00000040
            | PerSliceSegmentConstantQpBit = 0x00000080
            | MultipleTilesPerSliceSegmentBit = 0x00000100
            | MultipleSliceSegmentsPerTileBit = 0x00000200

        [<Flags>]
        type VkVideoEncodeH265StdFlagsKHR =
            | All = 2097151
            | None = 0
            | SeparateColorPlaneFlagSetBit = 0x00000001
            | SampleAdaptiveOffsetEnabledFlagSetBit = 0x00000002
            | ScalingListDataPresentFlagSetBit = 0x00000004
            | PcmEnabledFlagSetBit = 0x00000008
            | SpsTemporalMvpEnabledFlagSetBit = 0x00000010
            | InitQpMinus26Bit = 0x00000020
            | WeightedPredFlagSetBit = 0x00000040
            | WeightedBipredFlagSetBit = 0x00000080
            | Log2ParallelMergeLevelMinus2Bit = 0x00000100
            | SignDataHidingEnabledFlagSetBit = 0x00000200
            | TransformSkipEnabledFlagSetBit = 0x00000400
            | TransformSkipEnabledFlagUnsetBit = 0x00000800
            | PpsSliceChromaQpOffsetsPresentFlagSetBit = 0x00001000
            | TransquantBypassEnabledFlagSetBit = 0x00002000
            | ConstrainedIntraPredFlagSetBit = 0x00004000
            | EntropyCodingSyncEnabledFlagSetBit = 0x00008000
            | DeblockingFilterOverrideEnabledFlagSetBit = 0x00010000
            | DependentSliceSegmentsEnabledFlagSetBit = 0x00020000
            | DependentSliceSegmentFlagSetBit = 0x00040000
            | SliceQpDeltaBit = 0x00080000
            | DifferentSliceQpDeltaBit = 0x00100000

        [<Flags>]
        type VkVideoEncodeH265CtbSizeFlagsKHR =
            | All = 7
            | None = 0
            | D16Bit = 0x00000001
            | D32Bit = 0x00000002
            | D64Bit = 0x00000004

        [<Flags>]
        type VkVideoEncodeH265TransformBlockSizeFlagsKHR =
            | All = 15
            | None = 0
            | D4Bit = 0x00000001
            | D8Bit = 0x00000002
            | D16Bit = 0x00000004
            | D32Bit = 0x00000008

        [<Flags>]
        type VkVideoEncodeH265RateControlFlagsKHR =
            | All = 31
            | None = 0
            | AttemptHrdComplianceBit = 0x00000001
            | RegularGopBit = 0x00000002
            | ReferencePatternFlatBit = 0x00000004
            | ReferencePatternDyadicBit = 0x00000008
            | TemporalSubLayerPatternDyadicBit = 0x00000010


        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265CapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoEncodeH265CapabilityFlagsKHR
                val mutable public maxLevelIdc : nativeint
                val mutable public maxSliceSegmentCount : uint32
                val mutable public maxTiles : VkExtent2D
                val mutable public ctbSizes : VkVideoEncodeH265CtbSizeFlagsKHR
                val mutable public transformBlockSizes : VkVideoEncodeH265TransformBlockSizeFlagsKHR
                val mutable public maxPPictureL0ReferenceCount : uint32
                val mutable public maxBPictureL0ReferenceCount : uint32
                val mutable public maxL1ReferenceCount : uint32
                val mutable public maxSubLayerCount : uint32
                val mutable public expectDyadicTemporalSubLayerPattern : VkBool32
                val mutable public minQp : int32
                val mutable public maxQp : int32
                val mutable public prefersGopRemainingFrames : VkBool32
                val mutable public requiresGopRemainingFrames : VkBool32
                val mutable public stdSyntaxFlags : VkVideoEncodeH265StdFlagsKHR

                new(pNext: nativeint, flags: VkVideoEncodeH265CapabilityFlagsKHR, maxLevelIdc: nativeint, maxSliceSegmentCount: uint32, maxTiles: VkExtent2D, ctbSizes: VkVideoEncodeH265CtbSizeFlagsKHR, transformBlockSizes: VkVideoEncodeH265TransformBlockSizeFlagsKHR, maxPPictureL0ReferenceCount: uint32, maxBPictureL0ReferenceCount: uint32, maxL1ReferenceCount: uint32, maxSubLayerCount: uint32, expectDyadicTemporalSubLayerPattern: VkBool32, minQp: int32, maxQp: int32, prefersGopRemainingFrames: VkBool32, requiresGopRemainingFrames: VkBool32, stdSyntaxFlags: VkVideoEncodeH265StdFlagsKHR) =
                    {
                        sType = 1000039000u
                        pNext = pNext
                        flags = flags
                        maxLevelIdc = maxLevelIdc
                        maxSliceSegmentCount = maxSliceSegmentCount
                        maxTiles = maxTiles
                        ctbSizes = ctbSizes
                        transformBlockSizes = transformBlockSizes
                        maxPPictureL0ReferenceCount = maxPPictureL0ReferenceCount
                        maxBPictureL0ReferenceCount = maxBPictureL0ReferenceCount
                        maxL1ReferenceCount = maxL1ReferenceCount
                        maxSubLayerCount = maxSubLayerCount
                        expectDyadicTemporalSubLayerPattern = expectDyadicTemporalSubLayerPattern
                        minQp = minQp
                        maxQp = maxQp
                        prefersGopRemainingFrames = prefersGopRemainingFrames
                        requiresGopRemainingFrames = requiresGopRemainingFrames
                        stdSyntaxFlags = stdSyntaxFlags
                    }

                new(flags: VkVideoEncodeH265CapabilityFlagsKHR, maxLevelIdc: nativeint, maxSliceSegmentCount: uint32, maxTiles: VkExtent2D, ctbSizes: VkVideoEncodeH265CtbSizeFlagsKHR, transformBlockSizes: VkVideoEncodeH265TransformBlockSizeFlagsKHR, maxPPictureL0ReferenceCount: uint32, maxBPictureL0ReferenceCount: uint32, maxL1ReferenceCount: uint32, maxSubLayerCount: uint32, expectDyadicTemporalSubLayerPattern: VkBool32, minQp: int32, maxQp: int32, prefersGopRemainingFrames: VkBool32, requiresGopRemainingFrames: VkBool32, stdSyntaxFlags: VkVideoEncodeH265StdFlagsKHR) =
                    VkVideoEncodeH265CapabilitiesKHR(Unchecked.defaultof<nativeint>, flags, maxLevelIdc, maxSliceSegmentCount, maxTiles, ctbSizes, transformBlockSizes, maxPPictureL0ReferenceCount, maxBPictureL0ReferenceCount, maxL1ReferenceCount, maxSubLayerCount, expectDyadicTemporalSubLayerPattern, minQp, maxQp, prefersGopRemainingFrames, requiresGopRemainingFrames, stdSyntaxFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeH265CapabilityFlagsKHR> && x.maxLevelIdc = Unchecked.defaultof<nativeint> && x.maxSliceSegmentCount = Unchecked.defaultof<uint32> && x.maxTiles = Unchecked.defaultof<VkExtent2D> && x.ctbSizes = Unchecked.defaultof<VkVideoEncodeH265CtbSizeFlagsKHR> && x.transformBlockSizes = Unchecked.defaultof<VkVideoEncodeH265TransformBlockSizeFlagsKHR> && x.maxPPictureL0ReferenceCount = Unchecked.defaultof<uint32> && x.maxBPictureL0ReferenceCount = Unchecked.defaultof<uint32> && x.maxL1ReferenceCount = Unchecked.defaultof<uint32> && x.maxSubLayerCount = Unchecked.defaultof<uint32> && x.expectDyadicTemporalSubLayerPattern = Unchecked.defaultof<VkBool32> && x.minQp = Unchecked.defaultof<int32> && x.maxQp = Unchecked.defaultof<int32> && x.prefersGopRemainingFrames = Unchecked.defaultof<VkBool32> && x.requiresGopRemainingFrames = Unchecked.defaultof<VkBool32> && x.stdSyntaxFlags = Unchecked.defaultof<VkVideoEncodeH265StdFlagsKHR>

                static member Empty =
                    VkVideoEncodeH265CapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeH265CapabilityFlagsKHR>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkVideoEncodeH265CtbSizeFlagsKHR>, Unchecked.defaultof<VkVideoEncodeH265TransformBlockSizeFlagsKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<int32>, Unchecked.defaultof<int32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH265StdFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "maxLevelIdc = %A" x.maxLevelIdc
                        sprintf "maxSliceSegmentCount = %A" x.maxSliceSegmentCount
                        sprintf "maxTiles = %A" x.maxTiles
                        sprintf "ctbSizes = %A" x.ctbSizes
                        sprintf "transformBlockSizes = %A" x.transformBlockSizes
                        sprintf "maxPPictureL0ReferenceCount = %A" x.maxPPictureL0ReferenceCount
                        sprintf "maxBPictureL0ReferenceCount = %A" x.maxBPictureL0ReferenceCount
                        sprintf "maxL1ReferenceCount = %A" x.maxL1ReferenceCount
                        sprintf "maxSubLayerCount = %A" x.maxSubLayerCount
                        sprintf "expectDyadicTemporalSubLayerPattern = %A" x.expectDyadicTemporalSubLayerPattern
                        sprintf "minQp = %A" x.minQp
                        sprintf "maxQp = %A" x.maxQp
                        sprintf "prefersGopRemainingFrames = %A" x.prefersGopRemainingFrames
                        sprintf "requiresGopRemainingFrames = %A" x.requiresGopRemainingFrames
                        sprintf "stdSyntaxFlags = %A" x.stdSyntaxFlags
                    ] |> sprintf "VkVideoEncodeH265CapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265DpbSlotInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pStdReferenceInfo : nativeptr<nativeint>

                new(pNext: nativeint, pStdReferenceInfo: nativeptr<nativeint>) =
                    {
                        sType = 1000039004u
                        pNext = pNext
                        pStdReferenceInfo = pStdReferenceInfo
                    }

                new(pStdReferenceInfo: nativeptr<nativeint>) =
                    VkVideoEncodeH265DpbSlotInfoKHR(Unchecked.defaultof<nativeint>, pStdReferenceInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pStdReferenceInfo = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoEncodeH265DpbSlotInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pStdReferenceInfo = %A" x.pStdReferenceInfo
                    ] |> sprintf "VkVideoEncodeH265DpbSlotInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265FrameSizeKHR =
            struct
                val mutable public frameISize : uint32
                val mutable public framePSize : uint32
                val mutable public frameBSize : uint32

                new(frameISize: uint32, framePSize: uint32, frameBSize: uint32) =
                    {
                        frameISize = frameISize
                        framePSize = framePSize
                        frameBSize = frameBSize
                    }

                member x.IsEmpty =
                    x.frameISize = Unchecked.defaultof<uint32> && x.framePSize = Unchecked.defaultof<uint32> && x.frameBSize = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeH265FrameSizeKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "frameISize = %A" x.frameISize
                        sprintf "framePSize = %A" x.framePSize
                        sprintf "frameBSize = %A" x.frameBSize
                    ] |> sprintf "VkVideoEncodeH265FrameSizeKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265GopRemainingFrameInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public useGopRemainingFrames : VkBool32
                val mutable public gopRemainingI : uint32
                val mutable public gopRemainingP : uint32
                val mutable public gopRemainingB : uint32

                new(pNext: nativeint, useGopRemainingFrames: VkBool32, gopRemainingI: uint32, gopRemainingP: uint32, gopRemainingB: uint32) =
                    {
                        sType = 1000039006u
                        pNext = pNext
                        useGopRemainingFrames = useGopRemainingFrames
                        gopRemainingI = gopRemainingI
                        gopRemainingP = gopRemainingP
                        gopRemainingB = gopRemainingB
                    }

                new(useGopRemainingFrames: VkBool32, gopRemainingI: uint32, gopRemainingP: uint32, gopRemainingB: uint32) =
                    VkVideoEncodeH265GopRemainingFrameInfoKHR(Unchecked.defaultof<nativeint>, useGopRemainingFrames, gopRemainingI, gopRemainingP, gopRemainingB)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.useGopRemainingFrames = Unchecked.defaultof<VkBool32> && x.gopRemainingI = Unchecked.defaultof<uint32> && x.gopRemainingP = Unchecked.defaultof<uint32> && x.gopRemainingB = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeH265GopRemainingFrameInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "useGopRemainingFrames = %A" x.useGopRemainingFrames
                        sprintf "gopRemainingI = %A" x.gopRemainingI
                        sprintf "gopRemainingP = %A" x.gopRemainingP
                        sprintf "gopRemainingB = %A" x.gopRemainingB
                    ] |> sprintf "VkVideoEncodeH265GopRemainingFrameInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265NaluSliceSegmentInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public constantQp : int32
                val mutable public pStdSliceSegmentHeader : nativeptr<nativeint>

                new(pNext: nativeint, constantQp: int32, pStdSliceSegmentHeader: nativeptr<nativeint>) =
                    {
                        sType = 1000039005u
                        pNext = pNext
                        constantQp = constantQp
                        pStdSliceSegmentHeader = pStdSliceSegmentHeader
                    }

                new(constantQp: int32, pStdSliceSegmentHeader: nativeptr<nativeint>) =
                    VkVideoEncodeH265NaluSliceSegmentInfoKHR(Unchecked.defaultof<nativeint>, constantQp, pStdSliceSegmentHeader)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.constantQp = Unchecked.defaultof<int32> && x.pStdSliceSegmentHeader = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoEncodeH265NaluSliceSegmentInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<int32>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "constantQp = %A" x.constantQp
                        sprintf "pStdSliceSegmentHeader = %A" x.pStdSliceSegmentHeader
                    ] |> sprintf "VkVideoEncodeH265NaluSliceSegmentInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265PictureInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public naluSliceSegmentEntryCount : uint32
                val mutable public pNaluSliceSegmentEntries : nativeptr<VkVideoEncodeH265NaluSliceSegmentInfoKHR>
                val mutable public pStdPictureInfo : nativeptr<nativeint>

                new(pNext: nativeint, naluSliceSegmentEntryCount: uint32, pNaluSliceSegmentEntries: nativeptr<VkVideoEncodeH265NaluSliceSegmentInfoKHR>, pStdPictureInfo: nativeptr<nativeint>) =
                    {
                        sType = 1000039003u
                        pNext = pNext
                        naluSliceSegmentEntryCount = naluSliceSegmentEntryCount
                        pNaluSliceSegmentEntries = pNaluSliceSegmentEntries
                        pStdPictureInfo = pStdPictureInfo
                    }

                new(naluSliceSegmentEntryCount: uint32, pNaluSliceSegmentEntries: nativeptr<VkVideoEncodeH265NaluSliceSegmentInfoKHR>, pStdPictureInfo: nativeptr<nativeint>) =
                    VkVideoEncodeH265PictureInfoKHR(Unchecked.defaultof<nativeint>, naluSliceSegmentEntryCount, pNaluSliceSegmentEntries, pStdPictureInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.naluSliceSegmentEntryCount = Unchecked.defaultof<uint32> && x.pNaluSliceSegmentEntries = Unchecked.defaultof<nativeptr<VkVideoEncodeH265NaluSliceSegmentInfoKHR>> && x.pStdPictureInfo = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoEncodeH265PictureInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoEncodeH265NaluSliceSegmentInfoKHR>>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "naluSliceSegmentEntryCount = %A" x.naluSliceSegmentEntryCount
                        sprintf "pNaluSliceSegmentEntries = %A" x.pNaluSliceSegmentEntries
                        sprintf "pStdPictureInfo = %A" x.pStdPictureInfo
                    ] |> sprintf "VkVideoEncodeH265PictureInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265ProfileInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stdProfileIdc : nativeint

                new(pNext: nativeint, stdProfileIdc: nativeint) =
                    {
                        sType = 1000039007u
                        pNext = pNext
                        stdProfileIdc = stdProfileIdc
                    }

                new(stdProfileIdc: nativeint) =
                    VkVideoEncodeH265ProfileInfoKHR(Unchecked.defaultof<nativeint>, stdProfileIdc)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stdProfileIdc = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkVideoEncodeH265ProfileInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stdProfileIdc = %A" x.stdProfileIdc
                    ] |> sprintf "VkVideoEncodeH265ProfileInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265QpKHR =
            struct
                val mutable public qpI : int32
                val mutable public qpP : int32
                val mutable public qpB : int32

                new(qpI: int32, qpP: int32, qpB: int32) =
                    {
                        qpI = qpI
                        qpP = qpP
                        qpB = qpB
                    }

                member x.IsEmpty =
                    x.qpI = Unchecked.defaultof<int32> && x.qpP = Unchecked.defaultof<int32> && x.qpB = Unchecked.defaultof<int32>

                static member Empty =
                    VkVideoEncodeH265QpKHR(Unchecked.defaultof<int32>, Unchecked.defaultof<int32>, Unchecked.defaultof<int32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "qpI = %A" x.qpI
                        sprintf "qpP = %A" x.qpP
                        sprintf "qpB = %A" x.qpB
                    ] |> sprintf "VkVideoEncodeH265QpKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265QualityLevelPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public preferredRateControlFlags : VkVideoEncodeH265RateControlFlagsKHR
                val mutable public preferredGopFrameCount : uint32
                val mutable public preferredIdrPeriod : uint32
                val mutable public preferredConsecutiveBFrameCount : uint32
                val mutable public preferredSubLayerCount : uint32
                val mutable public preferredConstantQp : VkVideoEncodeH265QpKHR
                val mutable public preferredMaxL0ReferenceCount : uint32
                val mutable public preferredMaxL1ReferenceCount : uint32

                new(pNext: nativeint, preferredRateControlFlags: VkVideoEncodeH265RateControlFlagsKHR, preferredGopFrameCount: uint32, preferredIdrPeriod: uint32, preferredConsecutiveBFrameCount: uint32, preferredSubLayerCount: uint32, preferredConstantQp: VkVideoEncodeH265QpKHR, preferredMaxL0ReferenceCount: uint32, preferredMaxL1ReferenceCount: uint32) =
                    {
                        sType = 1000039012u
                        pNext = pNext
                        preferredRateControlFlags = preferredRateControlFlags
                        preferredGopFrameCount = preferredGopFrameCount
                        preferredIdrPeriod = preferredIdrPeriod
                        preferredConsecutiveBFrameCount = preferredConsecutiveBFrameCount
                        preferredSubLayerCount = preferredSubLayerCount
                        preferredConstantQp = preferredConstantQp
                        preferredMaxL0ReferenceCount = preferredMaxL0ReferenceCount
                        preferredMaxL1ReferenceCount = preferredMaxL1ReferenceCount
                    }

                new(preferredRateControlFlags: VkVideoEncodeH265RateControlFlagsKHR, preferredGopFrameCount: uint32, preferredIdrPeriod: uint32, preferredConsecutiveBFrameCount: uint32, preferredSubLayerCount: uint32, preferredConstantQp: VkVideoEncodeH265QpKHR, preferredMaxL0ReferenceCount: uint32, preferredMaxL1ReferenceCount: uint32) =
                    VkVideoEncodeH265QualityLevelPropertiesKHR(Unchecked.defaultof<nativeint>, preferredRateControlFlags, preferredGopFrameCount, preferredIdrPeriod, preferredConsecutiveBFrameCount, preferredSubLayerCount, preferredConstantQp, preferredMaxL0ReferenceCount, preferredMaxL1ReferenceCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.preferredRateControlFlags = Unchecked.defaultof<VkVideoEncodeH265RateControlFlagsKHR> && x.preferredGopFrameCount = Unchecked.defaultof<uint32> && x.preferredIdrPeriod = Unchecked.defaultof<uint32> && x.preferredConsecutiveBFrameCount = Unchecked.defaultof<uint32> && x.preferredSubLayerCount = Unchecked.defaultof<uint32> && x.preferredConstantQp = Unchecked.defaultof<VkVideoEncodeH265QpKHR> && x.preferredMaxL0ReferenceCount = Unchecked.defaultof<uint32> && x.preferredMaxL1ReferenceCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeH265QualityLevelPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeH265RateControlFlagsKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkVideoEncodeH265QpKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "preferredRateControlFlags = %A" x.preferredRateControlFlags
                        sprintf "preferredGopFrameCount = %A" x.preferredGopFrameCount
                        sprintf "preferredIdrPeriod = %A" x.preferredIdrPeriod
                        sprintf "preferredConsecutiveBFrameCount = %A" x.preferredConsecutiveBFrameCount
                        sprintf "preferredSubLayerCount = %A" x.preferredSubLayerCount
                        sprintf "preferredConstantQp = %A" x.preferredConstantQp
                        sprintf "preferredMaxL0ReferenceCount = %A" x.preferredMaxL0ReferenceCount
                        sprintf "preferredMaxL1ReferenceCount = %A" x.preferredMaxL1ReferenceCount
                    ] |> sprintf "VkVideoEncodeH265QualityLevelPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265RateControlInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoEncodeH265RateControlFlagsKHR
                val mutable public gopFrameCount : uint32
                val mutable public idrPeriod : uint32
                val mutable public consecutiveBFrameCount : uint32
                val mutable public subLayerCount : uint32

                new(pNext: nativeint, flags: VkVideoEncodeH265RateControlFlagsKHR, gopFrameCount: uint32, idrPeriod: uint32, consecutiveBFrameCount: uint32, subLayerCount: uint32) =
                    {
                        sType = 1000039009u
                        pNext = pNext
                        flags = flags
                        gopFrameCount = gopFrameCount
                        idrPeriod = idrPeriod
                        consecutiveBFrameCount = consecutiveBFrameCount
                        subLayerCount = subLayerCount
                    }

                new(flags: VkVideoEncodeH265RateControlFlagsKHR, gopFrameCount: uint32, idrPeriod: uint32, consecutiveBFrameCount: uint32, subLayerCount: uint32) =
                    VkVideoEncodeH265RateControlInfoKHR(Unchecked.defaultof<nativeint>, flags, gopFrameCount, idrPeriod, consecutiveBFrameCount, subLayerCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeH265RateControlFlagsKHR> && x.gopFrameCount = Unchecked.defaultof<uint32> && x.idrPeriod = Unchecked.defaultof<uint32> && x.consecutiveBFrameCount = Unchecked.defaultof<uint32> && x.subLayerCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeH265RateControlInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeH265RateControlFlagsKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "gopFrameCount = %A" x.gopFrameCount
                        sprintf "idrPeriod = %A" x.idrPeriod
                        sprintf "consecutiveBFrameCount = %A" x.consecutiveBFrameCount
                        sprintf "subLayerCount = %A" x.subLayerCount
                    ] |> sprintf "VkVideoEncodeH265RateControlInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265RateControlLayerInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public useMinQp : VkBool32
                val mutable public minQp : VkVideoEncodeH265QpKHR
                val mutable public useMaxQp : VkBool32
                val mutable public maxQp : VkVideoEncodeH265QpKHR
                val mutable public useMaxFrameSize : VkBool32
                val mutable public maxFrameSize : VkVideoEncodeH265FrameSizeKHR

                new(pNext: nativeint, useMinQp: VkBool32, minQp: VkVideoEncodeH265QpKHR, useMaxQp: VkBool32, maxQp: VkVideoEncodeH265QpKHR, useMaxFrameSize: VkBool32, maxFrameSize: VkVideoEncodeH265FrameSizeKHR) =
                    {
                        sType = 1000039010u
                        pNext = pNext
                        useMinQp = useMinQp
                        minQp = minQp
                        useMaxQp = useMaxQp
                        maxQp = maxQp
                        useMaxFrameSize = useMaxFrameSize
                        maxFrameSize = maxFrameSize
                    }

                new(useMinQp: VkBool32, minQp: VkVideoEncodeH265QpKHR, useMaxQp: VkBool32, maxQp: VkVideoEncodeH265QpKHR, useMaxFrameSize: VkBool32, maxFrameSize: VkVideoEncodeH265FrameSizeKHR) =
                    VkVideoEncodeH265RateControlLayerInfoKHR(Unchecked.defaultof<nativeint>, useMinQp, minQp, useMaxQp, maxQp, useMaxFrameSize, maxFrameSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.useMinQp = Unchecked.defaultof<VkBool32> && x.minQp = Unchecked.defaultof<VkVideoEncodeH265QpKHR> && x.useMaxQp = Unchecked.defaultof<VkBool32> && x.maxQp = Unchecked.defaultof<VkVideoEncodeH265QpKHR> && x.useMaxFrameSize = Unchecked.defaultof<VkBool32> && x.maxFrameSize = Unchecked.defaultof<VkVideoEncodeH265FrameSizeKHR>

                static member Empty =
                    VkVideoEncodeH265RateControlLayerInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH265QpKHR>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH265QpKHR>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH265FrameSizeKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "useMinQp = %A" x.useMinQp
                        sprintf "minQp = %A" x.minQp
                        sprintf "useMaxQp = %A" x.useMaxQp
                        sprintf "maxQp = %A" x.maxQp
                        sprintf "useMaxFrameSize = %A" x.useMaxFrameSize
                        sprintf "maxFrameSize = %A" x.maxFrameSize
                    ] |> sprintf "VkVideoEncodeH265RateControlLayerInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265SessionCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public useMaxLevelIdc : VkBool32
                val mutable public maxLevelIdc : nativeint

                new(pNext: nativeint, useMaxLevelIdc: VkBool32, maxLevelIdc: nativeint) =
                    {
                        sType = 1000039011u
                        pNext = pNext
                        useMaxLevelIdc = useMaxLevelIdc
                        maxLevelIdc = maxLevelIdc
                    }

                new(useMaxLevelIdc: VkBool32, maxLevelIdc: nativeint) =
                    VkVideoEncodeH265SessionCreateInfoKHR(Unchecked.defaultof<nativeint>, useMaxLevelIdc, maxLevelIdc)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.useMaxLevelIdc = Unchecked.defaultof<VkBool32> && x.maxLevelIdc = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkVideoEncodeH265SessionCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "useMaxLevelIdc = %A" x.useMaxLevelIdc
                        sprintf "maxLevelIdc = %A" x.maxLevelIdc
                    ] |> sprintf "VkVideoEncodeH265SessionCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265SessionParametersAddInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stdVPSCount : uint32
                val mutable public pStdVPSs : nativeptr<nativeint>
                val mutable public stdSPSCount : uint32
                val mutable public pStdSPSs : nativeptr<nativeint>
                val mutable public stdPPSCount : uint32
                val mutable public pStdPPSs : nativeptr<nativeint>

                new(pNext: nativeint, stdVPSCount: uint32, pStdVPSs: nativeptr<nativeint>, stdSPSCount: uint32, pStdSPSs: nativeptr<nativeint>, stdPPSCount: uint32, pStdPPSs: nativeptr<nativeint>) =
                    {
                        sType = 1000039002u
                        pNext = pNext
                        stdVPSCount = stdVPSCount
                        pStdVPSs = pStdVPSs
                        stdSPSCount = stdSPSCount
                        pStdSPSs = pStdSPSs
                        stdPPSCount = stdPPSCount
                        pStdPPSs = pStdPPSs
                    }

                new(stdVPSCount: uint32, pStdVPSs: nativeptr<nativeint>, stdSPSCount: uint32, pStdSPSs: nativeptr<nativeint>, stdPPSCount: uint32, pStdPPSs: nativeptr<nativeint>) =
                    VkVideoEncodeH265SessionParametersAddInfoKHR(Unchecked.defaultof<nativeint>, stdVPSCount, pStdVPSs, stdSPSCount, pStdSPSs, stdPPSCount, pStdPPSs)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stdVPSCount = Unchecked.defaultof<uint32> && x.pStdVPSs = Unchecked.defaultof<nativeptr<nativeint>> && x.stdSPSCount = Unchecked.defaultof<uint32> && x.pStdSPSs = Unchecked.defaultof<nativeptr<nativeint>> && x.stdPPSCount = Unchecked.defaultof<uint32> && x.pStdPPSs = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoEncodeH265SessionParametersAddInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stdVPSCount = %A" x.stdVPSCount
                        sprintf "pStdVPSs = %A" x.pStdVPSs
                        sprintf "stdSPSCount = %A" x.stdSPSCount
                        sprintf "pStdSPSs = %A" x.pStdSPSs
                        sprintf "stdPPSCount = %A" x.stdPPSCount
                        sprintf "pStdPPSs = %A" x.pStdPPSs
                    ] |> sprintf "VkVideoEncodeH265SessionParametersAddInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265SessionParametersCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxStdVPSCount : uint32
                val mutable public maxStdSPSCount : uint32
                val mutable public maxStdPPSCount : uint32
                val mutable public pParametersAddInfo : nativeptr<VkVideoEncodeH265SessionParametersAddInfoKHR>

                new(pNext: nativeint, maxStdVPSCount: uint32, maxStdSPSCount: uint32, maxStdPPSCount: uint32, pParametersAddInfo: nativeptr<VkVideoEncodeH265SessionParametersAddInfoKHR>) =
                    {
                        sType = 1000039001u
                        pNext = pNext
                        maxStdVPSCount = maxStdVPSCount
                        maxStdSPSCount = maxStdSPSCount
                        maxStdPPSCount = maxStdPPSCount
                        pParametersAddInfo = pParametersAddInfo
                    }

                new(maxStdVPSCount: uint32, maxStdSPSCount: uint32, maxStdPPSCount: uint32, pParametersAddInfo: nativeptr<VkVideoEncodeH265SessionParametersAddInfoKHR>) =
                    VkVideoEncodeH265SessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, maxStdVPSCount, maxStdSPSCount, maxStdPPSCount, pParametersAddInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxStdVPSCount = Unchecked.defaultof<uint32> && x.maxStdSPSCount = Unchecked.defaultof<uint32> && x.maxStdPPSCount = Unchecked.defaultof<uint32> && x.pParametersAddInfo = Unchecked.defaultof<nativeptr<VkVideoEncodeH265SessionParametersAddInfoKHR>>

                static member Empty =
                    VkVideoEncodeH265SessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoEncodeH265SessionParametersAddInfoKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxStdVPSCount = %A" x.maxStdVPSCount
                        sprintf "maxStdSPSCount = %A" x.maxStdSPSCount
                        sprintf "maxStdPPSCount = %A" x.maxStdPPSCount
                        sprintf "pParametersAddInfo = %A" x.pParametersAddInfo
                    ] |> sprintf "VkVideoEncodeH265SessionParametersCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265SessionParametersFeedbackInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public hasStdVPSOverrides : VkBool32
                val mutable public hasStdSPSOverrides : VkBool32
                val mutable public hasStdPPSOverrides : VkBool32

                new(pNext: nativeint, hasStdVPSOverrides: VkBool32, hasStdSPSOverrides: VkBool32, hasStdPPSOverrides: VkBool32) =
                    {
                        sType = 1000039014u
                        pNext = pNext
                        hasStdVPSOverrides = hasStdVPSOverrides
                        hasStdSPSOverrides = hasStdSPSOverrides
                        hasStdPPSOverrides = hasStdPPSOverrides
                    }

                new(hasStdVPSOverrides: VkBool32, hasStdSPSOverrides: VkBool32, hasStdPPSOverrides: VkBool32) =
                    VkVideoEncodeH265SessionParametersFeedbackInfoKHR(Unchecked.defaultof<nativeint>, hasStdVPSOverrides, hasStdSPSOverrides, hasStdPPSOverrides)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.hasStdVPSOverrides = Unchecked.defaultof<VkBool32> && x.hasStdSPSOverrides = Unchecked.defaultof<VkBool32> && x.hasStdPPSOverrides = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkVideoEncodeH265SessionParametersFeedbackInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "hasStdVPSOverrides = %A" x.hasStdVPSOverrides
                        sprintf "hasStdSPSOverrides = %A" x.hasStdSPSOverrides
                        sprintf "hasStdPPSOverrides = %A" x.hasStdPPSOverrides
                    ] |> sprintf "VkVideoEncodeH265SessionParametersFeedbackInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeH265SessionParametersGetInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public writeStdVPS : VkBool32
                val mutable public writeStdSPS : VkBool32
                val mutable public writeStdPPS : VkBool32
                val mutable public stdVPSId : uint32
                val mutable public stdSPSId : uint32
                val mutable public stdPPSId : uint32

                new(pNext: nativeint, writeStdVPS: VkBool32, writeStdSPS: VkBool32, writeStdPPS: VkBool32, stdVPSId: uint32, stdSPSId: uint32, stdPPSId: uint32) =
                    {
                        sType = 1000039013u
                        pNext = pNext
                        writeStdVPS = writeStdVPS
                        writeStdSPS = writeStdSPS
                        writeStdPPS = writeStdPPS
                        stdVPSId = stdVPSId
                        stdSPSId = stdSPSId
                        stdPPSId = stdPPSId
                    }

                new(writeStdVPS: VkBool32, writeStdSPS: VkBool32, writeStdPPS: VkBool32, stdVPSId: uint32, stdSPSId: uint32, stdPPSId: uint32) =
                    VkVideoEncodeH265SessionParametersGetInfoKHR(Unchecked.defaultof<nativeint>, writeStdVPS, writeStdSPS, writeStdPPS, stdVPSId, stdSPSId, stdPPSId)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.writeStdVPS = Unchecked.defaultof<VkBool32> && x.writeStdSPS = Unchecked.defaultof<VkBool32> && x.writeStdPPS = Unchecked.defaultof<VkBool32> && x.stdVPSId = Unchecked.defaultof<uint32> && x.stdSPSId = Unchecked.defaultof<uint32> && x.stdPPSId = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeH265SessionParametersGetInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "writeStdVPS = %A" x.writeStdVPS
                        sprintf "writeStdSPS = %A" x.writeStdSPS
                        sprintf "writeStdPPS = %A" x.writeStdPPS
                        sprintf "stdVPSId = %A" x.stdVPSId
                        sprintf "stdSPSId = %A" x.stdSPSId
                        sprintf "stdPPSId = %A" x.stdPPSId
                    ] |> sprintf "VkVideoEncodeH265SessionParametersGetInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRVideoQueue.VkVideoCodecOperationFlagsKHR with
                  static member inline EncodeH265Bit = enum<KHRVideoQueue.VkVideoCodecOperationFlagsKHR> 0x00020000


    /// Requires KHRVideoDecodeQueue.
    module KHRVideoDecodeH264 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_video_decode_h264"
        let Number = 41

        [<Flags>]
        type VkVideoDecodeH264PictureLayoutFlagsKHR =
            | All = 3
            | Progressive = 0
            | InterlacedInterleavedLinesBit = 0x00000001
            | InterlacedSeparatePlanesBit = 0x00000002


        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeH264CapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxLevelIdc : nativeint
                val mutable public fieldOffsetGranularity : VkOffset2D

                new(pNext: nativeint, maxLevelIdc: nativeint, fieldOffsetGranularity: VkOffset2D) =
                    {
                        sType = 1000040000u
                        pNext = pNext
                        maxLevelIdc = maxLevelIdc
                        fieldOffsetGranularity = fieldOffsetGranularity
                    }

                new(maxLevelIdc: nativeint, fieldOffsetGranularity: VkOffset2D) =
                    VkVideoDecodeH264CapabilitiesKHR(Unchecked.defaultof<nativeint>, maxLevelIdc, fieldOffsetGranularity)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxLevelIdc = Unchecked.defaultof<nativeint> && x.fieldOffsetGranularity = Unchecked.defaultof<VkOffset2D>

                static member Empty =
                    VkVideoDecodeH264CapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkOffset2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxLevelIdc = %A" x.maxLevelIdc
                        sprintf "fieldOffsetGranularity = %A" x.fieldOffsetGranularity
                    ] |> sprintf "VkVideoDecodeH264CapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeH264DpbSlotInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pStdReferenceInfo : nativeptr<nativeint>

                new(pNext: nativeint, pStdReferenceInfo: nativeptr<nativeint>) =
                    {
                        sType = 1000040006u
                        pNext = pNext
                        pStdReferenceInfo = pStdReferenceInfo
                    }

                new(pStdReferenceInfo: nativeptr<nativeint>) =
                    VkVideoDecodeH264DpbSlotInfoKHR(Unchecked.defaultof<nativeint>, pStdReferenceInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pStdReferenceInfo = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoDecodeH264DpbSlotInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pStdReferenceInfo = %A" x.pStdReferenceInfo
                    ] |> sprintf "VkVideoDecodeH264DpbSlotInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeH264PictureInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pStdPictureInfo : nativeptr<nativeint>
                val mutable public sliceCount : uint32
                val mutable public pSliceOffsets : nativeptr<uint32>

                new(pNext: nativeint, pStdPictureInfo: nativeptr<nativeint>, sliceCount: uint32, pSliceOffsets: nativeptr<uint32>) =
                    {
                        sType = 1000040001u
                        pNext = pNext
                        pStdPictureInfo = pStdPictureInfo
                        sliceCount = sliceCount
                        pSliceOffsets = pSliceOffsets
                    }

                new(pStdPictureInfo: nativeptr<nativeint>, sliceCount: uint32, pSliceOffsets: nativeptr<uint32>) =
                    VkVideoDecodeH264PictureInfoKHR(Unchecked.defaultof<nativeint>, pStdPictureInfo, sliceCount, pSliceOffsets)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pStdPictureInfo = Unchecked.defaultof<nativeptr<nativeint>> && x.sliceCount = Unchecked.defaultof<uint32> && x.pSliceOffsets = Unchecked.defaultof<nativeptr<uint32>>

                static member Empty =
                    VkVideoDecodeH264PictureInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pStdPictureInfo = %A" x.pStdPictureInfo
                        sprintf "sliceCount = %A" x.sliceCount
                        sprintf "pSliceOffsets = %A" x.pSliceOffsets
                    ] |> sprintf "VkVideoDecodeH264PictureInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeH264ProfileInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stdProfileIdc : nativeint
                val mutable public pictureLayout : VkVideoDecodeH264PictureLayoutFlagsKHR

                new(pNext: nativeint, stdProfileIdc: nativeint, pictureLayout: VkVideoDecodeH264PictureLayoutFlagsKHR) =
                    {
                        sType = 1000040003u
                        pNext = pNext
                        stdProfileIdc = stdProfileIdc
                        pictureLayout = pictureLayout
                    }

                new(stdProfileIdc: nativeint, pictureLayout: VkVideoDecodeH264PictureLayoutFlagsKHR) =
                    VkVideoDecodeH264ProfileInfoKHR(Unchecked.defaultof<nativeint>, stdProfileIdc, pictureLayout)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stdProfileIdc = Unchecked.defaultof<nativeint> && x.pictureLayout = Unchecked.defaultof<VkVideoDecodeH264PictureLayoutFlagsKHR>

                static member Empty =
                    VkVideoDecodeH264ProfileInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoDecodeH264PictureLayoutFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stdProfileIdc = %A" x.stdProfileIdc
                        sprintf "pictureLayout = %A" x.pictureLayout
                    ] |> sprintf "VkVideoDecodeH264ProfileInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeH264SessionParametersAddInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stdSPSCount : uint32
                val mutable public pStdSPSs : nativeptr<nativeint>
                val mutable public stdPPSCount : uint32
                val mutable public pStdPPSs : nativeptr<nativeint>

                new(pNext: nativeint, stdSPSCount: uint32, pStdSPSs: nativeptr<nativeint>, stdPPSCount: uint32, pStdPPSs: nativeptr<nativeint>) =
                    {
                        sType = 1000040005u
                        pNext = pNext
                        stdSPSCount = stdSPSCount
                        pStdSPSs = pStdSPSs
                        stdPPSCount = stdPPSCount
                        pStdPPSs = pStdPPSs
                    }

                new(stdSPSCount: uint32, pStdSPSs: nativeptr<nativeint>, stdPPSCount: uint32, pStdPPSs: nativeptr<nativeint>) =
                    VkVideoDecodeH264SessionParametersAddInfoKHR(Unchecked.defaultof<nativeint>, stdSPSCount, pStdSPSs, stdPPSCount, pStdPPSs)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stdSPSCount = Unchecked.defaultof<uint32> && x.pStdSPSs = Unchecked.defaultof<nativeptr<nativeint>> && x.stdPPSCount = Unchecked.defaultof<uint32> && x.pStdPPSs = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoDecodeH264SessionParametersAddInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stdSPSCount = %A" x.stdSPSCount
                        sprintf "pStdSPSs = %A" x.pStdSPSs
                        sprintf "stdPPSCount = %A" x.stdPPSCount
                        sprintf "pStdPPSs = %A" x.pStdPPSs
                    ] |> sprintf "VkVideoDecodeH264SessionParametersAddInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeH264SessionParametersCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxStdSPSCount : uint32
                val mutable public maxStdPPSCount : uint32
                val mutable public pParametersAddInfo : nativeptr<VkVideoDecodeH264SessionParametersAddInfoKHR>

                new(pNext: nativeint, maxStdSPSCount: uint32, maxStdPPSCount: uint32, pParametersAddInfo: nativeptr<VkVideoDecodeH264SessionParametersAddInfoKHR>) =
                    {
                        sType = 1000040004u
                        pNext = pNext
                        maxStdSPSCount = maxStdSPSCount
                        maxStdPPSCount = maxStdPPSCount
                        pParametersAddInfo = pParametersAddInfo
                    }

                new(maxStdSPSCount: uint32, maxStdPPSCount: uint32, pParametersAddInfo: nativeptr<VkVideoDecodeH264SessionParametersAddInfoKHR>) =
                    VkVideoDecodeH264SessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, maxStdSPSCount, maxStdPPSCount, pParametersAddInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxStdSPSCount = Unchecked.defaultof<uint32> && x.maxStdPPSCount = Unchecked.defaultof<uint32> && x.pParametersAddInfo = Unchecked.defaultof<nativeptr<VkVideoDecodeH264SessionParametersAddInfoKHR>>

                static member Empty =
                    VkVideoDecodeH264SessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoDecodeH264SessionParametersAddInfoKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxStdSPSCount = %A" x.maxStdSPSCount
                        sprintf "maxStdPPSCount = %A" x.maxStdPPSCount
                        sprintf "pParametersAddInfo = %A" x.pParametersAddInfo
                    ] |> sprintf "VkVideoDecodeH264SessionParametersCreateInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRVideoQueue.VkVideoCodecOperationFlagsKHR with
                  static member inline DecodeH264Bit = enum<KHRVideoQueue.VkVideoCodecOperationFlagsKHR> 0x00000001


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module AMDTextureGatherBiasLod =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_texture_gather_bias_lod"
        let Number = 42

        [<StructLayout(LayoutKind.Sequential)>]
        type VkTextureLODGatherFormatPropertiesAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public supportsTextureGatherLODBiasAMD : VkBool32

                new(pNext: nativeint, supportsTextureGatherLODBiasAMD: VkBool32) =
                    {
                        sType = 1000041000u
                        pNext = pNext
                        supportsTextureGatherLODBiasAMD = supportsTextureGatherLODBiasAMD
                    }

                new(supportsTextureGatherLODBiasAMD: VkBool32) =
                    VkTextureLODGatherFormatPropertiesAMD(Unchecked.defaultof<nativeint>, supportsTextureGatherLODBiasAMD)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.supportsTextureGatherLODBiasAMD = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkTextureLODGatherFormatPropertiesAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "supportsTextureGatherLODBiasAMD = %A" x.supportsTextureGatherLODBiasAMD
                    ] |> sprintf "VkTextureLODGatherFormatPropertiesAMD { %s }"
            end



    module AMDShaderInfo =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_shader_info"
        let Number = 43

        type VkShaderInfoTypeAMD =
            | Statistics = 0
            | Binary = 1
            | Disassembly = 2


        [<StructLayout(LayoutKind.Sequential)>]
        type VkShaderResourceUsageAMD =
            struct
                val mutable public numUsedVgprs : uint32
                val mutable public numUsedSgprs : uint32
                val mutable public ldsSizePerLocalWorkGroup : uint32
                val mutable public ldsUsageSizeInBytes : uint64
                val mutable public scratchMemUsageInBytes : uint64

                new(numUsedVgprs: uint32, numUsedSgprs: uint32, ldsSizePerLocalWorkGroup: uint32, ldsUsageSizeInBytes: uint64, scratchMemUsageInBytes: uint64) =
                    {
                        numUsedVgprs = numUsedVgprs
                        numUsedSgprs = numUsedSgprs
                        ldsSizePerLocalWorkGroup = ldsSizePerLocalWorkGroup
                        ldsUsageSizeInBytes = ldsUsageSizeInBytes
                        scratchMemUsageInBytes = scratchMemUsageInBytes
                    }

                member x.IsEmpty =
                    x.numUsedVgprs = Unchecked.defaultof<uint32> && x.numUsedSgprs = Unchecked.defaultof<uint32> && x.ldsSizePerLocalWorkGroup = Unchecked.defaultof<uint32> && x.ldsUsageSizeInBytes = Unchecked.defaultof<uint64> && x.scratchMemUsageInBytes = Unchecked.defaultof<uint64>

                static member Empty =
                    VkShaderResourceUsageAMD(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "numUsedVgprs = %A" x.numUsedVgprs
                        sprintf "numUsedSgprs = %A" x.numUsedSgprs
                        sprintf "ldsSizePerLocalWorkGroup = %A" x.ldsSizePerLocalWorkGroup
                        sprintf "ldsUsageSizeInBytes = %A" x.ldsUsageSizeInBytes
                        sprintf "scratchMemUsageInBytes = %A" x.scratchMemUsageInBytes
                    ] |> sprintf "VkShaderResourceUsageAMD { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkShaderStatisticsInfoAMD =
            struct
                val mutable public shaderStageMask : VkShaderStageFlags
                val mutable public resourceUsage : VkShaderResourceUsageAMD
                val mutable public numPhysicalVgprs : uint32
                val mutable public numPhysicalSgprs : uint32
                val mutable public numAvailableVgprs : uint32
                val mutable public numAvailableSgprs : uint32
                val mutable public computeWorkGroupSize : V3ui

                new(shaderStageMask: VkShaderStageFlags, resourceUsage: VkShaderResourceUsageAMD, numPhysicalVgprs: uint32, numPhysicalSgprs: uint32, numAvailableVgprs: uint32, numAvailableSgprs: uint32, computeWorkGroupSize: V3ui) =
                    {
                        shaderStageMask = shaderStageMask
                        resourceUsage = resourceUsage
                        numPhysicalVgprs = numPhysicalVgprs
                        numPhysicalSgprs = numPhysicalSgprs
                        numAvailableVgprs = numAvailableVgprs
                        numAvailableSgprs = numAvailableSgprs
                        computeWorkGroupSize = computeWorkGroupSize
                    }

                member x.IsEmpty =
                    x.shaderStageMask = Unchecked.defaultof<VkShaderStageFlags> && x.resourceUsage = Unchecked.defaultof<VkShaderResourceUsageAMD> && x.numPhysicalVgprs = Unchecked.defaultof<uint32> && x.numPhysicalSgprs = Unchecked.defaultof<uint32> && x.numAvailableVgprs = Unchecked.defaultof<uint32> && x.numAvailableSgprs = Unchecked.defaultof<uint32> && x.computeWorkGroupSize = Unchecked.defaultof<V3ui>

                static member Empty =
                    VkShaderStatisticsInfoAMD(Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkShaderResourceUsageAMD>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "shaderStageMask = %A" x.shaderStageMask
                        sprintf "resourceUsage = %A" x.resourceUsage
                        sprintf "numPhysicalVgprs = %A" x.numPhysicalVgprs
                        sprintf "numPhysicalSgprs = %A" x.numPhysicalSgprs
                        sprintf "numAvailableVgprs = %A" x.numAvailableVgprs
                        sprintf "numAvailableSgprs = %A" x.numAvailableSgprs
                        sprintf "computeWorkGroupSize = %A" x.computeWorkGroupSize
                    ] |> sprintf "VkShaderStatisticsInfoAMD { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetShaderInfoAMDDel = delegate of VkDevice * VkPipeline * VkShaderStageFlags * VkShaderInfoTypeAMD * nativeptr<uint64> * nativeint -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading AMDShaderInfo")
                static let s_vkGetShaderInfoAMDDel = VkRaw.vkImportInstanceDelegate<VkGetShaderInfoAMDDel> "vkGetShaderInfoAMD"
                static do Report.End(3) |> ignore
                static member vkGetShaderInfoAMD = s_vkGetShaderInfoAMDDel
            let vkGetShaderInfoAMD(device : VkDevice, pipeline : VkPipeline, shaderStage : VkShaderStageFlags, infoType : VkShaderInfoTypeAMD, pInfoSize : nativeptr<uint64>, pInfo : nativeint) = Loader<unit>.vkGetShaderInfoAMD.Invoke(device, pipeline, shaderStage, infoType, pInfoSize, pInfo)

    /// Requires ((KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRDepthStencilResolve) | Vulkan12.
    /// Promoted to Vulkan13.
    module KHRDynamicRendering =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_dynamic_rendering"
        let Number = 45

        type VkRenderingFlagsKHR = Vulkan13.VkRenderingFlags

        type VkCommandBufferInheritanceRenderingInfoKHR = Vulkan13.VkCommandBufferInheritanceRenderingInfo

        type VkPhysicalDeviceDynamicRenderingFeaturesKHR = Vulkan13.VkPhysicalDeviceDynamicRenderingFeatures

        type VkPipelineRenderingCreateInfoKHR = Vulkan13.VkPipelineRenderingCreateInfo

        type VkRenderingAttachmentInfoKHR = Vulkan13.VkRenderingAttachmentInfo

        type VkRenderingInfoKHR = Vulkan13.VkRenderingInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkAttachmentStoreOp with
                  static member inline NoneKhr = enum<VkAttachmentStoreOp> 1000301000
             type Vulkan13.VkRenderingFlags with
                  static member inline ContentsSecondaryCommandBuffersBitKhr = enum<Vulkan13.VkRenderingFlags> 0x00000001
                  static member inline SuspendingBitKhr = enum<Vulkan13.VkRenderingFlags> 0x00000002
                  static member inline ResumingBitKhr = enum<Vulkan13.VkRenderingFlags> 0x00000004

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBeginRenderingKHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan13.VkRenderingInfo> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdEndRenderingKHRDel = delegate of VkCommandBuffer -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRDynamicRendering")
                static let s_vkCmdBeginRenderingKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginRenderingKHRDel> "vkCmdBeginRenderingKHR"
                static let s_vkCmdEndRenderingKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdEndRenderingKHRDel> "vkCmdEndRenderingKHR"
                static do Report.End(3) |> ignore
                static member vkCmdBeginRenderingKHR = s_vkCmdBeginRenderingKHRDel
                static member vkCmdEndRenderingKHR = s_vkCmdEndRenderingKHRDel
            let vkCmdBeginRenderingKHR(commandBuffer : VkCommandBuffer, pRenderingInfo : nativeptr<Vulkan13.VkRenderingInfo>) = Loader<unit>.vkCmdBeginRenderingKHR.Invoke(commandBuffer, pRenderingInfo)
            let vkCmdEndRenderingKHR(commandBuffer : VkCommandBuffer) = Loader<unit>.vkCmdEndRenderingKHR.Invoke(commandBuffer)

    module AMDShaderImageLoadStoreLod =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_shader_image_load_store_lod"
        let Number = 47

    /// Requires KHRSurface.
    module GGPStreamDescriptorSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_GGP_stream_descriptor_surface"
        let Number = 50

        [<StructLayout(LayoutKind.Sequential)>]
        type VkStreamDescriptorSurfaceCreateInfoGGP =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkStreamDescriptorSurfaceCreateFlagsGGP
                val mutable public streamDescriptor : nativeint

                new(pNext: nativeint, flags: VkStreamDescriptorSurfaceCreateFlagsGGP, streamDescriptor: nativeint) =
                    {
                        sType = 1000049000u
                        pNext = pNext
                        flags = flags
                        streamDescriptor = streamDescriptor
                    }

                new(flags: VkStreamDescriptorSurfaceCreateFlagsGGP, streamDescriptor: nativeint) =
                    VkStreamDescriptorSurfaceCreateInfoGGP(Unchecked.defaultof<nativeint>, flags, streamDescriptor)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkStreamDescriptorSurfaceCreateFlagsGGP> && x.streamDescriptor = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkStreamDescriptorSurfaceCreateInfoGGP(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkStreamDescriptorSurfaceCreateFlagsGGP>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "streamDescriptor = %A" x.streamDescriptor
                    ] |> sprintf "VkStreamDescriptorSurfaceCreateInfoGGP { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateStreamDescriptorSurfaceGGPDel = delegate of VkInstance * nativeptr<VkStreamDescriptorSurfaceCreateInfoGGP> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading GGPStreamDescriptorSurface")
                static let s_vkCreateStreamDescriptorSurfaceGGPDel = VkRaw.vkImportInstanceDelegate<VkCreateStreamDescriptorSurfaceGGPDel> "vkCreateStreamDescriptorSurfaceGGP"
                static do Report.End(3) |> ignore
                static member vkCreateStreamDescriptorSurfaceGGP = s_vkCreateStreamDescriptorSurfaceGGPDel
            let vkCreateStreamDescriptorSurfaceGGP(instance : VkInstance, pCreateInfo : nativeptr<VkStreamDescriptorSurfaceCreateInfoGGP>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateStreamDescriptorSurfaceGGP.Invoke(instance, pCreateInfo, pAllocator, pSurface)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module NVCornerSampledImage =
        let Type = ExtensionType.Device
        let Name = "VK_NV_corner_sampled_image"
        let Number = 51

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCornerSampledImageFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cornerSampledImage : VkBool32

                new(pNext: nativeint, cornerSampledImage: VkBool32) =
                    {
                        sType = 1000050000u
                        pNext = pNext
                        cornerSampledImage = cornerSampledImage
                    }

                new(cornerSampledImage: VkBool32) =
                    VkPhysicalDeviceCornerSampledImageFeaturesNV(Unchecked.defaultof<nativeint>, cornerSampledImage)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cornerSampledImage = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCornerSampledImageFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cornerSampledImage = %A" x.cornerSampledImage
                    ] |> sprintf "VkPhysicalDeviceCornerSampledImageFeaturesNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageCreateFlags with
                  static member inline CornerSampledBitNv = enum<VkImageCreateFlags> 0x00002000


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan11.
    module KHRMultiview =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_multiview"
        let Number = 54

        type VkPhysicalDeviceMultiviewFeaturesKHR = Vulkan11.VkPhysicalDeviceMultiviewFeatures

        type VkPhysicalDeviceMultiviewPropertiesKHR = Vulkan11.VkPhysicalDeviceMultiviewProperties

        type VkRenderPassMultiviewCreateInfoKHR = Vulkan11.VkRenderPassMultiviewCreateInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkDependencyFlags with
                  static member inline ViewLocalBitKhr = enum<VkDependencyFlags> 0x00000002


    /// Deprecated.
    module IMGFormatPvrtc =
        let Type = ExtensionType.Device
        let Name = "VK_IMG_format_pvrtc"
        let Number = 55

        [<AutoOpen>]
        module EnumExtensions =
             type VkFormat with
                  static member inline Pvrtc12bppUnormBlockImg = enum<VkFormat> 1000054000
                  static member inline Pvrtc14bppUnormBlockImg = enum<VkFormat> 1000054001
                  static member inline Pvrtc22bppUnormBlockImg = enum<VkFormat> 1000054002
                  static member inline Pvrtc24bppUnormBlockImg = enum<VkFormat> 1000054003
                  static member inline Pvrtc12bppSrgbBlockImg = enum<VkFormat> 1000054004
                  static member inline Pvrtc14bppSrgbBlockImg = enum<VkFormat> 1000054005
                  static member inline Pvrtc22bppSrgbBlockImg = enum<VkFormat> 1000054006
                  static member inline Pvrtc24bppSrgbBlockImg = enum<VkFormat> 1000054007


    /// Deprecated by KHRExternalMemoryCapabilities.
    module NVExternalMemoryCapabilities =
        let Type = ExtensionType.Instance
        let Name = "VK_NV_external_memory_capabilities"
        let Number = 56

        [<Flags>]
        type VkExternalMemoryHandleTypeFlagsNV =
            | All = 15
            | None = 0
            | OpaqueWin32Bit = 0x00000001
            | OpaqueWin32KmtBit = 0x00000002
            | D3d11ImageBit = 0x00000004
            | D3d11ImageKmtBit = 0x00000008

        [<Flags>]
        type VkExternalMemoryFeatureFlagsNV =
            | All = 7
            | None = 0
            | DedicatedOnlyBit = 0x00000001
            | ExportableBit = 0x00000002
            | ImportableBit = 0x00000004


        [<StructLayout(LayoutKind.Sequential)>]
        type VkExternalImageFormatPropertiesNV =
            struct
                val mutable public imageFormatProperties : VkImageFormatProperties
                val mutable public externalMemoryFeatures : VkExternalMemoryFeatureFlagsNV
                val mutable public exportFromImportedHandleTypes : VkExternalMemoryHandleTypeFlagsNV
                val mutable public compatibleHandleTypes : VkExternalMemoryHandleTypeFlagsNV

                new(imageFormatProperties: VkImageFormatProperties, externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV, exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV, compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV) =
                    {
                        imageFormatProperties = imageFormatProperties
                        externalMemoryFeatures = externalMemoryFeatures
                        exportFromImportedHandleTypes = exportFromImportedHandleTypes
                        compatibleHandleTypes = compatibleHandleTypes
                    }

                member x.IsEmpty =
                    x.imageFormatProperties = Unchecked.defaultof<VkImageFormatProperties> && x.externalMemoryFeatures = Unchecked.defaultof<VkExternalMemoryFeatureFlagsNV> && x.exportFromImportedHandleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV> && x.compatibleHandleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV>

                static member Empty =
                    VkExternalImageFormatPropertiesNV(Unchecked.defaultof<VkImageFormatProperties>, Unchecked.defaultof<VkExternalMemoryFeatureFlagsNV>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "imageFormatProperties = %A" x.imageFormatProperties
                        sprintf "externalMemoryFeatures = %A" x.externalMemoryFeatures
                        sprintf "exportFromImportedHandleTypes = %A" x.exportFromImportedHandleTypes
                        sprintf "compatibleHandleTypes = %A" x.compatibleHandleTypes
                    ] |> sprintf "VkExternalImageFormatPropertiesNV { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceExternalImageFormatPropertiesNVDel = delegate of VkPhysicalDevice * VkFormat * VkImageType * VkImageTiling * VkImageUsageFlags * VkImageCreateFlags * VkExternalMemoryHandleTypeFlagsNV * nativeptr<VkExternalImageFormatPropertiesNV> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVExternalMemoryCapabilities")
                static let s_vkGetPhysicalDeviceExternalImageFormatPropertiesNVDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceExternalImageFormatPropertiesNVDel> "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceExternalImageFormatPropertiesNV = s_vkGetPhysicalDeviceExternalImageFormatPropertiesNVDel
            let vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice : VkPhysicalDevice, format : VkFormat, _type : VkImageType, tiling : VkImageTiling, usage : VkImageUsageFlags, flags : VkImageCreateFlags, externalHandleType : VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties : nativeptr<VkExternalImageFormatPropertiesNV>) = Loader<unit>.vkGetPhysicalDeviceExternalImageFormatPropertiesNV.Invoke(physicalDevice, format, _type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties)

    /// Requires NVExternalMemoryCapabilities.
    /// Deprecated by KHRExternalMemory.
    module NVExternalMemory =
        let Type = ExtensionType.Device
        let Name = "VK_NV_external_memory"
        let Number = 57

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportMemoryAllocateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public handleTypes : NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV

                new(pNext: nativeint, handleTypes: NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV) =
                    {
                        sType = 1000056001u
                        pNext = pNext
                        handleTypes = handleTypes
                    }

                new(handleTypes: NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV) =
                    VkExportMemoryAllocateInfoNV(Unchecked.defaultof<nativeint>, handleTypes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV>

                static member Empty =
                    VkExportMemoryAllocateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "handleTypes = %A" x.handleTypes
                    ] |> sprintf "VkExportMemoryAllocateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExternalMemoryImageCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public handleTypes : NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV

                new(pNext: nativeint, handleTypes: NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV) =
                    {
                        sType = 1000056000u
                        pNext = pNext
                        handleTypes = handleTypes
                    }

                new(handleTypes: NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV) =
                    VkExternalMemoryImageCreateInfoNV(Unchecked.defaultof<nativeint>, handleTypes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV>

                static member Empty =
                    VkExternalMemoryImageCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "handleTypes = %A" x.handleTypes
                    ] |> sprintf "VkExternalMemoryImageCreateInfoNV { %s }"
            end



    /// Requires NVExternalMemory.
    /// Deprecated by KHRExternalMemoryWin32.
    module NVExternalMemoryWin32 =
        let Type = ExtensionType.Device
        let Name = "VK_NV_external_memory_win32"
        let Number = 58

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportMemoryWin32HandleInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pAttributes : nativeptr<nativeint>
                val mutable public dwAccess : uint32

                new(pNext: nativeint, pAttributes: nativeptr<nativeint>, dwAccess: uint32) =
                    {
                        sType = 1000057001u
                        pNext = pNext
                        pAttributes = pAttributes
                        dwAccess = dwAccess
                    }

                new(pAttributes: nativeptr<nativeint>, dwAccess: uint32) =
                    VkExportMemoryWin32HandleInfoNV(Unchecked.defaultof<nativeint>, pAttributes, dwAccess)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pAttributes = Unchecked.defaultof<nativeptr<nativeint>> && x.dwAccess = Unchecked.defaultof<uint32>

                static member Empty =
                    VkExportMemoryWin32HandleInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pAttributes = %A" x.pAttributes
                        sprintf "dwAccess = %A" x.dwAccess
                    ] |> sprintf "VkExportMemoryWin32HandleInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportMemoryWin32HandleInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public handleType : NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV
                val mutable public handle : nativeint

                new(pNext: nativeint, handleType: NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV, handle: nativeint) =
                    {
                        sType = 1000057000u
                        pNext = pNext
                        handleType = handleType
                        handle = handle
                    }

                new(handleType: NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV, handle: nativeint) =
                    VkImportMemoryWin32HandleInfoNV(Unchecked.defaultof<nativeint>, handleType, handle)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV> && x.handle = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkImportMemoryWin32HandleInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "handleType = %A" x.handleType
                        sprintf "handle = %A" x.handle
                    ] |> sprintf "VkImportMemoryWin32HandleInfoNV { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMemoryWin32HandleNVDel = delegate of VkDevice * VkDeviceMemory * NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV * nativeptr<nativeint> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVExternalMemoryWin32")
                static let s_vkGetMemoryWin32HandleNVDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryWin32HandleNVDel> "vkGetMemoryWin32HandleNV"
                static do Report.End(3) |> ignore
                static member vkGetMemoryWin32HandleNV = s_vkGetMemoryWin32HandleNVDel
            let vkGetMemoryWin32HandleNV(device : VkDevice, memory : VkDeviceMemory, handleType : NVExternalMemoryCapabilities.VkExternalMemoryHandleTypeFlagsNV, pHandle : nativeptr<nativeint>) = Loader<unit>.vkGetMemoryWin32HandleNV.Invoke(device, memory, handleType, pHandle)

    /// Requires NVExternalMemoryWin32.
    /// Promoted to KHRWin32KeyedMutex.
    module NVWin32KeyedMutex =
        let Type = ExtensionType.Device
        let Name = "VK_NV_win32_keyed_mutex"
        let Number = 59

        [<StructLayout(LayoutKind.Sequential)>]
        type VkWin32KeyedMutexAcquireReleaseInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public acquireCount : uint32
                val mutable public pAcquireSyncs : nativeptr<VkDeviceMemory>
                val mutable public pAcquireKeys : nativeptr<uint64>
                val mutable public pAcquireTimeoutMilliseconds : nativeptr<uint32>
                val mutable public releaseCount : uint32
                val mutable public pReleaseSyncs : nativeptr<VkDeviceMemory>
                val mutable public pReleaseKeys : nativeptr<uint64>

                new(pNext: nativeint, acquireCount: uint32, pAcquireSyncs: nativeptr<VkDeviceMemory>, pAcquireKeys: nativeptr<uint64>, pAcquireTimeoutMilliseconds: nativeptr<uint32>, releaseCount: uint32, pReleaseSyncs: nativeptr<VkDeviceMemory>, pReleaseKeys: nativeptr<uint64>) =
                    {
                        sType = 1000058000u
                        pNext = pNext
                        acquireCount = acquireCount
                        pAcquireSyncs = pAcquireSyncs
                        pAcquireKeys = pAcquireKeys
                        pAcquireTimeoutMilliseconds = pAcquireTimeoutMilliseconds
                        releaseCount = releaseCount
                        pReleaseSyncs = pReleaseSyncs
                        pReleaseKeys = pReleaseKeys
                    }

                new(acquireCount: uint32, pAcquireSyncs: nativeptr<VkDeviceMemory>, pAcquireKeys: nativeptr<uint64>, pAcquireTimeoutMilliseconds: nativeptr<uint32>, releaseCount: uint32, pReleaseSyncs: nativeptr<VkDeviceMemory>, pReleaseKeys: nativeptr<uint64>) =
                    VkWin32KeyedMutexAcquireReleaseInfoNV(Unchecked.defaultof<nativeint>, acquireCount, pAcquireSyncs, pAcquireKeys, pAcquireTimeoutMilliseconds, releaseCount, pReleaseSyncs, pReleaseKeys)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.acquireCount = Unchecked.defaultof<uint32> && x.pAcquireSyncs = Unchecked.defaultof<nativeptr<VkDeviceMemory>> && x.pAcquireKeys = Unchecked.defaultof<nativeptr<uint64>> && x.pAcquireTimeoutMilliseconds = Unchecked.defaultof<nativeptr<uint32>> && x.releaseCount = Unchecked.defaultof<uint32> && x.pReleaseSyncs = Unchecked.defaultof<nativeptr<VkDeviceMemory>> && x.pReleaseKeys = Unchecked.defaultof<nativeptr<uint64>>

                static member Empty =
                    VkWin32KeyedMutexAcquireReleaseInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDeviceMemory>>, Unchecked.defaultof<nativeptr<uint64>>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDeviceMemory>>, Unchecked.defaultof<nativeptr<uint64>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "acquireCount = %A" x.acquireCount
                        sprintf "pAcquireSyncs = %A" x.pAcquireSyncs
                        sprintf "pAcquireKeys = %A" x.pAcquireKeys
                        sprintf "pAcquireTimeoutMilliseconds = %A" x.pAcquireTimeoutMilliseconds
                        sprintf "releaseCount = %A" x.releaseCount
                        sprintf "pReleaseSyncs = %A" x.pReleaseSyncs
                        sprintf "pReleaseKeys = %A" x.pReleaseKeys
                    ] |> sprintf "VkWin32KeyedMutexAcquireReleaseInfoNV { %s }"
            end



    /// Promoted to Vulkan11.
    module KHRGetPhysicalDeviceProperties2 =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_get_physical_device_properties2"
        let Number = 60

        type VkFormatProperties2KHR = Vulkan11.VkFormatProperties2

        type VkImageFormatProperties2KHR = Vulkan11.VkImageFormatProperties2

        type VkPhysicalDeviceFeatures2KHR = Vulkan11.VkPhysicalDeviceFeatures2

        type VkPhysicalDeviceImageFormatInfo2KHR = Vulkan11.VkPhysicalDeviceImageFormatInfo2

        type VkPhysicalDeviceMemoryProperties2KHR = Vulkan11.VkPhysicalDeviceMemoryProperties2

        type VkPhysicalDeviceProperties2KHR = Vulkan11.VkPhysicalDeviceProperties2

        type VkPhysicalDeviceSparseImageFormatInfo2KHR = Vulkan11.VkPhysicalDeviceSparseImageFormatInfo2

        type VkQueueFamilyProperties2KHR = Vulkan11.VkQueueFamilyProperties2

        type VkSparseImageFormatProperties2KHR = Vulkan11.VkSparseImageFormatProperties2


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceFeatures2KHRDel = delegate of VkPhysicalDevice * nativeptr<Vulkan11.VkPhysicalDeviceFeatures2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<Vulkan11.VkPhysicalDeviceProperties2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceFormatProperties2KHRDel = delegate of VkPhysicalDevice * VkFormat * nativeptr<Vulkan11.VkFormatProperties2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceImageFormatProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<Vulkan11.VkPhysicalDeviceImageFormatInfo2> * nativeptr<Vulkan11.VkImageFormatProperties2> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceQueueFamilyProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<Vulkan11.VkQueueFamilyProperties2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceMemoryProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<Vulkan11.VkPhysicalDeviceMemoryProperties2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceSparseImageFormatProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<Vulkan11.VkPhysicalDeviceSparseImageFormatInfo2> * nativeptr<uint32> * nativeptr<Vulkan11.VkSparseImageFormatProperties2> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRGetPhysicalDeviceProperties2")
                static let s_vkGetPhysicalDeviceFeatures2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceFeatures2KHRDel> "vkGetPhysicalDeviceFeatures2KHR"
                static let s_vkGetPhysicalDeviceProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceProperties2KHRDel> "vkGetPhysicalDeviceProperties2KHR"
                static let s_vkGetPhysicalDeviceFormatProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceFormatProperties2KHRDel> "vkGetPhysicalDeviceFormatProperties2KHR"
                static let s_vkGetPhysicalDeviceImageFormatProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceImageFormatProperties2KHRDel> "vkGetPhysicalDeviceImageFormatProperties2KHR"
                static let s_vkGetPhysicalDeviceQueueFamilyProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceQueueFamilyProperties2KHRDel> "vkGetPhysicalDeviceQueueFamilyProperties2KHR"
                static let s_vkGetPhysicalDeviceMemoryProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceMemoryProperties2KHRDel> "vkGetPhysicalDeviceMemoryProperties2KHR"
                static let s_vkGetPhysicalDeviceSparseImageFormatProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSparseImageFormatProperties2KHRDel> "vkGetPhysicalDeviceSparseImageFormatProperties2KHR"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceFeatures2KHR = s_vkGetPhysicalDeviceFeatures2KHRDel
                static member vkGetPhysicalDeviceProperties2KHR = s_vkGetPhysicalDeviceProperties2KHRDel
                static member vkGetPhysicalDeviceFormatProperties2KHR = s_vkGetPhysicalDeviceFormatProperties2KHRDel
                static member vkGetPhysicalDeviceImageFormatProperties2KHR = s_vkGetPhysicalDeviceImageFormatProperties2KHRDel
                static member vkGetPhysicalDeviceQueueFamilyProperties2KHR = s_vkGetPhysicalDeviceQueueFamilyProperties2KHRDel
                static member vkGetPhysicalDeviceMemoryProperties2KHR = s_vkGetPhysicalDeviceMemoryProperties2KHRDel
                static member vkGetPhysicalDeviceSparseImageFormatProperties2KHR = s_vkGetPhysicalDeviceSparseImageFormatProperties2KHRDel
            let vkGetPhysicalDeviceFeatures2KHR(physicalDevice : VkPhysicalDevice, pFeatures : nativeptr<Vulkan11.VkPhysicalDeviceFeatures2>) = Loader<unit>.vkGetPhysicalDeviceFeatures2KHR.Invoke(physicalDevice, pFeatures)
            let vkGetPhysicalDeviceProperties2KHR(physicalDevice : VkPhysicalDevice, pProperties : nativeptr<Vulkan11.VkPhysicalDeviceProperties2>) = Loader<unit>.vkGetPhysicalDeviceProperties2KHR.Invoke(physicalDevice, pProperties)
            let vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice : VkPhysicalDevice, format : VkFormat, pFormatProperties : nativeptr<Vulkan11.VkFormatProperties2>) = Loader<unit>.vkGetPhysicalDeviceFormatProperties2KHR.Invoke(physicalDevice, format, pFormatProperties)
            let vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice : VkPhysicalDevice, pImageFormatInfo : nativeptr<Vulkan11.VkPhysicalDeviceImageFormatInfo2>, pImageFormatProperties : nativeptr<Vulkan11.VkImageFormatProperties2>) = Loader<unit>.vkGetPhysicalDeviceImageFormatProperties2KHR.Invoke(physicalDevice, pImageFormatInfo, pImageFormatProperties)
            let vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice : VkPhysicalDevice, pQueueFamilyPropertyCount : nativeptr<uint32>, pQueueFamilyProperties : nativeptr<Vulkan11.VkQueueFamilyProperties2>) = Loader<unit>.vkGetPhysicalDeviceQueueFamilyProperties2KHR.Invoke(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties)
            let vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice : VkPhysicalDevice, pMemoryProperties : nativeptr<Vulkan11.VkPhysicalDeviceMemoryProperties2>) = Loader<unit>.vkGetPhysicalDeviceMemoryProperties2KHR.Invoke(physicalDevice, pMemoryProperties)
            let vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice : VkPhysicalDevice, pFormatInfo : nativeptr<Vulkan11.VkPhysicalDeviceSparseImageFormatInfo2>, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<Vulkan11.VkSparseImageFormatProperties2>) = Loader<unit>.vkGetPhysicalDeviceSparseImageFormatProperties2KHR.Invoke(physicalDevice, pFormatInfo, pPropertyCount, pProperties)

    /// Requires KHRDeviceGroupCreation.
    /// Promoted to Vulkan11.
    module KHRDeviceGroup =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_device_group"
        let Number = 61

        type VkPeerMemoryFeatureFlagsKHR = Vulkan11.VkPeerMemoryFeatureFlags
        type VkMemoryAllocateFlagsKHR = Vulkan11.VkMemoryAllocateFlags

        type VkDeviceGroupBindSparseInfoKHR = Vulkan11.VkDeviceGroupBindSparseInfo

        type VkDeviceGroupCommandBufferBeginInfoKHR = Vulkan11.VkDeviceGroupCommandBufferBeginInfo

        type VkDeviceGroupRenderPassBeginInfoKHR = Vulkan11.VkDeviceGroupRenderPassBeginInfo

        type VkDeviceGroupSubmitInfoKHR = Vulkan11.VkDeviceGroupSubmitInfo

        type VkMemoryAllocateFlagsInfoKHR = Vulkan11.VkMemoryAllocateFlagsInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkDependencyFlags with
                  static member inline DeviceGroupBitKhr = enum<VkDependencyFlags> 0x00000004
             type Vulkan11.VkMemoryAllocateFlags with
                  static member inline DeviceMaskBitKhr = enum<Vulkan11.VkMemoryAllocateFlags> 0x00000001
             type Vulkan11.VkPeerMemoryFeatureFlags with
                  static member inline CopySrcBitKhr = enum<Vulkan11.VkPeerMemoryFeatureFlags> 0x00000001
                  static member inline CopyDstBitKhr = enum<Vulkan11.VkPeerMemoryFeatureFlags> 0x00000002
                  static member inline GenericSrcBitKhr = enum<Vulkan11.VkPeerMemoryFeatureFlags> 0x00000004
                  static member inline GenericDstBitKhr = enum<Vulkan11.VkPeerMemoryFeatureFlags> 0x00000008
             type VkPipelineCreateFlags with
                  static member inline ViewIndexFromDeviceIndexBitKhr = enum<VkPipelineCreateFlags> 0x00000008
                  static member inline DispatchBaseKhr = enum<VkPipelineCreateFlags> 0x00000010

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceGroupPeerMemoryFeaturesKHRDel = delegate of VkDevice * uint32 * uint32 * uint32 * nativeptr<Vulkan11.VkPeerMemoryFeatureFlags> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetDeviceMaskKHRDel = delegate of VkCommandBuffer * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDispatchBaseKHRDel = delegate of VkCommandBuffer * uint32 * uint32 * uint32 * uint32 * uint32 * uint32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRDeviceGroup")
                static let s_vkGetDeviceGroupPeerMemoryFeaturesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceGroupPeerMemoryFeaturesKHRDel> "vkGetDeviceGroupPeerMemoryFeaturesKHR"
                static let s_vkCmdSetDeviceMaskKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDeviceMaskKHRDel> "vkCmdSetDeviceMaskKHR"
                static let s_vkCmdDispatchBaseKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdDispatchBaseKHRDel> "vkCmdDispatchBaseKHR"
                static do Report.End(3) |> ignore
                static member vkGetDeviceGroupPeerMemoryFeaturesKHR = s_vkGetDeviceGroupPeerMemoryFeaturesKHRDel
                static member vkCmdSetDeviceMaskKHR = s_vkCmdSetDeviceMaskKHRDel
                static member vkCmdDispatchBaseKHR = s_vkCmdDispatchBaseKHRDel
            let vkGetDeviceGroupPeerMemoryFeaturesKHR(device : VkDevice, heapIndex : uint32, localDeviceIndex : uint32, remoteDeviceIndex : uint32, pPeerMemoryFeatures : nativeptr<Vulkan11.VkPeerMemoryFeatureFlags>) = Loader<unit>.vkGetDeviceGroupPeerMemoryFeaturesKHR.Invoke(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures)
            let vkCmdSetDeviceMaskKHR(commandBuffer : VkCommandBuffer, deviceMask : uint32) = Loader<unit>.vkCmdSetDeviceMaskKHR.Invoke(commandBuffer, deviceMask)
            let vkCmdDispatchBaseKHR(commandBuffer : VkCommandBuffer, baseGroupX : uint32, baseGroupY : uint32, baseGroupZ : uint32, groupCountX : uint32, groupCountY : uint32, groupCountZ : uint32) = Loader<unit>.vkCmdDispatchBaseKHR.Invoke(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)

        [<AutoOpen>]
        module ``KHRBindMemory2`` =
            type VkBindBufferMemoryDeviceGroupInfoKHR = Vulkan11.VkBindBufferMemoryDeviceGroupInfo

            type VkBindImageMemoryDeviceGroupInfoKHR = Vulkan11.VkBindImageMemoryDeviceGroupInfo


            [<AutoOpen>]
            module EnumExtensions =
                 type VkImageCreateFlags with
                      static member inline SplitInstanceBindRegionsBitKhr = enum<VkImageCreateFlags> 0x00000040


        [<AutoOpen>]
        module ``KHRSurface`` =
            type VkDeviceGroupPresentModeFlagsKHR = KHRSwapchain.``Vulkan11``.VkDeviceGroupPresentModeFlagsKHR

            type VkDeviceGroupPresentCapabilitiesKHR = KHRSwapchain.``Vulkan11``.VkDeviceGroupPresentCapabilitiesKHR


            module VkRaw =
                let vkGetDeviceGroupPresentCapabilitiesKHR = KHRSwapchain.``Vulkan11``.VkRaw.vkGetDeviceGroupPresentCapabilitiesKHR
                let vkGetDeviceGroupSurfacePresentModesKHR = KHRSwapchain.``Vulkan11``.VkRaw.vkGetDeviceGroupSurfacePresentModesKHR
                let vkGetPhysicalDevicePresentRectanglesKHR = KHRSwapchain.``Vulkan11``.VkRaw.vkGetPhysicalDevicePresentRectanglesKHR

        [<AutoOpen>]
        module ``KHRSwapchain`` =
            type VkAcquireNextImageInfoKHR = KHRSwapchain.``Vulkan11``.VkAcquireNextImageInfoKHR

            type VkBindImageMemorySwapchainInfoKHR = KHRSwapchain.``Vulkan11``.VkBindImageMemorySwapchainInfoKHR

            type VkDeviceGroupPresentInfoKHR = KHRSwapchain.``Vulkan11``.VkDeviceGroupPresentInfoKHR

            type VkDeviceGroupSwapchainCreateInfoKHR = KHRSwapchain.``Vulkan11``.VkDeviceGroupSwapchainCreateInfoKHR

            type VkImageSwapchainCreateInfoKHR = KHRSwapchain.``Vulkan11``.VkImageSwapchainCreateInfoKHR


            [<AutoOpen>]
            module EnumExtensions =
                 type KHRSwapchain.VkSwapchainCreateFlagsKHR with
                      /// Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
                      static member inline SplitInstanceBindRegionsBit = enum<KHRSwapchain.VkSwapchainCreateFlagsKHR> 0x00000001

            module VkRaw =
                let vkAcquireNextImage2KHR = KHRSwapchain.``Vulkan11``.VkRaw.vkAcquireNextImage2KHR

    /// Deprecated by EXTLayerSettings.
    module EXTValidationFlags =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_validation_flags"
        let Number = 62

        type VkValidationCheckEXT =
            | All = 0
            | Shaders = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkValidationFlagsEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public disabledValidationCheckCount : uint32
                val mutable public pDisabledValidationChecks : nativeptr<VkValidationCheckEXT>

                new(pNext: nativeint, disabledValidationCheckCount: uint32, pDisabledValidationChecks: nativeptr<VkValidationCheckEXT>) =
                    {
                        sType = 1000061000u
                        pNext = pNext
                        disabledValidationCheckCount = disabledValidationCheckCount
                        pDisabledValidationChecks = pDisabledValidationChecks
                    }

                new(disabledValidationCheckCount: uint32, pDisabledValidationChecks: nativeptr<VkValidationCheckEXT>) =
                    VkValidationFlagsEXT(Unchecked.defaultof<nativeint>, disabledValidationCheckCount, pDisabledValidationChecks)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.disabledValidationCheckCount = Unchecked.defaultof<uint32> && x.pDisabledValidationChecks = Unchecked.defaultof<nativeptr<VkValidationCheckEXT>>

                static member Empty =
                    VkValidationFlagsEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkValidationCheckEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "disabledValidationCheckCount = %A" x.disabledValidationCheckCount
                        sprintf "pDisabledValidationChecks = %A" x.pDisabledValidationChecks
                    ] |> sprintf "VkValidationFlagsEXT { %s }"
            end



    /// Requires KHRSurface.
    module NNViSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_NN_vi_surface"
        let Number = 63

        [<StructLayout(LayoutKind.Sequential)>]
        type VkViSurfaceCreateInfoNN =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkViSurfaceCreateFlagsNN
                val mutable public window : nativeint

                new(pNext: nativeint, flags: VkViSurfaceCreateFlagsNN, window: nativeint) =
                    {
                        sType = 1000062000u
                        pNext = pNext
                        flags = flags
                        window = window
                    }

                new(flags: VkViSurfaceCreateFlagsNN, window: nativeint) =
                    VkViSurfaceCreateInfoNN(Unchecked.defaultof<nativeint>, flags, window)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkViSurfaceCreateFlagsNN> && x.window = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkViSurfaceCreateInfoNN(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkViSurfaceCreateFlagsNN>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "window = %A" x.window
                    ] |> sprintf "VkViSurfaceCreateInfoNN { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateViSurfaceNNDel = delegate of VkInstance * nativeptr<VkViSurfaceCreateInfoNN> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NNViSurface")
                static let s_vkCreateViSurfaceNNDel = VkRaw.vkImportInstanceDelegate<VkCreateViSurfaceNNDel> "vkCreateViSurfaceNN"
                static do Report.End(3) |> ignore
                static member vkCreateViSurfaceNN = s_vkCreateViSurfaceNNDel
            let vkCreateViSurfaceNN(instance : VkInstance, pCreateInfo : nativeptr<VkViSurfaceCreateInfoNN>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateViSurfaceNN.Invoke(instance, pCreateInfo, pAllocator, pSurface)

    /// Promoted to Vulkan11.
    module KHRShaderDrawParameters =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_draw_parameters"
        let Number = 64

    /// Deprecated by Vulkan12.
    module EXTShaderSubgroupBallot =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_shader_subgroup_ballot"
        let Number = 65

    /// Deprecated by Vulkan11.
    module EXTShaderSubgroupVote =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_shader_subgroup_vote"
        let Number = 66

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module EXTTextureCompressionAstcHdr =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_texture_compression_astc_hdr"
        let Number = 67

        type VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = Vulkan13.VkPhysicalDeviceTextureCompressionASTCHDRFeatures


        [<AutoOpen>]
        module EnumExtensions =
             type VkFormat with
                  static member inline Astc44SfloatBlockExt = enum<VkFormat> 1000066000
                  static member inline Astc54SfloatBlockExt = enum<VkFormat> 1000066001
                  static member inline Astc55SfloatBlockExt = enum<VkFormat> 1000066002
                  static member inline Astc65SfloatBlockExt = enum<VkFormat> 1000066003
                  static member inline Astc66SfloatBlockExt = enum<VkFormat> 1000066004
                  static member inline Astc85SfloatBlockExt = enum<VkFormat> 1000066005
                  static member inline Astc86SfloatBlockExt = enum<VkFormat> 1000066006
                  static member inline Astc88SfloatBlockExt = enum<VkFormat> 1000066007
                  static member inline Astc105SfloatBlockExt = enum<VkFormat> 1000066008
                  static member inline Astc106SfloatBlockExt = enum<VkFormat> 1000066009
                  static member inline Astc108SfloatBlockExt = enum<VkFormat> 1000066010
                  static member inline Astc1010SfloatBlockExt = enum<VkFormat> 1000066011
                  static member inline Astc1210SfloatBlockExt = enum<VkFormat> 1000066012
                  static member inline Astc1212SfloatBlockExt = enum<VkFormat> 1000066013


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTAstcDecodeMode =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_astc_decode_mode"
        let Number = 68

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageViewASTCDecodeModeEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public decodeMode : VkFormat

                new(pNext: nativeint, decodeMode: VkFormat) =
                    {
                        sType = 1000067000u
                        pNext = pNext
                        decodeMode = decodeMode
                    }

                new(decodeMode: VkFormat) =
                    VkImageViewASTCDecodeModeEXT(Unchecked.defaultof<nativeint>, decodeMode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.decodeMode = Unchecked.defaultof<VkFormat>

                static member Empty =
                    VkImageViewASTCDecodeModeEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "decodeMode = %A" x.decodeMode
                    ] |> sprintf "VkImageViewASTCDecodeModeEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceASTCDecodeFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public decodeModeSharedExponent : VkBool32

                new(pNext: nativeint, decodeModeSharedExponent: VkBool32) =
                    {
                        sType = 1000067001u
                        pNext = pNext
                        decodeModeSharedExponent = decodeModeSharedExponent
                    }

                new(decodeModeSharedExponent: VkBool32) =
                    VkPhysicalDeviceASTCDecodeFeaturesEXT(Unchecked.defaultof<nativeint>, decodeModeSharedExponent)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.decodeModeSharedExponent = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceASTCDecodeFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "decodeModeSharedExponent = %A" x.decodeModeSharedExponent
                    ] |> sprintf "VkPhysicalDeviceASTCDecodeFeaturesEXT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan14.
    module EXTPipelineRobustness =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_pipeline_robustness"
        let Number = 69

        type VkPipelineRobustnessBufferBehaviorEXT = Vulkan14.VkPipelineRobustnessBufferBehavior
        type VkPipelineRobustnessImageBehaviorEXT = Vulkan14.VkPipelineRobustnessImageBehavior

        type VkPhysicalDevicePipelineRobustnessFeaturesEXT = Vulkan14.VkPhysicalDevicePipelineRobustnessFeatures

        type VkPhysicalDevicePipelineRobustnessPropertiesEXT = Vulkan14.VkPhysicalDevicePipelineRobustnessProperties

        type VkPipelineRobustnessCreateInfoEXT = Vulkan14.VkPipelineRobustnessCreateInfo


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan14.VkPipelineRobustnessBufferBehavior with
                  static member inline DeviceDefaultExt = enum<Vulkan14.VkPipelineRobustnessBufferBehavior> 0
                  static member inline DisabledExt = enum<Vulkan14.VkPipelineRobustnessBufferBehavior> 1
                  static member inline RobustBufferAccessExt = enum<Vulkan14.VkPipelineRobustnessBufferBehavior> 2
                  static member inline RobustBufferAccess2Ext = enum<Vulkan14.VkPipelineRobustnessBufferBehavior> 3
             type Vulkan14.VkPipelineRobustnessImageBehavior with
                  static member inline DeviceDefaultExt = enum<Vulkan14.VkPipelineRobustnessImageBehavior> 0
                  static member inline DisabledExt = enum<Vulkan14.VkPipelineRobustnessImageBehavior> 1
                  static member inline RobustImageAccessExt = enum<Vulkan14.VkPipelineRobustnessImageBehavior> 2
                  static member inline RobustImageAccess2Ext = enum<Vulkan14.VkPipelineRobustnessImageBehavior> 3


    /// Promoted to Vulkan11.
    module KHRMaintenance1 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_maintenance1"
        let Number = 70

        type VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags

        [<AutoOpen>]
        module EnumExtensions =
             type VkFormatFeatureFlags with
                  static member inline TransferSrcBitKhr = enum<VkFormatFeatureFlags> 0x00004000
                  static member inline TransferDstBitKhr = enum<VkFormatFeatureFlags> 0x00008000
             type VkImageCreateFlags with
                  static member inline D2dArrayCompatibleBitKhr = enum<VkImageCreateFlags> 0x00000020
             type VkResult with
                  static member inline ErrorOutOfPoolMemoryKhr = enum<VkResult> 1000069000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkTrimCommandPoolKHRDel = delegate of VkDevice * VkCommandPool * VkCommandPoolTrimFlags -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRMaintenance1")
                static let s_vkTrimCommandPoolKHRDel = VkRaw.vkImportInstanceDelegate<VkTrimCommandPoolKHRDel> "vkTrimCommandPoolKHR"
                static do Report.End(3) |> ignore
                static member vkTrimCommandPoolKHR = s_vkTrimCommandPoolKHRDel
            let vkTrimCommandPoolKHR(device : VkDevice, commandPool : VkCommandPool, flags : VkCommandPoolTrimFlags) = Loader<unit>.vkTrimCommandPoolKHR.Invoke(device, commandPool, flags)

    /// Promoted to Vulkan11.
    module KHRDeviceGroupCreation =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_device_group_creation"
        let Number = 71

        type VkDeviceGroupDeviceCreateInfoKHR = Vulkan11.VkDeviceGroupDeviceCreateInfo

        type VkPhysicalDeviceGroupPropertiesKHR = Vulkan11.VkPhysicalDeviceGroupProperties


        [<AutoOpen>]
        module EnumExtensions =
             type VkMemoryHeapFlags with
                  static member inline MultiInstanceBitKhr = enum<VkMemoryHeapFlags> 0x00000002

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkEnumeratePhysicalDeviceGroupsKHRDel = delegate of VkInstance * nativeptr<uint32> * nativeptr<Vulkan11.VkPhysicalDeviceGroupProperties> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRDeviceGroupCreation")
                static let s_vkEnumeratePhysicalDeviceGroupsKHRDel = VkRaw.vkImportInstanceDelegate<VkEnumeratePhysicalDeviceGroupsKHRDel> "vkEnumeratePhysicalDeviceGroupsKHR"
                static do Report.End(3) |> ignore
                static member vkEnumeratePhysicalDeviceGroupsKHR = s_vkEnumeratePhysicalDeviceGroupsKHRDel
            let vkEnumeratePhysicalDeviceGroupsKHR(instance : VkInstance, pPhysicalDeviceGroupCount : nativeptr<uint32>, pPhysicalDeviceGroupProperties : nativeptr<Vulkan11.VkPhysicalDeviceGroupProperties>) = Loader<unit>.vkEnumeratePhysicalDeviceGroupsKHR.Invoke(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan11.
    module KHRExternalMemoryCapabilities =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_external_memory_capabilities"
        let Number = 72

        type VkExternalMemoryHandleTypeFlagsKHR = Vulkan11.VkExternalMemoryHandleTypeFlags
        type VkExternalMemoryFeatureFlagsKHR = Vulkan11.VkExternalMemoryFeatureFlags

        type VkExternalBufferPropertiesKHR = Vulkan11.VkExternalBufferProperties

        type VkExternalImageFormatPropertiesKHR = Vulkan11.VkExternalImageFormatProperties

        type VkExternalMemoryPropertiesKHR = Vulkan11.VkExternalMemoryProperties

        type VkPhysicalDeviceExternalBufferInfoKHR = Vulkan11.VkPhysicalDeviceExternalBufferInfo

        type VkPhysicalDeviceExternalImageFormatInfoKHR = Vulkan11.VkPhysicalDeviceExternalImageFormatInfo

        type VkPhysicalDeviceIDPropertiesKHR = Vulkan11.VkPhysicalDeviceIDProperties


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkExternalMemoryFeatureFlags with
                  static member inline DedicatedOnlyBitKhr = enum<Vulkan11.VkExternalMemoryFeatureFlags> 0x00000001
                  static member inline ExportableBitKhr = enum<Vulkan11.VkExternalMemoryFeatureFlags> 0x00000002
                  static member inline ImportableBitKhr = enum<Vulkan11.VkExternalMemoryFeatureFlags> 0x00000004
             type Vulkan11.VkExternalMemoryHandleTypeFlags with
                  static member inline OpaqueFdBitKhr = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00000001
                  static member inline OpaqueWin32BitKhr = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00000002
                  static member inline OpaqueWin32KmtBitKhr = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00000004
                  static member inline D3d11TextureBitKhr = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00000008
                  static member inline D3d11TextureKmtBitKhr = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00000010
                  static member inline D3d12HeapBitKhr = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00000020
                  static member inline D3d12ResourceBitKhr = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00000040

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceExternalBufferPropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<Vulkan11.VkPhysicalDeviceExternalBufferInfo> * nativeptr<Vulkan11.VkExternalBufferProperties> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRExternalMemoryCapabilities")
                static let s_vkGetPhysicalDeviceExternalBufferPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceExternalBufferPropertiesKHRDel> "vkGetPhysicalDeviceExternalBufferPropertiesKHR"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceExternalBufferPropertiesKHR = s_vkGetPhysicalDeviceExternalBufferPropertiesKHRDel
            let vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice : VkPhysicalDevice, pExternalBufferInfo : nativeptr<Vulkan11.VkPhysicalDeviceExternalBufferInfo>, pExternalBufferProperties : nativeptr<Vulkan11.VkExternalBufferProperties>) = Loader<unit>.vkGetPhysicalDeviceExternalBufferPropertiesKHR.Invoke(physicalDevice, pExternalBufferInfo, pExternalBufferProperties)

    /// Requires KHRExternalMemoryCapabilities | Vulkan11.
    /// Promoted to Vulkan11.
    module KHRExternalMemory =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_external_memory"
        let Number = 73

        type VkExportMemoryAllocateInfoKHR = Vulkan11.VkExportMemoryAllocateInfo

        type VkExternalMemoryBufferCreateInfoKHR = Vulkan11.VkExternalMemoryBufferCreateInfo

        type VkExternalMemoryImageCreateInfoKHR = Vulkan11.VkExternalMemoryImageCreateInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkResult with
                  static member inline ErrorInvalidExternalHandleKhr = enum<VkResult> 1000072003


    /// Requires KHRExternalMemory | Vulkan11.
    module KHRExternalMemoryWin32 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_external_memory_win32"
        let Number = 74

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportMemoryWin32HandleInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pAttributes : nativeptr<nativeint>
                val mutable public dwAccess : uint32
                val mutable public name : cstr

                new(pNext: nativeint, pAttributes: nativeptr<nativeint>, dwAccess: uint32, name: cstr) =
                    {
                        sType = 1000073001u
                        pNext = pNext
                        pAttributes = pAttributes
                        dwAccess = dwAccess
                        name = name
                    }

                new(pAttributes: nativeptr<nativeint>, dwAccess: uint32, name: cstr) =
                    VkExportMemoryWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, pAttributes, dwAccess, name)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pAttributes = Unchecked.defaultof<nativeptr<nativeint>> && x.dwAccess = Unchecked.defaultof<uint32> && x.name = Unchecked.defaultof<cstr>

                static member Empty =
                    VkExportMemoryWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<cstr>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pAttributes = %A" x.pAttributes
                        sprintf "dwAccess = %A" x.dwAccess
                        sprintf "name = %A" x.name
                    ] |> sprintf "VkExportMemoryWin32HandleInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportMemoryWin32HandleInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public handleType : Vulkan11.VkExternalMemoryHandleTypeFlags
                val mutable public handle : nativeint
                val mutable public name : cstr

                new(pNext: nativeint, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags, handle: nativeint, name: cstr) =
                    {
                        sType = 1000073000u
                        pNext = pNext
                        handleType = handleType
                        handle = handle
                        name = name
                    }

                new(handleType: Vulkan11.VkExternalMemoryHandleTypeFlags, handle: nativeint, name: cstr) =
                    VkImportMemoryWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, handleType, handle, name)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags> && x.handle = Unchecked.defaultof<nativeint> && x.name = Unchecked.defaultof<cstr>

                static member Empty =
                    VkImportMemoryWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "handleType = %A" x.handleType
                        sprintf "handle = %A" x.handle
                        sprintf "name = %A" x.name
                    ] |> sprintf "VkImportMemoryWin32HandleInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryGetWin32HandleInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memory : VkDeviceMemory
                val mutable public handleType : Vulkan11.VkExternalMemoryHandleTypeFlags

                new(pNext: nativeint, memory: VkDeviceMemory, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags) =
                    {
                        sType = 1000073003u
                        pNext = pNext
                        memory = memory
                        handleType = handleType
                    }

                new(memory: VkDeviceMemory, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags) =
                    VkMemoryGetWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, memory, handleType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>

                static member Empty =
                    VkMemoryGetWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memory = %A" x.memory
                        sprintf "handleType = %A" x.handleType
                    ] |> sprintf "VkMemoryGetWin32HandleInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryWin32HandlePropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memoryTypeBits : uint32

                new(pNext: nativeint, memoryTypeBits: uint32) =
                    {
                        sType = 1000073002u
                        pNext = pNext
                        memoryTypeBits = memoryTypeBits
                    }

                new(memoryTypeBits: uint32) =
                    VkMemoryWin32HandlePropertiesKHR(Unchecked.defaultof<nativeint>, memoryTypeBits)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memoryTypeBits = Unchecked.defaultof<uint32>

                static member Empty =
                    VkMemoryWin32HandlePropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memoryTypeBits = %A" x.memoryTypeBits
                    ] |> sprintf "VkMemoryWin32HandlePropertiesKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMemoryWin32HandleKHRDel = delegate of VkDevice * nativeptr<VkMemoryGetWin32HandleInfoKHR> * nativeptr<nativeint> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMemoryWin32HandlePropertiesKHRDel = delegate of VkDevice * Vulkan11.VkExternalMemoryHandleTypeFlags * nativeint * nativeptr<VkMemoryWin32HandlePropertiesKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRExternalMemoryWin32")
                static let s_vkGetMemoryWin32HandleKHRDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryWin32HandleKHRDel> "vkGetMemoryWin32HandleKHR"
                static let s_vkGetMemoryWin32HandlePropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryWin32HandlePropertiesKHRDel> "vkGetMemoryWin32HandlePropertiesKHR"
                static do Report.End(3) |> ignore
                static member vkGetMemoryWin32HandleKHR = s_vkGetMemoryWin32HandleKHRDel
                static member vkGetMemoryWin32HandlePropertiesKHR = s_vkGetMemoryWin32HandlePropertiesKHRDel
            let vkGetMemoryWin32HandleKHR(device : VkDevice, pGetWin32HandleInfo : nativeptr<VkMemoryGetWin32HandleInfoKHR>, pHandle : nativeptr<nativeint>) = Loader<unit>.vkGetMemoryWin32HandleKHR.Invoke(device, pGetWin32HandleInfo, pHandle)
            let vkGetMemoryWin32HandlePropertiesKHR(device : VkDevice, handleType : Vulkan11.VkExternalMemoryHandleTypeFlags, handle : nativeint, pMemoryWin32HandleProperties : nativeptr<VkMemoryWin32HandlePropertiesKHR>) = Loader<unit>.vkGetMemoryWin32HandlePropertiesKHR.Invoke(device, handleType, handle, pMemoryWin32HandleProperties)

    /// Requires KHRExternalMemory | Vulkan11.
    module KHRExternalMemoryFd =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_external_memory_fd"
        let Number = 75

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportMemoryFdInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public handleType : Vulkan11.VkExternalMemoryHandleTypeFlags
                val mutable public fd : int32

                new(pNext: nativeint, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags, fd: int32) =
                    {
                        sType = 1000074000u
                        pNext = pNext
                        handleType = handleType
                        fd = fd
                    }

                new(handleType: Vulkan11.VkExternalMemoryHandleTypeFlags, fd: int32) =
                    VkImportMemoryFdInfoKHR(Unchecked.defaultof<nativeint>, handleType, fd)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags> && x.fd = Unchecked.defaultof<int32>

                static member Empty =
                    VkImportMemoryFdInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>, Unchecked.defaultof<int32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "handleType = %A" x.handleType
                        sprintf "fd = %A" x.fd
                    ] |> sprintf "VkImportMemoryFdInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryFdPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memoryTypeBits : uint32

                new(pNext: nativeint, memoryTypeBits: uint32) =
                    {
                        sType = 1000074001u
                        pNext = pNext
                        memoryTypeBits = memoryTypeBits
                    }

                new(memoryTypeBits: uint32) =
                    VkMemoryFdPropertiesKHR(Unchecked.defaultof<nativeint>, memoryTypeBits)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memoryTypeBits = Unchecked.defaultof<uint32>

                static member Empty =
                    VkMemoryFdPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memoryTypeBits = %A" x.memoryTypeBits
                    ] |> sprintf "VkMemoryFdPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryGetFdInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memory : VkDeviceMemory
                val mutable public handleType : Vulkan11.VkExternalMemoryHandleTypeFlags

                new(pNext: nativeint, memory: VkDeviceMemory, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags) =
                    {
                        sType = 1000074002u
                        pNext = pNext
                        memory = memory
                        handleType = handleType
                    }

                new(memory: VkDeviceMemory, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags) =
                    VkMemoryGetFdInfoKHR(Unchecked.defaultof<nativeint>, memory, handleType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>

                static member Empty =
                    VkMemoryGetFdInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memory = %A" x.memory
                        sprintf "handleType = %A" x.handleType
                    ] |> sprintf "VkMemoryGetFdInfoKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMemoryFdKHRDel = delegate of VkDevice * nativeptr<VkMemoryGetFdInfoKHR> * nativeptr<int32> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMemoryFdPropertiesKHRDel = delegate of VkDevice * Vulkan11.VkExternalMemoryHandleTypeFlags * int32 * nativeptr<VkMemoryFdPropertiesKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRExternalMemoryFd")
                static let s_vkGetMemoryFdKHRDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryFdKHRDel> "vkGetMemoryFdKHR"
                static let s_vkGetMemoryFdPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryFdPropertiesKHRDel> "vkGetMemoryFdPropertiesKHR"
                static do Report.End(3) |> ignore
                static member vkGetMemoryFdKHR = s_vkGetMemoryFdKHRDel
                static member vkGetMemoryFdPropertiesKHR = s_vkGetMemoryFdPropertiesKHRDel
            let vkGetMemoryFdKHR(device : VkDevice, pGetFdInfo : nativeptr<VkMemoryGetFdInfoKHR>, pFd : nativeptr<int32>) = Loader<unit>.vkGetMemoryFdKHR.Invoke(device, pGetFdInfo, pFd)
            let vkGetMemoryFdPropertiesKHR(device : VkDevice, handleType : Vulkan11.VkExternalMemoryHandleTypeFlags, fd : int32, pMemoryFdProperties : nativeptr<VkMemoryFdPropertiesKHR>) = Loader<unit>.vkGetMemoryFdPropertiesKHR.Invoke(device, handleType, fd, pMemoryFdProperties)

    /// Requires KHRExternalMemoryWin32.
    module KHRWin32KeyedMutex =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_win32_keyed_mutex"
        let Number = 76

        [<StructLayout(LayoutKind.Sequential)>]
        type VkWin32KeyedMutexAcquireReleaseInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public acquireCount : uint32
                val mutable public pAcquireSyncs : nativeptr<VkDeviceMemory>
                val mutable public pAcquireKeys : nativeptr<uint64>
                val mutable public pAcquireTimeouts : nativeptr<uint32>
                val mutable public releaseCount : uint32
                val mutable public pReleaseSyncs : nativeptr<VkDeviceMemory>
                val mutable public pReleaseKeys : nativeptr<uint64>

                new(pNext: nativeint, acquireCount: uint32, pAcquireSyncs: nativeptr<VkDeviceMemory>, pAcquireKeys: nativeptr<uint64>, pAcquireTimeouts: nativeptr<uint32>, releaseCount: uint32, pReleaseSyncs: nativeptr<VkDeviceMemory>, pReleaseKeys: nativeptr<uint64>) =
                    {
                        sType = 1000075000u
                        pNext = pNext
                        acquireCount = acquireCount
                        pAcquireSyncs = pAcquireSyncs
                        pAcquireKeys = pAcquireKeys
                        pAcquireTimeouts = pAcquireTimeouts
                        releaseCount = releaseCount
                        pReleaseSyncs = pReleaseSyncs
                        pReleaseKeys = pReleaseKeys
                    }

                new(acquireCount: uint32, pAcquireSyncs: nativeptr<VkDeviceMemory>, pAcquireKeys: nativeptr<uint64>, pAcquireTimeouts: nativeptr<uint32>, releaseCount: uint32, pReleaseSyncs: nativeptr<VkDeviceMemory>, pReleaseKeys: nativeptr<uint64>) =
                    VkWin32KeyedMutexAcquireReleaseInfoKHR(Unchecked.defaultof<nativeint>, acquireCount, pAcquireSyncs, pAcquireKeys, pAcquireTimeouts, releaseCount, pReleaseSyncs, pReleaseKeys)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.acquireCount = Unchecked.defaultof<uint32> && x.pAcquireSyncs = Unchecked.defaultof<nativeptr<VkDeviceMemory>> && x.pAcquireKeys = Unchecked.defaultof<nativeptr<uint64>> && x.pAcquireTimeouts = Unchecked.defaultof<nativeptr<uint32>> && x.releaseCount = Unchecked.defaultof<uint32> && x.pReleaseSyncs = Unchecked.defaultof<nativeptr<VkDeviceMemory>> && x.pReleaseKeys = Unchecked.defaultof<nativeptr<uint64>>

                static member Empty =
                    VkWin32KeyedMutexAcquireReleaseInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDeviceMemory>>, Unchecked.defaultof<nativeptr<uint64>>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDeviceMemory>>, Unchecked.defaultof<nativeptr<uint64>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "acquireCount = %A" x.acquireCount
                        sprintf "pAcquireSyncs = %A" x.pAcquireSyncs
                        sprintf "pAcquireKeys = %A" x.pAcquireKeys
                        sprintf "pAcquireTimeouts = %A" x.pAcquireTimeouts
                        sprintf "releaseCount = %A" x.releaseCount
                        sprintf "pReleaseSyncs = %A" x.pReleaseSyncs
                        sprintf "pReleaseKeys = %A" x.pReleaseKeys
                    ] |> sprintf "VkWin32KeyedMutexAcquireReleaseInfoKHR { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan11.
    module KHRExternalSemaphoreCapabilities =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_external_semaphore_capabilities"
        let Number = 77

        type VkExternalSemaphoreHandleTypeFlagsKHR = Vulkan11.VkExternalSemaphoreHandleTypeFlags
        type VkExternalSemaphoreFeatureFlagsKHR = Vulkan11.VkExternalSemaphoreFeatureFlags

        type VkExternalSemaphorePropertiesKHR = Vulkan11.VkExternalSemaphoreProperties

        type VkPhysicalDeviceExternalSemaphoreInfoKHR = Vulkan11.VkPhysicalDeviceExternalSemaphoreInfo

        type VkPhysicalDeviceIDPropertiesKHR = Vulkan11.VkPhysicalDeviceIDProperties


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkExternalSemaphoreFeatureFlags with
                  static member inline ExportableBitKhr = enum<Vulkan11.VkExternalSemaphoreFeatureFlags> 0x00000001
                  static member inline ImportableBitKhr = enum<Vulkan11.VkExternalSemaphoreFeatureFlags> 0x00000002
             type Vulkan11.VkExternalSemaphoreHandleTypeFlags with
                  static member inline OpaqueFdBitKhr = enum<Vulkan11.VkExternalSemaphoreHandleTypeFlags> 0x00000001
                  static member inline OpaqueWin32BitKhr = enum<Vulkan11.VkExternalSemaphoreHandleTypeFlags> 0x00000002
                  static member inline OpaqueWin32KmtBitKhr = enum<Vulkan11.VkExternalSemaphoreHandleTypeFlags> 0x00000004
                  static member inline D3d12FenceBitKhr = enum<Vulkan11.VkExternalSemaphoreHandleTypeFlags> 0x00000008
                  static member inline SyncFdBitKhr = enum<Vulkan11.VkExternalSemaphoreHandleTypeFlags> 0x00000010

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceExternalSemaphorePropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<Vulkan11.VkPhysicalDeviceExternalSemaphoreInfo> * nativeptr<Vulkan11.VkExternalSemaphoreProperties> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRExternalSemaphoreCapabilities")
                static let s_vkGetPhysicalDeviceExternalSemaphorePropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceExternalSemaphorePropertiesKHRDel> "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = s_vkGetPhysicalDeviceExternalSemaphorePropertiesKHRDel
            let vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice : VkPhysicalDevice, pExternalSemaphoreInfo : nativeptr<Vulkan11.VkPhysicalDeviceExternalSemaphoreInfo>, pExternalSemaphoreProperties : nativeptr<Vulkan11.VkExternalSemaphoreProperties>) = Loader<unit>.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR.Invoke(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties)

    /// Requires KHRExternalSemaphoreCapabilities.
    /// Promoted to Vulkan11.
    module KHRExternalSemaphore =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_external_semaphore"
        let Number = 78

        type VkSemaphoreImportFlagsKHR = Vulkan11.VkSemaphoreImportFlags

        type VkExportSemaphoreCreateInfoKHR = Vulkan11.VkExportSemaphoreCreateInfo


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkSemaphoreImportFlags with
                  static member inline TemporaryBitKhr = enum<Vulkan11.VkSemaphoreImportFlags> 0x00000001


    /// Requires KHRExternalSemaphore.
    module KHRExternalSemaphoreWin32 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_external_semaphore_win32"
        let Number = 79

        [<StructLayout(LayoutKind.Sequential)>]
        type VkD3D12FenceSubmitInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public waitSemaphoreValuesCount : uint32
                val mutable public pWaitSemaphoreValues : nativeptr<uint64>
                val mutable public signalSemaphoreValuesCount : uint32
                val mutable public pSignalSemaphoreValues : nativeptr<uint64>

                new(pNext: nativeint, waitSemaphoreValuesCount: uint32, pWaitSemaphoreValues: nativeptr<uint64>, signalSemaphoreValuesCount: uint32, pSignalSemaphoreValues: nativeptr<uint64>) =
                    {
                        sType = 1000078002u
                        pNext = pNext
                        waitSemaphoreValuesCount = waitSemaphoreValuesCount
                        pWaitSemaphoreValues = pWaitSemaphoreValues
                        signalSemaphoreValuesCount = signalSemaphoreValuesCount
                        pSignalSemaphoreValues = pSignalSemaphoreValues
                    }

                new(waitSemaphoreValuesCount: uint32, pWaitSemaphoreValues: nativeptr<uint64>, signalSemaphoreValuesCount: uint32, pSignalSemaphoreValues: nativeptr<uint64>) =
                    VkD3D12FenceSubmitInfoKHR(Unchecked.defaultof<nativeint>, waitSemaphoreValuesCount, pWaitSemaphoreValues, signalSemaphoreValuesCount, pSignalSemaphoreValues)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.waitSemaphoreValuesCount = Unchecked.defaultof<uint32> && x.pWaitSemaphoreValues = Unchecked.defaultof<nativeptr<uint64>> && x.signalSemaphoreValuesCount = Unchecked.defaultof<uint32> && x.pSignalSemaphoreValues = Unchecked.defaultof<nativeptr<uint64>>

                static member Empty =
                    VkD3D12FenceSubmitInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint64>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint64>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "waitSemaphoreValuesCount = %A" x.waitSemaphoreValuesCount
                        sprintf "pWaitSemaphoreValues = %A" x.pWaitSemaphoreValues
                        sprintf "signalSemaphoreValuesCount = %A" x.signalSemaphoreValuesCount
                        sprintf "pSignalSemaphoreValues = %A" x.pSignalSemaphoreValues
                    ] |> sprintf "VkD3D12FenceSubmitInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportSemaphoreWin32HandleInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pAttributes : nativeptr<nativeint>
                val mutable public dwAccess : uint32
                val mutable public name : cstr

                new(pNext: nativeint, pAttributes: nativeptr<nativeint>, dwAccess: uint32, name: cstr) =
                    {
                        sType = 1000078001u
                        pNext = pNext
                        pAttributes = pAttributes
                        dwAccess = dwAccess
                        name = name
                    }

                new(pAttributes: nativeptr<nativeint>, dwAccess: uint32, name: cstr) =
                    VkExportSemaphoreWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, pAttributes, dwAccess, name)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pAttributes = Unchecked.defaultof<nativeptr<nativeint>> && x.dwAccess = Unchecked.defaultof<uint32> && x.name = Unchecked.defaultof<cstr>

                static member Empty =
                    VkExportSemaphoreWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<cstr>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pAttributes = %A" x.pAttributes
                        sprintf "dwAccess = %A" x.dwAccess
                        sprintf "name = %A" x.name
                    ] |> sprintf "VkExportSemaphoreWin32HandleInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportSemaphoreWin32HandleInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public semaphore : VkSemaphore
                val mutable public flags : Vulkan11.VkSemaphoreImportFlags
                val mutable public handleType : Vulkan11.VkExternalSemaphoreHandleTypeFlags
                val mutable public handle : nativeint
                val mutable public name : cstr

                new(pNext: nativeint, semaphore: VkSemaphore, flags: Vulkan11.VkSemaphoreImportFlags, handleType: Vulkan11.VkExternalSemaphoreHandleTypeFlags, handle: nativeint, name: cstr) =
                    {
                        sType = 1000078000u
                        pNext = pNext
                        semaphore = semaphore
                        flags = flags
                        handleType = handleType
                        handle = handle
                        name = name
                    }

                new(semaphore: VkSemaphore, flags: Vulkan11.VkSemaphoreImportFlags, handleType: Vulkan11.VkExternalSemaphoreHandleTypeFlags, handle: nativeint, name: cstr) =
                    VkImportSemaphoreWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, semaphore, flags, handleType, handle, name)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.flags = Unchecked.defaultof<Vulkan11.VkSemaphoreImportFlags> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalSemaphoreHandleTypeFlags> && x.handle = Unchecked.defaultof<nativeint> && x.name = Unchecked.defaultof<cstr>

                static member Empty =
                    VkImportSemaphoreWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<Vulkan11.VkSemaphoreImportFlags>, Unchecked.defaultof<Vulkan11.VkExternalSemaphoreHandleTypeFlags>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "semaphore = %A" x.semaphore
                        sprintf "flags = %A" x.flags
                        sprintf "handleType = %A" x.handleType
                        sprintf "handle = %A" x.handle
                        sprintf "name = %A" x.name
                    ] |> sprintf "VkImportSemaphoreWin32HandleInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSemaphoreGetWin32HandleInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public semaphore : VkSemaphore
                val mutable public handleType : Vulkan11.VkExternalSemaphoreHandleTypeFlags

                new(pNext: nativeint, semaphore: VkSemaphore, handleType: Vulkan11.VkExternalSemaphoreHandleTypeFlags) =
                    {
                        sType = 1000078003u
                        pNext = pNext
                        semaphore = semaphore
                        handleType = handleType
                    }

                new(semaphore: VkSemaphore, handleType: Vulkan11.VkExternalSemaphoreHandleTypeFlags) =
                    VkSemaphoreGetWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, semaphore, handleType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalSemaphoreHandleTypeFlags>

                static member Empty =
                    VkSemaphoreGetWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<Vulkan11.VkExternalSemaphoreHandleTypeFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "semaphore = %A" x.semaphore
                        sprintf "handleType = %A" x.handleType
                    ] |> sprintf "VkSemaphoreGetWin32HandleInfoKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkImportSemaphoreWin32HandleKHRDel = delegate of VkDevice * nativeptr<VkImportSemaphoreWin32HandleInfoKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetSemaphoreWin32HandleKHRDel = delegate of VkDevice * nativeptr<VkSemaphoreGetWin32HandleInfoKHR> * nativeptr<nativeint> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRExternalSemaphoreWin32")
                static let s_vkImportSemaphoreWin32HandleKHRDel = VkRaw.vkImportInstanceDelegate<VkImportSemaphoreWin32HandleKHRDel> "vkImportSemaphoreWin32HandleKHR"
                static let s_vkGetSemaphoreWin32HandleKHRDel = VkRaw.vkImportInstanceDelegate<VkGetSemaphoreWin32HandleKHRDel> "vkGetSemaphoreWin32HandleKHR"
                static do Report.End(3) |> ignore
                static member vkImportSemaphoreWin32HandleKHR = s_vkImportSemaphoreWin32HandleKHRDel
                static member vkGetSemaphoreWin32HandleKHR = s_vkGetSemaphoreWin32HandleKHRDel
            let vkImportSemaphoreWin32HandleKHR(device : VkDevice, pImportSemaphoreWin32HandleInfo : nativeptr<VkImportSemaphoreWin32HandleInfoKHR>) = Loader<unit>.vkImportSemaphoreWin32HandleKHR.Invoke(device, pImportSemaphoreWin32HandleInfo)
            let vkGetSemaphoreWin32HandleKHR(device : VkDevice, pGetWin32HandleInfo : nativeptr<VkSemaphoreGetWin32HandleInfoKHR>, pHandle : nativeptr<nativeint>) = Loader<unit>.vkGetSemaphoreWin32HandleKHR.Invoke(device, pGetWin32HandleInfo, pHandle)

    /// Requires KHRExternalSemaphore | Vulkan11.
    module KHRExternalSemaphoreFd =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_external_semaphore_fd"
        let Number = 80

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportSemaphoreFdInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public semaphore : VkSemaphore
                val mutable public flags : Vulkan11.VkSemaphoreImportFlags
                val mutable public handleType : Vulkan11.VkExternalSemaphoreHandleTypeFlags
                val mutable public fd : int32

                new(pNext: nativeint, semaphore: VkSemaphore, flags: Vulkan11.VkSemaphoreImportFlags, handleType: Vulkan11.VkExternalSemaphoreHandleTypeFlags, fd: int32) =
                    {
                        sType = 1000079000u
                        pNext = pNext
                        semaphore = semaphore
                        flags = flags
                        handleType = handleType
                        fd = fd
                    }

                new(semaphore: VkSemaphore, flags: Vulkan11.VkSemaphoreImportFlags, handleType: Vulkan11.VkExternalSemaphoreHandleTypeFlags, fd: int32) =
                    VkImportSemaphoreFdInfoKHR(Unchecked.defaultof<nativeint>, semaphore, flags, handleType, fd)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.flags = Unchecked.defaultof<Vulkan11.VkSemaphoreImportFlags> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalSemaphoreHandleTypeFlags> && x.fd = Unchecked.defaultof<int32>

                static member Empty =
                    VkImportSemaphoreFdInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<Vulkan11.VkSemaphoreImportFlags>, Unchecked.defaultof<Vulkan11.VkExternalSemaphoreHandleTypeFlags>, Unchecked.defaultof<int32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "semaphore = %A" x.semaphore
                        sprintf "flags = %A" x.flags
                        sprintf "handleType = %A" x.handleType
                        sprintf "fd = %A" x.fd
                    ] |> sprintf "VkImportSemaphoreFdInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSemaphoreGetFdInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public semaphore : VkSemaphore
                val mutable public handleType : Vulkan11.VkExternalSemaphoreHandleTypeFlags

                new(pNext: nativeint, semaphore: VkSemaphore, handleType: Vulkan11.VkExternalSemaphoreHandleTypeFlags) =
                    {
                        sType = 1000079001u
                        pNext = pNext
                        semaphore = semaphore
                        handleType = handleType
                    }

                new(semaphore: VkSemaphore, handleType: Vulkan11.VkExternalSemaphoreHandleTypeFlags) =
                    VkSemaphoreGetFdInfoKHR(Unchecked.defaultof<nativeint>, semaphore, handleType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalSemaphoreHandleTypeFlags>

                static member Empty =
                    VkSemaphoreGetFdInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<Vulkan11.VkExternalSemaphoreHandleTypeFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "semaphore = %A" x.semaphore
                        sprintf "handleType = %A" x.handleType
                    ] |> sprintf "VkSemaphoreGetFdInfoKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkImportSemaphoreFdKHRDel = delegate of VkDevice * nativeptr<VkImportSemaphoreFdInfoKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetSemaphoreFdKHRDel = delegate of VkDevice * nativeptr<VkSemaphoreGetFdInfoKHR> * nativeptr<int32> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRExternalSemaphoreFd")
                static let s_vkImportSemaphoreFdKHRDel = VkRaw.vkImportInstanceDelegate<VkImportSemaphoreFdKHRDel> "vkImportSemaphoreFdKHR"
                static let s_vkGetSemaphoreFdKHRDel = VkRaw.vkImportInstanceDelegate<VkGetSemaphoreFdKHRDel> "vkGetSemaphoreFdKHR"
                static do Report.End(3) |> ignore
                static member vkImportSemaphoreFdKHR = s_vkImportSemaphoreFdKHRDel
                static member vkGetSemaphoreFdKHR = s_vkGetSemaphoreFdKHRDel
            let vkImportSemaphoreFdKHR(device : VkDevice, pImportSemaphoreFdInfo : nativeptr<VkImportSemaphoreFdInfoKHR>) = Loader<unit>.vkImportSemaphoreFdKHR.Invoke(device, pImportSemaphoreFdInfo)
            let vkGetSemaphoreFdKHR(device : VkDevice, pGetFdInfo : nativeptr<VkSemaphoreGetFdInfoKHR>, pFd : nativeptr<int32>) = Loader<unit>.vkGetSemaphoreFdKHR.Invoke(device, pGetFdInfo, pFd)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan14.
    module KHRPushDescriptor =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_push_descriptor"
        let Number = 81

        type VkPhysicalDevicePushDescriptorPropertiesKHR = Vulkan14.VkPhysicalDevicePushDescriptorProperties


        [<AutoOpen>]
        module EnumExtensions =
             type VkDescriptorSetLayoutCreateFlags with
                  /// Descriptors are pushed via flink:vkCmdPushDescriptorSet
                  static member inline PushDescriptorBitKhr = enum<VkDescriptorSetLayoutCreateFlags> 0x00000001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdPushDescriptorSetKHRDel = delegate of VkCommandBuffer * VkPipelineBindPoint * VkPipelineLayout * uint32 * uint32 * nativeptr<VkWriteDescriptorSet> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRPushDescriptor")
                static let s_vkCmdPushDescriptorSetKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdPushDescriptorSetKHRDel> "vkCmdPushDescriptorSetKHR"
                static do Report.End(3) |> ignore
                static member vkCmdPushDescriptorSetKHR = s_vkCmdPushDescriptorSetKHRDel
            let vkCmdPushDescriptorSetKHR(commandBuffer : VkCommandBuffer, pipelineBindPoint : VkPipelineBindPoint, layout : VkPipelineLayout, set : uint32, descriptorWriteCount : uint32, pDescriptorWrites : nativeptr<VkWriteDescriptorSet>) = Loader<unit>.vkCmdPushDescriptorSetKHR.Invoke(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites)

        [<AutoOpen>]
        module ``Vulkan11 | KHRDescriptorUpdateTemplate`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan11.VkDescriptorUpdateTemplateType with
                      /// Create descriptor update template for pushed descriptor updates
                      static member inline PushDescriptorsKhr = enum<Vulkan11.VkDescriptorUpdateTemplateType> 1

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdPushDescriptorSetWithTemplateKHRDel = delegate of VkCommandBuffer * Vulkan11.VkDescriptorUpdateTemplate * VkPipelineLayout * uint32 * nativeint -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading KHRPushDescriptor -> Vulkan11 | KHRDescriptorUpdateTemplate")
                    static let s_vkCmdPushDescriptorSetWithTemplateKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdPushDescriptorSetWithTemplateKHRDel> "vkCmdPushDescriptorSetWithTemplateKHR"
                    static do Report.End(3) |> ignore
                    static member vkCmdPushDescriptorSetWithTemplateKHR = s_vkCmdPushDescriptorSetWithTemplateKHRDel
                let vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer : VkCommandBuffer, descriptorUpdateTemplate : Vulkan11.VkDescriptorUpdateTemplate, layout : VkPipelineLayout, set : uint32, pData : nativeint) = Loader<unit>.vkCmdPushDescriptorSetWithTemplateKHR.Invoke(commandBuffer, descriptorUpdateTemplate, layout, set, pData)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTConditionalRendering =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_conditional_rendering"
        let Number = 82

        [<Flags>]
        type VkConditionalRenderingFlagsEXT =
            | All = 1
            | None = 0
            | InvertedBit = 0x00000001


        [<StructLayout(LayoutKind.Sequential)>]
        type VkCommandBufferInheritanceConditionalRenderingInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public conditionalRenderingEnable : VkBool32

                new(pNext: nativeint, conditionalRenderingEnable: VkBool32) =
                    {
                        sType = 1000081000u
                        pNext = pNext
                        conditionalRenderingEnable = conditionalRenderingEnable
                    }

                new(conditionalRenderingEnable: VkBool32) =
                    VkCommandBufferInheritanceConditionalRenderingInfoEXT(Unchecked.defaultof<nativeint>, conditionalRenderingEnable)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.conditionalRenderingEnable = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkCommandBufferInheritanceConditionalRenderingInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "conditionalRenderingEnable = %A" x.conditionalRenderingEnable
                    ] |> sprintf "VkCommandBufferInheritanceConditionalRenderingInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkConditionalRenderingBeginInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public buffer : VkBuffer
                val mutable public offset : VkDeviceSize
                val mutable public flags : VkConditionalRenderingFlagsEXT

                new(pNext: nativeint, buffer: VkBuffer, offset: VkDeviceSize, flags: VkConditionalRenderingFlagsEXT) =
                    {
                        sType = 1000081002u
                        pNext = pNext
                        buffer = buffer
                        offset = offset
                        flags = flags
                    }

                new(buffer: VkBuffer, offset: VkDeviceSize, flags: VkConditionalRenderingFlagsEXT) =
                    VkConditionalRenderingBeginInfoEXT(Unchecked.defaultof<nativeint>, buffer, offset, flags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.flags = Unchecked.defaultof<VkConditionalRenderingFlagsEXT>

                static member Empty =
                    VkConditionalRenderingBeginInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkConditionalRenderingFlagsEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "buffer = %A" x.buffer
                        sprintf "offset = %A" x.offset
                        sprintf "flags = %A" x.flags
                    ] |> sprintf "VkConditionalRenderingBeginInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceConditionalRenderingFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public conditionalRendering : VkBool32
                val mutable public inheritedConditionalRendering : VkBool32

                new(pNext: nativeint, conditionalRendering: VkBool32, inheritedConditionalRendering: VkBool32) =
                    {
                        sType = 1000081001u
                        pNext = pNext
                        conditionalRendering = conditionalRendering
                        inheritedConditionalRendering = inheritedConditionalRendering
                    }

                new(conditionalRendering: VkBool32, inheritedConditionalRendering: VkBool32) =
                    VkPhysicalDeviceConditionalRenderingFeaturesEXT(Unchecked.defaultof<nativeint>, conditionalRendering, inheritedConditionalRendering)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.conditionalRendering = Unchecked.defaultof<VkBool32> && x.inheritedConditionalRendering = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceConditionalRenderingFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "conditionalRendering = %A" x.conditionalRendering
                        sprintf "inheritedConditionalRendering = %A" x.inheritedConditionalRendering
                    ] |> sprintf "VkPhysicalDeviceConditionalRenderingFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags with
                  /// read access flag for reading conditional rendering predicate
                  static member inline ConditionalRenderingReadBitExt = enum<VkAccessFlags> 0x00100000
             type VkBufferUsageFlags with
                  /// Specifies the buffer can be used as predicate in conditional rendering
                  static member inline ConditionalRenderingBitExt = enum<VkBufferUsageFlags> 0x00000200
             type VkPipelineStageFlags with
                  /// A pipeline stage for conditional rendering predicate fetch
                  static member inline ConditionalRenderingBitExt = enum<VkPipelineStageFlags> 0x00040000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBeginConditionalRenderingEXTDel = delegate of VkCommandBuffer * nativeptr<VkConditionalRenderingBeginInfoEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdEndConditionalRenderingEXTDel = delegate of VkCommandBuffer -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTConditionalRendering")
                static let s_vkCmdBeginConditionalRenderingEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginConditionalRenderingEXTDel> "vkCmdBeginConditionalRenderingEXT"
                static let s_vkCmdEndConditionalRenderingEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdEndConditionalRenderingEXTDel> "vkCmdEndConditionalRenderingEXT"
                static do Report.End(3) |> ignore
                static member vkCmdBeginConditionalRenderingEXT = s_vkCmdBeginConditionalRenderingEXTDel
                static member vkCmdEndConditionalRenderingEXT = s_vkCmdEndConditionalRenderingEXTDel
            let vkCmdBeginConditionalRenderingEXT(commandBuffer : VkCommandBuffer, pConditionalRenderingBegin : nativeptr<VkConditionalRenderingBeginInfoEXT>) = Loader<unit>.vkCmdBeginConditionalRenderingEXT.Invoke(commandBuffer, pConditionalRenderingBegin)
            let vkCmdEndConditionalRenderingEXT(commandBuffer : VkCommandBuffer) = Loader<unit>.vkCmdEndConditionalRenderingEXT.Invoke(commandBuffer)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan12.
    module KHRShaderFloat16Int8 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_float16_int8"
        let Number = 83

        type VkPhysicalDeviceFloat16Int8FeaturesKHR = Vulkan12.VkPhysicalDeviceShaderFloat16Int8Features

        type VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = Vulkan12.VkPhysicalDeviceShaderFloat16Int8Features



    /// Requires (KHRGetPhysicalDeviceProperties2, KHRStorageBufferStorageClass) | Vulkan11.
    /// Promoted to Vulkan11.
    module KHR16bitStorage =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_16bit_storage"
        let Number = 84

        type VkPhysicalDevice16BitStorageFeaturesKHR = Vulkan11.VkPhysicalDevice16BitStorageFeatures



    /// Requires KHRSwapchain.
    module KHRIncrementalPresent =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_incremental_present"
        let Number = 85

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRectLayerKHR =
            struct
                val mutable public offset : VkOffset2D
                val mutable public extent : VkExtent2D
                val mutable public layer : uint32

                new(offset: VkOffset2D, extent: VkExtent2D, layer: uint32) =
                    {
                        offset = offset
                        extent = extent
                        layer = layer
                    }

                member x.IsEmpty =
                    x.offset = Unchecked.defaultof<VkOffset2D> && x.extent = Unchecked.defaultof<VkExtent2D> && x.layer = Unchecked.defaultof<uint32>

                static member Empty =
                    VkRectLayerKHR(Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "offset = %A" x.offset
                        sprintf "extent = %A" x.extent
                        sprintf "layer = %A" x.layer
                    ] |> sprintf "VkRectLayerKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPresentRegionKHR =
            struct
                val mutable public rectangleCount : uint32
                val mutable public pRectangles : nativeptr<VkRectLayerKHR>

                new(rectangleCount: uint32, pRectangles: nativeptr<VkRectLayerKHR>) =
                    {
                        rectangleCount = rectangleCount
                        pRectangles = pRectangles
                    }

                member x.IsEmpty =
                    x.rectangleCount = Unchecked.defaultof<uint32> && x.pRectangles = Unchecked.defaultof<nativeptr<VkRectLayerKHR>>

                static member Empty =
                    VkPresentRegionKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRectLayerKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "rectangleCount = %A" x.rectangleCount
                        sprintf "pRectangles = %A" x.pRectangles
                    ] |> sprintf "VkPresentRegionKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPresentRegionsKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public swapchainCount : uint32
                val mutable public pRegions : nativeptr<VkPresentRegionKHR>

                new(pNext: nativeint, swapchainCount: uint32, pRegions: nativeptr<VkPresentRegionKHR>) =
                    {
                        sType = 1000084000u
                        pNext = pNext
                        swapchainCount = swapchainCount
                        pRegions = pRegions
                    }

                new(swapchainCount: uint32, pRegions: nativeptr<VkPresentRegionKHR>) =
                    VkPresentRegionsKHR(Unchecked.defaultof<nativeint>, swapchainCount, pRegions)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.swapchainCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkPresentRegionKHR>>

                static member Empty =
                    VkPresentRegionsKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPresentRegionKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "swapchainCount = %A" x.swapchainCount
                        sprintf "pRegions = %A" x.pRegions
                    ] |> sprintf "VkPresentRegionsKHR { %s }"
            end



    /// Promoted to Vulkan11.
    module KHRDescriptorUpdateTemplate =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_descriptor_update_template"
        let Number = 86

        type VkDescriptorUpdateTemplateKHR = Vulkan11.VkDescriptorUpdateTemplate
        type VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags
        type VkDescriptorUpdateTemplateTypeKHR = Vulkan11.VkDescriptorUpdateTemplateType

        type VkDescriptorUpdateTemplateCreateInfoKHR = Vulkan11.VkDescriptorUpdateTemplateCreateInfo

        type VkDescriptorUpdateTemplateEntryKHR = Vulkan11.VkDescriptorUpdateTemplateEntry


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkDescriptorUpdateTemplateType with
                  static member inline DescriptorSetKhr = enum<Vulkan11.VkDescriptorUpdateTemplateType> 0
             type VkObjectType with
                  static member inline DescriptorUpdateTemplateKhr = enum<VkObjectType> 1000085000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateDescriptorUpdateTemplateKHRDel = delegate of VkDevice * nativeptr<Vulkan11.VkDescriptorUpdateTemplateCreateInfo> * nativeptr<VkAllocationCallbacks> * nativeptr<Vulkan11.VkDescriptorUpdateTemplate> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyDescriptorUpdateTemplateKHRDel = delegate of VkDevice * Vulkan11.VkDescriptorUpdateTemplate * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkUpdateDescriptorSetWithTemplateKHRDel = delegate of VkDevice * VkDescriptorSet * Vulkan11.VkDescriptorUpdateTemplate * nativeint -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRDescriptorUpdateTemplate")
                static let s_vkCreateDescriptorUpdateTemplateKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateDescriptorUpdateTemplateKHRDel> "vkCreateDescriptorUpdateTemplateKHR"
                static let s_vkDestroyDescriptorUpdateTemplateKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroyDescriptorUpdateTemplateKHRDel> "vkDestroyDescriptorUpdateTemplateKHR"
                static let s_vkUpdateDescriptorSetWithTemplateKHRDel = VkRaw.vkImportInstanceDelegate<VkUpdateDescriptorSetWithTemplateKHRDel> "vkUpdateDescriptorSetWithTemplateKHR"
                static do Report.End(3) |> ignore
                static member vkCreateDescriptorUpdateTemplateKHR = s_vkCreateDescriptorUpdateTemplateKHRDel
                static member vkDestroyDescriptorUpdateTemplateKHR = s_vkDestroyDescriptorUpdateTemplateKHRDel
                static member vkUpdateDescriptorSetWithTemplateKHR = s_vkUpdateDescriptorSetWithTemplateKHRDel
            let vkCreateDescriptorUpdateTemplateKHR(device : VkDevice, pCreateInfo : nativeptr<Vulkan11.VkDescriptorUpdateTemplateCreateInfo>, pAllocator : nativeptr<VkAllocationCallbacks>, pDescriptorUpdateTemplate : nativeptr<Vulkan11.VkDescriptorUpdateTemplate>) = Loader<unit>.vkCreateDescriptorUpdateTemplateKHR.Invoke(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate)
            let vkDestroyDescriptorUpdateTemplateKHR(device : VkDevice, descriptorUpdateTemplate : Vulkan11.VkDescriptorUpdateTemplate, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyDescriptorUpdateTemplateKHR.Invoke(device, descriptorUpdateTemplate, pAllocator)
            let vkUpdateDescriptorSetWithTemplateKHR(device : VkDevice, descriptorSet : VkDescriptorSet, descriptorUpdateTemplate : Vulkan11.VkDescriptorUpdateTemplate, pData : nativeint) = Loader<unit>.vkUpdateDescriptorSetWithTemplateKHR.Invoke(device, descriptorSet, descriptorUpdateTemplate, pData)

        [<AutoOpen>]
        module ``KHRPushDescriptor`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan11.VkDescriptorUpdateTemplateType with
                      /// Create descriptor update template for pushed descriptor updates
                      static member inline PushDescriptorsKhr = enum<Vulkan11.VkDescriptorUpdateTemplateType> 1

            module VkRaw =
                let vkCmdPushDescriptorSetWithTemplateKHR = KHRPushDescriptor.``Vulkan11 | KHRDescriptorUpdateTemplate``.VkRaw.vkCmdPushDescriptorSetWithTemplateKHR

        [<AutoOpen>]
        module ``EXTDebugReport`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type EXTDebugReport.VkDebugReportObjectTypeEXT with
                      static member inline DescriptorUpdateTemplateKhr = enum<EXTDebugReport.VkDebugReportObjectTypeEXT> 1000085000


    module NVClipSpaceWScaling =
        let Type = ExtensionType.Device
        let Name = "VK_NV_clip_space_w_scaling"
        let Number = 88

        [<StructLayout(LayoutKind.Sequential)>]
        type VkViewportWScalingNV =
            struct
                val mutable public xcoeff : float32
                val mutable public ycoeff : float32

                new(xcoeff: float32, ycoeff: float32) =
                    {
                        xcoeff = xcoeff
                        ycoeff = ycoeff
                    }

                member x.IsEmpty =
                    x.xcoeff = Unchecked.defaultof<float32> && x.ycoeff = Unchecked.defaultof<float32>

                static member Empty =
                    VkViewportWScalingNV(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "xcoeff = %A" x.xcoeff
                        sprintf "ycoeff = %A" x.ycoeff
                    ] |> sprintf "VkViewportWScalingNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineViewportWScalingStateCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public viewportWScalingEnable : VkBool32
                val mutable public viewportCount : uint32
                val mutable public pViewportWScalings : nativeptr<VkViewportWScalingNV>

                new(pNext: nativeint, viewportWScalingEnable: VkBool32, viewportCount: uint32, pViewportWScalings: nativeptr<VkViewportWScalingNV>) =
                    {
                        sType = 1000087000u
                        pNext = pNext
                        viewportWScalingEnable = viewportWScalingEnable
                        viewportCount = viewportCount
                        pViewportWScalings = pViewportWScalings
                    }

                new(viewportWScalingEnable: VkBool32, viewportCount: uint32, pViewportWScalings: nativeptr<VkViewportWScalingNV>) =
                    VkPipelineViewportWScalingStateCreateInfoNV(Unchecked.defaultof<nativeint>, viewportWScalingEnable, viewportCount, pViewportWScalings)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.viewportWScalingEnable = Unchecked.defaultof<VkBool32> && x.viewportCount = Unchecked.defaultof<uint32> && x.pViewportWScalings = Unchecked.defaultof<nativeptr<VkViewportWScalingNV>>

                static member Empty =
                    VkPipelineViewportWScalingStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkViewportWScalingNV>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "viewportWScalingEnable = %A" x.viewportWScalingEnable
                        sprintf "viewportCount = %A" x.viewportCount
                        sprintf "pViewportWScalings = %A" x.pViewportWScalings
                    ] |> sprintf "VkPipelineViewportWScalingStateCreateInfoNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  static member inline ViewportWScalingNv = enum<VkDynamicState> 1000087000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetViewportWScalingNVDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkViewportWScalingNV> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVClipSpaceWScaling")
                static let s_vkCmdSetViewportWScalingNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetViewportWScalingNVDel> "vkCmdSetViewportWScalingNV"
                static do Report.End(3) |> ignore
                static member vkCmdSetViewportWScalingNV = s_vkCmdSetViewportWScalingNVDel
            let vkCmdSetViewportWScalingNV(commandBuffer : VkCommandBuffer, firstViewport : uint32, viewportCount : uint32, pViewportWScalings : nativeptr<VkViewportWScalingNV>) = Loader<unit>.vkCmdSetViewportWScalingNV.Invoke(commandBuffer, firstViewport, viewportCount, pViewportWScalings)

    /// Requires KHRDisplay.
    module EXTDirectModeDisplay =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_direct_mode_display"
        let Number = 89

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkReleaseDisplayEXTDel = delegate of VkPhysicalDevice * KHRDisplay.VkDisplayKHR -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTDirectModeDisplay")
                static let s_vkReleaseDisplayEXTDel = VkRaw.vkImportInstanceDelegate<VkReleaseDisplayEXTDel> "vkReleaseDisplayEXT"
                static do Report.End(3) |> ignore
                static member vkReleaseDisplayEXT = s_vkReleaseDisplayEXTDel
            let vkReleaseDisplayEXT(physicalDevice : VkPhysicalDevice, display : KHRDisplay.VkDisplayKHR) = Loader<unit>.vkReleaseDisplayEXT.Invoke(physicalDevice, display)

    /// Requires EXTDirectModeDisplay.
    module EXTAcquireXlibDisplay =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_acquire_xlib_display"
        let Number = 90

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkAcquireXlibDisplayEXTDel = delegate of VkPhysicalDevice * nativeptr<nativeint> * KHRDisplay.VkDisplayKHR -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetRandROutputDisplayEXTDel = delegate of VkPhysicalDevice * nativeptr<nativeint> * nativeint * nativeptr<KHRDisplay.VkDisplayKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTAcquireXlibDisplay")
                static let s_vkAcquireXlibDisplayEXTDel = VkRaw.vkImportInstanceDelegate<VkAcquireXlibDisplayEXTDel> "vkAcquireXlibDisplayEXT"
                static let s_vkGetRandROutputDisplayEXTDel = VkRaw.vkImportInstanceDelegate<VkGetRandROutputDisplayEXTDel> "vkGetRandROutputDisplayEXT"
                static do Report.End(3) |> ignore
                static member vkAcquireXlibDisplayEXT = s_vkAcquireXlibDisplayEXTDel
                static member vkGetRandROutputDisplayEXT = s_vkGetRandROutputDisplayEXTDel
            let vkAcquireXlibDisplayEXT(physicalDevice : VkPhysicalDevice, dpy : nativeptr<nativeint>, display : KHRDisplay.VkDisplayKHR) = Loader<unit>.vkAcquireXlibDisplayEXT.Invoke(physicalDevice, dpy, display)
            let vkGetRandROutputDisplayEXT(physicalDevice : VkPhysicalDevice, dpy : nativeptr<nativeint>, rrOutput : nativeint, pDisplay : nativeptr<KHRDisplay.VkDisplayKHR>) = Loader<unit>.vkGetRandROutputDisplayEXT.Invoke(physicalDevice, dpy, rrOutput, pDisplay)

    /// Requires KHRDisplay.
    module EXTDisplaySurfaceCounter =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_display_surface_counter"
        let Number = 91

        [<Flags>]
        type VkSurfaceCounterFlagsEXT =
            | All = 1
            | None = 0
            | VblankBit = 0x00000001


        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfaceCapabilities2EXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public minImageCount : uint32
                val mutable public maxImageCount : uint32
                val mutable public currentExtent : VkExtent2D
                val mutable public minImageExtent : VkExtent2D
                val mutable public maxImageExtent : VkExtent2D
                val mutable public maxImageArrayLayers : uint32
                val mutable public supportedTransforms : KHRSurface.VkSurfaceTransformFlagsKHR
                val mutable public currentTransform : KHRSurface.VkSurfaceTransformFlagsKHR
                val mutable public supportedCompositeAlpha : KHRSurface.VkCompositeAlphaFlagsKHR
                val mutable public supportedUsageFlags : VkImageUsageFlags
                val mutable public supportedSurfaceCounters : VkSurfaceCounterFlagsEXT

                new(pNext: nativeint, minImageCount: uint32, maxImageCount: uint32, currentExtent: VkExtent2D, minImageExtent: VkExtent2D, maxImageExtent: VkExtent2D, maxImageArrayLayers: uint32, supportedTransforms: KHRSurface.VkSurfaceTransformFlagsKHR, currentTransform: KHRSurface.VkSurfaceTransformFlagsKHR, supportedCompositeAlpha: KHRSurface.VkCompositeAlphaFlagsKHR, supportedUsageFlags: VkImageUsageFlags, supportedSurfaceCounters: VkSurfaceCounterFlagsEXT) =
                    {
                        sType = 1000090000u
                        pNext = pNext
                        minImageCount = minImageCount
                        maxImageCount = maxImageCount
                        currentExtent = currentExtent
                        minImageExtent = minImageExtent
                        maxImageExtent = maxImageExtent
                        maxImageArrayLayers = maxImageArrayLayers
                        supportedTransforms = supportedTransforms
                        currentTransform = currentTransform
                        supportedCompositeAlpha = supportedCompositeAlpha
                        supportedUsageFlags = supportedUsageFlags
                        supportedSurfaceCounters = supportedSurfaceCounters
                    }

                new(minImageCount: uint32, maxImageCount: uint32, currentExtent: VkExtent2D, minImageExtent: VkExtent2D, maxImageExtent: VkExtent2D, maxImageArrayLayers: uint32, supportedTransforms: KHRSurface.VkSurfaceTransformFlagsKHR, currentTransform: KHRSurface.VkSurfaceTransformFlagsKHR, supportedCompositeAlpha: KHRSurface.VkCompositeAlphaFlagsKHR, supportedUsageFlags: VkImageUsageFlags, supportedSurfaceCounters: VkSurfaceCounterFlagsEXT) =
                    VkSurfaceCapabilities2EXT(Unchecked.defaultof<nativeint>, minImageCount, maxImageCount, currentExtent, minImageExtent, maxImageExtent, maxImageArrayLayers, supportedTransforms, currentTransform, supportedCompositeAlpha, supportedUsageFlags, supportedSurfaceCounters)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.minImageCount = Unchecked.defaultof<uint32> && x.maxImageCount = Unchecked.defaultof<uint32> && x.currentExtent = Unchecked.defaultof<VkExtent2D> && x.minImageExtent = Unchecked.defaultof<VkExtent2D> && x.maxImageExtent = Unchecked.defaultof<VkExtent2D> && x.maxImageArrayLayers = Unchecked.defaultof<uint32> && x.supportedTransforms = Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR> && x.currentTransform = Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR> && x.supportedCompositeAlpha = Unchecked.defaultof<KHRSurface.VkCompositeAlphaFlagsKHR> && x.supportedUsageFlags = Unchecked.defaultof<VkImageUsageFlags> && x.supportedSurfaceCounters = Unchecked.defaultof<VkSurfaceCounterFlagsEXT>

                static member Empty =
                    VkSurfaceCapabilities2EXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<KHRSurface.VkCompositeAlphaFlagsKHR>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<VkSurfaceCounterFlagsEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "minImageCount = %A" x.minImageCount
                        sprintf "maxImageCount = %A" x.maxImageCount
                        sprintf "currentExtent = %A" x.currentExtent
                        sprintf "minImageExtent = %A" x.minImageExtent
                        sprintf "maxImageExtent = %A" x.maxImageExtent
                        sprintf "maxImageArrayLayers = %A" x.maxImageArrayLayers
                        sprintf "supportedTransforms = %A" x.supportedTransforms
                        sprintf "currentTransform = %A" x.currentTransform
                        sprintf "supportedCompositeAlpha = %A" x.supportedCompositeAlpha
                        sprintf "supportedUsageFlags = %A" x.supportedUsageFlags
                        sprintf "supportedSurfaceCounters = %A" x.supportedSurfaceCounters
                    ] |> sprintf "VkSurfaceCapabilities2EXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceSurfaceCapabilities2EXTDel = delegate of VkPhysicalDevice * KHRSurface.VkSurfaceKHR * nativeptr<VkSurfaceCapabilities2EXT> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTDisplaySurfaceCounter")
                static let s_vkGetPhysicalDeviceSurfaceCapabilities2EXTDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfaceCapabilities2EXTDel> "vkGetPhysicalDeviceSurfaceCapabilities2EXT"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceSurfaceCapabilities2EXT = s_vkGetPhysicalDeviceSurfaceCapabilities2EXTDel
            let vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice : VkPhysicalDevice, surface : KHRSurface.VkSurfaceKHR, pSurfaceCapabilities : nativeptr<VkSurfaceCapabilities2EXT>) = Loader<unit>.vkGetPhysicalDeviceSurfaceCapabilities2EXT.Invoke(physicalDevice, surface, pSurfaceCapabilities)

    /// Requires EXTDisplaySurfaceCounter, KHRSwapchain.
    module EXTDisplayControl =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_display_control"
        let Number = 92

        type VkDisplayPowerStateEXT =
            | Off = 0
            | Suspend = 1
            | On = 2

        type VkDeviceEventTypeEXT =
            | DisplayHotplug = 0

        type VkDisplayEventTypeEXT =
            | FirstPixelOut = 0


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceEventInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public deviceEvent : VkDeviceEventTypeEXT

                new(pNext: nativeint, deviceEvent: VkDeviceEventTypeEXT) =
                    {
                        sType = 1000091001u
                        pNext = pNext
                        deviceEvent = deviceEvent
                    }

                new(deviceEvent: VkDeviceEventTypeEXT) =
                    VkDeviceEventInfoEXT(Unchecked.defaultof<nativeint>, deviceEvent)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.deviceEvent = Unchecked.defaultof<VkDeviceEventTypeEXT>

                static member Empty =
                    VkDeviceEventInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceEventTypeEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "deviceEvent = %A" x.deviceEvent
                    ] |> sprintf "VkDeviceEventInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayEventInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public displayEvent : VkDisplayEventTypeEXT

                new(pNext: nativeint, displayEvent: VkDisplayEventTypeEXT) =
                    {
                        sType = 1000091002u
                        pNext = pNext
                        displayEvent = displayEvent
                    }

                new(displayEvent: VkDisplayEventTypeEXT) =
                    VkDisplayEventInfoEXT(Unchecked.defaultof<nativeint>, displayEvent)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.displayEvent = Unchecked.defaultof<VkDisplayEventTypeEXT>

                static member Empty =
                    VkDisplayEventInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplayEventTypeEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "displayEvent = %A" x.displayEvent
                    ] |> sprintf "VkDisplayEventInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayPowerInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public powerState : VkDisplayPowerStateEXT

                new(pNext: nativeint, powerState: VkDisplayPowerStateEXT) =
                    {
                        sType = 1000091000u
                        pNext = pNext
                        powerState = powerState
                    }

                new(powerState: VkDisplayPowerStateEXT) =
                    VkDisplayPowerInfoEXT(Unchecked.defaultof<nativeint>, powerState)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.powerState = Unchecked.defaultof<VkDisplayPowerStateEXT>

                static member Empty =
                    VkDisplayPowerInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplayPowerStateEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "powerState = %A" x.powerState
                    ] |> sprintf "VkDisplayPowerInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSwapchainCounterCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public surfaceCounters : EXTDisplaySurfaceCounter.VkSurfaceCounterFlagsEXT

                new(pNext: nativeint, surfaceCounters: EXTDisplaySurfaceCounter.VkSurfaceCounterFlagsEXT) =
                    {
                        sType = 1000091003u
                        pNext = pNext
                        surfaceCounters = surfaceCounters
                    }

                new(surfaceCounters: EXTDisplaySurfaceCounter.VkSurfaceCounterFlagsEXT) =
                    VkSwapchainCounterCreateInfoEXT(Unchecked.defaultof<nativeint>, surfaceCounters)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.surfaceCounters = Unchecked.defaultof<EXTDisplaySurfaceCounter.VkSurfaceCounterFlagsEXT>

                static member Empty =
                    VkSwapchainCounterCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<EXTDisplaySurfaceCounter.VkSurfaceCounterFlagsEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "surfaceCounters = %A" x.surfaceCounters
                    ] |> sprintf "VkSwapchainCounterCreateInfoEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkDisplayPowerControlEXTDel = delegate of VkDevice * KHRDisplay.VkDisplayKHR * nativeptr<VkDisplayPowerInfoEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkRegisterDeviceEventEXTDel = delegate of VkDevice * nativeptr<VkDeviceEventInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkFence> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkRegisterDisplayEventEXTDel = delegate of VkDevice * KHRDisplay.VkDisplayKHR * nativeptr<VkDisplayEventInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkFence> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetSwapchainCounterEXTDel = delegate of VkDevice * KHRSwapchain.VkSwapchainKHR * EXTDisplaySurfaceCounter.VkSurfaceCounterFlagsEXT * nativeptr<uint64> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTDisplayControl")
                static let s_vkDisplayPowerControlEXTDel = VkRaw.vkImportInstanceDelegate<VkDisplayPowerControlEXTDel> "vkDisplayPowerControlEXT"
                static let s_vkRegisterDeviceEventEXTDel = VkRaw.vkImportInstanceDelegate<VkRegisterDeviceEventEXTDel> "vkRegisterDeviceEventEXT"
                static let s_vkRegisterDisplayEventEXTDel = VkRaw.vkImportInstanceDelegate<VkRegisterDisplayEventEXTDel> "vkRegisterDisplayEventEXT"
                static let s_vkGetSwapchainCounterEXTDel = VkRaw.vkImportInstanceDelegate<VkGetSwapchainCounterEXTDel> "vkGetSwapchainCounterEXT"
                static do Report.End(3) |> ignore
                static member vkDisplayPowerControlEXT = s_vkDisplayPowerControlEXTDel
                static member vkRegisterDeviceEventEXT = s_vkRegisterDeviceEventEXTDel
                static member vkRegisterDisplayEventEXT = s_vkRegisterDisplayEventEXTDel
                static member vkGetSwapchainCounterEXT = s_vkGetSwapchainCounterEXTDel
            let vkDisplayPowerControlEXT(device : VkDevice, display : KHRDisplay.VkDisplayKHR, pDisplayPowerInfo : nativeptr<VkDisplayPowerInfoEXT>) = Loader<unit>.vkDisplayPowerControlEXT.Invoke(device, display, pDisplayPowerInfo)
            let vkRegisterDeviceEventEXT(device : VkDevice, pDeviceEventInfo : nativeptr<VkDeviceEventInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pFence : nativeptr<VkFence>) = Loader<unit>.vkRegisterDeviceEventEXT.Invoke(device, pDeviceEventInfo, pAllocator, pFence)
            let vkRegisterDisplayEventEXT(device : VkDevice, display : KHRDisplay.VkDisplayKHR, pDisplayEventInfo : nativeptr<VkDisplayEventInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pFence : nativeptr<VkFence>) = Loader<unit>.vkRegisterDisplayEventEXT.Invoke(device, display, pDisplayEventInfo, pAllocator, pFence)
            let vkGetSwapchainCounterEXT(device : VkDevice, swapchain : KHRSwapchain.VkSwapchainKHR, counter : EXTDisplaySurfaceCounter.VkSurfaceCounterFlagsEXT, pCounterValue : nativeptr<uint64>) = Loader<unit>.vkGetSwapchainCounterEXT.Invoke(device, swapchain, counter, pCounterValue)

    /// Requires KHRSwapchain.
    module GOOGLEDisplayTiming =
        let Type = ExtensionType.Device
        let Name = "VK_GOOGLE_display_timing"
        let Number = 93

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPastPresentationTimingGOOGLE =
            struct
                val mutable public presentID : uint32
                val mutable public desiredPresentTime : uint64
                val mutable public actualPresentTime : uint64
                val mutable public earliestPresentTime : uint64
                val mutable public presentMargin : uint64

                new(presentID: uint32, desiredPresentTime: uint64, actualPresentTime: uint64, earliestPresentTime: uint64, presentMargin: uint64) =
                    {
                        presentID = presentID
                        desiredPresentTime = desiredPresentTime
                        actualPresentTime = actualPresentTime
                        earliestPresentTime = earliestPresentTime
                        presentMargin = presentMargin
                    }

                member x.IsEmpty =
                    x.presentID = Unchecked.defaultof<uint32> && x.desiredPresentTime = Unchecked.defaultof<uint64> && x.actualPresentTime = Unchecked.defaultof<uint64> && x.earliestPresentTime = Unchecked.defaultof<uint64> && x.presentMargin = Unchecked.defaultof<uint64>

                static member Empty =
                    VkPastPresentationTimingGOOGLE(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "presentID = %A" x.presentID
                        sprintf "desiredPresentTime = %A" x.desiredPresentTime
                        sprintf "actualPresentTime = %A" x.actualPresentTime
                        sprintf "earliestPresentTime = %A" x.earliestPresentTime
                        sprintf "presentMargin = %A" x.presentMargin
                    ] |> sprintf "VkPastPresentationTimingGOOGLE { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPresentTimeGOOGLE =
            struct
                val mutable public presentID : uint32
                val mutable public desiredPresentTime : uint64

                new(presentID: uint32, desiredPresentTime: uint64) =
                    {
                        presentID = presentID
                        desiredPresentTime = desiredPresentTime
                    }

                member x.IsEmpty =
                    x.presentID = Unchecked.defaultof<uint32> && x.desiredPresentTime = Unchecked.defaultof<uint64>

                static member Empty =
                    VkPresentTimeGOOGLE(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "presentID = %A" x.presentID
                        sprintf "desiredPresentTime = %A" x.desiredPresentTime
                    ] |> sprintf "VkPresentTimeGOOGLE { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPresentTimesInfoGOOGLE =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public swapchainCount : uint32
                val mutable public pTimes : nativeptr<VkPresentTimeGOOGLE>

                new(pNext: nativeint, swapchainCount: uint32, pTimes: nativeptr<VkPresentTimeGOOGLE>) =
                    {
                        sType = 1000092000u
                        pNext = pNext
                        swapchainCount = swapchainCount
                        pTimes = pTimes
                    }

                new(swapchainCount: uint32, pTimes: nativeptr<VkPresentTimeGOOGLE>) =
                    VkPresentTimesInfoGOOGLE(Unchecked.defaultof<nativeint>, swapchainCount, pTimes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.swapchainCount = Unchecked.defaultof<uint32> && x.pTimes = Unchecked.defaultof<nativeptr<VkPresentTimeGOOGLE>>

                static member Empty =
                    VkPresentTimesInfoGOOGLE(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPresentTimeGOOGLE>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "swapchainCount = %A" x.swapchainCount
                        sprintf "pTimes = %A" x.pTimes
                    ] |> sprintf "VkPresentTimesInfoGOOGLE { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRefreshCycleDurationGOOGLE =
            struct
                val mutable public refreshDuration : uint64

                new(refreshDuration: uint64) =
                    {
                        refreshDuration = refreshDuration
                    }

                member x.IsEmpty =
                    x.refreshDuration = Unchecked.defaultof<uint64>

                static member Empty =
                    VkRefreshCycleDurationGOOGLE(Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "refreshDuration = %A" x.refreshDuration
                    ] |> sprintf "VkRefreshCycleDurationGOOGLE { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetRefreshCycleDurationGOOGLEDel = delegate of VkDevice * KHRSwapchain.VkSwapchainKHR * nativeptr<VkRefreshCycleDurationGOOGLE> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPastPresentationTimingGOOGLEDel = delegate of VkDevice * KHRSwapchain.VkSwapchainKHR * nativeptr<uint32> * nativeptr<VkPastPresentationTimingGOOGLE> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading GOOGLEDisplayTiming")
                static let s_vkGetRefreshCycleDurationGOOGLEDel = VkRaw.vkImportInstanceDelegate<VkGetRefreshCycleDurationGOOGLEDel> "vkGetRefreshCycleDurationGOOGLE"
                static let s_vkGetPastPresentationTimingGOOGLEDel = VkRaw.vkImportInstanceDelegate<VkGetPastPresentationTimingGOOGLEDel> "vkGetPastPresentationTimingGOOGLE"
                static do Report.End(3) |> ignore
                static member vkGetRefreshCycleDurationGOOGLE = s_vkGetRefreshCycleDurationGOOGLEDel
                static member vkGetPastPresentationTimingGOOGLE = s_vkGetPastPresentationTimingGOOGLEDel
            let vkGetRefreshCycleDurationGOOGLE(device : VkDevice, swapchain : KHRSwapchain.VkSwapchainKHR, pDisplayTimingProperties : nativeptr<VkRefreshCycleDurationGOOGLE>) = Loader<unit>.vkGetRefreshCycleDurationGOOGLE.Invoke(device, swapchain, pDisplayTimingProperties)
            let vkGetPastPresentationTimingGOOGLE(device : VkDevice, swapchain : KHRSwapchain.VkSwapchainKHR, pPresentationTimingCount : nativeptr<uint32>, pPresentationTimings : nativeptr<VkPastPresentationTimingGOOGLE>) = Loader<unit>.vkGetPastPresentationTimingGOOGLE.Invoke(device, swapchain, pPresentationTimingCount, pPresentationTimings)

    module NVSampleMaskOverrideCoverage =
        let Type = ExtensionType.Device
        let Name = "VK_NV_sample_mask_override_coverage"
        let Number = 95

    module NVGeometryShaderPassthrough =
        let Type = ExtensionType.Device
        let Name = "VK_NV_geometry_shader_passthrough"
        let Number = 96

    module NVViewportArray2 =
        let Type = ExtensionType.Device
        let Name = "VK_NV_viewport_array2"
        let Number = 97

    /// Requires KHRMultiview | Vulkan11.
    module NVXMultiviewPerViewAttributes =
        let Type = ExtensionType.Device
        let Name = "VK_NVX_multiview_per_view_attributes"
        let Number = 98

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public perViewPositionAllComponents : VkBool32

                new(pNext: nativeint, perViewPositionAllComponents: VkBool32) =
                    {
                        sType = 1000097000u
                        pNext = pNext
                        perViewPositionAllComponents = perViewPositionAllComponents
                    }

                new(perViewPositionAllComponents: VkBool32) =
                    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(Unchecked.defaultof<nativeint>, perViewPositionAllComponents)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.perViewPositionAllComponents = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "perViewPositionAllComponents = %A" x.perViewPositionAllComponents
                    ] |> sprintf "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkSubpassDescriptionFlags with
                  static member inline PerViewAttributesBitNvx = enum<VkSubpassDescriptionFlags> 0x00000001
                  static member inline PerViewPositionXOnlyBitNvx = enum<VkSubpassDescriptionFlags> 0x00000002


        [<AutoOpen>]
        module ``Vulkan13 | KHRDynamicRendering`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkMultiviewPerViewAttributesInfoNVX =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public perViewAttributes : VkBool32
                    val mutable public perViewAttributesPositionXOnly : VkBool32

                    new(pNext: nativeint, perViewAttributes: VkBool32, perViewAttributesPositionXOnly: VkBool32) =
                        {
                            sType = 1000044009u
                            pNext = pNext
                            perViewAttributes = perViewAttributes
                            perViewAttributesPositionXOnly = perViewAttributesPositionXOnly
                        }

                    new(perViewAttributes: VkBool32, perViewAttributesPositionXOnly: VkBool32) =
                        VkMultiviewPerViewAttributesInfoNVX(Unchecked.defaultof<nativeint>, perViewAttributes, perViewAttributesPositionXOnly)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.perViewAttributes = Unchecked.defaultof<VkBool32> && x.perViewAttributesPositionXOnly = Unchecked.defaultof<VkBool32>

                    static member Empty =
                        VkMultiviewPerViewAttributesInfoNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "perViewAttributes = %A" x.perViewAttributes
                            sprintf "perViewAttributesPositionXOnly = %A" x.perViewAttributesPositionXOnly
                        ] |> sprintf "VkMultiviewPerViewAttributesInfoNVX { %s }"
                end



    module NVViewportSwizzle =
        let Type = ExtensionType.Device
        let Name = "VK_NV_viewport_swizzle"
        let Number = 99

        type VkViewportCoordinateSwizzleNV =
            | PositiveX = 0
            | NegativeX = 1
            | PositiveY = 2
            | NegativeY = 3
            | PositiveZ = 4
            | NegativeZ = 5
            | PositiveW = 6
            | NegativeW = 7


        [<StructLayout(LayoutKind.Sequential)>]
        type VkViewportSwizzleNV =
            struct
                val mutable public x : VkViewportCoordinateSwizzleNV
                val mutable public y : VkViewportCoordinateSwizzleNV
                val mutable public z : VkViewportCoordinateSwizzleNV
                val mutable public w : VkViewportCoordinateSwizzleNV

                new(x: VkViewportCoordinateSwizzleNV, y: VkViewportCoordinateSwizzleNV, z: VkViewportCoordinateSwizzleNV, w: VkViewportCoordinateSwizzleNV) =
                    {
                        x = x
                        y = y
                        z = z
                        w = w
                    }

                member x.IsEmpty =
                    x.x = Unchecked.defaultof<VkViewportCoordinateSwizzleNV> && x.y = Unchecked.defaultof<VkViewportCoordinateSwizzleNV> && x.z = Unchecked.defaultof<VkViewportCoordinateSwizzleNV> && x.w = Unchecked.defaultof<VkViewportCoordinateSwizzleNV>

                static member Empty =
                    VkViewportSwizzleNV(Unchecked.defaultof<VkViewportCoordinateSwizzleNV>, Unchecked.defaultof<VkViewportCoordinateSwizzleNV>, Unchecked.defaultof<VkViewportCoordinateSwizzleNV>, Unchecked.defaultof<VkViewportCoordinateSwizzleNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "x = %A" x.x
                        sprintf "y = %A" x.y
                        sprintf "z = %A" x.z
                        sprintf "w = %A" x.w
                    ] |> sprintf "VkViewportSwizzleNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineViewportSwizzleStateCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkPipelineViewportSwizzleStateCreateFlagsNV
                val mutable public viewportCount : uint32
                val mutable public pViewportSwizzles : nativeptr<VkViewportSwizzleNV>

                new(pNext: nativeint, flags: VkPipelineViewportSwizzleStateCreateFlagsNV, viewportCount: uint32, pViewportSwizzles: nativeptr<VkViewportSwizzleNV>) =
                    {
                        sType = 1000098000u
                        pNext = pNext
                        flags = flags
                        viewportCount = viewportCount
                        pViewportSwizzles = pViewportSwizzles
                    }

                new(flags: VkPipelineViewportSwizzleStateCreateFlagsNV, viewportCount: uint32, pViewportSwizzles: nativeptr<VkViewportSwizzleNV>) =
                    VkPipelineViewportSwizzleStateCreateInfoNV(Unchecked.defaultof<nativeint>, flags, viewportCount, pViewportSwizzles)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineViewportSwizzleStateCreateFlagsNV> && x.viewportCount = Unchecked.defaultof<uint32> && x.pViewportSwizzles = Unchecked.defaultof<nativeptr<VkViewportSwizzleNV>>

                static member Empty =
                    VkPipelineViewportSwizzleStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineViewportSwizzleStateCreateFlagsNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkViewportSwizzleNV>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "viewportCount = %A" x.viewportCount
                        sprintf "pViewportSwizzles = %A" x.pViewportSwizzles
                    ] |> sprintf "VkPipelineViewportSwizzleStateCreateInfoNV { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTDiscardRectangles =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_discard_rectangles"
        let Number = 100

        type VkDiscardRectangleModeEXT =
            | Inclusive = 0
            | Exclusive = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDiscardRectanglePropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxDiscardRectangles : uint32

                new(pNext: nativeint, maxDiscardRectangles: uint32) =
                    {
                        sType = 1000099000u
                        pNext = pNext
                        maxDiscardRectangles = maxDiscardRectangles
                    }

                new(maxDiscardRectangles: uint32) =
                    VkPhysicalDeviceDiscardRectanglePropertiesEXT(Unchecked.defaultof<nativeint>, maxDiscardRectangles)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxDiscardRectangles = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceDiscardRectanglePropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxDiscardRectangles = %A" x.maxDiscardRectangles
                    ] |> sprintf "VkPhysicalDeviceDiscardRectanglePropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineDiscardRectangleStateCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkPipelineDiscardRectangleStateCreateFlagsEXT
                val mutable public discardRectangleMode : VkDiscardRectangleModeEXT
                val mutable public discardRectangleCount : uint32
                val mutable public pDiscardRectangles : nativeptr<VkRect2D>

                new(pNext: nativeint, flags: VkPipelineDiscardRectangleStateCreateFlagsEXT, discardRectangleMode: VkDiscardRectangleModeEXT, discardRectangleCount: uint32, pDiscardRectangles: nativeptr<VkRect2D>) =
                    {
                        sType = 1000099001u
                        pNext = pNext
                        flags = flags
                        discardRectangleMode = discardRectangleMode
                        discardRectangleCount = discardRectangleCount
                        pDiscardRectangles = pDiscardRectangles
                    }

                new(flags: VkPipelineDiscardRectangleStateCreateFlagsEXT, discardRectangleMode: VkDiscardRectangleModeEXT, discardRectangleCount: uint32, pDiscardRectangles: nativeptr<VkRect2D>) =
                    VkPipelineDiscardRectangleStateCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, discardRectangleMode, discardRectangleCount, pDiscardRectangles)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineDiscardRectangleStateCreateFlagsEXT> && x.discardRectangleMode = Unchecked.defaultof<VkDiscardRectangleModeEXT> && x.discardRectangleCount = Unchecked.defaultof<uint32> && x.pDiscardRectangles = Unchecked.defaultof<nativeptr<VkRect2D>>

                static member Empty =
                    VkPipelineDiscardRectangleStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineDiscardRectangleStateCreateFlagsEXT>, Unchecked.defaultof<VkDiscardRectangleModeEXT>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRect2D>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "discardRectangleMode = %A" x.discardRectangleMode
                        sprintf "discardRectangleCount = %A" x.discardRectangleCount
                        sprintf "pDiscardRectangles = %A" x.pDiscardRectangles
                    ] |> sprintf "VkPipelineDiscardRectangleStateCreateInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  static member inline DiscardRectangleExt = enum<VkDynamicState> 1000099000
                  static member inline DiscardRectangleEnableExt = enum<VkDynamicState> 1000099001
                  static member inline DiscardRectangleModeExt = enum<VkDynamicState> 1000099002

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetDiscardRectangleEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkRect2D> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetDiscardRectangleEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetDiscardRectangleModeEXTDel = delegate of VkCommandBuffer * VkDiscardRectangleModeEXT -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTDiscardRectangles")
                static let s_vkCmdSetDiscardRectangleEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDiscardRectangleEXTDel> "vkCmdSetDiscardRectangleEXT"
                static let s_vkCmdSetDiscardRectangleEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDiscardRectangleEnableEXTDel> "vkCmdSetDiscardRectangleEnableEXT"
                static let s_vkCmdSetDiscardRectangleModeEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDiscardRectangleModeEXTDel> "vkCmdSetDiscardRectangleModeEXT"
                static do Report.End(3) |> ignore
                static member vkCmdSetDiscardRectangleEXT = s_vkCmdSetDiscardRectangleEXTDel
                static member vkCmdSetDiscardRectangleEnableEXT = s_vkCmdSetDiscardRectangleEnableEXTDel
                static member vkCmdSetDiscardRectangleModeEXT = s_vkCmdSetDiscardRectangleModeEXTDel
            let vkCmdSetDiscardRectangleEXT(commandBuffer : VkCommandBuffer, firstDiscardRectangle : uint32, discardRectangleCount : uint32, pDiscardRectangles : nativeptr<VkRect2D>) = Loader<unit>.vkCmdSetDiscardRectangleEXT.Invoke(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles)
            let vkCmdSetDiscardRectangleEnableEXT(commandBuffer : VkCommandBuffer, discardRectangleEnable : VkBool32) = Loader<unit>.vkCmdSetDiscardRectangleEnableEXT.Invoke(commandBuffer, discardRectangleEnable)
            let vkCmdSetDiscardRectangleModeEXT(commandBuffer : VkCommandBuffer, discardRectangleMode : VkDiscardRectangleModeEXT) = Loader<unit>.vkCmdSetDiscardRectangleModeEXT.Invoke(commandBuffer, discardRectangleMode)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTConservativeRasterization =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_conservative_rasterization"
        let Number = 102

        type VkConservativeRasterizationModeEXT =
            | Disabled = 0
            | Overestimate = 1
            | Underestimate = 2


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceConservativeRasterizationPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public primitiveOverestimationSize : float32
                val mutable public maxExtraPrimitiveOverestimationSize : float32
                val mutable public extraPrimitiveOverestimationSizeGranularity : float32
                val mutable public primitiveUnderestimation : VkBool32
                val mutable public conservativePointAndLineRasterization : VkBool32
                val mutable public degenerateTrianglesRasterized : VkBool32
                val mutable public degenerateLinesRasterized : VkBool32
                val mutable public fullyCoveredFragmentShaderInputVariable : VkBool32
                val mutable public conservativeRasterizationPostDepthCoverage : VkBool32

                new(pNext: nativeint, primitiveOverestimationSize: float32, maxExtraPrimitiveOverestimationSize: float32, extraPrimitiveOverestimationSizeGranularity: float32, primitiveUnderestimation: VkBool32, conservativePointAndLineRasterization: VkBool32, degenerateTrianglesRasterized: VkBool32, degenerateLinesRasterized: VkBool32, fullyCoveredFragmentShaderInputVariable: VkBool32, conservativeRasterizationPostDepthCoverage: VkBool32) =
                    {
                        sType = 1000101000u
                        pNext = pNext
                        primitiveOverestimationSize = primitiveOverestimationSize
                        maxExtraPrimitiveOverestimationSize = maxExtraPrimitiveOverestimationSize
                        extraPrimitiveOverestimationSizeGranularity = extraPrimitiveOverestimationSizeGranularity
                        primitiveUnderestimation = primitiveUnderestimation
                        conservativePointAndLineRasterization = conservativePointAndLineRasterization
                        degenerateTrianglesRasterized = degenerateTrianglesRasterized
                        degenerateLinesRasterized = degenerateLinesRasterized
                        fullyCoveredFragmentShaderInputVariable = fullyCoveredFragmentShaderInputVariable
                        conservativeRasterizationPostDepthCoverage = conservativeRasterizationPostDepthCoverage
                    }

                new(primitiveOverestimationSize: float32, maxExtraPrimitiveOverestimationSize: float32, extraPrimitiveOverestimationSizeGranularity: float32, primitiveUnderestimation: VkBool32, conservativePointAndLineRasterization: VkBool32, degenerateTrianglesRasterized: VkBool32, degenerateLinesRasterized: VkBool32, fullyCoveredFragmentShaderInputVariable: VkBool32, conservativeRasterizationPostDepthCoverage: VkBool32) =
                    VkPhysicalDeviceConservativeRasterizationPropertiesEXT(Unchecked.defaultof<nativeint>, primitiveOverestimationSize, maxExtraPrimitiveOverestimationSize, extraPrimitiveOverestimationSizeGranularity, primitiveUnderestimation, conservativePointAndLineRasterization, degenerateTrianglesRasterized, degenerateLinesRasterized, fullyCoveredFragmentShaderInputVariable, conservativeRasterizationPostDepthCoverage)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.primitiveOverestimationSize = Unchecked.defaultof<float32> && x.maxExtraPrimitiveOverestimationSize = Unchecked.defaultof<float32> && x.extraPrimitiveOverestimationSizeGranularity = Unchecked.defaultof<float32> && x.primitiveUnderestimation = Unchecked.defaultof<VkBool32> && x.conservativePointAndLineRasterization = Unchecked.defaultof<VkBool32> && x.degenerateTrianglesRasterized = Unchecked.defaultof<VkBool32> && x.degenerateLinesRasterized = Unchecked.defaultof<VkBool32> && x.fullyCoveredFragmentShaderInputVariable = Unchecked.defaultof<VkBool32> && x.conservativeRasterizationPostDepthCoverage = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceConservativeRasterizationPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "primitiveOverestimationSize = %A" x.primitiveOverestimationSize
                        sprintf "maxExtraPrimitiveOverestimationSize = %A" x.maxExtraPrimitiveOverestimationSize
                        sprintf "extraPrimitiveOverestimationSizeGranularity = %A" x.extraPrimitiveOverestimationSizeGranularity
                        sprintf "primitiveUnderestimation = %A" x.primitiveUnderestimation
                        sprintf "conservativePointAndLineRasterization = %A" x.conservativePointAndLineRasterization
                        sprintf "degenerateTrianglesRasterized = %A" x.degenerateTrianglesRasterized
                        sprintf "degenerateLinesRasterized = %A" x.degenerateLinesRasterized
                        sprintf "fullyCoveredFragmentShaderInputVariable = %A" x.fullyCoveredFragmentShaderInputVariable
                        sprintf "conservativeRasterizationPostDepthCoverage = %A" x.conservativeRasterizationPostDepthCoverage
                    ] |> sprintf "VkPhysicalDeviceConservativeRasterizationPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineRasterizationConservativeStateCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkPipelineRasterizationConservativeStateCreateFlagsEXT
                val mutable public conservativeRasterizationMode : VkConservativeRasterizationModeEXT
                val mutable public extraPrimitiveOverestimationSize : float32

                new(pNext: nativeint, flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT, conservativeRasterizationMode: VkConservativeRasterizationModeEXT, extraPrimitiveOverestimationSize: float32) =
                    {
                        sType = 1000101001u
                        pNext = pNext
                        flags = flags
                        conservativeRasterizationMode = conservativeRasterizationMode
                        extraPrimitiveOverestimationSize = extraPrimitiveOverestimationSize
                    }

                new(flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT, conservativeRasterizationMode: VkConservativeRasterizationModeEXT, extraPrimitiveOverestimationSize: float32) =
                    VkPipelineRasterizationConservativeStateCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, conservativeRasterizationMode, extraPrimitiveOverestimationSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineRasterizationConservativeStateCreateFlagsEXT> && x.conservativeRasterizationMode = Unchecked.defaultof<VkConservativeRasterizationModeEXT> && x.extraPrimitiveOverestimationSize = Unchecked.defaultof<float32>

                static member Empty =
                    VkPipelineRasterizationConservativeStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineRasterizationConservativeStateCreateFlagsEXT>, Unchecked.defaultof<VkConservativeRasterizationModeEXT>, Unchecked.defaultof<float32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "conservativeRasterizationMode = %A" x.conservativeRasterizationMode
                        sprintf "extraPrimitiveOverestimationSize = %A" x.extraPrimitiveOverestimationSize
                    ] |> sprintf "VkPipelineRasterizationConservativeStateCreateInfoEXT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTDepthClipEnable =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_depth_clip_enable"
        let Number = 103

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDepthClipEnableFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public depthClipEnable : VkBool32

                new(pNext: nativeint, depthClipEnable: VkBool32) =
                    {
                        sType = 1000102000u
                        pNext = pNext
                        depthClipEnable = depthClipEnable
                    }

                new(depthClipEnable: VkBool32) =
                    VkPhysicalDeviceDepthClipEnableFeaturesEXT(Unchecked.defaultof<nativeint>, depthClipEnable)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.depthClipEnable = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDepthClipEnableFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "depthClipEnable = %A" x.depthClipEnable
                    ] |> sprintf "VkPhysicalDeviceDepthClipEnableFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineRasterizationDepthClipStateCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkPipelineRasterizationDepthClipStateCreateFlagsEXT
                val mutable public depthClipEnable : VkBool32

                new(pNext: nativeint, flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT, depthClipEnable: VkBool32) =
                    {
                        sType = 1000102001u
                        pNext = pNext
                        flags = flags
                        depthClipEnable = depthClipEnable
                    }

                new(flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT, depthClipEnable: VkBool32) =
                    VkPipelineRasterizationDepthClipStateCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, depthClipEnable)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineRasterizationDepthClipStateCreateFlagsEXT> && x.depthClipEnable = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPipelineRasterizationDepthClipStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineRasterizationDepthClipStateCreateFlagsEXT>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "depthClipEnable = %A" x.depthClipEnable
                    ] |> sprintf "VkPipelineRasterizationDepthClipStateCreateInfoEXT { %s }"
            end



    /// Requires KHRSurface.
    module EXTSwapchainColorspace =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_swapchain_colorspace"
        let Number = 105

        [<AutoOpen>]
        module EnumExtensions =
             type KHRSurface.VkColorSpaceKHR with
                  static member inline DisplayP3NonlinearExt = enum<KHRSurface.VkColorSpaceKHR> 1000104001
                  static member inline ExtendedSrgbLinearExt = enum<KHRSurface.VkColorSpaceKHR> 1000104002
                  static member inline DisplayP3LinearExt = enum<KHRSurface.VkColorSpaceKHR> 1000104003
                  static member inline DciP3NonlinearExt = enum<KHRSurface.VkColorSpaceKHR> 1000104004
                  static member inline Bt709LinearExt = enum<KHRSurface.VkColorSpaceKHR> 1000104005
                  static member inline Bt709NonlinearExt = enum<KHRSurface.VkColorSpaceKHR> 1000104006
                  static member inline Bt2020LinearExt = enum<KHRSurface.VkColorSpaceKHR> 1000104007
                  static member inline Hdr10St2084Ext = enum<KHRSurface.VkColorSpaceKHR> 1000104008
                  static member inline DolbyvisionExt = enum<KHRSurface.VkColorSpaceKHR> 1000104009
                  static member inline Hdr10HlgExt = enum<KHRSurface.VkColorSpaceKHR> 1000104010
                  static member inline AdobergbLinearExt = enum<KHRSurface.VkColorSpaceKHR> 1000104011
                  static member inline AdobergbNonlinearExt = enum<KHRSurface.VkColorSpaceKHR> 1000104012
                  static member inline PassThroughExt = enum<KHRSurface.VkColorSpaceKHR> 1000104013
                  static member inline ExtendedSrgbNonlinearExt = enum<KHRSurface.VkColorSpaceKHR> 1000104014


    /// Requires KHRSwapchain.
    module EXTHdrMetadata =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_hdr_metadata"
        let Number = 106

        /// Chromaticity coordinate
        [<StructLayout(LayoutKind.Sequential)>]
        type VkXYColorEXT =
            struct
                val mutable public x : float32
                val mutable public y : float32

                new(x: float32, y: float32) =
                    {
                        x = x
                        y = y
                    }

                member x.IsEmpty =
                    x.x = Unchecked.defaultof<float32> && x.y = Unchecked.defaultof<float32>

                static member Empty =
                    VkXYColorEXT(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "x = %A" x.x
                        sprintf "y = %A" x.y
                    ] |> sprintf "VkXYColorEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkHdrMetadataEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public displayPrimaryRed : VkXYColorEXT
                val mutable public displayPrimaryGreen : VkXYColorEXT
                val mutable public displayPrimaryBlue : VkXYColorEXT
                val mutable public whitePoint : VkXYColorEXT
                val mutable public maxLuminance : float32
                val mutable public minLuminance : float32
                val mutable public maxContentLightLevel : float32
                val mutable public maxFrameAverageLightLevel : float32

                new(pNext: nativeint, displayPrimaryRed: VkXYColorEXT, displayPrimaryGreen: VkXYColorEXT, displayPrimaryBlue: VkXYColorEXT, whitePoint: VkXYColorEXT, maxLuminance: float32, minLuminance: float32, maxContentLightLevel: float32, maxFrameAverageLightLevel: float32) =
                    {
                        sType = 1000105000u
                        pNext = pNext
                        displayPrimaryRed = displayPrimaryRed
                        displayPrimaryGreen = displayPrimaryGreen
                        displayPrimaryBlue = displayPrimaryBlue
                        whitePoint = whitePoint
                        maxLuminance = maxLuminance
                        minLuminance = minLuminance
                        maxContentLightLevel = maxContentLightLevel
                        maxFrameAverageLightLevel = maxFrameAverageLightLevel
                    }

                new(displayPrimaryRed: VkXYColorEXT, displayPrimaryGreen: VkXYColorEXT, displayPrimaryBlue: VkXYColorEXT, whitePoint: VkXYColorEXT, maxLuminance: float32, minLuminance: float32, maxContentLightLevel: float32, maxFrameAverageLightLevel: float32) =
                    VkHdrMetadataEXT(Unchecked.defaultof<nativeint>, displayPrimaryRed, displayPrimaryGreen, displayPrimaryBlue, whitePoint, maxLuminance, minLuminance, maxContentLightLevel, maxFrameAverageLightLevel)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.displayPrimaryRed = Unchecked.defaultof<VkXYColorEXT> && x.displayPrimaryGreen = Unchecked.defaultof<VkXYColorEXT> && x.displayPrimaryBlue = Unchecked.defaultof<VkXYColorEXT> && x.whitePoint = Unchecked.defaultof<VkXYColorEXT> && x.maxLuminance = Unchecked.defaultof<float32> && x.minLuminance = Unchecked.defaultof<float32> && x.maxContentLightLevel = Unchecked.defaultof<float32> && x.maxFrameAverageLightLevel = Unchecked.defaultof<float32>

                static member Empty =
                    VkHdrMetadataEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkXYColorEXT>, Unchecked.defaultof<VkXYColorEXT>, Unchecked.defaultof<VkXYColorEXT>, Unchecked.defaultof<VkXYColorEXT>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "displayPrimaryRed = %A" x.displayPrimaryRed
                        sprintf "displayPrimaryGreen = %A" x.displayPrimaryGreen
                        sprintf "displayPrimaryBlue = %A" x.displayPrimaryBlue
                        sprintf "whitePoint = %A" x.whitePoint
                        sprintf "maxLuminance = %A" x.maxLuminance
                        sprintf "minLuminance = %A" x.minLuminance
                        sprintf "maxContentLightLevel = %A" x.maxContentLightLevel
                        sprintf "maxFrameAverageLightLevel = %A" x.maxFrameAverageLightLevel
                    ] |> sprintf "VkHdrMetadataEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkSetHdrMetadataEXTDel = delegate of VkDevice * uint32 * nativeptr<KHRSwapchain.VkSwapchainKHR> * nativeptr<VkHdrMetadataEXT> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTHdrMetadata")
                static let s_vkSetHdrMetadataEXTDel = VkRaw.vkImportInstanceDelegate<VkSetHdrMetadataEXTDel> "vkSetHdrMetadataEXT"
                static do Report.End(3) |> ignore
                static member vkSetHdrMetadataEXT = s_vkSetHdrMetadataEXTDel
            let vkSetHdrMetadataEXT(device : VkDevice, swapchainCount : uint32, pSwapchains : nativeptr<KHRSwapchain.VkSwapchainKHR>, pMetadata : nativeptr<VkHdrMetadataEXT>) = Loader<unit>.vkSetHdrMetadataEXT.Invoke(device, swapchainCount, pSwapchains, pMetadata)

    /// Requires (((KHRGetPhysicalDeviceProperties2, KHRMaintenance2) | Vulkan11), KHRImageFormatList) | Vulkan12.
    /// Promoted to Vulkan12.
    module KHRImagelessFramebuffer =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_imageless_framebuffer"
        let Number = 109

        type VkFramebufferAttachmentImageInfoKHR = Vulkan12.VkFramebufferAttachmentImageInfo

        type VkFramebufferAttachmentsCreateInfoKHR = Vulkan12.VkFramebufferAttachmentsCreateInfo

        type VkPhysicalDeviceImagelessFramebufferFeaturesKHR = Vulkan12.VkPhysicalDeviceImagelessFramebufferFeatures

        type VkRenderPassAttachmentBeginInfoKHR = Vulkan12.VkRenderPassAttachmentBeginInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkFramebufferCreateFlags with
                  static member inline ImagelessBitKhr = enum<VkFramebufferCreateFlags> 0x00000001


    /// Requires (KHRMultiview, KHRMaintenance2) | Vulkan11.
    /// Promoted to Vulkan12.
    module KHRCreateRenderpass2 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_create_renderpass2"
        let Number = 110

        type VkAttachmentDescription2KHR = Vulkan12.VkAttachmentDescription2

        type VkAttachmentReference2KHR = Vulkan12.VkAttachmentReference2

        type VkRenderPassCreateInfo2KHR = Vulkan12.VkRenderPassCreateInfo2

        type VkSubpassBeginInfoKHR = Vulkan12.VkSubpassBeginInfo

        type VkSubpassDependency2KHR = Vulkan12.VkSubpassDependency2

        type VkSubpassDescription2KHR = Vulkan12.VkSubpassDescription2

        type VkSubpassEndInfoKHR = Vulkan12.VkSubpassEndInfo


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateRenderPass2KHRDel = delegate of VkDevice * nativeptr<Vulkan12.VkRenderPassCreateInfo2> * nativeptr<VkAllocationCallbacks> * nativeptr<VkRenderPass> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBeginRenderPass2KHRDel = delegate of VkCommandBuffer * nativeptr<VkRenderPassBeginInfo> * nativeptr<Vulkan12.VkSubpassBeginInfo> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdNextSubpass2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan12.VkSubpassBeginInfo> * nativeptr<Vulkan12.VkSubpassEndInfo> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdEndRenderPass2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan12.VkSubpassEndInfo> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRCreateRenderpass2")
                static let s_vkCreateRenderPass2KHRDel = VkRaw.vkImportInstanceDelegate<VkCreateRenderPass2KHRDel> "vkCreateRenderPass2KHR"
                static let s_vkCmdBeginRenderPass2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginRenderPass2KHRDel> "vkCmdBeginRenderPass2KHR"
                static let s_vkCmdNextSubpass2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdNextSubpass2KHRDel> "vkCmdNextSubpass2KHR"
                static let s_vkCmdEndRenderPass2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdEndRenderPass2KHRDel> "vkCmdEndRenderPass2KHR"
                static do Report.End(3) |> ignore
                static member vkCreateRenderPass2KHR = s_vkCreateRenderPass2KHRDel
                static member vkCmdBeginRenderPass2KHR = s_vkCmdBeginRenderPass2KHRDel
                static member vkCmdNextSubpass2KHR = s_vkCmdNextSubpass2KHRDel
                static member vkCmdEndRenderPass2KHR = s_vkCmdEndRenderPass2KHRDel
            let vkCreateRenderPass2KHR(device : VkDevice, pCreateInfo : nativeptr<Vulkan12.VkRenderPassCreateInfo2>, pAllocator : nativeptr<VkAllocationCallbacks>, pRenderPass : nativeptr<VkRenderPass>) = Loader<unit>.vkCreateRenderPass2KHR.Invoke(device, pCreateInfo, pAllocator, pRenderPass)
            let vkCmdBeginRenderPass2KHR(commandBuffer : VkCommandBuffer, pRenderPassBegin : nativeptr<VkRenderPassBeginInfo>, pSubpassBeginInfo : nativeptr<Vulkan12.VkSubpassBeginInfo>) = Loader<unit>.vkCmdBeginRenderPass2KHR.Invoke(commandBuffer, pRenderPassBegin, pSubpassBeginInfo)
            let vkCmdNextSubpass2KHR(commandBuffer : VkCommandBuffer, pSubpassBeginInfo : nativeptr<Vulkan12.VkSubpassBeginInfo>, pSubpassEndInfo : nativeptr<Vulkan12.VkSubpassEndInfo>) = Loader<unit>.vkCmdNextSubpass2KHR.Invoke(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo)
            let vkCmdEndRenderPass2KHR(commandBuffer : VkCommandBuffer, pSubpassEndInfo : nativeptr<Vulkan12.VkSubpassEndInfo>) = Loader<unit>.vkCmdEndRenderPass2KHR.Invoke(commandBuffer, pSubpassEndInfo)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module IMGRelaxedLineRasterization =
        let Type = ExtensionType.Device
        let Name = "VK_IMG_relaxed_line_rasterization"
        let Number = 111

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public relaxedLineRasterization : VkBool32

                new(pNext: nativeint, relaxedLineRasterization: VkBool32) =
                    {
                        sType = 1000110000u
                        pNext = pNext
                        relaxedLineRasterization = relaxedLineRasterization
                    }

                new(relaxedLineRasterization: VkBool32) =
                    VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG(Unchecked.defaultof<nativeint>, relaxedLineRasterization)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.relaxedLineRasterization = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "relaxedLineRasterization = %A" x.relaxedLineRasterization
                    ] |> sprintf "VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG { %s }"
            end



    /// Requires KHRSwapchain, KHRGetSurfaceCapabilities2, (KHRGetPhysicalDeviceProperties2 | Vulkan11).
    module KHRSharedPresentableImage =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shared_presentable_image"
        let Number = 112

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSharedPresentSurfaceCapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public sharedPresentSupportedUsageFlags : VkImageUsageFlags

                new(pNext: nativeint, sharedPresentSupportedUsageFlags: VkImageUsageFlags) =
                    {
                        sType = 1000111000u
                        pNext = pNext
                        sharedPresentSupportedUsageFlags = sharedPresentSupportedUsageFlags
                    }

                new(sharedPresentSupportedUsageFlags: VkImageUsageFlags) =
                    VkSharedPresentSurfaceCapabilitiesKHR(Unchecked.defaultof<nativeint>, sharedPresentSupportedUsageFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.sharedPresentSupportedUsageFlags = Unchecked.defaultof<VkImageUsageFlags>

                static member Empty =
                    VkSharedPresentSurfaceCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageUsageFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "sharedPresentSupportedUsageFlags = %A" x.sharedPresentSupportedUsageFlags
                    ] |> sprintf "VkSharedPresentSurfaceCapabilitiesKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageLayout with
                  static member inline SharedPresentKhr = enum<VkImageLayout> 1000111000
             type KHRSurface.VkPresentModeKHR with
                  static member inline SharedDemandRefresh = enum<KHRSurface.VkPresentModeKHR> 1000111000
                  static member inline SharedContinuousRefresh = enum<KHRSurface.VkPresentModeKHR> 1000111001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetSwapchainStatusKHRDel = delegate of VkDevice * KHRSwapchain.VkSwapchainKHR -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRSharedPresentableImage")
                static let s_vkGetSwapchainStatusKHRDel = VkRaw.vkImportInstanceDelegate<VkGetSwapchainStatusKHRDel> "vkGetSwapchainStatusKHR"
                static do Report.End(3) |> ignore
                static member vkGetSwapchainStatusKHR = s_vkGetSwapchainStatusKHRDel
            let vkGetSwapchainStatusKHR(device : VkDevice, swapchain : KHRSwapchain.VkSwapchainKHR) = Loader<unit>.vkGetSwapchainStatusKHR.Invoke(device, swapchain)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan11.
    module KHRExternalFenceCapabilities =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_external_fence_capabilities"
        let Number = 113

        type VkExternalFenceHandleTypeFlagsKHR = Vulkan11.VkExternalFenceHandleTypeFlags
        type VkExternalFenceFeatureFlagsKHR = Vulkan11.VkExternalFenceFeatureFlags

        type VkExternalFencePropertiesKHR = Vulkan11.VkExternalFenceProperties

        type VkPhysicalDeviceExternalFenceInfoKHR = Vulkan11.VkPhysicalDeviceExternalFenceInfo

        type VkPhysicalDeviceIDPropertiesKHR = Vulkan11.VkPhysicalDeviceIDProperties


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkExternalFenceFeatureFlags with
                  static member inline ExportableBitKhr = enum<Vulkan11.VkExternalFenceFeatureFlags> 0x00000001
                  static member inline ImportableBitKhr = enum<Vulkan11.VkExternalFenceFeatureFlags> 0x00000002
             type Vulkan11.VkExternalFenceHandleTypeFlags with
                  static member inline OpaqueFdBitKhr = enum<Vulkan11.VkExternalFenceHandleTypeFlags> 0x00000001
                  static member inline OpaqueWin32BitKhr = enum<Vulkan11.VkExternalFenceHandleTypeFlags> 0x00000002
                  static member inline OpaqueWin32KmtBitKhr = enum<Vulkan11.VkExternalFenceHandleTypeFlags> 0x00000004
                  static member inline SyncFdBitKhr = enum<Vulkan11.VkExternalFenceHandleTypeFlags> 0x00000008

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceExternalFencePropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<Vulkan11.VkPhysicalDeviceExternalFenceInfo> * nativeptr<Vulkan11.VkExternalFenceProperties> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRExternalFenceCapabilities")
                static let s_vkGetPhysicalDeviceExternalFencePropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceExternalFencePropertiesKHRDel> "vkGetPhysicalDeviceExternalFencePropertiesKHR"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceExternalFencePropertiesKHR = s_vkGetPhysicalDeviceExternalFencePropertiesKHRDel
            let vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice : VkPhysicalDevice, pExternalFenceInfo : nativeptr<Vulkan11.VkPhysicalDeviceExternalFenceInfo>, pExternalFenceProperties : nativeptr<Vulkan11.VkExternalFenceProperties>) = Loader<unit>.vkGetPhysicalDeviceExternalFencePropertiesKHR.Invoke(physicalDevice, pExternalFenceInfo, pExternalFenceProperties)

    /// Requires KHRExternalFenceCapabilities.
    /// Promoted to Vulkan11.
    module KHRExternalFence =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_external_fence"
        let Number = 114

        type VkFenceImportFlagsKHR = Vulkan11.VkFenceImportFlags

        type VkExportFenceCreateInfoKHR = Vulkan11.VkExportFenceCreateInfo


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkFenceImportFlags with
                  static member inline TemporaryBitKhr = enum<Vulkan11.VkFenceImportFlags> 0x00000001


    /// Requires KHRExternalFence.
    module KHRExternalFenceWin32 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_external_fence_win32"
        let Number = 115

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportFenceWin32HandleInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pAttributes : nativeptr<nativeint>
                val mutable public dwAccess : uint32
                val mutable public name : cstr

                new(pNext: nativeint, pAttributes: nativeptr<nativeint>, dwAccess: uint32, name: cstr) =
                    {
                        sType = 1000114001u
                        pNext = pNext
                        pAttributes = pAttributes
                        dwAccess = dwAccess
                        name = name
                    }

                new(pAttributes: nativeptr<nativeint>, dwAccess: uint32, name: cstr) =
                    VkExportFenceWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, pAttributes, dwAccess, name)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pAttributes = Unchecked.defaultof<nativeptr<nativeint>> && x.dwAccess = Unchecked.defaultof<uint32> && x.name = Unchecked.defaultof<cstr>

                static member Empty =
                    VkExportFenceWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<cstr>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pAttributes = %A" x.pAttributes
                        sprintf "dwAccess = %A" x.dwAccess
                        sprintf "name = %A" x.name
                    ] |> sprintf "VkExportFenceWin32HandleInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkFenceGetWin32HandleInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fence : VkFence
                val mutable public handleType : Vulkan11.VkExternalFenceHandleTypeFlags

                new(pNext: nativeint, fence: VkFence, handleType: Vulkan11.VkExternalFenceHandleTypeFlags) =
                    {
                        sType = 1000114002u
                        pNext = pNext
                        fence = fence
                        handleType = handleType
                    }

                new(fence: VkFence, handleType: Vulkan11.VkExternalFenceHandleTypeFlags) =
                    VkFenceGetWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, fence, handleType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fence = Unchecked.defaultof<VkFence> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalFenceHandleTypeFlags>

                static member Empty =
                    VkFenceGetWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFence>, Unchecked.defaultof<Vulkan11.VkExternalFenceHandleTypeFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fence = %A" x.fence
                        sprintf "handleType = %A" x.handleType
                    ] |> sprintf "VkFenceGetWin32HandleInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportFenceWin32HandleInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fence : VkFence
                val mutable public flags : Vulkan11.VkFenceImportFlags
                val mutable public handleType : Vulkan11.VkExternalFenceHandleTypeFlags
                val mutable public handle : nativeint
                val mutable public name : cstr

                new(pNext: nativeint, fence: VkFence, flags: Vulkan11.VkFenceImportFlags, handleType: Vulkan11.VkExternalFenceHandleTypeFlags, handle: nativeint, name: cstr) =
                    {
                        sType = 1000114000u
                        pNext = pNext
                        fence = fence
                        flags = flags
                        handleType = handleType
                        handle = handle
                        name = name
                    }

                new(fence: VkFence, flags: Vulkan11.VkFenceImportFlags, handleType: Vulkan11.VkExternalFenceHandleTypeFlags, handle: nativeint, name: cstr) =
                    VkImportFenceWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, fence, flags, handleType, handle, name)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fence = Unchecked.defaultof<VkFence> && x.flags = Unchecked.defaultof<Vulkan11.VkFenceImportFlags> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalFenceHandleTypeFlags> && x.handle = Unchecked.defaultof<nativeint> && x.name = Unchecked.defaultof<cstr>

                static member Empty =
                    VkImportFenceWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFence>, Unchecked.defaultof<Vulkan11.VkFenceImportFlags>, Unchecked.defaultof<Vulkan11.VkExternalFenceHandleTypeFlags>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fence = %A" x.fence
                        sprintf "flags = %A" x.flags
                        sprintf "handleType = %A" x.handleType
                        sprintf "handle = %A" x.handle
                        sprintf "name = %A" x.name
                    ] |> sprintf "VkImportFenceWin32HandleInfoKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkImportFenceWin32HandleKHRDel = delegate of VkDevice * nativeptr<VkImportFenceWin32HandleInfoKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetFenceWin32HandleKHRDel = delegate of VkDevice * nativeptr<VkFenceGetWin32HandleInfoKHR> * nativeptr<nativeint> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRExternalFenceWin32")
                static let s_vkImportFenceWin32HandleKHRDel = VkRaw.vkImportInstanceDelegate<VkImportFenceWin32HandleKHRDel> "vkImportFenceWin32HandleKHR"
                static let s_vkGetFenceWin32HandleKHRDel = VkRaw.vkImportInstanceDelegate<VkGetFenceWin32HandleKHRDel> "vkGetFenceWin32HandleKHR"
                static do Report.End(3) |> ignore
                static member vkImportFenceWin32HandleKHR = s_vkImportFenceWin32HandleKHRDel
                static member vkGetFenceWin32HandleKHR = s_vkGetFenceWin32HandleKHRDel
            let vkImportFenceWin32HandleKHR(device : VkDevice, pImportFenceWin32HandleInfo : nativeptr<VkImportFenceWin32HandleInfoKHR>) = Loader<unit>.vkImportFenceWin32HandleKHR.Invoke(device, pImportFenceWin32HandleInfo)
            let vkGetFenceWin32HandleKHR(device : VkDevice, pGetWin32HandleInfo : nativeptr<VkFenceGetWin32HandleInfoKHR>, pHandle : nativeptr<nativeint>) = Loader<unit>.vkGetFenceWin32HandleKHR.Invoke(device, pGetWin32HandleInfo, pHandle)

    /// Requires KHRExternalFence | Vulkan11.
    module KHRExternalFenceFd =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_external_fence_fd"
        let Number = 116

        [<StructLayout(LayoutKind.Sequential)>]
        type VkFenceGetFdInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fence : VkFence
                val mutable public handleType : Vulkan11.VkExternalFenceHandleTypeFlags

                new(pNext: nativeint, fence: VkFence, handleType: Vulkan11.VkExternalFenceHandleTypeFlags) =
                    {
                        sType = 1000115001u
                        pNext = pNext
                        fence = fence
                        handleType = handleType
                    }

                new(fence: VkFence, handleType: Vulkan11.VkExternalFenceHandleTypeFlags) =
                    VkFenceGetFdInfoKHR(Unchecked.defaultof<nativeint>, fence, handleType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fence = Unchecked.defaultof<VkFence> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalFenceHandleTypeFlags>

                static member Empty =
                    VkFenceGetFdInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFence>, Unchecked.defaultof<Vulkan11.VkExternalFenceHandleTypeFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fence = %A" x.fence
                        sprintf "handleType = %A" x.handleType
                    ] |> sprintf "VkFenceGetFdInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportFenceFdInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fence : VkFence
                val mutable public flags : Vulkan11.VkFenceImportFlags
                val mutable public handleType : Vulkan11.VkExternalFenceHandleTypeFlags
                val mutable public fd : int32

                new(pNext: nativeint, fence: VkFence, flags: Vulkan11.VkFenceImportFlags, handleType: Vulkan11.VkExternalFenceHandleTypeFlags, fd: int32) =
                    {
                        sType = 1000115000u
                        pNext = pNext
                        fence = fence
                        flags = flags
                        handleType = handleType
                        fd = fd
                    }

                new(fence: VkFence, flags: Vulkan11.VkFenceImportFlags, handleType: Vulkan11.VkExternalFenceHandleTypeFlags, fd: int32) =
                    VkImportFenceFdInfoKHR(Unchecked.defaultof<nativeint>, fence, flags, handleType, fd)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fence = Unchecked.defaultof<VkFence> && x.flags = Unchecked.defaultof<Vulkan11.VkFenceImportFlags> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalFenceHandleTypeFlags> && x.fd = Unchecked.defaultof<int32>

                static member Empty =
                    VkImportFenceFdInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFence>, Unchecked.defaultof<Vulkan11.VkFenceImportFlags>, Unchecked.defaultof<Vulkan11.VkExternalFenceHandleTypeFlags>, Unchecked.defaultof<int32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fence = %A" x.fence
                        sprintf "flags = %A" x.flags
                        sprintf "handleType = %A" x.handleType
                        sprintf "fd = %A" x.fd
                    ] |> sprintf "VkImportFenceFdInfoKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkImportFenceFdKHRDel = delegate of VkDevice * nativeptr<VkImportFenceFdInfoKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetFenceFdKHRDel = delegate of VkDevice * nativeptr<VkFenceGetFdInfoKHR> * nativeptr<int32> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRExternalFenceFd")
                static let s_vkImportFenceFdKHRDel = VkRaw.vkImportInstanceDelegate<VkImportFenceFdKHRDel> "vkImportFenceFdKHR"
                static let s_vkGetFenceFdKHRDel = VkRaw.vkImportInstanceDelegate<VkGetFenceFdKHRDel> "vkGetFenceFdKHR"
                static do Report.End(3) |> ignore
                static member vkImportFenceFdKHR = s_vkImportFenceFdKHRDel
                static member vkGetFenceFdKHR = s_vkGetFenceFdKHRDel
            let vkImportFenceFdKHR(device : VkDevice, pImportFenceFdInfo : nativeptr<VkImportFenceFdInfoKHR>) = Loader<unit>.vkImportFenceFdKHR.Invoke(device, pImportFenceFdInfo)
            let vkGetFenceFdKHR(device : VkDevice, pGetFdInfo : nativeptr<VkFenceGetFdInfoKHR>, pFd : nativeptr<int32>) = Loader<unit>.vkGetFenceFdKHR.Invoke(device, pGetFdInfo, pFd)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module KHRPerformanceQuery =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_performance_query"
        let Number = 117

        [<Flags>]
        type VkPerformanceCounterDescriptionFlagsKHR =
            | All = 3
            | None = 0
            | PerformanceImpactingBit = 0x00000001
            | ConcurrentlyImpactedBit = 0x00000002

        type VkPerformanceCounterScopeKHR =
            | CommandBuffer = 0
            | RenderPass = 1
            | Command = 2

        type VkPerformanceCounterStorageKHR =
            | Int32 = 0
            | Int64 = 1
            | Uint32 = 2
            | Uint64 = 3
            | Float32 = 4
            | Float64 = 5

        type VkPerformanceCounterUnitKHR =
            | Generic = 0
            | Percentage = 1
            | Nanoseconds = 2
            | Bytes = 3
            | BytesPerSecond = 4
            | Kelvin = 5
            | Watts = 6
            | Volts = 7
            | Amps = 8
            | Hertz = 9
            | Cycles = 10

        [<Flags>]
        type VkAcquireProfilingLockFlagsKHR =
            | All = 0
            | None = 0


        [<StructLayout(LayoutKind.Sequential)>]
        type VkAcquireProfilingLockInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkAcquireProfilingLockFlagsKHR
                val mutable public timeout : uint64

                new(pNext: nativeint, flags: VkAcquireProfilingLockFlagsKHR, timeout: uint64) =
                    {
                        sType = 1000116004u
                        pNext = pNext
                        flags = flags
                        timeout = timeout
                    }

                new(flags: VkAcquireProfilingLockFlagsKHR, timeout: uint64) =
                    VkAcquireProfilingLockInfoKHR(Unchecked.defaultof<nativeint>, flags, timeout)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkAcquireProfilingLockFlagsKHR> && x.timeout = Unchecked.defaultof<uint64>

                static member Empty =
                    VkAcquireProfilingLockInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAcquireProfilingLockFlagsKHR>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "timeout = %A" x.timeout
                    ] |> sprintf "VkAcquireProfilingLockInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPerformanceCounterDescriptionKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkPerformanceCounterDescriptionFlagsKHR
                val mutable public name : String256
                val mutable public category : String256
                val mutable public description : String256

                new(pNext: nativeint, flags: VkPerformanceCounterDescriptionFlagsKHR, name: String256, category: String256, description: String256) =
                    {
                        sType = 1000116006u
                        pNext = pNext
                        flags = flags
                        name = name
                        category = category
                        description = description
                    }

                new(flags: VkPerformanceCounterDescriptionFlagsKHR, name: String256, category: String256, description: String256) =
                    VkPerformanceCounterDescriptionKHR(Unchecked.defaultof<nativeint>, flags, name, category, description)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPerformanceCounterDescriptionFlagsKHR> && x.name = Unchecked.defaultof<String256> && x.category = Unchecked.defaultof<String256> && x.description = Unchecked.defaultof<String256>

                static member Empty =
                    VkPerformanceCounterDescriptionKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPerformanceCounterDescriptionFlagsKHR>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "name = %A" x.name
                        sprintf "category = %A" x.category
                        sprintf "description = %A" x.description
                    ] |> sprintf "VkPerformanceCounterDescriptionKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPerformanceCounterKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public unit : VkPerformanceCounterUnitKHR
                val mutable public scope : VkPerformanceCounterScopeKHR
                val mutable public storage : VkPerformanceCounterStorageKHR
                val mutable public uuid : Guid

                new(pNext: nativeint, unit: VkPerformanceCounterUnitKHR, scope: VkPerformanceCounterScopeKHR, storage: VkPerformanceCounterStorageKHR, uuid: Guid) =
                    {
                        sType = 1000116005u
                        pNext = pNext
                        unit = unit
                        scope = scope
                        storage = storage
                        uuid = uuid
                    }

                new(unit: VkPerformanceCounterUnitKHR, scope: VkPerformanceCounterScopeKHR, storage: VkPerformanceCounterStorageKHR, uuid: Guid) =
                    VkPerformanceCounterKHR(Unchecked.defaultof<nativeint>, unit, scope, storage, uuid)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.unit = Unchecked.defaultof<VkPerformanceCounterUnitKHR> && x.scope = Unchecked.defaultof<VkPerformanceCounterScopeKHR> && x.storage = Unchecked.defaultof<VkPerformanceCounterStorageKHR> && x.uuid = Unchecked.defaultof<Guid>

                static member Empty =
                    VkPerformanceCounterKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPerformanceCounterUnitKHR>, Unchecked.defaultof<VkPerformanceCounterScopeKHR>, Unchecked.defaultof<VkPerformanceCounterStorageKHR>, Unchecked.defaultof<Guid>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "unit = %A" x.unit
                        sprintf "scope = %A" x.scope
                        sprintf "storage = %A" x.storage
                        sprintf "uuid = %A" x.uuid
                    ] |> sprintf "VkPerformanceCounterKHR { %s }"
            end

        /// Union of all the possible return types a counter result could return
        [<StructLayout(LayoutKind.Explicit)>]
        type VkPerformanceCounterResultKHR =
            struct
                [<FieldOffset(0)>]
                val mutable public int32 : int32
                [<FieldOffset(0)>]
                val mutable public int64 : int64
                [<FieldOffset(0)>]
                val mutable public uint32 : uint32
                [<FieldOffset(0)>]
                val mutable public uint64 : uint64
                [<FieldOffset(0)>]
                val mutable public float32 : float32
                [<FieldOffset(0)>]
                val mutable public float64 : float

                static member Int32(value: int32) =
                    let mutable result = Unchecked.defaultof<VkPerformanceCounterResultKHR>
                    result.int32 <- value
                    result

                static member Int64(value: int64) =
                    let mutable result = Unchecked.defaultof<VkPerformanceCounterResultKHR>
                    result.int64 <- value
                    result

                static member Uint32(value: uint32) =
                    let mutable result = Unchecked.defaultof<VkPerformanceCounterResultKHR>
                    result.uint32 <- value
                    result

                static member Uint64(value: uint64) =
                    let mutable result = Unchecked.defaultof<VkPerformanceCounterResultKHR>
                    result.uint64 <- value
                    result

                static member Float32(value: float32) =
                    let mutable result = Unchecked.defaultof<VkPerformanceCounterResultKHR>
                    result.float32 <- value
                    result

                static member Float64(value: float) =
                    let mutable result = Unchecked.defaultof<VkPerformanceCounterResultKHR>
                    result.float64 <- value
                    result

                override x.ToString() =
                    String.concat "; " [
                        sprintf "int32 = %A" x.int32
                        sprintf "int64 = %A" x.int64
                        sprintf "uint32 = %A" x.uint32
                        sprintf "uint64 = %A" x.uint64
                        sprintf "float32 = %A" x.float32
                        sprintf "float64 = %A" x.float64
                    ] |> sprintf "VkPerformanceCounterResultKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPerformanceQuerySubmitInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public counterPassIndex : uint32

                new(pNext: nativeint, counterPassIndex: uint32) =
                    {
                        sType = 1000116003u
                        pNext = pNext
                        counterPassIndex = counterPassIndex
                    }

                new(counterPassIndex: uint32) =
                    VkPerformanceQuerySubmitInfoKHR(Unchecked.defaultof<nativeint>, counterPassIndex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.counterPassIndex = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPerformanceQuerySubmitInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "counterPassIndex = %A" x.counterPassIndex
                    ] |> sprintf "VkPerformanceQuerySubmitInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePerformanceQueryFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public performanceCounterQueryPools : VkBool32
                val mutable public performanceCounterMultipleQueryPools : VkBool32

                new(pNext: nativeint, performanceCounterQueryPools: VkBool32, performanceCounterMultipleQueryPools: VkBool32) =
                    {
                        sType = 1000116000u
                        pNext = pNext
                        performanceCounterQueryPools = performanceCounterQueryPools
                        performanceCounterMultipleQueryPools = performanceCounterMultipleQueryPools
                    }

                new(performanceCounterQueryPools: VkBool32, performanceCounterMultipleQueryPools: VkBool32) =
                    VkPhysicalDevicePerformanceQueryFeaturesKHR(Unchecked.defaultof<nativeint>, performanceCounterQueryPools, performanceCounterMultipleQueryPools)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.performanceCounterQueryPools = Unchecked.defaultof<VkBool32> && x.performanceCounterMultipleQueryPools = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePerformanceQueryFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "performanceCounterQueryPools = %A" x.performanceCounterQueryPools
                        sprintf "performanceCounterMultipleQueryPools = %A" x.performanceCounterMultipleQueryPools
                    ] |> sprintf "VkPhysicalDevicePerformanceQueryFeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePerformanceQueryPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public allowCommandBufferQueryCopies : VkBool32

                new(pNext: nativeint, allowCommandBufferQueryCopies: VkBool32) =
                    {
                        sType = 1000116001u
                        pNext = pNext
                        allowCommandBufferQueryCopies = allowCommandBufferQueryCopies
                    }

                new(allowCommandBufferQueryCopies: VkBool32) =
                    VkPhysicalDevicePerformanceQueryPropertiesKHR(Unchecked.defaultof<nativeint>, allowCommandBufferQueryCopies)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.allowCommandBufferQueryCopies = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePerformanceQueryPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "allowCommandBufferQueryCopies = %A" x.allowCommandBufferQueryCopies
                    ] |> sprintf "VkPhysicalDevicePerformanceQueryPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkQueryPoolPerformanceCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public queueFamilyIndex : uint32
                val mutable public counterIndexCount : uint32
                val mutable public pCounterIndices : nativeptr<uint32>

                new(pNext: nativeint, queueFamilyIndex: uint32, counterIndexCount: uint32, pCounterIndices: nativeptr<uint32>) =
                    {
                        sType = 1000116002u
                        pNext = pNext
                        queueFamilyIndex = queueFamilyIndex
                        counterIndexCount = counterIndexCount
                        pCounterIndices = pCounterIndices
                    }

                new(queueFamilyIndex: uint32, counterIndexCount: uint32, pCounterIndices: nativeptr<uint32>) =
                    VkQueryPoolPerformanceCreateInfoKHR(Unchecked.defaultof<nativeint>, queueFamilyIndex, counterIndexCount, pCounterIndices)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.queueFamilyIndex = Unchecked.defaultof<uint32> && x.counterIndexCount = Unchecked.defaultof<uint32> && x.pCounterIndices = Unchecked.defaultof<nativeptr<uint32>>

                static member Empty =
                    VkQueryPoolPerformanceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "queueFamilyIndex = %A" x.queueFamilyIndex
                        sprintf "counterIndexCount = %A" x.counterIndexCount
                        sprintf "pCounterIndices = %A" x.pCounterIndices
                    ] |> sprintf "VkQueryPoolPerformanceCreateInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkQueryType with
                  static member inline PerformanceQueryKhr = enum<VkQueryType> 1000116000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHRDel = delegate of VkPhysicalDevice * uint32 * nativeptr<uint32> * nativeptr<VkPerformanceCounterKHR> * nativeptr<VkPerformanceCounterDescriptionKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHRDel = delegate of VkPhysicalDevice * nativeptr<VkQueryPoolPerformanceCreateInfoKHR> * nativeptr<uint32> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkAcquireProfilingLockKHRDel = delegate of VkDevice * nativeptr<VkAcquireProfilingLockInfoKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkReleaseProfilingLockKHRDel = delegate of VkDevice -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRPerformanceQuery")
                static let s_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHRDel = VkRaw.vkImportInstanceDelegate<VkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHRDel> "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
                static let s_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHRDel> "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
                static let s_vkAcquireProfilingLockKHRDel = VkRaw.vkImportInstanceDelegate<VkAcquireProfilingLockKHRDel> "vkAcquireProfilingLockKHR"
                static let s_vkReleaseProfilingLockKHRDel = VkRaw.vkImportInstanceDelegate<VkReleaseProfilingLockKHRDel> "vkReleaseProfilingLockKHR"
                static do Report.End(3) |> ignore
                static member vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = s_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHRDel
                static member vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = s_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHRDel
                static member vkAcquireProfilingLockKHR = s_vkAcquireProfilingLockKHRDel
                static member vkReleaseProfilingLockKHR = s_vkReleaseProfilingLockKHRDel
            let vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, pCounterCount : nativeptr<uint32>, pCounters : nativeptr<VkPerformanceCounterKHR>, pCounterDescriptions : nativeptr<VkPerformanceCounterDescriptionKHR>) = Loader<unit>.vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.Invoke(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions)
            let vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice : VkPhysicalDevice, pPerformanceQueryCreateInfo : nativeptr<VkQueryPoolPerformanceCreateInfoKHR>, pNumPasses : nativeptr<uint32>) = Loader<unit>.vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.Invoke(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses)
            let vkAcquireProfilingLockKHR(device : VkDevice, pInfo : nativeptr<VkAcquireProfilingLockInfoKHR>) = Loader<unit>.vkAcquireProfilingLockKHR.Invoke(device, pInfo)
            let vkReleaseProfilingLockKHR(device : VkDevice) = Loader<unit>.vkReleaseProfilingLockKHR.Invoke(device)

    /// Promoted to Vulkan11.
    module KHRMaintenance2 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_maintenance2"
        let Number = 118

        type VkPointClippingBehaviorKHR = Vulkan11.VkPointClippingBehavior
        type VkTessellationDomainOriginKHR = Vulkan11.VkTessellationDomainOrigin

        type VkImageViewUsageCreateInfoKHR = Vulkan11.VkImageViewUsageCreateInfo

        type VkInputAttachmentAspectReferenceKHR = Vulkan11.VkInputAttachmentAspectReference

        type VkPhysicalDevicePointClippingPropertiesKHR = Vulkan11.VkPhysicalDevicePointClippingProperties

        type VkPipelineTessellationDomainOriginStateCreateInfoKHR = Vulkan11.VkPipelineTessellationDomainOriginStateCreateInfo

        type VkRenderPassInputAttachmentAspectCreateInfoKHR = Vulkan11.VkRenderPassInputAttachmentAspectCreateInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageCreateFlags with
                  static member inline BlockTexelViewCompatibleBitKhr = enum<VkImageCreateFlags> 0x00000080
                  static member inline ExtendedUsageBitKhr = enum<VkImageCreateFlags> 0x00000100
             type VkImageLayout with
                  static member inline DepthReadOnlyStencilAttachmentOptimalKhr = enum<VkImageLayout> 1000117000
                  static member inline DepthAttachmentStencilReadOnlyOptimalKhr = enum<VkImageLayout> 1000117001
             type Vulkan11.VkPointClippingBehavior with
                  static member inline AllClipPlanesKhr = enum<Vulkan11.VkPointClippingBehavior> 0
                  static member inline UserClipPlanesOnlyKhr = enum<Vulkan11.VkPointClippingBehavior> 1
             type Vulkan11.VkTessellationDomainOrigin with
                  static member inline UpperLeftKhr = enum<Vulkan11.VkTessellationDomainOrigin> 0
                  static member inline LowerLeftKhr = enum<Vulkan11.VkTessellationDomainOrigin> 1


    /// Requires KHRSurface.
    module KHRGetSurfaceCapabilities2 =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_get_surface_capabilities2"
        let Number = 120

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceSurfaceInfo2KHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public surface : KHRSurface.VkSurfaceKHR

                new(pNext: nativeint, surface: KHRSurface.VkSurfaceKHR) =
                    {
                        sType = 1000119000u
                        pNext = pNext
                        surface = surface
                    }

                new(surface: KHRSurface.VkSurfaceKHR) =
                    VkPhysicalDeviceSurfaceInfo2KHR(Unchecked.defaultof<nativeint>, surface)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.surface = Unchecked.defaultof<KHRSurface.VkSurfaceKHR>

                static member Empty =
                    VkPhysicalDeviceSurfaceInfo2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRSurface.VkSurfaceKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "surface = %A" x.surface
                    ] |> sprintf "VkPhysicalDeviceSurfaceInfo2KHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfaceCapabilities2KHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public surfaceCapabilities : KHRSurface.VkSurfaceCapabilitiesKHR

                new(pNext: nativeint, surfaceCapabilities: KHRSurface.VkSurfaceCapabilitiesKHR) =
                    {
                        sType = 1000119001u
                        pNext = pNext
                        surfaceCapabilities = surfaceCapabilities
                    }

                new(surfaceCapabilities: KHRSurface.VkSurfaceCapabilitiesKHR) =
                    VkSurfaceCapabilities2KHR(Unchecked.defaultof<nativeint>, surfaceCapabilities)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.surfaceCapabilities = Unchecked.defaultof<KHRSurface.VkSurfaceCapabilitiesKHR>

                static member Empty =
                    VkSurfaceCapabilities2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRSurface.VkSurfaceCapabilitiesKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "surfaceCapabilities = %A" x.surfaceCapabilities
                    ] |> sprintf "VkSurfaceCapabilities2KHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfaceFormat2KHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public surfaceFormat : KHRSurface.VkSurfaceFormatKHR

                new(pNext: nativeint, surfaceFormat: KHRSurface.VkSurfaceFormatKHR) =
                    {
                        sType = 1000119002u
                        pNext = pNext
                        surfaceFormat = surfaceFormat
                    }

                new(surfaceFormat: KHRSurface.VkSurfaceFormatKHR) =
                    VkSurfaceFormat2KHR(Unchecked.defaultof<nativeint>, surfaceFormat)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.surfaceFormat = Unchecked.defaultof<KHRSurface.VkSurfaceFormatKHR>

                static member Empty =
                    VkSurfaceFormat2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRSurface.VkSurfaceFormatKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "surfaceFormat = %A" x.surfaceFormat
                    ] |> sprintf "VkSurfaceFormat2KHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceSurfaceCapabilities2KHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceSurfaceInfo2KHR> * nativeptr<VkSurfaceCapabilities2KHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceSurfaceFormats2KHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceSurfaceInfo2KHR> * nativeptr<uint32> * nativeptr<VkSurfaceFormat2KHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRGetSurfaceCapabilities2")
                static let s_vkGetPhysicalDeviceSurfaceCapabilities2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfaceCapabilities2KHRDel> "vkGetPhysicalDeviceSurfaceCapabilities2KHR"
                static let s_vkGetPhysicalDeviceSurfaceFormats2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfaceFormats2KHRDel> "vkGetPhysicalDeviceSurfaceFormats2KHR"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceSurfaceCapabilities2KHR = s_vkGetPhysicalDeviceSurfaceCapabilities2KHRDel
                static member vkGetPhysicalDeviceSurfaceFormats2KHR = s_vkGetPhysicalDeviceSurfaceFormats2KHRDel
            let vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice : VkPhysicalDevice, pSurfaceInfo : nativeptr<VkPhysicalDeviceSurfaceInfo2KHR>, pSurfaceCapabilities : nativeptr<VkSurfaceCapabilities2KHR>) = Loader<unit>.vkGetPhysicalDeviceSurfaceCapabilities2KHR.Invoke(physicalDevice, pSurfaceInfo, pSurfaceCapabilities)
            let vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice : VkPhysicalDevice, pSurfaceInfo : nativeptr<VkPhysicalDeviceSurfaceInfo2KHR>, pSurfaceFormatCount : nativeptr<uint32>, pSurfaceFormats : nativeptr<VkSurfaceFormat2KHR>) = Loader<unit>.vkGetPhysicalDeviceSurfaceFormats2KHR.Invoke(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats)

    /// Requires (KHRGetPhysicalDeviceProperties2, KHRStorageBufferStorageClass) | Vulkan11.
    /// Promoted to Vulkan11.
    module KHRVariablePointers =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_variable_pointers"
        let Number = 121

        type VkPhysicalDeviceVariablePointerFeaturesKHR = Vulkan11.VkPhysicalDeviceVariablePointersFeatures

        type VkPhysicalDeviceVariablePointersFeaturesKHR = Vulkan11.VkPhysicalDeviceVariablePointersFeatures



    /// Requires KHRDisplay.
    module KHRGetDisplayProperties2 =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_get_display_properties2"
        let Number = 122

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayModeProperties2KHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public displayModeProperties : KHRDisplay.VkDisplayModePropertiesKHR

                new(pNext: nativeint, displayModeProperties: KHRDisplay.VkDisplayModePropertiesKHR) =
                    {
                        sType = 1000121002u
                        pNext = pNext
                        displayModeProperties = displayModeProperties
                    }

                new(displayModeProperties: KHRDisplay.VkDisplayModePropertiesKHR) =
                    VkDisplayModeProperties2KHR(Unchecked.defaultof<nativeint>, displayModeProperties)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.displayModeProperties = Unchecked.defaultof<KHRDisplay.VkDisplayModePropertiesKHR>

                static member Empty =
                    VkDisplayModeProperties2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRDisplay.VkDisplayModePropertiesKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "displayModeProperties = %A" x.displayModeProperties
                    ] |> sprintf "VkDisplayModeProperties2KHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayPlaneCapabilities2KHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public capabilities : KHRDisplay.VkDisplayPlaneCapabilitiesKHR

                new(pNext: nativeint, capabilities: KHRDisplay.VkDisplayPlaneCapabilitiesKHR) =
                    {
                        sType = 1000121004u
                        pNext = pNext
                        capabilities = capabilities
                    }

                new(capabilities: KHRDisplay.VkDisplayPlaneCapabilitiesKHR) =
                    VkDisplayPlaneCapabilities2KHR(Unchecked.defaultof<nativeint>, capabilities)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.capabilities = Unchecked.defaultof<KHRDisplay.VkDisplayPlaneCapabilitiesKHR>

                static member Empty =
                    VkDisplayPlaneCapabilities2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRDisplay.VkDisplayPlaneCapabilitiesKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "capabilities = %A" x.capabilities
                    ] |> sprintf "VkDisplayPlaneCapabilities2KHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayPlaneInfo2KHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public mode : KHRDisplay.VkDisplayModeKHR
                val mutable public planeIndex : uint32

                new(pNext: nativeint, mode: KHRDisplay.VkDisplayModeKHR, planeIndex: uint32) =
                    {
                        sType = 1000121003u
                        pNext = pNext
                        mode = mode
                        planeIndex = planeIndex
                    }

                new(mode: KHRDisplay.VkDisplayModeKHR, planeIndex: uint32) =
                    VkDisplayPlaneInfo2KHR(Unchecked.defaultof<nativeint>, mode, planeIndex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.mode = Unchecked.defaultof<KHRDisplay.VkDisplayModeKHR> && x.planeIndex = Unchecked.defaultof<uint32>

                static member Empty =
                    VkDisplayPlaneInfo2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRDisplay.VkDisplayModeKHR>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "mode = %A" x.mode
                        sprintf "planeIndex = %A" x.planeIndex
                    ] |> sprintf "VkDisplayPlaneInfo2KHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayPlaneProperties2KHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public displayPlaneProperties : KHRDisplay.VkDisplayPlanePropertiesKHR

                new(pNext: nativeint, displayPlaneProperties: KHRDisplay.VkDisplayPlanePropertiesKHR) =
                    {
                        sType = 1000121001u
                        pNext = pNext
                        displayPlaneProperties = displayPlaneProperties
                    }

                new(displayPlaneProperties: KHRDisplay.VkDisplayPlanePropertiesKHR) =
                    VkDisplayPlaneProperties2KHR(Unchecked.defaultof<nativeint>, displayPlaneProperties)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.displayPlaneProperties = Unchecked.defaultof<KHRDisplay.VkDisplayPlanePropertiesKHR>

                static member Empty =
                    VkDisplayPlaneProperties2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRDisplay.VkDisplayPlanePropertiesKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "displayPlaneProperties = %A" x.displayPlaneProperties
                    ] |> sprintf "VkDisplayPlaneProperties2KHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayProperties2KHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public displayProperties : KHRDisplay.VkDisplayPropertiesKHR

                new(pNext: nativeint, displayProperties: KHRDisplay.VkDisplayPropertiesKHR) =
                    {
                        sType = 1000121000u
                        pNext = pNext
                        displayProperties = displayProperties
                    }

                new(displayProperties: KHRDisplay.VkDisplayPropertiesKHR) =
                    VkDisplayProperties2KHR(Unchecked.defaultof<nativeint>, displayProperties)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.displayProperties = Unchecked.defaultof<KHRDisplay.VkDisplayPropertiesKHR>

                static member Empty =
                    VkDisplayProperties2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRDisplay.VkDisplayPropertiesKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "displayProperties = %A" x.displayProperties
                    ] |> sprintf "VkDisplayProperties2KHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceDisplayProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkDisplayProperties2KHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceDisplayPlaneProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkDisplayPlaneProperties2KHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDisplayModeProperties2KHRDel = delegate of VkPhysicalDevice * KHRDisplay.VkDisplayKHR * nativeptr<uint32> * nativeptr<VkDisplayModeProperties2KHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDisplayPlaneCapabilities2KHRDel = delegate of VkPhysicalDevice * nativeptr<VkDisplayPlaneInfo2KHR> * nativeptr<VkDisplayPlaneCapabilities2KHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRGetDisplayProperties2")
                static let s_vkGetPhysicalDeviceDisplayProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceDisplayProperties2KHRDel> "vkGetPhysicalDeviceDisplayProperties2KHR"
                static let s_vkGetPhysicalDeviceDisplayPlaneProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceDisplayPlaneProperties2KHRDel> "vkGetPhysicalDeviceDisplayPlaneProperties2KHR"
                static let s_vkGetDisplayModeProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetDisplayModeProperties2KHRDel> "vkGetDisplayModeProperties2KHR"
                static let s_vkGetDisplayPlaneCapabilities2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetDisplayPlaneCapabilities2KHRDel> "vkGetDisplayPlaneCapabilities2KHR"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceDisplayProperties2KHR = s_vkGetPhysicalDeviceDisplayProperties2KHRDel
                static member vkGetPhysicalDeviceDisplayPlaneProperties2KHR = s_vkGetPhysicalDeviceDisplayPlaneProperties2KHRDel
                static member vkGetDisplayModeProperties2KHR = s_vkGetDisplayModeProperties2KHRDel
                static member vkGetDisplayPlaneCapabilities2KHR = s_vkGetDisplayPlaneCapabilities2KHRDel
            let vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkDisplayProperties2KHR>) = Loader<unit>.vkGetPhysicalDeviceDisplayProperties2KHR.Invoke(physicalDevice, pPropertyCount, pProperties)
            let vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkDisplayPlaneProperties2KHR>) = Loader<unit>.vkGetPhysicalDeviceDisplayPlaneProperties2KHR.Invoke(physicalDevice, pPropertyCount, pProperties)
            let vkGetDisplayModeProperties2KHR(physicalDevice : VkPhysicalDevice, display : KHRDisplay.VkDisplayKHR, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkDisplayModeProperties2KHR>) = Loader<unit>.vkGetDisplayModeProperties2KHR.Invoke(physicalDevice, display, pPropertyCount, pProperties)
            let vkGetDisplayPlaneCapabilities2KHR(physicalDevice : VkPhysicalDevice, pDisplayPlaneInfo : nativeptr<VkDisplayPlaneInfo2KHR>, pCapabilities : nativeptr<VkDisplayPlaneCapabilities2KHR>) = Loader<unit>.vkGetDisplayPlaneCapabilities2KHR.Invoke(physicalDevice, pDisplayPlaneInfo, pCapabilities)

    /// Requires KHRSurface.
    /// Deprecated by EXTMetalSurface.
    module MVKIosSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_MVK_ios_surface"
        let Number = 123

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIOSSurfaceCreateInfoMVK =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkIOSSurfaceCreateFlagsMVK
                val mutable public pView : nativeint

                new(pNext: nativeint, flags: VkIOSSurfaceCreateFlagsMVK, pView: nativeint) =
                    {
                        sType = 1000122000u
                        pNext = pNext
                        flags = flags
                        pView = pView
                    }

                new(flags: VkIOSSurfaceCreateFlagsMVK, pView: nativeint) =
                    VkIOSSurfaceCreateInfoMVK(Unchecked.defaultof<nativeint>, flags, pView)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkIOSSurfaceCreateFlagsMVK> && x.pView = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkIOSSurfaceCreateInfoMVK(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkIOSSurfaceCreateFlagsMVK>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "pView = %A" x.pView
                    ] |> sprintf "VkIOSSurfaceCreateInfoMVK { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateIOSSurfaceMVKDel = delegate of VkInstance * nativeptr<VkIOSSurfaceCreateInfoMVK> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading MVKIosSurface")
                static let s_vkCreateIOSSurfaceMVKDel = VkRaw.vkImportInstanceDelegate<VkCreateIOSSurfaceMVKDel> "vkCreateIOSSurfaceMVK"
                static do Report.End(3) |> ignore
                static member vkCreateIOSSurfaceMVK = s_vkCreateIOSSurfaceMVKDel
            let vkCreateIOSSurfaceMVK(instance : VkInstance, pCreateInfo : nativeptr<VkIOSSurfaceCreateInfoMVK>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateIOSSurfaceMVK.Invoke(instance, pCreateInfo, pAllocator, pSurface)

    /// Requires KHRSurface.
    /// Deprecated by EXTMetalSurface.
    module MVKMacosSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_MVK_macos_surface"
        let Number = 124

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMacOSSurfaceCreateInfoMVK =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkMacOSSurfaceCreateFlagsMVK
                val mutable public pView : nativeint

                new(pNext: nativeint, flags: VkMacOSSurfaceCreateFlagsMVK, pView: nativeint) =
                    {
                        sType = 1000123000u
                        pNext = pNext
                        flags = flags
                        pView = pView
                    }

                new(flags: VkMacOSSurfaceCreateFlagsMVK, pView: nativeint) =
                    VkMacOSSurfaceCreateInfoMVK(Unchecked.defaultof<nativeint>, flags, pView)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkMacOSSurfaceCreateFlagsMVK> && x.pView = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkMacOSSurfaceCreateInfoMVK(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMacOSSurfaceCreateFlagsMVK>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "pView = %A" x.pView
                    ] |> sprintf "VkMacOSSurfaceCreateInfoMVK { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateMacOSSurfaceMVKDel = delegate of VkInstance * nativeptr<VkMacOSSurfaceCreateInfoMVK> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading MVKMacosSurface")
                static let s_vkCreateMacOSSurfaceMVKDel = VkRaw.vkImportInstanceDelegate<VkCreateMacOSSurfaceMVKDel> "vkCreateMacOSSurfaceMVK"
                static do Report.End(3) |> ignore
                static member vkCreateMacOSSurfaceMVK = s_vkCreateMacOSSurfaceMVKDel
            let vkCreateMacOSSurfaceMVK(instance : VkInstance, pCreateInfo : nativeptr<VkMacOSSurfaceCreateInfoMVK>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateMacOSSurfaceMVK.Invoke(instance, pCreateInfo, pAllocator, pSurface)

    /// Requires KHRExternalMemoryFd.
    module EXTExternalMemoryDmaBuf =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_external_memory_dma_buf"
        let Number = 126

        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkExternalMemoryHandleTypeFlags with
                  static member inline DmaBufBitExt = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00000200


    /// Requires KHRExternalMemory | Vulkan11.
    module EXTQueueFamilyForeign =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_queue_family_foreign"
        let Number = 127

    /// Requires KHRGetMemoryRequirements2 | Vulkan11.
    /// Promoted to Vulkan11.
    module KHRDedicatedAllocation =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_dedicated_allocation"
        let Number = 128

        type VkMemoryDedicatedAllocateInfoKHR = Vulkan11.VkMemoryDedicatedAllocateInfo

        type VkMemoryDedicatedRequirementsKHR = Vulkan11.VkMemoryDedicatedRequirements



    module EXTDebugUtils =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_debug_utils"
        let Number = 129

        type PFN_vkDebugUtilsMessengerCallbackEXT = nativeint


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDebugUtilsMessengerEXT =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkDebugUtilsMessengerEXT(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<Flags>]
        type VkDebugUtilsMessageSeverityFlagsEXT =
            | All = 4369
            | None = 0
            | VerboseBit = 0x00000001
            | InfoBit = 0x00000010
            | WarningBit = 0x00000100
            | ErrorBit = 0x00001000

        [<Flags>]
        type VkDebugUtilsMessageTypeFlagsEXT =
            | All = 7
            | None = 0
            | GeneralBit = 0x00000001
            | ValidationBit = 0x00000002
            | PerformanceBit = 0x00000004


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDebugUtilsLabelEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pLabelName : cstr
                val mutable public color : V4f

                new(pNext: nativeint, pLabelName: cstr, color: V4f) =
                    {
                        sType = 1000128002u
                        pNext = pNext
                        pLabelName = pLabelName
                        color = color
                    }

                new(pLabelName: cstr, color: V4f) =
                    VkDebugUtilsLabelEXT(Unchecked.defaultof<nativeint>, pLabelName, color)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pLabelName = Unchecked.defaultof<cstr> && x.color = Unchecked.defaultof<V4f>

                static member Empty =
                    VkDebugUtilsLabelEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>, Unchecked.defaultof<V4f>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pLabelName = %A" x.pLabelName
                        sprintf "color = %A" x.color
                    ] |> sprintf "VkDebugUtilsLabelEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDebugUtilsObjectNameInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public objectType : VkObjectType
                val mutable public objectHandle : uint64
                val mutable public pObjectName : cstr

                new(pNext: nativeint, objectType: VkObjectType, objectHandle: uint64, pObjectName: cstr) =
                    {
                        sType = 1000128000u
                        pNext = pNext
                        objectType = objectType
                        objectHandle = objectHandle
                        pObjectName = pObjectName
                    }

                new(objectType: VkObjectType, objectHandle: uint64, pObjectName: cstr) =
                    VkDebugUtilsObjectNameInfoEXT(Unchecked.defaultof<nativeint>, objectType, objectHandle, pObjectName)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.objectType = Unchecked.defaultof<VkObjectType> && x.objectHandle = Unchecked.defaultof<uint64> && x.pObjectName = Unchecked.defaultof<cstr>

                static member Empty =
                    VkDebugUtilsObjectNameInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkObjectType>, Unchecked.defaultof<uint64>, Unchecked.defaultof<cstr>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "objectType = %A" x.objectType
                        sprintf "objectHandle = %A" x.objectHandle
                        sprintf "pObjectName = %A" x.pObjectName
                    ] |> sprintf "VkDebugUtilsObjectNameInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDebugUtilsMessengerCallbackDataEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkDebugUtilsMessengerCallbackDataFlagsEXT
                val mutable public pMessageIdName : cstr
                val mutable public messageIdNumber : int32
                val mutable public pMessage : cstr
                val mutable public queueLabelCount : uint32
                val mutable public pQueueLabels : nativeptr<VkDebugUtilsLabelEXT>
                val mutable public cmdBufLabelCount : uint32
                val mutable public pCmdBufLabels : nativeptr<VkDebugUtilsLabelEXT>
                val mutable public objectCount : uint32
                val mutable public pObjects : nativeptr<VkDebugUtilsObjectNameInfoEXT>

                new(pNext: nativeint, flags: VkDebugUtilsMessengerCallbackDataFlagsEXT, pMessageIdName: cstr, messageIdNumber: int32, pMessage: cstr, queueLabelCount: uint32, pQueueLabels: nativeptr<VkDebugUtilsLabelEXT>, cmdBufLabelCount: uint32, pCmdBufLabels: nativeptr<VkDebugUtilsLabelEXT>, objectCount: uint32, pObjects: nativeptr<VkDebugUtilsObjectNameInfoEXT>) =
                    {
                        sType = 1000128003u
                        pNext = pNext
                        flags = flags
                        pMessageIdName = pMessageIdName
                        messageIdNumber = messageIdNumber
                        pMessage = pMessage
                        queueLabelCount = queueLabelCount
                        pQueueLabels = pQueueLabels
                        cmdBufLabelCount = cmdBufLabelCount
                        pCmdBufLabels = pCmdBufLabels
                        objectCount = objectCount
                        pObjects = pObjects
                    }

                new(flags: VkDebugUtilsMessengerCallbackDataFlagsEXT, pMessageIdName: cstr, messageIdNumber: int32, pMessage: cstr, queueLabelCount: uint32, pQueueLabels: nativeptr<VkDebugUtilsLabelEXT>, cmdBufLabelCount: uint32, pCmdBufLabels: nativeptr<VkDebugUtilsLabelEXT>, objectCount: uint32, pObjects: nativeptr<VkDebugUtilsObjectNameInfoEXT>) =
                    VkDebugUtilsMessengerCallbackDataEXT(Unchecked.defaultof<nativeint>, flags, pMessageIdName, messageIdNumber, pMessage, queueLabelCount, pQueueLabels, cmdBufLabelCount, pCmdBufLabels, objectCount, pObjects)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDebugUtilsMessengerCallbackDataFlagsEXT> && x.pMessageIdName = Unchecked.defaultof<cstr> && x.messageIdNumber = Unchecked.defaultof<int32> && x.pMessage = Unchecked.defaultof<cstr> && x.queueLabelCount = Unchecked.defaultof<uint32> && x.pQueueLabels = Unchecked.defaultof<nativeptr<VkDebugUtilsLabelEXT>> && x.cmdBufLabelCount = Unchecked.defaultof<uint32> && x.pCmdBufLabels = Unchecked.defaultof<nativeptr<VkDebugUtilsLabelEXT>> && x.objectCount = Unchecked.defaultof<uint32> && x.pObjects = Unchecked.defaultof<nativeptr<VkDebugUtilsObjectNameInfoEXT>>

                static member Empty =
                    VkDebugUtilsMessengerCallbackDataEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDebugUtilsMessengerCallbackDataFlagsEXT>, Unchecked.defaultof<cstr>, Unchecked.defaultof<int32>, Unchecked.defaultof<cstr>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDebugUtilsLabelEXT>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDebugUtilsLabelEXT>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDebugUtilsObjectNameInfoEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "pMessageIdName = %A" x.pMessageIdName
                        sprintf "messageIdNumber = %A" x.messageIdNumber
                        sprintf "pMessage = %A" x.pMessage
                        sprintf "queueLabelCount = %A" x.queueLabelCount
                        sprintf "pQueueLabels = %A" x.pQueueLabels
                        sprintf "cmdBufLabelCount = %A" x.cmdBufLabelCount
                        sprintf "pCmdBufLabels = %A" x.pCmdBufLabels
                        sprintf "objectCount = %A" x.objectCount
                        sprintf "pObjects = %A" x.pObjects
                    ] |> sprintf "VkDebugUtilsMessengerCallbackDataEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDebugUtilsMessengerCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkDebugUtilsMessengerCreateFlagsEXT
                val mutable public messageSeverity : VkDebugUtilsMessageSeverityFlagsEXT
                val mutable public messageType : VkDebugUtilsMessageTypeFlagsEXT
                val mutable public pfnUserCallback : PFN_vkDebugUtilsMessengerCallbackEXT
                val mutable public pUserData : nativeint

                new(pNext: nativeint, flags: VkDebugUtilsMessengerCreateFlagsEXT, messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT, messageType: VkDebugUtilsMessageTypeFlagsEXT, pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT, pUserData: nativeint) =
                    {
                        sType = 1000128004u
                        pNext = pNext
                        flags = flags
                        messageSeverity = messageSeverity
                        messageType = messageType
                        pfnUserCallback = pfnUserCallback
                        pUserData = pUserData
                    }

                new(flags: VkDebugUtilsMessengerCreateFlagsEXT, messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT, messageType: VkDebugUtilsMessageTypeFlagsEXT, pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT, pUserData: nativeint) =
                    VkDebugUtilsMessengerCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, messageSeverity, messageType, pfnUserCallback, pUserData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDebugUtilsMessengerCreateFlagsEXT> && x.messageSeverity = Unchecked.defaultof<VkDebugUtilsMessageSeverityFlagsEXT> && x.messageType = Unchecked.defaultof<VkDebugUtilsMessageTypeFlagsEXT> && x.pfnUserCallback = Unchecked.defaultof<PFN_vkDebugUtilsMessengerCallbackEXT> && x.pUserData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkDebugUtilsMessengerCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDebugUtilsMessengerCreateFlagsEXT>, Unchecked.defaultof<VkDebugUtilsMessageSeverityFlagsEXT>, Unchecked.defaultof<VkDebugUtilsMessageTypeFlagsEXT>, Unchecked.defaultof<PFN_vkDebugUtilsMessengerCallbackEXT>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "messageSeverity = %A" x.messageSeverity
                        sprintf "messageType = %A" x.messageType
                        sprintf "pfnUserCallback = %A" x.pfnUserCallback
                        sprintf "pUserData = %A" x.pUserData
                    ] |> sprintf "VkDebugUtilsMessengerCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDebugUtilsObjectTagInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public objectType : VkObjectType
                val mutable public objectHandle : uint64
                val mutable public tagName : uint64
                val mutable public tagSize : uint64
                val mutable public pTag : nativeint

                new(pNext: nativeint, objectType: VkObjectType, objectHandle: uint64, tagName: uint64, tagSize: uint64, pTag: nativeint) =
                    {
                        sType = 1000128001u
                        pNext = pNext
                        objectType = objectType
                        objectHandle = objectHandle
                        tagName = tagName
                        tagSize = tagSize
                        pTag = pTag
                    }

                new(objectType: VkObjectType, objectHandle: uint64, tagName: uint64, tagSize: uint64, pTag: nativeint) =
                    VkDebugUtilsObjectTagInfoEXT(Unchecked.defaultof<nativeint>, objectType, objectHandle, tagName, tagSize, pTag)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.objectType = Unchecked.defaultof<VkObjectType> && x.objectHandle = Unchecked.defaultof<uint64> && x.tagName = Unchecked.defaultof<uint64> && x.tagSize = Unchecked.defaultof<uint64> && x.pTag = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkDebugUtilsObjectTagInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkObjectType>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "objectType = %A" x.objectType
                        sprintf "objectHandle = %A" x.objectHandle
                        sprintf "tagName = %A" x.tagName
                        sprintf "tagSize = %A" x.tagSize
                        sprintf "pTag = %A" x.pTag
                    ] |> sprintf "VkDebugUtilsObjectTagInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  static member inline DebugUtilsMessengerExt = enum<VkObjectType> 1000128000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkSetDebugUtilsObjectNameEXTDel = delegate of VkDevice * nativeptr<VkDebugUtilsObjectNameInfoEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkSetDebugUtilsObjectTagEXTDel = delegate of VkDevice * nativeptr<VkDebugUtilsObjectTagInfoEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkQueueBeginDebugUtilsLabelEXTDel = delegate of VkQueue * nativeptr<VkDebugUtilsLabelEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkQueueEndDebugUtilsLabelEXTDel = delegate of VkQueue -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkQueueInsertDebugUtilsLabelEXTDel = delegate of VkQueue * nativeptr<VkDebugUtilsLabelEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBeginDebugUtilsLabelEXTDel = delegate of VkCommandBuffer * nativeptr<VkDebugUtilsLabelEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdEndDebugUtilsLabelEXTDel = delegate of VkCommandBuffer -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdInsertDebugUtilsLabelEXTDel = delegate of VkCommandBuffer * nativeptr<VkDebugUtilsLabelEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateDebugUtilsMessengerEXTDel = delegate of VkInstance * nativeptr<VkDebugUtilsMessengerCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkDebugUtilsMessengerEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyDebugUtilsMessengerEXTDel = delegate of VkInstance * VkDebugUtilsMessengerEXT * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkSubmitDebugUtilsMessageEXTDel = delegate of VkInstance * VkDebugUtilsMessageSeverityFlagsEXT * VkDebugUtilsMessageTypeFlagsEXT * nativeptr<VkDebugUtilsMessengerCallbackDataEXT> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTDebugUtils")
                static let s_vkSetDebugUtilsObjectNameEXTDel = VkRaw.vkImportInstanceDelegate<VkSetDebugUtilsObjectNameEXTDel> "vkSetDebugUtilsObjectNameEXT"
                static let s_vkSetDebugUtilsObjectTagEXTDel = VkRaw.vkImportInstanceDelegate<VkSetDebugUtilsObjectTagEXTDel> "vkSetDebugUtilsObjectTagEXT"
                static let s_vkQueueBeginDebugUtilsLabelEXTDel = VkRaw.vkImportInstanceDelegate<VkQueueBeginDebugUtilsLabelEXTDel> "vkQueueBeginDebugUtilsLabelEXT"
                static let s_vkQueueEndDebugUtilsLabelEXTDel = VkRaw.vkImportInstanceDelegate<VkQueueEndDebugUtilsLabelEXTDel> "vkQueueEndDebugUtilsLabelEXT"
                static let s_vkQueueInsertDebugUtilsLabelEXTDel = VkRaw.vkImportInstanceDelegate<VkQueueInsertDebugUtilsLabelEXTDel> "vkQueueInsertDebugUtilsLabelEXT"
                static let s_vkCmdBeginDebugUtilsLabelEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginDebugUtilsLabelEXTDel> "vkCmdBeginDebugUtilsLabelEXT"
                static let s_vkCmdEndDebugUtilsLabelEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdEndDebugUtilsLabelEXTDel> "vkCmdEndDebugUtilsLabelEXT"
                static let s_vkCmdInsertDebugUtilsLabelEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdInsertDebugUtilsLabelEXTDel> "vkCmdInsertDebugUtilsLabelEXT"
                static let s_vkCreateDebugUtilsMessengerEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateDebugUtilsMessengerEXTDel> "vkCreateDebugUtilsMessengerEXT"
                static let s_vkDestroyDebugUtilsMessengerEXTDel = VkRaw.vkImportInstanceDelegate<VkDestroyDebugUtilsMessengerEXTDel> "vkDestroyDebugUtilsMessengerEXT"
                static let s_vkSubmitDebugUtilsMessageEXTDel = VkRaw.vkImportInstanceDelegate<VkSubmitDebugUtilsMessageEXTDel> "vkSubmitDebugUtilsMessageEXT"
                static do Report.End(3) |> ignore
                static member vkSetDebugUtilsObjectNameEXT = s_vkSetDebugUtilsObjectNameEXTDel
                static member vkSetDebugUtilsObjectTagEXT = s_vkSetDebugUtilsObjectTagEXTDel
                static member vkQueueBeginDebugUtilsLabelEXT = s_vkQueueBeginDebugUtilsLabelEXTDel
                static member vkQueueEndDebugUtilsLabelEXT = s_vkQueueEndDebugUtilsLabelEXTDel
                static member vkQueueInsertDebugUtilsLabelEXT = s_vkQueueInsertDebugUtilsLabelEXTDel
                static member vkCmdBeginDebugUtilsLabelEXT = s_vkCmdBeginDebugUtilsLabelEXTDel
                static member vkCmdEndDebugUtilsLabelEXT = s_vkCmdEndDebugUtilsLabelEXTDel
                static member vkCmdInsertDebugUtilsLabelEXT = s_vkCmdInsertDebugUtilsLabelEXTDel
                static member vkCreateDebugUtilsMessengerEXT = s_vkCreateDebugUtilsMessengerEXTDel
                static member vkDestroyDebugUtilsMessengerEXT = s_vkDestroyDebugUtilsMessengerEXTDel
                static member vkSubmitDebugUtilsMessageEXT = s_vkSubmitDebugUtilsMessageEXTDel
            let vkSetDebugUtilsObjectNameEXT(device : VkDevice, pNameInfo : nativeptr<VkDebugUtilsObjectNameInfoEXT>) = Loader<unit>.vkSetDebugUtilsObjectNameEXT.Invoke(device, pNameInfo)
            let vkSetDebugUtilsObjectTagEXT(device : VkDevice, pTagInfo : nativeptr<VkDebugUtilsObjectTagInfoEXT>) = Loader<unit>.vkSetDebugUtilsObjectTagEXT.Invoke(device, pTagInfo)
            let vkQueueBeginDebugUtilsLabelEXT(queue : VkQueue, pLabelInfo : nativeptr<VkDebugUtilsLabelEXT>) = Loader<unit>.vkQueueBeginDebugUtilsLabelEXT.Invoke(queue, pLabelInfo)
            let vkQueueEndDebugUtilsLabelEXT(queue : VkQueue) = Loader<unit>.vkQueueEndDebugUtilsLabelEXT.Invoke(queue)
            let vkQueueInsertDebugUtilsLabelEXT(queue : VkQueue, pLabelInfo : nativeptr<VkDebugUtilsLabelEXT>) = Loader<unit>.vkQueueInsertDebugUtilsLabelEXT.Invoke(queue, pLabelInfo)
            let vkCmdBeginDebugUtilsLabelEXT(commandBuffer : VkCommandBuffer, pLabelInfo : nativeptr<VkDebugUtilsLabelEXT>) = Loader<unit>.vkCmdBeginDebugUtilsLabelEXT.Invoke(commandBuffer, pLabelInfo)
            let vkCmdEndDebugUtilsLabelEXT(commandBuffer : VkCommandBuffer) = Loader<unit>.vkCmdEndDebugUtilsLabelEXT.Invoke(commandBuffer)
            let vkCmdInsertDebugUtilsLabelEXT(commandBuffer : VkCommandBuffer, pLabelInfo : nativeptr<VkDebugUtilsLabelEXT>) = Loader<unit>.vkCmdInsertDebugUtilsLabelEXT.Invoke(commandBuffer, pLabelInfo)
            let vkCreateDebugUtilsMessengerEXT(instance : VkInstance, pCreateInfo : nativeptr<VkDebugUtilsMessengerCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pMessenger : nativeptr<VkDebugUtilsMessengerEXT>) = Loader<unit>.vkCreateDebugUtilsMessengerEXT.Invoke(instance, pCreateInfo, pAllocator, pMessenger)
            let vkDestroyDebugUtilsMessengerEXT(instance : VkInstance, messenger : VkDebugUtilsMessengerEXT, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyDebugUtilsMessengerEXT.Invoke(instance, messenger, pAllocator)
            let vkSubmitDebugUtilsMessageEXT(instance : VkInstance, messageSeverity : VkDebugUtilsMessageSeverityFlagsEXT, messageTypes : VkDebugUtilsMessageTypeFlagsEXT, pCallbackData : nativeptr<VkDebugUtilsMessengerCallbackDataEXT>) = Loader<unit>.vkSubmitDebugUtilsMessageEXT.Invoke(instance, messageSeverity, messageTypes, pCallbackData)

    /// Requires ((KHRSamplerYcbcrConversion, KHRExternalMemory, KHRDedicatedAllocation) | Vulkan11), EXTQueueFamilyForeign.
    module ANDROIDExternalMemoryAndroidHardwareBuffer =
        let Type = ExtensionType.Device
        let Name = "VK_ANDROID_external_memory_android_hardware_buffer"
        let Number = 130

        type AHardwareBuffer = nativeint

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAndroidHardwareBufferFormatPropertiesANDROID =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public format : VkFormat
                val mutable public externalFormat : uint64
                val mutable public formatFeatures : VkFormatFeatureFlags
                val mutable public samplerYcbcrConversionComponents : VkComponentMapping
                val mutable public suggestedYcbcrModel : Vulkan11.VkSamplerYcbcrModelConversion
                val mutable public suggestedYcbcrRange : Vulkan11.VkSamplerYcbcrRange
                val mutable public suggestedXChromaOffset : Vulkan11.VkChromaLocation
                val mutable public suggestedYChromaOffset : Vulkan11.VkChromaLocation

                new(pNext: nativeint, format: VkFormat, externalFormat: uint64, formatFeatures: VkFormatFeatureFlags, samplerYcbcrConversionComponents: VkComponentMapping, suggestedYcbcrModel: Vulkan11.VkSamplerYcbcrModelConversion, suggestedYcbcrRange: Vulkan11.VkSamplerYcbcrRange, suggestedXChromaOffset: Vulkan11.VkChromaLocation, suggestedYChromaOffset: Vulkan11.VkChromaLocation) =
                    {
                        sType = 1000129002u
                        pNext = pNext
                        format = format
                        externalFormat = externalFormat
                        formatFeatures = formatFeatures
                        samplerYcbcrConversionComponents = samplerYcbcrConversionComponents
                        suggestedYcbcrModel = suggestedYcbcrModel
                        suggestedYcbcrRange = suggestedYcbcrRange
                        suggestedXChromaOffset = suggestedXChromaOffset
                        suggestedYChromaOffset = suggestedYChromaOffset
                    }

                new(format: VkFormat, externalFormat: uint64, formatFeatures: VkFormatFeatureFlags, samplerYcbcrConversionComponents: VkComponentMapping, suggestedYcbcrModel: Vulkan11.VkSamplerYcbcrModelConversion, suggestedYcbcrRange: Vulkan11.VkSamplerYcbcrRange, suggestedXChromaOffset: Vulkan11.VkChromaLocation, suggestedYChromaOffset: Vulkan11.VkChromaLocation) =
                    VkAndroidHardwareBufferFormatPropertiesANDROID(Unchecked.defaultof<nativeint>, format, externalFormat, formatFeatures, samplerYcbcrConversionComponents, suggestedYcbcrModel, suggestedYcbcrRange, suggestedXChromaOffset, suggestedYChromaOffset)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x.externalFormat = Unchecked.defaultof<uint64> && x.formatFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.samplerYcbcrConversionComponents = Unchecked.defaultof<VkComponentMapping> && x.suggestedYcbcrModel = Unchecked.defaultof<Vulkan11.VkSamplerYcbcrModelConversion> && x.suggestedYcbcrRange = Unchecked.defaultof<Vulkan11.VkSamplerYcbcrRange> && x.suggestedXChromaOffset = Unchecked.defaultof<Vulkan11.VkChromaLocation> && x.suggestedYChromaOffset = Unchecked.defaultof<Vulkan11.VkChromaLocation>

                static member Empty =
                    VkAndroidHardwareBufferFormatPropertiesANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<Vulkan11.VkSamplerYcbcrModelConversion>, Unchecked.defaultof<Vulkan11.VkSamplerYcbcrRange>, Unchecked.defaultof<Vulkan11.VkChromaLocation>, Unchecked.defaultof<Vulkan11.VkChromaLocation>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "format = %A" x.format
                        sprintf "externalFormat = %A" x.externalFormat
                        sprintf "formatFeatures = %A" x.formatFeatures
                        sprintf "samplerYcbcrConversionComponents = %A" x.samplerYcbcrConversionComponents
                        sprintf "suggestedYcbcrModel = %A" x.suggestedYcbcrModel
                        sprintf "suggestedYcbcrRange = %A" x.suggestedYcbcrRange
                        sprintf "suggestedXChromaOffset = %A" x.suggestedXChromaOffset
                        sprintf "suggestedYChromaOffset = %A" x.suggestedYChromaOffset
                    ] |> sprintf "VkAndroidHardwareBufferFormatPropertiesANDROID { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAndroidHardwareBufferPropertiesANDROID =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public allocationSize : VkDeviceSize
                val mutable public memoryTypeBits : uint32

                new(pNext: nativeint, allocationSize: VkDeviceSize, memoryTypeBits: uint32) =
                    {
                        sType = 1000129001u
                        pNext = pNext
                        allocationSize = allocationSize
                        memoryTypeBits = memoryTypeBits
                    }

                new(allocationSize: VkDeviceSize, memoryTypeBits: uint32) =
                    VkAndroidHardwareBufferPropertiesANDROID(Unchecked.defaultof<nativeint>, allocationSize, memoryTypeBits)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.allocationSize = Unchecked.defaultof<VkDeviceSize> && x.memoryTypeBits = Unchecked.defaultof<uint32>

                static member Empty =
                    VkAndroidHardwareBufferPropertiesANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "allocationSize = %A" x.allocationSize
                        sprintf "memoryTypeBits = %A" x.memoryTypeBits
                    ] |> sprintf "VkAndroidHardwareBufferPropertiesANDROID { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAndroidHardwareBufferUsageANDROID =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public androidHardwareBufferUsage : uint64

                new(pNext: nativeint, androidHardwareBufferUsage: uint64) =
                    {
                        sType = 1000129000u
                        pNext = pNext
                        androidHardwareBufferUsage = androidHardwareBufferUsage
                    }

                new(androidHardwareBufferUsage: uint64) =
                    VkAndroidHardwareBufferUsageANDROID(Unchecked.defaultof<nativeint>, androidHardwareBufferUsage)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.androidHardwareBufferUsage = Unchecked.defaultof<uint64>

                static member Empty =
                    VkAndroidHardwareBufferUsageANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "androidHardwareBufferUsage = %A" x.androidHardwareBufferUsage
                    ] |> sprintf "VkAndroidHardwareBufferUsageANDROID { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExternalFormatANDROID =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public externalFormat : uint64

                new(pNext: nativeint, externalFormat: uint64) =
                    {
                        sType = 1000129005u
                        pNext = pNext
                        externalFormat = externalFormat
                    }

                new(externalFormat: uint64) =
                    VkExternalFormatANDROID(Unchecked.defaultof<nativeint>, externalFormat)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.externalFormat = Unchecked.defaultof<uint64>

                static member Empty =
                    VkExternalFormatANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "externalFormat = %A" x.externalFormat
                    ] |> sprintf "VkExternalFormatANDROID { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportAndroidHardwareBufferInfoANDROID =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public buffer : nativeptr<nativeint>

                new(pNext: nativeint, buffer: nativeptr<nativeint>) =
                    {
                        sType = 1000129003u
                        pNext = pNext
                        buffer = buffer
                    }

                new(buffer: nativeptr<nativeint>) =
                    VkImportAndroidHardwareBufferInfoANDROID(Unchecked.defaultof<nativeint>, buffer)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkImportAndroidHardwareBufferInfoANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "buffer = %A" x.buffer
                    ] |> sprintf "VkImportAndroidHardwareBufferInfoANDROID { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryGetAndroidHardwareBufferInfoANDROID =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memory : VkDeviceMemory

                new(pNext: nativeint, memory: VkDeviceMemory) =
                    {
                        sType = 1000129004u
                        pNext = pNext
                        memory = memory
                    }

                new(memory: VkDeviceMemory) =
                    VkMemoryGetAndroidHardwareBufferInfoANDROID(Unchecked.defaultof<nativeint>, memory)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory>

                static member Empty =
                    VkMemoryGetAndroidHardwareBufferInfoANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memory = %A" x.memory
                    ] |> sprintf "VkMemoryGetAndroidHardwareBufferInfoANDROID { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkExternalMemoryHandleTypeFlags with
                  static member inline AndroidHardwareBufferBitAndroid = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00000400

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetAndroidHardwareBufferPropertiesANDROIDDel = delegate of VkDevice * nativeptr<nativeint> * nativeptr<VkAndroidHardwareBufferPropertiesANDROID> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMemoryAndroidHardwareBufferANDROIDDel = delegate of VkDevice * nativeptr<VkMemoryGetAndroidHardwareBufferInfoANDROID> * nativeptr<nativeptr<nativeint>> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading ANDROIDExternalMemoryAndroidHardwareBuffer")
                static let s_vkGetAndroidHardwareBufferPropertiesANDROIDDel = VkRaw.vkImportInstanceDelegate<VkGetAndroidHardwareBufferPropertiesANDROIDDel> "vkGetAndroidHardwareBufferPropertiesANDROID"
                static let s_vkGetMemoryAndroidHardwareBufferANDROIDDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryAndroidHardwareBufferANDROIDDel> "vkGetMemoryAndroidHardwareBufferANDROID"
                static do Report.End(3) |> ignore
                static member vkGetAndroidHardwareBufferPropertiesANDROID = s_vkGetAndroidHardwareBufferPropertiesANDROIDDel
                static member vkGetMemoryAndroidHardwareBufferANDROID = s_vkGetMemoryAndroidHardwareBufferANDROIDDel
            let vkGetAndroidHardwareBufferPropertiesANDROID(device : VkDevice, buffer : nativeptr<nativeint>, pProperties : nativeptr<VkAndroidHardwareBufferPropertiesANDROID>) = Loader<unit>.vkGetAndroidHardwareBufferPropertiesANDROID.Invoke(device, buffer, pProperties)
            let vkGetMemoryAndroidHardwareBufferANDROID(device : VkDevice, pInfo : nativeptr<VkMemoryGetAndroidHardwareBufferInfoANDROID>, pBuffer : nativeptr<nativeptr<nativeint>>) = Loader<unit>.vkGetMemoryAndroidHardwareBufferANDROID.Invoke(device, pInfo, pBuffer)

        [<AutoOpen>]
        module ``KHRFormatFeatureFlags2 | Vulkan13`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkAndroidHardwareBufferFormatProperties2ANDROID =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public format : VkFormat
                    val mutable public externalFormat : uint64
                    val mutable public formatFeatures : Vulkan13.VkFormatFeatureFlags2
                    val mutable public samplerYcbcrConversionComponents : VkComponentMapping
                    val mutable public suggestedYcbcrModel : Vulkan11.VkSamplerYcbcrModelConversion
                    val mutable public suggestedYcbcrRange : Vulkan11.VkSamplerYcbcrRange
                    val mutable public suggestedXChromaOffset : Vulkan11.VkChromaLocation
                    val mutable public suggestedYChromaOffset : Vulkan11.VkChromaLocation

                    new(pNext: nativeint, format: VkFormat, externalFormat: uint64, formatFeatures: Vulkan13.VkFormatFeatureFlags2, samplerYcbcrConversionComponents: VkComponentMapping, suggestedYcbcrModel: Vulkan11.VkSamplerYcbcrModelConversion, suggestedYcbcrRange: Vulkan11.VkSamplerYcbcrRange, suggestedXChromaOffset: Vulkan11.VkChromaLocation, suggestedYChromaOffset: Vulkan11.VkChromaLocation) =
                        {
                            sType = 1000129006u
                            pNext = pNext
                            format = format
                            externalFormat = externalFormat
                            formatFeatures = formatFeatures
                            samplerYcbcrConversionComponents = samplerYcbcrConversionComponents
                            suggestedYcbcrModel = suggestedYcbcrModel
                            suggestedYcbcrRange = suggestedYcbcrRange
                            suggestedXChromaOffset = suggestedXChromaOffset
                            suggestedYChromaOffset = suggestedYChromaOffset
                        }

                    new(format: VkFormat, externalFormat: uint64, formatFeatures: Vulkan13.VkFormatFeatureFlags2, samplerYcbcrConversionComponents: VkComponentMapping, suggestedYcbcrModel: Vulkan11.VkSamplerYcbcrModelConversion, suggestedYcbcrRange: Vulkan11.VkSamplerYcbcrRange, suggestedXChromaOffset: Vulkan11.VkChromaLocation, suggestedYChromaOffset: Vulkan11.VkChromaLocation) =
                        VkAndroidHardwareBufferFormatProperties2ANDROID(Unchecked.defaultof<nativeint>, format, externalFormat, formatFeatures, samplerYcbcrConversionComponents, suggestedYcbcrModel, suggestedYcbcrRange, suggestedXChromaOffset, suggestedYChromaOffset)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x.externalFormat = Unchecked.defaultof<uint64> && x.formatFeatures = Unchecked.defaultof<Vulkan13.VkFormatFeatureFlags2> && x.samplerYcbcrConversionComponents = Unchecked.defaultof<VkComponentMapping> && x.suggestedYcbcrModel = Unchecked.defaultof<Vulkan11.VkSamplerYcbcrModelConversion> && x.suggestedYcbcrRange = Unchecked.defaultof<Vulkan11.VkSamplerYcbcrRange> && x.suggestedXChromaOffset = Unchecked.defaultof<Vulkan11.VkChromaLocation> && x.suggestedYChromaOffset = Unchecked.defaultof<Vulkan11.VkChromaLocation>

                    static member Empty =
                        VkAndroidHardwareBufferFormatProperties2ANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<uint64>, Unchecked.defaultof<Vulkan13.VkFormatFeatureFlags2>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<Vulkan11.VkSamplerYcbcrModelConversion>, Unchecked.defaultof<Vulkan11.VkSamplerYcbcrRange>, Unchecked.defaultof<Vulkan11.VkChromaLocation>, Unchecked.defaultof<Vulkan11.VkChromaLocation>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "format = %A" x.format
                            sprintf "externalFormat = %A" x.externalFormat
                            sprintf "formatFeatures = %A" x.formatFeatures
                            sprintf "samplerYcbcrConversionComponents = %A" x.samplerYcbcrConversionComponents
                            sprintf "suggestedYcbcrModel = %A" x.suggestedYcbcrModel
                            sprintf "suggestedYcbcrRange = %A" x.suggestedYcbcrRange
                            sprintf "suggestedXChromaOffset = %A" x.suggestedXChromaOffset
                            sprintf "suggestedYChromaOffset = %A" x.suggestedYChromaOffset
                        ] |> sprintf "VkAndroidHardwareBufferFormatProperties2ANDROID { %s }"
                end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan12.
    module EXTSamplerFilterMinmax =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_sampler_filter_minmax"
        let Number = 131

        type VkSamplerReductionModeEXT = Vulkan12.VkSamplerReductionMode

        type VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = Vulkan12.VkPhysicalDeviceSamplerFilterMinmaxProperties

        type VkSamplerReductionModeCreateInfoEXT = Vulkan12.VkSamplerReductionModeCreateInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkFormatFeatureFlags with
                  static member inline SampledImageFilterMinmaxBitExt = enum<VkFormatFeatureFlags> 0x00010000
             type Vulkan12.VkSamplerReductionMode with
                  static member inline WeightedAverageExt = enum<Vulkan12.VkSamplerReductionMode> 0
                  static member inline MinExt = enum<Vulkan12.VkSamplerReductionMode> 1
                  static member inline MaxExt = enum<Vulkan12.VkSamplerReductionMode> 2


    /// Promoted to Vulkan11.
    module KHRStorageBufferStorageClass =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_storage_buffer_storage_class"
        let Number = 132

    /// Deprecated by KHRShaderFloat16Int8.
    module AMDGpuShaderInt16 =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_gpu_shader_int16"
        let Number = 133

    /// Requires ((KHRSynchronization2, KHRSpirv14, EXTExtendedDynamicState) | Vulkan13), KHRMaintenance5, KHRPipelineLibrary.
    module AMDXShaderEnqueue =
        let Type = ExtensionType.Device
        let Name = "VK_AMDX_shader_enqueue"
        let Number = 135

        [<StructLayout(LayoutKind.Explicit)>]
        type VkDeviceOrHostAddressConstAMDX =
            struct
                [<FieldOffset(0)>]
                val mutable public deviceAddress : VkDeviceAddress
                [<FieldOffset(0)>]
                val mutable public hostAddress : nativeint

                static member DeviceAddress(value: VkDeviceAddress) =
                    let mutable result = Unchecked.defaultof<VkDeviceOrHostAddressConstAMDX>
                    result.deviceAddress <- value
                    result

                static member HostAddress(value: nativeint) =
                    let mutable result = Unchecked.defaultof<VkDeviceOrHostAddressConstAMDX>
                    result.hostAddress <- value
                    result

                override x.ToString() =
                    String.concat "; " [
                        sprintf "deviceAddress = %A" x.deviceAddress
                        sprintf "hostAddress = %A" x.hostAddress
                    ] |> sprintf "VkDeviceOrHostAddressConstAMDX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDispatchGraphCountInfoAMDX =
            struct
                val mutable public count : uint32
                val mutable public infos : VkDeviceOrHostAddressConstAMDX
                val mutable public stride : uint64

                new(count: uint32, infos: VkDeviceOrHostAddressConstAMDX, stride: uint64) =
                    {
                        count = count
                        infos = infos
                        stride = stride
                    }

                member x.IsEmpty =
                    x.count = Unchecked.defaultof<uint32> && x.infos = Unchecked.defaultof<VkDeviceOrHostAddressConstAMDX> && x.stride = Unchecked.defaultof<uint64>

                static member Empty =
                    VkDispatchGraphCountInfoAMDX(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceOrHostAddressConstAMDX>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "count = %A" x.count
                        sprintf "infos = %A" x.infos
                        sprintf "stride = %A" x.stride
                    ] |> sprintf "VkDispatchGraphCountInfoAMDX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDispatchGraphInfoAMDX =
            struct
                val mutable public nodeIndex : uint32
                val mutable public payloadCount : uint32
                val mutable public payloads : VkDeviceOrHostAddressConstAMDX
                val mutable public payloadStride : uint64

                new(nodeIndex: uint32, payloadCount: uint32, payloads: VkDeviceOrHostAddressConstAMDX, payloadStride: uint64) =
                    {
                        nodeIndex = nodeIndex
                        payloadCount = payloadCount
                        payloads = payloads
                        payloadStride = payloadStride
                    }

                member x.IsEmpty =
                    x.nodeIndex = Unchecked.defaultof<uint32> && x.payloadCount = Unchecked.defaultof<uint32> && x.payloads = Unchecked.defaultof<VkDeviceOrHostAddressConstAMDX> && x.payloadStride = Unchecked.defaultof<uint64>

                static member Empty =
                    VkDispatchGraphInfoAMDX(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceOrHostAddressConstAMDX>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "nodeIndex = %A" x.nodeIndex
                        sprintf "payloadCount = %A" x.payloadCount
                        sprintf "payloads = %A" x.payloads
                        sprintf "payloadStride = %A" x.payloadStride
                    ] |> sprintf "VkDispatchGraphInfoAMDX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExecutionGraphPipelineCreateInfoAMDX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkPipelineCreateFlags
                val mutable public stageCount : uint32
                val mutable public pStages : nativeptr<VkPipelineShaderStageCreateInfo>
                val mutable public pLibraryInfo : nativeptr<KHRPipelineLibrary.VkPipelineLibraryCreateInfoKHR>
                val mutable public layout : VkPipelineLayout
                val mutable public basePipelineHandle : VkPipeline
                val mutable public basePipelineIndex : int32

                new(pNext: nativeint, flags: VkPipelineCreateFlags, stageCount: uint32, pStages: nativeptr<VkPipelineShaderStageCreateInfo>, pLibraryInfo: nativeptr<KHRPipelineLibrary.VkPipelineLibraryCreateInfoKHR>, layout: VkPipelineLayout, basePipelineHandle: VkPipeline, basePipelineIndex: int32) =
                    {
                        sType = 1000134003u
                        pNext = pNext
                        flags = flags
                        stageCount = stageCount
                        pStages = pStages
                        pLibraryInfo = pLibraryInfo
                        layout = layout
                        basePipelineHandle = basePipelineHandle
                        basePipelineIndex = basePipelineIndex
                    }

                new(flags: VkPipelineCreateFlags, stageCount: uint32, pStages: nativeptr<VkPipelineShaderStageCreateInfo>, pLibraryInfo: nativeptr<KHRPipelineLibrary.VkPipelineLibraryCreateInfoKHR>, layout: VkPipelineLayout, basePipelineHandle: VkPipeline, basePipelineIndex: int32) =
                    VkExecutionGraphPipelineCreateInfoAMDX(Unchecked.defaultof<nativeint>, flags, stageCount, pStages, pLibraryInfo, layout, basePipelineHandle, basePipelineIndex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCreateFlags> && x.stageCount = Unchecked.defaultof<uint32> && x.pStages = Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>> && x.pLibraryInfo = Unchecked.defaultof<nativeptr<KHRPipelineLibrary.VkPipelineLibraryCreateInfoKHR>> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.basePipelineHandle = Unchecked.defaultof<VkPipeline> && x.basePipelineIndex = Unchecked.defaultof<int32>

                static member Empty =
                    VkExecutionGraphPipelineCreateInfoAMDX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>>, Unchecked.defaultof<nativeptr<KHRPipelineLibrary.VkPipelineLibraryCreateInfoKHR>>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<int32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "stageCount = %A" x.stageCount
                        sprintf "pStages = %A" x.pStages
                        sprintf "pLibraryInfo = %A" x.pLibraryInfo
                        sprintf "layout = %A" x.layout
                        sprintf "basePipelineHandle = %A" x.basePipelineHandle
                        sprintf "basePipelineIndex = %A" x.basePipelineIndex
                    ] |> sprintf "VkExecutionGraphPipelineCreateInfoAMDX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExecutionGraphPipelineScratchSizeAMDX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public minSize : VkDeviceSize
                val mutable public maxSize : VkDeviceSize
                val mutable public sizeGranularity : VkDeviceSize

                new(pNext: nativeint, minSize: VkDeviceSize, maxSize: VkDeviceSize, sizeGranularity: VkDeviceSize) =
                    {
                        sType = 1000134002u
                        pNext = pNext
                        minSize = minSize
                        maxSize = maxSize
                        sizeGranularity = sizeGranularity
                    }

                new(minSize: VkDeviceSize, maxSize: VkDeviceSize, sizeGranularity: VkDeviceSize) =
                    VkExecutionGraphPipelineScratchSizeAMDX(Unchecked.defaultof<nativeint>, minSize, maxSize, sizeGranularity)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.minSize = Unchecked.defaultof<VkDeviceSize> && x.maxSize = Unchecked.defaultof<VkDeviceSize> && x.sizeGranularity = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkExecutionGraphPipelineScratchSizeAMDX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "minSize = %A" x.minSize
                        sprintf "maxSize = %A" x.maxSize
                        sprintf "sizeGranularity = %A" x.sizeGranularity
                    ] |> sprintf "VkExecutionGraphPipelineScratchSizeAMDX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderEnqueueFeaturesAMDX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderEnqueue : VkBool32
                val mutable public shaderMeshEnqueue : VkBool32

                new(pNext: nativeint, shaderEnqueue: VkBool32, shaderMeshEnqueue: VkBool32) =
                    {
                        sType = 1000134000u
                        pNext = pNext
                        shaderEnqueue = shaderEnqueue
                        shaderMeshEnqueue = shaderMeshEnqueue
                    }

                new(shaderEnqueue: VkBool32, shaderMeshEnqueue: VkBool32) =
                    VkPhysicalDeviceShaderEnqueueFeaturesAMDX(Unchecked.defaultof<nativeint>, shaderEnqueue, shaderMeshEnqueue)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderEnqueue = Unchecked.defaultof<VkBool32> && x.shaderMeshEnqueue = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderEnqueueFeaturesAMDX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderEnqueue = %A" x.shaderEnqueue
                        sprintf "shaderMeshEnqueue = %A" x.shaderMeshEnqueue
                    ] |> sprintf "VkPhysicalDeviceShaderEnqueueFeaturesAMDX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderEnqueuePropertiesAMDX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxExecutionGraphDepth : uint32
                val mutable public maxExecutionGraphShaderOutputNodes : uint32
                val mutable public maxExecutionGraphShaderPayloadSize : uint32
                val mutable public maxExecutionGraphShaderPayloadCount : uint32
                val mutable public executionGraphDispatchAddressAlignment : uint32
                val mutable public maxExecutionGraphWorkgroupCount : V3ui
                val mutable public maxExecutionGraphWorkgroups : uint32

                new(pNext: nativeint, maxExecutionGraphDepth: uint32, maxExecutionGraphShaderOutputNodes: uint32, maxExecutionGraphShaderPayloadSize: uint32, maxExecutionGraphShaderPayloadCount: uint32, executionGraphDispatchAddressAlignment: uint32, maxExecutionGraphWorkgroupCount: V3ui, maxExecutionGraphWorkgroups: uint32) =
                    {
                        sType = 1000134001u
                        pNext = pNext
                        maxExecutionGraphDepth = maxExecutionGraphDepth
                        maxExecutionGraphShaderOutputNodes = maxExecutionGraphShaderOutputNodes
                        maxExecutionGraphShaderPayloadSize = maxExecutionGraphShaderPayloadSize
                        maxExecutionGraphShaderPayloadCount = maxExecutionGraphShaderPayloadCount
                        executionGraphDispatchAddressAlignment = executionGraphDispatchAddressAlignment
                        maxExecutionGraphWorkgroupCount = maxExecutionGraphWorkgroupCount
                        maxExecutionGraphWorkgroups = maxExecutionGraphWorkgroups
                    }

                new(maxExecutionGraphDepth: uint32, maxExecutionGraphShaderOutputNodes: uint32, maxExecutionGraphShaderPayloadSize: uint32, maxExecutionGraphShaderPayloadCount: uint32, executionGraphDispatchAddressAlignment: uint32, maxExecutionGraphWorkgroupCount: V3ui, maxExecutionGraphWorkgroups: uint32) =
                    VkPhysicalDeviceShaderEnqueuePropertiesAMDX(Unchecked.defaultof<nativeint>, maxExecutionGraphDepth, maxExecutionGraphShaderOutputNodes, maxExecutionGraphShaderPayloadSize, maxExecutionGraphShaderPayloadCount, executionGraphDispatchAddressAlignment, maxExecutionGraphWorkgroupCount, maxExecutionGraphWorkgroups)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxExecutionGraphDepth = Unchecked.defaultof<uint32> && x.maxExecutionGraphShaderOutputNodes = Unchecked.defaultof<uint32> && x.maxExecutionGraphShaderPayloadSize = Unchecked.defaultof<uint32> && x.maxExecutionGraphShaderPayloadCount = Unchecked.defaultof<uint32> && x.executionGraphDispatchAddressAlignment = Unchecked.defaultof<uint32> && x.maxExecutionGraphWorkgroupCount = Unchecked.defaultof<V3ui> && x.maxExecutionGraphWorkgroups = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceShaderEnqueuePropertiesAMDX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxExecutionGraphDepth = %A" x.maxExecutionGraphDepth
                        sprintf "maxExecutionGraphShaderOutputNodes = %A" x.maxExecutionGraphShaderOutputNodes
                        sprintf "maxExecutionGraphShaderPayloadSize = %A" x.maxExecutionGraphShaderPayloadSize
                        sprintf "maxExecutionGraphShaderPayloadCount = %A" x.maxExecutionGraphShaderPayloadCount
                        sprintf "executionGraphDispatchAddressAlignment = %A" x.executionGraphDispatchAddressAlignment
                        sprintf "maxExecutionGraphWorkgroupCount = %A" x.maxExecutionGraphWorkgroupCount
                        sprintf "maxExecutionGraphWorkgroups = %A" x.maxExecutionGraphWorkgroups
                    ] |> sprintf "VkPhysicalDeviceShaderEnqueuePropertiesAMDX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineShaderStageNodeCreateInfoAMDX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pName : cstr
                val mutable public index : uint32

                new(pNext: nativeint, pName: cstr, index: uint32) =
                    {
                        sType = 1000134004u
                        pNext = pNext
                        pName = pName
                        index = index
                    }

                new(pName: cstr, index: uint32) =
                    VkPipelineShaderStageNodeCreateInfoAMDX(Unchecked.defaultof<nativeint>, pName, index)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pName = Unchecked.defaultof<cstr> && x.index = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPipelineShaderStageNodeCreateInfoAMDX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pName = %A" x.pName
                        sprintf "index = %A" x.index
                    ] |> sprintf "VkPipelineShaderStageNodeCreateInfoAMDX { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkBufferUsageFlags with
                  static member inline ExecutionGraphScratchBitAmdx = enum<VkBufferUsageFlags> 0x02000000
             type VkPipelineBindPoint with
                  static member inline ExecutionGraphAmdx = enum<VkPipelineBindPoint> 1000134000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateExecutionGraphPipelinesAMDXDel = delegate of VkDevice * VkPipelineCache * uint32 * nativeptr<VkExecutionGraphPipelineCreateInfoAMDX> * nativeptr<VkAllocationCallbacks> * nativeptr<VkPipeline> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetExecutionGraphPipelineScratchSizeAMDXDel = delegate of VkDevice * VkPipeline * nativeptr<VkExecutionGraphPipelineScratchSizeAMDX> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetExecutionGraphPipelineNodeIndexAMDXDel = delegate of VkDevice * VkPipeline * nativeptr<VkPipelineShaderStageNodeCreateInfoAMDX> * nativeptr<uint32> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdInitializeGraphScratchMemoryAMDXDel = delegate of VkCommandBuffer * VkPipeline * VkDeviceAddress * VkDeviceSize -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDispatchGraphAMDXDel = delegate of VkCommandBuffer * VkDeviceAddress * VkDeviceSize * nativeptr<VkDispatchGraphCountInfoAMDX> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDispatchGraphIndirectAMDXDel = delegate of VkCommandBuffer * VkDeviceAddress * VkDeviceSize * nativeptr<VkDispatchGraphCountInfoAMDX> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDispatchGraphIndirectCountAMDXDel = delegate of VkCommandBuffer * VkDeviceAddress * VkDeviceSize * VkDeviceAddress -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading AMDXShaderEnqueue")
                static let s_vkCreateExecutionGraphPipelinesAMDXDel = VkRaw.vkImportInstanceDelegate<VkCreateExecutionGraphPipelinesAMDXDel> "vkCreateExecutionGraphPipelinesAMDX"
                static let s_vkGetExecutionGraphPipelineScratchSizeAMDXDel = VkRaw.vkImportInstanceDelegate<VkGetExecutionGraphPipelineScratchSizeAMDXDel> "vkGetExecutionGraphPipelineScratchSizeAMDX"
                static let s_vkGetExecutionGraphPipelineNodeIndexAMDXDel = VkRaw.vkImportInstanceDelegate<VkGetExecutionGraphPipelineNodeIndexAMDXDel> "vkGetExecutionGraphPipelineNodeIndexAMDX"
                static let s_vkCmdInitializeGraphScratchMemoryAMDXDel = VkRaw.vkImportInstanceDelegate<VkCmdInitializeGraphScratchMemoryAMDXDel> "vkCmdInitializeGraphScratchMemoryAMDX"
                static let s_vkCmdDispatchGraphAMDXDel = VkRaw.vkImportInstanceDelegate<VkCmdDispatchGraphAMDXDel> "vkCmdDispatchGraphAMDX"
                static let s_vkCmdDispatchGraphIndirectAMDXDel = VkRaw.vkImportInstanceDelegate<VkCmdDispatchGraphIndirectAMDXDel> "vkCmdDispatchGraphIndirectAMDX"
                static let s_vkCmdDispatchGraphIndirectCountAMDXDel = VkRaw.vkImportInstanceDelegate<VkCmdDispatchGraphIndirectCountAMDXDel> "vkCmdDispatchGraphIndirectCountAMDX"
                static do Report.End(3) |> ignore
                static member vkCreateExecutionGraphPipelinesAMDX = s_vkCreateExecutionGraphPipelinesAMDXDel
                static member vkGetExecutionGraphPipelineScratchSizeAMDX = s_vkGetExecutionGraphPipelineScratchSizeAMDXDel
                static member vkGetExecutionGraphPipelineNodeIndexAMDX = s_vkGetExecutionGraphPipelineNodeIndexAMDXDel
                static member vkCmdInitializeGraphScratchMemoryAMDX = s_vkCmdInitializeGraphScratchMemoryAMDXDel
                static member vkCmdDispatchGraphAMDX = s_vkCmdDispatchGraphAMDXDel
                static member vkCmdDispatchGraphIndirectAMDX = s_vkCmdDispatchGraphIndirectAMDXDel
                static member vkCmdDispatchGraphIndirectCountAMDX = s_vkCmdDispatchGraphIndirectCountAMDXDel
            let vkCreateExecutionGraphPipelinesAMDX(device : VkDevice, pipelineCache : VkPipelineCache, createInfoCount : uint32, pCreateInfos : nativeptr<VkExecutionGraphPipelineCreateInfoAMDX>, pAllocator : nativeptr<VkAllocationCallbacks>, pPipelines : nativeptr<VkPipeline>) = Loader<unit>.vkCreateExecutionGraphPipelinesAMDX.Invoke(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
            let vkGetExecutionGraphPipelineScratchSizeAMDX(device : VkDevice, executionGraph : VkPipeline, pSizeInfo : nativeptr<VkExecutionGraphPipelineScratchSizeAMDX>) = Loader<unit>.vkGetExecutionGraphPipelineScratchSizeAMDX.Invoke(device, executionGraph, pSizeInfo)
            let vkGetExecutionGraphPipelineNodeIndexAMDX(device : VkDevice, executionGraph : VkPipeline, pNodeInfo : nativeptr<VkPipelineShaderStageNodeCreateInfoAMDX>, pNodeIndex : nativeptr<uint32>) = Loader<unit>.vkGetExecutionGraphPipelineNodeIndexAMDX.Invoke(device, executionGraph, pNodeInfo, pNodeIndex)
            let vkCmdInitializeGraphScratchMemoryAMDX(commandBuffer : VkCommandBuffer, executionGraph : VkPipeline, scratch : VkDeviceAddress, scratchSize : VkDeviceSize) = Loader<unit>.vkCmdInitializeGraphScratchMemoryAMDX.Invoke(commandBuffer, executionGraph, scratch, scratchSize)
            let vkCmdDispatchGraphAMDX(commandBuffer : VkCommandBuffer, scratch : VkDeviceAddress, scratchSize : VkDeviceSize, pCountInfo : nativeptr<VkDispatchGraphCountInfoAMDX>) = Loader<unit>.vkCmdDispatchGraphAMDX.Invoke(commandBuffer, scratch, scratchSize, pCountInfo)
            let vkCmdDispatchGraphIndirectAMDX(commandBuffer : VkCommandBuffer, scratch : VkDeviceAddress, scratchSize : VkDeviceSize, pCountInfo : nativeptr<VkDispatchGraphCountInfoAMDX>) = Loader<unit>.vkCmdDispatchGraphIndirectAMDX.Invoke(commandBuffer, scratch, scratchSize, pCountInfo)
            let vkCmdDispatchGraphIndirectCountAMDX(commandBuffer : VkCommandBuffer, scratch : VkDeviceAddress, scratchSize : VkDeviceSize, countInfo : VkDeviceAddress) = Loader<unit>.vkCmdDispatchGraphIndirectCountAMDX.Invoke(commandBuffer, scratch, scratchSize, countInfo)

        [<AutoOpen>]
        module ``KHRMaintenance5 | Vulkan14`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkBufferUsageFlags2 with
                      static member inline BufferUsage2ExecutionGraphScratchBitAmdx = enum<Vulkan14.VkBufferUsageFlags2> 0x02000000
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2ExecutionGraphBitAmdx = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000001


    module AMDMixedAttachmentSamples =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_mixed_attachment_samples"
        let Number = 137

        [<AutoOpen>]
        module ``Vulkan13 | KHRDynamicRendering`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkAttachmentSampleCountInfoAMD =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public colorAttachmentCount : uint32
                    val mutable public pColorAttachmentSamples : nativeptr<VkSampleCountFlags>
                    val mutable public depthStencilAttachmentSamples : VkSampleCountFlags

                    new(pNext: nativeint, colorAttachmentCount: uint32, pColorAttachmentSamples: nativeptr<VkSampleCountFlags>, depthStencilAttachmentSamples: VkSampleCountFlags) =
                        {
                            sType = 1000044008u
                            pNext = pNext
                            colorAttachmentCount = colorAttachmentCount
                            pColorAttachmentSamples = pColorAttachmentSamples
                            depthStencilAttachmentSamples = depthStencilAttachmentSamples
                        }

                    new(colorAttachmentCount: uint32, pColorAttachmentSamples: nativeptr<VkSampleCountFlags>, depthStencilAttachmentSamples: VkSampleCountFlags) =
                        VkAttachmentSampleCountInfoAMD(Unchecked.defaultof<nativeint>, colorAttachmentCount, pColorAttachmentSamples, depthStencilAttachmentSamples)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachmentSamples = Unchecked.defaultof<nativeptr<VkSampleCountFlags>> && x.depthStencilAttachmentSamples = Unchecked.defaultof<VkSampleCountFlags>

                    static member Empty =
                        VkAttachmentSampleCountInfoAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSampleCountFlags>>, Unchecked.defaultof<VkSampleCountFlags>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                            sprintf "pColorAttachmentSamples = %A" x.pColorAttachmentSamples
                            sprintf "depthStencilAttachmentSamples = %A" x.depthStencilAttachmentSamples
                        ] |> sprintf "VkAttachmentSampleCountInfoAMD { %s }"
                end



    module AMDShaderFragmentMask =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_shader_fragment_mask"
        let Number = 138

    /// Requires (KHRGetPhysicalDeviceProperties2, KHRMaintenance1) | Vulkan11.
    /// Promoted to Vulkan13.
    module EXTInlineUniformBlock =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_inline_uniform_block"
        let Number = 139

        type VkDescriptorPoolInlineUniformBlockCreateInfoEXT = Vulkan13.VkDescriptorPoolInlineUniformBlockCreateInfo

        type VkPhysicalDeviceInlineUniformBlockFeaturesEXT = Vulkan13.VkPhysicalDeviceInlineUniformBlockFeatures

        type VkPhysicalDeviceInlineUniformBlockPropertiesEXT = Vulkan13.VkPhysicalDeviceInlineUniformBlockProperties

        type VkWriteDescriptorSetInlineUniformBlockEXT = Vulkan13.VkWriteDescriptorSetInlineUniformBlock


        [<AutoOpen>]
        module EnumExtensions =
             type VkDescriptorType with
                  static member inline InlineUniformBlockExt = enum<VkDescriptorType> 1000138000


    module EXTShaderStencilExport =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_shader_stencil_export"
        let Number = 141

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTSampleLocations =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_sample_locations"
        let Number = 144

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSampleLocationEXT =
            struct
                val mutable public x : float32
                val mutable public y : float32

                new(x: float32, y: float32) =
                    {
                        x = x
                        y = y
                    }

                member x.IsEmpty =
                    x.x = Unchecked.defaultof<float32> && x.y = Unchecked.defaultof<float32>

                static member Empty =
                    VkSampleLocationEXT(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "x = %A" x.x
                        sprintf "y = %A" x.y
                    ] |> sprintf "VkSampleLocationEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSampleLocationsInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public sampleLocationsPerPixel : VkSampleCountFlags
                val mutable public sampleLocationGridSize : VkExtent2D
                val mutable public sampleLocationsCount : uint32
                val mutable public pSampleLocations : nativeptr<VkSampleLocationEXT>

                new(pNext: nativeint, sampleLocationsPerPixel: VkSampleCountFlags, sampleLocationGridSize: VkExtent2D, sampleLocationsCount: uint32, pSampleLocations: nativeptr<VkSampleLocationEXT>) =
                    {
                        sType = 1000143000u
                        pNext = pNext
                        sampleLocationsPerPixel = sampleLocationsPerPixel
                        sampleLocationGridSize = sampleLocationGridSize
                        sampleLocationsCount = sampleLocationsCount
                        pSampleLocations = pSampleLocations
                    }

                new(sampleLocationsPerPixel: VkSampleCountFlags, sampleLocationGridSize: VkExtent2D, sampleLocationsCount: uint32, pSampleLocations: nativeptr<VkSampleLocationEXT>) =
                    VkSampleLocationsInfoEXT(Unchecked.defaultof<nativeint>, sampleLocationsPerPixel, sampleLocationGridSize, sampleLocationsCount, pSampleLocations)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.sampleLocationsPerPixel = Unchecked.defaultof<VkSampleCountFlags> && x.sampleLocationGridSize = Unchecked.defaultof<VkExtent2D> && x.sampleLocationsCount = Unchecked.defaultof<uint32> && x.pSampleLocations = Unchecked.defaultof<nativeptr<VkSampleLocationEXT>>

                static member Empty =
                    VkSampleLocationsInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSampleLocationEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "sampleLocationsPerPixel = %A" x.sampleLocationsPerPixel
                        sprintf "sampleLocationGridSize = %A" x.sampleLocationGridSize
                        sprintf "sampleLocationsCount = %A" x.sampleLocationsCount
                        sprintf "pSampleLocations = %A" x.pSampleLocations
                    ] |> sprintf "VkSampleLocationsInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAttachmentSampleLocationsEXT =
            struct
                val mutable public attachmentIndex : uint32
                val mutable public sampleLocationsInfo : VkSampleLocationsInfoEXT

                new(attachmentIndex: uint32, sampleLocationsInfo: VkSampleLocationsInfoEXT) =
                    {
                        attachmentIndex = attachmentIndex
                        sampleLocationsInfo = sampleLocationsInfo
                    }

                member x.IsEmpty =
                    x.attachmentIndex = Unchecked.defaultof<uint32> && x.sampleLocationsInfo = Unchecked.defaultof<VkSampleLocationsInfoEXT>

                static member Empty =
                    VkAttachmentSampleLocationsEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleLocationsInfoEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "attachmentIndex = %A" x.attachmentIndex
                        sprintf "sampleLocationsInfo = %A" x.sampleLocationsInfo
                    ] |> sprintf "VkAttachmentSampleLocationsEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMultisamplePropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxSampleLocationGridSize : VkExtent2D

                new(pNext: nativeint, maxSampleLocationGridSize: VkExtent2D) =
                    {
                        sType = 1000143004u
                        pNext = pNext
                        maxSampleLocationGridSize = maxSampleLocationGridSize
                    }

                new(maxSampleLocationGridSize: VkExtent2D) =
                    VkMultisamplePropertiesEXT(Unchecked.defaultof<nativeint>, maxSampleLocationGridSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxSampleLocationGridSize = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkMultisamplePropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxSampleLocationGridSize = %A" x.maxSampleLocationGridSize
                    ] |> sprintf "VkMultisamplePropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceSampleLocationsPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public sampleLocationSampleCounts : VkSampleCountFlags
                val mutable public maxSampleLocationGridSize : VkExtent2D
                val mutable public sampleLocationCoordinateRange : V2f
                val mutable public sampleLocationSubPixelBits : uint32
                val mutable public variableSampleLocations : VkBool32

                new(pNext: nativeint, sampleLocationSampleCounts: VkSampleCountFlags, maxSampleLocationGridSize: VkExtent2D, sampleLocationCoordinateRange: V2f, sampleLocationSubPixelBits: uint32, variableSampleLocations: VkBool32) =
                    {
                        sType = 1000143003u
                        pNext = pNext
                        sampleLocationSampleCounts = sampleLocationSampleCounts
                        maxSampleLocationGridSize = maxSampleLocationGridSize
                        sampleLocationCoordinateRange = sampleLocationCoordinateRange
                        sampleLocationSubPixelBits = sampleLocationSubPixelBits
                        variableSampleLocations = variableSampleLocations
                    }

                new(sampleLocationSampleCounts: VkSampleCountFlags, maxSampleLocationGridSize: VkExtent2D, sampleLocationCoordinateRange: V2f, sampleLocationSubPixelBits: uint32, variableSampleLocations: VkBool32) =
                    VkPhysicalDeviceSampleLocationsPropertiesEXT(Unchecked.defaultof<nativeint>, sampleLocationSampleCounts, maxSampleLocationGridSize, sampleLocationCoordinateRange, sampleLocationSubPixelBits, variableSampleLocations)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.sampleLocationSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.maxSampleLocationGridSize = Unchecked.defaultof<VkExtent2D> && x.sampleLocationCoordinateRange = Unchecked.defaultof<V2f> && x.sampleLocationSubPixelBits = Unchecked.defaultof<uint32> && x.variableSampleLocations = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceSampleLocationsPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<V2f>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "sampleLocationSampleCounts = %A" x.sampleLocationSampleCounts
                        sprintf "maxSampleLocationGridSize = %A" x.maxSampleLocationGridSize
                        sprintf "sampleLocationCoordinateRange = %A" x.sampleLocationCoordinateRange
                        sprintf "sampleLocationSubPixelBits = %A" x.sampleLocationSubPixelBits
                        sprintf "variableSampleLocations = %A" x.variableSampleLocations
                    ] |> sprintf "VkPhysicalDeviceSampleLocationsPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineSampleLocationsStateCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public sampleLocationsEnable : VkBool32
                val mutable public sampleLocationsInfo : VkSampleLocationsInfoEXT

                new(pNext: nativeint, sampleLocationsEnable: VkBool32, sampleLocationsInfo: VkSampleLocationsInfoEXT) =
                    {
                        sType = 1000143002u
                        pNext = pNext
                        sampleLocationsEnable = sampleLocationsEnable
                        sampleLocationsInfo = sampleLocationsInfo
                    }

                new(sampleLocationsEnable: VkBool32, sampleLocationsInfo: VkSampleLocationsInfoEXT) =
                    VkPipelineSampleLocationsStateCreateInfoEXT(Unchecked.defaultof<nativeint>, sampleLocationsEnable, sampleLocationsInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.sampleLocationsEnable = Unchecked.defaultof<VkBool32> && x.sampleLocationsInfo = Unchecked.defaultof<VkSampleLocationsInfoEXT>

                static member Empty =
                    VkPipelineSampleLocationsStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkSampleLocationsInfoEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "sampleLocationsEnable = %A" x.sampleLocationsEnable
                        sprintf "sampleLocationsInfo = %A" x.sampleLocationsInfo
                    ] |> sprintf "VkPipelineSampleLocationsStateCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSubpassSampleLocationsEXT =
            struct
                val mutable public subpassIndex : uint32
                val mutable public sampleLocationsInfo : VkSampleLocationsInfoEXT

                new(subpassIndex: uint32, sampleLocationsInfo: VkSampleLocationsInfoEXT) =
                    {
                        subpassIndex = subpassIndex
                        sampleLocationsInfo = sampleLocationsInfo
                    }

                member x.IsEmpty =
                    x.subpassIndex = Unchecked.defaultof<uint32> && x.sampleLocationsInfo = Unchecked.defaultof<VkSampleLocationsInfoEXT>

                static member Empty =
                    VkSubpassSampleLocationsEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleLocationsInfoEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "subpassIndex = %A" x.subpassIndex
                        sprintf "sampleLocationsInfo = %A" x.sampleLocationsInfo
                    ] |> sprintf "VkSubpassSampleLocationsEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderPassSampleLocationsBeginInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public attachmentInitialSampleLocationsCount : uint32
                val mutable public pAttachmentInitialSampleLocations : nativeptr<VkAttachmentSampleLocationsEXT>
                val mutable public postSubpassSampleLocationsCount : uint32
                val mutable public pPostSubpassSampleLocations : nativeptr<VkSubpassSampleLocationsEXT>

                new(pNext: nativeint, attachmentInitialSampleLocationsCount: uint32, pAttachmentInitialSampleLocations: nativeptr<VkAttachmentSampleLocationsEXT>, postSubpassSampleLocationsCount: uint32, pPostSubpassSampleLocations: nativeptr<VkSubpassSampleLocationsEXT>) =
                    {
                        sType = 1000143001u
                        pNext = pNext
                        attachmentInitialSampleLocationsCount = attachmentInitialSampleLocationsCount
                        pAttachmentInitialSampleLocations = pAttachmentInitialSampleLocations
                        postSubpassSampleLocationsCount = postSubpassSampleLocationsCount
                        pPostSubpassSampleLocations = pPostSubpassSampleLocations
                    }

                new(attachmentInitialSampleLocationsCount: uint32, pAttachmentInitialSampleLocations: nativeptr<VkAttachmentSampleLocationsEXT>, postSubpassSampleLocationsCount: uint32, pPostSubpassSampleLocations: nativeptr<VkSubpassSampleLocationsEXT>) =
                    VkRenderPassSampleLocationsBeginInfoEXT(Unchecked.defaultof<nativeint>, attachmentInitialSampleLocationsCount, pAttachmentInitialSampleLocations, postSubpassSampleLocationsCount, pPostSubpassSampleLocations)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.attachmentInitialSampleLocationsCount = Unchecked.defaultof<uint32> && x.pAttachmentInitialSampleLocations = Unchecked.defaultof<nativeptr<VkAttachmentSampleLocationsEXT>> && x.postSubpassSampleLocationsCount = Unchecked.defaultof<uint32> && x.pPostSubpassSampleLocations = Unchecked.defaultof<nativeptr<VkSubpassSampleLocationsEXT>>

                static member Empty =
                    VkRenderPassSampleLocationsBeginInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentSampleLocationsEXT>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSubpassSampleLocationsEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "attachmentInitialSampleLocationsCount = %A" x.attachmentInitialSampleLocationsCount
                        sprintf "pAttachmentInitialSampleLocations = %A" x.pAttachmentInitialSampleLocations
                        sprintf "postSubpassSampleLocationsCount = %A" x.postSubpassSampleLocationsCount
                        sprintf "pPostSubpassSampleLocations = %A" x.pPostSubpassSampleLocations
                    ] |> sprintf "VkRenderPassSampleLocationsBeginInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  static member inline SampleLocationsExt = enum<VkDynamicState> 1000143000
             type VkImageCreateFlags with
                  static member inline SampleLocationsCompatibleDepthBitExt = enum<VkImageCreateFlags> 0x00001000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetSampleLocationsEXTDel = delegate of VkCommandBuffer * nativeptr<VkSampleLocationsInfoEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceMultisamplePropertiesEXTDel = delegate of VkPhysicalDevice * VkSampleCountFlags * nativeptr<VkMultisamplePropertiesEXT> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTSampleLocations")
                static let s_vkCmdSetSampleLocationsEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetSampleLocationsEXTDel> "vkCmdSetSampleLocationsEXT"
                static let s_vkGetPhysicalDeviceMultisamplePropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceMultisamplePropertiesEXTDel> "vkGetPhysicalDeviceMultisamplePropertiesEXT"
                static do Report.End(3) |> ignore
                static member vkCmdSetSampleLocationsEXT = s_vkCmdSetSampleLocationsEXTDel
                static member vkGetPhysicalDeviceMultisamplePropertiesEXT = s_vkGetPhysicalDeviceMultisamplePropertiesEXTDel
            let vkCmdSetSampleLocationsEXT(commandBuffer : VkCommandBuffer, pSampleLocationsInfo : nativeptr<VkSampleLocationsInfoEXT>) = Loader<unit>.vkCmdSetSampleLocationsEXT.Invoke(commandBuffer, pSampleLocationsInfo)
            let vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice : VkPhysicalDevice, samples : VkSampleCountFlags, pMultisampleProperties : nativeptr<VkMultisamplePropertiesEXT>) = Loader<unit>.vkGetPhysicalDeviceMultisamplePropertiesEXT.Invoke(physicalDevice, samples, pMultisampleProperties)

    /// Promoted to Vulkan11.
    module KHRRelaxedBlockLayout =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_relaxed_block_layout"
        let Number = 145

    /// Promoted to Vulkan11.
    module KHRGetMemoryRequirements2 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_get_memory_requirements2"
        let Number = 147

        type VkBufferMemoryRequirementsInfo2KHR = Vulkan11.VkBufferMemoryRequirementsInfo2

        type VkImageMemoryRequirementsInfo2KHR = Vulkan11.VkImageMemoryRequirementsInfo2

        type VkImageSparseMemoryRequirementsInfo2KHR = Vulkan11.VkImageSparseMemoryRequirementsInfo2

        type VkMemoryRequirements2KHR = Vulkan11.VkMemoryRequirements2

        type VkSparseImageMemoryRequirements2KHR = Vulkan11.VkSparseImageMemoryRequirements2


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetImageMemoryRequirements2KHRDel = delegate of VkDevice * nativeptr<Vulkan11.VkImageMemoryRequirementsInfo2> * nativeptr<Vulkan11.VkMemoryRequirements2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetBufferMemoryRequirements2KHRDel = delegate of VkDevice * nativeptr<Vulkan11.VkBufferMemoryRequirementsInfo2> * nativeptr<Vulkan11.VkMemoryRequirements2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetImageSparseMemoryRequirements2KHRDel = delegate of VkDevice * nativeptr<Vulkan11.VkImageSparseMemoryRequirementsInfo2> * nativeptr<uint32> * nativeptr<Vulkan11.VkSparseImageMemoryRequirements2> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRGetMemoryRequirements2")
                static let s_vkGetImageMemoryRequirements2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetImageMemoryRequirements2KHRDel> "vkGetImageMemoryRequirements2KHR"
                static let s_vkGetBufferMemoryRequirements2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetBufferMemoryRequirements2KHRDel> "vkGetBufferMemoryRequirements2KHR"
                static let s_vkGetImageSparseMemoryRequirements2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetImageSparseMemoryRequirements2KHRDel> "vkGetImageSparseMemoryRequirements2KHR"
                static do Report.End(3) |> ignore
                static member vkGetImageMemoryRequirements2KHR = s_vkGetImageMemoryRequirements2KHRDel
                static member vkGetBufferMemoryRequirements2KHR = s_vkGetBufferMemoryRequirements2KHRDel
                static member vkGetImageSparseMemoryRequirements2KHR = s_vkGetImageSparseMemoryRequirements2KHRDel
            let vkGetImageMemoryRequirements2KHR(device : VkDevice, pInfo : nativeptr<Vulkan11.VkImageMemoryRequirementsInfo2>, pMemoryRequirements : nativeptr<Vulkan11.VkMemoryRequirements2>) = Loader<unit>.vkGetImageMemoryRequirements2KHR.Invoke(device, pInfo, pMemoryRequirements)
            let vkGetBufferMemoryRequirements2KHR(device : VkDevice, pInfo : nativeptr<Vulkan11.VkBufferMemoryRequirementsInfo2>, pMemoryRequirements : nativeptr<Vulkan11.VkMemoryRequirements2>) = Loader<unit>.vkGetBufferMemoryRequirements2KHR.Invoke(device, pInfo, pMemoryRequirements)
            let vkGetImageSparseMemoryRequirements2KHR(device : VkDevice, pInfo : nativeptr<Vulkan11.VkImageSparseMemoryRequirementsInfo2>, pSparseMemoryRequirementCount : nativeptr<uint32>, pSparseMemoryRequirements : nativeptr<Vulkan11.VkSparseImageMemoryRequirements2>) = Loader<unit>.vkGetImageSparseMemoryRequirements2KHR.Invoke(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements)

    /// Promoted to Vulkan12.
    module KHRImageFormatList =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_image_format_list"
        let Number = 148

        type VkImageFormatListCreateInfoKHR = Vulkan12.VkImageFormatListCreateInfo



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTBlendOperationAdvanced =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_blend_operation_advanced"
        let Number = 149

        type VkBlendOverlapEXT =
            | Uncorrelated = 0
            | Disjoint = 1
            | Conjoint = 2


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public advancedBlendCoherentOperations : VkBool32

                new(pNext: nativeint, advancedBlendCoherentOperations: VkBool32) =
                    {
                        sType = 1000148000u
                        pNext = pNext
                        advancedBlendCoherentOperations = advancedBlendCoherentOperations
                    }

                new(advancedBlendCoherentOperations: VkBool32) =
                    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(Unchecked.defaultof<nativeint>, advancedBlendCoherentOperations)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.advancedBlendCoherentOperations = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "advancedBlendCoherentOperations = %A" x.advancedBlendCoherentOperations
                    ] |> sprintf "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public advancedBlendMaxColorAttachments : uint32
                val mutable public advancedBlendIndependentBlend : VkBool32
                val mutable public advancedBlendNonPremultipliedSrcColor : VkBool32
                val mutable public advancedBlendNonPremultipliedDstColor : VkBool32
                val mutable public advancedBlendCorrelatedOverlap : VkBool32
                val mutable public advancedBlendAllOperations : VkBool32

                new(pNext: nativeint, advancedBlendMaxColorAttachments: uint32, advancedBlendIndependentBlend: VkBool32, advancedBlendNonPremultipliedSrcColor: VkBool32, advancedBlendNonPremultipliedDstColor: VkBool32, advancedBlendCorrelatedOverlap: VkBool32, advancedBlendAllOperations: VkBool32) =
                    {
                        sType = 1000148001u
                        pNext = pNext
                        advancedBlendMaxColorAttachments = advancedBlendMaxColorAttachments
                        advancedBlendIndependentBlend = advancedBlendIndependentBlend
                        advancedBlendNonPremultipliedSrcColor = advancedBlendNonPremultipliedSrcColor
                        advancedBlendNonPremultipliedDstColor = advancedBlendNonPremultipliedDstColor
                        advancedBlendCorrelatedOverlap = advancedBlendCorrelatedOverlap
                        advancedBlendAllOperations = advancedBlendAllOperations
                    }

                new(advancedBlendMaxColorAttachments: uint32, advancedBlendIndependentBlend: VkBool32, advancedBlendNonPremultipliedSrcColor: VkBool32, advancedBlendNonPremultipliedDstColor: VkBool32, advancedBlendCorrelatedOverlap: VkBool32, advancedBlendAllOperations: VkBool32) =
                    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(Unchecked.defaultof<nativeint>, advancedBlendMaxColorAttachments, advancedBlendIndependentBlend, advancedBlendNonPremultipliedSrcColor, advancedBlendNonPremultipliedDstColor, advancedBlendCorrelatedOverlap, advancedBlendAllOperations)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.advancedBlendMaxColorAttachments = Unchecked.defaultof<uint32> && x.advancedBlendIndependentBlend = Unchecked.defaultof<VkBool32> && x.advancedBlendNonPremultipliedSrcColor = Unchecked.defaultof<VkBool32> && x.advancedBlendNonPremultipliedDstColor = Unchecked.defaultof<VkBool32> && x.advancedBlendCorrelatedOverlap = Unchecked.defaultof<VkBool32> && x.advancedBlendAllOperations = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "advancedBlendMaxColorAttachments = %A" x.advancedBlendMaxColorAttachments
                        sprintf "advancedBlendIndependentBlend = %A" x.advancedBlendIndependentBlend
                        sprintf "advancedBlendNonPremultipliedSrcColor = %A" x.advancedBlendNonPremultipliedSrcColor
                        sprintf "advancedBlendNonPremultipliedDstColor = %A" x.advancedBlendNonPremultipliedDstColor
                        sprintf "advancedBlendCorrelatedOverlap = %A" x.advancedBlendCorrelatedOverlap
                        sprintf "advancedBlendAllOperations = %A" x.advancedBlendAllOperations
                    ] |> sprintf "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineColorBlendAdvancedStateCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public srcPremultiplied : VkBool32
                val mutable public dstPremultiplied : VkBool32
                val mutable public blendOverlap : VkBlendOverlapEXT

                new(pNext: nativeint, srcPremultiplied: VkBool32, dstPremultiplied: VkBool32, blendOverlap: VkBlendOverlapEXT) =
                    {
                        sType = 1000148002u
                        pNext = pNext
                        srcPremultiplied = srcPremultiplied
                        dstPremultiplied = dstPremultiplied
                        blendOverlap = blendOverlap
                    }

                new(srcPremultiplied: VkBool32, dstPremultiplied: VkBool32, blendOverlap: VkBlendOverlapEXT) =
                    VkPipelineColorBlendAdvancedStateCreateInfoEXT(Unchecked.defaultof<nativeint>, srcPremultiplied, dstPremultiplied, blendOverlap)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.srcPremultiplied = Unchecked.defaultof<VkBool32> && x.dstPremultiplied = Unchecked.defaultof<VkBool32> && x.blendOverlap = Unchecked.defaultof<VkBlendOverlapEXT>

                static member Empty =
                    VkPipelineColorBlendAdvancedStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBlendOverlapEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "srcPremultiplied = %A" x.srcPremultiplied
                        sprintf "dstPremultiplied = %A" x.dstPremultiplied
                        sprintf "blendOverlap = %A" x.blendOverlap
                    ] |> sprintf "VkPipelineColorBlendAdvancedStateCreateInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags with
                  static member inline ColorAttachmentReadNoncoherentBitExt = enum<VkAccessFlags> 0x00080000
             type VkBlendOp with
                  static member inline ZeroExt = enum<VkBlendOp> 1000148000
                  static member inline SrcExt = enum<VkBlendOp> 1000148001
                  static member inline DstExt = enum<VkBlendOp> 1000148002
                  static member inline SrcOverExt = enum<VkBlendOp> 1000148003
                  static member inline DstOverExt = enum<VkBlendOp> 1000148004
                  static member inline SrcInExt = enum<VkBlendOp> 1000148005
                  static member inline DstInExt = enum<VkBlendOp> 1000148006
                  static member inline SrcOutExt = enum<VkBlendOp> 1000148007
                  static member inline DstOutExt = enum<VkBlendOp> 1000148008
                  static member inline SrcAtopExt = enum<VkBlendOp> 1000148009
                  static member inline DstAtopExt = enum<VkBlendOp> 1000148010
                  static member inline XorExt = enum<VkBlendOp> 1000148011
                  static member inline MultiplyExt = enum<VkBlendOp> 1000148012
                  static member inline ScreenExt = enum<VkBlendOp> 1000148013
                  static member inline OverlayExt = enum<VkBlendOp> 1000148014
                  static member inline DarkenExt = enum<VkBlendOp> 1000148015
                  static member inline LightenExt = enum<VkBlendOp> 1000148016
                  static member inline ColordodgeExt = enum<VkBlendOp> 1000148017
                  static member inline ColorburnExt = enum<VkBlendOp> 1000148018
                  static member inline HardlightExt = enum<VkBlendOp> 1000148019
                  static member inline SoftlightExt = enum<VkBlendOp> 1000148020
                  static member inline DifferenceExt = enum<VkBlendOp> 1000148021
                  static member inline ExclusionExt = enum<VkBlendOp> 1000148022
                  static member inline InvertExt = enum<VkBlendOp> 1000148023
                  static member inline InvertRgbExt = enum<VkBlendOp> 1000148024
                  static member inline LineardodgeExt = enum<VkBlendOp> 1000148025
                  static member inline LinearburnExt = enum<VkBlendOp> 1000148026
                  static member inline VividlightExt = enum<VkBlendOp> 1000148027
                  static member inline LinearlightExt = enum<VkBlendOp> 1000148028
                  static member inline PinlightExt = enum<VkBlendOp> 1000148029
                  static member inline HardmixExt = enum<VkBlendOp> 1000148030
                  static member inline HslHueExt = enum<VkBlendOp> 1000148031
                  static member inline HslSaturationExt = enum<VkBlendOp> 1000148032
                  static member inline HslColorExt = enum<VkBlendOp> 1000148033
                  static member inline HslLuminosityExt = enum<VkBlendOp> 1000148034
                  static member inline PlusExt = enum<VkBlendOp> 1000148035
                  static member inline PlusClampedExt = enum<VkBlendOp> 1000148036
                  static member inline PlusClampedAlphaExt = enum<VkBlendOp> 1000148037
                  static member inline PlusDarkerExt = enum<VkBlendOp> 1000148038
                  static member inline MinusExt = enum<VkBlendOp> 1000148039
                  static member inline MinusClampedExt = enum<VkBlendOp> 1000148040
                  static member inline ContrastExt = enum<VkBlendOp> 1000148041
                  static member inline InvertOvgExt = enum<VkBlendOp> 1000148042
                  static member inline RedExt = enum<VkBlendOp> 1000148043
                  static member inline GreenExt = enum<VkBlendOp> 1000148044
                  static member inline BlueExt = enum<VkBlendOp> 1000148045


    module NVFragmentCoverageToColor =
        let Type = ExtensionType.Device
        let Name = "VK_NV_fragment_coverage_to_color"
        let Number = 150

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineCoverageToColorStateCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkPipelineCoverageToColorStateCreateFlagsNV
                val mutable public coverageToColorEnable : VkBool32
                val mutable public coverageToColorLocation : uint32

                new(pNext: nativeint, flags: VkPipelineCoverageToColorStateCreateFlagsNV, coverageToColorEnable: VkBool32, coverageToColorLocation: uint32) =
                    {
                        sType = 1000149000u
                        pNext = pNext
                        flags = flags
                        coverageToColorEnable = coverageToColorEnable
                        coverageToColorLocation = coverageToColorLocation
                    }

                new(flags: VkPipelineCoverageToColorStateCreateFlagsNV, coverageToColorEnable: VkBool32, coverageToColorLocation: uint32) =
                    VkPipelineCoverageToColorStateCreateInfoNV(Unchecked.defaultof<nativeint>, flags, coverageToColorEnable, coverageToColorLocation)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCoverageToColorStateCreateFlagsNV> && x.coverageToColorEnable = Unchecked.defaultof<VkBool32> && x.coverageToColorLocation = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPipelineCoverageToColorStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCoverageToColorStateCreateFlagsNV>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "coverageToColorEnable = %A" x.coverageToColorEnable
                        sprintf "coverageToColorLocation = %A" x.coverageToColorLocation
                    ] |> sprintf "VkPipelineCoverageToColorStateCreateInfoNV { %s }"
            end



    /// Requires ((Vulkan11, EXTDescriptorIndexing, KHRBufferDeviceAddress) | Vulkan12), KHRDeferredHostOperations.
    module KHRAccelerationStructure =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_acceleration_structure"
        let Number = 151


        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureKHR =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkAccelerationStructureKHR(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        type VkAccelerationStructureTypeKHR =
            | TopLevel = 0
            | BottomLevel = 1
            | Generic = 2

        type VkAccelerationStructureBuildTypeKHR =
            | Host = 0
            | Device = 1
            | HostOrDevice = 2

        [<Flags>]
        type VkGeometryFlagsKHR =
            | All = 3
            | None = 0
            | OpaqueBit = 0x00000001
            | NoDuplicateAnyHitInvocationBit = 0x00000002

        [<Flags>]
        type VkGeometryInstanceFlagsKHR =
            | All = 15
            | None = 0
            | TriangleFacingCullDisableBit = 0x00000001
            | TriangleFlipFacingBit = 0x00000002
            | ForceOpaqueBit = 0x00000004
            | ForceNoOpaqueBit = 0x00000008
            | TriangleFrontCounterclockwiseBit = 0x00000002

        [<Flags>]
        type VkBuildAccelerationStructureFlagsKHR =
            | All = 31
            | None = 0
            | AllowUpdateBit = 0x00000001
            | AllowCompactionBit = 0x00000002
            | PreferFastTraceBit = 0x00000004
            | PreferFastBuildBit = 0x00000008
            | LowMemoryBit = 0x00000010

        type VkCopyAccelerationStructureModeKHR =
            | Clone = 0
            | Compact = 1

        type VkGeometryTypeKHR =
            | Triangles = 0
            | Aabbs = 1
            | Instances = 2

        type VkAccelerationStructureCompatibilityKHR =
            | Compatible = 0
            | Incompatible = 1

        [<Flags>]
        type VkAccelerationStructureCreateFlagsKHR =
            | All = 1
            | None = 0
            | DeviceAddressCaptureReplayBit = 0x00000001

        type VkBuildAccelerationStructureModeKHR =
            | Build = 0
            | Update = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkAabbPositionsKHR =
            struct
                val mutable public minX : float32
                val mutable public minY : float32
                val mutable public minZ : float32
                val mutable public maxX : float32
                val mutable public maxY : float32
                val mutable public maxZ : float32

                new(minX: float32, minY: float32, minZ: float32, maxX: float32, maxY: float32, maxZ: float32) =
                    {
                        minX = minX
                        minY = minY
                        minZ = minZ
                        maxX = maxX
                        maxY = maxY
                        maxZ = maxZ
                    }

                member x.IsEmpty =
                    x.minX = Unchecked.defaultof<float32> && x.minY = Unchecked.defaultof<float32> && x.minZ = Unchecked.defaultof<float32> && x.maxX = Unchecked.defaultof<float32> && x.maxY = Unchecked.defaultof<float32> && x.maxZ = Unchecked.defaultof<float32>

                static member Empty =
                    VkAabbPositionsKHR(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "minX = %A" x.minX
                        sprintf "minY = %A" x.minY
                        sprintf "minZ = %A" x.minZ
                        sprintf "maxX = %A" x.maxX
                        sprintf "maxY = %A" x.maxY
                        sprintf "maxZ = %A" x.maxZ
                    ] |> sprintf "VkAabbPositionsKHR { %s }"
            end

        [<StructLayout(LayoutKind.Explicit)>]
        type VkDeviceOrHostAddressConstKHR =
            struct
                [<FieldOffset(0)>]
                val mutable public deviceAddress : VkDeviceAddress
                [<FieldOffset(0)>]
                val mutable public hostAddress : nativeint

                static member DeviceAddress(value: VkDeviceAddress) =
                    let mutable result = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>
                    result.deviceAddress <- value
                    result

                static member HostAddress(value: nativeint) =
                    let mutable result = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>
                    result.hostAddress <- value
                    result

                override x.ToString() =
                    String.concat "; " [
                        sprintf "deviceAddress = %A" x.deviceAddress
                        sprintf "hostAddress = %A" x.hostAddress
                    ] |> sprintf "VkDeviceOrHostAddressConstKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureGeometryTrianglesDataKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public vertexFormat : VkFormat
                val mutable public vertexData : VkDeviceOrHostAddressConstKHR
                val mutable public vertexStride : VkDeviceSize
                val mutable public maxVertex : uint32
                val mutable public indexType : VkIndexType
                val mutable public indexData : VkDeviceOrHostAddressConstKHR
                val mutable public transformData : VkDeviceOrHostAddressConstKHR

                new(pNext: nativeint, vertexFormat: VkFormat, vertexData: VkDeviceOrHostAddressConstKHR, vertexStride: VkDeviceSize, maxVertex: uint32, indexType: VkIndexType, indexData: VkDeviceOrHostAddressConstKHR, transformData: VkDeviceOrHostAddressConstKHR) =
                    {
                        sType = 1000150005u
                        pNext = pNext
                        vertexFormat = vertexFormat
                        vertexData = vertexData
                        vertexStride = vertexStride
                        maxVertex = maxVertex
                        indexType = indexType
                        indexData = indexData
                        transformData = transformData
                    }

                new(vertexFormat: VkFormat, vertexData: VkDeviceOrHostAddressConstKHR, vertexStride: VkDeviceSize, maxVertex: uint32, indexType: VkIndexType, indexData: VkDeviceOrHostAddressConstKHR, transformData: VkDeviceOrHostAddressConstKHR) =
                    VkAccelerationStructureGeometryTrianglesDataKHR(Unchecked.defaultof<nativeint>, vertexFormat, vertexData, vertexStride, maxVertex, indexType, indexData, transformData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.vertexFormat = Unchecked.defaultof<VkFormat> && x.vertexData = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR> && x.vertexStride = Unchecked.defaultof<VkDeviceSize> && x.maxVertex = Unchecked.defaultof<uint32> && x.indexType = Unchecked.defaultof<VkIndexType> && x.indexData = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR> && x.transformData = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>

                static member Empty =
                    VkAccelerationStructureGeometryTrianglesDataKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkIndexType>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "vertexFormat = %A" x.vertexFormat
                        sprintf "vertexData = %A" x.vertexData
                        sprintf "vertexStride = %A" x.vertexStride
                        sprintf "maxVertex = %A" x.maxVertex
                        sprintf "indexType = %A" x.indexType
                        sprintf "indexData = %A" x.indexData
                        sprintf "transformData = %A" x.transformData
                    ] |> sprintf "VkAccelerationStructureGeometryTrianglesDataKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureGeometryAabbsDataKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public data : VkDeviceOrHostAddressConstKHR
                val mutable public stride : VkDeviceSize

                new(pNext: nativeint, data: VkDeviceOrHostAddressConstKHR, stride: VkDeviceSize) =
                    {
                        sType = 1000150003u
                        pNext = pNext
                        data = data
                        stride = stride
                    }

                new(data: VkDeviceOrHostAddressConstKHR, stride: VkDeviceSize) =
                    VkAccelerationStructureGeometryAabbsDataKHR(Unchecked.defaultof<nativeint>, data, stride)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.data = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR> && x.stride = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkAccelerationStructureGeometryAabbsDataKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "data = %A" x.data
                        sprintf "stride = %A" x.stride
                    ] |> sprintf "VkAccelerationStructureGeometryAabbsDataKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureGeometryInstancesDataKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public arrayOfPointers : VkBool32
                val mutable public data : VkDeviceOrHostAddressConstKHR

                new(pNext: nativeint, arrayOfPointers: VkBool32, data: VkDeviceOrHostAddressConstKHR) =
                    {
                        sType = 1000150004u
                        pNext = pNext
                        arrayOfPointers = arrayOfPointers
                        data = data
                    }

                new(arrayOfPointers: VkBool32, data: VkDeviceOrHostAddressConstKHR) =
                    VkAccelerationStructureGeometryInstancesDataKHR(Unchecked.defaultof<nativeint>, arrayOfPointers, data)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.arrayOfPointers = Unchecked.defaultof<VkBool32> && x.data = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>

                static member Empty =
                    VkAccelerationStructureGeometryInstancesDataKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "arrayOfPointers = %A" x.arrayOfPointers
                        sprintf "data = %A" x.data
                    ] |> sprintf "VkAccelerationStructureGeometryInstancesDataKHR { %s }"
            end

        [<StructLayout(LayoutKind.Explicit)>]
        type VkAccelerationStructureGeometryDataKHR =
            struct
                [<FieldOffset(0)>]
                val mutable public triangles : VkAccelerationStructureGeometryTrianglesDataKHR
                [<FieldOffset(0)>]
                val mutable public aabbs : VkAccelerationStructureGeometryAabbsDataKHR
                [<FieldOffset(0)>]
                val mutable public instances : VkAccelerationStructureGeometryInstancesDataKHR

                static member Triangles(value: VkAccelerationStructureGeometryTrianglesDataKHR) =
                    let mutable result = Unchecked.defaultof<VkAccelerationStructureGeometryDataKHR>
                    result.triangles <- value
                    result

                static member Aabbs(value: VkAccelerationStructureGeometryAabbsDataKHR) =
                    let mutable result = Unchecked.defaultof<VkAccelerationStructureGeometryDataKHR>
                    result.aabbs <- value
                    result

                static member Instances(value: VkAccelerationStructureGeometryInstancesDataKHR) =
                    let mutable result = Unchecked.defaultof<VkAccelerationStructureGeometryDataKHR>
                    result.instances <- value
                    result

                override x.ToString() =
                    String.concat "; " [
                        sprintf "triangles = %A" x.triangles
                        sprintf "aabbs = %A" x.aabbs
                        sprintf "instances = %A" x.instances
                    ] |> sprintf "VkAccelerationStructureGeometryDataKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureGeometryKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public geometryType : VkGeometryTypeKHR
                val mutable public geometry : VkAccelerationStructureGeometryDataKHR
                val mutable public flags : VkGeometryFlagsKHR

                new(pNext: nativeint, geometryType: VkGeometryTypeKHR, geometry: VkAccelerationStructureGeometryDataKHR, flags: VkGeometryFlagsKHR) =
                    {
                        sType = 1000150006u
                        pNext = pNext
                        geometryType = geometryType
                        geometry = geometry
                        flags = flags
                    }

                new(geometryType: VkGeometryTypeKHR, geometry: VkAccelerationStructureGeometryDataKHR, flags: VkGeometryFlagsKHR) =
                    VkAccelerationStructureGeometryKHR(Unchecked.defaultof<nativeint>, geometryType, geometry, flags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.geometryType = Unchecked.defaultof<VkGeometryTypeKHR> && x.geometry = Unchecked.defaultof<VkAccelerationStructureGeometryDataKHR> && x.flags = Unchecked.defaultof<VkGeometryFlagsKHR>

                static member Empty =
                    VkAccelerationStructureGeometryKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkGeometryTypeKHR>, Unchecked.defaultof<VkAccelerationStructureGeometryDataKHR>, Unchecked.defaultof<VkGeometryFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "geometryType = %A" x.geometryType
                        sprintf "geometry = %A" x.geometry
                        sprintf "flags = %A" x.flags
                    ] |> sprintf "VkAccelerationStructureGeometryKHR { %s }"
            end

        [<StructLayout(LayoutKind.Explicit)>]
        type VkDeviceOrHostAddressKHR =
            struct
                [<FieldOffset(0)>]
                val mutable public deviceAddress : VkDeviceAddress
                [<FieldOffset(0)>]
                val mutable public hostAddress : nativeint

                static member DeviceAddress(value: VkDeviceAddress) =
                    let mutable result = Unchecked.defaultof<VkDeviceOrHostAddressKHR>
                    result.deviceAddress <- value
                    result

                static member HostAddress(value: nativeint) =
                    let mutable result = Unchecked.defaultof<VkDeviceOrHostAddressKHR>
                    result.hostAddress <- value
                    result

                override x.ToString() =
                    String.concat "; " [
                        sprintf "deviceAddress = %A" x.deviceAddress
                        sprintf "hostAddress = %A" x.hostAddress
                    ] |> sprintf "VkDeviceOrHostAddressKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureBuildGeometryInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _type : VkAccelerationStructureTypeKHR
                val mutable public flags : VkBuildAccelerationStructureFlagsKHR
                val mutable public mode : VkBuildAccelerationStructureModeKHR
                val mutable public srcAccelerationStructure : VkAccelerationStructureKHR
                val mutable public dstAccelerationStructure : VkAccelerationStructureKHR
                val mutable public geometryCount : uint32
                val mutable public pGeometries : nativeptr<VkAccelerationStructureGeometryKHR>
                val mutable public ppGeometries : nativeptr<nativeptr<VkAccelerationStructureGeometryKHR>>
                val mutable public scratchData : VkDeviceOrHostAddressKHR

                new(pNext: nativeint, _type: VkAccelerationStructureTypeKHR, flags: VkBuildAccelerationStructureFlagsKHR, mode: VkBuildAccelerationStructureModeKHR, srcAccelerationStructure: VkAccelerationStructureKHR, dstAccelerationStructure: VkAccelerationStructureKHR, geometryCount: uint32, pGeometries: nativeptr<VkAccelerationStructureGeometryKHR>, ppGeometries: nativeptr<nativeptr<VkAccelerationStructureGeometryKHR>>, scratchData: VkDeviceOrHostAddressKHR) =
                    {
                        sType = 1000150000u
                        pNext = pNext
                        _type = _type
                        flags = flags
                        mode = mode
                        srcAccelerationStructure = srcAccelerationStructure
                        dstAccelerationStructure = dstAccelerationStructure
                        geometryCount = geometryCount
                        pGeometries = pGeometries
                        ppGeometries = ppGeometries
                        scratchData = scratchData
                    }

                new(_type: VkAccelerationStructureTypeKHR, flags: VkBuildAccelerationStructureFlagsKHR, mode: VkBuildAccelerationStructureModeKHR, srcAccelerationStructure: VkAccelerationStructureKHR, dstAccelerationStructure: VkAccelerationStructureKHR, geometryCount: uint32, pGeometries: nativeptr<VkAccelerationStructureGeometryKHR>, ppGeometries: nativeptr<nativeptr<VkAccelerationStructureGeometryKHR>>, scratchData: VkDeviceOrHostAddressKHR) =
                    VkAccelerationStructureBuildGeometryInfoKHR(Unchecked.defaultof<nativeint>, _type, flags, mode, srcAccelerationStructure, dstAccelerationStructure, geometryCount, pGeometries, ppGeometries, scratchData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkAccelerationStructureTypeKHR> && x.flags = Unchecked.defaultof<VkBuildAccelerationStructureFlagsKHR> && x.mode = Unchecked.defaultof<VkBuildAccelerationStructureModeKHR> && x.srcAccelerationStructure = Unchecked.defaultof<VkAccelerationStructureKHR> && x.dstAccelerationStructure = Unchecked.defaultof<VkAccelerationStructureKHR> && x.geometryCount = Unchecked.defaultof<uint32> && x.pGeometries = Unchecked.defaultof<nativeptr<VkAccelerationStructureGeometryKHR>> && x.ppGeometries = Unchecked.defaultof<nativeptr<nativeptr<VkAccelerationStructureGeometryKHR>>> && x.scratchData = Unchecked.defaultof<VkDeviceOrHostAddressKHR>

                static member Empty =
                    VkAccelerationStructureBuildGeometryInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureTypeKHR>, Unchecked.defaultof<VkBuildAccelerationStructureFlagsKHR>, Unchecked.defaultof<VkBuildAccelerationStructureModeKHR>, Unchecked.defaultof<VkAccelerationStructureKHR>, Unchecked.defaultof<VkAccelerationStructureKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAccelerationStructureGeometryKHR>>, Unchecked.defaultof<nativeptr<nativeptr<VkAccelerationStructureGeometryKHR>>>, Unchecked.defaultof<VkDeviceOrHostAddressKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_type = %A" x._type
                        sprintf "flags = %A" x.flags
                        sprintf "mode = %A" x.mode
                        sprintf "srcAccelerationStructure = %A" x.srcAccelerationStructure
                        sprintf "dstAccelerationStructure = %A" x.dstAccelerationStructure
                        sprintf "geometryCount = %A" x.geometryCount
                        sprintf "pGeometries = %A" x.pGeometries
                        sprintf "ppGeometries = %A" x.ppGeometries
                        sprintf "scratchData = %A" x.scratchData
                    ] |> sprintf "VkAccelerationStructureBuildGeometryInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureBuildRangeInfoKHR =
            struct
                val mutable public primitiveCount : uint32
                val mutable public primitiveOffset : uint32
                val mutable public firstVertex : uint32
                val mutable public transformOffset : uint32

                new(primitiveCount: uint32, primitiveOffset: uint32, firstVertex: uint32, transformOffset: uint32) =
                    {
                        primitiveCount = primitiveCount
                        primitiveOffset = primitiveOffset
                        firstVertex = firstVertex
                        transformOffset = transformOffset
                    }

                member x.IsEmpty =
                    x.primitiveCount = Unchecked.defaultof<uint32> && x.primitiveOffset = Unchecked.defaultof<uint32> && x.firstVertex = Unchecked.defaultof<uint32> && x.transformOffset = Unchecked.defaultof<uint32>

                static member Empty =
                    VkAccelerationStructureBuildRangeInfoKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "primitiveCount = %A" x.primitiveCount
                        sprintf "primitiveOffset = %A" x.primitiveOffset
                        sprintf "firstVertex = %A" x.firstVertex
                        sprintf "transformOffset = %A" x.transformOffset
                    ] |> sprintf "VkAccelerationStructureBuildRangeInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureBuildSizesInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public accelerationStructureSize : VkDeviceSize
                val mutable public updateScratchSize : VkDeviceSize
                val mutable public buildScratchSize : VkDeviceSize

                new(pNext: nativeint, accelerationStructureSize: VkDeviceSize, updateScratchSize: VkDeviceSize, buildScratchSize: VkDeviceSize) =
                    {
                        sType = 1000150020u
                        pNext = pNext
                        accelerationStructureSize = accelerationStructureSize
                        updateScratchSize = updateScratchSize
                        buildScratchSize = buildScratchSize
                    }

                new(accelerationStructureSize: VkDeviceSize, updateScratchSize: VkDeviceSize, buildScratchSize: VkDeviceSize) =
                    VkAccelerationStructureBuildSizesInfoKHR(Unchecked.defaultof<nativeint>, accelerationStructureSize, updateScratchSize, buildScratchSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructureSize = Unchecked.defaultof<VkDeviceSize> && x.updateScratchSize = Unchecked.defaultof<VkDeviceSize> && x.buildScratchSize = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkAccelerationStructureBuildSizesInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "accelerationStructureSize = %A" x.accelerationStructureSize
                        sprintf "updateScratchSize = %A" x.updateScratchSize
                        sprintf "buildScratchSize = %A" x.buildScratchSize
                    ] |> sprintf "VkAccelerationStructureBuildSizesInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public createFlags : VkAccelerationStructureCreateFlagsKHR
                val mutable public buffer : VkBuffer
                val mutable public offset : VkDeviceSize
                val mutable public size : VkDeviceSize
                val mutable public _type : VkAccelerationStructureTypeKHR
                val mutable public deviceAddress : VkDeviceAddress

                new(pNext: nativeint, createFlags: VkAccelerationStructureCreateFlagsKHR, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize, _type: VkAccelerationStructureTypeKHR, deviceAddress: VkDeviceAddress) =
                    {
                        sType = 1000150017u
                        pNext = pNext
                        createFlags = createFlags
                        buffer = buffer
                        offset = offset
                        size = size
                        _type = _type
                        deviceAddress = deviceAddress
                    }

                new(createFlags: VkAccelerationStructureCreateFlagsKHR, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize, _type: VkAccelerationStructureTypeKHR, deviceAddress: VkDeviceAddress) =
                    VkAccelerationStructureCreateInfoKHR(Unchecked.defaultof<nativeint>, createFlags, buffer, offset, size, _type, deviceAddress)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.createFlags = Unchecked.defaultof<VkAccelerationStructureCreateFlagsKHR> && x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize> && x._type = Unchecked.defaultof<VkAccelerationStructureTypeKHR> && x.deviceAddress = Unchecked.defaultof<VkDeviceAddress>

                static member Empty =
                    VkAccelerationStructureCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureCreateFlagsKHR>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkAccelerationStructureTypeKHR>, Unchecked.defaultof<VkDeviceAddress>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "createFlags = %A" x.createFlags
                        sprintf "buffer = %A" x.buffer
                        sprintf "offset = %A" x.offset
                        sprintf "size = %A" x.size
                        sprintf "_type = %A" x._type
                        sprintf "deviceAddress = %A" x.deviceAddress
                    ] |> sprintf "VkAccelerationStructureCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureDeviceAddressInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public accelerationStructure : VkAccelerationStructureKHR

                new(pNext: nativeint, accelerationStructure: VkAccelerationStructureKHR) =
                    {
                        sType = 1000150002u
                        pNext = pNext
                        accelerationStructure = accelerationStructure
                    }

                new(accelerationStructure: VkAccelerationStructureKHR) =
                    VkAccelerationStructureDeviceAddressInfoKHR(Unchecked.defaultof<nativeint>, accelerationStructure)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructure = Unchecked.defaultof<VkAccelerationStructureKHR>

                static member Empty =
                    VkAccelerationStructureDeviceAddressInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "accelerationStructure = %A" x.accelerationStructure
                    ] |> sprintf "VkAccelerationStructureDeviceAddressInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkTransformMatrixKHR =
            struct
                val mutable public matrix : M34f

                new(matrix: M34f) =
                    {
                        matrix = matrix
                    }

                member x.IsEmpty =
                    x.matrix = Unchecked.defaultof<M34f>

                static member Empty =
                    VkTransformMatrixKHR(Unchecked.defaultof<M34f>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "matrix = %A" x.matrix
                    ] |> sprintf "VkTransformMatrixKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureInstanceKHR =
            struct
                val mutable public transform : VkTransformMatrixKHR
                val mutable private __bitfield0 : uint32
                val mutable private __bitfield1 : uint32
                val mutable public accelerationStructureReference : uint64

                member x.instanceCustomIndex
                    with get() : uint32 =  ((x.__bitfield0 >>> 0) &&& 0xFFFFFFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFFFFFFu <<< 0)) ||| ((( value) &&& 0xFFFFFFu) <<< 0)

                member x.mask
                    with get() : uint32 =  ((x.__bitfield0 >>> 24) &&& 0xFFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFFu <<< 24)) ||| ((( value) &&& 0xFFu) <<< 24)

                member x.instanceShaderBindingTableRecordOffset
                    with get() : uint32 =  ((x.__bitfield1 >>> 0) &&& 0xFFFFFFu)
                    and set (value: uint32) = x.__bitfield1 <- (x.__bitfield1 &&& ~~~(0xFFFFFFu <<< 0)) ||| ((( value) &&& 0xFFFFFFu) <<< 0)

                member x.flags
                    with get() : VkGeometryInstanceFlagsKHR = enum<VkGeometryInstanceFlagsKHR> <| int32 ((x.__bitfield1 >>> 24) &&& 0xFFu)
                    and set (value: VkGeometryInstanceFlagsKHR) = x.__bitfield1 <- (x.__bitfield1 &&& ~~~(0xFFu <<< 24)) ||| (((uint32 value) &&& 0xFFu) <<< 24)

                new(transform: VkTransformMatrixKHR, instanceCustomIndex: uint32, mask: uint32, instanceShaderBindingTableRecordOffset: uint32, flags: VkGeometryInstanceFlagsKHR, accelerationStructureReference: uint64) =
                    {
                        transform = transform
                        __bitfield0 = (( instanceCustomIndex &&& 0xFFFFFFu) <<< 0) ||| (( mask &&& 0xFFu) <<< 24)
                        __bitfield1 = (( instanceShaderBindingTableRecordOffset &&& 0xFFFFFFu) <<< 0) ||| ((uint32 flags &&& 0xFFu) <<< 24)
                        accelerationStructureReference = accelerationStructureReference
                    }

                member x.IsEmpty =
                    x.transform = Unchecked.defaultof<VkTransformMatrixKHR> && x.__bitfield0 = Unchecked.defaultof<uint32> && x.__bitfield1 = Unchecked.defaultof<uint32> && x.accelerationStructureReference = Unchecked.defaultof<uint64>

                static member Empty =
                    VkAccelerationStructureInstanceKHR(Unchecked.defaultof<VkTransformMatrixKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkGeometryInstanceFlagsKHR>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "transform = %A" x.transform
                        sprintf "instanceCustomIndex = %A" x.instanceCustomIndex
                        sprintf "mask = %A" x.mask
                        sprintf "instanceShaderBindingTableRecordOffset = %A" x.instanceShaderBindingTableRecordOffset
                        sprintf "flags = %A" x.flags
                        sprintf "accelerationStructureReference = %A" x.accelerationStructureReference
                    ] |> sprintf "VkAccelerationStructureInstanceKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureVersionInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pVersionData : nativeptr<byte>

                new(pNext: nativeint, pVersionData: nativeptr<byte>) =
                    {
                        sType = 1000150009u
                        pNext = pNext
                        pVersionData = pVersionData
                    }

                new(pVersionData: nativeptr<byte>) =
                    VkAccelerationStructureVersionInfoKHR(Unchecked.defaultof<nativeint>, pVersionData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pVersionData = Unchecked.defaultof<nativeptr<byte>>

                static member Empty =
                    VkAccelerationStructureVersionInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<byte>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pVersionData = %A" x.pVersionData
                    ] |> sprintf "VkAccelerationStructureVersionInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCopyAccelerationStructureInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public src : VkAccelerationStructureKHR
                val mutable public dst : VkAccelerationStructureKHR
                val mutable public mode : VkCopyAccelerationStructureModeKHR

                new(pNext: nativeint, src: VkAccelerationStructureKHR, dst: VkAccelerationStructureKHR, mode: VkCopyAccelerationStructureModeKHR) =
                    {
                        sType = 1000150010u
                        pNext = pNext
                        src = src
                        dst = dst
                        mode = mode
                    }

                new(src: VkAccelerationStructureKHR, dst: VkAccelerationStructureKHR, mode: VkCopyAccelerationStructureModeKHR) =
                    VkCopyAccelerationStructureInfoKHR(Unchecked.defaultof<nativeint>, src, dst, mode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.src = Unchecked.defaultof<VkAccelerationStructureKHR> && x.dst = Unchecked.defaultof<VkAccelerationStructureKHR> && x.mode = Unchecked.defaultof<VkCopyAccelerationStructureModeKHR>

                static member Empty =
                    VkCopyAccelerationStructureInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureKHR>, Unchecked.defaultof<VkAccelerationStructureKHR>, Unchecked.defaultof<VkCopyAccelerationStructureModeKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "src = %A" x.src
                        sprintf "dst = %A" x.dst
                        sprintf "mode = %A" x.mode
                    ] |> sprintf "VkCopyAccelerationStructureInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCopyAccelerationStructureToMemoryInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public src : VkAccelerationStructureKHR
                val mutable public dst : VkDeviceOrHostAddressKHR
                val mutable public mode : VkCopyAccelerationStructureModeKHR

                new(pNext: nativeint, src: VkAccelerationStructureKHR, dst: VkDeviceOrHostAddressKHR, mode: VkCopyAccelerationStructureModeKHR) =
                    {
                        sType = 1000150011u
                        pNext = pNext
                        src = src
                        dst = dst
                        mode = mode
                    }

                new(src: VkAccelerationStructureKHR, dst: VkDeviceOrHostAddressKHR, mode: VkCopyAccelerationStructureModeKHR) =
                    VkCopyAccelerationStructureToMemoryInfoKHR(Unchecked.defaultof<nativeint>, src, dst, mode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.src = Unchecked.defaultof<VkAccelerationStructureKHR> && x.dst = Unchecked.defaultof<VkDeviceOrHostAddressKHR> && x.mode = Unchecked.defaultof<VkCopyAccelerationStructureModeKHR>

                static member Empty =
                    VkCopyAccelerationStructureToMemoryInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureKHR>, Unchecked.defaultof<VkDeviceOrHostAddressKHR>, Unchecked.defaultof<VkCopyAccelerationStructureModeKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "src = %A" x.src
                        sprintf "dst = %A" x.dst
                        sprintf "mode = %A" x.mode
                    ] |> sprintf "VkCopyAccelerationStructureToMemoryInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCopyMemoryToAccelerationStructureInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public src : VkDeviceOrHostAddressConstKHR
                val mutable public dst : VkAccelerationStructureKHR
                val mutable public mode : VkCopyAccelerationStructureModeKHR

                new(pNext: nativeint, src: VkDeviceOrHostAddressConstKHR, dst: VkAccelerationStructureKHR, mode: VkCopyAccelerationStructureModeKHR) =
                    {
                        sType = 1000150012u
                        pNext = pNext
                        src = src
                        dst = dst
                        mode = mode
                    }

                new(src: VkDeviceOrHostAddressConstKHR, dst: VkAccelerationStructureKHR, mode: VkCopyAccelerationStructureModeKHR) =
                    VkCopyMemoryToAccelerationStructureInfoKHR(Unchecked.defaultof<nativeint>, src, dst, mode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.src = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR> && x.dst = Unchecked.defaultof<VkAccelerationStructureKHR> && x.mode = Unchecked.defaultof<VkCopyAccelerationStructureModeKHR>

                static member Empty =
                    VkCopyMemoryToAccelerationStructureInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkAccelerationStructureKHR>, Unchecked.defaultof<VkCopyAccelerationStructureModeKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "src = %A" x.src
                        sprintf "dst = %A" x.dst
                        sprintf "mode = %A" x.mode
                    ] |> sprintf "VkCopyMemoryToAccelerationStructureInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceAccelerationStructureFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public accelerationStructure : VkBool32
                val mutable public accelerationStructureCaptureReplay : VkBool32
                val mutable public accelerationStructureIndirectBuild : VkBool32
                val mutable public accelerationStructureHostCommands : VkBool32
                val mutable public descriptorBindingAccelerationStructureUpdateAfterBind : VkBool32

                new(pNext: nativeint, accelerationStructure: VkBool32, accelerationStructureCaptureReplay: VkBool32, accelerationStructureIndirectBuild: VkBool32, accelerationStructureHostCommands: VkBool32, descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32) =
                    {
                        sType = 1000150013u
                        pNext = pNext
                        accelerationStructure = accelerationStructure
                        accelerationStructureCaptureReplay = accelerationStructureCaptureReplay
                        accelerationStructureIndirectBuild = accelerationStructureIndirectBuild
                        accelerationStructureHostCommands = accelerationStructureHostCommands
                        descriptorBindingAccelerationStructureUpdateAfterBind = descriptorBindingAccelerationStructureUpdateAfterBind
                    }

                new(accelerationStructure: VkBool32, accelerationStructureCaptureReplay: VkBool32, accelerationStructureIndirectBuild: VkBool32, accelerationStructureHostCommands: VkBool32, descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32) =
                    VkPhysicalDeviceAccelerationStructureFeaturesKHR(Unchecked.defaultof<nativeint>, accelerationStructure, accelerationStructureCaptureReplay, accelerationStructureIndirectBuild, accelerationStructureHostCommands, descriptorBindingAccelerationStructureUpdateAfterBind)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructure = Unchecked.defaultof<VkBool32> && x.accelerationStructureCaptureReplay = Unchecked.defaultof<VkBool32> && x.accelerationStructureIndirectBuild = Unchecked.defaultof<VkBool32> && x.accelerationStructureHostCommands = Unchecked.defaultof<VkBool32> && x.descriptorBindingAccelerationStructureUpdateAfterBind = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceAccelerationStructureFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "accelerationStructure = %A" x.accelerationStructure
                        sprintf "accelerationStructureCaptureReplay = %A" x.accelerationStructureCaptureReplay
                        sprintf "accelerationStructureIndirectBuild = %A" x.accelerationStructureIndirectBuild
                        sprintf "accelerationStructureHostCommands = %A" x.accelerationStructureHostCommands
                        sprintf "descriptorBindingAccelerationStructureUpdateAfterBind = %A" x.descriptorBindingAccelerationStructureUpdateAfterBind
                    ] |> sprintf "VkPhysicalDeviceAccelerationStructureFeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceAccelerationStructurePropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxGeometryCount : uint64
                val mutable public maxInstanceCount : uint64
                val mutable public maxPrimitiveCount : uint64
                val mutable public maxPerStageDescriptorAccelerationStructures : uint32
                val mutable public maxPerStageDescriptorUpdateAfterBindAccelerationStructures : uint32
                val mutable public maxDescriptorSetAccelerationStructures : uint32
                val mutable public maxDescriptorSetUpdateAfterBindAccelerationStructures : uint32
                val mutable public minAccelerationStructureScratchOffsetAlignment : uint32

                new(pNext: nativeint, maxGeometryCount: uint64, maxInstanceCount: uint64, maxPrimitiveCount: uint64, maxPerStageDescriptorAccelerationStructures: uint32, maxPerStageDescriptorUpdateAfterBindAccelerationStructures: uint32, maxDescriptorSetAccelerationStructures: uint32, maxDescriptorSetUpdateAfterBindAccelerationStructures: uint32, minAccelerationStructureScratchOffsetAlignment: uint32) =
                    {
                        sType = 1000150014u
                        pNext = pNext
                        maxGeometryCount = maxGeometryCount
                        maxInstanceCount = maxInstanceCount
                        maxPrimitiveCount = maxPrimitiveCount
                        maxPerStageDescriptorAccelerationStructures = maxPerStageDescriptorAccelerationStructures
                        maxPerStageDescriptorUpdateAfterBindAccelerationStructures = maxPerStageDescriptorUpdateAfterBindAccelerationStructures
                        maxDescriptorSetAccelerationStructures = maxDescriptorSetAccelerationStructures
                        maxDescriptorSetUpdateAfterBindAccelerationStructures = maxDescriptorSetUpdateAfterBindAccelerationStructures
                        minAccelerationStructureScratchOffsetAlignment = minAccelerationStructureScratchOffsetAlignment
                    }

                new(maxGeometryCount: uint64, maxInstanceCount: uint64, maxPrimitiveCount: uint64, maxPerStageDescriptorAccelerationStructures: uint32, maxPerStageDescriptorUpdateAfterBindAccelerationStructures: uint32, maxDescriptorSetAccelerationStructures: uint32, maxDescriptorSetUpdateAfterBindAccelerationStructures: uint32, minAccelerationStructureScratchOffsetAlignment: uint32) =
                    VkPhysicalDeviceAccelerationStructurePropertiesKHR(Unchecked.defaultof<nativeint>, maxGeometryCount, maxInstanceCount, maxPrimitiveCount, maxPerStageDescriptorAccelerationStructures, maxPerStageDescriptorUpdateAfterBindAccelerationStructures, maxDescriptorSetAccelerationStructures, maxDescriptorSetUpdateAfterBindAccelerationStructures, minAccelerationStructureScratchOffsetAlignment)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxGeometryCount = Unchecked.defaultof<uint64> && x.maxInstanceCount = Unchecked.defaultof<uint64> && x.maxPrimitiveCount = Unchecked.defaultof<uint64> && x.maxPerStageDescriptorAccelerationStructures = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindAccelerationStructures = Unchecked.defaultof<uint32> && x.maxDescriptorSetAccelerationStructures = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindAccelerationStructures = Unchecked.defaultof<uint32> && x.minAccelerationStructureScratchOffsetAlignment = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceAccelerationStructurePropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxGeometryCount = %A" x.maxGeometryCount
                        sprintf "maxInstanceCount = %A" x.maxInstanceCount
                        sprintf "maxPrimitiveCount = %A" x.maxPrimitiveCount
                        sprintf "maxPerStageDescriptorAccelerationStructures = %A" x.maxPerStageDescriptorAccelerationStructures
                        sprintf "maxPerStageDescriptorUpdateAfterBindAccelerationStructures = %A" x.maxPerStageDescriptorUpdateAfterBindAccelerationStructures
                        sprintf "maxDescriptorSetAccelerationStructures = %A" x.maxDescriptorSetAccelerationStructures
                        sprintf "maxDescriptorSetUpdateAfterBindAccelerationStructures = %A" x.maxDescriptorSetUpdateAfterBindAccelerationStructures
                        sprintf "minAccelerationStructureScratchOffsetAlignment = %A" x.minAccelerationStructureScratchOffsetAlignment
                    ] |> sprintf "VkPhysicalDeviceAccelerationStructurePropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkWriteDescriptorSetAccelerationStructureKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public accelerationStructureCount : uint32
                val mutable public pAccelerationStructures : nativeptr<VkAccelerationStructureKHR>

                new(pNext: nativeint, accelerationStructureCount: uint32, pAccelerationStructures: nativeptr<VkAccelerationStructureKHR>) =
                    {
                        sType = 1000150007u
                        pNext = pNext
                        accelerationStructureCount = accelerationStructureCount
                        pAccelerationStructures = pAccelerationStructures
                    }

                new(accelerationStructureCount: uint32, pAccelerationStructures: nativeptr<VkAccelerationStructureKHR>) =
                    VkWriteDescriptorSetAccelerationStructureKHR(Unchecked.defaultof<nativeint>, accelerationStructureCount, pAccelerationStructures)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructureCount = Unchecked.defaultof<uint32> && x.pAccelerationStructures = Unchecked.defaultof<nativeptr<VkAccelerationStructureKHR>>

                static member Empty =
                    VkWriteDescriptorSetAccelerationStructureKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAccelerationStructureKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "accelerationStructureCount = %A" x.accelerationStructureCount
                        sprintf "pAccelerationStructures = %A" x.pAccelerationStructures
                    ] |> sprintf "VkWriteDescriptorSetAccelerationStructureKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags with
                  static member inline AccelerationStructureReadBitKhr = enum<VkAccessFlags> 0x00200000
                  static member inline AccelerationStructureWriteBitKhr = enum<VkAccessFlags> 0x00400000
             type VkBufferUsageFlags with
                  static member inline AccelerationStructureBuildInputReadOnlyBitKhr = enum<VkBufferUsageFlags> 0x00080000
                  static member inline AccelerationStructureStorageBitKhr = enum<VkBufferUsageFlags> 0x00100000
             type VkCopyAccelerationStructureModeKHR with
                  static member inline Serialize = enum<VkCopyAccelerationStructureModeKHR> 2
                  static member inline Deserialize = enum<VkCopyAccelerationStructureModeKHR> 3
             type VkDescriptorType with
                  static member inline AccelerationStructureKhr = enum<VkDescriptorType> 1000150000
             type VkFormatFeatureFlags with
                  static member inline AccelerationStructureVertexBufferBitKhr = enum<VkFormatFeatureFlags> 0x20000000
             type VkIndexType with
                  static member inline NoneKhr = enum<VkIndexType> 1000165000
             type VkObjectType with
                  static member inline AccelerationStructureKhr = enum<VkObjectType> 1000150000
             type VkPipelineStageFlags with
                  static member inline AccelerationStructureBuildBitKhr = enum<VkPipelineStageFlags> 0x02000000
             type VkQueryType with
                  static member inline AccelerationStructureCompactedSizeKhr = enum<VkQueryType> 1000150000
                  static member inline AccelerationStructureSerializationSizeKhr = enum<VkQueryType> 1000150001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateAccelerationStructureKHRDel = delegate of VkDevice * nativeptr<VkAccelerationStructureCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkAccelerationStructureKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyAccelerationStructureKHRDel = delegate of VkDevice * VkAccelerationStructureKHR * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBuildAccelerationStructuresKHRDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkAccelerationStructureBuildGeometryInfoKHR> * nativeptr<nativeptr<VkAccelerationStructureBuildRangeInfoKHR>> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBuildAccelerationStructuresIndirectKHRDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkAccelerationStructureBuildGeometryInfoKHR> * nativeptr<VkDeviceAddress> * nativeptr<uint32> * nativeptr<nativeptr<uint32>> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkBuildAccelerationStructuresKHRDel = delegate of VkDevice * KHRDeferredHostOperations.VkDeferredOperationKHR * uint32 * nativeptr<VkAccelerationStructureBuildGeometryInfoKHR> * nativeptr<nativeptr<VkAccelerationStructureBuildRangeInfoKHR>> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCopyAccelerationStructureKHRDel = delegate of VkDevice * KHRDeferredHostOperations.VkDeferredOperationKHR * nativeptr<VkCopyAccelerationStructureInfoKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCopyAccelerationStructureToMemoryKHRDel = delegate of VkDevice * KHRDeferredHostOperations.VkDeferredOperationKHR * nativeptr<VkCopyAccelerationStructureToMemoryInfoKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCopyMemoryToAccelerationStructureKHRDel = delegate of VkDevice * KHRDeferredHostOperations.VkDeferredOperationKHR * nativeptr<VkCopyMemoryToAccelerationStructureInfoKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkWriteAccelerationStructuresPropertiesKHRDel = delegate of VkDevice * uint32 * nativeptr<VkAccelerationStructureKHR> * VkQueryType * uint64 * nativeint * uint64 -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyAccelerationStructureKHRDel = delegate of VkCommandBuffer * nativeptr<VkCopyAccelerationStructureInfoKHR> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyAccelerationStructureToMemoryKHRDel = delegate of VkCommandBuffer * nativeptr<VkCopyAccelerationStructureToMemoryInfoKHR> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyMemoryToAccelerationStructureKHRDel = delegate of VkCommandBuffer * nativeptr<VkCopyMemoryToAccelerationStructureInfoKHR> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetAccelerationStructureDeviceAddressKHRDel = delegate of VkDevice * nativeptr<VkAccelerationStructureDeviceAddressInfoKHR> -> VkDeviceAddress
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdWriteAccelerationStructuresPropertiesKHRDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkAccelerationStructureKHR> * VkQueryType * VkQueryPool * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceAccelerationStructureCompatibilityKHRDel = delegate of VkDevice * nativeptr<VkAccelerationStructureVersionInfoKHR> * nativeptr<VkAccelerationStructureCompatibilityKHR> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetAccelerationStructureBuildSizesKHRDel = delegate of VkDevice * VkAccelerationStructureBuildTypeKHR * nativeptr<VkAccelerationStructureBuildGeometryInfoKHR> * nativeptr<uint32> * nativeptr<VkAccelerationStructureBuildSizesInfoKHR> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRAccelerationStructure")
                static let s_vkCreateAccelerationStructureKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateAccelerationStructureKHRDel> "vkCreateAccelerationStructureKHR"
                static let s_vkDestroyAccelerationStructureKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroyAccelerationStructureKHRDel> "vkDestroyAccelerationStructureKHR"
                static let s_vkCmdBuildAccelerationStructuresKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBuildAccelerationStructuresKHRDel> "vkCmdBuildAccelerationStructuresKHR"
                static let s_vkCmdBuildAccelerationStructuresIndirectKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBuildAccelerationStructuresIndirectKHRDel> "vkCmdBuildAccelerationStructuresIndirectKHR"
                static let s_vkBuildAccelerationStructuresKHRDel = VkRaw.vkImportInstanceDelegate<VkBuildAccelerationStructuresKHRDel> "vkBuildAccelerationStructuresKHR"
                static let s_vkCopyAccelerationStructureKHRDel = VkRaw.vkImportInstanceDelegate<VkCopyAccelerationStructureKHRDel> "vkCopyAccelerationStructureKHR"
                static let s_vkCopyAccelerationStructureToMemoryKHRDel = VkRaw.vkImportInstanceDelegate<VkCopyAccelerationStructureToMemoryKHRDel> "vkCopyAccelerationStructureToMemoryKHR"
                static let s_vkCopyMemoryToAccelerationStructureKHRDel = VkRaw.vkImportInstanceDelegate<VkCopyMemoryToAccelerationStructureKHRDel> "vkCopyMemoryToAccelerationStructureKHR"
                static let s_vkWriteAccelerationStructuresPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkWriteAccelerationStructuresPropertiesKHRDel> "vkWriteAccelerationStructuresPropertiesKHR"
                static let s_vkCmdCopyAccelerationStructureKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyAccelerationStructureKHRDel> "vkCmdCopyAccelerationStructureKHR"
                static let s_vkCmdCopyAccelerationStructureToMemoryKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyAccelerationStructureToMemoryKHRDel> "vkCmdCopyAccelerationStructureToMemoryKHR"
                static let s_vkCmdCopyMemoryToAccelerationStructureKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyMemoryToAccelerationStructureKHRDel> "vkCmdCopyMemoryToAccelerationStructureKHR"
                static let s_vkGetAccelerationStructureDeviceAddressKHRDel = VkRaw.vkImportInstanceDelegate<VkGetAccelerationStructureDeviceAddressKHRDel> "vkGetAccelerationStructureDeviceAddressKHR"
                static let s_vkCmdWriteAccelerationStructuresPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdWriteAccelerationStructuresPropertiesKHRDel> "vkCmdWriteAccelerationStructuresPropertiesKHR"
                static let s_vkGetDeviceAccelerationStructureCompatibilityKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceAccelerationStructureCompatibilityKHRDel> "vkGetDeviceAccelerationStructureCompatibilityKHR"
                static let s_vkGetAccelerationStructureBuildSizesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetAccelerationStructureBuildSizesKHRDel> "vkGetAccelerationStructureBuildSizesKHR"
                static do Report.End(3) |> ignore
                static member vkCreateAccelerationStructureKHR = s_vkCreateAccelerationStructureKHRDel
                static member vkDestroyAccelerationStructureKHR = s_vkDestroyAccelerationStructureKHRDel
                static member vkCmdBuildAccelerationStructuresKHR = s_vkCmdBuildAccelerationStructuresKHRDel
                static member vkCmdBuildAccelerationStructuresIndirectKHR = s_vkCmdBuildAccelerationStructuresIndirectKHRDel
                static member vkBuildAccelerationStructuresKHR = s_vkBuildAccelerationStructuresKHRDel
                static member vkCopyAccelerationStructureKHR = s_vkCopyAccelerationStructureKHRDel
                static member vkCopyAccelerationStructureToMemoryKHR = s_vkCopyAccelerationStructureToMemoryKHRDel
                static member vkCopyMemoryToAccelerationStructureKHR = s_vkCopyMemoryToAccelerationStructureKHRDel
                static member vkWriteAccelerationStructuresPropertiesKHR = s_vkWriteAccelerationStructuresPropertiesKHRDel
                static member vkCmdCopyAccelerationStructureKHR = s_vkCmdCopyAccelerationStructureKHRDel
                static member vkCmdCopyAccelerationStructureToMemoryKHR = s_vkCmdCopyAccelerationStructureToMemoryKHRDel
                static member vkCmdCopyMemoryToAccelerationStructureKHR = s_vkCmdCopyMemoryToAccelerationStructureKHRDel
                static member vkGetAccelerationStructureDeviceAddressKHR = s_vkGetAccelerationStructureDeviceAddressKHRDel
                static member vkCmdWriteAccelerationStructuresPropertiesKHR = s_vkCmdWriteAccelerationStructuresPropertiesKHRDel
                static member vkGetDeviceAccelerationStructureCompatibilityKHR = s_vkGetDeviceAccelerationStructureCompatibilityKHRDel
                static member vkGetAccelerationStructureBuildSizesKHR = s_vkGetAccelerationStructureBuildSizesKHRDel
            let vkCreateAccelerationStructureKHR(device : VkDevice, pCreateInfo : nativeptr<VkAccelerationStructureCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pAccelerationStructure : nativeptr<VkAccelerationStructureKHR>) = Loader<unit>.vkCreateAccelerationStructureKHR.Invoke(device, pCreateInfo, pAllocator, pAccelerationStructure)
            let vkDestroyAccelerationStructureKHR(device : VkDevice, accelerationStructure : VkAccelerationStructureKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyAccelerationStructureKHR.Invoke(device, accelerationStructure, pAllocator)
            let vkCmdBuildAccelerationStructuresKHR(commandBuffer : VkCommandBuffer, infoCount : uint32, pInfos : nativeptr<VkAccelerationStructureBuildGeometryInfoKHR>, ppBuildRangeInfos : nativeptr<nativeptr<VkAccelerationStructureBuildRangeInfoKHR>>) = Loader<unit>.vkCmdBuildAccelerationStructuresKHR.Invoke(commandBuffer, infoCount, pInfos, ppBuildRangeInfos)
            let vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer : VkCommandBuffer, infoCount : uint32, pInfos : nativeptr<VkAccelerationStructureBuildGeometryInfoKHR>, pIndirectDeviceAddresses : nativeptr<VkDeviceAddress>, pIndirectStrides : nativeptr<uint32>, ppMaxPrimitiveCounts : nativeptr<nativeptr<uint32>>) = Loader<unit>.vkCmdBuildAccelerationStructuresIndirectKHR.Invoke(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts)
            let vkBuildAccelerationStructuresKHR(device : VkDevice, deferredOperation : KHRDeferredHostOperations.VkDeferredOperationKHR, infoCount : uint32, pInfos : nativeptr<VkAccelerationStructureBuildGeometryInfoKHR>, ppBuildRangeInfos : nativeptr<nativeptr<VkAccelerationStructureBuildRangeInfoKHR>>) = Loader<unit>.vkBuildAccelerationStructuresKHR.Invoke(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos)
            let vkCopyAccelerationStructureKHR(device : VkDevice, deferredOperation : KHRDeferredHostOperations.VkDeferredOperationKHR, pInfo : nativeptr<VkCopyAccelerationStructureInfoKHR>) = Loader<unit>.vkCopyAccelerationStructureKHR.Invoke(device, deferredOperation, pInfo)
            let vkCopyAccelerationStructureToMemoryKHR(device : VkDevice, deferredOperation : KHRDeferredHostOperations.VkDeferredOperationKHR, pInfo : nativeptr<VkCopyAccelerationStructureToMemoryInfoKHR>) = Loader<unit>.vkCopyAccelerationStructureToMemoryKHR.Invoke(device, deferredOperation, pInfo)
            let vkCopyMemoryToAccelerationStructureKHR(device : VkDevice, deferredOperation : KHRDeferredHostOperations.VkDeferredOperationKHR, pInfo : nativeptr<VkCopyMemoryToAccelerationStructureInfoKHR>) = Loader<unit>.vkCopyMemoryToAccelerationStructureKHR.Invoke(device, deferredOperation, pInfo)
            let vkWriteAccelerationStructuresPropertiesKHR(device : VkDevice, accelerationStructureCount : uint32, pAccelerationStructures : nativeptr<VkAccelerationStructureKHR>, queryType : VkQueryType, dataSize : uint64, pData : nativeint, stride : uint64) = Loader<unit>.vkWriteAccelerationStructuresPropertiesKHR.Invoke(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride)
            let vkCmdCopyAccelerationStructureKHR(commandBuffer : VkCommandBuffer, pInfo : nativeptr<VkCopyAccelerationStructureInfoKHR>) = Loader<unit>.vkCmdCopyAccelerationStructureKHR.Invoke(commandBuffer, pInfo)
            let vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer : VkCommandBuffer, pInfo : nativeptr<VkCopyAccelerationStructureToMemoryInfoKHR>) = Loader<unit>.vkCmdCopyAccelerationStructureToMemoryKHR.Invoke(commandBuffer, pInfo)
            let vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer : VkCommandBuffer, pInfo : nativeptr<VkCopyMemoryToAccelerationStructureInfoKHR>) = Loader<unit>.vkCmdCopyMemoryToAccelerationStructureKHR.Invoke(commandBuffer, pInfo)
            let vkGetAccelerationStructureDeviceAddressKHR(device : VkDevice, pInfo : nativeptr<VkAccelerationStructureDeviceAddressInfoKHR>) = Loader<unit>.vkGetAccelerationStructureDeviceAddressKHR.Invoke(device, pInfo)
            let vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer : VkCommandBuffer, accelerationStructureCount : uint32, pAccelerationStructures : nativeptr<VkAccelerationStructureKHR>, queryType : VkQueryType, queryPool : VkQueryPool, firstQuery : uint32) = Loader<unit>.vkCmdWriteAccelerationStructuresPropertiesKHR.Invoke(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery)
            let vkGetDeviceAccelerationStructureCompatibilityKHR(device : VkDevice, pVersionInfo : nativeptr<VkAccelerationStructureVersionInfoKHR>, pCompatibility : nativeptr<VkAccelerationStructureCompatibilityKHR>) = Loader<unit>.vkGetDeviceAccelerationStructureCompatibilityKHR.Invoke(device, pVersionInfo, pCompatibility)
            let vkGetAccelerationStructureBuildSizesKHR(device : VkDevice, buildType : VkAccelerationStructureBuildTypeKHR, pBuildInfo : nativeptr<VkAccelerationStructureBuildGeometryInfoKHR>, pMaxPrimitiveCounts : nativeptr<uint32>, pSizeInfo : nativeptr<VkAccelerationStructureBuildSizesInfoKHR>) = Loader<unit>.vkGetAccelerationStructureBuildSizesKHR.Invoke(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo)

        [<AutoOpen>]
        module ``KHRFormatFeatureFlags2 | Vulkan13`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkFormatFeatureFlags2 with
                      static member inline FormatFeature2AccelerationStructureVertexBufferBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x20000000


        [<AutoOpen>]
        module ``EXTDebugReport`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type EXTDebugReport.VkDebugReportObjectTypeEXT with
                      static member inline AccelerationStructureKhr = enum<EXTDebugReport.VkDebugReportObjectTypeEXT> 1000150000


    module NVFramebufferMixedSamples =
        let Type = ExtensionType.Device
        let Name = "VK_NV_framebuffer_mixed_samples"
        let Number = 153

        type VkCoverageModulationModeNV =
            | None = 0
            | Rgb = 1
            | Alpha = 2
            | Rgba = 3


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineCoverageModulationStateCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkPipelineCoverageModulationStateCreateFlagsNV
                val mutable public coverageModulationMode : VkCoverageModulationModeNV
                val mutable public coverageModulationTableEnable : VkBool32
                val mutable public coverageModulationTableCount : uint32
                val mutable public pCoverageModulationTable : nativeptr<float32>

                new(pNext: nativeint, flags: VkPipelineCoverageModulationStateCreateFlagsNV, coverageModulationMode: VkCoverageModulationModeNV, coverageModulationTableEnable: VkBool32, coverageModulationTableCount: uint32, pCoverageModulationTable: nativeptr<float32>) =
                    {
                        sType = 1000152000u
                        pNext = pNext
                        flags = flags
                        coverageModulationMode = coverageModulationMode
                        coverageModulationTableEnable = coverageModulationTableEnable
                        coverageModulationTableCount = coverageModulationTableCount
                        pCoverageModulationTable = pCoverageModulationTable
                    }

                new(flags: VkPipelineCoverageModulationStateCreateFlagsNV, coverageModulationMode: VkCoverageModulationModeNV, coverageModulationTableEnable: VkBool32, coverageModulationTableCount: uint32, pCoverageModulationTable: nativeptr<float32>) =
                    VkPipelineCoverageModulationStateCreateInfoNV(Unchecked.defaultof<nativeint>, flags, coverageModulationMode, coverageModulationTableEnable, coverageModulationTableCount, pCoverageModulationTable)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCoverageModulationStateCreateFlagsNV> && x.coverageModulationMode = Unchecked.defaultof<VkCoverageModulationModeNV> && x.coverageModulationTableEnable = Unchecked.defaultof<VkBool32> && x.coverageModulationTableCount = Unchecked.defaultof<uint32> && x.pCoverageModulationTable = Unchecked.defaultof<nativeptr<float32>>

                static member Empty =
                    VkPipelineCoverageModulationStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCoverageModulationStateCreateFlagsNV>, Unchecked.defaultof<VkCoverageModulationModeNV>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<float32>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "coverageModulationMode = %A" x.coverageModulationMode
                        sprintf "coverageModulationTableEnable = %A" x.coverageModulationTableEnable
                        sprintf "coverageModulationTableCount = %A" x.coverageModulationTableCount
                        sprintf "pCoverageModulationTable = %A" x.pCoverageModulationTable
                    ] |> sprintf "VkPipelineCoverageModulationStateCreateInfoNV { %s }"
            end



        [<AutoOpen>]
        module ``Vulkan13 | KHRDynamicRendering`` =
            type VkAttachmentSampleCountInfoNV = AMDMixedAttachmentSamples.``Vulkan13 | KHRDynamicRendering``.VkAttachmentSampleCountInfoAMD



    module NVFillRectangle =
        let Type = ExtensionType.Device
        let Name = "VK_NV_fill_rectangle"
        let Number = 154

        [<AutoOpen>]
        module EnumExtensions =
             type VkPolygonMode with
                  static member inline FillRectangleNv = enum<VkPolygonMode> 1000153000


    /// Requires Vulkan11.
    module NVShaderSmBuiltins =
        let Type = ExtensionType.Device
        let Name = "VK_NV_shader_sm_builtins"
        let Number = 155

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderSMBuiltinsFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderSMBuiltins : VkBool32

                new(pNext: nativeint, shaderSMBuiltins: VkBool32) =
                    {
                        sType = 1000154000u
                        pNext = pNext
                        shaderSMBuiltins = shaderSMBuiltins
                    }

                new(shaderSMBuiltins: VkBool32) =
                    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(Unchecked.defaultof<nativeint>, shaderSMBuiltins)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderSMBuiltins = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderSMBuiltins = %A" x.shaderSMBuiltins
                    ] |> sprintf "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderSMBuiltinsPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderSMCount : uint32
                val mutable public shaderWarpsPerSM : uint32

                new(pNext: nativeint, shaderSMCount: uint32, shaderWarpsPerSM: uint32) =
                    {
                        sType = 1000154001u
                        pNext = pNext
                        shaderSMCount = shaderSMCount
                        shaderWarpsPerSM = shaderWarpsPerSM
                    }

                new(shaderSMCount: uint32, shaderWarpsPerSM: uint32) =
                    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(Unchecked.defaultof<nativeint>, shaderSMCount, shaderWarpsPerSM)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderSMCount = Unchecked.defaultof<uint32> && x.shaderWarpsPerSM = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderSMCount = %A" x.shaderSMCount
                        sprintf "shaderWarpsPerSM = %A" x.shaderWarpsPerSM
                    ] |> sprintf "VkPhysicalDeviceShaderSMBuiltinsPropertiesNV { %s }"
            end



    module EXTPostDepthCoverage =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_post_depth_coverage"
        let Number = 156

    /// Requires (KHRMaintenance1, KHRBindMemory2, KHRGetMemoryRequirements2, KHRGetPhysicalDeviceProperties2) | Vulkan11.
    /// Promoted to Vulkan11.
    module KHRSamplerYcbcrConversion =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_sampler_ycbcr_conversion"
        let Number = 157

        type VkSamplerYcbcrConversionKHR = Vulkan11.VkSamplerYcbcrConversion
        type VkSamplerYcbcrModelConversionKHR = Vulkan11.VkSamplerYcbcrModelConversion
        type VkSamplerYcbcrRangeKHR = Vulkan11.VkSamplerYcbcrRange
        type VkChromaLocationKHR = Vulkan11.VkChromaLocation

        type VkBindImagePlaneMemoryInfoKHR = Vulkan11.VkBindImagePlaneMemoryInfo

        type VkImagePlaneMemoryRequirementsInfoKHR = Vulkan11.VkImagePlaneMemoryRequirementsInfo

        type VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = Vulkan11.VkPhysicalDeviceSamplerYcbcrConversionFeatures

        type VkSamplerYcbcrConversionCreateInfoKHR = Vulkan11.VkSamplerYcbcrConversionCreateInfo

        type VkSamplerYcbcrConversionImageFormatPropertiesKHR = Vulkan11.VkSamplerYcbcrConversionImageFormatProperties

        type VkSamplerYcbcrConversionInfoKHR = Vulkan11.VkSamplerYcbcrConversionInfo


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkChromaLocation with
                  static member inline CositedEvenKhr = enum<Vulkan11.VkChromaLocation> 0
                  static member inline MidpointKhr = enum<Vulkan11.VkChromaLocation> 1
             type VkFormat with
                  static member inline G8b8g8r8422UnormKhr = enum<VkFormat> 1000156000
                  static member inline B8g8r8g8422UnormKhr = enum<VkFormat> 1000156001
                  static member inline G8B8R83plane420UnormKhr = enum<VkFormat> 1000156002
                  static member inline G8B8r82plane420UnormKhr = enum<VkFormat> 1000156003
                  static member inline G8B8R83plane422UnormKhr = enum<VkFormat> 1000156004
                  static member inline G8B8r82plane422UnormKhr = enum<VkFormat> 1000156005
                  static member inline G8B8R83plane444UnormKhr = enum<VkFormat> 1000156006
                  static member inline R10x6UnormPack16Khr = enum<VkFormat> 1000156007
                  static member inline R10x6g10x6Unorm2pack16Khr = enum<VkFormat> 1000156008
                  static member inline R10x6g10x6b10x6a10x6Unorm4pack16Khr = enum<VkFormat> 1000156009
                  static member inline G10x6b10x6g10x6r10x6422Unorm4pack16Khr = enum<VkFormat> 1000156010
                  static member inline B10x6g10x6r10x6g10x6422Unorm4pack16Khr = enum<VkFormat> 1000156011
                  static member inline G10x6B10x6R10x63plane420Unorm3pack16Khr = enum<VkFormat> 1000156012
                  static member inline G10x6B10x6r10x62plane420Unorm3pack16Khr = enum<VkFormat> 1000156013
                  static member inline G10x6B10x6R10x63plane422Unorm3pack16Khr = enum<VkFormat> 1000156014
                  static member inline G10x6B10x6r10x62plane422Unorm3pack16Khr = enum<VkFormat> 1000156015
                  static member inline G10x6B10x6R10x63plane444Unorm3pack16Khr = enum<VkFormat> 1000156016
                  static member inline R12x4UnormPack16Khr = enum<VkFormat> 1000156017
                  static member inline R12x4g12x4Unorm2pack16Khr = enum<VkFormat> 1000156018
                  static member inline R12x4g12x4b12x4a12x4Unorm4pack16Khr = enum<VkFormat> 1000156019
                  static member inline G12x4b12x4g12x4r12x4422Unorm4pack16Khr = enum<VkFormat> 1000156020
                  static member inline B12x4g12x4r12x4g12x4422Unorm4pack16Khr = enum<VkFormat> 1000156021
                  static member inline G12x4B12x4R12x43plane420Unorm3pack16Khr = enum<VkFormat> 1000156022
                  static member inline G12x4B12x4r12x42plane420Unorm3pack16Khr = enum<VkFormat> 1000156023
                  static member inline G12x4B12x4R12x43plane422Unorm3pack16Khr = enum<VkFormat> 1000156024
                  static member inline G12x4B12x4r12x42plane422Unorm3pack16Khr = enum<VkFormat> 1000156025
                  static member inline G12x4B12x4R12x43plane444Unorm3pack16Khr = enum<VkFormat> 1000156026
                  static member inline G16b16g16r16422UnormKhr = enum<VkFormat> 1000156027
                  static member inline B16g16r16g16422UnormKhr = enum<VkFormat> 1000156028
                  static member inline G16B16R163plane420UnormKhr = enum<VkFormat> 1000156029
                  static member inline G16B16r162plane420UnormKhr = enum<VkFormat> 1000156030
                  static member inline G16B16R163plane422UnormKhr = enum<VkFormat> 1000156031
                  static member inline G16B16r162plane422UnormKhr = enum<VkFormat> 1000156032
                  static member inline G16B16R163plane444UnormKhr = enum<VkFormat> 1000156033
             type VkFormatFeatureFlags with
                  static member inline MidpointChromaSamplesBitKhr = enum<VkFormatFeatureFlags> 0x00020000
                  static member inline SampledImageYcbcrConversionLinearFilterBitKhr = enum<VkFormatFeatureFlags> 0x00040000
                  static member inline SampledImageYcbcrConversionSeparateReconstructionFilterBitKhr = enum<VkFormatFeatureFlags> 0x00080000
                  static member inline SampledImageYcbcrConversionChromaReconstructionExplicitBitKhr = enum<VkFormatFeatureFlags> 0x00100000
                  static member inline SampledImageYcbcrConversionChromaReconstructionExplicitForceableBitKhr = enum<VkFormatFeatureFlags> 0x00200000
                  static member inline DisjointBitKhr = enum<VkFormatFeatureFlags> 0x00400000
                  static member inline CositedChromaSamplesBitKhr = enum<VkFormatFeatureFlags> 0x00800000
             type VkImageAspectFlags with
                  static member inline Plane0BitKhr = enum<VkImageAspectFlags> 0x00000010
                  static member inline Plane1BitKhr = enum<VkImageAspectFlags> 0x00000020
                  static member inline Plane2BitKhr = enum<VkImageAspectFlags> 0x00000040
             type VkImageCreateFlags with
                  static member inline DisjointBitKhr = enum<VkImageCreateFlags> 0x00000200
             type VkObjectType with
                  static member inline SamplerYcbcrConversionKhr = enum<VkObjectType> 1000156000
             type Vulkan11.VkSamplerYcbcrModelConversion with
                  static member inline RgbIdentityKhr = enum<Vulkan11.VkSamplerYcbcrModelConversion> 0
                  static member inline YcbcrIdentityKhr = enum<Vulkan11.VkSamplerYcbcrModelConversion> 1
                  static member inline Ycbcr709Khr = enum<Vulkan11.VkSamplerYcbcrModelConversion> 2
                  static member inline Ycbcr601Khr = enum<Vulkan11.VkSamplerYcbcrModelConversion> 3
                  static member inline Ycbcr2020Khr = enum<Vulkan11.VkSamplerYcbcrModelConversion> 4
             type Vulkan11.VkSamplerYcbcrRange with
                  static member inline ItuFullKhr = enum<Vulkan11.VkSamplerYcbcrRange> 0
                  static member inline ItuNarrowKhr = enum<Vulkan11.VkSamplerYcbcrRange> 1

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateSamplerYcbcrConversionKHRDel = delegate of VkDevice * nativeptr<Vulkan11.VkSamplerYcbcrConversionCreateInfo> * nativeptr<VkAllocationCallbacks> * nativeptr<Vulkan11.VkSamplerYcbcrConversion> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroySamplerYcbcrConversionKHRDel = delegate of VkDevice * Vulkan11.VkSamplerYcbcrConversion * nativeptr<VkAllocationCallbacks> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRSamplerYcbcrConversion")
                static let s_vkCreateSamplerYcbcrConversionKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateSamplerYcbcrConversionKHRDel> "vkCreateSamplerYcbcrConversionKHR"
                static let s_vkDestroySamplerYcbcrConversionKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroySamplerYcbcrConversionKHRDel> "vkDestroySamplerYcbcrConversionKHR"
                static do Report.End(3) |> ignore
                static member vkCreateSamplerYcbcrConversionKHR = s_vkCreateSamplerYcbcrConversionKHRDel
                static member vkDestroySamplerYcbcrConversionKHR = s_vkDestroySamplerYcbcrConversionKHRDel
            let vkCreateSamplerYcbcrConversionKHR(device : VkDevice, pCreateInfo : nativeptr<Vulkan11.VkSamplerYcbcrConversionCreateInfo>, pAllocator : nativeptr<VkAllocationCallbacks>, pYcbcrConversion : nativeptr<Vulkan11.VkSamplerYcbcrConversion>) = Loader<unit>.vkCreateSamplerYcbcrConversionKHR.Invoke(device, pCreateInfo, pAllocator, pYcbcrConversion)
            let vkDestroySamplerYcbcrConversionKHR(device : VkDevice, ycbcrConversion : Vulkan11.VkSamplerYcbcrConversion, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroySamplerYcbcrConversionKHR.Invoke(device, ycbcrConversion, pAllocator)

        [<AutoOpen>]
        module ``EXTDebugReport`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type EXTDebugReport.VkDebugReportObjectTypeEXT with
                      static member inline SamplerYcbcrConversion = enum<EXTDebugReport.VkDebugReportObjectTypeEXT> 1000156000
                      static member inline SamplerYcbcrConversionKhr = enum<EXTDebugReport.VkDebugReportObjectTypeEXT> 1000156000


    /// Promoted to Vulkan11.
    module KHRBindMemory2 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_bind_memory2"
        let Number = 158

        type VkBindBufferMemoryInfoKHR = Vulkan11.VkBindBufferMemoryInfo

        type VkBindImageMemoryInfoKHR = Vulkan11.VkBindImageMemoryInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageCreateFlags with
                  static member inline AliasBitKhr = enum<VkImageCreateFlags> 0x00000400

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkBindBufferMemory2KHRDel = delegate of VkDevice * uint32 * nativeptr<Vulkan11.VkBindBufferMemoryInfo> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkBindImageMemory2KHRDel = delegate of VkDevice * uint32 * nativeptr<Vulkan11.VkBindImageMemoryInfo> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRBindMemory2")
                static let s_vkBindBufferMemory2KHRDel = VkRaw.vkImportInstanceDelegate<VkBindBufferMemory2KHRDel> "vkBindBufferMemory2KHR"
                static let s_vkBindImageMemory2KHRDel = VkRaw.vkImportInstanceDelegate<VkBindImageMemory2KHRDel> "vkBindImageMemory2KHR"
                static do Report.End(3) |> ignore
                static member vkBindBufferMemory2KHR = s_vkBindBufferMemory2KHRDel
                static member vkBindImageMemory2KHR = s_vkBindImageMemory2KHRDel
            let vkBindBufferMemory2KHR(device : VkDevice, bindInfoCount : uint32, pBindInfos : nativeptr<Vulkan11.VkBindBufferMemoryInfo>) = Loader<unit>.vkBindBufferMemory2KHR.Invoke(device, bindInfoCount, pBindInfos)
            let vkBindImageMemory2KHR(device : VkDevice, bindInfoCount : uint32, pBindInfos : nativeptr<Vulkan11.VkBindImageMemoryInfo>) = Loader<unit>.vkBindImageMemory2KHR.Invoke(device, bindInfoCount, pBindInfos)

    /// Requires (((KHRBindMemory2, KHRGetPhysicalDeviceProperties2, KHRSamplerYcbcrConversion) | Vulkan11), KHRImageFormatList) | Vulkan12.
    module EXTImageDrmFormatModifier =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_image_drm_format_modifier"
        let Number = 159

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDrmFormatModifierPropertiesEXT =
            struct
                val mutable public drmFormatModifier : uint64
                val mutable public drmFormatModifierPlaneCount : uint32
                val mutable public drmFormatModifierTilingFeatures : VkFormatFeatureFlags

                new(drmFormatModifier: uint64, drmFormatModifierPlaneCount: uint32, drmFormatModifierTilingFeatures: VkFormatFeatureFlags) =
                    {
                        drmFormatModifier = drmFormatModifier
                        drmFormatModifierPlaneCount = drmFormatModifierPlaneCount
                        drmFormatModifierTilingFeatures = drmFormatModifierTilingFeatures
                    }

                member x.IsEmpty =
                    x.drmFormatModifier = Unchecked.defaultof<uint64> && x.drmFormatModifierPlaneCount = Unchecked.defaultof<uint32> && x.drmFormatModifierTilingFeatures = Unchecked.defaultof<VkFormatFeatureFlags>

                static member Empty =
                    VkDrmFormatModifierPropertiesEXT(Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkFormatFeatureFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "drmFormatModifier = %A" x.drmFormatModifier
                        sprintf "drmFormatModifierPlaneCount = %A" x.drmFormatModifierPlaneCount
                        sprintf "drmFormatModifierTilingFeatures = %A" x.drmFormatModifierTilingFeatures
                    ] |> sprintf "VkDrmFormatModifierPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDrmFormatModifierPropertiesListEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public drmFormatModifierCount : uint32
                val mutable public pDrmFormatModifierProperties : nativeptr<VkDrmFormatModifierPropertiesEXT>

                new(pNext: nativeint, drmFormatModifierCount: uint32, pDrmFormatModifierProperties: nativeptr<VkDrmFormatModifierPropertiesEXT>) =
                    {
                        sType = 1000158000u
                        pNext = pNext
                        drmFormatModifierCount = drmFormatModifierCount
                        pDrmFormatModifierProperties = pDrmFormatModifierProperties
                    }

                new(drmFormatModifierCount: uint32, pDrmFormatModifierProperties: nativeptr<VkDrmFormatModifierPropertiesEXT>) =
                    VkDrmFormatModifierPropertiesListEXT(Unchecked.defaultof<nativeint>, drmFormatModifierCount, pDrmFormatModifierProperties)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.drmFormatModifierCount = Unchecked.defaultof<uint32> && x.pDrmFormatModifierProperties = Unchecked.defaultof<nativeptr<VkDrmFormatModifierPropertiesEXT>>

                static member Empty =
                    VkDrmFormatModifierPropertiesListEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDrmFormatModifierPropertiesEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "drmFormatModifierCount = %A" x.drmFormatModifierCount
                        sprintf "pDrmFormatModifierProperties = %A" x.pDrmFormatModifierProperties
                    ] |> sprintf "VkDrmFormatModifierPropertiesListEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageDrmFormatModifierExplicitCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public drmFormatModifier : uint64
                val mutable public drmFormatModifierPlaneCount : uint32
                val mutable public pPlaneLayouts : nativeptr<VkSubresourceLayout>

                new(pNext: nativeint, drmFormatModifier: uint64, drmFormatModifierPlaneCount: uint32, pPlaneLayouts: nativeptr<VkSubresourceLayout>) =
                    {
                        sType = 1000158004u
                        pNext = pNext
                        drmFormatModifier = drmFormatModifier
                        drmFormatModifierPlaneCount = drmFormatModifierPlaneCount
                        pPlaneLayouts = pPlaneLayouts
                    }

                new(drmFormatModifier: uint64, drmFormatModifierPlaneCount: uint32, pPlaneLayouts: nativeptr<VkSubresourceLayout>) =
                    VkImageDrmFormatModifierExplicitCreateInfoEXT(Unchecked.defaultof<nativeint>, drmFormatModifier, drmFormatModifierPlaneCount, pPlaneLayouts)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.drmFormatModifier = Unchecked.defaultof<uint64> && x.drmFormatModifierPlaneCount = Unchecked.defaultof<uint32> && x.pPlaneLayouts = Unchecked.defaultof<nativeptr<VkSubresourceLayout>>

                static member Empty =
                    VkImageDrmFormatModifierExplicitCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSubresourceLayout>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "drmFormatModifier = %A" x.drmFormatModifier
                        sprintf "drmFormatModifierPlaneCount = %A" x.drmFormatModifierPlaneCount
                        sprintf "pPlaneLayouts = %A" x.pPlaneLayouts
                    ] |> sprintf "VkImageDrmFormatModifierExplicitCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageDrmFormatModifierListCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public drmFormatModifierCount : uint32
                val mutable public pDrmFormatModifiers : nativeptr<uint64>

                new(pNext: nativeint, drmFormatModifierCount: uint32, pDrmFormatModifiers: nativeptr<uint64>) =
                    {
                        sType = 1000158003u
                        pNext = pNext
                        drmFormatModifierCount = drmFormatModifierCount
                        pDrmFormatModifiers = pDrmFormatModifiers
                    }

                new(drmFormatModifierCount: uint32, pDrmFormatModifiers: nativeptr<uint64>) =
                    VkImageDrmFormatModifierListCreateInfoEXT(Unchecked.defaultof<nativeint>, drmFormatModifierCount, pDrmFormatModifiers)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.drmFormatModifierCount = Unchecked.defaultof<uint32> && x.pDrmFormatModifiers = Unchecked.defaultof<nativeptr<uint64>>

                static member Empty =
                    VkImageDrmFormatModifierListCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint64>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "drmFormatModifierCount = %A" x.drmFormatModifierCount
                        sprintf "pDrmFormatModifiers = %A" x.pDrmFormatModifiers
                    ] |> sprintf "VkImageDrmFormatModifierListCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageDrmFormatModifierPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public drmFormatModifier : uint64

                new(pNext: nativeint, drmFormatModifier: uint64) =
                    {
                        sType = 1000158005u
                        pNext = pNext
                        drmFormatModifier = drmFormatModifier
                    }

                new(drmFormatModifier: uint64) =
                    VkImageDrmFormatModifierPropertiesEXT(Unchecked.defaultof<nativeint>, drmFormatModifier)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.drmFormatModifier = Unchecked.defaultof<uint64>

                static member Empty =
                    VkImageDrmFormatModifierPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "drmFormatModifier = %A" x.drmFormatModifier
                    ] |> sprintf "VkImageDrmFormatModifierPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImageDrmFormatModifierInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public drmFormatModifier : uint64
                val mutable public sharingMode : VkSharingMode
                val mutable public queueFamilyIndexCount : uint32
                val mutable public pQueueFamilyIndices : nativeptr<uint32>

                new(pNext: nativeint, drmFormatModifier: uint64, sharingMode: VkSharingMode, queueFamilyIndexCount: uint32, pQueueFamilyIndices: nativeptr<uint32>) =
                    {
                        sType = 1000158002u
                        pNext = pNext
                        drmFormatModifier = drmFormatModifier
                        sharingMode = sharingMode
                        queueFamilyIndexCount = queueFamilyIndexCount
                        pQueueFamilyIndices = pQueueFamilyIndices
                    }

                new(drmFormatModifier: uint64, sharingMode: VkSharingMode, queueFamilyIndexCount: uint32, pQueueFamilyIndices: nativeptr<uint32>) =
                    VkPhysicalDeviceImageDrmFormatModifierInfoEXT(Unchecked.defaultof<nativeint>, drmFormatModifier, sharingMode, queueFamilyIndexCount, pQueueFamilyIndices)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.drmFormatModifier = Unchecked.defaultof<uint64> && x.sharingMode = Unchecked.defaultof<VkSharingMode> && x.queueFamilyIndexCount = Unchecked.defaultof<uint32> && x.pQueueFamilyIndices = Unchecked.defaultof<nativeptr<uint32>>

                static member Empty =
                    VkPhysicalDeviceImageDrmFormatModifierInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkSharingMode>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "drmFormatModifier = %A" x.drmFormatModifier
                        sprintf "sharingMode = %A" x.sharingMode
                        sprintf "queueFamilyIndexCount = %A" x.queueFamilyIndexCount
                        sprintf "pQueueFamilyIndices = %A" x.pQueueFamilyIndices
                    ] |> sprintf "VkPhysicalDeviceImageDrmFormatModifierInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageAspectFlags with
                  static member inline MemoryPlane0BitExt = enum<VkImageAspectFlags> 0x00000080
                  static member inline MemoryPlane1BitExt = enum<VkImageAspectFlags> 0x00000100
                  static member inline MemoryPlane2BitExt = enum<VkImageAspectFlags> 0x00000200
                  static member inline MemoryPlane3BitExt = enum<VkImageAspectFlags> 0x00000400
             type VkImageTiling with
                  static member inline DrmFormatModifierExt = enum<VkImageTiling> 1000158000
             type VkResult with
                  static member inline ErrorInvalidDrmFormatModifierPlaneLayoutExt = enum<VkResult> -1000158000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetImageDrmFormatModifierPropertiesEXTDel = delegate of VkDevice * VkImage * nativeptr<VkImageDrmFormatModifierPropertiesEXT> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTImageDrmFormatModifier")
                static let s_vkGetImageDrmFormatModifierPropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkGetImageDrmFormatModifierPropertiesEXTDel> "vkGetImageDrmFormatModifierPropertiesEXT"
                static do Report.End(3) |> ignore
                static member vkGetImageDrmFormatModifierPropertiesEXT = s_vkGetImageDrmFormatModifierPropertiesEXTDel
            let vkGetImageDrmFormatModifierPropertiesEXT(device : VkDevice, image : VkImage, pProperties : nativeptr<VkImageDrmFormatModifierPropertiesEXT>) = Loader<unit>.vkGetImageDrmFormatModifierPropertiesEXT.Invoke(device, image, pProperties)

        [<AutoOpen>]
        module ``KHRFormatFeatureFlags2 | Vulkan13`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkDrmFormatModifierProperties2EXT =
                struct
                    val mutable public drmFormatModifier : uint64
                    val mutable public drmFormatModifierPlaneCount : uint32
                    val mutable public drmFormatModifierTilingFeatures : Vulkan13.VkFormatFeatureFlags2

                    new(drmFormatModifier: uint64, drmFormatModifierPlaneCount: uint32, drmFormatModifierTilingFeatures: Vulkan13.VkFormatFeatureFlags2) =
                        {
                            drmFormatModifier = drmFormatModifier
                            drmFormatModifierPlaneCount = drmFormatModifierPlaneCount
                            drmFormatModifierTilingFeatures = drmFormatModifierTilingFeatures
                        }

                    member x.IsEmpty =
                        x.drmFormatModifier = Unchecked.defaultof<uint64> && x.drmFormatModifierPlaneCount = Unchecked.defaultof<uint32> && x.drmFormatModifierTilingFeatures = Unchecked.defaultof<Vulkan13.VkFormatFeatureFlags2>

                    static member Empty =
                        VkDrmFormatModifierProperties2EXT(Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<Vulkan13.VkFormatFeatureFlags2>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "drmFormatModifier = %A" x.drmFormatModifier
                            sprintf "drmFormatModifierPlaneCount = %A" x.drmFormatModifierPlaneCount
                            sprintf "drmFormatModifierTilingFeatures = %A" x.drmFormatModifierTilingFeatures
                        ] |> sprintf "VkDrmFormatModifierProperties2EXT { %s }"
                end

            [<StructLayout(LayoutKind.Sequential)>]
            type VkDrmFormatModifierPropertiesList2EXT =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public drmFormatModifierCount : uint32
                    val mutable public pDrmFormatModifierProperties : nativeptr<VkDrmFormatModifierProperties2EXT>

                    new(pNext: nativeint, drmFormatModifierCount: uint32, pDrmFormatModifierProperties: nativeptr<VkDrmFormatModifierProperties2EXT>) =
                        {
                            sType = 1000158006u
                            pNext = pNext
                            drmFormatModifierCount = drmFormatModifierCount
                            pDrmFormatModifierProperties = pDrmFormatModifierProperties
                        }

                    new(drmFormatModifierCount: uint32, pDrmFormatModifierProperties: nativeptr<VkDrmFormatModifierProperties2EXT>) =
                        VkDrmFormatModifierPropertiesList2EXT(Unchecked.defaultof<nativeint>, drmFormatModifierCount, pDrmFormatModifierProperties)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.drmFormatModifierCount = Unchecked.defaultof<uint32> && x.pDrmFormatModifierProperties = Unchecked.defaultof<nativeptr<VkDrmFormatModifierProperties2EXT>>

                    static member Empty =
                        VkDrmFormatModifierPropertiesList2EXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDrmFormatModifierProperties2EXT>>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "drmFormatModifierCount = %A" x.drmFormatModifierCount
                            sprintf "pDrmFormatModifierProperties = %A" x.pDrmFormatModifierProperties
                        ] |> sprintf "VkDrmFormatModifierPropertiesList2EXT { %s }"
                end



    module EXTValidationCache =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_validation_cache"
        let Number = 161


        [<StructLayout(LayoutKind.Sequential)>]
        type VkValidationCacheEXT =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkValidationCacheEXT(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        type VkValidationCacheHeaderVersionEXT =
            | One = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkShaderModuleValidationCacheCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public validationCache : VkValidationCacheEXT

                new(pNext: nativeint, validationCache: VkValidationCacheEXT) =
                    {
                        sType = 1000160001u
                        pNext = pNext
                        validationCache = validationCache
                    }

                new(validationCache: VkValidationCacheEXT) =
                    VkShaderModuleValidationCacheCreateInfoEXT(Unchecked.defaultof<nativeint>, validationCache)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.validationCache = Unchecked.defaultof<VkValidationCacheEXT>

                static member Empty =
                    VkShaderModuleValidationCacheCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkValidationCacheEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "validationCache = %A" x.validationCache
                    ] |> sprintf "VkShaderModuleValidationCacheCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkValidationCacheCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkValidationCacheCreateFlagsEXT
                val mutable public initialDataSize : uint64
                val mutable public pInitialData : nativeint

                new(pNext: nativeint, flags: VkValidationCacheCreateFlagsEXT, initialDataSize: uint64, pInitialData: nativeint) =
                    {
                        sType = 1000160000u
                        pNext = pNext
                        flags = flags
                        initialDataSize = initialDataSize
                        pInitialData = pInitialData
                    }

                new(flags: VkValidationCacheCreateFlagsEXT, initialDataSize: uint64, pInitialData: nativeint) =
                    VkValidationCacheCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, initialDataSize, pInitialData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkValidationCacheCreateFlagsEXT> && x.initialDataSize = Unchecked.defaultof<uint64> && x.pInitialData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkValidationCacheCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkValidationCacheCreateFlagsEXT>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "initialDataSize = %A" x.initialDataSize
                        sprintf "pInitialData = %A" x.pInitialData
                    ] |> sprintf "VkValidationCacheCreateInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  static member inline ValidationCacheExt = enum<VkObjectType> 1000160000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateValidationCacheEXTDel = delegate of VkDevice * nativeptr<VkValidationCacheCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkValidationCacheEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyValidationCacheEXTDel = delegate of VkDevice * VkValidationCacheEXT * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkMergeValidationCachesEXTDel = delegate of VkDevice * VkValidationCacheEXT * uint32 * nativeptr<VkValidationCacheEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetValidationCacheDataEXTDel = delegate of VkDevice * VkValidationCacheEXT * nativeptr<uint64> * nativeint -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTValidationCache")
                static let s_vkCreateValidationCacheEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateValidationCacheEXTDel> "vkCreateValidationCacheEXT"
                static let s_vkDestroyValidationCacheEXTDel = VkRaw.vkImportInstanceDelegate<VkDestroyValidationCacheEXTDel> "vkDestroyValidationCacheEXT"
                static let s_vkMergeValidationCachesEXTDel = VkRaw.vkImportInstanceDelegate<VkMergeValidationCachesEXTDel> "vkMergeValidationCachesEXT"
                static let s_vkGetValidationCacheDataEXTDel = VkRaw.vkImportInstanceDelegate<VkGetValidationCacheDataEXTDel> "vkGetValidationCacheDataEXT"
                static do Report.End(3) |> ignore
                static member vkCreateValidationCacheEXT = s_vkCreateValidationCacheEXTDel
                static member vkDestroyValidationCacheEXT = s_vkDestroyValidationCacheEXTDel
                static member vkMergeValidationCachesEXT = s_vkMergeValidationCachesEXTDel
                static member vkGetValidationCacheDataEXT = s_vkGetValidationCacheDataEXTDel
            let vkCreateValidationCacheEXT(device : VkDevice, pCreateInfo : nativeptr<VkValidationCacheCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pValidationCache : nativeptr<VkValidationCacheEXT>) = Loader<unit>.vkCreateValidationCacheEXT.Invoke(device, pCreateInfo, pAllocator, pValidationCache)
            let vkDestroyValidationCacheEXT(device : VkDevice, validationCache : VkValidationCacheEXT, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyValidationCacheEXT.Invoke(device, validationCache, pAllocator)
            let vkMergeValidationCachesEXT(device : VkDevice, dstCache : VkValidationCacheEXT, srcCacheCount : uint32, pSrcCaches : nativeptr<VkValidationCacheEXT>) = Loader<unit>.vkMergeValidationCachesEXT.Invoke(device, dstCache, srcCacheCount, pSrcCaches)
            let vkGetValidationCacheDataEXT(device : VkDevice, validationCache : VkValidationCacheEXT, pDataSize : nativeptr<uint64>, pData : nativeint) = Loader<unit>.vkGetValidationCacheDataEXT.Invoke(device, validationCache, pDataSize, pData)

    /// Requires (KHRGetPhysicalDeviceProperties2, KHRMaintenance3) | Vulkan11.
    /// Promoted to Vulkan12.
    module EXTDescriptorIndexing =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_descriptor_indexing"
        let Number = 162

        type VkDescriptorBindingFlagsEXT = Vulkan12.VkDescriptorBindingFlags

        type VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = Vulkan12.VkDescriptorSetLayoutBindingFlagsCreateInfo

        type VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = Vulkan12.VkDescriptorSetVariableDescriptorCountAllocateInfo

        type VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = Vulkan12.VkDescriptorSetVariableDescriptorCountLayoutSupport

        type VkPhysicalDeviceDescriptorIndexingFeaturesEXT = Vulkan12.VkPhysicalDeviceDescriptorIndexingFeatures

        type VkPhysicalDeviceDescriptorIndexingPropertiesEXT = Vulkan12.VkPhysicalDeviceDescriptorIndexingProperties


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan12.VkDescriptorBindingFlags with
                  static member inline UpdateAfterBindBitExt = enum<Vulkan12.VkDescriptorBindingFlags> 0x00000001
                  static member inline UpdateUnusedWhilePendingBitExt = enum<Vulkan12.VkDescriptorBindingFlags> 0x00000002
                  static member inline PartiallyBoundBitExt = enum<Vulkan12.VkDescriptorBindingFlags> 0x00000004
                  static member inline VariableDescriptorCountBitExt = enum<Vulkan12.VkDescriptorBindingFlags> 0x00000008
             type VkDescriptorPoolCreateFlags with
                  static member inline UpdateAfterBindBitExt = enum<VkDescriptorPoolCreateFlags> 0x00000002
             type VkDescriptorSetLayoutCreateFlags with
                  static member inline UpdateAfterBindPoolBitExt = enum<VkDescriptorSetLayoutCreateFlags> 0x00000002
             type VkResult with
                  static member inline ErrorFragmentationExt = enum<VkResult> 1000161000


    /// Promoted to Vulkan12.
    module EXTShaderViewportIndexLayer =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_shader_viewport_index_layer"
        let Number = 163

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module KHRPortabilitySubset =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_portability_subset"
        let Number = 164

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePortabilitySubsetFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public constantAlphaColorBlendFactors : VkBool32
                val mutable public events : VkBool32
                val mutable public imageViewFormatReinterpretation : VkBool32
                val mutable public imageViewFormatSwizzle : VkBool32
                val mutable public imageView2DOn3DImage : VkBool32
                val mutable public multisampleArrayImage : VkBool32
                val mutable public mutableComparisonSamplers : VkBool32
                val mutable public pointPolygons : VkBool32
                val mutable public samplerMipLodBias : VkBool32
                val mutable public separateStencilMaskRef : VkBool32
                val mutable public shaderSampleRateInterpolationFunctions : VkBool32
                val mutable public tessellationIsolines : VkBool32
                val mutable public tessellationPointMode : VkBool32
                val mutable public triangleFans : VkBool32
                val mutable public vertexAttributeAccessBeyondStride : VkBool32

                new(pNext: nativeint, constantAlphaColorBlendFactors: VkBool32, events: VkBool32, imageViewFormatReinterpretation: VkBool32, imageViewFormatSwizzle: VkBool32, imageView2DOn3DImage: VkBool32, multisampleArrayImage: VkBool32, mutableComparisonSamplers: VkBool32, pointPolygons: VkBool32, samplerMipLodBias: VkBool32, separateStencilMaskRef: VkBool32, shaderSampleRateInterpolationFunctions: VkBool32, tessellationIsolines: VkBool32, tessellationPointMode: VkBool32, triangleFans: VkBool32, vertexAttributeAccessBeyondStride: VkBool32) =
                    {
                        sType = 1000163000u
                        pNext = pNext
                        constantAlphaColorBlendFactors = constantAlphaColorBlendFactors
                        events = events
                        imageViewFormatReinterpretation = imageViewFormatReinterpretation
                        imageViewFormatSwizzle = imageViewFormatSwizzle
                        imageView2DOn3DImage = imageView2DOn3DImage
                        multisampleArrayImage = multisampleArrayImage
                        mutableComparisonSamplers = mutableComparisonSamplers
                        pointPolygons = pointPolygons
                        samplerMipLodBias = samplerMipLodBias
                        separateStencilMaskRef = separateStencilMaskRef
                        shaderSampleRateInterpolationFunctions = shaderSampleRateInterpolationFunctions
                        tessellationIsolines = tessellationIsolines
                        tessellationPointMode = tessellationPointMode
                        triangleFans = triangleFans
                        vertexAttributeAccessBeyondStride = vertexAttributeAccessBeyondStride
                    }

                new(constantAlphaColorBlendFactors: VkBool32, events: VkBool32, imageViewFormatReinterpretation: VkBool32, imageViewFormatSwizzle: VkBool32, imageView2DOn3DImage: VkBool32, multisampleArrayImage: VkBool32, mutableComparisonSamplers: VkBool32, pointPolygons: VkBool32, samplerMipLodBias: VkBool32, separateStencilMaskRef: VkBool32, shaderSampleRateInterpolationFunctions: VkBool32, tessellationIsolines: VkBool32, tessellationPointMode: VkBool32, triangleFans: VkBool32, vertexAttributeAccessBeyondStride: VkBool32) =
                    VkPhysicalDevicePortabilitySubsetFeaturesKHR(Unchecked.defaultof<nativeint>, constantAlphaColorBlendFactors, events, imageViewFormatReinterpretation, imageViewFormatSwizzle, imageView2DOn3DImage, multisampleArrayImage, mutableComparisonSamplers, pointPolygons, samplerMipLodBias, separateStencilMaskRef, shaderSampleRateInterpolationFunctions, tessellationIsolines, tessellationPointMode, triangleFans, vertexAttributeAccessBeyondStride)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.constantAlphaColorBlendFactors = Unchecked.defaultof<VkBool32> && x.events = Unchecked.defaultof<VkBool32> && x.imageViewFormatReinterpretation = Unchecked.defaultof<VkBool32> && x.imageViewFormatSwizzle = Unchecked.defaultof<VkBool32> && x.imageView2DOn3DImage = Unchecked.defaultof<VkBool32> && x.multisampleArrayImage = Unchecked.defaultof<VkBool32> && x.mutableComparisonSamplers = Unchecked.defaultof<VkBool32> && x.pointPolygons = Unchecked.defaultof<VkBool32> && x.samplerMipLodBias = Unchecked.defaultof<VkBool32> && x.separateStencilMaskRef = Unchecked.defaultof<VkBool32> && x.shaderSampleRateInterpolationFunctions = Unchecked.defaultof<VkBool32> && x.tessellationIsolines = Unchecked.defaultof<VkBool32> && x.tessellationPointMode = Unchecked.defaultof<VkBool32> && x.triangleFans = Unchecked.defaultof<VkBool32> && x.vertexAttributeAccessBeyondStride = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePortabilitySubsetFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "constantAlphaColorBlendFactors = %A" x.constantAlphaColorBlendFactors
                        sprintf "events = %A" x.events
                        sprintf "imageViewFormatReinterpretation = %A" x.imageViewFormatReinterpretation
                        sprintf "imageViewFormatSwizzle = %A" x.imageViewFormatSwizzle
                        sprintf "imageView2DOn3DImage = %A" x.imageView2DOn3DImage
                        sprintf "multisampleArrayImage = %A" x.multisampleArrayImage
                        sprintf "mutableComparisonSamplers = %A" x.mutableComparisonSamplers
                        sprintf "pointPolygons = %A" x.pointPolygons
                        sprintf "samplerMipLodBias = %A" x.samplerMipLodBias
                        sprintf "separateStencilMaskRef = %A" x.separateStencilMaskRef
                        sprintf "shaderSampleRateInterpolationFunctions = %A" x.shaderSampleRateInterpolationFunctions
                        sprintf "tessellationIsolines = %A" x.tessellationIsolines
                        sprintf "tessellationPointMode = %A" x.tessellationPointMode
                        sprintf "triangleFans = %A" x.triangleFans
                        sprintf "vertexAttributeAccessBeyondStride = %A" x.vertexAttributeAccessBeyondStride
                    ] |> sprintf "VkPhysicalDevicePortabilitySubsetFeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePortabilitySubsetPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public minVertexInputBindingStrideAlignment : uint32

                new(pNext: nativeint, minVertexInputBindingStrideAlignment: uint32) =
                    {
                        sType = 1000163001u
                        pNext = pNext
                        minVertexInputBindingStrideAlignment = minVertexInputBindingStrideAlignment
                    }

                new(minVertexInputBindingStrideAlignment: uint32) =
                    VkPhysicalDevicePortabilitySubsetPropertiesKHR(Unchecked.defaultof<nativeint>, minVertexInputBindingStrideAlignment)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.minVertexInputBindingStrideAlignment = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDevicePortabilitySubsetPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "minVertexInputBindingStrideAlignment = %A" x.minVertexInputBindingStrideAlignment
                    ] |> sprintf "VkPhysicalDevicePortabilitySubsetPropertiesKHR { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module NVShadingRateImage =
        let Type = ExtensionType.Device
        let Name = "VK_NV_shading_rate_image"
        let Number = 165

        type VkShadingRatePaletteEntryNV =
            | NoInvocations = 0
            | D16InvocationsPerPixel = 1
            | D8InvocationsPerPixel = 2
            | D4InvocationsPerPixel = 3
            | D2InvocationsPerPixel = 4
            | D1InvocationPerPixel = 5
            | D1InvocationPer2x1Pixels = 6
            | D1InvocationPer1x2Pixels = 7
            | D1InvocationPer2x2Pixels = 8
            | D1InvocationPer4x2Pixels = 9
            | D1InvocationPer2x4Pixels = 10
            | D1InvocationPer4x4Pixels = 11

        type VkCoarseSampleOrderTypeNV =
            | Default = 0
            | Custom = 1
            | PixelMajor = 2
            | SampleMajor = 3


        [<StructLayout(LayoutKind.Sequential)>]
        type VkCoarseSampleLocationNV =
            struct
                val mutable public pixelX : uint32
                val mutable public pixelY : uint32
                val mutable public sample : uint32

                new(pixelX: uint32, pixelY: uint32, sample: uint32) =
                    {
                        pixelX = pixelX
                        pixelY = pixelY
                        sample = sample
                    }

                member x.IsEmpty =
                    x.pixelX = Unchecked.defaultof<uint32> && x.pixelY = Unchecked.defaultof<uint32> && x.sample = Unchecked.defaultof<uint32>

                static member Empty =
                    VkCoarseSampleLocationNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pixelX = %A" x.pixelX
                        sprintf "pixelY = %A" x.pixelY
                        sprintf "sample = %A" x.sample
                    ] |> sprintf "VkCoarseSampleLocationNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCoarseSampleOrderCustomNV =
            struct
                val mutable public shadingRate : VkShadingRatePaletteEntryNV
                val mutable public sampleCount : uint32
                val mutable public sampleLocationCount : uint32
                val mutable public pSampleLocations : nativeptr<VkCoarseSampleLocationNV>

                new(shadingRate: VkShadingRatePaletteEntryNV, sampleCount: uint32, sampleLocationCount: uint32, pSampleLocations: nativeptr<VkCoarseSampleLocationNV>) =
                    {
                        shadingRate = shadingRate
                        sampleCount = sampleCount
                        sampleLocationCount = sampleLocationCount
                        pSampleLocations = pSampleLocations
                    }

                member x.IsEmpty =
                    x.shadingRate = Unchecked.defaultof<VkShadingRatePaletteEntryNV> && x.sampleCount = Unchecked.defaultof<uint32> && x.sampleLocationCount = Unchecked.defaultof<uint32> && x.pSampleLocations = Unchecked.defaultof<nativeptr<VkCoarseSampleLocationNV>>

                static member Empty =
                    VkCoarseSampleOrderCustomNV(Unchecked.defaultof<VkShadingRatePaletteEntryNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkCoarseSampleLocationNV>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "shadingRate = %A" x.shadingRate
                        sprintf "sampleCount = %A" x.sampleCount
                        sprintf "sampleLocationCount = %A" x.sampleLocationCount
                        sprintf "pSampleLocations = %A" x.pSampleLocations
                    ] |> sprintf "VkCoarseSampleOrderCustomNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShadingRateImageFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shadingRateImage : VkBool32
                val mutable public shadingRateCoarseSampleOrder : VkBool32

                new(pNext: nativeint, shadingRateImage: VkBool32, shadingRateCoarseSampleOrder: VkBool32) =
                    {
                        sType = 1000164001u
                        pNext = pNext
                        shadingRateImage = shadingRateImage
                        shadingRateCoarseSampleOrder = shadingRateCoarseSampleOrder
                    }

                new(shadingRateImage: VkBool32, shadingRateCoarseSampleOrder: VkBool32) =
                    VkPhysicalDeviceShadingRateImageFeaturesNV(Unchecked.defaultof<nativeint>, shadingRateImage, shadingRateCoarseSampleOrder)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shadingRateImage = Unchecked.defaultof<VkBool32> && x.shadingRateCoarseSampleOrder = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShadingRateImageFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shadingRateImage = %A" x.shadingRateImage
                        sprintf "shadingRateCoarseSampleOrder = %A" x.shadingRateCoarseSampleOrder
                    ] |> sprintf "VkPhysicalDeviceShadingRateImageFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShadingRateImagePropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shadingRateTexelSize : VkExtent2D
                val mutable public shadingRatePaletteSize : uint32
                val mutable public shadingRateMaxCoarseSamples : uint32

                new(pNext: nativeint, shadingRateTexelSize: VkExtent2D, shadingRatePaletteSize: uint32, shadingRateMaxCoarseSamples: uint32) =
                    {
                        sType = 1000164002u
                        pNext = pNext
                        shadingRateTexelSize = shadingRateTexelSize
                        shadingRatePaletteSize = shadingRatePaletteSize
                        shadingRateMaxCoarseSamples = shadingRateMaxCoarseSamples
                    }

                new(shadingRateTexelSize: VkExtent2D, shadingRatePaletteSize: uint32, shadingRateMaxCoarseSamples: uint32) =
                    VkPhysicalDeviceShadingRateImagePropertiesNV(Unchecked.defaultof<nativeint>, shadingRateTexelSize, shadingRatePaletteSize, shadingRateMaxCoarseSamples)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shadingRateTexelSize = Unchecked.defaultof<VkExtent2D> && x.shadingRatePaletteSize = Unchecked.defaultof<uint32> && x.shadingRateMaxCoarseSamples = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceShadingRateImagePropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shadingRateTexelSize = %A" x.shadingRateTexelSize
                        sprintf "shadingRatePaletteSize = %A" x.shadingRatePaletteSize
                        sprintf "shadingRateMaxCoarseSamples = %A" x.shadingRateMaxCoarseSamples
                    ] |> sprintf "VkPhysicalDeviceShadingRateImagePropertiesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineViewportCoarseSampleOrderStateCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public sampleOrderType : VkCoarseSampleOrderTypeNV
                val mutable public customSampleOrderCount : uint32
                val mutable public pCustomSampleOrders : nativeptr<VkCoarseSampleOrderCustomNV>

                new(pNext: nativeint, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: uint32, pCustomSampleOrders: nativeptr<VkCoarseSampleOrderCustomNV>) =
                    {
                        sType = 1000164005u
                        pNext = pNext
                        sampleOrderType = sampleOrderType
                        customSampleOrderCount = customSampleOrderCount
                        pCustomSampleOrders = pCustomSampleOrders
                    }

                new(sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: uint32, pCustomSampleOrders: nativeptr<VkCoarseSampleOrderCustomNV>) =
                    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(Unchecked.defaultof<nativeint>, sampleOrderType, customSampleOrderCount, pCustomSampleOrders)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.sampleOrderType = Unchecked.defaultof<VkCoarseSampleOrderTypeNV> && x.customSampleOrderCount = Unchecked.defaultof<uint32> && x.pCustomSampleOrders = Unchecked.defaultof<nativeptr<VkCoarseSampleOrderCustomNV>>

                static member Empty =
                    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCoarseSampleOrderTypeNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkCoarseSampleOrderCustomNV>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "sampleOrderType = %A" x.sampleOrderType
                        sprintf "customSampleOrderCount = %A" x.customSampleOrderCount
                        sprintf "pCustomSampleOrders = %A" x.pCustomSampleOrders
                    ] |> sprintf "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkShadingRatePaletteNV =
            struct
                val mutable public shadingRatePaletteEntryCount : uint32
                val mutable public pShadingRatePaletteEntries : nativeptr<VkShadingRatePaletteEntryNV>

                new(shadingRatePaletteEntryCount: uint32, pShadingRatePaletteEntries: nativeptr<VkShadingRatePaletteEntryNV>) =
                    {
                        shadingRatePaletteEntryCount = shadingRatePaletteEntryCount
                        pShadingRatePaletteEntries = pShadingRatePaletteEntries
                    }

                member x.IsEmpty =
                    x.shadingRatePaletteEntryCount = Unchecked.defaultof<uint32> && x.pShadingRatePaletteEntries = Unchecked.defaultof<nativeptr<VkShadingRatePaletteEntryNV>>

                static member Empty =
                    VkShadingRatePaletteNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkShadingRatePaletteEntryNV>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "shadingRatePaletteEntryCount = %A" x.shadingRatePaletteEntryCount
                        sprintf "pShadingRatePaletteEntries = %A" x.pShadingRatePaletteEntries
                    ] |> sprintf "VkShadingRatePaletteNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineViewportShadingRateImageStateCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shadingRateImageEnable : VkBool32
                val mutable public viewportCount : uint32
                val mutable public pShadingRatePalettes : nativeptr<VkShadingRatePaletteNV>

                new(pNext: nativeint, shadingRateImageEnable: VkBool32, viewportCount: uint32, pShadingRatePalettes: nativeptr<VkShadingRatePaletteNV>) =
                    {
                        sType = 1000164000u
                        pNext = pNext
                        shadingRateImageEnable = shadingRateImageEnable
                        viewportCount = viewportCount
                        pShadingRatePalettes = pShadingRatePalettes
                    }

                new(shadingRateImageEnable: VkBool32, viewportCount: uint32, pShadingRatePalettes: nativeptr<VkShadingRatePaletteNV>) =
                    VkPipelineViewportShadingRateImageStateCreateInfoNV(Unchecked.defaultof<nativeint>, shadingRateImageEnable, viewportCount, pShadingRatePalettes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shadingRateImageEnable = Unchecked.defaultof<VkBool32> && x.viewportCount = Unchecked.defaultof<uint32> && x.pShadingRatePalettes = Unchecked.defaultof<nativeptr<VkShadingRatePaletteNV>>

                static member Empty =
                    VkPipelineViewportShadingRateImageStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkShadingRatePaletteNV>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shadingRateImageEnable = %A" x.shadingRateImageEnable
                        sprintf "viewportCount = %A" x.viewportCount
                        sprintf "pShadingRatePalettes = %A" x.pShadingRatePalettes
                    ] |> sprintf "VkPipelineViewportShadingRateImageStateCreateInfoNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags with
                  static member inline ShadingRateImageReadBitNv = enum<VkAccessFlags> 0x00800000
             type VkDynamicState with
                  static member inline ViewportShadingRatePaletteNv = enum<VkDynamicState> 1000164004
                  static member inline ViewportCoarseSampleOrderNv = enum<VkDynamicState> 1000164006
             type VkImageLayout with
                  static member inline ShadingRateOptimalNv = enum<VkImageLayout> 1000164003
             type VkImageUsageFlags with
                  static member inline ShadingRateImageBitNv = enum<VkImageUsageFlags> 0x00000100
             type VkPipelineStageFlags with
                  static member inline ShadingRateImageBitNv = enum<VkPipelineStageFlags> 0x00400000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBindShadingRateImageNVDel = delegate of VkCommandBuffer * VkImageView * VkImageLayout -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetViewportShadingRatePaletteNVDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkShadingRatePaletteNV> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetCoarseSampleOrderNVDel = delegate of VkCommandBuffer * VkCoarseSampleOrderTypeNV * uint32 * nativeptr<VkCoarseSampleOrderCustomNV> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVShadingRateImage")
                static let s_vkCmdBindShadingRateImageNVDel = VkRaw.vkImportInstanceDelegate<VkCmdBindShadingRateImageNVDel> "vkCmdBindShadingRateImageNV"
                static let s_vkCmdSetViewportShadingRatePaletteNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetViewportShadingRatePaletteNVDel> "vkCmdSetViewportShadingRatePaletteNV"
                static let s_vkCmdSetCoarseSampleOrderNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetCoarseSampleOrderNVDel> "vkCmdSetCoarseSampleOrderNV"
                static do Report.End(3) |> ignore
                static member vkCmdBindShadingRateImageNV = s_vkCmdBindShadingRateImageNVDel
                static member vkCmdSetViewportShadingRatePaletteNV = s_vkCmdSetViewportShadingRatePaletteNVDel
                static member vkCmdSetCoarseSampleOrderNV = s_vkCmdSetCoarseSampleOrderNVDel
            let vkCmdBindShadingRateImageNV(commandBuffer : VkCommandBuffer, imageView : VkImageView, imageLayout : VkImageLayout) = Loader<unit>.vkCmdBindShadingRateImageNV.Invoke(commandBuffer, imageView, imageLayout)
            let vkCmdSetViewportShadingRatePaletteNV(commandBuffer : VkCommandBuffer, firstViewport : uint32, viewportCount : uint32, pShadingRatePalettes : nativeptr<VkShadingRatePaletteNV>) = Loader<unit>.vkCmdSetViewportShadingRatePaletteNV.Invoke(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes)
            let vkCmdSetCoarseSampleOrderNV(commandBuffer : VkCommandBuffer, sampleOrderType : VkCoarseSampleOrderTypeNV, customSampleOrderCount : uint32, pCustomSampleOrders : nativeptr<VkCoarseSampleOrderCustomNV>) = Loader<unit>.vkCmdSetCoarseSampleOrderNV.Invoke(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders)

    /// Requires (KHRGetPhysicalDeviceProperties2, KHRGetMemoryRequirements2) | Vulkan11.
    /// Deprecated by KHRRayTracingPipeline.
    module NVRayTracing =
        let Type = ExtensionType.Device
        let Name = "VK_NV_ray_tracing"
        let Number = 166


        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureNV =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkAccelerationStructureNV(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        type VkRayTracingShaderGroupTypeNV = KHRRayTracingPipeline.VkRayTracingShaderGroupTypeKHR
        type VkGeometryTypeNV = KHRAccelerationStructure.VkGeometryTypeKHR
        type VkAccelerationStructureTypeNV = KHRAccelerationStructure.VkAccelerationStructureTypeKHR
        type VkGeometryFlagsNV = KHRAccelerationStructure.VkGeometryFlagsKHR
        type VkGeometryInstanceFlagsNV = KHRAccelerationStructure.VkGeometryInstanceFlagsKHR
        type VkBuildAccelerationStructureFlagsNV = KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR
        type VkCopyAccelerationStructureModeNV = KHRAccelerationStructure.VkCopyAccelerationStructureModeKHR

        type VkAccelerationStructureMemoryRequirementsTypeNV =
            | Object = 0
            | BuildScratch = 1
            | UpdateScratch = 2


        type VkAabbPositionsNV = KHRAccelerationStructure.VkAabbPositionsKHR

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGeometryTrianglesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public vertexData : VkBuffer
                val mutable public vertexOffset : VkDeviceSize
                val mutable public vertexCount : uint32
                val mutable public vertexStride : VkDeviceSize
                val mutable public vertexFormat : VkFormat
                val mutable public indexData : VkBuffer
                val mutable public indexOffset : VkDeviceSize
                val mutable public indexCount : uint32
                val mutable public indexType : VkIndexType
                val mutable public transformData : VkBuffer
                val mutable public transformOffset : VkDeviceSize

                new(pNext: nativeint, vertexData: VkBuffer, vertexOffset: VkDeviceSize, vertexCount: uint32, vertexStride: VkDeviceSize, vertexFormat: VkFormat, indexData: VkBuffer, indexOffset: VkDeviceSize, indexCount: uint32, indexType: VkIndexType, transformData: VkBuffer, transformOffset: VkDeviceSize) =
                    {
                        sType = 1000165004u
                        pNext = pNext
                        vertexData = vertexData
                        vertexOffset = vertexOffset
                        vertexCount = vertexCount
                        vertexStride = vertexStride
                        vertexFormat = vertexFormat
                        indexData = indexData
                        indexOffset = indexOffset
                        indexCount = indexCount
                        indexType = indexType
                        transformData = transformData
                        transformOffset = transformOffset
                    }

                new(vertexData: VkBuffer, vertexOffset: VkDeviceSize, vertexCount: uint32, vertexStride: VkDeviceSize, vertexFormat: VkFormat, indexData: VkBuffer, indexOffset: VkDeviceSize, indexCount: uint32, indexType: VkIndexType, transformData: VkBuffer, transformOffset: VkDeviceSize) =
                    VkGeometryTrianglesNV(Unchecked.defaultof<nativeint>, vertexData, vertexOffset, vertexCount, vertexStride, vertexFormat, indexData, indexOffset, indexCount, indexType, transformData, transformOffset)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.vertexData = Unchecked.defaultof<VkBuffer> && x.vertexOffset = Unchecked.defaultof<VkDeviceSize> && x.vertexCount = Unchecked.defaultof<uint32> && x.vertexStride = Unchecked.defaultof<VkDeviceSize> && x.vertexFormat = Unchecked.defaultof<VkFormat> && x.indexData = Unchecked.defaultof<VkBuffer> && x.indexOffset = Unchecked.defaultof<VkDeviceSize> && x.indexCount = Unchecked.defaultof<uint32> && x.indexType = Unchecked.defaultof<VkIndexType> && x.transformData = Unchecked.defaultof<VkBuffer> && x.transformOffset = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkGeometryTrianglesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkIndexType>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "vertexData = %A" x.vertexData
                        sprintf "vertexOffset = %A" x.vertexOffset
                        sprintf "vertexCount = %A" x.vertexCount
                        sprintf "vertexStride = %A" x.vertexStride
                        sprintf "vertexFormat = %A" x.vertexFormat
                        sprintf "indexData = %A" x.indexData
                        sprintf "indexOffset = %A" x.indexOffset
                        sprintf "indexCount = %A" x.indexCount
                        sprintf "indexType = %A" x.indexType
                        sprintf "transformData = %A" x.transformData
                        sprintf "transformOffset = %A" x.transformOffset
                    ] |> sprintf "VkGeometryTrianglesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGeometryAABBNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public aabbData : VkBuffer
                val mutable public numAABBs : uint32
                val mutable public stride : uint32
                val mutable public offset : VkDeviceSize

                new(pNext: nativeint, aabbData: VkBuffer, numAABBs: uint32, stride: uint32, offset: VkDeviceSize) =
                    {
                        sType = 1000165005u
                        pNext = pNext
                        aabbData = aabbData
                        numAABBs = numAABBs
                        stride = stride
                        offset = offset
                    }

                new(aabbData: VkBuffer, numAABBs: uint32, stride: uint32, offset: VkDeviceSize) =
                    VkGeometryAABBNV(Unchecked.defaultof<nativeint>, aabbData, numAABBs, stride, offset)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.aabbData = Unchecked.defaultof<VkBuffer> && x.numAABBs = Unchecked.defaultof<uint32> && x.stride = Unchecked.defaultof<uint32> && x.offset = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkGeometryAABBNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "aabbData = %A" x.aabbData
                        sprintf "numAABBs = %A" x.numAABBs
                        sprintf "stride = %A" x.stride
                        sprintf "offset = %A" x.offset
                    ] |> sprintf "VkGeometryAABBNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGeometryDataNV =
            struct
                val mutable public triangles : VkGeometryTrianglesNV
                val mutable public aabbs : VkGeometryAABBNV

                new(triangles: VkGeometryTrianglesNV, aabbs: VkGeometryAABBNV) =
                    {
                        triangles = triangles
                        aabbs = aabbs
                    }

                member x.IsEmpty =
                    x.triangles = Unchecked.defaultof<VkGeometryTrianglesNV> && x.aabbs = Unchecked.defaultof<VkGeometryAABBNV>

                static member Empty =
                    VkGeometryDataNV(Unchecked.defaultof<VkGeometryTrianglesNV>, Unchecked.defaultof<VkGeometryAABBNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "triangles = %A" x.triangles
                        sprintf "aabbs = %A" x.aabbs
                    ] |> sprintf "VkGeometryDataNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGeometryNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public geometryType : KHRAccelerationStructure.VkGeometryTypeKHR
                val mutable public geometry : VkGeometryDataNV
                val mutable public flags : KHRAccelerationStructure.VkGeometryFlagsKHR

                new(pNext: nativeint, geometryType: KHRAccelerationStructure.VkGeometryTypeKHR, geometry: VkGeometryDataNV, flags: KHRAccelerationStructure.VkGeometryFlagsKHR) =
                    {
                        sType = 1000165003u
                        pNext = pNext
                        geometryType = geometryType
                        geometry = geometry
                        flags = flags
                    }

                new(geometryType: KHRAccelerationStructure.VkGeometryTypeKHR, geometry: VkGeometryDataNV, flags: KHRAccelerationStructure.VkGeometryFlagsKHR) =
                    VkGeometryNV(Unchecked.defaultof<nativeint>, geometryType, geometry, flags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.geometryType = Unchecked.defaultof<KHRAccelerationStructure.VkGeometryTypeKHR> && x.geometry = Unchecked.defaultof<VkGeometryDataNV> && x.flags = Unchecked.defaultof<KHRAccelerationStructure.VkGeometryFlagsKHR>

                static member Empty =
                    VkGeometryNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRAccelerationStructure.VkGeometryTypeKHR>, Unchecked.defaultof<VkGeometryDataNV>, Unchecked.defaultof<KHRAccelerationStructure.VkGeometryFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "geometryType = %A" x.geometryType
                        sprintf "geometry = %A" x.geometry
                        sprintf "flags = %A" x.flags
                    ] |> sprintf "VkGeometryNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _type : VkAccelerationStructureTypeNV
                val mutable public flags : VkBuildAccelerationStructureFlagsNV
                val mutable public instanceCount : uint32
                val mutable public geometryCount : uint32
                val mutable public pGeometries : nativeptr<VkGeometryNV>

                new(pNext: nativeint, _type: VkAccelerationStructureTypeNV, flags: VkBuildAccelerationStructureFlagsNV, instanceCount: uint32, geometryCount: uint32, pGeometries: nativeptr<VkGeometryNV>) =
                    {
                        sType = 1000165012u
                        pNext = pNext
                        _type = _type
                        flags = flags
                        instanceCount = instanceCount
                        geometryCount = geometryCount
                        pGeometries = pGeometries
                    }

                new(_type: VkAccelerationStructureTypeNV, flags: VkBuildAccelerationStructureFlagsNV, instanceCount: uint32, geometryCount: uint32, pGeometries: nativeptr<VkGeometryNV>) =
                    VkAccelerationStructureInfoNV(Unchecked.defaultof<nativeint>, _type, flags, instanceCount, geometryCount, pGeometries)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkAccelerationStructureTypeNV> && x.flags = Unchecked.defaultof<VkBuildAccelerationStructureFlagsNV> && x.instanceCount = Unchecked.defaultof<uint32> && x.geometryCount = Unchecked.defaultof<uint32> && x.pGeometries = Unchecked.defaultof<nativeptr<VkGeometryNV>>

                static member Empty =
                    VkAccelerationStructureInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureTypeNV>, Unchecked.defaultof<VkBuildAccelerationStructureFlagsNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkGeometryNV>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_type = %A" x._type
                        sprintf "flags = %A" x.flags
                        sprintf "instanceCount = %A" x.instanceCount
                        sprintf "geometryCount = %A" x.geometryCount
                        sprintf "pGeometries = %A" x.pGeometries
                    ] |> sprintf "VkAccelerationStructureInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public compactedSize : VkDeviceSize
                val mutable public info : VkAccelerationStructureInfoNV

                new(pNext: nativeint, compactedSize: VkDeviceSize, info: VkAccelerationStructureInfoNV) =
                    {
                        sType = 1000165001u
                        pNext = pNext
                        compactedSize = compactedSize
                        info = info
                    }

                new(compactedSize: VkDeviceSize, info: VkAccelerationStructureInfoNV) =
                    VkAccelerationStructureCreateInfoNV(Unchecked.defaultof<nativeint>, compactedSize, info)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.compactedSize = Unchecked.defaultof<VkDeviceSize> && x.info = Unchecked.defaultof<VkAccelerationStructureInfoNV>

                static member Empty =
                    VkAccelerationStructureCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkAccelerationStructureInfoNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "compactedSize = %A" x.compactedSize
                        sprintf "info = %A" x.info
                    ] |> sprintf "VkAccelerationStructureCreateInfoNV { %s }"
            end

        type VkAccelerationStructureInstanceNV = KHRAccelerationStructure.VkAccelerationStructureInstanceKHR

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureMemoryRequirementsInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _type : VkAccelerationStructureMemoryRequirementsTypeNV
                val mutable public accelerationStructure : VkAccelerationStructureNV

                new(pNext: nativeint, _type: VkAccelerationStructureMemoryRequirementsTypeNV, accelerationStructure: VkAccelerationStructureNV) =
                    {
                        sType = 1000165008u
                        pNext = pNext
                        _type = _type
                        accelerationStructure = accelerationStructure
                    }

                new(_type: VkAccelerationStructureMemoryRequirementsTypeNV, accelerationStructure: VkAccelerationStructureNV) =
                    VkAccelerationStructureMemoryRequirementsInfoNV(Unchecked.defaultof<nativeint>, _type, accelerationStructure)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkAccelerationStructureMemoryRequirementsTypeNV> && x.accelerationStructure = Unchecked.defaultof<VkAccelerationStructureNV>

                static member Empty =
                    VkAccelerationStructureMemoryRequirementsInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureMemoryRequirementsTypeNV>, Unchecked.defaultof<VkAccelerationStructureNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_type = %A" x._type
                        sprintf "accelerationStructure = %A" x.accelerationStructure
                    ] |> sprintf "VkAccelerationStructureMemoryRequirementsInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBindAccelerationStructureMemoryInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public accelerationStructure : VkAccelerationStructureNV
                val mutable public memory : VkDeviceMemory
                val mutable public memoryOffset : VkDeviceSize
                val mutable public deviceIndexCount : uint32
                val mutable public pDeviceIndices : nativeptr<uint32>

                new(pNext: nativeint, accelerationStructure: VkAccelerationStructureNV, memory: VkDeviceMemory, memoryOffset: VkDeviceSize, deviceIndexCount: uint32, pDeviceIndices: nativeptr<uint32>) =
                    {
                        sType = 1000165006u
                        pNext = pNext
                        accelerationStructure = accelerationStructure
                        memory = memory
                        memoryOffset = memoryOffset
                        deviceIndexCount = deviceIndexCount
                        pDeviceIndices = pDeviceIndices
                    }

                new(accelerationStructure: VkAccelerationStructureNV, memory: VkDeviceMemory, memoryOffset: VkDeviceSize, deviceIndexCount: uint32, pDeviceIndices: nativeptr<uint32>) =
                    VkBindAccelerationStructureMemoryInfoNV(Unchecked.defaultof<nativeint>, accelerationStructure, memory, memoryOffset, deviceIndexCount, pDeviceIndices)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructure = Unchecked.defaultof<VkAccelerationStructureNV> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.memoryOffset = Unchecked.defaultof<VkDeviceSize> && x.deviceIndexCount = Unchecked.defaultof<uint32> && x.pDeviceIndices = Unchecked.defaultof<nativeptr<uint32>>

                static member Empty =
                    VkBindAccelerationStructureMemoryInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureNV>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "accelerationStructure = %A" x.accelerationStructure
                        sprintf "memory = %A" x.memory
                        sprintf "memoryOffset = %A" x.memoryOffset
                        sprintf "deviceIndexCount = %A" x.deviceIndexCount
                        sprintf "pDeviceIndices = %A" x.pDeviceIndices
                    ] |> sprintf "VkBindAccelerationStructureMemoryInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRayTracingPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderGroupHandleSize : uint32
                val mutable public maxRecursionDepth : uint32
                val mutable public maxShaderGroupStride : uint32
                val mutable public shaderGroupBaseAlignment : uint32
                val mutable public maxGeometryCount : uint64
                val mutable public maxInstanceCount : uint64
                val mutable public maxTriangleCount : uint64
                val mutable public maxDescriptorSetAccelerationStructures : uint32

                new(pNext: nativeint, shaderGroupHandleSize: uint32, maxRecursionDepth: uint32, maxShaderGroupStride: uint32, shaderGroupBaseAlignment: uint32, maxGeometryCount: uint64, maxInstanceCount: uint64, maxTriangleCount: uint64, maxDescriptorSetAccelerationStructures: uint32) =
                    {
                        sType = 1000165009u
                        pNext = pNext
                        shaderGroupHandleSize = shaderGroupHandleSize
                        maxRecursionDepth = maxRecursionDepth
                        maxShaderGroupStride = maxShaderGroupStride
                        shaderGroupBaseAlignment = shaderGroupBaseAlignment
                        maxGeometryCount = maxGeometryCount
                        maxInstanceCount = maxInstanceCount
                        maxTriangleCount = maxTriangleCount
                        maxDescriptorSetAccelerationStructures = maxDescriptorSetAccelerationStructures
                    }

                new(shaderGroupHandleSize: uint32, maxRecursionDepth: uint32, maxShaderGroupStride: uint32, shaderGroupBaseAlignment: uint32, maxGeometryCount: uint64, maxInstanceCount: uint64, maxTriangleCount: uint64, maxDescriptorSetAccelerationStructures: uint32) =
                    VkPhysicalDeviceRayTracingPropertiesNV(Unchecked.defaultof<nativeint>, shaderGroupHandleSize, maxRecursionDepth, maxShaderGroupStride, shaderGroupBaseAlignment, maxGeometryCount, maxInstanceCount, maxTriangleCount, maxDescriptorSetAccelerationStructures)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderGroupHandleSize = Unchecked.defaultof<uint32> && x.maxRecursionDepth = Unchecked.defaultof<uint32> && x.maxShaderGroupStride = Unchecked.defaultof<uint32> && x.shaderGroupBaseAlignment = Unchecked.defaultof<uint32> && x.maxGeometryCount = Unchecked.defaultof<uint64> && x.maxInstanceCount = Unchecked.defaultof<uint64> && x.maxTriangleCount = Unchecked.defaultof<uint64> && x.maxDescriptorSetAccelerationStructures = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceRayTracingPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderGroupHandleSize = %A" x.shaderGroupHandleSize
                        sprintf "maxRecursionDepth = %A" x.maxRecursionDepth
                        sprintf "maxShaderGroupStride = %A" x.maxShaderGroupStride
                        sprintf "shaderGroupBaseAlignment = %A" x.shaderGroupBaseAlignment
                        sprintf "maxGeometryCount = %A" x.maxGeometryCount
                        sprintf "maxInstanceCount = %A" x.maxInstanceCount
                        sprintf "maxTriangleCount = %A" x.maxTriangleCount
                        sprintf "maxDescriptorSetAccelerationStructures = %A" x.maxDescriptorSetAccelerationStructures
                    ] |> sprintf "VkPhysicalDeviceRayTracingPropertiesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRayTracingShaderGroupCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _type : KHRRayTracingPipeline.VkRayTracingShaderGroupTypeKHR
                val mutable public generalShader : uint32
                val mutable public closestHitShader : uint32
                val mutable public anyHitShader : uint32
                val mutable public intersectionShader : uint32

                new(pNext: nativeint, _type: KHRRayTracingPipeline.VkRayTracingShaderGroupTypeKHR, generalShader: uint32, closestHitShader: uint32, anyHitShader: uint32, intersectionShader: uint32) =
                    {
                        sType = 1000165011u
                        pNext = pNext
                        _type = _type
                        generalShader = generalShader
                        closestHitShader = closestHitShader
                        anyHitShader = anyHitShader
                        intersectionShader = intersectionShader
                    }

                new(_type: KHRRayTracingPipeline.VkRayTracingShaderGroupTypeKHR, generalShader: uint32, closestHitShader: uint32, anyHitShader: uint32, intersectionShader: uint32) =
                    VkRayTracingShaderGroupCreateInfoNV(Unchecked.defaultof<nativeint>, _type, generalShader, closestHitShader, anyHitShader, intersectionShader)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<KHRRayTracingPipeline.VkRayTracingShaderGroupTypeKHR> && x.generalShader = Unchecked.defaultof<uint32> && x.closestHitShader = Unchecked.defaultof<uint32> && x.anyHitShader = Unchecked.defaultof<uint32> && x.intersectionShader = Unchecked.defaultof<uint32>

                static member Empty =
                    VkRayTracingShaderGroupCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRRayTracingPipeline.VkRayTracingShaderGroupTypeKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_type = %A" x._type
                        sprintf "generalShader = %A" x.generalShader
                        sprintf "closestHitShader = %A" x.closestHitShader
                        sprintf "anyHitShader = %A" x.anyHitShader
                        sprintf "intersectionShader = %A" x.intersectionShader
                    ] |> sprintf "VkRayTracingShaderGroupCreateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRayTracingPipelineCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkPipelineCreateFlags
                val mutable public stageCount : uint32
                val mutable public pStages : nativeptr<VkPipelineShaderStageCreateInfo>
                val mutable public groupCount : uint32
                val mutable public pGroups : nativeptr<VkRayTracingShaderGroupCreateInfoNV>
                val mutable public maxRecursionDepth : uint32
                val mutable public layout : VkPipelineLayout
                val mutable public basePipelineHandle : VkPipeline
                val mutable public basePipelineIndex : int32

                new(pNext: nativeint, flags: VkPipelineCreateFlags, stageCount: uint32, pStages: nativeptr<VkPipelineShaderStageCreateInfo>, groupCount: uint32, pGroups: nativeptr<VkRayTracingShaderGroupCreateInfoNV>, maxRecursionDepth: uint32, layout: VkPipelineLayout, basePipelineHandle: VkPipeline, basePipelineIndex: int32) =
                    {
                        sType = 1000165000u
                        pNext = pNext
                        flags = flags
                        stageCount = stageCount
                        pStages = pStages
                        groupCount = groupCount
                        pGroups = pGroups
                        maxRecursionDepth = maxRecursionDepth
                        layout = layout
                        basePipelineHandle = basePipelineHandle
                        basePipelineIndex = basePipelineIndex
                    }

                new(flags: VkPipelineCreateFlags, stageCount: uint32, pStages: nativeptr<VkPipelineShaderStageCreateInfo>, groupCount: uint32, pGroups: nativeptr<VkRayTracingShaderGroupCreateInfoNV>, maxRecursionDepth: uint32, layout: VkPipelineLayout, basePipelineHandle: VkPipeline, basePipelineIndex: int32) =
                    VkRayTracingPipelineCreateInfoNV(Unchecked.defaultof<nativeint>, flags, stageCount, pStages, groupCount, pGroups, maxRecursionDepth, layout, basePipelineHandle, basePipelineIndex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCreateFlags> && x.stageCount = Unchecked.defaultof<uint32> && x.pStages = Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>> && x.groupCount = Unchecked.defaultof<uint32> && x.pGroups = Unchecked.defaultof<nativeptr<VkRayTracingShaderGroupCreateInfoNV>> && x.maxRecursionDepth = Unchecked.defaultof<uint32> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.basePipelineHandle = Unchecked.defaultof<VkPipeline> && x.basePipelineIndex = Unchecked.defaultof<int32>

                static member Empty =
                    VkRayTracingPipelineCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRayTracingShaderGroupCreateInfoNV>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<int32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "stageCount = %A" x.stageCount
                        sprintf "pStages = %A" x.pStages
                        sprintf "groupCount = %A" x.groupCount
                        sprintf "pGroups = %A" x.pGroups
                        sprintf "maxRecursionDepth = %A" x.maxRecursionDepth
                        sprintf "layout = %A" x.layout
                        sprintf "basePipelineHandle = %A" x.basePipelineHandle
                        sprintf "basePipelineIndex = %A" x.basePipelineIndex
                    ] |> sprintf "VkRayTracingPipelineCreateInfoNV { %s }"
            end

        type VkTransformMatrixNV = KHRAccelerationStructure.VkTransformMatrixKHR

        [<StructLayout(LayoutKind.Sequential)>]
        type VkWriteDescriptorSetAccelerationStructureNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public accelerationStructureCount : uint32
                val mutable public pAccelerationStructures : nativeptr<VkAccelerationStructureNV>

                new(pNext: nativeint, accelerationStructureCount: uint32, pAccelerationStructures: nativeptr<VkAccelerationStructureNV>) =
                    {
                        sType = 1000165007u
                        pNext = pNext
                        accelerationStructureCount = accelerationStructureCount
                        pAccelerationStructures = pAccelerationStructures
                    }

                new(accelerationStructureCount: uint32, pAccelerationStructures: nativeptr<VkAccelerationStructureNV>) =
                    VkWriteDescriptorSetAccelerationStructureNV(Unchecked.defaultof<nativeint>, accelerationStructureCount, pAccelerationStructures)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructureCount = Unchecked.defaultof<uint32> && x.pAccelerationStructures = Unchecked.defaultof<nativeptr<VkAccelerationStructureNV>>

                static member Empty =
                    VkWriteDescriptorSetAccelerationStructureNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAccelerationStructureNV>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "accelerationStructureCount = %A" x.accelerationStructureCount
                        sprintf "pAccelerationStructures = %A" x.pAccelerationStructures
                    ] |> sprintf "VkWriteDescriptorSetAccelerationStructureNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRAccelerationStructure.VkAccelerationStructureTypeKHR with
                  static member inline TopLevelNv = enum<KHRAccelerationStructure.VkAccelerationStructureTypeKHR> 0
                  static member inline BottomLevelNv = enum<KHRAccelerationStructure.VkAccelerationStructureTypeKHR> 1
             type VkAccessFlags with
                  static member inline AccelerationStructureReadBitNv = enum<VkAccessFlags> 0x00200000
                  static member inline AccelerationStructureWriteBitNv = enum<VkAccessFlags> 0x00400000
             type VkBufferUsageFlags with
                  static member inline RayTracingBitNv = enum<VkBufferUsageFlags> 0x00000400
             type KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR with
                  static member inline AllowUpdateBitNv = enum<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> 0x00000001
                  static member inline AllowCompactionBitNv = enum<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> 0x00000002
                  static member inline PreferFastTraceBitNv = enum<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> 0x00000004
                  static member inline PreferFastBuildBitNv = enum<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> 0x00000008
                  static member inline LowMemoryBitNv = enum<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> 0x00000010
             type KHRAccelerationStructure.VkCopyAccelerationStructureModeKHR with
                  static member inline CloneNv = enum<KHRAccelerationStructure.VkCopyAccelerationStructureModeKHR> 0
                  static member inline CompactNv = enum<KHRAccelerationStructure.VkCopyAccelerationStructureModeKHR> 1
             type VkDescriptorType with
                  static member inline AccelerationStructureNv = enum<VkDescriptorType> 1000165000
             type KHRAccelerationStructure.VkGeometryFlagsKHR with
                  static member inline OpaqueBitNv = enum<KHRAccelerationStructure.VkGeometryFlagsKHR> 0x00000001
                  static member inline NoDuplicateAnyHitInvocationBitNv = enum<KHRAccelerationStructure.VkGeometryFlagsKHR> 0x00000002
             type KHRAccelerationStructure.VkGeometryInstanceFlagsKHR with
                  static member inline TriangleCullDisableBitNv = enum<KHRAccelerationStructure.VkGeometryInstanceFlagsKHR> 0x00000001
                  static member inline TriangleFrontCounterclockwiseBitNv = enum<KHRAccelerationStructure.VkGeometryInstanceFlagsKHR> 0x00000002
                  static member inline ForceOpaqueBitNv = enum<KHRAccelerationStructure.VkGeometryInstanceFlagsKHR> 0x00000004
                  static member inline ForceNoOpaqueBitNv = enum<KHRAccelerationStructure.VkGeometryInstanceFlagsKHR> 0x00000008
             type KHRAccelerationStructure.VkGeometryTypeKHR with
                  static member inline TrianglesNv = enum<KHRAccelerationStructure.VkGeometryTypeKHR> 0
                  static member inline AabbsNv = enum<KHRAccelerationStructure.VkGeometryTypeKHR> 1
             type VkIndexType with
                  static member inline NoneNv = enum<VkIndexType> 1000165000
             type VkObjectType with
                  static member inline AccelerationStructureNv = enum<VkObjectType> 1000165000
             type VkPipelineBindPoint with
                  static member inline RayTracingNv = enum<VkPipelineBindPoint> 1000165000
             type VkPipelineCreateFlags with
                  static member inline DeferCompileBitNv = enum<VkPipelineCreateFlags> 0x00000020
             type VkPipelineStageFlags with
                  static member inline RayTracingShaderBitNv = enum<VkPipelineStageFlags> 0x00200000
                  static member inline AccelerationStructureBuildBitNv = enum<VkPipelineStageFlags> 0x02000000
             type VkQueryType with
                  static member inline AccelerationStructureCompactedSizeNv = enum<VkQueryType> 1000165000
             type KHRRayTracingPipeline.VkRayTracingShaderGroupTypeKHR with
                  static member inline GeneralNv = enum<KHRRayTracingPipeline.VkRayTracingShaderGroupTypeKHR> 0
                  static member inline TrianglesHitGroupNv = enum<KHRRayTracingPipeline.VkRayTracingShaderGroupTypeKHR> 1
                  static member inline ProceduralHitGroupNv = enum<KHRRayTracingPipeline.VkRayTracingShaderGroupTypeKHR> 2
             type VkShaderStageFlags with
                  static member inline RaygenBitNv = enum<VkShaderStageFlags> 0x00000100
                  static member inline AnyHitBitNv = enum<VkShaderStageFlags> 0x00000200
                  static member inline ClosestHitBitNv = enum<VkShaderStageFlags> 0x00000400
                  static member inline MissBitNv = enum<VkShaderStageFlags> 0x00000800
                  static member inline IntersectionBitNv = enum<VkShaderStageFlags> 0x00001000
                  static member inline CallableBitNv = enum<VkShaderStageFlags> 0x00002000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateAccelerationStructureNVDel = delegate of VkDevice * nativeptr<VkAccelerationStructureCreateInfoNV> * nativeptr<VkAllocationCallbacks> * nativeptr<VkAccelerationStructureNV> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyAccelerationStructureNVDel = delegate of VkDevice * VkAccelerationStructureNV * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetAccelerationStructureMemoryRequirementsNVDel = delegate of VkDevice * nativeptr<VkAccelerationStructureMemoryRequirementsInfoNV> * nativeptr<KHRGetMemoryRequirements2.VkMemoryRequirements2KHR> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkBindAccelerationStructureMemoryNVDel = delegate of VkDevice * uint32 * nativeptr<VkBindAccelerationStructureMemoryInfoNV> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBuildAccelerationStructureNVDel = delegate of VkCommandBuffer * nativeptr<VkAccelerationStructureInfoNV> * VkBuffer * VkDeviceSize * VkBool32 * VkAccelerationStructureNV * VkAccelerationStructureNV * VkBuffer * VkDeviceSize -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyAccelerationStructureNVDel = delegate of VkCommandBuffer * VkAccelerationStructureNV * VkAccelerationStructureNV * KHRAccelerationStructure.VkCopyAccelerationStructureModeKHR -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdTraceRaysNVDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * VkDeviceSize * VkBuffer * VkDeviceSize * VkDeviceSize * VkBuffer * VkDeviceSize * VkDeviceSize * uint32 * uint32 * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateRayTracingPipelinesNVDel = delegate of VkDevice * VkPipelineCache * uint32 * nativeptr<VkRayTracingPipelineCreateInfoNV> * nativeptr<VkAllocationCallbacks> * nativeptr<VkPipeline> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetRayTracingShaderGroupHandlesNVDel = delegate of VkDevice * VkPipeline * uint32 * uint32 * uint64 * nativeint -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetAccelerationStructureHandleNVDel = delegate of VkDevice * VkAccelerationStructureNV * uint64 * nativeint -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdWriteAccelerationStructuresPropertiesNVDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkAccelerationStructureNV> * VkQueryType * VkQueryPool * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCompileDeferredNVDel = delegate of VkDevice * VkPipeline * uint32 -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVRayTracing")
                static let s_vkCreateAccelerationStructureNVDel = VkRaw.vkImportInstanceDelegate<VkCreateAccelerationStructureNVDel> "vkCreateAccelerationStructureNV"
                static let s_vkDestroyAccelerationStructureNVDel = VkRaw.vkImportInstanceDelegate<VkDestroyAccelerationStructureNVDel> "vkDestroyAccelerationStructureNV"
                static let s_vkGetAccelerationStructureMemoryRequirementsNVDel = VkRaw.vkImportInstanceDelegate<VkGetAccelerationStructureMemoryRequirementsNVDel> "vkGetAccelerationStructureMemoryRequirementsNV"
                static let s_vkBindAccelerationStructureMemoryNVDel = VkRaw.vkImportInstanceDelegate<VkBindAccelerationStructureMemoryNVDel> "vkBindAccelerationStructureMemoryNV"
                static let s_vkCmdBuildAccelerationStructureNVDel = VkRaw.vkImportInstanceDelegate<VkCmdBuildAccelerationStructureNVDel> "vkCmdBuildAccelerationStructureNV"
                static let s_vkCmdCopyAccelerationStructureNVDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyAccelerationStructureNVDel> "vkCmdCopyAccelerationStructureNV"
                static let s_vkCmdTraceRaysNVDel = VkRaw.vkImportInstanceDelegate<VkCmdTraceRaysNVDel> "vkCmdTraceRaysNV"
                static let s_vkCreateRayTracingPipelinesNVDel = VkRaw.vkImportInstanceDelegate<VkCreateRayTracingPipelinesNVDel> "vkCreateRayTracingPipelinesNV"
                static let s_vkGetRayTracingShaderGroupHandlesNVDel = VkRaw.vkImportInstanceDelegate<VkGetRayTracingShaderGroupHandlesNVDel> "vkGetRayTracingShaderGroupHandlesNV"
                static let s_vkGetAccelerationStructureHandleNVDel = VkRaw.vkImportInstanceDelegate<VkGetAccelerationStructureHandleNVDel> "vkGetAccelerationStructureHandleNV"
                static let s_vkCmdWriteAccelerationStructuresPropertiesNVDel = VkRaw.vkImportInstanceDelegate<VkCmdWriteAccelerationStructuresPropertiesNVDel> "vkCmdWriteAccelerationStructuresPropertiesNV"
                static let s_vkCompileDeferredNVDel = VkRaw.vkImportInstanceDelegate<VkCompileDeferredNVDel> "vkCompileDeferredNV"
                static do Report.End(3) |> ignore
                static member vkCreateAccelerationStructureNV = s_vkCreateAccelerationStructureNVDel
                static member vkDestroyAccelerationStructureNV = s_vkDestroyAccelerationStructureNVDel
                static member vkGetAccelerationStructureMemoryRequirementsNV = s_vkGetAccelerationStructureMemoryRequirementsNVDel
                static member vkBindAccelerationStructureMemoryNV = s_vkBindAccelerationStructureMemoryNVDel
                static member vkCmdBuildAccelerationStructureNV = s_vkCmdBuildAccelerationStructureNVDel
                static member vkCmdCopyAccelerationStructureNV = s_vkCmdCopyAccelerationStructureNVDel
                static member vkCmdTraceRaysNV = s_vkCmdTraceRaysNVDel
                static member vkCreateRayTracingPipelinesNV = s_vkCreateRayTracingPipelinesNVDel
                static member vkGetRayTracingShaderGroupHandlesNV = s_vkGetRayTracingShaderGroupHandlesNVDel
                static member vkGetAccelerationStructureHandleNV = s_vkGetAccelerationStructureHandleNVDel
                static member vkCmdWriteAccelerationStructuresPropertiesNV = s_vkCmdWriteAccelerationStructuresPropertiesNVDel
                static member vkCompileDeferredNV = s_vkCompileDeferredNVDel
            let vkCreateAccelerationStructureNV(device : VkDevice, pCreateInfo : nativeptr<VkAccelerationStructureCreateInfoNV>, pAllocator : nativeptr<VkAllocationCallbacks>, pAccelerationStructure : nativeptr<VkAccelerationStructureNV>) = Loader<unit>.vkCreateAccelerationStructureNV.Invoke(device, pCreateInfo, pAllocator, pAccelerationStructure)
            let vkDestroyAccelerationStructureNV(device : VkDevice, accelerationStructure : VkAccelerationStructureNV, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyAccelerationStructureNV.Invoke(device, accelerationStructure, pAllocator)
            let vkGetAccelerationStructureMemoryRequirementsNV(device : VkDevice, pInfo : nativeptr<VkAccelerationStructureMemoryRequirementsInfoNV>, pMemoryRequirements : nativeptr<KHRGetMemoryRequirements2.VkMemoryRequirements2KHR>) = Loader<unit>.vkGetAccelerationStructureMemoryRequirementsNV.Invoke(device, pInfo, pMemoryRequirements)
            let vkBindAccelerationStructureMemoryNV(device : VkDevice, bindInfoCount : uint32, pBindInfos : nativeptr<VkBindAccelerationStructureMemoryInfoNV>) = Loader<unit>.vkBindAccelerationStructureMemoryNV.Invoke(device, bindInfoCount, pBindInfos)
            let vkCmdBuildAccelerationStructureNV(commandBuffer : VkCommandBuffer, pInfo : nativeptr<VkAccelerationStructureInfoNV>, instanceData : VkBuffer, instanceOffset : VkDeviceSize, update : VkBool32, dst : VkAccelerationStructureNV, src : VkAccelerationStructureNV, scratch : VkBuffer, scratchOffset : VkDeviceSize) = Loader<unit>.vkCmdBuildAccelerationStructureNV.Invoke(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset)
            let vkCmdCopyAccelerationStructureNV(commandBuffer : VkCommandBuffer, dst : VkAccelerationStructureNV, src : VkAccelerationStructureNV, mode : KHRAccelerationStructure.VkCopyAccelerationStructureModeKHR) = Loader<unit>.vkCmdCopyAccelerationStructureNV.Invoke(commandBuffer, dst, src, mode)
            let vkCmdTraceRaysNV(commandBuffer : VkCommandBuffer, raygenShaderBindingTableBuffer : VkBuffer, raygenShaderBindingOffset : VkDeviceSize, missShaderBindingTableBuffer : VkBuffer, missShaderBindingOffset : VkDeviceSize, missShaderBindingStride : VkDeviceSize, hitShaderBindingTableBuffer : VkBuffer, hitShaderBindingOffset : VkDeviceSize, hitShaderBindingStride : VkDeviceSize, callableShaderBindingTableBuffer : VkBuffer, callableShaderBindingOffset : VkDeviceSize, callableShaderBindingStride : VkDeviceSize, width : uint32, height : uint32, depth : uint32) = Loader<unit>.vkCmdTraceRaysNV.Invoke(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth)
            let vkCreateRayTracingPipelinesNV(device : VkDevice, pipelineCache : VkPipelineCache, createInfoCount : uint32, pCreateInfos : nativeptr<VkRayTracingPipelineCreateInfoNV>, pAllocator : nativeptr<VkAllocationCallbacks>, pPipelines : nativeptr<VkPipeline>) = Loader<unit>.vkCreateRayTracingPipelinesNV.Invoke(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
            let vkGetRayTracingShaderGroupHandlesNV(device : VkDevice, pipeline : VkPipeline, firstGroup : uint32, groupCount : uint32, dataSize : uint64, pData : nativeint) = Loader<unit>.vkGetRayTracingShaderGroupHandlesNV.Invoke(device, pipeline, firstGroup, groupCount, dataSize, pData)
            let vkGetAccelerationStructureHandleNV(device : VkDevice, accelerationStructure : VkAccelerationStructureNV, dataSize : uint64, pData : nativeint) = Loader<unit>.vkGetAccelerationStructureHandleNV.Invoke(device, accelerationStructure, dataSize, pData)
            let vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer : VkCommandBuffer, accelerationStructureCount : uint32, pAccelerationStructures : nativeptr<VkAccelerationStructureNV>, queryType : VkQueryType, queryPool : VkQueryPool, firstQuery : uint32) = Loader<unit>.vkCmdWriteAccelerationStructuresPropertiesNV.Invoke(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery)
            let vkCompileDeferredNV(device : VkDevice, pipeline : VkPipeline, shader : uint32) = Loader<unit>.vkCompileDeferredNV.Invoke(device, pipeline, shader)

        [<AutoOpen>]
        module ``KHRGetMemoryRequirements2 | Vulkan11`` =
            type VkMemoryRequirements2KHR = Vulkan11.VkMemoryRequirements2



        [<AutoOpen>]
        module ``EXTDebugReport`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type EXTDebugReport.VkDebugReportObjectTypeEXT with
                      static member inline AccelerationStructureNv = enum<EXTDebugReport.VkDebugReportObjectTypeEXT> 1000165000


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module NVRepresentativeFragmentTest =
        let Type = ExtensionType.Device
        let Name = "VK_NV_representative_fragment_test"
        let Number = 167

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public representativeFragmentTest : VkBool32

                new(pNext: nativeint, representativeFragmentTest: VkBool32) =
                    {
                        sType = 1000166000u
                        pNext = pNext
                        representativeFragmentTest = representativeFragmentTest
                    }

                new(representativeFragmentTest: VkBool32) =
                    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(Unchecked.defaultof<nativeint>, representativeFragmentTest)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.representativeFragmentTest = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "representativeFragmentTest = %A" x.representativeFragmentTest
                    ] |> sprintf "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineRepresentativeFragmentTestStateCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public representativeFragmentTestEnable : VkBool32

                new(pNext: nativeint, representativeFragmentTestEnable: VkBool32) =
                    {
                        sType = 1000166001u
                        pNext = pNext
                        representativeFragmentTestEnable = representativeFragmentTestEnable
                    }

                new(representativeFragmentTestEnable: VkBool32) =
                    VkPipelineRepresentativeFragmentTestStateCreateInfoNV(Unchecked.defaultof<nativeint>, representativeFragmentTestEnable)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.representativeFragmentTestEnable = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPipelineRepresentativeFragmentTestStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "representativeFragmentTestEnable = %A" x.representativeFragmentTestEnable
                    ] |> sprintf "VkPipelineRepresentativeFragmentTestStateCreateInfoNV { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan11.
    module KHRMaintenance3 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_maintenance3"
        let Number = 169

        type VkDescriptorSetLayoutSupportKHR = Vulkan11.VkDescriptorSetLayoutSupport

        type VkPhysicalDeviceMaintenance3PropertiesKHR = Vulkan11.VkPhysicalDeviceMaintenance3Properties


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDescriptorSetLayoutSupportKHRDel = delegate of VkDevice * nativeptr<VkDescriptorSetLayoutCreateInfo> * nativeptr<Vulkan11.VkDescriptorSetLayoutSupport> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRMaintenance3")
                static let s_vkGetDescriptorSetLayoutSupportKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDescriptorSetLayoutSupportKHRDel> "vkGetDescriptorSetLayoutSupportKHR"
                static do Report.End(3) |> ignore
                static member vkGetDescriptorSetLayoutSupportKHR = s_vkGetDescriptorSetLayoutSupportKHRDel
            let vkGetDescriptorSetLayoutSupportKHR(device : VkDevice, pCreateInfo : nativeptr<VkDescriptorSetLayoutCreateInfo>, pSupport : nativeptr<Vulkan11.VkDescriptorSetLayoutSupport>) = Loader<unit>.vkGetDescriptorSetLayoutSupportKHR.Invoke(device, pCreateInfo, pSupport)

    /// Promoted to Vulkan12.
    module KHRDrawIndirectCount =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_draw_indirect_count"
        let Number = 170

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawIndirectCountKHRDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawIndexedIndirectCountKHRDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRDrawIndirectCount")
                static let s_vkCmdDrawIndirectCountKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawIndirectCountKHRDel> "vkCmdDrawIndirectCountKHR"
                static let s_vkCmdDrawIndexedIndirectCountKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawIndexedIndirectCountKHRDel> "vkCmdDrawIndexedIndirectCountKHR"
                static do Report.End(3) |> ignore
                static member vkCmdDrawIndirectCountKHR = s_vkCmdDrawIndirectCountKHRDel
                static member vkCmdDrawIndexedIndirectCountKHR = s_vkCmdDrawIndexedIndirectCountKHRDel
            let vkCmdDrawIndirectCountKHR(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, countBuffer : VkBuffer, countBufferOffset : VkDeviceSize, maxDrawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawIndirectCountKHR.Invoke(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
            let vkCmdDrawIndexedIndirectCountKHR(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, countBuffer : VkBuffer, countBufferOffset : VkDeviceSize, maxDrawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawIndexedIndirectCountKHR.Invoke(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)

    module EXTFilterCubic =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_filter_cubic"
        let Number = 171

        [<StructLayout(LayoutKind.Sequential)>]
        type VkFilterCubicImageViewImageFormatPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public filterCubic : VkBool32
                val mutable public filterCubicMinmax : VkBool32

                new(pNext: nativeint, filterCubic: VkBool32, filterCubicMinmax: VkBool32) =
                    {
                        sType = 1000170001u
                        pNext = pNext
                        filterCubic = filterCubic
                        filterCubicMinmax = filterCubicMinmax
                    }

                new(filterCubic: VkBool32, filterCubicMinmax: VkBool32) =
                    VkFilterCubicImageViewImageFormatPropertiesEXT(Unchecked.defaultof<nativeint>, filterCubic, filterCubicMinmax)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.filterCubic = Unchecked.defaultof<VkBool32> && x.filterCubicMinmax = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkFilterCubicImageViewImageFormatPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "filterCubic = %A" x.filterCubic
                        sprintf "filterCubicMinmax = %A" x.filterCubicMinmax
                    ] |> sprintf "VkFilterCubicImageViewImageFormatPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImageViewImageFormatInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageViewType : VkImageViewType

                new(pNext: nativeint, imageViewType: VkImageViewType) =
                    {
                        sType = 1000170000u
                        pNext = pNext
                        imageViewType = imageViewType
                    }

                new(imageViewType: VkImageViewType) =
                    VkPhysicalDeviceImageViewImageFormatInfoEXT(Unchecked.defaultof<nativeint>, imageViewType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageViewType = Unchecked.defaultof<VkImageViewType>

                static member Empty =
                    VkPhysicalDeviceImageViewImageFormatInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageViewType>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageViewType = %A" x.imageViewType
                    ] |> sprintf "VkPhysicalDeviceImageViewImageFormatInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkFilter with
                  static member inline CubicExt = enum<VkFilter> 1000015000
             type VkFormatFeatureFlags with
                  static member inline SampledImageFilterCubicBitExt = enum<VkFormatFeatureFlags> 0x00002000


    module QCOMRenderPassShaderResolve =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_render_pass_shader_resolve"
        let Number = 172

        [<AutoOpen>]
        module EnumExtensions =
             type VkSubpassDescriptionFlags with
                  static member inline FragmentRegionBitQcom = enum<VkSubpassDescriptionFlags> 0x00000004
                  static member inline ShaderResolveBitQcom = enum<VkSubpassDescriptionFlags> 0x00000008


    /// Promoted to KHRGlobalPriority.
    module EXTGlobalPriority =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_global_priority"
        let Number = 175

        type VkQueueGlobalPriorityEXT = Vulkan14.VkQueueGlobalPriority

        type VkDeviceQueueGlobalPriorityCreateInfoEXT = Vulkan14.VkDeviceQueueGlobalPriorityCreateInfo


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan14.VkQueueGlobalPriority with
                  static member inline LowExt = enum<Vulkan14.VkQueueGlobalPriority> 128
                  static member inline MediumExt = enum<Vulkan14.VkQueueGlobalPriority> 256
                  static member inline HighExt = enum<Vulkan14.VkQueueGlobalPriority> 512
                  static member inline RealtimeExt = enum<Vulkan14.VkQueueGlobalPriority> 1024
             type VkResult with
                  static member inline ErrorNotPermittedExt = enum<VkResult> 1000174001


    /// Requires Vulkan11.
    /// Promoted to Vulkan12.
    module KHRShaderSubgroupExtendedTypes =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_subgroup_extended_types"
        let Number = 176

        type VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = Vulkan12.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures



    /// Requires (KHRGetPhysicalDeviceProperties2, KHRStorageBufferStorageClass) | Vulkan11.
    /// Promoted to Vulkan12.
    module KHR8bitStorage =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_8bit_storage"
        let Number = 178

        type VkPhysicalDevice8BitStorageFeaturesKHR = Vulkan12.VkPhysicalDevice8BitStorageFeatures



    /// Requires KHRExternalMemory | Vulkan11.
    module EXTExternalMemoryHost =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_external_memory_host"
        let Number = 179

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportMemoryHostPointerInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public handleType : Vulkan11.VkExternalMemoryHandleTypeFlags
                val mutable public pHostPointer : nativeint

                new(pNext: nativeint, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags, pHostPointer: nativeint) =
                    {
                        sType = 1000178000u
                        pNext = pNext
                        handleType = handleType
                        pHostPointer = pHostPointer
                    }

                new(handleType: Vulkan11.VkExternalMemoryHandleTypeFlags, pHostPointer: nativeint) =
                    VkImportMemoryHostPointerInfoEXT(Unchecked.defaultof<nativeint>, handleType, pHostPointer)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags> && x.pHostPointer = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkImportMemoryHostPointerInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "handleType = %A" x.handleType
                        sprintf "pHostPointer = %A" x.pHostPointer
                    ] |> sprintf "VkImportMemoryHostPointerInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryHostPointerPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memoryTypeBits : uint32

                new(pNext: nativeint, memoryTypeBits: uint32) =
                    {
                        sType = 1000178001u
                        pNext = pNext
                        memoryTypeBits = memoryTypeBits
                    }

                new(memoryTypeBits: uint32) =
                    VkMemoryHostPointerPropertiesEXT(Unchecked.defaultof<nativeint>, memoryTypeBits)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memoryTypeBits = Unchecked.defaultof<uint32>

                static member Empty =
                    VkMemoryHostPointerPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memoryTypeBits = %A" x.memoryTypeBits
                    ] |> sprintf "VkMemoryHostPointerPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceExternalMemoryHostPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public minImportedHostPointerAlignment : VkDeviceSize

                new(pNext: nativeint, minImportedHostPointerAlignment: VkDeviceSize) =
                    {
                        sType = 1000178002u
                        pNext = pNext
                        minImportedHostPointerAlignment = minImportedHostPointerAlignment
                    }

                new(minImportedHostPointerAlignment: VkDeviceSize) =
                    VkPhysicalDeviceExternalMemoryHostPropertiesEXT(Unchecked.defaultof<nativeint>, minImportedHostPointerAlignment)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.minImportedHostPointerAlignment = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkPhysicalDeviceExternalMemoryHostPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "minImportedHostPointerAlignment = %A" x.minImportedHostPointerAlignment
                    ] |> sprintf "VkPhysicalDeviceExternalMemoryHostPropertiesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkExternalMemoryHandleTypeFlags with
                  static member inline HostAllocationBitExt = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00000080
                  static member inline HostMappedForeignMemoryBitExt = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00000100

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMemoryHostPointerPropertiesEXTDel = delegate of VkDevice * Vulkan11.VkExternalMemoryHandleTypeFlags * nativeint * nativeptr<VkMemoryHostPointerPropertiesEXT> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTExternalMemoryHost")
                static let s_vkGetMemoryHostPointerPropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryHostPointerPropertiesEXTDel> "vkGetMemoryHostPointerPropertiesEXT"
                static do Report.End(3) |> ignore
                static member vkGetMemoryHostPointerPropertiesEXT = s_vkGetMemoryHostPointerPropertiesEXTDel
            let vkGetMemoryHostPointerPropertiesEXT(device : VkDevice, handleType : Vulkan11.VkExternalMemoryHandleTypeFlags, pHostPointer : nativeint, pMemoryHostPointerProperties : nativeptr<VkMemoryHostPointerPropertiesEXT>) = Loader<unit>.vkGetMemoryHostPointerPropertiesEXT.Invoke(device, handleType, pHostPointer, pMemoryHostPointerProperties)

    module AMDBufferMarker =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_buffer_marker"
        let Number = 180

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdWriteBufferMarkerAMDDel = delegate of VkCommandBuffer * VkPipelineStageFlags * VkBuffer * VkDeviceSize * uint32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading AMDBufferMarker")
                static let s_vkCmdWriteBufferMarkerAMDDel = VkRaw.vkImportInstanceDelegate<VkCmdWriteBufferMarkerAMDDel> "vkCmdWriteBufferMarkerAMD"
                static do Report.End(3) |> ignore
                static member vkCmdWriteBufferMarkerAMD = s_vkCmdWriteBufferMarkerAMDDel
            let vkCmdWriteBufferMarkerAMD(commandBuffer : VkCommandBuffer, pipelineStage : VkPipelineStageFlags, dstBuffer : VkBuffer, dstOffset : VkDeviceSize, marker : uint32) = Loader<unit>.vkCmdWriteBufferMarkerAMD.Invoke(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker)

        [<AutoOpen>]
        module ``Vulkan13 | KHRSynchronization2`` =
            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdWriteBufferMarker2AMDDel = delegate of VkCommandBuffer * Vulkan13.VkPipelineStageFlags2 * VkBuffer * VkDeviceSize * uint32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading AMDBufferMarker -> Vulkan13 | KHRSynchronization2")
                    static let s_vkCmdWriteBufferMarker2AMDDel = VkRaw.vkImportInstanceDelegate<VkCmdWriteBufferMarker2AMDDel> "vkCmdWriteBufferMarker2AMD"
                    static do Report.End(3) |> ignore
                    static member vkCmdWriteBufferMarker2AMD = s_vkCmdWriteBufferMarker2AMDDel
                let vkCmdWriteBufferMarker2AMD(commandBuffer : VkCommandBuffer, stage : Vulkan13.VkPipelineStageFlags2, dstBuffer : VkBuffer, dstOffset : VkDeviceSize, marker : uint32) = Loader<unit>.vkCmdWriteBufferMarker2AMD.Invoke(commandBuffer, stage, dstBuffer, dstOffset, marker)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan12.
    module KHRShaderAtomicInt64 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_atomic_int64"
        let Number = 181

        type VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = Vulkan12.VkPhysicalDeviceShaderAtomicInt64Features



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module KHRShaderClock =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_clock"
        let Number = 182

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderClockFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderSubgroupClock : VkBool32
                val mutable public shaderDeviceClock : VkBool32

                new(pNext: nativeint, shaderSubgroupClock: VkBool32, shaderDeviceClock: VkBool32) =
                    {
                        sType = 1000181000u
                        pNext = pNext
                        shaderSubgroupClock = shaderSubgroupClock
                        shaderDeviceClock = shaderDeviceClock
                    }

                new(shaderSubgroupClock: VkBool32, shaderDeviceClock: VkBool32) =
                    VkPhysicalDeviceShaderClockFeaturesKHR(Unchecked.defaultof<nativeint>, shaderSubgroupClock, shaderDeviceClock)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderSubgroupClock = Unchecked.defaultof<VkBool32> && x.shaderDeviceClock = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderClockFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderSubgroupClock = %A" x.shaderSubgroupClock
                        sprintf "shaderDeviceClock = %A" x.shaderDeviceClock
                    ] |> sprintf "VkPhysicalDeviceShaderClockFeaturesKHR { %s }"
            end



    module AMDPipelineCompilerControl =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_pipeline_compiler_control"
        let Number = 184

        [<Flags>]
        type VkPipelineCompilerControlFlagsAMD =
            | All = 0
            | None = 0


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineCompilerControlCreateInfoAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public compilerControlFlags : VkPipelineCompilerControlFlagsAMD

                new(pNext: nativeint, compilerControlFlags: VkPipelineCompilerControlFlagsAMD) =
                    {
                        sType = 1000183000u
                        pNext = pNext
                        compilerControlFlags = compilerControlFlags
                    }

                new(compilerControlFlags: VkPipelineCompilerControlFlagsAMD) =
                    VkPipelineCompilerControlCreateInfoAMD(Unchecked.defaultof<nativeint>, compilerControlFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.compilerControlFlags = Unchecked.defaultof<VkPipelineCompilerControlFlagsAMD>

                static member Empty =
                    VkPipelineCompilerControlCreateInfoAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCompilerControlFlagsAMD>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "compilerControlFlags = %A" x.compilerControlFlags
                    ] |> sprintf "VkPipelineCompilerControlCreateInfoAMD { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to KHRCalibratedTimestamps.
    module EXTCalibratedTimestamps =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_calibrated_timestamps"
        let Number = 185

        type VkTimeDomainEXT = KHRCalibratedTimestamps.VkTimeDomainKHR

        type VkCalibratedTimestampInfoEXT = KHRCalibratedTimestamps.VkCalibratedTimestampInfoKHR


        [<AutoOpen>]
        module EnumExtensions =
             type KHRCalibratedTimestamps.VkTimeDomainKHR with
                  static member inline DeviceExt = enum<KHRCalibratedTimestamps.VkTimeDomainKHR> 0
                  static member inline ClockMonotonicExt = enum<KHRCalibratedTimestamps.VkTimeDomainKHR> 1
                  static member inline ClockMonotonicRawExt = enum<KHRCalibratedTimestamps.VkTimeDomainKHR> 2
                  static member inline QueryPerformanceCounterExt = enum<KHRCalibratedTimestamps.VkTimeDomainKHR> 3

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceCalibrateableTimeDomainsEXTDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<KHRCalibratedTimestamps.VkTimeDomainKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetCalibratedTimestampsEXTDel = delegate of VkDevice * uint32 * nativeptr<KHRCalibratedTimestamps.VkCalibratedTimestampInfoKHR> * nativeptr<uint64> * nativeptr<uint64> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTCalibratedTimestamps")
                static let s_vkGetPhysicalDeviceCalibrateableTimeDomainsEXTDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceCalibrateableTimeDomainsEXTDel> "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"
                static let s_vkGetCalibratedTimestampsEXTDel = VkRaw.vkImportInstanceDelegate<VkGetCalibratedTimestampsEXTDel> "vkGetCalibratedTimestampsEXT"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = s_vkGetPhysicalDeviceCalibrateableTimeDomainsEXTDel
                static member vkGetCalibratedTimestampsEXT = s_vkGetCalibratedTimestampsEXTDel
            let vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice : VkPhysicalDevice, pTimeDomainCount : nativeptr<uint32>, pTimeDomains : nativeptr<KHRCalibratedTimestamps.VkTimeDomainKHR>) = Loader<unit>.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT.Invoke(physicalDevice, pTimeDomainCount, pTimeDomains)
            let vkGetCalibratedTimestampsEXT(device : VkDevice, timestampCount : uint32, pTimestampInfos : nativeptr<KHRCalibratedTimestamps.VkCalibratedTimestampInfoKHR>, pTimestamps : nativeptr<uint64>, pMaxDeviation : nativeptr<uint64>) = Loader<unit>.vkGetCalibratedTimestampsEXT.Invoke(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module AMDShaderCoreProperties =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_shader_core_properties"
        let Number = 186

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderCorePropertiesAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderEngineCount : uint32
                val mutable public shaderArraysPerEngineCount : uint32
                val mutable public computeUnitsPerShaderArray : uint32
                val mutable public simdPerComputeUnit : uint32
                val mutable public wavefrontsPerSimd : uint32
                val mutable public wavefrontSize : uint32
                val mutable public sgprsPerSimd : uint32
                val mutable public minSgprAllocation : uint32
                val mutable public maxSgprAllocation : uint32
                val mutable public sgprAllocationGranularity : uint32
                val mutable public vgprsPerSimd : uint32
                val mutable public minVgprAllocation : uint32
                val mutable public maxVgprAllocation : uint32
                val mutable public vgprAllocationGranularity : uint32

                new(pNext: nativeint, shaderEngineCount: uint32, shaderArraysPerEngineCount: uint32, computeUnitsPerShaderArray: uint32, simdPerComputeUnit: uint32, wavefrontsPerSimd: uint32, wavefrontSize: uint32, sgprsPerSimd: uint32, minSgprAllocation: uint32, maxSgprAllocation: uint32, sgprAllocationGranularity: uint32, vgprsPerSimd: uint32, minVgprAllocation: uint32, maxVgprAllocation: uint32, vgprAllocationGranularity: uint32) =
                    {
                        sType = 1000185000u
                        pNext = pNext
                        shaderEngineCount = shaderEngineCount
                        shaderArraysPerEngineCount = shaderArraysPerEngineCount
                        computeUnitsPerShaderArray = computeUnitsPerShaderArray
                        simdPerComputeUnit = simdPerComputeUnit
                        wavefrontsPerSimd = wavefrontsPerSimd
                        wavefrontSize = wavefrontSize
                        sgprsPerSimd = sgprsPerSimd
                        minSgprAllocation = minSgprAllocation
                        maxSgprAllocation = maxSgprAllocation
                        sgprAllocationGranularity = sgprAllocationGranularity
                        vgprsPerSimd = vgprsPerSimd
                        minVgprAllocation = minVgprAllocation
                        maxVgprAllocation = maxVgprAllocation
                        vgprAllocationGranularity = vgprAllocationGranularity
                    }

                new(shaderEngineCount: uint32, shaderArraysPerEngineCount: uint32, computeUnitsPerShaderArray: uint32, simdPerComputeUnit: uint32, wavefrontsPerSimd: uint32, wavefrontSize: uint32, sgprsPerSimd: uint32, minSgprAllocation: uint32, maxSgprAllocation: uint32, sgprAllocationGranularity: uint32, vgprsPerSimd: uint32, minVgprAllocation: uint32, maxVgprAllocation: uint32, vgprAllocationGranularity: uint32) =
                    VkPhysicalDeviceShaderCorePropertiesAMD(Unchecked.defaultof<nativeint>, shaderEngineCount, shaderArraysPerEngineCount, computeUnitsPerShaderArray, simdPerComputeUnit, wavefrontsPerSimd, wavefrontSize, sgprsPerSimd, minSgprAllocation, maxSgprAllocation, sgprAllocationGranularity, vgprsPerSimd, minVgprAllocation, maxVgprAllocation, vgprAllocationGranularity)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderEngineCount = Unchecked.defaultof<uint32> && x.shaderArraysPerEngineCount = Unchecked.defaultof<uint32> && x.computeUnitsPerShaderArray = Unchecked.defaultof<uint32> && x.simdPerComputeUnit = Unchecked.defaultof<uint32> && x.wavefrontsPerSimd = Unchecked.defaultof<uint32> && x.wavefrontSize = Unchecked.defaultof<uint32> && x.sgprsPerSimd = Unchecked.defaultof<uint32> && x.minSgprAllocation = Unchecked.defaultof<uint32> && x.maxSgprAllocation = Unchecked.defaultof<uint32> && x.sgprAllocationGranularity = Unchecked.defaultof<uint32> && x.vgprsPerSimd = Unchecked.defaultof<uint32> && x.minVgprAllocation = Unchecked.defaultof<uint32> && x.maxVgprAllocation = Unchecked.defaultof<uint32> && x.vgprAllocationGranularity = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceShaderCorePropertiesAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderEngineCount = %A" x.shaderEngineCount
                        sprintf "shaderArraysPerEngineCount = %A" x.shaderArraysPerEngineCount
                        sprintf "computeUnitsPerShaderArray = %A" x.computeUnitsPerShaderArray
                        sprintf "simdPerComputeUnit = %A" x.simdPerComputeUnit
                        sprintf "wavefrontsPerSimd = %A" x.wavefrontsPerSimd
                        sprintf "wavefrontSize = %A" x.wavefrontSize
                        sprintf "sgprsPerSimd = %A" x.sgprsPerSimd
                        sprintf "minSgprAllocation = %A" x.minSgprAllocation
                        sprintf "maxSgprAllocation = %A" x.maxSgprAllocation
                        sprintf "sgprAllocationGranularity = %A" x.sgprAllocationGranularity
                        sprintf "vgprsPerSimd = %A" x.vgprsPerSimd
                        sprintf "minVgprAllocation = %A" x.minVgprAllocation
                        sprintf "maxVgprAllocation = %A" x.maxVgprAllocation
                        sprintf "vgprAllocationGranularity = %A" x.vgprAllocationGranularity
                    ] |> sprintf "VkPhysicalDeviceShaderCorePropertiesAMD { %s }"
            end



    /// Requires KHRVideoDecodeQueue.
    module KHRVideoDecodeH265 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_video_decode_h265"
        let Number = 188

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeH265CapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxLevelIdc : nativeint

                new(pNext: nativeint, maxLevelIdc: nativeint) =
                    {
                        sType = 1000187000u
                        pNext = pNext
                        maxLevelIdc = maxLevelIdc
                    }

                new(maxLevelIdc: nativeint) =
                    VkVideoDecodeH265CapabilitiesKHR(Unchecked.defaultof<nativeint>, maxLevelIdc)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxLevelIdc = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkVideoDecodeH265CapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxLevelIdc = %A" x.maxLevelIdc
                    ] |> sprintf "VkVideoDecodeH265CapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeH265DpbSlotInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pStdReferenceInfo : nativeptr<nativeint>

                new(pNext: nativeint, pStdReferenceInfo: nativeptr<nativeint>) =
                    {
                        sType = 1000187005u
                        pNext = pNext
                        pStdReferenceInfo = pStdReferenceInfo
                    }

                new(pStdReferenceInfo: nativeptr<nativeint>) =
                    VkVideoDecodeH265DpbSlotInfoKHR(Unchecked.defaultof<nativeint>, pStdReferenceInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pStdReferenceInfo = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoDecodeH265DpbSlotInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pStdReferenceInfo = %A" x.pStdReferenceInfo
                    ] |> sprintf "VkVideoDecodeH265DpbSlotInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeH265PictureInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pStdPictureInfo : nativeptr<nativeint>
                val mutable public sliceSegmentCount : uint32
                val mutable public pSliceSegmentOffsets : nativeptr<uint32>

                new(pNext: nativeint, pStdPictureInfo: nativeptr<nativeint>, sliceSegmentCount: uint32, pSliceSegmentOffsets: nativeptr<uint32>) =
                    {
                        sType = 1000187004u
                        pNext = pNext
                        pStdPictureInfo = pStdPictureInfo
                        sliceSegmentCount = sliceSegmentCount
                        pSliceSegmentOffsets = pSliceSegmentOffsets
                    }

                new(pStdPictureInfo: nativeptr<nativeint>, sliceSegmentCount: uint32, pSliceSegmentOffsets: nativeptr<uint32>) =
                    VkVideoDecodeH265PictureInfoKHR(Unchecked.defaultof<nativeint>, pStdPictureInfo, sliceSegmentCount, pSliceSegmentOffsets)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pStdPictureInfo = Unchecked.defaultof<nativeptr<nativeint>> && x.sliceSegmentCount = Unchecked.defaultof<uint32> && x.pSliceSegmentOffsets = Unchecked.defaultof<nativeptr<uint32>>

                static member Empty =
                    VkVideoDecodeH265PictureInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pStdPictureInfo = %A" x.pStdPictureInfo
                        sprintf "sliceSegmentCount = %A" x.sliceSegmentCount
                        sprintf "pSliceSegmentOffsets = %A" x.pSliceSegmentOffsets
                    ] |> sprintf "VkVideoDecodeH265PictureInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeH265ProfileInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stdProfileIdc : nativeint

                new(pNext: nativeint, stdProfileIdc: nativeint) =
                    {
                        sType = 1000187003u
                        pNext = pNext
                        stdProfileIdc = stdProfileIdc
                    }

                new(stdProfileIdc: nativeint) =
                    VkVideoDecodeH265ProfileInfoKHR(Unchecked.defaultof<nativeint>, stdProfileIdc)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stdProfileIdc = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkVideoDecodeH265ProfileInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stdProfileIdc = %A" x.stdProfileIdc
                    ] |> sprintf "VkVideoDecodeH265ProfileInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeH265SessionParametersAddInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stdVPSCount : uint32
                val mutable public pStdVPSs : nativeptr<nativeint>
                val mutable public stdSPSCount : uint32
                val mutable public pStdSPSs : nativeptr<nativeint>
                val mutable public stdPPSCount : uint32
                val mutable public pStdPPSs : nativeptr<nativeint>

                new(pNext: nativeint, stdVPSCount: uint32, pStdVPSs: nativeptr<nativeint>, stdSPSCount: uint32, pStdSPSs: nativeptr<nativeint>, stdPPSCount: uint32, pStdPPSs: nativeptr<nativeint>) =
                    {
                        sType = 1000187002u
                        pNext = pNext
                        stdVPSCount = stdVPSCount
                        pStdVPSs = pStdVPSs
                        stdSPSCount = stdSPSCount
                        pStdSPSs = pStdSPSs
                        stdPPSCount = stdPPSCount
                        pStdPPSs = pStdPPSs
                    }

                new(stdVPSCount: uint32, pStdVPSs: nativeptr<nativeint>, stdSPSCount: uint32, pStdSPSs: nativeptr<nativeint>, stdPPSCount: uint32, pStdPPSs: nativeptr<nativeint>) =
                    VkVideoDecodeH265SessionParametersAddInfoKHR(Unchecked.defaultof<nativeint>, stdVPSCount, pStdVPSs, stdSPSCount, pStdSPSs, stdPPSCount, pStdPPSs)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stdVPSCount = Unchecked.defaultof<uint32> && x.pStdVPSs = Unchecked.defaultof<nativeptr<nativeint>> && x.stdSPSCount = Unchecked.defaultof<uint32> && x.pStdSPSs = Unchecked.defaultof<nativeptr<nativeint>> && x.stdPPSCount = Unchecked.defaultof<uint32> && x.pStdPPSs = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoDecodeH265SessionParametersAddInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stdVPSCount = %A" x.stdVPSCount
                        sprintf "pStdVPSs = %A" x.pStdVPSs
                        sprintf "stdSPSCount = %A" x.stdSPSCount
                        sprintf "pStdSPSs = %A" x.pStdSPSs
                        sprintf "stdPPSCount = %A" x.stdPPSCount
                        sprintf "pStdPPSs = %A" x.pStdPPSs
                    ] |> sprintf "VkVideoDecodeH265SessionParametersAddInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeH265SessionParametersCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxStdVPSCount : uint32
                val mutable public maxStdSPSCount : uint32
                val mutable public maxStdPPSCount : uint32
                val mutable public pParametersAddInfo : nativeptr<VkVideoDecodeH265SessionParametersAddInfoKHR>

                new(pNext: nativeint, maxStdVPSCount: uint32, maxStdSPSCount: uint32, maxStdPPSCount: uint32, pParametersAddInfo: nativeptr<VkVideoDecodeH265SessionParametersAddInfoKHR>) =
                    {
                        sType = 1000187001u
                        pNext = pNext
                        maxStdVPSCount = maxStdVPSCount
                        maxStdSPSCount = maxStdSPSCount
                        maxStdPPSCount = maxStdPPSCount
                        pParametersAddInfo = pParametersAddInfo
                    }

                new(maxStdVPSCount: uint32, maxStdSPSCount: uint32, maxStdPPSCount: uint32, pParametersAddInfo: nativeptr<VkVideoDecodeH265SessionParametersAddInfoKHR>) =
                    VkVideoDecodeH265SessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, maxStdVPSCount, maxStdSPSCount, maxStdPPSCount, pParametersAddInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxStdVPSCount = Unchecked.defaultof<uint32> && x.maxStdSPSCount = Unchecked.defaultof<uint32> && x.maxStdPPSCount = Unchecked.defaultof<uint32> && x.pParametersAddInfo = Unchecked.defaultof<nativeptr<VkVideoDecodeH265SessionParametersAddInfoKHR>>

                static member Empty =
                    VkVideoDecodeH265SessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoDecodeH265SessionParametersAddInfoKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxStdVPSCount = %A" x.maxStdVPSCount
                        sprintf "maxStdSPSCount = %A" x.maxStdSPSCount
                        sprintf "maxStdPPSCount = %A" x.maxStdPPSCount
                        sprintf "pParametersAddInfo = %A" x.pParametersAddInfo
                    ] |> sprintf "VkVideoDecodeH265SessionParametersCreateInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRVideoQueue.VkVideoCodecOperationFlagsKHR with
                  static member inline DecodeH265Bit = enum<KHRVideoQueue.VkVideoCodecOperationFlagsKHR> 0x00000002


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan14.
    module KHRGlobalPriority =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_global_priority"
        let Number = 189

        type VkQueueGlobalPriorityKHR = Vulkan14.VkQueueGlobalPriority

        type VkDeviceQueueGlobalPriorityCreateInfoKHR = Vulkan14.VkDeviceQueueGlobalPriorityCreateInfo

        type VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR = Vulkan14.VkPhysicalDeviceGlobalPriorityQueryFeatures

        type VkQueueFamilyGlobalPriorityPropertiesKHR = Vulkan14.VkQueueFamilyGlobalPriorityProperties


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan14.VkQueueGlobalPriority with
                  static member inline LowKhr = enum<Vulkan14.VkQueueGlobalPriority> 128
                  static member inline MediumKhr = enum<Vulkan14.VkQueueGlobalPriority> 256
                  static member inline HighKhr = enum<Vulkan14.VkQueueGlobalPriority> 512
                  static member inline RealtimeKhr = enum<Vulkan14.VkQueueGlobalPriority> 1024
             type VkResult with
                  static member inline ErrorNotPermittedKhr = enum<VkResult> 1000174001


    module AMDMemoryOverallocationBehavior =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_memory_overallocation_behavior"
        let Number = 190

        type VkMemoryOverallocationBehaviorAMD =
            | Default = 0
            | Allowed = 1
            | Disallowed = 2


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceMemoryOverallocationCreateInfoAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public overallocationBehavior : VkMemoryOverallocationBehaviorAMD

                new(pNext: nativeint, overallocationBehavior: VkMemoryOverallocationBehaviorAMD) =
                    {
                        sType = 1000189000u
                        pNext = pNext
                        overallocationBehavior = overallocationBehavior
                    }

                new(overallocationBehavior: VkMemoryOverallocationBehaviorAMD) =
                    VkDeviceMemoryOverallocationCreateInfoAMD(Unchecked.defaultof<nativeint>, overallocationBehavior)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.overallocationBehavior = Unchecked.defaultof<VkMemoryOverallocationBehaviorAMD>

                static member Empty =
                    VkDeviceMemoryOverallocationCreateInfoAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMemoryOverallocationBehaviorAMD>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "overallocationBehavior = %A" x.overallocationBehavior
                    ] |> sprintf "VkDeviceMemoryOverallocationCreateInfoAMD { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to KHRVertexAttributeDivisor.
    module EXTVertexAttributeDivisor =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_vertex_attribute_divisor"
        let Number = 191

        type VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = Vulkan14.VkPhysicalDeviceVertexAttributeDivisorFeatures

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxVertexAttribDivisor : uint32

                new(pNext: nativeint, maxVertexAttribDivisor: uint32) =
                    {
                        sType = 1000190000u
                        pNext = pNext
                        maxVertexAttribDivisor = maxVertexAttribDivisor
                    }

                new(maxVertexAttribDivisor: uint32) =
                    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(Unchecked.defaultof<nativeint>, maxVertexAttribDivisor)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxVertexAttribDivisor = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxVertexAttribDivisor = %A" x.maxVertexAttribDivisor
                    ] |> sprintf "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT { %s }"
            end

        type VkPipelineVertexInputDivisorStateCreateInfoEXT = Vulkan14.VkPipelineVertexInputDivisorStateCreateInfo

        type VkVertexInputBindingDivisorDescriptionEXT = Vulkan14.VkVertexInputBindingDivisorDescription



    /// Requires KHRSwapchain, GGPStreamDescriptorSurface.
    module GGPFrameToken =
        let Type = ExtensionType.Device
        let Name = "VK_GGP_frame_token"
        let Number = 192

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPresentFrameTokenGGP =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public frameToken : nativeint

                new(pNext: nativeint, frameToken: nativeint) =
                    {
                        sType = 1000191000u
                        pNext = pNext
                        frameToken = frameToken
                    }

                new(frameToken: nativeint) =
                    VkPresentFrameTokenGGP(Unchecked.defaultof<nativeint>, frameToken)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.frameToken = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkPresentFrameTokenGGP(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "frameToken = %A" x.frameToken
                    ] |> sprintf "VkPresentFrameTokenGGP { %s }"
            end



    /// Promoted to Vulkan13.
    module EXTPipelineCreationFeedback =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_pipeline_creation_feedback"
        let Number = 193

        type VkPipelineCreationFeedbackFlagsEXT = Vulkan13.VkPipelineCreationFeedbackFlags

        type VkPipelineCreationFeedbackCreateInfoEXT = Vulkan13.VkPipelineCreationFeedbackCreateInfo

        type VkPipelineCreationFeedbackEXT = Vulkan13.VkPipelineCreationFeedback


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkPipelineCreationFeedbackFlags with
                  static member inline ValidBitExt = enum<Vulkan13.VkPipelineCreationFeedbackFlags> 0x00000001
                  static member inline ApplicationPipelineCacheHitBitExt = enum<Vulkan13.VkPipelineCreationFeedbackFlags> 0x00000002
                  static member inline BasePipelineAccelerationBitExt = enum<Vulkan13.VkPipelineCreationFeedbackFlags> 0x00000004


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan12.
    module KHRDriverProperties =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_driver_properties"
        let Number = 197

        type VkDriverIdKHR = Vulkan12.VkDriverId

        type VkConformanceVersionKHR = Vulkan12.VkConformanceVersion

        type VkPhysicalDeviceDriverPropertiesKHR = Vulkan12.VkPhysicalDeviceDriverProperties


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan12.VkDriverId with
                  static member inline AmdProprietaryKhr = enum<Vulkan12.VkDriverId> 1
                  static member inline AmdOpenSourceKhr = enum<Vulkan12.VkDriverId> 2
                  static member inline MesaRadvKhr = enum<Vulkan12.VkDriverId> 3
                  static member inline NvidiaProprietaryKhr = enum<Vulkan12.VkDriverId> 4
                  static member inline IntelProprietaryWindowsKhr = enum<Vulkan12.VkDriverId> 5
                  static member inline IntelOpenSourceMesaKhr = enum<Vulkan12.VkDriverId> 6
                  static member inline ImaginationProprietaryKhr = enum<Vulkan12.VkDriverId> 7
                  static member inline QualcommProprietaryKhr = enum<Vulkan12.VkDriverId> 8
                  static member inline ArmProprietaryKhr = enum<Vulkan12.VkDriverId> 9
                  static member inline GoogleSwiftshaderKhr = enum<Vulkan12.VkDriverId> 10
                  static member inline GgpProprietaryKhr = enum<Vulkan12.VkDriverId> 11
                  static member inline BroadcomProprietaryKhr = enum<Vulkan12.VkDriverId> 12


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan12.
    module KHRShaderFloatControls =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_float_controls"
        let Number = 198

        type VkShaderFloatControlsIndependenceKHR = Vulkan12.VkShaderFloatControlsIndependence

        type VkPhysicalDeviceFloatControlsPropertiesKHR = Vulkan12.VkPhysicalDeviceFloatControlsProperties


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan12.VkShaderFloatControlsIndependence with
                  static member inline D32BitOnlyKhr = enum<Vulkan12.VkShaderFloatControlsIndependence> 0
                  static member inline AllKhr = enum<Vulkan12.VkShaderFloatControlsIndependence> 1
                  static member inline NoneKhr = enum<Vulkan12.VkShaderFloatControlsIndependence> 2


    /// Requires Vulkan11.
    module NVShaderSubgroupPartitioned =
        let Type = ExtensionType.Device
        let Name = "VK_NV_shader_subgroup_partitioned"
        let Number = 199

        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkSubgroupFeatureFlags with
                  static member inline PartitionedBitNv = enum<Vulkan11.VkSubgroupFeatureFlags> 0x00000100


    /// Requires KHRCreateRenderpass2 | Vulkan12.
    /// Promoted to Vulkan12.
    module KHRDepthStencilResolve =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_depth_stencil_resolve"
        let Number = 200

        type VkResolveModeFlagsKHR = Vulkan12.VkResolveModeFlags

        type VkPhysicalDeviceDepthStencilResolvePropertiesKHR = Vulkan12.VkPhysicalDeviceDepthStencilResolveProperties

        type VkSubpassDescriptionDepthStencilResolveKHR = Vulkan12.VkSubpassDescriptionDepthStencilResolve


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan12.VkResolveModeFlags with
                  static member inline NoneKhr = enum<Vulkan12.VkResolveModeFlags> 0
                  static member inline SampleZeroBitKhr = enum<Vulkan12.VkResolveModeFlags> 0x00000001
                  static member inline AverageBitKhr = enum<Vulkan12.VkResolveModeFlags> 0x00000002
                  static member inline MinBitKhr = enum<Vulkan12.VkResolveModeFlags> 0x00000004
                  static member inline MaxBitKhr = enum<Vulkan12.VkResolveModeFlags> 0x00000008


    /// Requires KHRSwapchain, (KHRMaintenance2 | Vulkan11), (KHRImageFormatList | Vulkan12).
    module KHRSwapchainMutableFormat =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_swapchain_mutable_format"
        let Number = 201

        [<AutoOpen>]
        module EnumExtensions =
             type KHRSwapchain.VkSwapchainCreateFlagsKHR with
                  static member inline MutableFormatBit = enum<KHRSwapchain.VkSwapchainCreateFlagsKHR> 0x00000004


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to KHRComputeShaderDerivatives.
    module NVComputeShaderDerivatives =
        let Type = ExtensionType.Device
        let Name = "VK_NV_compute_shader_derivatives"
        let Number = 202

        type VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = KHRComputeShaderDerivatives.VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module NVMeshShader =
        let Type = ExtensionType.Device
        let Name = "VK_NV_mesh_shader"
        let Number = 203

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDrawMeshTasksIndirectCommandNV =
            struct
                val mutable public taskCount : uint32
                val mutable public firstTask : uint32

                new(taskCount: uint32, firstTask: uint32) =
                    {
                        taskCount = taskCount
                        firstTask = firstTask
                    }

                member x.IsEmpty =
                    x.taskCount = Unchecked.defaultof<uint32> && x.firstTask = Unchecked.defaultof<uint32>

                static member Empty =
                    VkDrawMeshTasksIndirectCommandNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "taskCount = %A" x.taskCount
                        sprintf "firstTask = %A" x.firstTask
                    ] |> sprintf "VkDrawMeshTasksIndirectCommandNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMeshShaderFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public taskShader : VkBool32
                val mutable public meshShader : VkBool32

                new(pNext: nativeint, taskShader: VkBool32, meshShader: VkBool32) =
                    {
                        sType = 1000202000u
                        pNext = pNext
                        taskShader = taskShader
                        meshShader = meshShader
                    }

                new(taskShader: VkBool32, meshShader: VkBool32) =
                    VkPhysicalDeviceMeshShaderFeaturesNV(Unchecked.defaultof<nativeint>, taskShader, meshShader)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.taskShader = Unchecked.defaultof<VkBool32> && x.meshShader = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMeshShaderFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "taskShader = %A" x.taskShader
                        sprintf "meshShader = %A" x.meshShader
                    ] |> sprintf "VkPhysicalDeviceMeshShaderFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMeshShaderPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxDrawMeshTasksCount : uint32
                val mutable public maxTaskWorkGroupInvocations : uint32
                val mutable public maxTaskWorkGroupSize : V3ui
                val mutable public maxTaskTotalMemorySize : uint32
                val mutable public maxTaskOutputCount : uint32
                val mutable public maxMeshWorkGroupInvocations : uint32
                val mutable public maxMeshWorkGroupSize : V3ui
                val mutable public maxMeshTotalMemorySize : uint32
                val mutable public maxMeshOutputVertices : uint32
                val mutable public maxMeshOutputPrimitives : uint32
                val mutable public maxMeshMultiviewViewCount : uint32
                val mutable public meshOutputPerVertexGranularity : uint32
                val mutable public meshOutputPerPrimitiveGranularity : uint32

                new(pNext: nativeint, maxDrawMeshTasksCount: uint32, maxTaskWorkGroupInvocations: uint32, maxTaskWorkGroupSize: V3ui, maxTaskTotalMemorySize: uint32, maxTaskOutputCount: uint32, maxMeshWorkGroupInvocations: uint32, maxMeshWorkGroupSize: V3ui, maxMeshTotalMemorySize: uint32, maxMeshOutputVertices: uint32, maxMeshOutputPrimitives: uint32, maxMeshMultiviewViewCount: uint32, meshOutputPerVertexGranularity: uint32, meshOutputPerPrimitiveGranularity: uint32) =
                    {
                        sType = 1000202001u
                        pNext = pNext
                        maxDrawMeshTasksCount = maxDrawMeshTasksCount
                        maxTaskWorkGroupInvocations = maxTaskWorkGroupInvocations
                        maxTaskWorkGroupSize = maxTaskWorkGroupSize
                        maxTaskTotalMemorySize = maxTaskTotalMemorySize
                        maxTaskOutputCount = maxTaskOutputCount
                        maxMeshWorkGroupInvocations = maxMeshWorkGroupInvocations
                        maxMeshWorkGroupSize = maxMeshWorkGroupSize
                        maxMeshTotalMemorySize = maxMeshTotalMemorySize
                        maxMeshOutputVertices = maxMeshOutputVertices
                        maxMeshOutputPrimitives = maxMeshOutputPrimitives
                        maxMeshMultiviewViewCount = maxMeshMultiviewViewCount
                        meshOutputPerVertexGranularity = meshOutputPerVertexGranularity
                        meshOutputPerPrimitiveGranularity = meshOutputPerPrimitiveGranularity
                    }

                new(maxDrawMeshTasksCount: uint32, maxTaskWorkGroupInvocations: uint32, maxTaskWorkGroupSize: V3ui, maxTaskTotalMemorySize: uint32, maxTaskOutputCount: uint32, maxMeshWorkGroupInvocations: uint32, maxMeshWorkGroupSize: V3ui, maxMeshTotalMemorySize: uint32, maxMeshOutputVertices: uint32, maxMeshOutputPrimitives: uint32, maxMeshMultiviewViewCount: uint32, meshOutputPerVertexGranularity: uint32, meshOutputPerPrimitiveGranularity: uint32) =
                    VkPhysicalDeviceMeshShaderPropertiesNV(Unchecked.defaultof<nativeint>, maxDrawMeshTasksCount, maxTaskWorkGroupInvocations, maxTaskWorkGroupSize, maxTaskTotalMemorySize, maxTaskOutputCount, maxMeshWorkGroupInvocations, maxMeshWorkGroupSize, maxMeshTotalMemorySize, maxMeshOutputVertices, maxMeshOutputPrimitives, maxMeshMultiviewViewCount, meshOutputPerVertexGranularity, meshOutputPerPrimitiveGranularity)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxDrawMeshTasksCount = Unchecked.defaultof<uint32> && x.maxTaskWorkGroupInvocations = Unchecked.defaultof<uint32> && x.maxTaskWorkGroupSize = Unchecked.defaultof<V3ui> && x.maxTaskTotalMemorySize = Unchecked.defaultof<uint32> && x.maxTaskOutputCount = Unchecked.defaultof<uint32> && x.maxMeshWorkGroupInvocations = Unchecked.defaultof<uint32> && x.maxMeshWorkGroupSize = Unchecked.defaultof<V3ui> && x.maxMeshTotalMemorySize = Unchecked.defaultof<uint32> && x.maxMeshOutputVertices = Unchecked.defaultof<uint32> && x.maxMeshOutputPrimitives = Unchecked.defaultof<uint32> && x.maxMeshMultiviewViewCount = Unchecked.defaultof<uint32> && x.meshOutputPerVertexGranularity = Unchecked.defaultof<uint32> && x.meshOutputPerPrimitiveGranularity = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceMeshShaderPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxDrawMeshTasksCount = %A" x.maxDrawMeshTasksCount
                        sprintf "maxTaskWorkGroupInvocations = %A" x.maxTaskWorkGroupInvocations
                        sprintf "maxTaskWorkGroupSize = %A" x.maxTaskWorkGroupSize
                        sprintf "maxTaskTotalMemorySize = %A" x.maxTaskTotalMemorySize
                        sprintf "maxTaskOutputCount = %A" x.maxTaskOutputCount
                        sprintf "maxMeshWorkGroupInvocations = %A" x.maxMeshWorkGroupInvocations
                        sprintf "maxMeshWorkGroupSize = %A" x.maxMeshWorkGroupSize
                        sprintf "maxMeshTotalMemorySize = %A" x.maxMeshTotalMemorySize
                        sprintf "maxMeshOutputVertices = %A" x.maxMeshOutputVertices
                        sprintf "maxMeshOutputPrimitives = %A" x.maxMeshOutputPrimitives
                        sprintf "maxMeshMultiviewViewCount = %A" x.maxMeshMultiviewViewCount
                        sprintf "meshOutputPerVertexGranularity = %A" x.meshOutputPerVertexGranularity
                        sprintf "meshOutputPerPrimitiveGranularity = %A" x.meshOutputPerPrimitiveGranularity
                    ] |> sprintf "VkPhysicalDeviceMeshShaderPropertiesNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineStageFlags with
                  static member inline TaskShaderBitNv = enum<VkPipelineStageFlags> 0x00080000
                  static member inline MeshShaderBitNv = enum<VkPipelineStageFlags> 0x00100000
             type VkShaderStageFlags with
                  static member inline TaskBitNv = enum<VkShaderStageFlags> 0x00000040
                  static member inline MeshBitNv = enum<VkShaderStageFlags> 0x00000080

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawMeshTasksNVDel = delegate of VkCommandBuffer * uint32 * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawMeshTasksIndirectNVDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVMeshShader")
                static let s_vkCmdDrawMeshTasksNVDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMeshTasksNVDel> "vkCmdDrawMeshTasksNV"
                static let s_vkCmdDrawMeshTasksIndirectNVDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMeshTasksIndirectNVDel> "vkCmdDrawMeshTasksIndirectNV"
                static do Report.End(3) |> ignore
                static member vkCmdDrawMeshTasksNV = s_vkCmdDrawMeshTasksNVDel
                static member vkCmdDrawMeshTasksIndirectNV = s_vkCmdDrawMeshTasksIndirectNVDel
            let vkCmdDrawMeshTasksNV(commandBuffer : VkCommandBuffer, taskCount : uint32, firstTask : uint32) = Loader<unit>.vkCmdDrawMeshTasksNV.Invoke(commandBuffer, taskCount, firstTask)
            let vkCmdDrawMeshTasksIndirectNV(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, drawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawMeshTasksIndirectNV.Invoke(commandBuffer, buffer, offset, drawCount, stride)

        [<AutoOpen>]
        module ``KHRDrawIndirectCount | Vulkan12`` =
            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdDrawMeshTasksIndirectCountNVDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading NVMeshShader -> KHRDrawIndirectCount | Vulkan12")
                    static let s_vkCmdDrawMeshTasksIndirectCountNVDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMeshTasksIndirectCountNVDel> "vkCmdDrawMeshTasksIndirectCountNV"
                    static do Report.End(3) |> ignore
                    static member vkCmdDrawMeshTasksIndirectCountNV = s_vkCmdDrawMeshTasksIndirectCountNVDel
                let vkCmdDrawMeshTasksIndirectCountNV(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, countBuffer : VkBuffer, countBufferOffset : VkDeviceSize, maxDrawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawMeshTasksIndirectCountNV.Invoke(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)

        [<AutoOpen>]
        module ``EXTDeviceGeneratedCommands`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type EXTDeviceGeneratedCommands.VkIndirectCommandsTokenTypeEXT with
                      static member inline DrawMeshTasksNv = enum<EXTDeviceGeneratedCommands.VkIndirectCommandsTokenTypeEXT> 1000202002
                      static member inline DrawMeshTasksCountNv = enum<EXTDeviceGeneratedCommands.VkIndirectCommandsTokenTypeEXT> 1000202003


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to KHRFragmentShaderBarycentric.
    module NVFragmentShaderBarycentric =
        let Type = ExtensionType.Device
        let Name = "VK_NV_fragment_shader_barycentric"
        let Number = 204

        type VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = KHRFragmentShaderBarycentric.VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module NVShaderImageFootprint =
        let Type = ExtensionType.Device
        let Name = "VK_NV_shader_image_footprint"
        let Number = 205

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderImageFootprintFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageFootprint : VkBool32

                new(pNext: nativeint, imageFootprint: VkBool32) =
                    {
                        sType = 1000204000u
                        pNext = pNext
                        imageFootprint = imageFootprint
                    }

                new(imageFootprint: VkBool32) =
                    VkPhysicalDeviceShaderImageFootprintFeaturesNV(Unchecked.defaultof<nativeint>, imageFootprint)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageFootprint = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderImageFootprintFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageFootprint = %A" x.imageFootprint
                    ] |> sprintf "VkPhysicalDeviceShaderImageFootprintFeaturesNV { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module NVScissorExclusive =
        let Type = ExtensionType.Device
        let Name = "VK_NV_scissor_exclusive"
        let Number = 206

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceExclusiveScissorFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public exclusiveScissor : VkBool32

                new(pNext: nativeint, exclusiveScissor: VkBool32) =
                    {
                        sType = 1000205002u
                        pNext = pNext
                        exclusiveScissor = exclusiveScissor
                    }

                new(exclusiveScissor: VkBool32) =
                    VkPhysicalDeviceExclusiveScissorFeaturesNV(Unchecked.defaultof<nativeint>, exclusiveScissor)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.exclusiveScissor = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceExclusiveScissorFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "exclusiveScissor = %A" x.exclusiveScissor
                    ] |> sprintf "VkPhysicalDeviceExclusiveScissorFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineViewportExclusiveScissorStateCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public exclusiveScissorCount : uint32
                val mutable public pExclusiveScissors : nativeptr<VkRect2D>

                new(pNext: nativeint, exclusiveScissorCount: uint32, pExclusiveScissors: nativeptr<VkRect2D>) =
                    {
                        sType = 1000205000u
                        pNext = pNext
                        exclusiveScissorCount = exclusiveScissorCount
                        pExclusiveScissors = pExclusiveScissors
                    }

                new(exclusiveScissorCount: uint32, pExclusiveScissors: nativeptr<VkRect2D>) =
                    VkPipelineViewportExclusiveScissorStateCreateInfoNV(Unchecked.defaultof<nativeint>, exclusiveScissorCount, pExclusiveScissors)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.exclusiveScissorCount = Unchecked.defaultof<uint32> && x.pExclusiveScissors = Unchecked.defaultof<nativeptr<VkRect2D>>

                static member Empty =
                    VkPipelineViewportExclusiveScissorStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRect2D>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "exclusiveScissorCount = %A" x.exclusiveScissorCount
                        sprintf "pExclusiveScissors = %A" x.pExclusiveScissors
                    ] |> sprintf "VkPipelineViewportExclusiveScissorStateCreateInfoNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  static member inline ExclusiveScissorEnableNv = enum<VkDynamicState> 1000205000
                  static member inline ExclusiveScissorNv = enum<VkDynamicState> 1000205001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetExclusiveScissorEnableNVDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkBool32> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetExclusiveScissorNVDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkRect2D> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVScissorExclusive")
                static let s_vkCmdSetExclusiveScissorEnableNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetExclusiveScissorEnableNVDel> "vkCmdSetExclusiveScissorEnableNV"
                static let s_vkCmdSetExclusiveScissorNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetExclusiveScissorNVDel> "vkCmdSetExclusiveScissorNV"
                static do Report.End(3) |> ignore
                static member vkCmdSetExclusiveScissorEnableNV = s_vkCmdSetExclusiveScissorEnableNVDel
                static member vkCmdSetExclusiveScissorNV = s_vkCmdSetExclusiveScissorNVDel
            let vkCmdSetExclusiveScissorEnableNV(commandBuffer : VkCommandBuffer, firstExclusiveScissor : uint32, exclusiveScissorCount : uint32, pExclusiveScissorEnables : nativeptr<VkBool32>) = Loader<unit>.vkCmdSetExclusiveScissorEnableNV.Invoke(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables)
            let vkCmdSetExclusiveScissorNV(commandBuffer : VkCommandBuffer, firstExclusiveScissor : uint32, exclusiveScissorCount : uint32, pExclusiveScissors : nativeptr<VkRect2D>) = Loader<unit>.vkCmdSetExclusiveScissorNV.Invoke(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module NVDeviceDiagnosticCheckpoints =
        let Type = ExtensionType.Device
        let Name = "VK_NV_device_diagnostic_checkpoints"
        let Number = 207

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCheckpointDataNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stage : VkPipelineStageFlags
                val mutable public pCheckpointMarker : nativeint

                new(pNext: nativeint, stage: VkPipelineStageFlags, pCheckpointMarker: nativeint) =
                    {
                        sType = 1000206000u
                        pNext = pNext
                        stage = stage
                        pCheckpointMarker = pCheckpointMarker
                    }

                new(stage: VkPipelineStageFlags, pCheckpointMarker: nativeint) =
                    VkCheckpointDataNV(Unchecked.defaultof<nativeint>, stage, pCheckpointMarker)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stage = Unchecked.defaultof<VkPipelineStageFlags> && x.pCheckpointMarker = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkCheckpointDataNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineStageFlags>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stage = %A" x.stage
                        sprintf "pCheckpointMarker = %A" x.pCheckpointMarker
                    ] |> sprintf "VkCheckpointDataNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkQueueFamilyCheckpointPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public checkpointExecutionStageMask : VkPipelineStageFlags

                new(pNext: nativeint, checkpointExecutionStageMask: VkPipelineStageFlags) =
                    {
                        sType = 1000206001u
                        pNext = pNext
                        checkpointExecutionStageMask = checkpointExecutionStageMask
                    }

                new(checkpointExecutionStageMask: VkPipelineStageFlags) =
                    VkQueueFamilyCheckpointPropertiesNV(Unchecked.defaultof<nativeint>, checkpointExecutionStageMask)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.checkpointExecutionStageMask = Unchecked.defaultof<VkPipelineStageFlags>

                static member Empty =
                    VkQueueFamilyCheckpointPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineStageFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "checkpointExecutionStageMask = %A" x.checkpointExecutionStageMask
                    ] |> sprintf "VkQueueFamilyCheckpointPropertiesNV { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetCheckpointNVDel = delegate of VkCommandBuffer * nativeint -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetQueueCheckpointDataNVDel = delegate of VkQueue * nativeptr<uint32> * nativeptr<VkCheckpointDataNV> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVDeviceDiagnosticCheckpoints")
                static let s_vkCmdSetCheckpointNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetCheckpointNVDel> "vkCmdSetCheckpointNV"
                static let s_vkGetQueueCheckpointDataNVDel = VkRaw.vkImportInstanceDelegate<VkGetQueueCheckpointDataNVDel> "vkGetQueueCheckpointDataNV"
                static do Report.End(3) |> ignore
                static member vkCmdSetCheckpointNV = s_vkCmdSetCheckpointNVDel
                static member vkGetQueueCheckpointDataNV = s_vkGetQueueCheckpointDataNVDel
            let vkCmdSetCheckpointNV(commandBuffer : VkCommandBuffer, pCheckpointMarker : nativeint) = Loader<unit>.vkCmdSetCheckpointNV.Invoke(commandBuffer, pCheckpointMarker)
            let vkGetQueueCheckpointDataNV(queue : VkQueue, pCheckpointDataCount : nativeptr<uint32>, pCheckpointData : nativeptr<VkCheckpointDataNV>) = Loader<unit>.vkGetQueueCheckpointDataNV.Invoke(queue, pCheckpointDataCount, pCheckpointData)

        [<AutoOpen>]
        module ``Vulkan13 | KHRSynchronization2`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkCheckpointData2NV =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public stage : Vulkan13.VkPipelineStageFlags2
                    val mutable public pCheckpointMarker : nativeint

                    new(pNext: nativeint, stage: Vulkan13.VkPipelineStageFlags2, pCheckpointMarker: nativeint) =
                        {
                            sType = 1000314009u
                            pNext = pNext
                            stage = stage
                            pCheckpointMarker = pCheckpointMarker
                        }

                    new(stage: Vulkan13.VkPipelineStageFlags2, pCheckpointMarker: nativeint) =
                        VkCheckpointData2NV(Unchecked.defaultof<nativeint>, stage, pCheckpointMarker)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.stage = Unchecked.defaultof<Vulkan13.VkPipelineStageFlags2> && x.pCheckpointMarker = Unchecked.defaultof<nativeint>

                    static member Empty =
                        VkCheckpointData2NV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Vulkan13.VkPipelineStageFlags2>, Unchecked.defaultof<nativeint>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "stage = %A" x.stage
                            sprintf "pCheckpointMarker = %A" x.pCheckpointMarker
                        ] |> sprintf "VkCheckpointData2NV { %s }"
                end

            [<StructLayout(LayoutKind.Sequential)>]
            type VkQueueFamilyCheckpointProperties2NV =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public checkpointExecutionStageMask : Vulkan13.VkPipelineStageFlags2

                    new(pNext: nativeint, checkpointExecutionStageMask: Vulkan13.VkPipelineStageFlags2) =
                        {
                            sType = 1000314008u
                            pNext = pNext
                            checkpointExecutionStageMask = checkpointExecutionStageMask
                        }

                    new(checkpointExecutionStageMask: Vulkan13.VkPipelineStageFlags2) =
                        VkQueueFamilyCheckpointProperties2NV(Unchecked.defaultof<nativeint>, checkpointExecutionStageMask)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.checkpointExecutionStageMask = Unchecked.defaultof<Vulkan13.VkPipelineStageFlags2>

                    static member Empty =
                        VkQueueFamilyCheckpointProperties2NV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Vulkan13.VkPipelineStageFlags2>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "checkpointExecutionStageMask = %A" x.checkpointExecutionStageMask
                        ] |> sprintf "VkQueueFamilyCheckpointProperties2NV { %s }"
                end


            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkGetQueueCheckpointData2NVDel = delegate of VkQueue * nativeptr<uint32> * nativeptr<VkCheckpointData2NV> -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading NVDeviceDiagnosticCheckpoints -> Vulkan13 | KHRSynchronization2")
                    static let s_vkGetQueueCheckpointData2NVDel = VkRaw.vkImportInstanceDelegate<VkGetQueueCheckpointData2NVDel> "vkGetQueueCheckpointData2NV"
                    static do Report.End(3) |> ignore
                    static member vkGetQueueCheckpointData2NV = s_vkGetQueueCheckpointData2NVDel
                let vkGetQueueCheckpointData2NV(queue : VkQueue, pCheckpointDataCount : nativeptr<uint32>, pCheckpointData : nativeptr<VkCheckpointData2NV>) = Loader<unit>.vkGetQueueCheckpointData2NV.Invoke(queue, pCheckpointDataCount, pCheckpointData)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan12.
    module KHRTimelineSemaphore =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_timeline_semaphore"
        let Number = 208

        type VkSemaphoreTypeKHR = Vulkan12.VkSemaphoreType
        type VkSemaphoreWaitFlagsKHR = Vulkan12.VkSemaphoreWaitFlags

        type VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = Vulkan12.VkPhysicalDeviceTimelineSemaphoreFeatures

        type VkPhysicalDeviceTimelineSemaphorePropertiesKHR = Vulkan12.VkPhysicalDeviceTimelineSemaphoreProperties

        type VkSemaphoreSignalInfoKHR = Vulkan12.VkSemaphoreSignalInfo

        type VkSemaphoreTypeCreateInfoKHR = Vulkan12.VkSemaphoreTypeCreateInfo

        type VkSemaphoreWaitInfoKHR = Vulkan12.VkSemaphoreWaitInfo

        type VkTimelineSemaphoreSubmitInfoKHR = Vulkan12.VkTimelineSemaphoreSubmitInfo


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan12.VkSemaphoreType with
                  static member inline BinaryKhr = enum<Vulkan12.VkSemaphoreType> 0
                  static member inline TimelineKhr = enum<Vulkan12.VkSemaphoreType> 1
             type Vulkan12.VkSemaphoreWaitFlags with
                  static member inline AnyBitKhr = enum<Vulkan12.VkSemaphoreWaitFlags> 0x00000001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetSemaphoreCounterValueKHRDel = delegate of VkDevice * VkSemaphore * nativeptr<uint64> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkWaitSemaphoresKHRDel = delegate of VkDevice * nativeptr<Vulkan12.VkSemaphoreWaitInfo> * uint64 -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkSignalSemaphoreKHRDel = delegate of VkDevice * nativeptr<Vulkan12.VkSemaphoreSignalInfo> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRTimelineSemaphore")
                static let s_vkGetSemaphoreCounterValueKHRDel = VkRaw.vkImportInstanceDelegate<VkGetSemaphoreCounterValueKHRDel> "vkGetSemaphoreCounterValueKHR"
                static let s_vkWaitSemaphoresKHRDel = VkRaw.vkImportInstanceDelegate<VkWaitSemaphoresKHRDel> "vkWaitSemaphoresKHR"
                static let s_vkSignalSemaphoreKHRDel = VkRaw.vkImportInstanceDelegate<VkSignalSemaphoreKHRDel> "vkSignalSemaphoreKHR"
                static do Report.End(3) |> ignore
                static member vkGetSemaphoreCounterValueKHR = s_vkGetSemaphoreCounterValueKHRDel
                static member vkWaitSemaphoresKHR = s_vkWaitSemaphoresKHRDel
                static member vkSignalSemaphoreKHR = s_vkSignalSemaphoreKHRDel
            let vkGetSemaphoreCounterValueKHR(device : VkDevice, semaphore : VkSemaphore, pValue : nativeptr<uint64>) = Loader<unit>.vkGetSemaphoreCounterValueKHR.Invoke(device, semaphore, pValue)
            let vkWaitSemaphoresKHR(device : VkDevice, pWaitInfo : nativeptr<Vulkan12.VkSemaphoreWaitInfo>, timeout : uint64) = Loader<unit>.vkWaitSemaphoresKHR.Invoke(device, pWaitInfo, timeout)
            let vkSignalSemaphoreKHR(device : VkDevice, pSignalInfo : nativeptr<Vulkan12.VkSemaphoreSignalInfo>) = Loader<unit>.vkSignalSemaphoreKHR.Invoke(device, pSignalInfo)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module INTELShaderIntegerFunctions2 =
        let Type = ExtensionType.Device
        let Name = "VK_INTEL_shader_integer_functions2"
        let Number = 210

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderIntegerFunctions2 : VkBool32

                new(pNext: nativeint, shaderIntegerFunctions2: VkBool32) =
                    {
                        sType = 1000209000u
                        pNext = pNext
                        shaderIntegerFunctions2 = shaderIntegerFunctions2
                    }

                new(shaderIntegerFunctions2: VkBool32) =
                    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(Unchecked.defaultof<nativeint>, shaderIntegerFunctions2)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderIntegerFunctions2 = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderIntegerFunctions2 = %A" x.shaderIntegerFunctions2
                    ] |> sprintf "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL { %s }"
            end



    module INTELPerformanceQuery =
        let Type = ExtensionType.Device
        let Name = "VK_INTEL_performance_query"
        let Number = 211


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPerformanceConfigurationINTEL =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkPerformanceConfigurationINTEL(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        type VkPerformanceConfigurationTypeINTEL =
            | CommandQueueMetricsDiscoveryActivated = 0

        type VkQueryPoolSamplingModeINTEL =
            | Manual = 0

        type VkPerformanceOverrideTypeINTEL =
            | NullHardware = 0
            | FlushGpuCaches = 1

        type VkPerformanceParameterTypeINTEL =
            | HwCountersSupported = 0
            | StreamMarkerValidBits = 1

        type VkPerformanceValueTypeINTEL =
            | Uint32 = 0
            | Uint64 = 1
            | Float = 2
            | Bool = 3
            | String = 4


        [<StructLayout(LayoutKind.Sequential)>]
        type VkInitializePerformanceApiInfoINTEL =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pUserData : nativeint

                new(pNext: nativeint, pUserData: nativeint) =
                    {
                        sType = 1000210001u
                        pNext = pNext
                        pUserData = pUserData
                    }

                new(pUserData: nativeint) =
                    VkInitializePerformanceApiInfoINTEL(Unchecked.defaultof<nativeint>, pUserData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pUserData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkInitializePerformanceApiInfoINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pUserData = %A" x.pUserData
                    ] |> sprintf "VkInitializePerformanceApiInfoINTEL { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPerformanceConfigurationAcquireInfoINTEL =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _type : VkPerformanceConfigurationTypeINTEL

                new(pNext: nativeint, _type: VkPerformanceConfigurationTypeINTEL) =
                    {
                        sType = 1000210005u
                        pNext = pNext
                        _type = _type
                    }

                new(_type: VkPerformanceConfigurationTypeINTEL) =
                    VkPerformanceConfigurationAcquireInfoINTEL(Unchecked.defaultof<nativeint>, _type)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkPerformanceConfigurationTypeINTEL>

                static member Empty =
                    VkPerformanceConfigurationAcquireInfoINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPerformanceConfigurationTypeINTEL>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_type = %A" x._type
                    ] |> sprintf "VkPerformanceConfigurationAcquireInfoINTEL { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPerformanceMarkerInfoINTEL =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public marker : uint64

                new(pNext: nativeint, marker: uint64) =
                    {
                        sType = 1000210002u
                        pNext = pNext
                        marker = marker
                    }

                new(marker: uint64) =
                    VkPerformanceMarkerInfoINTEL(Unchecked.defaultof<nativeint>, marker)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.marker = Unchecked.defaultof<uint64>

                static member Empty =
                    VkPerformanceMarkerInfoINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "marker = %A" x.marker
                    ] |> sprintf "VkPerformanceMarkerInfoINTEL { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPerformanceOverrideInfoINTEL =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _type : VkPerformanceOverrideTypeINTEL
                val mutable public enable : VkBool32
                val mutable public parameter : uint64

                new(pNext: nativeint, _type: VkPerformanceOverrideTypeINTEL, enable: VkBool32, parameter: uint64) =
                    {
                        sType = 1000210004u
                        pNext = pNext
                        _type = _type
                        enable = enable
                        parameter = parameter
                    }

                new(_type: VkPerformanceOverrideTypeINTEL, enable: VkBool32, parameter: uint64) =
                    VkPerformanceOverrideInfoINTEL(Unchecked.defaultof<nativeint>, _type, enable, parameter)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkPerformanceOverrideTypeINTEL> && x.enable = Unchecked.defaultof<VkBool32> && x.parameter = Unchecked.defaultof<uint64>

                static member Empty =
                    VkPerformanceOverrideInfoINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPerformanceOverrideTypeINTEL>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_type = %A" x._type
                        sprintf "enable = %A" x.enable
                        sprintf "parameter = %A" x.parameter
                    ] |> sprintf "VkPerformanceOverrideInfoINTEL { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPerformanceStreamMarkerInfoINTEL =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public marker : uint32

                new(pNext: nativeint, marker: uint32) =
                    {
                        sType = 1000210003u
                        pNext = pNext
                        marker = marker
                    }

                new(marker: uint32) =
                    VkPerformanceStreamMarkerInfoINTEL(Unchecked.defaultof<nativeint>, marker)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.marker = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPerformanceStreamMarkerInfoINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "marker = %A" x.marker
                    ] |> sprintf "VkPerformanceStreamMarkerInfoINTEL { %s }"
            end

        [<StructLayout(LayoutKind.Explicit)>]
        type VkPerformanceValueDataINTEL =
            struct
                [<FieldOffset(0)>]
                val mutable public value32 : uint32
                [<FieldOffset(0)>]
                val mutable public value64 : uint64
                [<FieldOffset(0)>]
                val mutable public valueFloat : float32
                [<FieldOffset(0)>]
                val mutable public valueBool : VkBool32
                [<FieldOffset(0)>]
                val mutable public valueString : cstr

                static member Value32(value: uint32) =
                    let mutable result = Unchecked.defaultof<VkPerformanceValueDataINTEL>
                    result.value32 <- value
                    result

                static member Value64(value: uint64) =
                    let mutable result = Unchecked.defaultof<VkPerformanceValueDataINTEL>
                    result.value64 <- value
                    result

                static member ValueFloat(value: float32) =
                    let mutable result = Unchecked.defaultof<VkPerformanceValueDataINTEL>
                    result.valueFloat <- value
                    result

                static member ValueBool(value: VkBool32) =
                    let mutable result = Unchecked.defaultof<VkPerformanceValueDataINTEL>
                    result.valueBool <- value
                    result

                static member ValueString(value: cstr) =
                    let mutable result = Unchecked.defaultof<VkPerformanceValueDataINTEL>
                    result.valueString <- value
                    result

                override x.ToString() =
                    String.concat "; " [
                        sprintf "value32 = %A" x.value32
                        sprintf "value64 = %A" x.value64
                        sprintf "valueFloat = %A" x.valueFloat
                        sprintf "valueBool = %A" x.valueBool
                        sprintf "valueString = %A" x.valueString
                    ] |> sprintf "VkPerformanceValueDataINTEL { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPerformanceValueINTEL =
            struct
                val mutable public _type : VkPerformanceValueTypeINTEL
                val mutable public data : VkPerformanceValueDataINTEL

                new(_type: VkPerformanceValueTypeINTEL, data: VkPerformanceValueDataINTEL) =
                    {
                        _type = _type
                        data = data
                    }

                member x.IsEmpty =
                    x._type = Unchecked.defaultof<VkPerformanceValueTypeINTEL> && x.data = Unchecked.defaultof<VkPerformanceValueDataINTEL>

                static member Empty =
                    VkPerformanceValueINTEL(Unchecked.defaultof<VkPerformanceValueTypeINTEL>, Unchecked.defaultof<VkPerformanceValueDataINTEL>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "_type = %A" x._type
                        sprintf "data = %A" x.data
                    ] |> sprintf "VkPerformanceValueINTEL { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkQueryPoolPerformanceQueryCreateInfoINTEL =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public performanceCountersSampling : VkQueryPoolSamplingModeINTEL

                new(pNext: nativeint, performanceCountersSampling: VkQueryPoolSamplingModeINTEL) =
                    {
                        sType = 1000210000u
                        pNext = pNext
                        performanceCountersSampling = performanceCountersSampling
                    }

                new(performanceCountersSampling: VkQueryPoolSamplingModeINTEL) =
                    VkQueryPoolPerformanceQueryCreateInfoINTEL(Unchecked.defaultof<nativeint>, performanceCountersSampling)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.performanceCountersSampling = Unchecked.defaultof<VkQueryPoolSamplingModeINTEL>

                static member Empty =
                    VkQueryPoolPerformanceQueryCreateInfoINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkQueryPoolSamplingModeINTEL>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "performanceCountersSampling = %A" x.performanceCountersSampling
                    ] |> sprintf "VkQueryPoolPerformanceQueryCreateInfoINTEL { %s }"
            end

        type VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  static member inline PerformanceConfigurationIntel = enum<VkObjectType> 1000210000
             type VkQueryType with
                  static member inline PerformanceQueryIntel = enum<VkQueryType> 1000210000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkInitializePerformanceApiINTELDel = delegate of VkDevice * nativeptr<VkInitializePerformanceApiInfoINTEL> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkUninitializePerformanceApiINTELDel = delegate of VkDevice -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetPerformanceMarkerINTELDel = delegate of VkCommandBuffer * nativeptr<VkPerformanceMarkerInfoINTEL> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetPerformanceStreamMarkerINTELDel = delegate of VkCommandBuffer * nativeptr<VkPerformanceStreamMarkerInfoINTEL> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetPerformanceOverrideINTELDel = delegate of VkCommandBuffer * nativeptr<VkPerformanceOverrideInfoINTEL> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkAcquirePerformanceConfigurationINTELDel = delegate of VkDevice * nativeptr<VkPerformanceConfigurationAcquireInfoINTEL> * nativeptr<VkPerformanceConfigurationINTEL> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkReleasePerformanceConfigurationINTELDel = delegate of VkDevice * VkPerformanceConfigurationINTEL -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkQueueSetPerformanceConfigurationINTELDel = delegate of VkQueue * VkPerformanceConfigurationINTEL -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPerformanceParameterINTELDel = delegate of VkDevice * VkPerformanceParameterTypeINTEL * nativeptr<VkPerformanceValueINTEL> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading INTELPerformanceQuery")
                static let s_vkInitializePerformanceApiINTELDel = VkRaw.vkImportInstanceDelegate<VkInitializePerformanceApiINTELDel> "vkInitializePerformanceApiINTEL"
                static let s_vkUninitializePerformanceApiINTELDel = VkRaw.vkImportInstanceDelegate<VkUninitializePerformanceApiINTELDel> "vkUninitializePerformanceApiINTEL"
                static let s_vkCmdSetPerformanceMarkerINTELDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPerformanceMarkerINTELDel> "vkCmdSetPerformanceMarkerINTEL"
                static let s_vkCmdSetPerformanceStreamMarkerINTELDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPerformanceStreamMarkerINTELDel> "vkCmdSetPerformanceStreamMarkerINTEL"
                static let s_vkCmdSetPerformanceOverrideINTELDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPerformanceOverrideINTELDel> "vkCmdSetPerformanceOverrideINTEL"
                static let s_vkAcquirePerformanceConfigurationINTELDel = VkRaw.vkImportInstanceDelegate<VkAcquirePerformanceConfigurationINTELDel> "vkAcquirePerformanceConfigurationINTEL"
                static let s_vkReleasePerformanceConfigurationINTELDel = VkRaw.vkImportInstanceDelegate<VkReleasePerformanceConfigurationINTELDel> "vkReleasePerformanceConfigurationINTEL"
                static let s_vkQueueSetPerformanceConfigurationINTELDel = VkRaw.vkImportInstanceDelegate<VkQueueSetPerformanceConfigurationINTELDel> "vkQueueSetPerformanceConfigurationINTEL"
                static let s_vkGetPerformanceParameterINTELDel = VkRaw.vkImportInstanceDelegate<VkGetPerformanceParameterINTELDel> "vkGetPerformanceParameterINTEL"
                static do Report.End(3) |> ignore
                static member vkInitializePerformanceApiINTEL = s_vkInitializePerformanceApiINTELDel
                static member vkUninitializePerformanceApiINTEL = s_vkUninitializePerformanceApiINTELDel
                static member vkCmdSetPerformanceMarkerINTEL = s_vkCmdSetPerformanceMarkerINTELDel
                static member vkCmdSetPerformanceStreamMarkerINTEL = s_vkCmdSetPerformanceStreamMarkerINTELDel
                static member vkCmdSetPerformanceOverrideINTEL = s_vkCmdSetPerformanceOverrideINTELDel
                static member vkAcquirePerformanceConfigurationINTEL = s_vkAcquirePerformanceConfigurationINTELDel
                static member vkReleasePerformanceConfigurationINTEL = s_vkReleasePerformanceConfigurationINTELDel
                static member vkQueueSetPerformanceConfigurationINTEL = s_vkQueueSetPerformanceConfigurationINTELDel
                static member vkGetPerformanceParameterINTEL = s_vkGetPerformanceParameterINTELDel
            let vkInitializePerformanceApiINTEL(device : VkDevice, pInitializeInfo : nativeptr<VkInitializePerformanceApiInfoINTEL>) = Loader<unit>.vkInitializePerformanceApiINTEL.Invoke(device, pInitializeInfo)
            let vkUninitializePerformanceApiINTEL(device : VkDevice) = Loader<unit>.vkUninitializePerformanceApiINTEL.Invoke(device)
            let vkCmdSetPerformanceMarkerINTEL(commandBuffer : VkCommandBuffer, pMarkerInfo : nativeptr<VkPerformanceMarkerInfoINTEL>) = Loader<unit>.vkCmdSetPerformanceMarkerINTEL.Invoke(commandBuffer, pMarkerInfo)
            let vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer : VkCommandBuffer, pMarkerInfo : nativeptr<VkPerformanceStreamMarkerInfoINTEL>) = Loader<unit>.vkCmdSetPerformanceStreamMarkerINTEL.Invoke(commandBuffer, pMarkerInfo)
            let vkCmdSetPerformanceOverrideINTEL(commandBuffer : VkCommandBuffer, pOverrideInfo : nativeptr<VkPerformanceOverrideInfoINTEL>) = Loader<unit>.vkCmdSetPerformanceOverrideINTEL.Invoke(commandBuffer, pOverrideInfo)
            let vkAcquirePerformanceConfigurationINTEL(device : VkDevice, pAcquireInfo : nativeptr<VkPerformanceConfigurationAcquireInfoINTEL>, pConfiguration : nativeptr<VkPerformanceConfigurationINTEL>) = Loader<unit>.vkAcquirePerformanceConfigurationINTEL.Invoke(device, pAcquireInfo, pConfiguration)
            let vkReleasePerformanceConfigurationINTEL(device : VkDevice, configuration : VkPerformanceConfigurationINTEL) = Loader<unit>.vkReleasePerformanceConfigurationINTEL.Invoke(device, configuration)
            let vkQueueSetPerformanceConfigurationINTEL(queue : VkQueue, configuration : VkPerformanceConfigurationINTEL) = Loader<unit>.vkQueueSetPerformanceConfigurationINTEL.Invoke(queue, configuration)
            let vkGetPerformanceParameterINTEL(device : VkDevice, parameter : VkPerformanceParameterTypeINTEL, pValue : nativeptr<VkPerformanceValueINTEL>) = Loader<unit>.vkGetPerformanceParameterINTEL.Invoke(device, parameter, pValue)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan12.
    module KHRVulkanMemoryModel =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_vulkan_memory_model"
        let Number = 212

        type VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = Vulkan12.VkPhysicalDeviceVulkanMemoryModelFeatures



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTPciBusInfo =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_pci_bus_info"
        let Number = 213

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePCIBusInfoPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pciDomain : uint32
                val mutable public pciBus : uint32
                val mutable public pciDevice : uint32
                val mutable public pciFunction : uint32

                new(pNext: nativeint, pciDomain: uint32, pciBus: uint32, pciDevice: uint32, pciFunction: uint32) =
                    {
                        sType = 1000212000u
                        pNext = pNext
                        pciDomain = pciDomain
                        pciBus = pciBus
                        pciDevice = pciDevice
                        pciFunction = pciFunction
                    }

                new(pciDomain: uint32, pciBus: uint32, pciDevice: uint32, pciFunction: uint32) =
                    VkPhysicalDevicePCIBusInfoPropertiesEXT(Unchecked.defaultof<nativeint>, pciDomain, pciBus, pciDevice, pciFunction)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pciDomain = Unchecked.defaultof<uint32> && x.pciBus = Unchecked.defaultof<uint32> && x.pciDevice = Unchecked.defaultof<uint32> && x.pciFunction = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDevicePCIBusInfoPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pciDomain = %A" x.pciDomain
                        sprintf "pciBus = %A" x.pciBus
                        sprintf "pciDevice = %A" x.pciDevice
                        sprintf "pciFunction = %A" x.pciFunction
                    ] |> sprintf "VkPhysicalDevicePCIBusInfoPropertiesEXT { %s }"
            end



    /// Requires (KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRGetSurfaceCapabilities2, KHRSwapchain.
    module AMDDisplayNativeHdr =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_display_native_hdr"
        let Number = 214

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayNativeHdrSurfaceCapabilitiesAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public localDimmingSupport : VkBool32

                new(pNext: nativeint, localDimmingSupport: VkBool32) =
                    {
                        sType = 1000213000u
                        pNext = pNext
                        localDimmingSupport = localDimmingSupport
                    }

                new(localDimmingSupport: VkBool32) =
                    VkDisplayNativeHdrSurfaceCapabilitiesAMD(Unchecked.defaultof<nativeint>, localDimmingSupport)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.localDimmingSupport = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkDisplayNativeHdrSurfaceCapabilitiesAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "localDimmingSupport = %A" x.localDimmingSupport
                    ] |> sprintf "VkDisplayNativeHdrSurfaceCapabilitiesAMD { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSwapchainDisplayNativeHdrCreateInfoAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public localDimmingEnable : VkBool32

                new(pNext: nativeint, localDimmingEnable: VkBool32) =
                    {
                        sType = 1000213001u
                        pNext = pNext
                        localDimmingEnable = localDimmingEnable
                    }

                new(localDimmingEnable: VkBool32) =
                    VkSwapchainDisplayNativeHdrCreateInfoAMD(Unchecked.defaultof<nativeint>, localDimmingEnable)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.localDimmingEnable = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkSwapchainDisplayNativeHdrCreateInfoAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "localDimmingEnable = %A" x.localDimmingEnable
                    ] |> sprintf "VkSwapchainDisplayNativeHdrCreateInfoAMD { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRSurface.VkColorSpaceKHR with
                  static member inline DisplayNativeAmd = enum<KHRSurface.VkColorSpaceKHR> 1000213000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkSetLocalDimmingAMDDel = delegate of VkDevice * KHRSwapchain.VkSwapchainKHR * VkBool32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading AMDDisplayNativeHdr")
                static let s_vkSetLocalDimmingAMDDel = VkRaw.vkImportInstanceDelegate<VkSetLocalDimmingAMDDel> "vkSetLocalDimmingAMD"
                static do Report.End(3) |> ignore
                static member vkSetLocalDimmingAMD = s_vkSetLocalDimmingAMDDel
            let vkSetLocalDimmingAMD(device : VkDevice, swapChain : KHRSwapchain.VkSwapchainKHR, localDimmingEnable : VkBool32) = Loader<unit>.vkSetLocalDimmingAMD.Invoke(device, swapChain, localDimmingEnable)

    /// Requires KHRSurface.
    module FUCHSIAImagepipeSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_FUCHSIA_imagepipe_surface"
        let Number = 215

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImagePipeSurfaceCreateInfoFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkImagePipeSurfaceCreateFlagsFUCHSIA
                val mutable public imagePipeHandle : nativeint

                new(pNext: nativeint, flags: VkImagePipeSurfaceCreateFlagsFUCHSIA, imagePipeHandle: nativeint) =
                    {
                        sType = 1000214000u
                        pNext = pNext
                        flags = flags
                        imagePipeHandle = imagePipeHandle
                    }

                new(flags: VkImagePipeSurfaceCreateFlagsFUCHSIA, imagePipeHandle: nativeint) =
                    VkImagePipeSurfaceCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, flags, imagePipeHandle)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkImagePipeSurfaceCreateFlagsFUCHSIA> && x.imagePipeHandle = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkImagePipeSurfaceCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImagePipeSurfaceCreateFlagsFUCHSIA>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "imagePipeHandle = %A" x.imagePipeHandle
                    ] |> sprintf "VkImagePipeSurfaceCreateInfoFUCHSIA { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateImagePipeSurfaceFUCHSIADel = delegate of VkInstance * nativeptr<VkImagePipeSurfaceCreateInfoFUCHSIA> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading FUCHSIAImagepipeSurface")
                static let s_vkCreateImagePipeSurfaceFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkCreateImagePipeSurfaceFUCHSIADel> "vkCreateImagePipeSurfaceFUCHSIA"
                static do Report.End(3) |> ignore
                static member vkCreateImagePipeSurfaceFUCHSIA = s_vkCreateImagePipeSurfaceFUCHSIADel
            let vkCreateImagePipeSurfaceFUCHSIA(instance : VkInstance, pCreateInfo : nativeptr<VkImagePipeSurfaceCreateInfoFUCHSIA>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateImagePipeSurfaceFUCHSIA.Invoke(instance, pCreateInfo, pAllocator, pSurface)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module KHRShaderTerminateInvocation =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_terminate_invocation"
        let Number = 216

        type VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = Vulkan13.VkPhysicalDeviceShaderTerminateInvocationFeatures



    /// Requires KHRSurface.
    module EXTMetalSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_metal_surface"
        let Number = 218

        type CAMetalLayer = nativeint

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMetalSurfaceCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkMetalSurfaceCreateFlagsEXT
                val mutable public pLayer : nativeptr<nativeint>

                new(pNext: nativeint, flags: VkMetalSurfaceCreateFlagsEXT, pLayer: nativeptr<nativeint>) =
                    {
                        sType = 1000217000u
                        pNext = pNext
                        flags = flags
                        pLayer = pLayer
                    }

                new(flags: VkMetalSurfaceCreateFlagsEXT, pLayer: nativeptr<nativeint>) =
                    VkMetalSurfaceCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, pLayer)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkMetalSurfaceCreateFlagsEXT> && x.pLayer = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkMetalSurfaceCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMetalSurfaceCreateFlagsEXT>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "pLayer = %A" x.pLayer
                    ] |> sprintf "VkMetalSurfaceCreateInfoEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateMetalSurfaceEXTDel = delegate of VkInstance * nativeptr<VkMetalSurfaceCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTMetalSurface")
                static let s_vkCreateMetalSurfaceEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateMetalSurfaceEXTDel> "vkCreateMetalSurfaceEXT"
                static do Report.End(3) |> ignore
                static member vkCreateMetalSurfaceEXT = s_vkCreateMetalSurfaceEXTDel
            let vkCreateMetalSurfaceEXT(instance : VkInstance, pCreateInfo : nativeptr<VkMetalSurfaceCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateMetalSurfaceEXT.Invoke(instance, pCreateInfo, pAllocator, pSurface)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTFragmentDensityMap =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_fragment_density_map"
        let Number = 219

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentDensityMapFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fragmentDensityMap : VkBool32
                val mutable public fragmentDensityMapDynamic : VkBool32
                val mutable public fragmentDensityMapNonSubsampledImages : VkBool32

                new(pNext: nativeint, fragmentDensityMap: VkBool32, fragmentDensityMapDynamic: VkBool32, fragmentDensityMapNonSubsampledImages: VkBool32) =
                    {
                        sType = 1000218000u
                        pNext = pNext
                        fragmentDensityMap = fragmentDensityMap
                        fragmentDensityMapDynamic = fragmentDensityMapDynamic
                        fragmentDensityMapNonSubsampledImages = fragmentDensityMapNonSubsampledImages
                    }

                new(fragmentDensityMap: VkBool32, fragmentDensityMapDynamic: VkBool32, fragmentDensityMapNonSubsampledImages: VkBool32) =
                    VkPhysicalDeviceFragmentDensityMapFeaturesEXT(Unchecked.defaultof<nativeint>, fragmentDensityMap, fragmentDensityMapDynamic, fragmentDensityMapNonSubsampledImages)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fragmentDensityMap = Unchecked.defaultof<VkBool32> && x.fragmentDensityMapDynamic = Unchecked.defaultof<VkBool32> && x.fragmentDensityMapNonSubsampledImages = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceFragmentDensityMapFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fragmentDensityMap = %A" x.fragmentDensityMap
                        sprintf "fragmentDensityMapDynamic = %A" x.fragmentDensityMapDynamic
                        sprintf "fragmentDensityMapNonSubsampledImages = %A" x.fragmentDensityMapNonSubsampledImages
                    ] |> sprintf "VkPhysicalDeviceFragmentDensityMapFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentDensityMapPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public minFragmentDensityTexelSize : VkExtent2D
                val mutable public maxFragmentDensityTexelSize : VkExtent2D
                val mutable public fragmentDensityInvocations : VkBool32

                new(pNext: nativeint, minFragmentDensityTexelSize: VkExtent2D, maxFragmentDensityTexelSize: VkExtent2D, fragmentDensityInvocations: VkBool32) =
                    {
                        sType = 1000218001u
                        pNext = pNext
                        minFragmentDensityTexelSize = minFragmentDensityTexelSize
                        maxFragmentDensityTexelSize = maxFragmentDensityTexelSize
                        fragmentDensityInvocations = fragmentDensityInvocations
                    }

                new(minFragmentDensityTexelSize: VkExtent2D, maxFragmentDensityTexelSize: VkExtent2D, fragmentDensityInvocations: VkBool32) =
                    VkPhysicalDeviceFragmentDensityMapPropertiesEXT(Unchecked.defaultof<nativeint>, minFragmentDensityTexelSize, maxFragmentDensityTexelSize, fragmentDensityInvocations)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.minFragmentDensityTexelSize = Unchecked.defaultof<VkExtent2D> && x.maxFragmentDensityTexelSize = Unchecked.defaultof<VkExtent2D> && x.fragmentDensityInvocations = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceFragmentDensityMapPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "minFragmentDensityTexelSize = %A" x.minFragmentDensityTexelSize
                        sprintf "maxFragmentDensityTexelSize = %A" x.maxFragmentDensityTexelSize
                        sprintf "fragmentDensityInvocations = %A" x.fragmentDensityInvocations
                    ] |> sprintf "VkPhysicalDeviceFragmentDensityMapPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderPassFragmentDensityMapCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fragmentDensityMapAttachment : VkAttachmentReference

                new(pNext: nativeint, fragmentDensityMapAttachment: VkAttachmentReference) =
                    {
                        sType = 1000218002u
                        pNext = pNext
                        fragmentDensityMapAttachment = fragmentDensityMapAttachment
                    }

                new(fragmentDensityMapAttachment: VkAttachmentReference) =
                    VkRenderPassFragmentDensityMapCreateInfoEXT(Unchecked.defaultof<nativeint>, fragmentDensityMapAttachment)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fragmentDensityMapAttachment = Unchecked.defaultof<VkAttachmentReference>

                static member Empty =
                    VkRenderPassFragmentDensityMapCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAttachmentReference>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fragmentDensityMapAttachment = %A" x.fragmentDensityMapAttachment
                    ] |> sprintf "VkRenderPassFragmentDensityMapCreateInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags with
                  static member inline FragmentDensityMapReadBitExt = enum<VkAccessFlags> 0x01000000
             type VkFormatFeatureFlags with
                  static member inline FragmentDensityMapBitExt = enum<VkFormatFeatureFlags> 0x01000000
             type VkImageCreateFlags with
                  static member inline SubsampledBitExt = enum<VkImageCreateFlags> 0x00004000
             type VkImageLayout with
                  static member inline FragmentDensityMapOptimalExt = enum<VkImageLayout> 1000218000
             type VkImageUsageFlags with
                  static member inline FragmentDensityMapBitExt = enum<VkImageUsageFlags> 0x00000200
             type VkImageViewCreateFlags with
                  static member inline FragmentDensityMapDynamicBitExt = enum<VkImageViewCreateFlags> 0x00000001
             type VkPipelineStageFlags with
                  static member inline FragmentDensityProcessBitExt = enum<VkPipelineStageFlags> 0x00800000
             type VkSamplerCreateFlags with
                  static member inline SubsampledBitExt = enum<VkSamplerCreateFlags> 0x00000001
                  static member inline SubsampledCoarseReconstructionBitExt = enum<VkSamplerCreateFlags> 0x00000002


        [<AutoOpen>]
        module ``KHRFormatFeatureFlags2 | Vulkan13`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkFormatFeatureFlags2 with
                      static member inline FormatFeature2FragmentDensityMapBitExt = enum<Vulkan13.VkFormatFeatureFlags2> 0x01000000


        [<AutoOpen>]
        module ``Vulkan13 | KHRDynamicRendering`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkRenderingFragmentDensityMapAttachmentInfoEXT =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public imageView : VkImageView
                    val mutable public imageLayout : VkImageLayout

                    new(pNext: nativeint, imageView: VkImageView, imageLayout: VkImageLayout) =
                        {
                            sType = 1000044007u
                            pNext = pNext
                            imageView = imageView
                            imageLayout = imageLayout
                        }

                    new(imageView: VkImageView, imageLayout: VkImageLayout) =
                        VkRenderingFragmentDensityMapAttachmentInfoEXT(Unchecked.defaultof<nativeint>, imageView, imageLayout)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.imageView = Unchecked.defaultof<VkImageView> && x.imageLayout = Unchecked.defaultof<VkImageLayout>

                    static member Empty =
                        VkRenderingFragmentDensityMapAttachmentInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkImageLayout>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "imageView = %A" x.imageView
                            sprintf "imageLayout = %A" x.imageLayout
                        ] |> sprintf "VkRenderingFragmentDensityMapAttachmentInfoEXT { %s }"
                end


            [<AutoOpen>]
            module EnumExtensions =
                 type VkPipelineCreateFlags with
                      static member inline RenderingFragmentDensityMapAttachmentBitExt = enum<VkPipelineCreateFlags> 0x00400000


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan12.
    module EXTScalarBlockLayout =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_scalar_block_layout"
        let Number = 222

        type VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = Vulkan12.VkPhysicalDeviceScalarBlockLayoutFeatures



    module GOOGLEHlslFunctionality1 =
        let Type = ExtensionType.Device
        let Name = "VK_GOOGLE_hlsl_functionality1"
        let Number = 224

    module GOOGLEDecorateString =
        let Type = ExtensionType.Device
        let Name = "VK_GOOGLE_decorate_string"
        let Number = 225

    /// Requires Vulkan11.
    /// Promoted to Vulkan13.
    module EXTSubgroupSizeControl =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_subgroup_size_control"
        let Number = 226

        type VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = Vulkan13.VkPhysicalDeviceSubgroupSizeControlFeatures

        type VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = Vulkan13.VkPhysicalDeviceSubgroupSizeControlProperties

        type VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = Vulkan13.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineShaderStageCreateFlags with
                  static member inline AllowVaryingSubgroupSizeBitExt = enum<VkPipelineShaderStageCreateFlags> 0x00000001
                  static member inline RequireFullSubgroupsBitExt = enum<VkPipelineShaderStageCreateFlags> 0x00000002


    /// Requires ((KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRCreateRenderpass2) | Vulkan12.
    module KHRFragmentShadingRate =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_fragment_shading_rate"
        let Number = 227

        type VkFragmentShadingRateCombinerOpKHR =
            | Keep = 0
            | Replace = 1
            | Min = 2
            | Max = 3
            | Mul = 4

        /// Array of 2 VkFragmentShadingRateCombinerOpKHR values.
        [<StructLayout(LayoutKind.Explicit, Size = 8)>]
        type VkFragmentShadingRateCombinerOpKHR_2 =
            struct
                [<FieldOffset(0)>]
                val mutable public First : VkFragmentShadingRateCombinerOpKHR

                member x.Item
                    with get (i : int) : VkFragmentShadingRateCombinerOpKHR =
                        if i < 0 || i > 1 then raise <| IndexOutOfRangeException()
                        let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                        NativePtr.get ptr i
                    and set (i : int) (value : VkFragmentShadingRateCombinerOpKHR) =
                        if i < 0 || i > 1 then raise <| IndexOutOfRangeException()
                        let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                        NativePtr.set ptr i value

                member x.Length = 2

                interface System.Collections.IEnumerable with
                    member x.GetEnumerator() = let x = x in (Seq.init 2 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
                interface System.Collections.Generic.IEnumerable<VkFragmentShadingRateCombinerOpKHR> with
                    member x.GetEnumerator() = let x = x in (Seq.init 2 (fun i -> x.[i])).GetEnumerator()
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkFragmentShadingRateAttachmentInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pFragmentShadingRateAttachment : nativeptr<Vulkan12.VkAttachmentReference2>
                val mutable public shadingRateAttachmentTexelSize : VkExtent2D

                new(pNext: nativeint, pFragmentShadingRateAttachment: nativeptr<Vulkan12.VkAttachmentReference2>, shadingRateAttachmentTexelSize: VkExtent2D) =
                    {
                        sType = 1000226000u
                        pNext = pNext
                        pFragmentShadingRateAttachment = pFragmentShadingRateAttachment
                        shadingRateAttachmentTexelSize = shadingRateAttachmentTexelSize
                    }

                new(pFragmentShadingRateAttachment: nativeptr<Vulkan12.VkAttachmentReference2>, shadingRateAttachmentTexelSize: VkExtent2D) =
                    VkFragmentShadingRateAttachmentInfoKHR(Unchecked.defaultof<nativeint>, pFragmentShadingRateAttachment, shadingRateAttachmentTexelSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pFragmentShadingRateAttachment = Unchecked.defaultof<nativeptr<Vulkan12.VkAttachmentReference2>> && x.shadingRateAttachmentTexelSize = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkFragmentShadingRateAttachmentInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<Vulkan12.VkAttachmentReference2>>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pFragmentShadingRateAttachment = %A" x.pFragmentShadingRateAttachment
                        sprintf "shadingRateAttachmentTexelSize = %A" x.shadingRateAttachmentTexelSize
                    ] |> sprintf "VkFragmentShadingRateAttachmentInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentShadingRateFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelineFragmentShadingRate : VkBool32
                val mutable public primitiveFragmentShadingRate : VkBool32
                val mutable public attachmentFragmentShadingRate : VkBool32

                new(pNext: nativeint, pipelineFragmentShadingRate: VkBool32, primitiveFragmentShadingRate: VkBool32, attachmentFragmentShadingRate: VkBool32) =
                    {
                        sType = 1000226003u
                        pNext = pNext
                        pipelineFragmentShadingRate = pipelineFragmentShadingRate
                        primitiveFragmentShadingRate = primitiveFragmentShadingRate
                        attachmentFragmentShadingRate = attachmentFragmentShadingRate
                    }

                new(pipelineFragmentShadingRate: VkBool32, primitiveFragmentShadingRate: VkBool32, attachmentFragmentShadingRate: VkBool32) =
                    VkPhysicalDeviceFragmentShadingRateFeaturesKHR(Unchecked.defaultof<nativeint>, pipelineFragmentShadingRate, primitiveFragmentShadingRate, attachmentFragmentShadingRate)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelineFragmentShadingRate = Unchecked.defaultof<VkBool32> && x.primitiveFragmentShadingRate = Unchecked.defaultof<VkBool32> && x.attachmentFragmentShadingRate = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceFragmentShadingRateFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelineFragmentShadingRate = %A" x.pipelineFragmentShadingRate
                        sprintf "primitiveFragmentShadingRate = %A" x.primitiveFragmentShadingRate
                        sprintf "attachmentFragmentShadingRate = %A" x.attachmentFragmentShadingRate
                    ] |> sprintf "VkPhysicalDeviceFragmentShadingRateFeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentShadingRateKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public sampleCounts : VkSampleCountFlags
                val mutable public fragmentSize : VkExtent2D

                new(pNext: nativeint, sampleCounts: VkSampleCountFlags, fragmentSize: VkExtent2D) =
                    {
                        sType = 1000226004u
                        pNext = pNext
                        sampleCounts = sampleCounts
                        fragmentSize = fragmentSize
                    }

                new(sampleCounts: VkSampleCountFlags, fragmentSize: VkExtent2D) =
                    VkPhysicalDeviceFragmentShadingRateKHR(Unchecked.defaultof<nativeint>, sampleCounts, fragmentSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.sampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.fragmentSize = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkPhysicalDeviceFragmentShadingRateKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "sampleCounts = %A" x.sampleCounts
                        sprintf "fragmentSize = %A" x.fragmentSize
                    ] |> sprintf "VkPhysicalDeviceFragmentShadingRateKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentShadingRatePropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public minFragmentShadingRateAttachmentTexelSize : VkExtent2D
                val mutable public maxFragmentShadingRateAttachmentTexelSize : VkExtent2D
                val mutable public maxFragmentShadingRateAttachmentTexelSizeAspectRatio : uint32
                val mutable public primitiveFragmentShadingRateWithMultipleViewports : VkBool32
                val mutable public layeredShadingRateAttachments : VkBool32
                val mutable public fragmentShadingRateNonTrivialCombinerOps : VkBool32
                val mutable public maxFragmentSize : VkExtent2D
                val mutable public maxFragmentSizeAspectRatio : uint32
                val mutable public maxFragmentShadingRateCoverageSamples : uint32
                val mutable public maxFragmentShadingRateRasterizationSamples : VkSampleCountFlags
                val mutable public fragmentShadingRateWithShaderDepthStencilWrites : VkBool32
                val mutable public fragmentShadingRateWithSampleMask : VkBool32
                val mutable public fragmentShadingRateWithShaderSampleMask : VkBool32
                val mutable public fragmentShadingRateWithConservativeRasterization : VkBool32
                val mutable public fragmentShadingRateWithFragmentShaderInterlock : VkBool32
                val mutable public fragmentShadingRateWithCustomSampleLocations : VkBool32
                val mutable public fragmentShadingRateStrictMultiplyCombiner : VkBool32

                new(pNext: nativeint, minFragmentShadingRateAttachmentTexelSize: VkExtent2D, maxFragmentShadingRateAttachmentTexelSize: VkExtent2D, maxFragmentShadingRateAttachmentTexelSizeAspectRatio: uint32, primitiveFragmentShadingRateWithMultipleViewports: VkBool32, layeredShadingRateAttachments: VkBool32, fragmentShadingRateNonTrivialCombinerOps: VkBool32, maxFragmentSize: VkExtent2D, maxFragmentSizeAspectRatio: uint32, maxFragmentShadingRateCoverageSamples: uint32, maxFragmentShadingRateRasterizationSamples: VkSampleCountFlags, fragmentShadingRateWithShaderDepthStencilWrites: VkBool32, fragmentShadingRateWithSampleMask: VkBool32, fragmentShadingRateWithShaderSampleMask: VkBool32, fragmentShadingRateWithConservativeRasterization: VkBool32, fragmentShadingRateWithFragmentShaderInterlock: VkBool32, fragmentShadingRateWithCustomSampleLocations: VkBool32, fragmentShadingRateStrictMultiplyCombiner: VkBool32) =
                    {
                        sType = 1000226002u
                        pNext = pNext
                        minFragmentShadingRateAttachmentTexelSize = minFragmentShadingRateAttachmentTexelSize
                        maxFragmentShadingRateAttachmentTexelSize = maxFragmentShadingRateAttachmentTexelSize
                        maxFragmentShadingRateAttachmentTexelSizeAspectRatio = maxFragmentShadingRateAttachmentTexelSizeAspectRatio
                        primitiveFragmentShadingRateWithMultipleViewports = primitiveFragmentShadingRateWithMultipleViewports
                        layeredShadingRateAttachments = layeredShadingRateAttachments
                        fragmentShadingRateNonTrivialCombinerOps = fragmentShadingRateNonTrivialCombinerOps
                        maxFragmentSize = maxFragmentSize
                        maxFragmentSizeAspectRatio = maxFragmentSizeAspectRatio
                        maxFragmentShadingRateCoverageSamples = maxFragmentShadingRateCoverageSamples
                        maxFragmentShadingRateRasterizationSamples = maxFragmentShadingRateRasterizationSamples
                        fragmentShadingRateWithShaderDepthStencilWrites = fragmentShadingRateWithShaderDepthStencilWrites
                        fragmentShadingRateWithSampleMask = fragmentShadingRateWithSampleMask
                        fragmentShadingRateWithShaderSampleMask = fragmentShadingRateWithShaderSampleMask
                        fragmentShadingRateWithConservativeRasterization = fragmentShadingRateWithConservativeRasterization
                        fragmentShadingRateWithFragmentShaderInterlock = fragmentShadingRateWithFragmentShaderInterlock
                        fragmentShadingRateWithCustomSampleLocations = fragmentShadingRateWithCustomSampleLocations
                        fragmentShadingRateStrictMultiplyCombiner = fragmentShadingRateStrictMultiplyCombiner
                    }

                new(minFragmentShadingRateAttachmentTexelSize: VkExtent2D, maxFragmentShadingRateAttachmentTexelSize: VkExtent2D, maxFragmentShadingRateAttachmentTexelSizeAspectRatio: uint32, primitiveFragmentShadingRateWithMultipleViewports: VkBool32, layeredShadingRateAttachments: VkBool32, fragmentShadingRateNonTrivialCombinerOps: VkBool32, maxFragmentSize: VkExtent2D, maxFragmentSizeAspectRatio: uint32, maxFragmentShadingRateCoverageSamples: uint32, maxFragmentShadingRateRasterizationSamples: VkSampleCountFlags, fragmentShadingRateWithShaderDepthStencilWrites: VkBool32, fragmentShadingRateWithSampleMask: VkBool32, fragmentShadingRateWithShaderSampleMask: VkBool32, fragmentShadingRateWithConservativeRasterization: VkBool32, fragmentShadingRateWithFragmentShaderInterlock: VkBool32, fragmentShadingRateWithCustomSampleLocations: VkBool32, fragmentShadingRateStrictMultiplyCombiner: VkBool32) =
                    VkPhysicalDeviceFragmentShadingRatePropertiesKHR(Unchecked.defaultof<nativeint>, minFragmentShadingRateAttachmentTexelSize, maxFragmentShadingRateAttachmentTexelSize, maxFragmentShadingRateAttachmentTexelSizeAspectRatio, primitiveFragmentShadingRateWithMultipleViewports, layeredShadingRateAttachments, fragmentShadingRateNonTrivialCombinerOps, maxFragmentSize, maxFragmentSizeAspectRatio, maxFragmentShadingRateCoverageSamples, maxFragmentShadingRateRasterizationSamples, fragmentShadingRateWithShaderDepthStencilWrites, fragmentShadingRateWithSampleMask, fragmentShadingRateWithShaderSampleMask, fragmentShadingRateWithConservativeRasterization, fragmentShadingRateWithFragmentShaderInterlock, fragmentShadingRateWithCustomSampleLocations, fragmentShadingRateStrictMultiplyCombiner)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.minFragmentShadingRateAttachmentTexelSize = Unchecked.defaultof<VkExtent2D> && x.maxFragmentShadingRateAttachmentTexelSize = Unchecked.defaultof<VkExtent2D> && x.maxFragmentShadingRateAttachmentTexelSizeAspectRatio = Unchecked.defaultof<uint32> && x.primitiveFragmentShadingRateWithMultipleViewports = Unchecked.defaultof<VkBool32> && x.layeredShadingRateAttachments = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateNonTrivialCombinerOps = Unchecked.defaultof<VkBool32> && x.maxFragmentSize = Unchecked.defaultof<VkExtent2D> && x.maxFragmentSizeAspectRatio = Unchecked.defaultof<uint32> && x.maxFragmentShadingRateCoverageSamples = Unchecked.defaultof<uint32> && x.maxFragmentShadingRateRasterizationSamples = Unchecked.defaultof<VkSampleCountFlags> && x.fragmentShadingRateWithShaderDepthStencilWrites = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateWithSampleMask = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateWithShaderSampleMask = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateWithConservativeRasterization = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateWithFragmentShaderInterlock = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateWithCustomSampleLocations = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateStrictMultiplyCombiner = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceFragmentShadingRatePropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "minFragmentShadingRateAttachmentTexelSize = %A" x.minFragmentShadingRateAttachmentTexelSize
                        sprintf "maxFragmentShadingRateAttachmentTexelSize = %A" x.maxFragmentShadingRateAttachmentTexelSize
                        sprintf "maxFragmentShadingRateAttachmentTexelSizeAspectRatio = %A" x.maxFragmentShadingRateAttachmentTexelSizeAspectRatio
                        sprintf "primitiveFragmentShadingRateWithMultipleViewports = %A" x.primitiveFragmentShadingRateWithMultipleViewports
                        sprintf "layeredShadingRateAttachments = %A" x.layeredShadingRateAttachments
                        sprintf "fragmentShadingRateNonTrivialCombinerOps = %A" x.fragmentShadingRateNonTrivialCombinerOps
                        sprintf "maxFragmentSize = %A" x.maxFragmentSize
                        sprintf "maxFragmentSizeAspectRatio = %A" x.maxFragmentSizeAspectRatio
                        sprintf "maxFragmentShadingRateCoverageSamples = %A" x.maxFragmentShadingRateCoverageSamples
                        sprintf "maxFragmentShadingRateRasterizationSamples = %A" x.maxFragmentShadingRateRasterizationSamples
                        sprintf "fragmentShadingRateWithShaderDepthStencilWrites = %A" x.fragmentShadingRateWithShaderDepthStencilWrites
                        sprintf "fragmentShadingRateWithSampleMask = %A" x.fragmentShadingRateWithSampleMask
                        sprintf "fragmentShadingRateWithShaderSampleMask = %A" x.fragmentShadingRateWithShaderSampleMask
                        sprintf "fragmentShadingRateWithConservativeRasterization = %A" x.fragmentShadingRateWithConservativeRasterization
                        sprintf "fragmentShadingRateWithFragmentShaderInterlock = %A" x.fragmentShadingRateWithFragmentShaderInterlock
                        sprintf "fragmentShadingRateWithCustomSampleLocations = %A" x.fragmentShadingRateWithCustomSampleLocations
                        sprintf "fragmentShadingRateStrictMultiplyCombiner = %A" x.fragmentShadingRateStrictMultiplyCombiner
                    ] |> sprintf "VkPhysicalDeviceFragmentShadingRatePropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineFragmentShadingRateStateCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fragmentSize : VkExtent2D
                val mutable public combinerOps : VkFragmentShadingRateCombinerOpKHR_2

                new(pNext: nativeint, fragmentSize: VkExtent2D, combinerOps: VkFragmentShadingRateCombinerOpKHR_2) =
                    {
                        sType = 1000226001u
                        pNext = pNext
                        fragmentSize = fragmentSize
                        combinerOps = combinerOps
                    }

                new(fragmentSize: VkExtent2D, combinerOps: VkFragmentShadingRateCombinerOpKHR_2) =
                    VkPipelineFragmentShadingRateStateCreateInfoKHR(Unchecked.defaultof<nativeint>, fragmentSize, combinerOps)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fragmentSize = Unchecked.defaultof<VkExtent2D> && x.combinerOps = Unchecked.defaultof<VkFragmentShadingRateCombinerOpKHR_2>

                static member Empty =
                    VkPipelineFragmentShadingRateStateCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkFragmentShadingRateCombinerOpKHR_2>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fragmentSize = %A" x.fragmentSize
                        sprintf "combinerOps = %A" x.combinerOps
                    ] |> sprintf "VkPipelineFragmentShadingRateStateCreateInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags with
                  static member inline FragmentShadingRateAttachmentReadBitKhr = enum<VkAccessFlags> 0x00800000
             type VkDynamicState with
                  static member inline FragmentShadingRateKhr = enum<VkDynamicState> 1000226000
             type VkFormatFeatureFlags with
                  static member inline FragmentShadingRateAttachmentBitKhr = enum<VkFormatFeatureFlags> 0x40000000
             type VkImageLayout with
                  static member inline FragmentShadingRateAttachmentOptimalKhr = enum<VkImageLayout> 1000164003
             type VkImageUsageFlags with
                  static member inline FragmentShadingRateAttachmentBitKhr = enum<VkImageUsageFlags> 0x00000100
             type VkPipelineStageFlags with
                  static member inline FragmentShadingRateAttachmentBitKhr = enum<VkPipelineStageFlags> 0x00400000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceFragmentShadingRatesKHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkPhysicalDeviceFragmentShadingRateKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetFragmentShadingRateKHRDel = delegate of VkCommandBuffer * nativeptr<VkExtent2D> * VkFragmentShadingRateCombinerOpKHR_2 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRFragmentShadingRate")
                static let s_vkGetPhysicalDeviceFragmentShadingRatesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceFragmentShadingRatesKHRDel> "vkGetPhysicalDeviceFragmentShadingRatesKHR"
                static let s_vkCmdSetFragmentShadingRateKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdSetFragmentShadingRateKHRDel> "vkCmdSetFragmentShadingRateKHR"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceFragmentShadingRatesKHR = s_vkGetPhysicalDeviceFragmentShadingRatesKHRDel
                static member vkCmdSetFragmentShadingRateKHR = s_vkCmdSetFragmentShadingRateKHRDel
            let vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice : VkPhysicalDevice, pFragmentShadingRateCount : nativeptr<uint32>, pFragmentShadingRates : nativeptr<VkPhysicalDeviceFragmentShadingRateKHR>) = Loader<unit>.vkGetPhysicalDeviceFragmentShadingRatesKHR.Invoke(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates)
            let vkCmdSetFragmentShadingRateKHR(commandBuffer : VkCommandBuffer, pFragmentSize : nativeptr<VkExtent2D>, combinerOps : VkFragmentShadingRateCombinerOpKHR_2) = Loader<unit>.vkCmdSetFragmentShadingRateKHR.Invoke(commandBuffer, pFragmentSize, combinerOps)

        [<AutoOpen>]
        module ``KHRFormatFeatureFlags2 | Vulkan13`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkFormatFeatureFlags2 with
                      static member inline FormatFeature2FragmentShadingRateAttachmentBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x40000000


        [<AutoOpen>]
        module ``Vulkan13 | KHRDynamicRendering`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkRenderingFragmentShadingRateAttachmentInfoKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public imageView : VkImageView
                    val mutable public imageLayout : VkImageLayout
                    val mutable public shadingRateAttachmentTexelSize : VkExtent2D

                    new(pNext: nativeint, imageView: VkImageView, imageLayout: VkImageLayout, shadingRateAttachmentTexelSize: VkExtent2D) =
                        {
                            sType = 1000044006u
                            pNext = pNext
                            imageView = imageView
                            imageLayout = imageLayout
                            shadingRateAttachmentTexelSize = shadingRateAttachmentTexelSize
                        }

                    new(imageView: VkImageView, imageLayout: VkImageLayout, shadingRateAttachmentTexelSize: VkExtent2D) =
                        VkRenderingFragmentShadingRateAttachmentInfoKHR(Unchecked.defaultof<nativeint>, imageView, imageLayout, shadingRateAttachmentTexelSize)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.imageView = Unchecked.defaultof<VkImageView> && x.imageLayout = Unchecked.defaultof<VkImageLayout> && x.shadingRateAttachmentTexelSize = Unchecked.defaultof<VkExtent2D>

                    static member Empty =
                        VkRenderingFragmentShadingRateAttachmentInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkExtent2D>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "imageView = %A" x.imageView
                            sprintf "imageLayout = %A" x.imageLayout
                            sprintf "shadingRateAttachmentTexelSize = %A" x.shadingRateAttachmentTexelSize
                        ] |> sprintf "VkRenderingFragmentShadingRateAttachmentInfoKHR { %s }"
                end


            [<AutoOpen>]
            module EnumExtensions =
                 type VkPipelineCreateFlags with
                      static member inline RenderingFragmentShadingRateAttachmentBitKhr = enum<VkPipelineCreateFlags> 0x00200000


    /// Requires AMDShaderCoreProperties.
    module AMDShaderCoreProperties2 =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_shader_core_properties2"
        let Number = 228

        [<Flags>]
        type VkShaderCorePropertiesFlagsAMD =
            | All = 0
            | None = 0


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderCoreProperties2AMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderCoreFeatures : VkShaderCorePropertiesFlagsAMD
                val mutable public activeComputeUnitCount : uint32

                new(pNext: nativeint, shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD, activeComputeUnitCount: uint32) =
                    {
                        sType = 1000227000u
                        pNext = pNext
                        shaderCoreFeatures = shaderCoreFeatures
                        activeComputeUnitCount = activeComputeUnitCount
                    }

                new(shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD, activeComputeUnitCount: uint32) =
                    VkPhysicalDeviceShaderCoreProperties2AMD(Unchecked.defaultof<nativeint>, shaderCoreFeatures, activeComputeUnitCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderCoreFeatures = Unchecked.defaultof<VkShaderCorePropertiesFlagsAMD> && x.activeComputeUnitCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceShaderCoreProperties2AMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderCorePropertiesFlagsAMD>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderCoreFeatures = %A" x.shaderCoreFeatures
                        sprintf "activeComputeUnitCount = %A" x.activeComputeUnitCount
                    ] |> sprintf "VkPhysicalDeviceShaderCoreProperties2AMD { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module AMDDeviceCoherentMemory =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_device_coherent_memory"
        let Number = 230

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCoherentMemoryFeaturesAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public deviceCoherentMemory : VkBool32

                new(pNext: nativeint, deviceCoherentMemory: VkBool32) =
                    {
                        sType = 1000229000u
                        pNext = pNext
                        deviceCoherentMemory = deviceCoherentMemory
                    }

                new(deviceCoherentMemory: VkBool32) =
                    VkPhysicalDeviceCoherentMemoryFeaturesAMD(Unchecked.defaultof<nativeint>, deviceCoherentMemory)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.deviceCoherentMemory = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCoherentMemoryFeaturesAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "deviceCoherentMemory = %A" x.deviceCoherentMemory
                    ] |> sprintf "VkPhysicalDeviceCoherentMemoryFeaturesAMD { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkMemoryPropertyFlags with
                  static member inline DeviceCoherentBitAmd = enum<VkMemoryPropertyFlags> 0x00000040
                  static member inline DeviceUncachedBitAmd = enum<VkMemoryPropertyFlags> 0x00000080


    /// Requires KHRDynamicRendering | Vulkan13.
    /// Promoted to Vulkan14.
    module KHRDynamicRenderingLocalRead =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_dynamic_rendering_local_read"
        let Number = 233

        type VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR = Vulkan14.VkPhysicalDeviceDynamicRenderingLocalReadFeatures

        type VkRenderingAttachmentLocationInfoKHR = Vulkan14.VkRenderingAttachmentLocationInfo

        type VkRenderingInputAttachmentIndexInfoKHR = Vulkan14.VkRenderingInputAttachmentIndexInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageLayout with
                  static member inline RenderingLocalReadKhr = enum<VkImageLayout> 1000232000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetRenderingAttachmentLocationsKHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan14.VkRenderingAttachmentLocationInfo> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetRenderingInputAttachmentIndicesKHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan14.VkRenderingInputAttachmentIndexInfo> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRDynamicRenderingLocalRead")
                static let s_vkCmdSetRenderingAttachmentLocationsKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdSetRenderingAttachmentLocationsKHRDel> "vkCmdSetRenderingAttachmentLocationsKHR"
                static let s_vkCmdSetRenderingInputAttachmentIndicesKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdSetRenderingInputAttachmentIndicesKHRDel> "vkCmdSetRenderingInputAttachmentIndicesKHR"
                static do Report.End(3) |> ignore
                static member vkCmdSetRenderingAttachmentLocationsKHR = s_vkCmdSetRenderingAttachmentLocationsKHRDel
                static member vkCmdSetRenderingInputAttachmentIndicesKHR = s_vkCmdSetRenderingInputAttachmentIndicesKHRDel
            let vkCmdSetRenderingAttachmentLocationsKHR(commandBuffer : VkCommandBuffer, pLocationInfo : nativeptr<Vulkan14.VkRenderingAttachmentLocationInfo>) = Loader<unit>.vkCmdSetRenderingAttachmentLocationsKHR.Invoke(commandBuffer, pLocationInfo)
            let vkCmdSetRenderingInputAttachmentIndicesKHR(commandBuffer : VkCommandBuffer, pInputAttachmentIndexInfo : nativeptr<Vulkan14.VkRenderingInputAttachmentIndexInfo>) = Loader<unit>.vkCmdSetRenderingInputAttachmentIndicesKHR.Invoke(commandBuffer, pInputAttachmentIndexInfo)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTShaderImageAtomicInt64 =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_shader_image_atomic_int64"
        let Number = 235

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderImageInt64Atomics : VkBool32
                val mutable public sparseImageInt64Atomics : VkBool32

                new(pNext: nativeint, shaderImageInt64Atomics: VkBool32, sparseImageInt64Atomics: VkBool32) =
                    {
                        sType = 1000234000u
                        pNext = pNext
                        shaderImageInt64Atomics = shaderImageInt64Atomics
                        sparseImageInt64Atomics = sparseImageInt64Atomics
                    }

                new(shaderImageInt64Atomics: VkBool32, sparseImageInt64Atomics: VkBool32) =
                    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(Unchecked.defaultof<nativeint>, shaderImageInt64Atomics, sparseImageInt64Atomics)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderImageInt64Atomics = Unchecked.defaultof<VkBool32> && x.sparseImageInt64Atomics = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderImageInt64Atomics = %A" x.shaderImageInt64Atomics
                        sprintf "sparseImageInt64Atomics = %A" x.sparseImageInt64Atomics
                    ] |> sprintf "VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT { %s }"
            end



    /// Requires Vulkan11, KHRVulkanMemoryModel, KHRShaderMaximalReconvergence.
    module KHRShaderQuadControl =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_quad_control"
        let Number = 236

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderQuadControlFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderQuadControl : VkBool32

                new(pNext: nativeint, shaderQuadControl: VkBool32) =
                    {
                        sType = 1000235000u
                        pNext = pNext
                        shaderQuadControl = shaderQuadControl
                    }

                new(shaderQuadControl: VkBool32) =
                    VkPhysicalDeviceShaderQuadControlFeaturesKHR(Unchecked.defaultof<nativeint>, shaderQuadControl)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderQuadControl = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderQuadControlFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderQuadControl = %A" x.shaderQuadControl
                    ] |> sprintf "VkPhysicalDeviceShaderQuadControlFeaturesKHR { %s }"
            end



    /// Requires Vulkan11, KHRShaderFloatControls.
    /// Promoted to Vulkan12.
    module KHRSpirv14 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_spirv_1_4"
        let Number = 237

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTMemoryBudget =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_memory_budget"
        let Number = 238

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMemoryBudgetPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public heapBudget : VkDeviceSize_16
                val mutable public heapUsage : VkDeviceSize_16

                new(pNext: nativeint, heapBudget: VkDeviceSize_16, heapUsage: VkDeviceSize_16) =
                    {
                        sType = 1000237000u
                        pNext = pNext
                        heapBudget = heapBudget
                        heapUsage = heapUsage
                    }

                new(heapBudget: VkDeviceSize_16, heapUsage: VkDeviceSize_16) =
                    VkPhysicalDeviceMemoryBudgetPropertiesEXT(Unchecked.defaultof<nativeint>, heapBudget, heapUsage)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.heapBudget = Unchecked.defaultof<VkDeviceSize_16> && x.heapUsage = Unchecked.defaultof<VkDeviceSize_16>

                static member Empty =
                    VkPhysicalDeviceMemoryBudgetPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize_16>, Unchecked.defaultof<VkDeviceSize_16>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "heapBudget = %A" x.heapBudget
                        sprintf "heapUsage = %A" x.heapUsage
                    ] |> sprintf "VkPhysicalDeviceMemoryBudgetPropertiesEXT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTMemoryPriority =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_memory_priority"
        let Number = 239

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryPriorityAllocateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public priority : float32

                new(pNext: nativeint, priority: float32) =
                    {
                        sType = 1000238001u
                        pNext = pNext
                        priority = priority
                    }

                new(priority: float32) =
                    VkMemoryPriorityAllocateInfoEXT(Unchecked.defaultof<nativeint>, priority)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.priority = Unchecked.defaultof<float32>

                static member Empty =
                    VkMemoryPriorityAllocateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<float32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "priority = %A" x.priority
                    ] |> sprintf "VkMemoryPriorityAllocateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMemoryPriorityFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memoryPriority : VkBool32

                new(pNext: nativeint, memoryPriority: VkBool32) =
                    {
                        sType = 1000238000u
                        pNext = pNext
                        memoryPriority = memoryPriority
                    }

                new(memoryPriority: VkBool32) =
                    VkPhysicalDeviceMemoryPriorityFeaturesEXT(Unchecked.defaultof<nativeint>, memoryPriority)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memoryPriority = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMemoryPriorityFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memoryPriority = %A" x.memoryPriority
                    ] |> sprintf "VkPhysicalDeviceMemoryPriorityFeaturesEXT { %s }"
            end



    /// Requires Vulkan11, KHRGetSurfaceCapabilities2.
    module KHRSurfaceProtectedCapabilities =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_surface_protected_capabilities"
        let Number = 240

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfaceProtectedCapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public supportsProtected : VkBool32

                new(pNext: nativeint, supportsProtected: VkBool32) =
                    {
                        sType = 1000239000u
                        pNext = pNext
                        supportsProtected = supportsProtected
                    }

                new(supportsProtected: VkBool32) =
                    VkSurfaceProtectedCapabilitiesKHR(Unchecked.defaultof<nativeint>, supportsProtected)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.supportsProtected = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkSurfaceProtectedCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "supportsProtected = %A" x.supportsProtected
                    ] |> sprintf "VkSurfaceProtectedCapabilitiesKHR { %s }"
            end



    /// Requires (KHRDedicatedAllocation, KHRGetPhysicalDeviceProperties2) | Vulkan11.
    module NVDedicatedAllocationImageAliasing =
        let Type = ExtensionType.Device
        let Name = "VK_NV_dedicated_allocation_image_aliasing"
        let Number = 241

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public dedicatedAllocationImageAliasing : VkBool32

                new(pNext: nativeint, dedicatedAllocationImageAliasing: VkBool32) =
                    {
                        sType = 1000240000u
                        pNext = pNext
                        dedicatedAllocationImageAliasing = dedicatedAllocationImageAliasing
                    }

                new(dedicatedAllocationImageAliasing: VkBool32) =
                    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(Unchecked.defaultof<nativeint>, dedicatedAllocationImageAliasing)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.dedicatedAllocationImageAliasing = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "dedicatedAllocationImageAliasing = %A" x.dedicatedAllocationImageAliasing
                    ] |> sprintf "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV { %s }"
            end



    /// Requires ((KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRCreateRenderpass2) | Vulkan12.
    /// Promoted to Vulkan12.
    module KHRSeparateDepthStencilLayouts =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_separate_depth_stencil_layouts"
        let Number = 242

        type VkAttachmentDescriptionStencilLayoutKHR = Vulkan12.VkAttachmentDescriptionStencilLayout

        type VkAttachmentReferenceStencilLayoutKHR = Vulkan12.VkAttachmentReferenceStencilLayout

        type VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = Vulkan12.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageLayout with
                  static member inline DepthAttachmentOptimalKhr = enum<VkImageLayout> 1000241000
                  static member inline DepthReadOnlyOptimalKhr = enum<VkImageLayout> 1000241001
                  static member inline StencilAttachmentOptimalKhr = enum<VkImageLayout> 1000241002
                  static member inline StencilReadOnlyOptimalKhr = enum<VkImageLayout> 1000241003


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Deprecated by KHRBufferDeviceAddress.
    module EXTBufferDeviceAddress =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_buffer_device_address"
        let Number = 245

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBufferDeviceAddressCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public deviceAddress : VkDeviceAddress

                new(pNext: nativeint, deviceAddress: VkDeviceAddress) =
                    {
                        sType = 1000244002u
                        pNext = pNext
                        deviceAddress = deviceAddress
                    }

                new(deviceAddress: VkDeviceAddress) =
                    VkBufferDeviceAddressCreateInfoEXT(Unchecked.defaultof<nativeint>, deviceAddress)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.deviceAddress = Unchecked.defaultof<VkDeviceAddress>

                static member Empty =
                    VkBufferDeviceAddressCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceAddress>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "deviceAddress = %A" x.deviceAddress
                    ] |> sprintf "VkBufferDeviceAddressCreateInfoEXT { %s }"
            end

        type VkBufferDeviceAddressInfoEXT = Vulkan12.VkBufferDeviceAddressInfo

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceBufferDeviceAddressFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public bufferDeviceAddress : VkBool32
                val mutable public bufferDeviceAddressCaptureReplay : VkBool32
                val mutable public bufferDeviceAddressMultiDevice : VkBool32

                new(pNext: nativeint, bufferDeviceAddress: VkBool32, bufferDeviceAddressCaptureReplay: VkBool32, bufferDeviceAddressMultiDevice: VkBool32) =
                    {
                        sType = 1000244000u
                        pNext = pNext
                        bufferDeviceAddress = bufferDeviceAddress
                        bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay
                        bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice
                    }

                new(bufferDeviceAddress: VkBool32, bufferDeviceAddressCaptureReplay: VkBool32, bufferDeviceAddressMultiDevice: VkBool32) =
                    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(Unchecked.defaultof<nativeint>, bufferDeviceAddress, bufferDeviceAddressCaptureReplay, bufferDeviceAddressMultiDevice)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.bufferDeviceAddress = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddressCaptureReplay = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddressMultiDevice = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "bufferDeviceAddress = %A" x.bufferDeviceAddress
                        sprintf "bufferDeviceAddressCaptureReplay = %A" x.bufferDeviceAddressCaptureReplay
                        sprintf "bufferDeviceAddressMultiDevice = %A" x.bufferDeviceAddressMultiDevice
                    ] |> sprintf "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT { %s }"
            end

        type VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT


        [<AutoOpen>]
        module EnumExtensions =
             type VkBufferCreateFlags with
                  static member inline DeviceAddressCaptureReplayBitExt = enum<VkBufferCreateFlags> 0x00000010
             type VkBufferUsageFlags with
                  static member inline ShaderDeviceAddressBitExt = enum<VkBufferUsageFlags> 0x00020000
             type VkResult with
                  static member inline ErrorInvalidDeviceAddressExt = enum<VkResult> 1000257000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetBufferDeviceAddressEXTDel = delegate of VkDevice * nativeptr<Vulkan12.VkBufferDeviceAddressInfo> -> VkDeviceAddress

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTBufferDeviceAddress")
                static let s_vkGetBufferDeviceAddressEXTDel = VkRaw.vkImportInstanceDelegate<VkGetBufferDeviceAddressEXTDel> "vkGetBufferDeviceAddressEXT"
                static do Report.End(3) |> ignore
                static member vkGetBufferDeviceAddressEXT = s_vkGetBufferDeviceAddressEXTDel
            let vkGetBufferDeviceAddressEXT(device : VkDevice, pInfo : nativeptr<Vulkan12.VkBufferDeviceAddressInfo>) = Loader<unit>.vkGetBufferDeviceAddressEXT.Invoke(device, pInfo)

    /// Promoted to Vulkan13.
    module EXTToolingInfo =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_tooling_info"
        let Number = 246

        type VkToolPurposeFlagsEXT = Vulkan13.VkToolPurposeFlags

        type VkPhysicalDeviceToolPropertiesEXT = Vulkan13.VkPhysicalDeviceToolProperties


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkToolPurposeFlags with
                  static member inline ValidationBitExt = enum<Vulkan13.VkToolPurposeFlags> 0x00000001
                  static member inline ProfilingBitExt = enum<Vulkan13.VkToolPurposeFlags> 0x00000002
                  static member inline TracingBitExt = enum<Vulkan13.VkToolPurposeFlags> 0x00000004
                  static member inline AdditionalFeaturesBitExt = enum<Vulkan13.VkToolPurposeFlags> 0x00000008
                  static member inline ModifyingFeaturesBitExt = enum<Vulkan13.VkToolPurposeFlags> 0x00000010

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceToolPropertiesEXTDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<Vulkan13.VkPhysicalDeviceToolProperties> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTToolingInfo")
                static let s_vkGetPhysicalDeviceToolPropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceToolPropertiesEXTDel> "vkGetPhysicalDeviceToolPropertiesEXT"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceToolPropertiesEXT = s_vkGetPhysicalDeviceToolPropertiesEXTDel
            let vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice : VkPhysicalDevice, pToolCount : nativeptr<uint32>, pToolProperties : nativeptr<Vulkan13.VkPhysicalDeviceToolProperties>) = Loader<unit>.vkGetPhysicalDeviceToolPropertiesEXT.Invoke(physicalDevice, pToolCount, pToolProperties)

        [<AutoOpen>]
        module ``EXTDebugReport`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkToolPurposeFlags with
                      static member inline DebugReportingBitExt = enum<Vulkan13.VkToolPurposeFlags> 0x00000020


        [<AutoOpen>]
        module ``EXTDebugMarker`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkToolPurposeFlags with
                      static member inline DebugMarkersBitExt = enum<Vulkan13.VkToolPurposeFlags> 0x00000040


        [<AutoOpen>]
        module ``EXTDebugUtils`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkToolPurposeFlags with
                      static member inline DebugReportingBitExt = enum<Vulkan13.VkToolPurposeFlags> 0x00000020
                      static member inline DebugMarkersBitExt = enum<Vulkan13.VkToolPurposeFlags> 0x00000040


    /// Promoted to Vulkan12.
    module EXTSeparateStencilUsage =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_separate_stencil_usage"
        let Number = 247

        type VkImageStencilUsageCreateInfoEXT = Vulkan12.VkImageStencilUsageCreateInfo



    /// Deprecated by EXTLayerSettings.
    module EXTValidationFeatures =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_validation_features"
        let Number = 248

        type VkValidationFeatureEnableEXT =
            | GpuAssisted = 0
            | GpuAssistedReserveBindingSlot = 1
            | BestPractices = 2
            | DebugPrintf = 3
            | SynchronizationValidation = 4

        type VkValidationFeatureDisableEXT =
            | All = 0
            | Shaders = 1
            | ThreadSafety = 2
            | ApiParameters = 3
            | ObjectLifetimes = 4
            | CoreChecks = 5
            | UniqueHandles = 6
            | ShaderValidationCache = 7


        [<StructLayout(LayoutKind.Sequential)>]
        type VkValidationFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public enabledValidationFeatureCount : uint32
                val mutable public pEnabledValidationFeatures : nativeptr<VkValidationFeatureEnableEXT>
                val mutable public disabledValidationFeatureCount : uint32
                val mutable public pDisabledValidationFeatures : nativeptr<VkValidationFeatureDisableEXT>

                new(pNext: nativeint, enabledValidationFeatureCount: uint32, pEnabledValidationFeatures: nativeptr<VkValidationFeatureEnableEXT>, disabledValidationFeatureCount: uint32, pDisabledValidationFeatures: nativeptr<VkValidationFeatureDisableEXT>) =
                    {
                        sType = 1000247000u
                        pNext = pNext
                        enabledValidationFeatureCount = enabledValidationFeatureCount
                        pEnabledValidationFeatures = pEnabledValidationFeatures
                        disabledValidationFeatureCount = disabledValidationFeatureCount
                        pDisabledValidationFeatures = pDisabledValidationFeatures
                    }

                new(enabledValidationFeatureCount: uint32, pEnabledValidationFeatures: nativeptr<VkValidationFeatureEnableEXT>, disabledValidationFeatureCount: uint32, pDisabledValidationFeatures: nativeptr<VkValidationFeatureDisableEXT>) =
                    VkValidationFeaturesEXT(Unchecked.defaultof<nativeint>, enabledValidationFeatureCount, pEnabledValidationFeatures, disabledValidationFeatureCount, pDisabledValidationFeatures)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.enabledValidationFeatureCount = Unchecked.defaultof<uint32> && x.pEnabledValidationFeatures = Unchecked.defaultof<nativeptr<VkValidationFeatureEnableEXT>> && x.disabledValidationFeatureCount = Unchecked.defaultof<uint32> && x.pDisabledValidationFeatures = Unchecked.defaultof<nativeptr<VkValidationFeatureDisableEXT>>

                static member Empty =
                    VkValidationFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkValidationFeatureEnableEXT>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkValidationFeatureDisableEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "enabledValidationFeatureCount = %A" x.enabledValidationFeatureCount
                        sprintf "pEnabledValidationFeatures = %A" x.pEnabledValidationFeatures
                        sprintf "disabledValidationFeatureCount = %A" x.disabledValidationFeatureCount
                        sprintf "pDisabledValidationFeatures = %A" x.pDisabledValidationFeatures
                    ] |> sprintf "VkValidationFeaturesEXT { %s }"
            end



    /// Requires KHRSwapchain, KHRPresentId.
    module KHRPresentWait =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_present_wait"
        let Number = 249

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePresentWaitFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentWait : VkBool32

                new(pNext: nativeint, presentWait: VkBool32) =
                    {
                        sType = 1000248000u
                        pNext = pNext
                        presentWait = presentWait
                    }

                new(presentWait: VkBool32) =
                    VkPhysicalDevicePresentWaitFeaturesKHR(Unchecked.defaultof<nativeint>, presentWait)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentWait = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePresentWaitFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentWait = %A" x.presentWait
                    ] |> sprintf "VkPhysicalDevicePresentWaitFeaturesKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkWaitForPresentKHRDel = delegate of VkDevice * KHRSwapchain.VkSwapchainKHR * uint64 * uint64 -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRPresentWait")
                static let s_vkWaitForPresentKHRDel = VkRaw.vkImportInstanceDelegate<VkWaitForPresentKHRDel> "vkWaitForPresentKHR"
                static do Report.End(3) |> ignore
                static member vkWaitForPresentKHR = s_vkWaitForPresentKHRDel
            let vkWaitForPresentKHR(device : VkDevice, swapchain : KHRSwapchain.VkSwapchainKHR, presentId : uint64, timeout : uint64) = Loader<unit>.vkWaitForPresentKHR.Invoke(device, swapchain, presentId, timeout)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module NVCooperativeMatrix =
        let Type = ExtensionType.Device
        let Name = "VK_NV_cooperative_matrix"
        let Number = 250

        type VkScopeNV = KHRCooperativeMatrix.VkScopeKHR
        type VkComponentTypeNV = KHRCooperativeMatrix.VkComponentTypeKHR

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCooperativeMatrixPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public MSize : uint32
                val mutable public NSize : uint32
                val mutable public KSize : uint32
                val mutable public AType : VkComponentTypeNV
                val mutable public BType : VkComponentTypeNV
                val mutable public CType : VkComponentTypeNV
                val mutable public DType : VkComponentTypeNV
                val mutable public scope : VkScopeNV

                new(pNext: nativeint, MSize: uint32, NSize: uint32, KSize: uint32, AType: VkComponentTypeNV, BType: VkComponentTypeNV, CType: VkComponentTypeNV, DType: VkComponentTypeNV, scope: VkScopeNV) =
                    {
                        sType = 1000249001u
                        pNext = pNext
                        MSize = MSize
                        NSize = NSize
                        KSize = KSize
                        AType = AType
                        BType = BType
                        CType = CType
                        DType = DType
                        scope = scope
                    }

                new(MSize: uint32, NSize: uint32, KSize: uint32, AType: VkComponentTypeNV, BType: VkComponentTypeNV, CType: VkComponentTypeNV, DType: VkComponentTypeNV, scope: VkScopeNV) =
                    VkCooperativeMatrixPropertiesNV(Unchecked.defaultof<nativeint>, MSize, NSize, KSize, AType, BType, CType, DType, scope)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.MSize = Unchecked.defaultof<uint32> && x.NSize = Unchecked.defaultof<uint32> && x.KSize = Unchecked.defaultof<uint32> && x.AType = Unchecked.defaultof<VkComponentTypeNV> && x.BType = Unchecked.defaultof<VkComponentTypeNV> && x.CType = Unchecked.defaultof<VkComponentTypeNV> && x.DType = Unchecked.defaultof<VkComponentTypeNV> && x.scope = Unchecked.defaultof<VkScopeNV>

                static member Empty =
                    VkCooperativeMatrixPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkComponentTypeNV>, Unchecked.defaultof<VkComponentTypeNV>, Unchecked.defaultof<VkComponentTypeNV>, Unchecked.defaultof<VkComponentTypeNV>, Unchecked.defaultof<VkScopeNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "MSize = %A" x.MSize
                        sprintf "NSize = %A" x.NSize
                        sprintf "KSize = %A" x.KSize
                        sprintf "AType = %A" x.AType
                        sprintf "BType = %A" x.BType
                        sprintf "CType = %A" x.CType
                        sprintf "DType = %A" x.DType
                        sprintf "scope = %A" x.scope
                    ] |> sprintf "VkCooperativeMatrixPropertiesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCooperativeMatrixFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cooperativeMatrix : VkBool32
                val mutable public cooperativeMatrixRobustBufferAccess : VkBool32

                new(pNext: nativeint, cooperativeMatrix: VkBool32, cooperativeMatrixRobustBufferAccess: VkBool32) =
                    {
                        sType = 1000249000u
                        pNext = pNext
                        cooperativeMatrix = cooperativeMatrix
                        cooperativeMatrixRobustBufferAccess = cooperativeMatrixRobustBufferAccess
                    }

                new(cooperativeMatrix: VkBool32, cooperativeMatrixRobustBufferAccess: VkBool32) =
                    VkPhysicalDeviceCooperativeMatrixFeaturesNV(Unchecked.defaultof<nativeint>, cooperativeMatrix, cooperativeMatrixRobustBufferAccess)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cooperativeMatrix = Unchecked.defaultof<VkBool32> && x.cooperativeMatrixRobustBufferAccess = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCooperativeMatrixFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cooperativeMatrix = %A" x.cooperativeMatrix
                        sprintf "cooperativeMatrixRobustBufferAccess = %A" x.cooperativeMatrixRobustBufferAccess
                    ] |> sprintf "VkPhysicalDeviceCooperativeMatrixFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCooperativeMatrixPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cooperativeMatrixSupportedStages : VkShaderStageFlags

                new(pNext: nativeint, cooperativeMatrixSupportedStages: VkShaderStageFlags) =
                    {
                        sType = 1000249002u
                        pNext = pNext
                        cooperativeMatrixSupportedStages = cooperativeMatrixSupportedStages
                    }

                new(cooperativeMatrixSupportedStages: VkShaderStageFlags) =
                    VkPhysicalDeviceCooperativeMatrixPropertiesNV(Unchecked.defaultof<nativeint>, cooperativeMatrixSupportedStages)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cooperativeMatrixSupportedStages = Unchecked.defaultof<VkShaderStageFlags>

                static member Empty =
                    VkPhysicalDeviceCooperativeMatrixPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderStageFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cooperativeMatrixSupportedStages = %A" x.cooperativeMatrixSupportedStages
                    ] |> sprintf "VkPhysicalDeviceCooperativeMatrixPropertiesNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRCooperativeMatrix.VkComponentTypeKHR with
                  static member inline Float16Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 0
                  static member inline Float32Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 1
                  static member inline Float64Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 2
                  static member inline Sint8Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 3
                  static member inline Sint16Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 4
                  static member inline Sint32Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 5
                  static member inline Sint64Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 6
                  static member inline Uint8Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 7
                  static member inline Uint16Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 8
                  static member inline Uint32Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 9
                  static member inline Uint64Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 10
             type KHRCooperativeMatrix.VkScopeKHR with
                  static member inline DeviceNv = enum<KHRCooperativeMatrix.VkScopeKHR> 1
                  static member inline WorkgroupNv = enum<KHRCooperativeMatrix.VkScopeKHR> 2
                  static member inline SubgroupNv = enum<KHRCooperativeMatrix.VkScopeKHR> 3
                  static member inline QueueFamilyNv = enum<KHRCooperativeMatrix.VkScopeKHR> 5

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceCooperativeMatrixPropertiesNVDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkCooperativeMatrixPropertiesNV> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVCooperativeMatrix")
                static let s_vkGetPhysicalDeviceCooperativeMatrixPropertiesNVDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceCooperativeMatrixPropertiesNVDel> "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = s_vkGetPhysicalDeviceCooperativeMatrixPropertiesNVDel
            let vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkCooperativeMatrixPropertiesNV>) = Loader<unit>.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.Invoke(physicalDevice, pPropertyCount, pProperties)

    /// Requires NVFramebufferMixedSamples, (KHRGetPhysicalDeviceProperties2 | Vulkan11).
    module NVCoverageReductionMode =
        let Type = ExtensionType.Device
        let Name = "VK_NV_coverage_reduction_mode"
        let Number = 251

        type VkCoverageReductionModeNV =
            | Merge = 0
            | Truncate = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkFramebufferMixedSamplesCombinationNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public coverageReductionMode : VkCoverageReductionModeNV
                val mutable public rasterizationSamples : VkSampleCountFlags
                val mutable public depthStencilSamples : VkSampleCountFlags
                val mutable public colorSamples : VkSampleCountFlags

                new(pNext: nativeint, coverageReductionMode: VkCoverageReductionModeNV, rasterizationSamples: VkSampleCountFlags, depthStencilSamples: VkSampleCountFlags, colorSamples: VkSampleCountFlags) =
                    {
                        sType = 1000250002u
                        pNext = pNext
                        coverageReductionMode = coverageReductionMode
                        rasterizationSamples = rasterizationSamples
                        depthStencilSamples = depthStencilSamples
                        colorSamples = colorSamples
                    }

                new(coverageReductionMode: VkCoverageReductionModeNV, rasterizationSamples: VkSampleCountFlags, depthStencilSamples: VkSampleCountFlags, colorSamples: VkSampleCountFlags) =
                    VkFramebufferMixedSamplesCombinationNV(Unchecked.defaultof<nativeint>, coverageReductionMode, rasterizationSamples, depthStencilSamples, colorSamples)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.coverageReductionMode = Unchecked.defaultof<VkCoverageReductionModeNV> && x.rasterizationSamples = Unchecked.defaultof<VkSampleCountFlags> && x.depthStencilSamples = Unchecked.defaultof<VkSampleCountFlags> && x.colorSamples = Unchecked.defaultof<VkSampleCountFlags>

                static member Empty =
                    VkFramebufferMixedSamplesCombinationNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCoverageReductionModeNV>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "coverageReductionMode = %A" x.coverageReductionMode
                        sprintf "rasterizationSamples = %A" x.rasterizationSamples
                        sprintf "depthStencilSamples = %A" x.depthStencilSamples
                        sprintf "colorSamples = %A" x.colorSamples
                    ] |> sprintf "VkFramebufferMixedSamplesCombinationNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCoverageReductionModeFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public coverageReductionMode : VkBool32

                new(pNext: nativeint, coverageReductionMode: VkBool32) =
                    {
                        sType = 1000250000u
                        pNext = pNext
                        coverageReductionMode = coverageReductionMode
                    }

                new(coverageReductionMode: VkBool32) =
                    VkPhysicalDeviceCoverageReductionModeFeaturesNV(Unchecked.defaultof<nativeint>, coverageReductionMode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.coverageReductionMode = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCoverageReductionModeFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "coverageReductionMode = %A" x.coverageReductionMode
                    ] |> sprintf "VkPhysicalDeviceCoverageReductionModeFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineCoverageReductionStateCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkPipelineCoverageReductionStateCreateFlagsNV
                val mutable public coverageReductionMode : VkCoverageReductionModeNV

                new(pNext: nativeint, flags: VkPipelineCoverageReductionStateCreateFlagsNV, coverageReductionMode: VkCoverageReductionModeNV) =
                    {
                        sType = 1000250001u
                        pNext = pNext
                        flags = flags
                        coverageReductionMode = coverageReductionMode
                    }

                new(flags: VkPipelineCoverageReductionStateCreateFlagsNV, coverageReductionMode: VkCoverageReductionModeNV) =
                    VkPipelineCoverageReductionStateCreateInfoNV(Unchecked.defaultof<nativeint>, flags, coverageReductionMode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCoverageReductionStateCreateFlagsNV> && x.coverageReductionMode = Unchecked.defaultof<VkCoverageReductionModeNV>

                static member Empty =
                    VkPipelineCoverageReductionStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCoverageReductionStateCreateFlagsNV>, Unchecked.defaultof<VkCoverageReductionModeNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "coverageReductionMode = %A" x.coverageReductionMode
                    ] |> sprintf "VkPipelineCoverageReductionStateCreateInfoNV { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNVDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkFramebufferMixedSamplesCombinationNV> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVCoverageReductionMode")
                static let s_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNVDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNVDel> "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = s_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNVDel
            let vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice : VkPhysicalDevice, pCombinationCount : nativeptr<uint32>, pCombinations : nativeptr<VkFramebufferMixedSamplesCombinationNV>) = Loader<unit>.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.Invoke(physicalDevice, pCombinationCount, pCombinations)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTFragmentShaderInterlock =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_fragment_shader_interlock"
        let Number = 252

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fragmentShaderSampleInterlock : VkBool32
                val mutable public fragmentShaderPixelInterlock : VkBool32
                val mutable public fragmentShaderShadingRateInterlock : VkBool32

                new(pNext: nativeint, fragmentShaderSampleInterlock: VkBool32, fragmentShaderPixelInterlock: VkBool32, fragmentShaderShadingRateInterlock: VkBool32) =
                    {
                        sType = 1000251000u
                        pNext = pNext
                        fragmentShaderSampleInterlock = fragmentShaderSampleInterlock
                        fragmentShaderPixelInterlock = fragmentShaderPixelInterlock
                        fragmentShaderShadingRateInterlock = fragmentShaderShadingRateInterlock
                    }

                new(fragmentShaderSampleInterlock: VkBool32, fragmentShaderPixelInterlock: VkBool32, fragmentShaderShadingRateInterlock: VkBool32) =
                    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(Unchecked.defaultof<nativeint>, fragmentShaderSampleInterlock, fragmentShaderPixelInterlock, fragmentShaderShadingRateInterlock)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fragmentShaderSampleInterlock = Unchecked.defaultof<VkBool32> && x.fragmentShaderPixelInterlock = Unchecked.defaultof<VkBool32> && x.fragmentShaderShadingRateInterlock = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fragmentShaderSampleInterlock = %A" x.fragmentShaderSampleInterlock
                        sprintf "fragmentShaderPixelInterlock = %A" x.fragmentShaderPixelInterlock
                        sprintf "fragmentShaderShadingRateInterlock = %A" x.fragmentShaderShadingRateInterlock
                    ] |> sprintf "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT { %s }"
            end



    /// Requires KHRSamplerYcbcrConversion | Vulkan11.
    module EXTYcbcrImageArrays =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_ycbcr_image_arrays"
        let Number = 253

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceYcbcrImageArraysFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public ycbcrImageArrays : VkBool32

                new(pNext: nativeint, ycbcrImageArrays: VkBool32) =
                    {
                        sType = 1000252000u
                        pNext = pNext
                        ycbcrImageArrays = ycbcrImageArrays
                    }

                new(ycbcrImageArrays: VkBool32) =
                    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(Unchecked.defaultof<nativeint>, ycbcrImageArrays)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.ycbcrImageArrays = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "ycbcrImageArrays = %A" x.ycbcrImageArrays
                    ] |> sprintf "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan12.
    module KHRUniformBufferStandardLayout =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_uniform_buffer_standard_layout"
        let Number = 254

        type VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = Vulkan12.VkPhysicalDeviceUniformBufferStandardLayoutFeatures



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTProvokingVertex =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_provoking_vertex"
        let Number = 255

        type VkProvokingVertexModeEXT =
            | FirstVertex = 0
            | LastVertex = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceProvokingVertexFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public provokingVertexLast : VkBool32
                val mutable public transformFeedbackPreservesProvokingVertex : VkBool32

                new(pNext: nativeint, provokingVertexLast: VkBool32, transformFeedbackPreservesProvokingVertex: VkBool32) =
                    {
                        sType = 1000254000u
                        pNext = pNext
                        provokingVertexLast = provokingVertexLast
                        transformFeedbackPreservesProvokingVertex = transformFeedbackPreservesProvokingVertex
                    }

                new(provokingVertexLast: VkBool32, transformFeedbackPreservesProvokingVertex: VkBool32) =
                    VkPhysicalDeviceProvokingVertexFeaturesEXT(Unchecked.defaultof<nativeint>, provokingVertexLast, transformFeedbackPreservesProvokingVertex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.provokingVertexLast = Unchecked.defaultof<VkBool32> && x.transformFeedbackPreservesProvokingVertex = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceProvokingVertexFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "provokingVertexLast = %A" x.provokingVertexLast
                        sprintf "transformFeedbackPreservesProvokingVertex = %A" x.transformFeedbackPreservesProvokingVertex
                    ] |> sprintf "VkPhysicalDeviceProvokingVertexFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceProvokingVertexPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public provokingVertexModePerPipeline : VkBool32
                val mutable public transformFeedbackPreservesTriangleFanProvokingVertex : VkBool32

                new(pNext: nativeint, provokingVertexModePerPipeline: VkBool32, transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32) =
                    {
                        sType = 1000254002u
                        pNext = pNext
                        provokingVertexModePerPipeline = provokingVertexModePerPipeline
                        transformFeedbackPreservesTriangleFanProvokingVertex = transformFeedbackPreservesTriangleFanProvokingVertex
                    }

                new(provokingVertexModePerPipeline: VkBool32, transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32) =
                    VkPhysicalDeviceProvokingVertexPropertiesEXT(Unchecked.defaultof<nativeint>, provokingVertexModePerPipeline, transformFeedbackPreservesTriangleFanProvokingVertex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.provokingVertexModePerPipeline = Unchecked.defaultof<VkBool32> && x.transformFeedbackPreservesTriangleFanProvokingVertex = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceProvokingVertexPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "provokingVertexModePerPipeline = %A" x.provokingVertexModePerPipeline
                        sprintf "transformFeedbackPreservesTriangleFanProvokingVertex = %A" x.transformFeedbackPreservesTriangleFanProvokingVertex
                    ] |> sprintf "VkPhysicalDeviceProvokingVertexPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineRasterizationProvokingVertexStateCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public provokingVertexMode : VkProvokingVertexModeEXT

                new(pNext: nativeint, provokingVertexMode: VkProvokingVertexModeEXT) =
                    {
                        sType = 1000254001u
                        pNext = pNext
                        provokingVertexMode = provokingVertexMode
                    }

                new(provokingVertexMode: VkProvokingVertexModeEXT) =
                    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(Unchecked.defaultof<nativeint>, provokingVertexMode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.provokingVertexMode = Unchecked.defaultof<VkProvokingVertexModeEXT>

                static member Empty =
                    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkProvokingVertexModeEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "provokingVertexMode = %A" x.provokingVertexMode
                    ] |> sprintf "VkPipelineRasterizationProvokingVertexStateCreateInfoEXT { %s }"
            end



    /// Requires (KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRSurface, KHRGetSurfaceCapabilities2, KHRSwapchain.
    module EXTFullScreenExclusive =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_full_screen_exclusive"
        let Number = 256

        type VkFullScreenExclusiveEXT =
            | Default = 0
            | Allowed = 1
            | Disallowed = 2
            | ApplicationControlled = 3


        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfaceCapabilitiesFullScreenExclusiveEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fullScreenExclusiveSupported : VkBool32

                new(pNext: nativeint, fullScreenExclusiveSupported: VkBool32) =
                    {
                        sType = 1000255002u
                        pNext = pNext
                        fullScreenExclusiveSupported = fullScreenExclusiveSupported
                    }

                new(fullScreenExclusiveSupported: VkBool32) =
                    VkSurfaceCapabilitiesFullScreenExclusiveEXT(Unchecked.defaultof<nativeint>, fullScreenExclusiveSupported)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fullScreenExclusiveSupported = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkSurfaceCapabilitiesFullScreenExclusiveEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fullScreenExclusiveSupported = %A" x.fullScreenExclusiveSupported
                    ] |> sprintf "VkSurfaceCapabilitiesFullScreenExclusiveEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfaceFullScreenExclusiveInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fullScreenExclusive : VkFullScreenExclusiveEXT

                new(pNext: nativeint, fullScreenExclusive: VkFullScreenExclusiveEXT) =
                    {
                        sType = 1000255000u
                        pNext = pNext
                        fullScreenExclusive = fullScreenExclusive
                    }

                new(fullScreenExclusive: VkFullScreenExclusiveEXT) =
                    VkSurfaceFullScreenExclusiveInfoEXT(Unchecked.defaultof<nativeint>, fullScreenExclusive)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fullScreenExclusive = Unchecked.defaultof<VkFullScreenExclusiveEXT>

                static member Empty =
                    VkSurfaceFullScreenExclusiveInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFullScreenExclusiveEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fullScreenExclusive = %A" x.fullScreenExclusive
                    ] |> sprintf "VkSurfaceFullScreenExclusiveInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkResult with
                  static member inline ErrorFullScreenExclusiveModeLostExt = enum<VkResult> -1000255000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceSurfacePresentModes2EXTDel = delegate of VkPhysicalDevice * nativeptr<KHRGetSurfaceCapabilities2.VkPhysicalDeviceSurfaceInfo2KHR> * nativeptr<uint32> * nativeptr<KHRSurface.VkPresentModeKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkAcquireFullScreenExclusiveModeEXTDel = delegate of VkDevice * KHRSwapchain.VkSwapchainKHR -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkReleaseFullScreenExclusiveModeEXTDel = delegate of VkDevice * KHRSwapchain.VkSwapchainKHR -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTFullScreenExclusive")
                static let s_vkGetPhysicalDeviceSurfacePresentModes2EXTDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfacePresentModes2EXTDel> "vkGetPhysicalDeviceSurfacePresentModes2EXT"
                static let s_vkAcquireFullScreenExclusiveModeEXTDel = VkRaw.vkImportInstanceDelegate<VkAcquireFullScreenExclusiveModeEXTDel> "vkAcquireFullScreenExclusiveModeEXT"
                static let s_vkReleaseFullScreenExclusiveModeEXTDel = VkRaw.vkImportInstanceDelegate<VkReleaseFullScreenExclusiveModeEXTDel> "vkReleaseFullScreenExclusiveModeEXT"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceSurfacePresentModes2EXT = s_vkGetPhysicalDeviceSurfacePresentModes2EXTDel
                static member vkAcquireFullScreenExclusiveModeEXT = s_vkAcquireFullScreenExclusiveModeEXTDel
                static member vkReleaseFullScreenExclusiveModeEXT = s_vkReleaseFullScreenExclusiveModeEXTDel
            let vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice : VkPhysicalDevice, pSurfaceInfo : nativeptr<KHRGetSurfaceCapabilities2.VkPhysicalDeviceSurfaceInfo2KHR>, pPresentModeCount : nativeptr<uint32>, pPresentModes : nativeptr<KHRSurface.VkPresentModeKHR>) = Loader<unit>.vkGetPhysicalDeviceSurfacePresentModes2EXT.Invoke(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes)
            let vkAcquireFullScreenExclusiveModeEXT(device : VkDevice, swapchain : KHRSwapchain.VkSwapchainKHR) = Loader<unit>.vkAcquireFullScreenExclusiveModeEXT.Invoke(device, swapchain)
            let vkReleaseFullScreenExclusiveModeEXT(device : VkDevice, swapchain : KHRSwapchain.VkSwapchainKHR) = Loader<unit>.vkReleaseFullScreenExclusiveModeEXT.Invoke(device, swapchain)

        [<AutoOpen>]
        module ``KHRWin32Surface`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkSurfaceFullScreenExclusiveWin32InfoEXT =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public hmonitor : nativeint

                    new(pNext: nativeint, hmonitor: nativeint) =
                        {
                            sType = 1000255001u
                            pNext = pNext
                            hmonitor = hmonitor
                        }

                    new(hmonitor: nativeint) =
                        VkSurfaceFullScreenExclusiveWin32InfoEXT(Unchecked.defaultof<nativeint>, hmonitor)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.hmonitor = Unchecked.defaultof<nativeint>

                    static member Empty =
                        VkSurfaceFullScreenExclusiveWin32InfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "hmonitor = %A" x.hmonitor
                        ] |> sprintf "VkSurfaceFullScreenExclusiveWin32InfoEXT { %s }"
                end



        [<AutoOpen>]
        module ``KHRDeviceGroup | Vulkan11`` =
            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkGetDeviceGroupSurfacePresentModes2EXTDel = delegate of VkDevice * nativeptr<KHRGetSurfaceCapabilities2.VkPhysicalDeviceSurfaceInfo2KHR> * nativeptr<KHRSwapchain.``Vulkan11``.VkDeviceGroupPresentModeFlagsKHR> -> VkResult

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTFullScreenExclusive -> KHRDeviceGroup | Vulkan11")
                    static let s_vkGetDeviceGroupSurfacePresentModes2EXTDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceGroupSurfacePresentModes2EXTDel> "vkGetDeviceGroupSurfacePresentModes2EXT"
                    static do Report.End(3) |> ignore
                    static member vkGetDeviceGroupSurfacePresentModes2EXT = s_vkGetDeviceGroupSurfacePresentModes2EXTDel
                let vkGetDeviceGroupSurfacePresentModes2EXT(device : VkDevice, pSurfaceInfo : nativeptr<KHRGetSurfaceCapabilities2.VkPhysicalDeviceSurfaceInfo2KHR>, pModes : nativeptr<KHRSwapchain.``Vulkan11``.VkDeviceGroupPresentModeFlagsKHR>) = Loader<unit>.vkGetDeviceGroupSurfacePresentModes2EXT.Invoke(device, pSurfaceInfo, pModes)

    /// Requires KHRSurface.
    module EXTHeadlessSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_headless_surface"
        let Number = 257

        [<StructLayout(LayoutKind.Sequential)>]
        type VkHeadlessSurfaceCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkHeadlessSurfaceCreateFlagsEXT

                new(pNext: nativeint, flags: VkHeadlessSurfaceCreateFlagsEXT) =
                    {
                        sType = 1000256000u
                        pNext = pNext
                        flags = flags
                    }

                new(flags: VkHeadlessSurfaceCreateFlagsEXT) =
                    VkHeadlessSurfaceCreateInfoEXT(Unchecked.defaultof<nativeint>, flags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkHeadlessSurfaceCreateFlagsEXT>

                static member Empty =
                    VkHeadlessSurfaceCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkHeadlessSurfaceCreateFlagsEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                    ] |> sprintf "VkHeadlessSurfaceCreateInfoEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateHeadlessSurfaceEXTDel = delegate of VkInstance * nativeptr<VkHeadlessSurfaceCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTHeadlessSurface")
                static let s_vkCreateHeadlessSurfaceEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateHeadlessSurfaceEXTDel> "vkCreateHeadlessSurfaceEXT"
                static do Report.End(3) |> ignore
                static member vkCreateHeadlessSurfaceEXT = s_vkCreateHeadlessSurfaceEXTDel
            let vkCreateHeadlessSurfaceEXT(instance : VkInstance, pCreateInfo : nativeptr<VkHeadlessSurfaceCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateHeadlessSurfaceEXT.Invoke(instance, pCreateInfo, pAllocator, pSurface)

    /// Requires (KHRGetPhysicalDeviceProperties2, KHRDeviceGroup) | Vulkan11.
    /// Promoted to Vulkan12.
    module KHRBufferDeviceAddress =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_buffer_device_address"
        let Number = 258

        type VkBufferDeviceAddressInfoKHR = Vulkan12.VkBufferDeviceAddressInfo

        type VkBufferOpaqueCaptureAddressCreateInfoKHR = Vulkan12.VkBufferOpaqueCaptureAddressCreateInfo

        type VkDeviceMemoryOpaqueCaptureAddressInfoKHR = Vulkan12.VkDeviceMemoryOpaqueCaptureAddressInfo

        type VkMemoryOpaqueCaptureAddressAllocateInfoKHR = Vulkan12.VkMemoryOpaqueCaptureAddressAllocateInfo

        type VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = Vulkan12.VkPhysicalDeviceBufferDeviceAddressFeatures


        [<AutoOpen>]
        module EnumExtensions =
             type VkBufferCreateFlags with
                  static member inline DeviceAddressCaptureReplayBitKhr = enum<VkBufferCreateFlags> 0x00000010
             type VkBufferUsageFlags with
                  static member inline ShaderDeviceAddressBitKhr = enum<VkBufferUsageFlags> 0x00020000
             type Vulkan11.VkMemoryAllocateFlags with
                  static member inline DeviceAddressBitKhr = enum<Vulkan11.VkMemoryAllocateFlags> 0x00000002
                  static member inline DeviceAddressCaptureReplayBitKhr = enum<Vulkan11.VkMemoryAllocateFlags> 0x00000004
             type VkResult with
                  static member inline ErrorInvalidOpaqueCaptureAddressKhr = enum<VkResult> 1000257000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetBufferDeviceAddressKHRDel = delegate of VkDevice * nativeptr<Vulkan12.VkBufferDeviceAddressInfo> -> VkDeviceAddress
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetBufferOpaqueCaptureAddressKHRDel = delegate of VkDevice * nativeptr<Vulkan12.VkBufferDeviceAddressInfo> -> uint64
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceMemoryOpaqueCaptureAddressKHRDel = delegate of VkDevice * nativeptr<Vulkan12.VkDeviceMemoryOpaqueCaptureAddressInfo> -> uint64

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRBufferDeviceAddress")
                static let s_vkGetBufferDeviceAddressKHRDel = VkRaw.vkImportInstanceDelegate<VkGetBufferDeviceAddressKHRDel> "vkGetBufferDeviceAddressKHR"
                static let s_vkGetBufferOpaqueCaptureAddressKHRDel = VkRaw.vkImportInstanceDelegate<VkGetBufferOpaqueCaptureAddressKHRDel> "vkGetBufferOpaqueCaptureAddressKHR"
                static let s_vkGetDeviceMemoryOpaqueCaptureAddressKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceMemoryOpaqueCaptureAddressKHRDel> "vkGetDeviceMemoryOpaqueCaptureAddressKHR"
                static do Report.End(3) |> ignore
                static member vkGetBufferDeviceAddressKHR = s_vkGetBufferDeviceAddressKHRDel
                static member vkGetBufferOpaqueCaptureAddressKHR = s_vkGetBufferOpaqueCaptureAddressKHRDel
                static member vkGetDeviceMemoryOpaqueCaptureAddressKHR = s_vkGetDeviceMemoryOpaqueCaptureAddressKHRDel
            let vkGetBufferDeviceAddressKHR(device : VkDevice, pInfo : nativeptr<Vulkan12.VkBufferDeviceAddressInfo>) = Loader<unit>.vkGetBufferDeviceAddressKHR.Invoke(device, pInfo)
            let vkGetBufferOpaqueCaptureAddressKHR(device : VkDevice, pInfo : nativeptr<Vulkan12.VkBufferDeviceAddressInfo>) = Loader<unit>.vkGetBufferOpaqueCaptureAddressKHR.Invoke(device, pInfo)
            let vkGetDeviceMemoryOpaqueCaptureAddressKHR(device : VkDevice, pInfo : nativeptr<Vulkan12.VkDeviceMemoryOpaqueCaptureAddressInfo>) = Loader<unit>.vkGetDeviceMemoryOpaqueCaptureAddressKHR.Invoke(device, pInfo)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to KHRLineRasterization.
    module EXTLineRasterization =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_line_rasterization"
        let Number = 260

        type VkLineRasterizationModeEXT = Vulkan14.VkLineRasterizationMode

        type VkPhysicalDeviceLineRasterizationFeaturesEXT = Vulkan14.VkPhysicalDeviceLineRasterizationFeatures

        type VkPhysicalDeviceLineRasterizationPropertiesEXT = Vulkan14.VkPhysicalDeviceLineRasterizationProperties

        type VkPipelineRasterizationLineStateCreateInfoEXT = Vulkan14.VkPipelineRasterizationLineStateCreateInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  static member inline LineStippleExt = enum<VkDynamicState> 1000259000
             type Vulkan14.VkLineRasterizationMode with
                  static member inline DefaultExt = enum<Vulkan14.VkLineRasterizationMode> 0
                  static member inline RectangularExt = enum<Vulkan14.VkLineRasterizationMode> 1
                  static member inline BresenhamExt = enum<Vulkan14.VkLineRasterizationMode> 2
                  static member inline RectangularSmoothExt = enum<Vulkan14.VkLineRasterizationMode> 3

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetLineStippleEXTDel = delegate of VkCommandBuffer * uint32 * uint16 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTLineRasterization")
                static let s_vkCmdSetLineStippleEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetLineStippleEXTDel> "vkCmdSetLineStippleEXT"
                static do Report.End(3) |> ignore
                static member vkCmdSetLineStippleEXT = s_vkCmdSetLineStippleEXTDel
            let vkCmdSetLineStippleEXT(commandBuffer : VkCommandBuffer, lineStippleFactor : uint32, lineStipplePattern : uint16) = Loader<unit>.vkCmdSetLineStippleEXT.Invoke(commandBuffer, lineStippleFactor, lineStipplePattern)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTShaderAtomicFloat =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_shader_atomic_float"
        let Number = 261

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderAtomicFloatFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderBufferFloat32Atomics : VkBool32
                val mutable public shaderBufferFloat32AtomicAdd : VkBool32
                val mutable public shaderBufferFloat64Atomics : VkBool32
                val mutable public shaderBufferFloat64AtomicAdd : VkBool32
                val mutable public shaderSharedFloat32Atomics : VkBool32
                val mutable public shaderSharedFloat32AtomicAdd : VkBool32
                val mutable public shaderSharedFloat64Atomics : VkBool32
                val mutable public shaderSharedFloat64AtomicAdd : VkBool32
                val mutable public shaderImageFloat32Atomics : VkBool32
                val mutable public shaderImageFloat32AtomicAdd : VkBool32
                val mutable public sparseImageFloat32Atomics : VkBool32
                val mutable public sparseImageFloat32AtomicAdd : VkBool32

                new(pNext: nativeint, shaderBufferFloat32Atomics: VkBool32, shaderBufferFloat32AtomicAdd: VkBool32, shaderBufferFloat64Atomics: VkBool32, shaderBufferFloat64AtomicAdd: VkBool32, shaderSharedFloat32Atomics: VkBool32, shaderSharedFloat32AtomicAdd: VkBool32, shaderSharedFloat64Atomics: VkBool32, shaderSharedFloat64AtomicAdd: VkBool32, shaderImageFloat32Atomics: VkBool32, shaderImageFloat32AtomicAdd: VkBool32, sparseImageFloat32Atomics: VkBool32, sparseImageFloat32AtomicAdd: VkBool32) =
                    {
                        sType = 1000260000u
                        pNext = pNext
                        shaderBufferFloat32Atomics = shaderBufferFloat32Atomics
                        shaderBufferFloat32AtomicAdd = shaderBufferFloat32AtomicAdd
                        shaderBufferFloat64Atomics = shaderBufferFloat64Atomics
                        shaderBufferFloat64AtomicAdd = shaderBufferFloat64AtomicAdd
                        shaderSharedFloat32Atomics = shaderSharedFloat32Atomics
                        shaderSharedFloat32AtomicAdd = shaderSharedFloat32AtomicAdd
                        shaderSharedFloat64Atomics = shaderSharedFloat64Atomics
                        shaderSharedFloat64AtomicAdd = shaderSharedFloat64AtomicAdd
                        shaderImageFloat32Atomics = shaderImageFloat32Atomics
                        shaderImageFloat32AtomicAdd = shaderImageFloat32AtomicAdd
                        sparseImageFloat32Atomics = sparseImageFloat32Atomics
                        sparseImageFloat32AtomicAdd = sparseImageFloat32AtomicAdd
                    }

                new(shaderBufferFloat32Atomics: VkBool32, shaderBufferFloat32AtomicAdd: VkBool32, shaderBufferFloat64Atomics: VkBool32, shaderBufferFloat64AtomicAdd: VkBool32, shaderSharedFloat32Atomics: VkBool32, shaderSharedFloat32AtomicAdd: VkBool32, shaderSharedFloat64Atomics: VkBool32, shaderSharedFloat64AtomicAdd: VkBool32, shaderImageFloat32Atomics: VkBool32, shaderImageFloat32AtomicAdd: VkBool32, sparseImageFloat32Atomics: VkBool32, sparseImageFloat32AtomicAdd: VkBool32) =
                    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(Unchecked.defaultof<nativeint>, shaderBufferFloat32Atomics, shaderBufferFloat32AtomicAdd, shaderBufferFloat64Atomics, shaderBufferFloat64AtomicAdd, shaderSharedFloat32Atomics, shaderSharedFloat32AtomicAdd, shaderSharedFloat64Atomics, shaderSharedFloat64AtomicAdd, shaderImageFloat32Atomics, shaderImageFloat32AtomicAdd, sparseImageFloat32Atomics, sparseImageFloat32AtomicAdd)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderBufferFloat32Atomics = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat32AtomicAdd = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat64Atomics = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat64AtomicAdd = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat32Atomics = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat32AtomicAdd = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat64Atomics = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat64AtomicAdd = Unchecked.defaultof<VkBool32> && x.shaderImageFloat32Atomics = Unchecked.defaultof<VkBool32> && x.shaderImageFloat32AtomicAdd = Unchecked.defaultof<VkBool32> && x.sparseImageFloat32Atomics = Unchecked.defaultof<VkBool32> && x.sparseImageFloat32AtomicAdd = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderBufferFloat32Atomics = %A" x.shaderBufferFloat32Atomics
                        sprintf "shaderBufferFloat32AtomicAdd = %A" x.shaderBufferFloat32AtomicAdd
                        sprintf "shaderBufferFloat64Atomics = %A" x.shaderBufferFloat64Atomics
                        sprintf "shaderBufferFloat64AtomicAdd = %A" x.shaderBufferFloat64AtomicAdd
                        sprintf "shaderSharedFloat32Atomics = %A" x.shaderSharedFloat32Atomics
                        sprintf "shaderSharedFloat32AtomicAdd = %A" x.shaderSharedFloat32AtomicAdd
                        sprintf "shaderSharedFloat64Atomics = %A" x.shaderSharedFloat64Atomics
                        sprintf "shaderSharedFloat64AtomicAdd = %A" x.shaderSharedFloat64AtomicAdd
                        sprintf "shaderImageFloat32Atomics = %A" x.shaderImageFloat32Atomics
                        sprintf "shaderImageFloat32AtomicAdd = %A" x.shaderImageFloat32AtomicAdd
                        sprintf "sparseImageFloat32Atomics = %A" x.sparseImageFloat32Atomics
                        sprintf "sparseImageFloat32AtomicAdd = %A" x.sparseImageFloat32AtomicAdd
                    ] |> sprintf "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan12.
    module EXTHostQueryReset =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_host_query_reset"
        let Number = 262

        type VkPhysicalDeviceHostQueryResetFeaturesEXT = Vulkan12.VkPhysicalDeviceHostQueryResetFeatures


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkResetQueryPoolEXTDel = delegate of VkDevice * VkQueryPool * uint32 * uint32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTHostQueryReset")
                static let s_vkResetQueryPoolEXTDel = VkRaw.vkImportInstanceDelegate<VkResetQueryPoolEXTDel> "vkResetQueryPoolEXT"
                static do Report.End(3) |> ignore
                static member vkResetQueryPoolEXT = s_vkResetQueryPoolEXTDel
            let vkResetQueryPoolEXT(device : VkDevice, queryPool : VkQueryPool, firstQuery : uint32, queryCount : uint32) = Loader<unit>.vkResetQueryPoolEXT.Invoke(device, queryPool, firstQuery, queryCount)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to KHRIndexTypeUint8.
    module EXTIndexTypeUint8 =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_index_type_uint8"
        let Number = 266

        type VkPhysicalDeviceIndexTypeUint8FeaturesEXT = Vulkan14.VkPhysicalDeviceIndexTypeUint8Features


        [<AutoOpen>]
        module EnumExtensions =
             type VkIndexType with
                  static member inline Uint8Ext = enum<VkIndexType> 1000265000


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module EXTExtendedDynamicState =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_extended_dynamic_state"
        let Number = 268

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceExtendedDynamicStateFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public extendedDynamicState : VkBool32

                new(pNext: nativeint, extendedDynamicState: VkBool32) =
                    {
                        sType = 1000267000u
                        pNext = pNext
                        extendedDynamicState = extendedDynamicState
                    }

                new(extendedDynamicState: VkBool32) =
                    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(Unchecked.defaultof<nativeint>, extendedDynamicState)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.extendedDynamicState = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "extendedDynamicState = %A" x.extendedDynamicState
                    ] |> sprintf "VkPhysicalDeviceExtendedDynamicStateFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  static member inline CullModeExt = enum<VkDynamicState> 1000267000
                  static member inline FrontFaceExt = enum<VkDynamicState> 1000267001
                  static member inline PrimitiveTopologyExt = enum<VkDynamicState> 1000267002
                  static member inline ViewportWithCountExt = enum<VkDynamicState> 1000267003
                  static member inline ScissorWithCountExt = enum<VkDynamicState> 1000267004
                  static member inline VertexInputBindingStrideExt = enum<VkDynamicState> 1000267005
                  static member inline DepthTestEnableExt = enum<VkDynamicState> 1000267006
                  static member inline DepthWriteEnableExt = enum<VkDynamicState> 1000267007
                  static member inline DepthCompareOpExt = enum<VkDynamicState> 1000267008
                  static member inline DepthBoundsTestEnableExt = enum<VkDynamicState> 1000267009
                  static member inline StencilTestEnableExt = enum<VkDynamicState> 1000267010
                  static member inline StencilOpExt = enum<VkDynamicState> 1000267011

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetCullModeEXTDel = delegate of VkCommandBuffer * VkCullModeFlags -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetFrontFaceEXTDel = delegate of VkCommandBuffer * VkFrontFace -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetPrimitiveTopologyEXTDel = delegate of VkCommandBuffer * VkPrimitiveTopology -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetViewportWithCountEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkViewport> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetScissorWithCountEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkRect2D> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBindVertexBuffers2EXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkBuffer> * nativeptr<VkDeviceSize> * nativeptr<VkDeviceSize> * nativeptr<VkDeviceSize> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetDepthTestEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetDepthWriteEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetDepthCompareOpEXTDel = delegate of VkCommandBuffer * VkCompareOp -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetDepthBoundsTestEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetStencilTestEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetStencilOpEXTDel = delegate of VkCommandBuffer * VkStencilFaceFlags * VkStencilOp * VkStencilOp * VkStencilOp * VkCompareOp -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState")
                static let s_vkCmdSetCullModeEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetCullModeEXTDel> "vkCmdSetCullModeEXT"
                static let s_vkCmdSetFrontFaceEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetFrontFaceEXTDel> "vkCmdSetFrontFaceEXT"
                static let s_vkCmdSetPrimitiveTopologyEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPrimitiveTopologyEXTDel> "vkCmdSetPrimitiveTopologyEXT"
                static let s_vkCmdSetViewportWithCountEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetViewportWithCountEXTDel> "vkCmdSetViewportWithCountEXT"
                static let s_vkCmdSetScissorWithCountEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetScissorWithCountEXTDel> "vkCmdSetScissorWithCountEXT"
                static let s_vkCmdBindVertexBuffers2EXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBindVertexBuffers2EXTDel> "vkCmdBindVertexBuffers2EXT"
                static let s_vkCmdSetDepthTestEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthTestEnableEXTDel> "vkCmdSetDepthTestEnableEXT"
                static let s_vkCmdSetDepthWriteEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthWriteEnableEXTDel> "vkCmdSetDepthWriteEnableEXT"
                static let s_vkCmdSetDepthCompareOpEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthCompareOpEXTDel> "vkCmdSetDepthCompareOpEXT"
                static let s_vkCmdSetDepthBoundsTestEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthBoundsTestEnableEXTDel> "vkCmdSetDepthBoundsTestEnableEXT"
                static let s_vkCmdSetStencilTestEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetStencilTestEnableEXTDel> "vkCmdSetStencilTestEnableEXT"
                static let s_vkCmdSetStencilOpEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetStencilOpEXTDel> "vkCmdSetStencilOpEXT"
                static do Report.End(3) |> ignore
                static member vkCmdSetCullModeEXT = s_vkCmdSetCullModeEXTDel
                static member vkCmdSetFrontFaceEXT = s_vkCmdSetFrontFaceEXTDel
                static member vkCmdSetPrimitiveTopologyEXT = s_vkCmdSetPrimitiveTopologyEXTDel
                static member vkCmdSetViewportWithCountEXT = s_vkCmdSetViewportWithCountEXTDel
                static member vkCmdSetScissorWithCountEXT = s_vkCmdSetScissorWithCountEXTDel
                static member vkCmdBindVertexBuffers2EXT = s_vkCmdBindVertexBuffers2EXTDel
                static member vkCmdSetDepthTestEnableEXT = s_vkCmdSetDepthTestEnableEXTDel
                static member vkCmdSetDepthWriteEnableEXT = s_vkCmdSetDepthWriteEnableEXTDel
                static member vkCmdSetDepthCompareOpEXT = s_vkCmdSetDepthCompareOpEXTDel
                static member vkCmdSetDepthBoundsTestEnableEXT = s_vkCmdSetDepthBoundsTestEnableEXTDel
                static member vkCmdSetStencilTestEnableEXT = s_vkCmdSetStencilTestEnableEXTDel
                static member vkCmdSetStencilOpEXT = s_vkCmdSetStencilOpEXTDel
            let vkCmdSetCullModeEXT(commandBuffer : VkCommandBuffer, cullMode : VkCullModeFlags) = Loader<unit>.vkCmdSetCullModeEXT.Invoke(commandBuffer, cullMode)
            let vkCmdSetFrontFaceEXT(commandBuffer : VkCommandBuffer, frontFace : VkFrontFace) = Loader<unit>.vkCmdSetFrontFaceEXT.Invoke(commandBuffer, frontFace)
            let vkCmdSetPrimitiveTopologyEXT(commandBuffer : VkCommandBuffer, primitiveTopology : VkPrimitiveTopology) = Loader<unit>.vkCmdSetPrimitiveTopologyEXT.Invoke(commandBuffer, primitiveTopology)
            let vkCmdSetViewportWithCountEXT(commandBuffer : VkCommandBuffer, viewportCount : uint32, pViewports : nativeptr<VkViewport>) = Loader<unit>.vkCmdSetViewportWithCountEXT.Invoke(commandBuffer, viewportCount, pViewports)
            let vkCmdSetScissorWithCountEXT(commandBuffer : VkCommandBuffer, scissorCount : uint32, pScissors : nativeptr<VkRect2D>) = Loader<unit>.vkCmdSetScissorWithCountEXT.Invoke(commandBuffer, scissorCount, pScissors)
            let vkCmdBindVertexBuffers2EXT(commandBuffer : VkCommandBuffer, firstBinding : uint32, bindingCount : uint32, pBuffers : nativeptr<VkBuffer>, pOffsets : nativeptr<VkDeviceSize>, pSizes : nativeptr<VkDeviceSize>, pStrides : nativeptr<VkDeviceSize>) = Loader<unit>.vkCmdBindVertexBuffers2EXT.Invoke(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides)
            let vkCmdSetDepthTestEnableEXT(commandBuffer : VkCommandBuffer, depthTestEnable : VkBool32) = Loader<unit>.vkCmdSetDepthTestEnableEXT.Invoke(commandBuffer, depthTestEnable)
            let vkCmdSetDepthWriteEnableEXT(commandBuffer : VkCommandBuffer, depthWriteEnable : VkBool32) = Loader<unit>.vkCmdSetDepthWriteEnableEXT.Invoke(commandBuffer, depthWriteEnable)
            let vkCmdSetDepthCompareOpEXT(commandBuffer : VkCommandBuffer, depthCompareOp : VkCompareOp) = Loader<unit>.vkCmdSetDepthCompareOpEXT.Invoke(commandBuffer, depthCompareOp)
            let vkCmdSetDepthBoundsTestEnableEXT(commandBuffer : VkCommandBuffer, depthBoundsTestEnable : VkBool32) = Loader<unit>.vkCmdSetDepthBoundsTestEnableEXT.Invoke(commandBuffer, depthBoundsTestEnable)
            let vkCmdSetStencilTestEnableEXT(commandBuffer : VkCommandBuffer, stencilTestEnable : VkBool32) = Loader<unit>.vkCmdSetStencilTestEnableEXT.Invoke(commandBuffer, stencilTestEnable)
            let vkCmdSetStencilOpEXT(commandBuffer : VkCommandBuffer, faceMask : VkStencilFaceFlags, failOp : VkStencilOp, passOp : VkStencilOp, depthFailOp : VkStencilOp, compareOp : VkCompareOp) = Loader<unit>.vkCmdSetStencilOpEXT.Invoke(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp)

    module KHRDeferredHostOperations =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_deferred_host_operations"
        let Number = 269


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeferredOperationKHR =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkDeferredOperationKHR(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  static member inline DeferredOperationKhr = enum<VkObjectType> 1000268000
             type VkResult with
                  static member inline ThreadIdleKhr = enum<VkResult> 1000268000
                  static member inline ThreadDoneKhr = enum<VkResult> 1000268001
                  static member inline OperationDeferredKhr = enum<VkResult> 1000268002
                  static member inline OperationNotDeferredKhr = enum<VkResult> 1000268003

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateDeferredOperationKHRDel = delegate of VkDevice * nativeptr<VkAllocationCallbacks> * nativeptr<VkDeferredOperationKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyDeferredOperationKHRDel = delegate of VkDevice * VkDeferredOperationKHR * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeferredOperationMaxConcurrencyKHRDel = delegate of VkDevice * VkDeferredOperationKHR -> uint32
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeferredOperationResultKHRDel = delegate of VkDevice * VkDeferredOperationKHR -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDeferredOperationJoinKHRDel = delegate of VkDevice * VkDeferredOperationKHR -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRDeferredHostOperations")
                static let s_vkCreateDeferredOperationKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateDeferredOperationKHRDel> "vkCreateDeferredOperationKHR"
                static let s_vkDestroyDeferredOperationKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroyDeferredOperationKHRDel> "vkDestroyDeferredOperationKHR"
                static let s_vkGetDeferredOperationMaxConcurrencyKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeferredOperationMaxConcurrencyKHRDel> "vkGetDeferredOperationMaxConcurrencyKHR"
                static let s_vkGetDeferredOperationResultKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeferredOperationResultKHRDel> "vkGetDeferredOperationResultKHR"
                static let s_vkDeferredOperationJoinKHRDel = VkRaw.vkImportInstanceDelegate<VkDeferredOperationJoinKHRDel> "vkDeferredOperationJoinKHR"
                static do Report.End(3) |> ignore
                static member vkCreateDeferredOperationKHR = s_vkCreateDeferredOperationKHRDel
                static member vkDestroyDeferredOperationKHR = s_vkDestroyDeferredOperationKHRDel
                static member vkGetDeferredOperationMaxConcurrencyKHR = s_vkGetDeferredOperationMaxConcurrencyKHRDel
                static member vkGetDeferredOperationResultKHR = s_vkGetDeferredOperationResultKHRDel
                static member vkDeferredOperationJoinKHR = s_vkDeferredOperationJoinKHRDel
            let vkCreateDeferredOperationKHR(device : VkDevice, pAllocator : nativeptr<VkAllocationCallbacks>, pDeferredOperation : nativeptr<VkDeferredOperationKHR>) = Loader<unit>.vkCreateDeferredOperationKHR.Invoke(device, pAllocator, pDeferredOperation)
            let vkDestroyDeferredOperationKHR(device : VkDevice, operation : VkDeferredOperationKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyDeferredOperationKHR.Invoke(device, operation, pAllocator)
            let vkGetDeferredOperationMaxConcurrencyKHR(device : VkDevice, operation : VkDeferredOperationKHR) = Loader<unit>.vkGetDeferredOperationMaxConcurrencyKHR.Invoke(device, operation)
            let vkGetDeferredOperationResultKHR(device : VkDevice, operation : VkDeferredOperationKHR) = Loader<unit>.vkGetDeferredOperationResultKHR.Invoke(device, operation)
            let vkDeferredOperationJoinKHR(device : VkDevice, operation : VkDeferredOperationKHR) = Loader<unit>.vkDeferredOperationJoinKHR.Invoke(device, operation)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module KHRPipelineExecutableProperties =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_pipeline_executable_properties"
        let Number = 270

        type VkPipelineExecutableStatisticFormatKHR =
            | Bool32 = 0
            | Int64 = 1
            | Uint64 = 2
            | Float64 = 3


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelineExecutableInfo : VkBool32

                new(pNext: nativeint, pipelineExecutableInfo: VkBool32) =
                    {
                        sType = 1000269000u
                        pNext = pNext
                        pipelineExecutableInfo = pipelineExecutableInfo
                    }

                new(pipelineExecutableInfo: VkBool32) =
                    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(Unchecked.defaultof<nativeint>, pipelineExecutableInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelineExecutableInfo = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelineExecutableInfo = %A" x.pipelineExecutableInfo
                    ] |> sprintf "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineExecutableInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipeline : VkPipeline
                val mutable public executableIndex : uint32

                new(pNext: nativeint, pipeline: VkPipeline, executableIndex: uint32) =
                    {
                        sType = 1000269003u
                        pNext = pNext
                        pipeline = pipeline
                        executableIndex = executableIndex
                    }

                new(pipeline: VkPipeline, executableIndex: uint32) =
                    VkPipelineExecutableInfoKHR(Unchecked.defaultof<nativeint>, pipeline, executableIndex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipeline = Unchecked.defaultof<VkPipeline> && x.executableIndex = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPipelineExecutableInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipeline = %A" x.pipeline
                        sprintf "executableIndex = %A" x.executableIndex
                    ] |> sprintf "VkPipelineExecutableInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineExecutableInternalRepresentationKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public name : String256
                val mutable public description : String256
                val mutable public isText : VkBool32
                val mutable public dataSize : uint64
                val mutable public pData : nativeint

                new(pNext: nativeint, name: String256, description: String256, isText: VkBool32, dataSize: uint64, pData: nativeint) =
                    {
                        sType = 1000269005u
                        pNext = pNext
                        name = name
                        description = description
                        isText = isText
                        dataSize = dataSize
                        pData = pData
                    }

                new(name: String256, description: String256, isText: VkBool32, dataSize: uint64, pData: nativeint) =
                    VkPipelineExecutableInternalRepresentationKHR(Unchecked.defaultof<nativeint>, name, description, isText, dataSize, pData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.name = Unchecked.defaultof<String256> && x.description = Unchecked.defaultof<String256> && x.isText = Unchecked.defaultof<VkBool32> && x.dataSize = Unchecked.defaultof<uint64> && x.pData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkPipelineExecutableInternalRepresentationKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "name = %A" x.name
                        sprintf "description = %A" x.description
                        sprintf "isText = %A" x.isText
                        sprintf "dataSize = %A" x.dataSize
                        sprintf "pData = %A" x.pData
                    ] |> sprintf "VkPipelineExecutableInternalRepresentationKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineExecutablePropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stages : VkShaderStageFlags
                val mutable public name : String256
                val mutable public description : String256
                val mutable public subgroupSize : uint32

                new(pNext: nativeint, stages: VkShaderStageFlags, name: String256, description: String256, subgroupSize: uint32) =
                    {
                        sType = 1000269002u
                        pNext = pNext
                        stages = stages
                        name = name
                        description = description
                        subgroupSize = subgroupSize
                    }

                new(stages: VkShaderStageFlags, name: String256, description: String256, subgroupSize: uint32) =
                    VkPipelineExecutablePropertiesKHR(Unchecked.defaultof<nativeint>, stages, name, description, subgroupSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stages = Unchecked.defaultof<VkShaderStageFlags> && x.name = Unchecked.defaultof<String256> && x.description = Unchecked.defaultof<String256> && x.subgroupSize = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPipelineExecutablePropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stages = %A" x.stages
                        sprintf "name = %A" x.name
                        sprintf "description = %A" x.description
                        sprintf "subgroupSize = %A" x.subgroupSize
                    ] |> sprintf "VkPipelineExecutablePropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Explicit)>]
        type VkPipelineExecutableStatisticValueKHR =
            struct
                [<FieldOffset(0)>]
                val mutable public b32 : VkBool32
                [<FieldOffset(0)>]
                val mutable public i64 : int64
                [<FieldOffset(0)>]
                val mutable public u64 : uint64
                [<FieldOffset(0)>]
                val mutable public f64 : float

                static member B32(value: VkBool32) =
                    let mutable result = Unchecked.defaultof<VkPipelineExecutableStatisticValueKHR>
                    result.b32 <- value
                    result

                static member I64(value: int64) =
                    let mutable result = Unchecked.defaultof<VkPipelineExecutableStatisticValueKHR>
                    result.i64 <- value
                    result

                static member U64(value: uint64) =
                    let mutable result = Unchecked.defaultof<VkPipelineExecutableStatisticValueKHR>
                    result.u64 <- value
                    result

                static member F64(value: float) =
                    let mutable result = Unchecked.defaultof<VkPipelineExecutableStatisticValueKHR>
                    result.f64 <- value
                    result

                override x.ToString() =
                    String.concat "; " [
                        sprintf "b32 = %A" x.b32
                        sprintf "i64 = %A" x.i64
                        sprintf "u64 = %A" x.u64
                        sprintf "f64 = %A" x.f64
                    ] |> sprintf "VkPipelineExecutableStatisticValueKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineExecutableStatisticKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public name : String256
                val mutable public description : String256
                val mutable public format : VkPipelineExecutableStatisticFormatKHR
                val mutable public value : VkPipelineExecutableStatisticValueKHR

                new(pNext: nativeint, name: String256, description: String256, format: VkPipelineExecutableStatisticFormatKHR, value: VkPipelineExecutableStatisticValueKHR) =
                    {
                        sType = 1000269004u
                        pNext = pNext
                        name = name
                        description = description
                        format = format
                        value = value
                    }

                new(name: String256, description: String256, format: VkPipelineExecutableStatisticFormatKHR, value: VkPipelineExecutableStatisticValueKHR) =
                    VkPipelineExecutableStatisticKHR(Unchecked.defaultof<nativeint>, name, description, format, value)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.name = Unchecked.defaultof<String256> && x.description = Unchecked.defaultof<String256> && x.format = Unchecked.defaultof<VkPipelineExecutableStatisticFormatKHR> && x.value = Unchecked.defaultof<VkPipelineExecutableStatisticValueKHR>

                static member Empty =
                    VkPipelineExecutableStatisticKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<VkPipelineExecutableStatisticFormatKHR>, Unchecked.defaultof<VkPipelineExecutableStatisticValueKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "name = %A" x.name
                        sprintf "description = %A" x.description
                        sprintf "format = %A" x.format
                        sprintf "value = %A" x.value
                    ] |> sprintf "VkPipelineExecutableStatisticKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipeline : VkPipeline

                new(pNext: nativeint, pipeline: VkPipeline) =
                    {
                        sType = 1000269001u
                        pNext = pNext
                        pipeline = pipeline
                    }

                new(pipeline: VkPipeline) =
                    VkPipelineInfoKHR(Unchecked.defaultof<nativeint>, pipeline)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipeline = Unchecked.defaultof<VkPipeline>

                static member Empty =
                    VkPipelineInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipeline>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipeline = %A" x.pipeline
                    ] |> sprintf "VkPipelineInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineCreateFlags with
                  static member inline CaptureStatisticsBitKhr = enum<VkPipelineCreateFlags> 0x00000040
                  static member inline CaptureInternalRepresentationsBitKhr = enum<VkPipelineCreateFlags> 0x00000080

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPipelineExecutablePropertiesKHRDel = delegate of VkDevice * nativeptr<VkPipelineInfoKHR> * nativeptr<uint32> * nativeptr<VkPipelineExecutablePropertiesKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPipelineExecutableStatisticsKHRDel = delegate of VkDevice * nativeptr<VkPipelineExecutableInfoKHR> * nativeptr<uint32> * nativeptr<VkPipelineExecutableStatisticKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPipelineExecutableInternalRepresentationsKHRDel = delegate of VkDevice * nativeptr<VkPipelineExecutableInfoKHR> * nativeptr<uint32> * nativeptr<VkPipelineExecutableInternalRepresentationKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRPipelineExecutableProperties")
                static let s_vkGetPipelineExecutablePropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPipelineExecutablePropertiesKHRDel> "vkGetPipelineExecutablePropertiesKHR"
                static let s_vkGetPipelineExecutableStatisticsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPipelineExecutableStatisticsKHRDel> "vkGetPipelineExecutableStatisticsKHR"
                static let s_vkGetPipelineExecutableInternalRepresentationsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPipelineExecutableInternalRepresentationsKHRDel> "vkGetPipelineExecutableInternalRepresentationsKHR"
                static do Report.End(3) |> ignore
                static member vkGetPipelineExecutablePropertiesKHR = s_vkGetPipelineExecutablePropertiesKHRDel
                static member vkGetPipelineExecutableStatisticsKHR = s_vkGetPipelineExecutableStatisticsKHRDel
                static member vkGetPipelineExecutableInternalRepresentationsKHR = s_vkGetPipelineExecutableInternalRepresentationsKHRDel
            let vkGetPipelineExecutablePropertiesKHR(device : VkDevice, pPipelineInfo : nativeptr<VkPipelineInfoKHR>, pExecutableCount : nativeptr<uint32>, pProperties : nativeptr<VkPipelineExecutablePropertiesKHR>) = Loader<unit>.vkGetPipelineExecutablePropertiesKHR.Invoke(device, pPipelineInfo, pExecutableCount, pProperties)
            let vkGetPipelineExecutableStatisticsKHR(device : VkDevice, pExecutableInfo : nativeptr<VkPipelineExecutableInfoKHR>, pStatisticCount : nativeptr<uint32>, pStatistics : nativeptr<VkPipelineExecutableStatisticKHR>) = Loader<unit>.vkGetPipelineExecutableStatisticsKHR.Invoke(device, pExecutableInfo, pStatisticCount, pStatistics)
            let vkGetPipelineExecutableInternalRepresentationsKHR(device : VkDevice, pExecutableInfo : nativeptr<VkPipelineExecutableInfoKHR>, pInternalRepresentationCount : nativeptr<uint32>, pInternalRepresentations : nativeptr<VkPipelineExecutableInternalRepresentationKHR>) = Loader<unit>.vkGetPipelineExecutableInternalRepresentationsKHR.Invoke(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations)

    /// Requires ((KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRCopyCommands2, KHRFormatFeatureFlags2) | Vulkan13.
    /// Promoted to Vulkan14.
    module EXTHostImageCopy =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_host_image_copy"
        let Number = 271

        type VkHostImageCopyFlagsEXT = Vulkan14.VkHostImageCopyFlags

        type VkCopyImageToImageInfoEXT = Vulkan14.VkCopyImageToImageInfo

        type VkCopyImageToMemoryInfoEXT = Vulkan14.VkCopyImageToMemoryInfo

        type VkCopyMemoryToImageInfoEXT = Vulkan14.VkCopyMemoryToImageInfo

        type VkHostImageCopyDevicePerformanceQueryEXT = Vulkan14.VkHostImageCopyDevicePerformanceQuery

        type VkHostImageLayoutTransitionInfoEXT = Vulkan14.VkHostImageLayoutTransitionInfo

        type VkImageSubresource2EXT = Vulkan14.VkImageSubresource2

        type VkImageToMemoryCopyEXT = Vulkan14.VkImageToMemoryCopy

        type VkMemoryToImageCopyEXT = Vulkan14.VkMemoryToImageCopy

        type VkPhysicalDeviceHostImageCopyFeaturesEXT = Vulkan14.VkPhysicalDeviceHostImageCopyFeatures

        type VkPhysicalDeviceHostImageCopyPropertiesEXT = Vulkan14.VkPhysicalDeviceHostImageCopyProperties

        type VkSubresourceHostMemcpySizeEXT = Vulkan14.VkSubresourceHostMemcpySize

        type VkSubresourceLayout2EXT = Vulkan14.VkSubresourceLayout2


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkFormatFeatureFlags2 with
                  /// Host image copies are supported
                  static member inline FormatFeature2HostImageTransferBitExt = enum<Vulkan13.VkFormatFeatureFlags2> 0x00004000
             type Vulkan14.VkHostImageCopyFlags with
                  static member inline MemcpyExt = enum<Vulkan14.VkHostImageCopyFlags> 0x00000001
             type VkImageUsageFlags with
                  /// Can be used with host image copies
                  static member inline HostTransferBitExt = enum<VkImageUsageFlags> 0x00400000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCopyMemoryToImageEXTDel = delegate of VkDevice * nativeptr<Vulkan14.VkCopyMemoryToImageInfo> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCopyImageToMemoryEXTDel = delegate of VkDevice * nativeptr<Vulkan14.VkCopyImageToMemoryInfo> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCopyImageToImageEXTDel = delegate of VkDevice * nativeptr<Vulkan14.VkCopyImageToImageInfo> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkTransitionImageLayoutEXTDel = delegate of VkDevice * uint32 * nativeptr<Vulkan14.VkHostImageLayoutTransitionInfo> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetImageSubresourceLayout2EXTDel = delegate of VkDevice * VkImage * nativeptr<Vulkan14.VkImageSubresource2> * nativeptr<Vulkan14.VkSubresourceLayout2> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTHostImageCopy")
                static let s_vkCopyMemoryToImageEXTDel = VkRaw.vkImportInstanceDelegate<VkCopyMemoryToImageEXTDel> "vkCopyMemoryToImageEXT"
                static let s_vkCopyImageToMemoryEXTDel = VkRaw.vkImportInstanceDelegate<VkCopyImageToMemoryEXTDel> "vkCopyImageToMemoryEXT"
                static let s_vkCopyImageToImageEXTDel = VkRaw.vkImportInstanceDelegate<VkCopyImageToImageEXTDel> "vkCopyImageToImageEXT"
                static let s_vkTransitionImageLayoutEXTDel = VkRaw.vkImportInstanceDelegate<VkTransitionImageLayoutEXTDel> "vkTransitionImageLayoutEXT"
                static let s_vkGetImageSubresourceLayout2EXTDel = VkRaw.vkImportInstanceDelegate<VkGetImageSubresourceLayout2EXTDel> "vkGetImageSubresourceLayout2EXT"
                static do Report.End(3) |> ignore
                static member vkCopyMemoryToImageEXT = s_vkCopyMemoryToImageEXTDel
                static member vkCopyImageToMemoryEXT = s_vkCopyImageToMemoryEXTDel
                static member vkCopyImageToImageEXT = s_vkCopyImageToImageEXTDel
                static member vkTransitionImageLayoutEXT = s_vkTransitionImageLayoutEXTDel
                static member vkGetImageSubresourceLayout2EXT = s_vkGetImageSubresourceLayout2EXTDel
            let vkCopyMemoryToImageEXT(device : VkDevice, pCopyMemoryToImageInfo : nativeptr<Vulkan14.VkCopyMemoryToImageInfo>) = Loader<unit>.vkCopyMemoryToImageEXT.Invoke(device, pCopyMemoryToImageInfo)
            let vkCopyImageToMemoryEXT(device : VkDevice, pCopyImageToMemoryInfo : nativeptr<Vulkan14.VkCopyImageToMemoryInfo>) = Loader<unit>.vkCopyImageToMemoryEXT.Invoke(device, pCopyImageToMemoryInfo)
            let vkCopyImageToImageEXT(device : VkDevice, pCopyImageToImageInfo : nativeptr<Vulkan14.VkCopyImageToImageInfo>) = Loader<unit>.vkCopyImageToImageEXT.Invoke(device, pCopyImageToImageInfo)
            let vkTransitionImageLayoutEXT(device : VkDevice, transitionCount : uint32, pTransitions : nativeptr<Vulkan14.VkHostImageLayoutTransitionInfo>) = Loader<unit>.vkTransitionImageLayoutEXT.Invoke(device, transitionCount, pTransitions)
            let vkGetImageSubresourceLayout2EXT(device : VkDevice, image : VkImage, pSubresource : nativeptr<Vulkan14.VkImageSubresource2>, pLayout : nativeptr<Vulkan14.VkSubresourceLayout2>) = Loader<unit>.vkGetImageSubresourceLayout2EXT.Invoke(device, image, pSubresource, pLayout)

    /// Promoted to Vulkan14.
    module KHRMapMemory2 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_map_memory2"
        let Number = 272

        type VkMemoryUnmapFlagsKHR = Vulkan14.VkMemoryUnmapFlags

        type VkMemoryMapInfoKHR = Vulkan14.VkMemoryMapInfo

        type VkMemoryUnmapInfoKHR = Vulkan14.VkMemoryUnmapInfo


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkMapMemory2KHRDel = delegate of VkDevice * nativeptr<Vulkan14.VkMemoryMapInfo> * nativeptr<nativeint> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkUnmapMemory2KHRDel = delegate of VkDevice * nativeptr<Vulkan14.VkMemoryUnmapInfo> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRMapMemory2")
                static let s_vkMapMemory2KHRDel = VkRaw.vkImportInstanceDelegate<VkMapMemory2KHRDel> "vkMapMemory2KHR"
                static let s_vkUnmapMemory2KHRDel = VkRaw.vkImportInstanceDelegate<VkUnmapMemory2KHRDel> "vkUnmapMemory2KHR"
                static do Report.End(3) |> ignore
                static member vkMapMemory2KHR = s_vkMapMemory2KHRDel
                static member vkUnmapMemory2KHR = s_vkUnmapMemory2KHRDel
            let vkMapMemory2KHR(device : VkDevice, pMemoryMapInfo : nativeptr<Vulkan14.VkMemoryMapInfo>, ppData : nativeptr<nativeint>) = Loader<unit>.vkMapMemory2KHR.Invoke(device, pMemoryMapInfo, ppData)
            let vkUnmapMemory2KHR(device : VkDevice, pMemoryUnmapInfo : nativeptr<Vulkan14.VkMemoryUnmapInfo>) = Loader<unit>.vkUnmapMemory2KHR.Invoke(device, pMemoryUnmapInfo)

    /// Requires KHRMapMemory2 | Vulkan14.
    module EXTMapMemoryPlaced =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_map_memory_placed"
        let Number = 273

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryMapPlacedInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pPlacedAddress : nativeint

                new(pNext: nativeint, pPlacedAddress: nativeint) =
                    {
                        sType = 1000272002u
                        pNext = pNext
                        pPlacedAddress = pPlacedAddress
                    }

                new(pPlacedAddress: nativeint) =
                    VkMemoryMapPlacedInfoEXT(Unchecked.defaultof<nativeint>, pPlacedAddress)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pPlacedAddress = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkMemoryMapPlacedInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pPlacedAddress = %A" x.pPlacedAddress
                    ] |> sprintf "VkMemoryMapPlacedInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMapMemoryPlacedFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memoryMapPlaced : VkBool32
                val mutable public memoryMapRangePlaced : VkBool32
                val mutable public memoryUnmapReserve : VkBool32

                new(pNext: nativeint, memoryMapPlaced: VkBool32, memoryMapRangePlaced: VkBool32, memoryUnmapReserve: VkBool32) =
                    {
                        sType = 1000272000u
                        pNext = pNext
                        memoryMapPlaced = memoryMapPlaced
                        memoryMapRangePlaced = memoryMapRangePlaced
                        memoryUnmapReserve = memoryUnmapReserve
                    }

                new(memoryMapPlaced: VkBool32, memoryMapRangePlaced: VkBool32, memoryUnmapReserve: VkBool32) =
                    VkPhysicalDeviceMapMemoryPlacedFeaturesEXT(Unchecked.defaultof<nativeint>, memoryMapPlaced, memoryMapRangePlaced, memoryUnmapReserve)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memoryMapPlaced = Unchecked.defaultof<VkBool32> && x.memoryMapRangePlaced = Unchecked.defaultof<VkBool32> && x.memoryUnmapReserve = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMapMemoryPlacedFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memoryMapPlaced = %A" x.memoryMapPlaced
                        sprintf "memoryMapRangePlaced = %A" x.memoryMapRangePlaced
                        sprintf "memoryUnmapReserve = %A" x.memoryUnmapReserve
                    ] |> sprintf "VkPhysicalDeviceMapMemoryPlacedFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMapMemoryPlacedPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public minPlacedMemoryMapAlignment : VkDeviceSize

                new(pNext: nativeint, minPlacedMemoryMapAlignment: VkDeviceSize) =
                    {
                        sType = 1000272001u
                        pNext = pNext
                        minPlacedMemoryMapAlignment = minPlacedMemoryMapAlignment
                    }

                new(minPlacedMemoryMapAlignment: VkDeviceSize) =
                    VkPhysicalDeviceMapMemoryPlacedPropertiesEXT(Unchecked.defaultof<nativeint>, minPlacedMemoryMapAlignment)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.minPlacedMemoryMapAlignment = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkPhysicalDeviceMapMemoryPlacedPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "minPlacedMemoryMapAlignment = %A" x.minPlacedMemoryMapAlignment
                    ] |> sprintf "VkPhysicalDeviceMapMemoryPlacedPropertiesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkMemoryMapFlags with
                  static member inline PlacedBitExt = enum<VkMemoryMapFlags> 0x00000001
             type Vulkan14.VkMemoryUnmapFlags with
                  static member inline ReserveBitExt = enum<Vulkan14.VkMemoryUnmapFlags> 0x00000001


    /// Requires EXTShaderAtomicFloat.
    module EXTShaderAtomicFloat2 =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_shader_atomic_float2"
        let Number = 274

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderBufferFloat16Atomics : VkBool32
                val mutable public shaderBufferFloat16AtomicAdd : VkBool32
                val mutable public shaderBufferFloat16AtomicMinMax : VkBool32
                val mutable public shaderBufferFloat32AtomicMinMax : VkBool32
                val mutable public shaderBufferFloat64AtomicMinMax : VkBool32
                val mutable public shaderSharedFloat16Atomics : VkBool32
                val mutable public shaderSharedFloat16AtomicAdd : VkBool32
                val mutable public shaderSharedFloat16AtomicMinMax : VkBool32
                val mutable public shaderSharedFloat32AtomicMinMax : VkBool32
                val mutable public shaderSharedFloat64AtomicMinMax : VkBool32
                val mutable public shaderImageFloat32AtomicMinMax : VkBool32
                val mutable public sparseImageFloat32AtomicMinMax : VkBool32

                new(pNext: nativeint, shaderBufferFloat16Atomics: VkBool32, shaderBufferFloat16AtomicAdd: VkBool32, shaderBufferFloat16AtomicMinMax: VkBool32, shaderBufferFloat32AtomicMinMax: VkBool32, shaderBufferFloat64AtomicMinMax: VkBool32, shaderSharedFloat16Atomics: VkBool32, shaderSharedFloat16AtomicAdd: VkBool32, shaderSharedFloat16AtomicMinMax: VkBool32, shaderSharedFloat32AtomicMinMax: VkBool32, shaderSharedFloat64AtomicMinMax: VkBool32, shaderImageFloat32AtomicMinMax: VkBool32, sparseImageFloat32AtomicMinMax: VkBool32) =
                    {
                        sType = 1000273000u
                        pNext = pNext
                        shaderBufferFloat16Atomics = shaderBufferFloat16Atomics
                        shaderBufferFloat16AtomicAdd = shaderBufferFloat16AtomicAdd
                        shaderBufferFloat16AtomicMinMax = shaderBufferFloat16AtomicMinMax
                        shaderBufferFloat32AtomicMinMax = shaderBufferFloat32AtomicMinMax
                        shaderBufferFloat64AtomicMinMax = shaderBufferFloat64AtomicMinMax
                        shaderSharedFloat16Atomics = shaderSharedFloat16Atomics
                        shaderSharedFloat16AtomicAdd = shaderSharedFloat16AtomicAdd
                        shaderSharedFloat16AtomicMinMax = shaderSharedFloat16AtomicMinMax
                        shaderSharedFloat32AtomicMinMax = shaderSharedFloat32AtomicMinMax
                        shaderSharedFloat64AtomicMinMax = shaderSharedFloat64AtomicMinMax
                        shaderImageFloat32AtomicMinMax = shaderImageFloat32AtomicMinMax
                        sparseImageFloat32AtomicMinMax = sparseImageFloat32AtomicMinMax
                    }

                new(shaderBufferFloat16Atomics: VkBool32, shaderBufferFloat16AtomicAdd: VkBool32, shaderBufferFloat16AtomicMinMax: VkBool32, shaderBufferFloat32AtomicMinMax: VkBool32, shaderBufferFloat64AtomicMinMax: VkBool32, shaderSharedFloat16Atomics: VkBool32, shaderSharedFloat16AtomicAdd: VkBool32, shaderSharedFloat16AtomicMinMax: VkBool32, shaderSharedFloat32AtomicMinMax: VkBool32, shaderSharedFloat64AtomicMinMax: VkBool32, shaderImageFloat32AtomicMinMax: VkBool32, sparseImageFloat32AtomicMinMax: VkBool32) =
                    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(Unchecked.defaultof<nativeint>, shaderBufferFloat16Atomics, shaderBufferFloat16AtomicAdd, shaderBufferFloat16AtomicMinMax, shaderBufferFloat32AtomicMinMax, shaderBufferFloat64AtomicMinMax, shaderSharedFloat16Atomics, shaderSharedFloat16AtomicAdd, shaderSharedFloat16AtomicMinMax, shaderSharedFloat32AtomicMinMax, shaderSharedFloat64AtomicMinMax, shaderImageFloat32AtomicMinMax, sparseImageFloat32AtomicMinMax)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderBufferFloat16Atomics = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat16AtomicAdd = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat16AtomicMinMax = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat32AtomicMinMax = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat64AtomicMinMax = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat16Atomics = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat16AtomicAdd = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat16AtomicMinMax = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat32AtomicMinMax = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat64AtomicMinMax = Unchecked.defaultof<VkBool32> && x.shaderImageFloat32AtomicMinMax = Unchecked.defaultof<VkBool32> && x.sparseImageFloat32AtomicMinMax = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderBufferFloat16Atomics = %A" x.shaderBufferFloat16Atomics
                        sprintf "shaderBufferFloat16AtomicAdd = %A" x.shaderBufferFloat16AtomicAdd
                        sprintf "shaderBufferFloat16AtomicMinMax = %A" x.shaderBufferFloat16AtomicMinMax
                        sprintf "shaderBufferFloat32AtomicMinMax = %A" x.shaderBufferFloat32AtomicMinMax
                        sprintf "shaderBufferFloat64AtomicMinMax = %A" x.shaderBufferFloat64AtomicMinMax
                        sprintf "shaderSharedFloat16Atomics = %A" x.shaderSharedFloat16Atomics
                        sprintf "shaderSharedFloat16AtomicAdd = %A" x.shaderSharedFloat16AtomicAdd
                        sprintf "shaderSharedFloat16AtomicMinMax = %A" x.shaderSharedFloat16AtomicMinMax
                        sprintf "shaderSharedFloat32AtomicMinMax = %A" x.shaderSharedFloat32AtomicMinMax
                        sprintf "shaderSharedFloat64AtomicMinMax = %A" x.shaderSharedFloat64AtomicMinMax
                        sprintf "shaderImageFloat32AtomicMinMax = %A" x.shaderImageFloat32AtomicMinMax
                        sprintf "sparseImageFloat32AtomicMinMax = %A" x.sparseImageFloat32AtomicMinMax
                    ] |> sprintf "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT { %s }"
            end



    /// Requires KHRSurface, KHRGetSurfaceCapabilities2.
    module EXTSurfaceMaintenance1 =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_surface_maintenance1"
        let Number = 275

        [<Flags>]
        type VkPresentScalingFlagsEXT =
            | All = 7
            | None = 0
            | OneToOneBit = 0x00000001
            | AspectRatioStretchBit = 0x00000002
            | StretchBit = 0x00000004

        [<Flags>]
        type VkPresentGravityFlagsEXT =
            | All = 7
            | None = 0
            | MinBit = 0x00000001
            | MaxBit = 0x00000002
            | CenteredBit = 0x00000004


        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfacePresentModeCompatibilityEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentModeCount : uint32
                val mutable public pPresentModes : nativeptr<KHRSurface.VkPresentModeKHR>

                new(pNext: nativeint, presentModeCount: uint32, pPresentModes: nativeptr<KHRSurface.VkPresentModeKHR>) =
                    {
                        sType = 1000274002u
                        pNext = pNext
                        presentModeCount = presentModeCount
                        pPresentModes = pPresentModes
                    }

                new(presentModeCount: uint32, pPresentModes: nativeptr<KHRSurface.VkPresentModeKHR>) =
                    VkSurfacePresentModeCompatibilityEXT(Unchecked.defaultof<nativeint>, presentModeCount, pPresentModes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentModeCount = Unchecked.defaultof<uint32> && x.pPresentModes = Unchecked.defaultof<nativeptr<KHRSurface.VkPresentModeKHR>>

                static member Empty =
                    VkSurfacePresentModeCompatibilityEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<KHRSurface.VkPresentModeKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentModeCount = %A" x.presentModeCount
                        sprintf "pPresentModes = %A" x.pPresentModes
                    ] |> sprintf "VkSurfacePresentModeCompatibilityEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfacePresentModeEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentMode : KHRSurface.VkPresentModeKHR

                new(pNext: nativeint, presentMode: KHRSurface.VkPresentModeKHR) =
                    {
                        sType = 1000274000u
                        pNext = pNext
                        presentMode = presentMode
                    }

                new(presentMode: KHRSurface.VkPresentModeKHR) =
                    VkSurfacePresentModeEXT(Unchecked.defaultof<nativeint>, presentMode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentMode = Unchecked.defaultof<KHRSurface.VkPresentModeKHR>

                static member Empty =
                    VkSurfacePresentModeEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRSurface.VkPresentModeKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentMode = %A" x.presentMode
                    ] |> sprintf "VkSurfacePresentModeEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfacePresentScalingCapabilitiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public supportedPresentScaling : VkPresentScalingFlagsEXT
                val mutable public supportedPresentGravityX : VkPresentGravityFlagsEXT
                val mutable public supportedPresentGravityY : VkPresentGravityFlagsEXT
                val mutable public minScaledImageExtent : VkExtent2D
                val mutable public maxScaledImageExtent : VkExtent2D

                new(pNext: nativeint, supportedPresentScaling: VkPresentScalingFlagsEXT, supportedPresentGravityX: VkPresentGravityFlagsEXT, supportedPresentGravityY: VkPresentGravityFlagsEXT, minScaledImageExtent: VkExtent2D, maxScaledImageExtent: VkExtent2D) =
                    {
                        sType = 1000274001u
                        pNext = pNext
                        supportedPresentScaling = supportedPresentScaling
                        supportedPresentGravityX = supportedPresentGravityX
                        supportedPresentGravityY = supportedPresentGravityY
                        minScaledImageExtent = minScaledImageExtent
                        maxScaledImageExtent = maxScaledImageExtent
                    }

                new(supportedPresentScaling: VkPresentScalingFlagsEXT, supportedPresentGravityX: VkPresentGravityFlagsEXT, supportedPresentGravityY: VkPresentGravityFlagsEXT, minScaledImageExtent: VkExtent2D, maxScaledImageExtent: VkExtent2D) =
                    VkSurfacePresentScalingCapabilitiesEXT(Unchecked.defaultof<nativeint>, supportedPresentScaling, supportedPresentGravityX, supportedPresentGravityY, minScaledImageExtent, maxScaledImageExtent)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.supportedPresentScaling = Unchecked.defaultof<VkPresentScalingFlagsEXT> && x.supportedPresentGravityX = Unchecked.defaultof<VkPresentGravityFlagsEXT> && x.supportedPresentGravityY = Unchecked.defaultof<VkPresentGravityFlagsEXT> && x.minScaledImageExtent = Unchecked.defaultof<VkExtent2D> && x.maxScaledImageExtent = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkSurfacePresentScalingCapabilitiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPresentScalingFlagsEXT>, Unchecked.defaultof<VkPresentGravityFlagsEXT>, Unchecked.defaultof<VkPresentGravityFlagsEXT>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "supportedPresentScaling = %A" x.supportedPresentScaling
                        sprintf "supportedPresentGravityX = %A" x.supportedPresentGravityX
                        sprintf "supportedPresentGravityY = %A" x.supportedPresentGravityY
                        sprintf "minScaledImageExtent = %A" x.minScaledImageExtent
                        sprintf "maxScaledImageExtent = %A" x.maxScaledImageExtent
                    ] |> sprintf "VkSurfacePresentScalingCapabilitiesEXT { %s }"
            end



    /// Requires KHRSwapchain, EXTSurfaceMaintenance1, (KHRGetPhysicalDeviceProperties2 | Vulkan11).
    module EXTSwapchainMaintenance1 =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_swapchain_maintenance1"
        let Number = 276

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public swapchainMaintenance1 : VkBool32

                new(pNext: nativeint, swapchainMaintenance1: VkBool32) =
                    {
                        sType = 1000275000u
                        pNext = pNext
                        swapchainMaintenance1 = swapchainMaintenance1
                    }

                new(swapchainMaintenance1: VkBool32) =
                    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(Unchecked.defaultof<nativeint>, swapchainMaintenance1)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.swapchainMaintenance1 = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "swapchainMaintenance1 = %A" x.swapchainMaintenance1
                    ] |> sprintf "VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkReleaseSwapchainImagesInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public swapchain : KHRSwapchain.VkSwapchainKHR
                val mutable public imageIndexCount : uint32
                val mutable public pImageIndices : nativeptr<uint32>

                new(pNext: nativeint, swapchain: KHRSwapchain.VkSwapchainKHR, imageIndexCount: uint32, pImageIndices: nativeptr<uint32>) =
                    {
                        sType = 1000275005u
                        pNext = pNext
                        swapchain = swapchain
                        imageIndexCount = imageIndexCount
                        pImageIndices = pImageIndices
                    }

                new(swapchain: KHRSwapchain.VkSwapchainKHR, imageIndexCount: uint32, pImageIndices: nativeptr<uint32>) =
                    VkReleaseSwapchainImagesInfoEXT(Unchecked.defaultof<nativeint>, swapchain, imageIndexCount, pImageIndices)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.swapchain = Unchecked.defaultof<KHRSwapchain.VkSwapchainKHR> && x.imageIndexCount = Unchecked.defaultof<uint32> && x.pImageIndices = Unchecked.defaultof<nativeptr<uint32>>

                static member Empty =
                    VkReleaseSwapchainImagesInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRSwapchain.VkSwapchainKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "swapchain = %A" x.swapchain
                        sprintf "imageIndexCount = %A" x.imageIndexCount
                        sprintf "pImageIndices = %A" x.pImageIndices
                    ] |> sprintf "VkReleaseSwapchainImagesInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSwapchainPresentFenceInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public swapchainCount : uint32
                val mutable public pFences : nativeptr<VkFence>

                new(pNext: nativeint, swapchainCount: uint32, pFences: nativeptr<VkFence>) =
                    {
                        sType = 1000275001u
                        pNext = pNext
                        swapchainCount = swapchainCount
                        pFences = pFences
                    }

                new(swapchainCount: uint32, pFences: nativeptr<VkFence>) =
                    VkSwapchainPresentFenceInfoEXT(Unchecked.defaultof<nativeint>, swapchainCount, pFences)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.swapchainCount = Unchecked.defaultof<uint32> && x.pFences = Unchecked.defaultof<nativeptr<VkFence>>

                static member Empty =
                    VkSwapchainPresentFenceInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkFence>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "swapchainCount = %A" x.swapchainCount
                        sprintf "pFences = %A" x.pFences
                    ] |> sprintf "VkSwapchainPresentFenceInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSwapchainPresentModeInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public swapchainCount : uint32
                val mutable public pPresentModes : nativeptr<KHRSurface.VkPresentModeKHR>

                new(pNext: nativeint, swapchainCount: uint32, pPresentModes: nativeptr<KHRSurface.VkPresentModeKHR>) =
                    {
                        sType = 1000275003u
                        pNext = pNext
                        swapchainCount = swapchainCount
                        pPresentModes = pPresentModes
                    }

                new(swapchainCount: uint32, pPresentModes: nativeptr<KHRSurface.VkPresentModeKHR>) =
                    VkSwapchainPresentModeInfoEXT(Unchecked.defaultof<nativeint>, swapchainCount, pPresentModes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.swapchainCount = Unchecked.defaultof<uint32> && x.pPresentModes = Unchecked.defaultof<nativeptr<KHRSurface.VkPresentModeKHR>>

                static member Empty =
                    VkSwapchainPresentModeInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<KHRSurface.VkPresentModeKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "swapchainCount = %A" x.swapchainCount
                        sprintf "pPresentModes = %A" x.pPresentModes
                    ] |> sprintf "VkSwapchainPresentModeInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSwapchainPresentModesCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentModeCount : uint32
                val mutable public pPresentModes : nativeptr<KHRSurface.VkPresentModeKHR>

                new(pNext: nativeint, presentModeCount: uint32, pPresentModes: nativeptr<KHRSurface.VkPresentModeKHR>) =
                    {
                        sType = 1000275002u
                        pNext = pNext
                        presentModeCount = presentModeCount
                        pPresentModes = pPresentModes
                    }

                new(presentModeCount: uint32, pPresentModes: nativeptr<KHRSurface.VkPresentModeKHR>) =
                    VkSwapchainPresentModesCreateInfoEXT(Unchecked.defaultof<nativeint>, presentModeCount, pPresentModes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentModeCount = Unchecked.defaultof<uint32> && x.pPresentModes = Unchecked.defaultof<nativeptr<KHRSurface.VkPresentModeKHR>>

                static member Empty =
                    VkSwapchainPresentModesCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<KHRSurface.VkPresentModeKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentModeCount = %A" x.presentModeCount
                        sprintf "pPresentModes = %A" x.pPresentModes
                    ] |> sprintf "VkSwapchainPresentModesCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSwapchainPresentScalingCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public scalingBehavior : EXTSurfaceMaintenance1.VkPresentScalingFlagsEXT
                val mutable public presentGravityX : EXTSurfaceMaintenance1.VkPresentGravityFlagsEXT
                val mutable public presentGravityY : EXTSurfaceMaintenance1.VkPresentGravityFlagsEXT

                new(pNext: nativeint, scalingBehavior: EXTSurfaceMaintenance1.VkPresentScalingFlagsEXT, presentGravityX: EXTSurfaceMaintenance1.VkPresentGravityFlagsEXT, presentGravityY: EXTSurfaceMaintenance1.VkPresentGravityFlagsEXT) =
                    {
                        sType = 1000275004u
                        pNext = pNext
                        scalingBehavior = scalingBehavior
                        presentGravityX = presentGravityX
                        presentGravityY = presentGravityY
                    }

                new(scalingBehavior: EXTSurfaceMaintenance1.VkPresentScalingFlagsEXT, presentGravityX: EXTSurfaceMaintenance1.VkPresentGravityFlagsEXT, presentGravityY: EXTSurfaceMaintenance1.VkPresentGravityFlagsEXT) =
                    VkSwapchainPresentScalingCreateInfoEXT(Unchecked.defaultof<nativeint>, scalingBehavior, presentGravityX, presentGravityY)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.scalingBehavior = Unchecked.defaultof<EXTSurfaceMaintenance1.VkPresentScalingFlagsEXT> && x.presentGravityX = Unchecked.defaultof<EXTSurfaceMaintenance1.VkPresentGravityFlagsEXT> && x.presentGravityY = Unchecked.defaultof<EXTSurfaceMaintenance1.VkPresentGravityFlagsEXT>

                static member Empty =
                    VkSwapchainPresentScalingCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<EXTSurfaceMaintenance1.VkPresentScalingFlagsEXT>, Unchecked.defaultof<EXTSurfaceMaintenance1.VkPresentGravityFlagsEXT>, Unchecked.defaultof<EXTSurfaceMaintenance1.VkPresentGravityFlagsEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "scalingBehavior = %A" x.scalingBehavior
                        sprintf "presentGravityX = %A" x.presentGravityX
                        sprintf "presentGravityY = %A" x.presentGravityY
                    ] |> sprintf "VkSwapchainPresentScalingCreateInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRSwapchain.VkSwapchainCreateFlagsKHR with
                  static member inline DeferredMemoryAllocationBitExt = enum<KHRSwapchain.VkSwapchainCreateFlagsKHR> 0x00000008

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkReleaseSwapchainImagesEXTDel = delegate of VkDevice * nativeptr<VkReleaseSwapchainImagesInfoEXT> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTSwapchainMaintenance1")
                static let s_vkReleaseSwapchainImagesEXTDel = VkRaw.vkImportInstanceDelegate<VkReleaseSwapchainImagesEXTDel> "vkReleaseSwapchainImagesEXT"
                static do Report.End(3) |> ignore
                static member vkReleaseSwapchainImagesEXT = s_vkReleaseSwapchainImagesEXTDel
            let vkReleaseSwapchainImagesEXT(device : VkDevice, pReleaseInfo : nativeptr<VkReleaseSwapchainImagesInfoEXT>) = Loader<unit>.vkReleaseSwapchainImagesEXT.Invoke(device, pReleaseInfo)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module EXTShaderDemoteToHelperInvocation =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_shader_demote_to_helper_invocation"
        let Number = 277

        type VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = Vulkan13.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures



    /// Requires (Vulkan11, KHRBufferDeviceAddress) | Vulkan12.
    module NVDeviceGeneratedCommands =
        let Type = ExtensionType.Device
        let Name = "VK_NV_device_generated_commands"
        let Number = 278


        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectCommandsLayoutNV =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkIndirectCommandsLayoutNV(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<Flags>]
        type VkIndirectStateFlagsNV =
            | All = 1
            | None = 0
            | FlagFrontfaceBit = 0x00000001

        type VkIndirectCommandsTokenTypeNV =
            | ShaderGroup = 0
            | State = 1
            | IndexBuffer = 2
            | VertexBuffer = 3
            | PushConstant = 4
            | DrawIndexed = 5
            | Draw = 6
            | DrawTasks = 7

        [<Flags>]
        type VkIndirectCommandsLayoutUsageFlagsNV =
            | All = 7
            | None = 0
            | ExplicitPreprocessBit = 0x00000001
            | IndexedSequencesBit = 0x00000002
            | UnorderedSequencesBit = 0x00000004


        [<StructLayout(LayoutKind.Sequential)>]
        type VkBindIndexBufferIndirectCommandNV =
            struct
                val mutable public bufferAddress : VkDeviceAddress
                val mutable public size : uint32
                val mutable public indexType : VkIndexType

                new(bufferAddress: VkDeviceAddress, size: uint32, indexType: VkIndexType) =
                    {
                        bufferAddress = bufferAddress
                        size = size
                        indexType = indexType
                    }

                member x.IsEmpty =
                    x.bufferAddress = Unchecked.defaultof<VkDeviceAddress> && x.size = Unchecked.defaultof<uint32> && x.indexType = Unchecked.defaultof<VkIndexType>

                static member Empty =
                    VkBindIndexBufferIndirectCommandNV(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkIndexType>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "bufferAddress = %A" x.bufferAddress
                        sprintf "size = %A" x.size
                        sprintf "indexType = %A" x.indexType
                    ] |> sprintf "VkBindIndexBufferIndirectCommandNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBindShaderGroupIndirectCommandNV =
            struct
                val mutable public groupIndex : uint32

                new(groupIndex: uint32) =
                    {
                        groupIndex = groupIndex
                    }

                member x.IsEmpty =
                    x.groupIndex = Unchecked.defaultof<uint32>

                static member Empty =
                    VkBindShaderGroupIndirectCommandNV(Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "groupIndex = %A" x.groupIndex
                    ] |> sprintf "VkBindShaderGroupIndirectCommandNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBindVertexBufferIndirectCommandNV =
            struct
                val mutable public bufferAddress : VkDeviceAddress
                val mutable public size : uint32
                val mutable public stride : uint32

                new(bufferAddress: VkDeviceAddress, size: uint32, stride: uint32) =
                    {
                        bufferAddress = bufferAddress
                        size = size
                        stride = stride
                    }

                member x.IsEmpty =
                    x.bufferAddress = Unchecked.defaultof<VkDeviceAddress> && x.size = Unchecked.defaultof<uint32> && x.stride = Unchecked.defaultof<uint32>

                static member Empty =
                    VkBindVertexBufferIndirectCommandNV(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "bufferAddress = %A" x.bufferAddress
                        sprintf "size = %A" x.size
                        sprintf "stride = %A" x.stride
                    ] |> sprintf "VkBindVertexBufferIndirectCommandNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectCommandsStreamNV =
            struct
                val mutable public buffer : VkBuffer
                val mutable public offset : VkDeviceSize

                new(buffer: VkBuffer, offset: VkDeviceSize) =
                    {
                        buffer = buffer
                        offset = offset
                    }

                member x.IsEmpty =
                    x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkIndirectCommandsStreamNV(Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "buffer = %A" x.buffer
                        sprintf "offset = %A" x.offset
                    ] |> sprintf "VkIndirectCommandsStreamNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGeneratedCommandsInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelineBindPoint : VkPipelineBindPoint
                val mutable public pipeline : VkPipeline
                val mutable public indirectCommandsLayout : VkIndirectCommandsLayoutNV
                val mutable public streamCount : uint32
                val mutable public pStreams : nativeptr<VkIndirectCommandsStreamNV>
                val mutable public sequencesCount : uint32
                val mutable public preprocessBuffer : VkBuffer
                val mutable public preprocessOffset : VkDeviceSize
                val mutable public preprocessSize : VkDeviceSize
                val mutable public sequencesCountBuffer : VkBuffer
                val mutable public sequencesCountOffset : VkDeviceSize
                val mutable public sequencesIndexBuffer : VkBuffer
                val mutable public sequencesIndexOffset : VkDeviceSize

                new(pNext: nativeint, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, indirectCommandsLayout: VkIndirectCommandsLayoutNV, streamCount: uint32, pStreams: nativeptr<VkIndirectCommandsStreamNV>, sequencesCount: uint32, preprocessBuffer: VkBuffer, preprocessOffset: VkDeviceSize, preprocessSize: VkDeviceSize, sequencesCountBuffer: VkBuffer, sequencesCountOffset: VkDeviceSize, sequencesIndexBuffer: VkBuffer, sequencesIndexOffset: VkDeviceSize) =
                    {
                        sType = 1000277005u
                        pNext = pNext
                        pipelineBindPoint = pipelineBindPoint
                        pipeline = pipeline
                        indirectCommandsLayout = indirectCommandsLayout
                        streamCount = streamCount
                        pStreams = pStreams
                        sequencesCount = sequencesCount
                        preprocessBuffer = preprocessBuffer
                        preprocessOffset = preprocessOffset
                        preprocessSize = preprocessSize
                        sequencesCountBuffer = sequencesCountBuffer
                        sequencesCountOffset = sequencesCountOffset
                        sequencesIndexBuffer = sequencesIndexBuffer
                        sequencesIndexOffset = sequencesIndexOffset
                    }

                new(pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, indirectCommandsLayout: VkIndirectCommandsLayoutNV, streamCount: uint32, pStreams: nativeptr<VkIndirectCommandsStreamNV>, sequencesCount: uint32, preprocessBuffer: VkBuffer, preprocessOffset: VkDeviceSize, preprocessSize: VkDeviceSize, sequencesCountBuffer: VkBuffer, sequencesCountOffset: VkDeviceSize, sequencesIndexBuffer: VkBuffer, sequencesIndexOffset: VkDeviceSize) =
                    VkGeneratedCommandsInfoNV(Unchecked.defaultof<nativeint>, pipelineBindPoint, pipeline, indirectCommandsLayout, streamCount, pStreams, sequencesCount, preprocessBuffer, preprocessOffset, preprocessSize, sequencesCountBuffer, sequencesCountOffset, sequencesIndexBuffer, sequencesIndexOffset)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.pipeline = Unchecked.defaultof<VkPipeline> && x.indirectCommandsLayout = Unchecked.defaultof<VkIndirectCommandsLayoutNV> && x.streamCount = Unchecked.defaultof<uint32> && x.pStreams = Unchecked.defaultof<nativeptr<VkIndirectCommandsStreamNV>> && x.sequencesCount = Unchecked.defaultof<uint32> && x.preprocessBuffer = Unchecked.defaultof<VkBuffer> && x.preprocessOffset = Unchecked.defaultof<VkDeviceSize> && x.preprocessSize = Unchecked.defaultof<VkDeviceSize> && x.sequencesCountBuffer = Unchecked.defaultof<VkBuffer> && x.sequencesCountOffset = Unchecked.defaultof<VkDeviceSize> && x.sequencesIndexBuffer = Unchecked.defaultof<VkBuffer> && x.sequencesIndexOffset = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkGeneratedCommandsInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<VkIndirectCommandsLayoutNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkIndirectCommandsStreamNV>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                        sprintf "pipeline = %A" x.pipeline
                        sprintf "indirectCommandsLayout = %A" x.indirectCommandsLayout
                        sprintf "streamCount = %A" x.streamCount
                        sprintf "pStreams = %A" x.pStreams
                        sprintf "sequencesCount = %A" x.sequencesCount
                        sprintf "preprocessBuffer = %A" x.preprocessBuffer
                        sprintf "preprocessOffset = %A" x.preprocessOffset
                        sprintf "preprocessSize = %A" x.preprocessSize
                        sprintf "sequencesCountBuffer = %A" x.sequencesCountBuffer
                        sprintf "sequencesCountOffset = %A" x.sequencesCountOffset
                        sprintf "sequencesIndexBuffer = %A" x.sequencesIndexBuffer
                        sprintf "sequencesIndexOffset = %A" x.sequencesIndexOffset
                    ] |> sprintf "VkGeneratedCommandsInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGeneratedCommandsMemoryRequirementsInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelineBindPoint : VkPipelineBindPoint
                val mutable public pipeline : VkPipeline
                val mutable public indirectCommandsLayout : VkIndirectCommandsLayoutNV
                val mutable public maxSequencesCount : uint32

                new(pNext: nativeint, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, indirectCommandsLayout: VkIndirectCommandsLayoutNV, maxSequencesCount: uint32) =
                    {
                        sType = 1000277006u
                        pNext = pNext
                        pipelineBindPoint = pipelineBindPoint
                        pipeline = pipeline
                        indirectCommandsLayout = indirectCommandsLayout
                        maxSequencesCount = maxSequencesCount
                    }

                new(pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, indirectCommandsLayout: VkIndirectCommandsLayoutNV, maxSequencesCount: uint32) =
                    VkGeneratedCommandsMemoryRequirementsInfoNV(Unchecked.defaultof<nativeint>, pipelineBindPoint, pipeline, indirectCommandsLayout, maxSequencesCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.pipeline = Unchecked.defaultof<VkPipeline> && x.indirectCommandsLayout = Unchecked.defaultof<VkIndirectCommandsLayoutNV> && x.maxSequencesCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkGeneratedCommandsMemoryRequirementsInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<VkIndirectCommandsLayoutNV>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                        sprintf "pipeline = %A" x.pipeline
                        sprintf "indirectCommandsLayout = %A" x.indirectCommandsLayout
                        sprintf "maxSequencesCount = %A" x.maxSequencesCount
                    ] |> sprintf "VkGeneratedCommandsMemoryRequirementsInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGraphicsShaderGroupCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stageCount : uint32
                val mutable public pStages : nativeptr<VkPipelineShaderStageCreateInfo>
                val mutable public pVertexInputState : nativeptr<VkPipelineVertexInputStateCreateInfo>
                val mutable public pTessellationState : nativeptr<VkPipelineTessellationStateCreateInfo>

                new(pNext: nativeint, stageCount: uint32, pStages: nativeptr<VkPipelineShaderStageCreateInfo>, pVertexInputState: nativeptr<VkPipelineVertexInputStateCreateInfo>, pTessellationState: nativeptr<VkPipelineTessellationStateCreateInfo>) =
                    {
                        sType = 1000277001u
                        pNext = pNext
                        stageCount = stageCount
                        pStages = pStages
                        pVertexInputState = pVertexInputState
                        pTessellationState = pTessellationState
                    }

                new(stageCount: uint32, pStages: nativeptr<VkPipelineShaderStageCreateInfo>, pVertexInputState: nativeptr<VkPipelineVertexInputStateCreateInfo>, pTessellationState: nativeptr<VkPipelineTessellationStateCreateInfo>) =
                    VkGraphicsShaderGroupCreateInfoNV(Unchecked.defaultof<nativeint>, stageCount, pStages, pVertexInputState, pTessellationState)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stageCount = Unchecked.defaultof<uint32> && x.pStages = Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>> && x.pVertexInputState = Unchecked.defaultof<nativeptr<VkPipelineVertexInputStateCreateInfo>> && x.pTessellationState = Unchecked.defaultof<nativeptr<VkPipelineTessellationStateCreateInfo>>

                static member Empty =
                    VkGraphicsShaderGroupCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineVertexInputStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineTessellationStateCreateInfo>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stageCount = %A" x.stageCount
                        sprintf "pStages = %A" x.pStages
                        sprintf "pVertexInputState = %A" x.pVertexInputState
                        sprintf "pTessellationState = %A" x.pTessellationState
                    ] |> sprintf "VkGraphicsShaderGroupCreateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGraphicsPipelineShaderGroupsCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public groupCount : uint32
                val mutable public pGroups : nativeptr<VkGraphicsShaderGroupCreateInfoNV>
                val mutable public pipelineCount : uint32
                val mutable public pPipelines : nativeptr<VkPipeline>

                new(pNext: nativeint, groupCount: uint32, pGroups: nativeptr<VkGraphicsShaderGroupCreateInfoNV>, pipelineCount: uint32, pPipelines: nativeptr<VkPipeline>) =
                    {
                        sType = 1000277002u
                        pNext = pNext
                        groupCount = groupCount
                        pGroups = pGroups
                        pipelineCount = pipelineCount
                        pPipelines = pPipelines
                    }

                new(groupCount: uint32, pGroups: nativeptr<VkGraphicsShaderGroupCreateInfoNV>, pipelineCount: uint32, pPipelines: nativeptr<VkPipeline>) =
                    VkGraphicsPipelineShaderGroupsCreateInfoNV(Unchecked.defaultof<nativeint>, groupCount, pGroups, pipelineCount, pPipelines)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.groupCount = Unchecked.defaultof<uint32> && x.pGroups = Unchecked.defaultof<nativeptr<VkGraphicsShaderGroupCreateInfoNV>> && x.pipelineCount = Unchecked.defaultof<uint32> && x.pPipelines = Unchecked.defaultof<nativeptr<VkPipeline>>

                static member Empty =
                    VkGraphicsPipelineShaderGroupsCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkGraphicsShaderGroupCreateInfoNV>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipeline>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "groupCount = %A" x.groupCount
                        sprintf "pGroups = %A" x.pGroups
                        sprintf "pipelineCount = %A" x.pipelineCount
                        sprintf "pPipelines = %A" x.pPipelines
                    ] |> sprintf "VkGraphicsPipelineShaderGroupsCreateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectCommandsLayoutTokenNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public tokenType : VkIndirectCommandsTokenTypeNV
                val mutable public stream : uint32
                val mutable public offset : uint32
                val mutable public vertexBindingUnit : uint32
                val mutable public vertexDynamicStride : VkBool32
                val mutable public pushconstantPipelineLayout : VkPipelineLayout
                val mutable public pushconstantShaderStageFlags : VkShaderStageFlags
                val mutable public pushconstantOffset : uint32
                val mutable public pushconstantSize : uint32
                val mutable public indirectStateFlags : VkIndirectStateFlagsNV
                val mutable public indexTypeCount : uint32
                val mutable public pIndexTypes : nativeptr<VkIndexType>
                val mutable public pIndexTypeValues : nativeptr<uint32>

                new(pNext: nativeint, tokenType: VkIndirectCommandsTokenTypeNV, stream: uint32, offset: uint32, vertexBindingUnit: uint32, vertexDynamicStride: VkBool32, pushconstantPipelineLayout: VkPipelineLayout, pushconstantShaderStageFlags: VkShaderStageFlags, pushconstantOffset: uint32, pushconstantSize: uint32, indirectStateFlags: VkIndirectStateFlagsNV, indexTypeCount: uint32, pIndexTypes: nativeptr<VkIndexType>, pIndexTypeValues: nativeptr<uint32>) =
                    {
                        sType = 1000277003u
                        pNext = pNext
                        tokenType = tokenType
                        stream = stream
                        offset = offset
                        vertexBindingUnit = vertexBindingUnit
                        vertexDynamicStride = vertexDynamicStride
                        pushconstantPipelineLayout = pushconstantPipelineLayout
                        pushconstantShaderStageFlags = pushconstantShaderStageFlags
                        pushconstantOffset = pushconstantOffset
                        pushconstantSize = pushconstantSize
                        indirectStateFlags = indirectStateFlags
                        indexTypeCount = indexTypeCount
                        pIndexTypes = pIndexTypes
                        pIndexTypeValues = pIndexTypeValues
                    }

                new(tokenType: VkIndirectCommandsTokenTypeNV, stream: uint32, offset: uint32, vertexBindingUnit: uint32, vertexDynamicStride: VkBool32, pushconstantPipelineLayout: VkPipelineLayout, pushconstantShaderStageFlags: VkShaderStageFlags, pushconstantOffset: uint32, pushconstantSize: uint32, indirectStateFlags: VkIndirectStateFlagsNV, indexTypeCount: uint32, pIndexTypes: nativeptr<VkIndexType>, pIndexTypeValues: nativeptr<uint32>) =
                    VkIndirectCommandsLayoutTokenNV(Unchecked.defaultof<nativeint>, tokenType, stream, offset, vertexBindingUnit, vertexDynamicStride, pushconstantPipelineLayout, pushconstantShaderStageFlags, pushconstantOffset, pushconstantSize, indirectStateFlags, indexTypeCount, pIndexTypes, pIndexTypeValues)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.tokenType = Unchecked.defaultof<VkIndirectCommandsTokenTypeNV> && x.stream = Unchecked.defaultof<uint32> && x.offset = Unchecked.defaultof<uint32> && x.vertexBindingUnit = Unchecked.defaultof<uint32> && x.vertexDynamicStride = Unchecked.defaultof<VkBool32> && x.pushconstantPipelineLayout = Unchecked.defaultof<VkPipelineLayout> && x.pushconstantShaderStageFlags = Unchecked.defaultof<VkShaderStageFlags> && x.pushconstantOffset = Unchecked.defaultof<uint32> && x.pushconstantSize = Unchecked.defaultof<uint32> && x.indirectStateFlags = Unchecked.defaultof<VkIndirectStateFlagsNV> && x.indexTypeCount = Unchecked.defaultof<uint32> && x.pIndexTypes = Unchecked.defaultof<nativeptr<VkIndexType>> && x.pIndexTypeValues = Unchecked.defaultof<nativeptr<uint32>>

                static member Empty =
                    VkIndirectCommandsLayoutTokenNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkIndirectCommandsTokenTypeNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkIndirectStateFlagsNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkIndexType>>, Unchecked.defaultof<nativeptr<uint32>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "tokenType = %A" x.tokenType
                        sprintf "stream = %A" x.stream
                        sprintf "offset = %A" x.offset
                        sprintf "vertexBindingUnit = %A" x.vertexBindingUnit
                        sprintf "vertexDynamicStride = %A" x.vertexDynamicStride
                        sprintf "pushconstantPipelineLayout = %A" x.pushconstantPipelineLayout
                        sprintf "pushconstantShaderStageFlags = %A" x.pushconstantShaderStageFlags
                        sprintf "pushconstantOffset = %A" x.pushconstantOffset
                        sprintf "pushconstantSize = %A" x.pushconstantSize
                        sprintf "indirectStateFlags = %A" x.indirectStateFlags
                        sprintf "indexTypeCount = %A" x.indexTypeCount
                        sprintf "pIndexTypes = %A" x.pIndexTypes
                        sprintf "pIndexTypeValues = %A" x.pIndexTypeValues
                    ] |> sprintf "VkIndirectCommandsLayoutTokenNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectCommandsLayoutCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkIndirectCommandsLayoutUsageFlagsNV
                val mutable public pipelineBindPoint : VkPipelineBindPoint
                val mutable public tokenCount : uint32
                val mutable public pTokens : nativeptr<VkIndirectCommandsLayoutTokenNV>
                val mutable public streamCount : uint32
                val mutable public pStreamStrides : nativeptr<uint32>

                new(pNext: nativeint, flags: VkIndirectCommandsLayoutUsageFlagsNV, pipelineBindPoint: VkPipelineBindPoint, tokenCount: uint32, pTokens: nativeptr<VkIndirectCommandsLayoutTokenNV>, streamCount: uint32, pStreamStrides: nativeptr<uint32>) =
                    {
                        sType = 1000277004u
                        pNext = pNext
                        flags = flags
                        pipelineBindPoint = pipelineBindPoint
                        tokenCount = tokenCount
                        pTokens = pTokens
                        streamCount = streamCount
                        pStreamStrides = pStreamStrides
                    }

                new(flags: VkIndirectCommandsLayoutUsageFlagsNV, pipelineBindPoint: VkPipelineBindPoint, tokenCount: uint32, pTokens: nativeptr<VkIndirectCommandsLayoutTokenNV>, streamCount: uint32, pStreamStrides: nativeptr<uint32>) =
                    VkIndirectCommandsLayoutCreateInfoNV(Unchecked.defaultof<nativeint>, flags, pipelineBindPoint, tokenCount, pTokens, streamCount, pStreamStrides)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkIndirectCommandsLayoutUsageFlagsNV> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.tokenCount = Unchecked.defaultof<uint32> && x.pTokens = Unchecked.defaultof<nativeptr<VkIndirectCommandsLayoutTokenNV>> && x.streamCount = Unchecked.defaultof<uint32> && x.pStreamStrides = Unchecked.defaultof<nativeptr<uint32>>

                static member Empty =
                    VkIndirectCommandsLayoutCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkIndirectCommandsLayoutUsageFlagsNV>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkIndirectCommandsLayoutTokenNV>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                        sprintf "tokenCount = %A" x.tokenCount
                        sprintf "pTokens = %A" x.pTokens
                        sprintf "streamCount = %A" x.streamCount
                        sprintf "pStreamStrides = %A" x.pStreamStrides
                    ] |> sprintf "VkIndirectCommandsLayoutCreateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public deviceGeneratedCommands : VkBool32

                new(pNext: nativeint, deviceGeneratedCommands: VkBool32) =
                    {
                        sType = 1000277007u
                        pNext = pNext
                        deviceGeneratedCommands = deviceGeneratedCommands
                    }

                new(deviceGeneratedCommands: VkBool32) =
                    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(Unchecked.defaultof<nativeint>, deviceGeneratedCommands)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.deviceGeneratedCommands = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "deviceGeneratedCommands = %A" x.deviceGeneratedCommands
                    ] |> sprintf "VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxGraphicsShaderGroupCount : uint32
                val mutable public maxIndirectSequenceCount : uint32
                val mutable public maxIndirectCommandsTokenCount : uint32
                val mutable public maxIndirectCommandsStreamCount : uint32
                val mutable public maxIndirectCommandsTokenOffset : uint32
                val mutable public maxIndirectCommandsStreamStride : uint32
                val mutable public minSequencesCountBufferOffsetAlignment : uint32
                val mutable public minSequencesIndexBufferOffsetAlignment : uint32
                val mutable public minIndirectCommandsBufferOffsetAlignment : uint32

                new(pNext: nativeint, maxGraphicsShaderGroupCount: uint32, maxIndirectSequenceCount: uint32, maxIndirectCommandsTokenCount: uint32, maxIndirectCommandsStreamCount: uint32, maxIndirectCommandsTokenOffset: uint32, maxIndirectCommandsStreamStride: uint32, minSequencesCountBufferOffsetAlignment: uint32, minSequencesIndexBufferOffsetAlignment: uint32, minIndirectCommandsBufferOffsetAlignment: uint32) =
                    {
                        sType = 1000277000u
                        pNext = pNext
                        maxGraphicsShaderGroupCount = maxGraphicsShaderGroupCount
                        maxIndirectSequenceCount = maxIndirectSequenceCount
                        maxIndirectCommandsTokenCount = maxIndirectCommandsTokenCount
                        maxIndirectCommandsStreamCount = maxIndirectCommandsStreamCount
                        maxIndirectCommandsTokenOffset = maxIndirectCommandsTokenOffset
                        maxIndirectCommandsStreamStride = maxIndirectCommandsStreamStride
                        minSequencesCountBufferOffsetAlignment = minSequencesCountBufferOffsetAlignment
                        minSequencesIndexBufferOffsetAlignment = minSequencesIndexBufferOffsetAlignment
                        minIndirectCommandsBufferOffsetAlignment = minIndirectCommandsBufferOffsetAlignment
                    }

                new(maxGraphicsShaderGroupCount: uint32, maxIndirectSequenceCount: uint32, maxIndirectCommandsTokenCount: uint32, maxIndirectCommandsStreamCount: uint32, maxIndirectCommandsTokenOffset: uint32, maxIndirectCommandsStreamStride: uint32, minSequencesCountBufferOffsetAlignment: uint32, minSequencesIndexBufferOffsetAlignment: uint32, minIndirectCommandsBufferOffsetAlignment: uint32) =
                    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(Unchecked.defaultof<nativeint>, maxGraphicsShaderGroupCount, maxIndirectSequenceCount, maxIndirectCommandsTokenCount, maxIndirectCommandsStreamCount, maxIndirectCommandsTokenOffset, maxIndirectCommandsStreamStride, minSequencesCountBufferOffsetAlignment, minSequencesIndexBufferOffsetAlignment, minIndirectCommandsBufferOffsetAlignment)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxGraphicsShaderGroupCount = Unchecked.defaultof<uint32> && x.maxIndirectSequenceCount = Unchecked.defaultof<uint32> && x.maxIndirectCommandsTokenCount = Unchecked.defaultof<uint32> && x.maxIndirectCommandsStreamCount = Unchecked.defaultof<uint32> && x.maxIndirectCommandsTokenOffset = Unchecked.defaultof<uint32> && x.maxIndirectCommandsStreamStride = Unchecked.defaultof<uint32> && x.minSequencesCountBufferOffsetAlignment = Unchecked.defaultof<uint32> && x.minSequencesIndexBufferOffsetAlignment = Unchecked.defaultof<uint32> && x.minIndirectCommandsBufferOffsetAlignment = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxGraphicsShaderGroupCount = %A" x.maxGraphicsShaderGroupCount
                        sprintf "maxIndirectSequenceCount = %A" x.maxIndirectSequenceCount
                        sprintf "maxIndirectCommandsTokenCount = %A" x.maxIndirectCommandsTokenCount
                        sprintf "maxIndirectCommandsStreamCount = %A" x.maxIndirectCommandsStreamCount
                        sprintf "maxIndirectCommandsTokenOffset = %A" x.maxIndirectCommandsTokenOffset
                        sprintf "maxIndirectCommandsStreamStride = %A" x.maxIndirectCommandsStreamStride
                        sprintf "minSequencesCountBufferOffsetAlignment = %A" x.minSequencesCountBufferOffsetAlignment
                        sprintf "minSequencesIndexBufferOffsetAlignment = %A" x.minSequencesIndexBufferOffsetAlignment
                        sprintf "minIndirectCommandsBufferOffsetAlignment = %A" x.minIndirectCommandsBufferOffsetAlignment
                    ] |> sprintf "VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSetStateFlagsIndirectCommandNV =
            struct
                val mutable public data : uint32

                new(data: uint32) =
                    {
                        data = data
                    }

                member x.IsEmpty =
                    x.data = Unchecked.defaultof<uint32>

                static member Empty =
                    VkSetStateFlagsIndirectCommandNV(Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "data = %A" x.data
                    ] |> sprintf "VkSetStateFlagsIndirectCommandNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags with
                  static member inline CommandPreprocessReadBitNv = enum<VkAccessFlags> 0x00020000
                  static member inline CommandPreprocessWriteBitNv = enum<VkAccessFlags> 0x00040000
             type VkObjectType with
                  static member inline IndirectCommandsLayoutNv = enum<VkObjectType> 1000277000
             type VkPipelineCreateFlags with
                  static member inline IndirectBindableBitNv = enum<VkPipelineCreateFlags> 0x00040000
             type VkPipelineStageFlags with
                  static member inline CommandPreprocessBitNv = enum<VkPipelineStageFlags> 0x00020000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetGeneratedCommandsMemoryRequirementsNVDel = delegate of VkDevice * nativeptr<VkGeneratedCommandsMemoryRequirementsInfoNV> * nativeptr<Vulkan11.VkMemoryRequirements2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdPreprocessGeneratedCommandsNVDel = delegate of VkCommandBuffer * nativeptr<VkGeneratedCommandsInfoNV> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdExecuteGeneratedCommandsNVDel = delegate of VkCommandBuffer * VkBool32 * nativeptr<VkGeneratedCommandsInfoNV> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBindPipelineShaderGroupNVDel = delegate of VkCommandBuffer * VkPipelineBindPoint * VkPipeline * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateIndirectCommandsLayoutNVDel = delegate of VkDevice * nativeptr<VkIndirectCommandsLayoutCreateInfoNV> * nativeptr<VkAllocationCallbacks> * nativeptr<VkIndirectCommandsLayoutNV> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyIndirectCommandsLayoutNVDel = delegate of VkDevice * VkIndirectCommandsLayoutNV * nativeptr<VkAllocationCallbacks> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVDeviceGeneratedCommands")
                static let s_vkGetGeneratedCommandsMemoryRequirementsNVDel = VkRaw.vkImportInstanceDelegate<VkGetGeneratedCommandsMemoryRequirementsNVDel> "vkGetGeneratedCommandsMemoryRequirementsNV"
                static let s_vkCmdPreprocessGeneratedCommandsNVDel = VkRaw.vkImportInstanceDelegate<VkCmdPreprocessGeneratedCommandsNVDel> "vkCmdPreprocessGeneratedCommandsNV"
                static let s_vkCmdExecuteGeneratedCommandsNVDel = VkRaw.vkImportInstanceDelegate<VkCmdExecuteGeneratedCommandsNVDel> "vkCmdExecuteGeneratedCommandsNV"
                static let s_vkCmdBindPipelineShaderGroupNVDel = VkRaw.vkImportInstanceDelegate<VkCmdBindPipelineShaderGroupNVDel> "vkCmdBindPipelineShaderGroupNV"
                static let s_vkCreateIndirectCommandsLayoutNVDel = VkRaw.vkImportInstanceDelegate<VkCreateIndirectCommandsLayoutNVDel> "vkCreateIndirectCommandsLayoutNV"
                static let s_vkDestroyIndirectCommandsLayoutNVDel = VkRaw.vkImportInstanceDelegate<VkDestroyIndirectCommandsLayoutNVDel> "vkDestroyIndirectCommandsLayoutNV"
                static do Report.End(3) |> ignore
                static member vkGetGeneratedCommandsMemoryRequirementsNV = s_vkGetGeneratedCommandsMemoryRequirementsNVDel
                static member vkCmdPreprocessGeneratedCommandsNV = s_vkCmdPreprocessGeneratedCommandsNVDel
                static member vkCmdExecuteGeneratedCommandsNV = s_vkCmdExecuteGeneratedCommandsNVDel
                static member vkCmdBindPipelineShaderGroupNV = s_vkCmdBindPipelineShaderGroupNVDel
                static member vkCreateIndirectCommandsLayoutNV = s_vkCreateIndirectCommandsLayoutNVDel
                static member vkDestroyIndirectCommandsLayoutNV = s_vkDestroyIndirectCommandsLayoutNVDel
            let vkGetGeneratedCommandsMemoryRequirementsNV(device : VkDevice, pInfo : nativeptr<VkGeneratedCommandsMemoryRequirementsInfoNV>, pMemoryRequirements : nativeptr<Vulkan11.VkMemoryRequirements2>) = Loader<unit>.vkGetGeneratedCommandsMemoryRequirementsNV.Invoke(device, pInfo, pMemoryRequirements)
            let vkCmdPreprocessGeneratedCommandsNV(commandBuffer : VkCommandBuffer, pGeneratedCommandsInfo : nativeptr<VkGeneratedCommandsInfoNV>) = Loader<unit>.vkCmdPreprocessGeneratedCommandsNV.Invoke(commandBuffer, pGeneratedCommandsInfo)
            let vkCmdExecuteGeneratedCommandsNV(commandBuffer : VkCommandBuffer, isPreprocessed : VkBool32, pGeneratedCommandsInfo : nativeptr<VkGeneratedCommandsInfoNV>) = Loader<unit>.vkCmdExecuteGeneratedCommandsNV.Invoke(commandBuffer, isPreprocessed, pGeneratedCommandsInfo)
            let vkCmdBindPipelineShaderGroupNV(commandBuffer : VkCommandBuffer, pipelineBindPoint : VkPipelineBindPoint, pipeline : VkPipeline, groupIndex : uint32) = Loader<unit>.vkCmdBindPipelineShaderGroupNV.Invoke(commandBuffer, pipelineBindPoint, pipeline, groupIndex)
            let vkCreateIndirectCommandsLayoutNV(device : VkDevice, pCreateInfo : nativeptr<VkIndirectCommandsLayoutCreateInfoNV>, pAllocator : nativeptr<VkAllocationCallbacks>, pIndirectCommandsLayout : nativeptr<VkIndirectCommandsLayoutNV>) = Loader<unit>.vkCreateIndirectCommandsLayoutNV.Invoke(device, pCreateInfo, pAllocator, pIndirectCommandsLayout)
            let vkDestroyIndirectCommandsLayoutNV(device : VkDevice, indirectCommandsLayout : VkIndirectCommandsLayoutNV, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyIndirectCommandsLayoutNV.Invoke(device, indirectCommandsLayout, pAllocator)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module NVInheritedViewportScissor =
        let Type = ExtensionType.Device
        let Name = "VK_NV_inherited_viewport_scissor"
        let Number = 279

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCommandBufferInheritanceViewportScissorInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public viewportScissor2D : VkBool32
                val mutable public viewportDepthCount : uint32
                val mutable public pViewportDepths : nativeptr<VkViewport>

                new(pNext: nativeint, viewportScissor2D: VkBool32, viewportDepthCount: uint32, pViewportDepths: nativeptr<VkViewport>) =
                    {
                        sType = 1000278001u
                        pNext = pNext
                        viewportScissor2D = viewportScissor2D
                        viewportDepthCount = viewportDepthCount
                        pViewportDepths = pViewportDepths
                    }

                new(viewportScissor2D: VkBool32, viewportDepthCount: uint32, pViewportDepths: nativeptr<VkViewport>) =
                    VkCommandBufferInheritanceViewportScissorInfoNV(Unchecked.defaultof<nativeint>, viewportScissor2D, viewportDepthCount, pViewportDepths)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.viewportScissor2D = Unchecked.defaultof<VkBool32> && x.viewportDepthCount = Unchecked.defaultof<uint32> && x.pViewportDepths = Unchecked.defaultof<nativeptr<VkViewport>>

                static member Empty =
                    VkCommandBufferInheritanceViewportScissorInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkViewport>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "viewportScissor2D = %A" x.viewportScissor2D
                        sprintf "viewportDepthCount = %A" x.viewportDepthCount
                        sprintf "pViewportDepths = %A" x.pViewportDepths
                    ] |> sprintf "VkCommandBufferInheritanceViewportScissorInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceInheritedViewportScissorFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public inheritedViewportScissor2D : VkBool32

                new(pNext: nativeint, inheritedViewportScissor2D: VkBool32) =
                    {
                        sType = 1000278000u
                        pNext = pNext
                        inheritedViewportScissor2D = inheritedViewportScissor2D
                    }

                new(inheritedViewportScissor2D: VkBool32) =
                    VkPhysicalDeviceInheritedViewportScissorFeaturesNV(Unchecked.defaultof<nativeint>, inheritedViewportScissor2D)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.inheritedViewportScissor2D = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceInheritedViewportScissorFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "inheritedViewportScissor2D = %A" x.inheritedViewportScissor2D
                    ] |> sprintf "VkPhysicalDeviceInheritedViewportScissorFeaturesNV { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module KHRShaderIntegerDotProduct =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_integer_dot_product"
        let Number = 281

        type VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR = Vulkan13.VkPhysicalDeviceShaderIntegerDotProductFeatures

        type VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR = Vulkan13.VkPhysicalDeviceShaderIntegerDotProductProperties



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module EXTTexelBufferAlignment =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_texel_buffer_alignment"
        let Number = 282

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public texelBufferAlignment : VkBool32

                new(pNext: nativeint, texelBufferAlignment: VkBool32) =
                    {
                        sType = 1000281000u
                        pNext = pNext
                        texelBufferAlignment = texelBufferAlignment
                    }

                new(texelBufferAlignment: VkBool32) =
                    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(Unchecked.defaultof<nativeint>, texelBufferAlignment)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.texelBufferAlignment = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "texelBufferAlignment = %A" x.texelBufferAlignment
                    ] |> sprintf "VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT { %s }"
            end

        type VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = Vulkan13.VkPhysicalDeviceTexelBufferAlignmentProperties



    module QCOMRenderPassTransform =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_render_pass_transform"
        let Number = 283

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCommandBufferInheritanceRenderPassTransformInfoQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public transform : KHRSurface.VkSurfaceTransformFlagsKHR
                val mutable public renderArea : VkRect2D

                new(pNext: nativeint, transform: KHRSurface.VkSurfaceTransformFlagsKHR, renderArea: VkRect2D) =
                    {
                        sType = 1000282000u
                        pNext = pNext
                        transform = transform
                        renderArea = renderArea
                    }

                new(transform: KHRSurface.VkSurfaceTransformFlagsKHR, renderArea: VkRect2D) =
                    VkCommandBufferInheritanceRenderPassTransformInfoQCOM(Unchecked.defaultof<nativeint>, transform, renderArea)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.transform = Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR> && x.renderArea = Unchecked.defaultof<VkRect2D>

                static member Empty =
                    VkCommandBufferInheritanceRenderPassTransformInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<VkRect2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "transform = %A" x.transform
                        sprintf "renderArea = %A" x.renderArea
                    ] |> sprintf "VkCommandBufferInheritanceRenderPassTransformInfoQCOM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderPassTransformBeginInfoQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public transform : KHRSurface.VkSurfaceTransformFlagsKHR

                new(pNext: nativeint, transform: KHRSurface.VkSurfaceTransformFlagsKHR) =
                    {
                        sType = 1000282001u
                        pNext = pNext
                        transform = transform
                    }

                new(transform: KHRSurface.VkSurfaceTransformFlagsKHR) =
                    VkRenderPassTransformBeginInfoQCOM(Unchecked.defaultof<nativeint>, transform)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.transform = Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR>

                static member Empty =
                    VkRenderPassTransformBeginInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "transform = %A" x.transform
                    ] |> sprintf "VkRenderPassTransformBeginInfoQCOM { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkRenderPassCreateFlags with
                  static member inline TransformBitQcom = enum<VkRenderPassCreateFlags> 0x00000002


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTDepthBiasControl =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_depth_bias_control"
        let Number = 284

        type VkDepthBiasRepresentationEXT =
            | LeastRepresentableValueFormat = 0
            | LeastRepresentableValueForceUnorm = 1
            | Float = 2


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDepthBiasInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public depthBiasConstantFactor : float32
                val mutable public depthBiasClamp : float32
                val mutable public depthBiasSlopeFactor : float32

                new(pNext: nativeint, depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32) =
                    {
                        sType = 1000283001u
                        pNext = pNext
                        depthBiasConstantFactor = depthBiasConstantFactor
                        depthBiasClamp = depthBiasClamp
                        depthBiasSlopeFactor = depthBiasSlopeFactor
                    }

                new(depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32) =
                    VkDepthBiasInfoEXT(Unchecked.defaultof<nativeint>, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.depthBiasConstantFactor = Unchecked.defaultof<float32> && x.depthBiasClamp = Unchecked.defaultof<float32> && x.depthBiasSlopeFactor = Unchecked.defaultof<float32>

                static member Empty =
                    VkDepthBiasInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "depthBiasConstantFactor = %A" x.depthBiasConstantFactor
                        sprintf "depthBiasClamp = %A" x.depthBiasClamp
                        sprintf "depthBiasSlopeFactor = %A" x.depthBiasSlopeFactor
                    ] |> sprintf "VkDepthBiasInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDepthBiasRepresentationInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public depthBiasRepresentation : VkDepthBiasRepresentationEXT
                val mutable public depthBiasExact : VkBool32

                new(pNext: nativeint, depthBiasRepresentation: VkDepthBiasRepresentationEXT, depthBiasExact: VkBool32) =
                    {
                        sType = 1000283002u
                        pNext = pNext
                        depthBiasRepresentation = depthBiasRepresentation
                        depthBiasExact = depthBiasExact
                    }

                new(depthBiasRepresentation: VkDepthBiasRepresentationEXT, depthBiasExact: VkBool32) =
                    VkDepthBiasRepresentationInfoEXT(Unchecked.defaultof<nativeint>, depthBiasRepresentation, depthBiasExact)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.depthBiasRepresentation = Unchecked.defaultof<VkDepthBiasRepresentationEXT> && x.depthBiasExact = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkDepthBiasRepresentationInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDepthBiasRepresentationEXT>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "depthBiasRepresentation = %A" x.depthBiasRepresentation
                        sprintf "depthBiasExact = %A" x.depthBiasExact
                    ] |> sprintf "VkDepthBiasRepresentationInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDepthBiasControlFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public depthBiasControl : VkBool32
                val mutable public leastRepresentableValueForceUnormRepresentation : VkBool32
                val mutable public floatRepresentation : VkBool32
                val mutable public depthBiasExact : VkBool32

                new(pNext: nativeint, depthBiasControl: VkBool32, leastRepresentableValueForceUnormRepresentation: VkBool32, floatRepresentation: VkBool32, depthBiasExact: VkBool32) =
                    {
                        sType = 1000283000u
                        pNext = pNext
                        depthBiasControl = depthBiasControl
                        leastRepresentableValueForceUnormRepresentation = leastRepresentableValueForceUnormRepresentation
                        floatRepresentation = floatRepresentation
                        depthBiasExact = depthBiasExact
                    }

                new(depthBiasControl: VkBool32, leastRepresentableValueForceUnormRepresentation: VkBool32, floatRepresentation: VkBool32, depthBiasExact: VkBool32) =
                    VkPhysicalDeviceDepthBiasControlFeaturesEXT(Unchecked.defaultof<nativeint>, depthBiasControl, leastRepresentableValueForceUnormRepresentation, floatRepresentation, depthBiasExact)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.depthBiasControl = Unchecked.defaultof<VkBool32> && x.leastRepresentableValueForceUnormRepresentation = Unchecked.defaultof<VkBool32> && x.floatRepresentation = Unchecked.defaultof<VkBool32> && x.depthBiasExact = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDepthBiasControlFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "depthBiasControl = %A" x.depthBiasControl
                        sprintf "leastRepresentableValueForceUnormRepresentation = %A" x.leastRepresentableValueForceUnormRepresentation
                        sprintf "floatRepresentation = %A" x.floatRepresentation
                        sprintf "depthBiasExact = %A" x.depthBiasExact
                    ] |> sprintf "VkPhysicalDeviceDepthBiasControlFeaturesEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetDepthBias2EXTDel = delegate of VkCommandBuffer * nativeptr<VkDepthBiasInfoEXT> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTDepthBiasControl")
                static let s_vkCmdSetDepthBias2EXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthBias2EXTDel> "vkCmdSetDepthBias2EXT"
                static do Report.End(3) |> ignore
                static member vkCmdSetDepthBias2EXT = s_vkCmdSetDepthBias2EXTDel
            let vkCmdSetDepthBias2EXT(commandBuffer : VkCommandBuffer, pDepthBiasInfo : nativeptr<VkDepthBiasInfoEXT>) = Loader<unit>.vkCmdSetDepthBias2EXT.Invoke(commandBuffer, pDepthBiasInfo)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTDeviceMemoryReport =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_device_memory_report"
        let Number = 285

        type PFN_vkDeviceMemoryReportCallbackEXT = nativeint

        type VkDeviceMemoryReportEventTypeEXT =
            | Allocate = 0
            | Free = 1
            | Import = 2
            | Unimport = 3
            | AllocationFailed = 4


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceDeviceMemoryReportCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkDeviceMemoryReportFlagsEXT
                val mutable public pfnUserCallback : PFN_vkDeviceMemoryReportCallbackEXT
                val mutable public pUserData : nativeint

                new(pNext: nativeint, flags: VkDeviceMemoryReportFlagsEXT, pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT, pUserData: nativeint) =
                    {
                        sType = 1000284001u
                        pNext = pNext
                        flags = flags
                        pfnUserCallback = pfnUserCallback
                        pUserData = pUserData
                    }

                new(flags: VkDeviceMemoryReportFlagsEXT, pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT, pUserData: nativeint) =
                    VkDeviceDeviceMemoryReportCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, pfnUserCallback, pUserData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceMemoryReportFlagsEXT> && x.pfnUserCallback = Unchecked.defaultof<PFN_vkDeviceMemoryReportCallbackEXT> && x.pUserData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkDeviceDeviceMemoryReportCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemoryReportFlagsEXT>, Unchecked.defaultof<PFN_vkDeviceMemoryReportCallbackEXT>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "pfnUserCallback = %A" x.pfnUserCallback
                        sprintf "pUserData = %A" x.pUserData
                    ] |> sprintf "VkDeviceDeviceMemoryReportCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceMemoryReportCallbackDataEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkDeviceMemoryReportFlagsEXT
                val mutable public _type : VkDeviceMemoryReportEventTypeEXT
                val mutable public memoryObjectId : uint64
                val mutable public size : VkDeviceSize
                val mutable public objectType : VkObjectType
                val mutable public objectHandle : uint64
                val mutable public heapIndex : uint32

                new(pNext: nativeint, flags: VkDeviceMemoryReportFlagsEXT, _type: VkDeviceMemoryReportEventTypeEXT, memoryObjectId: uint64, size: VkDeviceSize, objectType: VkObjectType, objectHandle: uint64, heapIndex: uint32) =
                    {
                        sType = 1000284002u
                        pNext = pNext
                        flags = flags
                        _type = _type
                        memoryObjectId = memoryObjectId
                        size = size
                        objectType = objectType
                        objectHandle = objectHandle
                        heapIndex = heapIndex
                    }

                new(flags: VkDeviceMemoryReportFlagsEXT, _type: VkDeviceMemoryReportEventTypeEXT, memoryObjectId: uint64, size: VkDeviceSize, objectType: VkObjectType, objectHandle: uint64, heapIndex: uint32) =
                    VkDeviceMemoryReportCallbackDataEXT(Unchecked.defaultof<nativeint>, flags, _type, memoryObjectId, size, objectType, objectHandle, heapIndex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceMemoryReportFlagsEXT> && x._type = Unchecked.defaultof<VkDeviceMemoryReportEventTypeEXT> && x.memoryObjectId = Unchecked.defaultof<uint64> && x.size = Unchecked.defaultof<VkDeviceSize> && x.objectType = Unchecked.defaultof<VkObjectType> && x.objectHandle = Unchecked.defaultof<uint64> && x.heapIndex = Unchecked.defaultof<uint32>

                static member Empty =
                    VkDeviceMemoryReportCallbackDataEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemoryReportFlagsEXT>, Unchecked.defaultof<VkDeviceMemoryReportEventTypeEXT>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkObjectType>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "_type = %A" x._type
                        sprintf "memoryObjectId = %A" x.memoryObjectId
                        sprintf "size = %A" x.size
                        sprintf "objectType = %A" x.objectType
                        sprintf "objectHandle = %A" x.objectHandle
                        sprintf "heapIndex = %A" x.heapIndex
                    ] |> sprintf "VkDeviceMemoryReportCallbackDataEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDeviceMemoryReportFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public deviceMemoryReport : VkBool32

                new(pNext: nativeint, deviceMemoryReport: VkBool32) =
                    {
                        sType = 1000284000u
                        pNext = pNext
                        deviceMemoryReport = deviceMemoryReport
                    }

                new(deviceMemoryReport: VkBool32) =
                    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(Unchecked.defaultof<nativeint>, deviceMemoryReport)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.deviceMemoryReport = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "deviceMemoryReport = %A" x.deviceMemoryReport
                    ] |> sprintf "VkPhysicalDeviceDeviceMemoryReportFeaturesEXT { %s }"
            end



    /// Requires EXTDirectModeDisplay.
    module EXTAcquireDrmDisplay =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_acquire_drm_display"
        let Number = 286

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkAcquireDrmDisplayEXTDel = delegate of VkPhysicalDevice * int32 * KHRDisplay.VkDisplayKHR -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDrmDisplayEXTDel = delegate of VkPhysicalDevice * int32 * uint32 * nativeptr<KHRDisplay.VkDisplayKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTAcquireDrmDisplay")
                static let s_vkAcquireDrmDisplayEXTDel = VkRaw.vkImportInstanceDelegate<VkAcquireDrmDisplayEXTDel> "vkAcquireDrmDisplayEXT"
                static let s_vkGetDrmDisplayEXTDel = VkRaw.vkImportInstanceDelegate<VkGetDrmDisplayEXTDel> "vkGetDrmDisplayEXT"
                static do Report.End(3) |> ignore
                static member vkAcquireDrmDisplayEXT = s_vkAcquireDrmDisplayEXTDel
                static member vkGetDrmDisplayEXT = s_vkGetDrmDisplayEXTDel
            let vkAcquireDrmDisplayEXT(physicalDevice : VkPhysicalDevice, drmFd : int32, display : KHRDisplay.VkDisplayKHR) = Loader<unit>.vkAcquireDrmDisplayEXT.Invoke(physicalDevice, drmFd, display)
            let vkGetDrmDisplayEXT(physicalDevice : VkPhysicalDevice, drmFd : int32, connectorId : uint32, display : nativeptr<KHRDisplay.VkDisplayKHR>) = Loader<unit>.vkGetDrmDisplayEXT.Invoke(physicalDevice, drmFd, connectorId, display)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTRobustness2 =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_robustness2"
        let Number = 287

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRobustness2FeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public robustBufferAccess2 : VkBool32
                val mutable public robustImageAccess2 : VkBool32
                val mutable public nullDescriptor : VkBool32

                new(pNext: nativeint, robustBufferAccess2: VkBool32, robustImageAccess2: VkBool32, nullDescriptor: VkBool32) =
                    {
                        sType = 1000286000u
                        pNext = pNext
                        robustBufferAccess2 = robustBufferAccess2
                        robustImageAccess2 = robustImageAccess2
                        nullDescriptor = nullDescriptor
                    }

                new(robustBufferAccess2: VkBool32, robustImageAccess2: VkBool32, nullDescriptor: VkBool32) =
                    VkPhysicalDeviceRobustness2FeaturesEXT(Unchecked.defaultof<nativeint>, robustBufferAccess2, robustImageAccess2, nullDescriptor)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.robustBufferAccess2 = Unchecked.defaultof<VkBool32> && x.robustImageAccess2 = Unchecked.defaultof<VkBool32> && x.nullDescriptor = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRobustness2FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "robustBufferAccess2 = %A" x.robustBufferAccess2
                        sprintf "robustImageAccess2 = %A" x.robustImageAccess2
                        sprintf "nullDescriptor = %A" x.nullDescriptor
                    ] |> sprintf "VkPhysicalDeviceRobustness2FeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRobustness2PropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public robustStorageBufferAccessSizeAlignment : VkDeviceSize
                val mutable public robustUniformBufferAccessSizeAlignment : VkDeviceSize

                new(pNext: nativeint, robustStorageBufferAccessSizeAlignment: VkDeviceSize, robustUniformBufferAccessSizeAlignment: VkDeviceSize) =
                    {
                        sType = 1000286001u
                        pNext = pNext
                        robustStorageBufferAccessSizeAlignment = robustStorageBufferAccessSizeAlignment
                        robustUniformBufferAccessSizeAlignment = robustUniformBufferAccessSizeAlignment
                    }

                new(robustStorageBufferAccessSizeAlignment: VkDeviceSize, robustUniformBufferAccessSizeAlignment: VkDeviceSize) =
                    VkPhysicalDeviceRobustness2PropertiesEXT(Unchecked.defaultof<nativeint>, robustStorageBufferAccessSizeAlignment, robustUniformBufferAccessSizeAlignment)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.robustStorageBufferAccessSizeAlignment = Unchecked.defaultof<VkDeviceSize> && x.robustUniformBufferAccessSizeAlignment = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkPhysicalDeviceRobustness2PropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "robustStorageBufferAccessSizeAlignment = %A" x.robustStorageBufferAccessSizeAlignment
                        sprintf "robustUniformBufferAccessSizeAlignment = %A" x.robustUniformBufferAccessSizeAlignment
                    ] |> sprintf "VkPhysicalDeviceRobustness2PropertiesEXT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTCustomBorderColor =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_custom_border_color"
        let Number = 288

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCustomBorderColorFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public customBorderColors : VkBool32
                val mutable public customBorderColorWithoutFormat : VkBool32

                new(pNext: nativeint, customBorderColors: VkBool32, customBorderColorWithoutFormat: VkBool32) =
                    {
                        sType = 1000287002u
                        pNext = pNext
                        customBorderColors = customBorderColors
                        customBorderColorWithoutFormat = customBorderColorWithoutFormat
                    }

                new(customBorderColors: VkBool32, customBorderColorWithoutFormat: VkBool32) =
                    VkPhysicalDeviceCustomBorderColorFeaturesEXT(Unchecked.defaultof<nativeint>, customBorderColors, customBorderColorWithoutFormat)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.customBorderColors = Unchecked.defaultof<VkBool32> && x.customBorderColorWithoutFormat = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCustomBorderColorFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "customBorderColors = %A" x.customBorderColors
                        sprintf "customBorderColorWithoutFormat = %A" x.customBorderColorWithoutFormat
                    ] |> sprintf "VkPhysicalDeviceCustomBorderColorFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCustomBorderColorPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxCustomBorderColorSamplers : uint32

                new(pNext: nativeint, maxCustomBorderColorSamplers: uint32) =
                    {
                        sType = 1000287001u
                        pNext = pNext
                        maxCustomBorderColorSamplers = maxCustomBorderColorSamplers
                    }

                new(maxCustomBorderColorSamplers: uint32) =
                    VkPhysicalDeviceCustomBorderColorPropertiesEXT(Unchecked.defaultof<nativeint>, maxCustomBorderColorSamplers)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxCustomBorderColorSamplers = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceCustomBorderColorPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxCustomBorderColorSamplers = %A" x.maxCustomBorderColorSamplers
                    ] |> sprintf "VkPhysicalDeviceCustomBorderColorPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSamplerCustomBorderColorCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public customBorderColor : VkClearColorValue
                val mutable public format : VkFormat

                new(pNext: nativeint, customBorderColor: VkClearColorValue, format: VkFormat) =
                    {
                        sType = 1000287000u
                        pNext = pNext
                        customBorderColor = customBorderColor
                        format = format
                    }

                new(customBorderColor: VkClearColorValue, format: VkFormat) =
                    VkSamplerCustomBorderColorCreateInfoEXT(Unchecked.defaultof<nativeint>, customBorderColor, format)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.customBorderColor = Unchecked.defaultof<VkClearColorValue> && x.format = Unchecked.defaultof<VkFormat>

                static member Empty =
                    VkSamplerCustomBorderColorCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkClearColorValue>, Unchecked.defaultof<VkFormat>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "customBorderColor = %A" x.customBorderColor
                        sprintf "format = %A" x.format
                    ] |> sprintf "VkSamplerCustomBorderColorCreateInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkBorderColor with
                  static member inline FloatCustomExt = enum<VkBorderColor> 1000287003
                  static member inline IntCustomExt = enum<VkBorderColor> 1000287004


    module GOOGLEUserType =
        let Type = ExtensionType.Device
        let Name = "VK_GOOGLE_user_type"
        let Number = 290

    module KHRPipelineLibrary =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_pipeline_library"
        let Number = 291

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineLibraryCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public libraryCount : uint32
                val mutable public pLibraries : nativeptr<VkPipeline>

                new(pNext: nativeint, libraryCount: uint32, pLibraries: nativeptr<VkPipeline>) =
                    {
                        sType = 1000290000u
                        pNext = pNext
                        libraryCount = libraryCount
                        pLibraries = pLibraries
                    }

                new(libraryCount: uint32, pLibraries: nativeptr<VkPipeline>) =
                    VkPipelineLibraryCreateInfoKHR(Unchecked.defaultof<nativeint>, libraryCount, pLibraries)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.libraryCount = Unchecked.defaultof<uint32> && x.pLibraries = Unchecked.defaultof<nativeptr<VkPipeline>>

                static member Empty =
                    VkPipelineLibraryCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipeline>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "libraryCount = %A" x.libraryCount
                        sprintf "pLibraries = %A" x.pLibraries
                    ] |> sprintf "VkPipelineLibraryCreateInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineCreateFlags with
                  static member inline LibraryBitKhr = enum<VkPipelineCreateFlags> 0x00000800


    /// Requires (KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRSurface, KHRGetSurfaceCapabilities2, KHRSwapchain.
    module NVPresentBarrier =
        let Type = ExtensionType.Device
        let Name = "VK_NV_present_barrier"
        let Number = 293

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePresentBarrierFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentBarrier : VkBool32

                new(pNext: nativeint, presentBarrier: VkBool32) =
                    {
                        sType = 1000292000u
                        pNext = pNext
                        presentBarrier = presentBarrier
                    }

                new(presentBarrier: VkBool32) =
                    VkPhysicalDevicePresentBarrierFeaturesNV(Unchecked.defaultof<nativeint>, presentBarrier)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentBarrier = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePresentBarrierFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentBarrier = %A" x.presentBarrier
                    ] |> sprintf "VkPhysicalDevicePresentBarrierFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfaceCapabilitiesPresentBarrierNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentBarrierSupported : VkBool32

                new(pNext: nativeint, presentBarrierSupported: VkBool32) =
                    {
                        sType = 1000292001u
                        pNext = pNext
                        presentBarrierSupported = presentBarrierSupported
                    }

                new(presentBarrierSupported: VkBool32) =
                    VkSurfaceCapabilitiesPresentBarrierNV(Unchecked.defaultof<nativeint>, presentBarrierSupported)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentBarrierSupported = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkSurfaceCapabilitiesPresentBarrierNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentBarrierSupported = %A" x.presentBarrierSupported
                    ] |> sprintf "VkSurfaceCapabilitiesPresentBarrierNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSwapchainPresentBarrierCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentBarrierEnable : VkBool32

                new(pNext: nativeint, presentBarrierEnable: VkBool32) =
                    {
                        sType = 1000292002u
                        pNext = pNext
                        presentBarrierEnable = presentBarrierEnable
                    }

                new(presentBarrierEnable: VkBool32) =
                    VkSwapchainPresentBarrierCreateInfoNV(Unchecked.defaultof<nativeint>, presentBarrierEnable)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentBarrierEnable = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkSwapchainPresentBarrierCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentBarrierEnable = %A" x.presentBarrierEnable
                    ] |> sprintf "VkSwapchainPresentBarrierCreateInfoNV { %s }"
            end



    /// Promoted to Vulkan13.
    module KHRShaderNonSemanticInfo =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_non_semantic_info"
        let Number = 294

    /// Requires KHRSwapchain, KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module KHRPresentId =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_present_id"
        let Number = 295

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePresentIdFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentId : VkBool32

                new(pNext: nativeint, presentId: VkBool32) =
                    {
                        sType = 1000294001u
                        pNext = pNext
                        presentId = presentId
                    }

                new(presentId: VkBool32) =
                    VkPhysicalDevicePresentIdFeaturesKHR(Unchecked.defaultof<nativeint>, presentId)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentId = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePresentIdFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentId = %A" x.presentId
                    ] |> sprintf "VkPhysicalDevicePresentIdFeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPresentIdKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public swapchainCount : uint32
                val mutable public pPresentIds : nativeptr<uint64>

                new(pNext: nativeint, swapchainCount: uint32, pPresentIds: nativeptr<uint64>) =
                    {
                        sType = 1000294000u
                        pNext = pNext
                        swapchainCount = swapchainCount
                        pPresentIds = pPresentIds
                    }

                new(swapchainCount: uint32, pPresentIds: nativeptr<uint64>) =
                    VkPresentIdKHR(Unchecked.defaultof<nativeint>, swapchainCount, pPresentIds)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.swapchainCount = Unchecked.defaultof<uint32> && x.pPresentIds = Unchecked.defaultof<nativeptr<uint64>>

                static member Empty =
                    VkPresentIdKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint64>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "swapchainCount = %A" x.swapchainCount
                        sprintf "pPresentIds = %A" x.pPresentIds
                    ] |> sprintf "VkPresentIdKHR { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module EXTPrivateData =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_private_data"
        let Number = 296

        type VkPrivateDataSlotEXT = Vulkan13.VkPrivateDataSlot
        type VkPrivateDataSlotCreateFlagsEXT = Vulkan13.VkPrivateDataSlotCreateFlags

        type VkDevicePrivateDataCreateInfoEXT = Vulkan13.VkDevicePrivateDataCreateInfo

        type VkPhysicalDevicePrivateDataFeaturesEXT = Vulkan13.VkPhysicalDevicePrivateDataFeatures

        type VkPrivateDataSlotCreateInfoEXT = Vulkan13.VkPrivateDataSlotCreateInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  static member inline PrivateDataSlotExt = enum<VkObjectType> 1000295000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreatePrivateDataSlotEXTDel = delegate of VkDevice * nativeptr<Vulkan13.VkPrivateDataSlotCreateInfo> * nativeptr<VkAllocationCallbacks> * nativeptr<Vulkan13.VkPrivateDataSlot> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyPrivateDataSlotEXTDel = delegate of VkDevice * Vulkan13.VkPrivateDataSlot * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkSetPrivateDataEXTDel = delegate of VkDevice * VkObjectType * uint64 * Vulkan13.VkPrivateDataSlot * uint64 -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPrivateDataEXTDel = delegate of VkDevice * VkObjectType * uint64 * Vulkan13.VkPrivateDataSlot * nativeptr<uint64> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTPrivateData")
                static let s_vkCreatePrivateDataSlotEXTDel = VkRaw.vkImportInstanceDelegate<VkCreatePrivateDataSlotEXTDel> "vkCreatePrivateDataSlotEXT"
                static let s_vkDestroyPrivateDataSlotEXTDel = VkRaw.vkImportInstanceDelegate<VkDestroyPrivateDataSlotEXTDel> "vkDestroyPrivateDataSlotEXT"
                static let s_vkSetPrivateDataEXTDel = VkRaw.vkImportInstanceDelegate<VkSetPrivateDataEXTDel> "vkSetPrivateDataEXT"
                static let s_vkGetPrivateDataEXTDel = VkRaw.vkImportInstanceDelegate<VkGetPrivateDataEXTDel> "vkGetPrivateDataEXT"
                static do Report.End(3) |> ignore
                static member vkCreatePrivateDataSlotEXT = s_vkCreatePrivateDataSlotEXTDel
                static member vkDestroyPrivateDataSlotEXT = s_vkDestroyPrivateDataSlotEXTDel
                static member vkSetPrivateDataEXT = s_vkSetPrivateDataEXTDel
                static member vkGetPrivateDataEXT = s_vkGetPrivateDataEXTDel
            let vkCreatePrivateDataSlotEXT(device : VkDevice, pCreateInfo : nativeptr<Vulkan13.VkPrivateDataSlotCreateInfo>, pAllocator : nativeptr<VkAllocationCallbacks>, pPrivateDataSlot : nativeptr<Vulkan13.VkPrivateDataSlot>) = Loader<unit>.vkCreatePrivateDataSlotEXT.Invoke(device, pCreateInfo, pAllocator, pPrivateDataSlot)
            let vkDestroyPrivateDataSlotEXT(device : VkDevice, privateDataSlot : Vulkan13.VkPrivateDataSlot, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyPrivateDataSlotEXT.Invoke(device, privateDataSlot, pAllocator)
            let vkSetPrivateDataEXT(device : VkDevice, objectType : VkObjectType, objectHandle : uint64, privateDataSlot : Vulkan13.VkPrivateDataSlot, data : uint64) = Loader<unit>.vkSetPrivateDataEXT.Invoke(device, objectType, objectHandle, privateDataSlot, data)
            let vkGetPrivateDataEXT(device : VkDevice, objectType : VkObjectType, objectHandle : uint64, privateDataSlot : Vulkan13.VkPrivateDataSlot, pData : nativeptr<uint64>) = Loader<unit>.vkGetPrivateDataEXT.Invoke(device, objectType, objectHandle, privateDataSlot, pData)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module EXTPipelineCreationCacheControl =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_pipeline_creation_cache_control"
        let Number = 298


        type VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = Vulkan13.VkPhysicalDevicePipelineCreationCacheControlFeatures


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineCacheCreateFlags with
                  static member inline ExternallySynchronizedBitExt = enum<VkPipelineCacheCreateFlags> 0x00000001
             type VkPipelineCreateFlags with
                  static member inline FailOnPipelineCompileRequiredBitExt = enum<VkPipelineCreateFlags> 0x00000100
                  static member inline EarlyReturnOnFailureBitExt = enum<VkPipelineCreateFlags> 0x00000200
             type VkResult with
                  static member inline PipelineCompileRequiredExt = enum<VkResult> 1000297000
                  static member inline ErrorPipelineCompileRequiredExt = enum<VkResult> 1000297000


    /// Requires KHRVideoQueue, (KHRSynchronization2 | Vulkan13).
    module KHRVideoEncodeQueue =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_video_encode_queue"
        let Number = 300

        [<Flags>]
        type VkVideoEncodeFlagsKHR =
            | All = 0
            | None = 0

        [<Flags>]
        type VkVideoEncodeCapabilityFlagsKHR =
            | All = 3
            | None = 0
            | PrecedingExternallyEncodedBytesBit = 0x00000001
            | InsufficientBitstreamBufferRangeDetectionBit = 0x00000002

        [<Flags>]
        type VkVideoEncodeFeedbackFlagsKHR =
            | All = 7
            | None = 0
            | BitstreamBufferOffsetBit = 0x00000001
            | BitstreamBytesWrittenBit = 0x00000002
            | BitstreamHasOverridesBit = 0x00000004

        [<Flags>]
        type VkVideoEncodeUsageFlagsKHR =
            | All = 15
            | Default = 0
            | TranscodingBit = 0x00000001
            | StreamingBit = 0x00000002
            | RecordingBit = 0x00000004
            | ConferencingBit = 0x00000008

        [<Flags>]
        type VkVideoEncodeContentFlagsKHR =
            | All = 7
            | Default = 0
            | CameraBit = 0x00000001
            | DesktopBit = 0x00000002
            | RenderedBit = 0x00000004

        type VkVideoEncodeTuningModeKHR =
            | Default = 0
            | HighQuality = 1
            | LowLatency = 2
            | UltraLowLatency = 3
            | Lossless = 4

        [<Flags>]
        type VkVideoEncodeRateControlModeFlagsKHR =
            | All = 7
            | Default = 0
            | DisabledBit = 0x00000001
            | CbrBit = 0x00000002
            | VbrBit = 0x00000004


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pVideoProfile : nativeptr<KHRVideoQueue.VkVideoProfileInfoKHR>
                val mutable public qualityLevel : uint32

                new(pNext: nativeint, pVideoProfile: nativeptr<KHRVideoQueue.VkVideoProfileInfoKHR>, qualityLevel: uint32) =
                    {
                        sType = 1000299006u
                        pNext = pNext
                        pVideoProfile = pVideoProfile
                        qualityLevel = qualityLevel
                    }

                new(pVideoProfile: nativeptr<KHRVideoQueue.VkVideoProfileInfoKHR>, qualityLevel: uint32) =
                    VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR(Unchecked.defaultof<nativeint>, pVideoProfile, qualityLevel)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pVideoProfile = Unchecked.defaultof<nativeptr<KHRVideoQueue.VkVideoProfileInfoKHR>> && x.qualityLevel = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<KHRVideoQueue.VkVideoProfileInfoKHR>>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pVideoProfile = %A" x.pVideoProfile
                        sprintf "qualityLevel = %A" x.qualityLevel
                    ] |> sprintf "VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkQueryPoolVideoEncodeFeedbackCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public encodeFeedbackFlags : VkVideoEncodeFeedbackFlagsKHR

                new(pNext: nativeint, encodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR) =
                    {
                        sType = 1000299005u
                        pNext = pNext
                        encodeFeedbackFlags = encodeFeedbackFlags
                    }

                new(encodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR) =
                    VkQueryPoolVideoEncodeFeedbackCreateInfoKHR(Unchecked.defaultof<nativeint>, encodeFeedbackFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.encodeFeedbackFlags = Unchecked.defaultof<VkVideoEncodeFeedbackFlagsKHR>

                static member Empty =
                    VkQueryPoolVideoEncodeFeedbackCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeFeedbackFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "encodeFeedbackFlags = %A" x.encodeFeedbackFlags
                    ] |> sprintf "VkQueryPoolVideoEncodeFeedbackCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeCapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoEncodeCapabilityFlagsKHR
                val mutable public rateControlModes : VkVideoEncodeRateControlModeFlagsKHR
                val mutable public maxRateControlLayers : uint32
                val mutable public maxBitrate : uint64
                val mutable public maxQualityLevels : uint32
                val mutable public encodeInputPictureGranularity : VkExtent2D
                val mutable public supportedEncodeFeedbackFlags : VkVideoEncodeFeedbackFlagsKHR

                new(pNext: nativeint, flags: VkVideoEncodeCapabilityFlagsKHR, rateControlModes: VkVideoEncodeRateControlModeFlagsKHR, maxRateControlLayers: uint32, maxBitrate: uint64, maxQualityLevels: uint32, encodeInputPictureGranularity: VkExtent2D, supportedEncodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR) =
                    {
                        sType = 1000299003u
                        pNext = pNext
                        flags = flags
                        rateControlModes = rateControlModes
                        maxRateControlLayers = maxRateControlLayers
                        maxBitrate = maxBitrate
                        maxQualityLevels = maxQualityLevels
                        encodeInputPictureGranularity = encodeInputPictureGranularity
                        supportedEncodeFeedbackFlags = supportedEncodeFeedbackFlags
                    }

                new(flags: VkVideoEncodeCapabilityFlagsKHR, rateControlModes: VkVideoEncodeRateControlModeFlagsKHR, maxRateControlLayers: uint32, maxBitrate: uint64, maxQualityLevels: uint32, encodeInputPictureGranularity: VkExtent2D, supportedEncodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR) =
                    VkVideoEncodeCapabilitiesKHR(Unchecked.defaultof<nativeint>, flags, rateControlModes, maxRateControlLayers, maxBitrate, maxQualityLevels, encodeInputPictureGranularity, supportedEncodeFeedbackFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeCapabilityFlagsKHR> && x.rateControlModes = Unchecked.defaultof<VkVideoEncodeRateControlModeFlagsKHR> && x.maxRateControlLayers = Unchecked.defaultof<uint32> && x.maxBitrate = Unchecked.defaultof<uint64> && x.maxQualityLevels = Unchecked.defaultof<uint32> && x.encodeInputPictureGranularity = Unchecked.defaultof<VkExtent2D> && x.supportedEncodeFeedbackFlags = Unchecked.defaultof<VkVideoEncodeFeedbackFlagsKHR>

                static member Empty =
                    VkVideoEncodeCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeCapabilityFlagsKHR>, Unchecked.defaultof<VkVideoEncodeRateControlModeFlagsKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkVideoEncodeFeedbackFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "rateControlModes = %A" x.rateControlModes
                        sprintf "maxRateControlLayers = %A" x.maxRateControlLayers
                        sprintf "maxBitrate = %A" x.maxBitrate
                        sprintf "maxQualityLevels = %A" x.maxQualityLevels
                        sprintf "encodeInputPictureGranularity = %A" x.encodeInputPictureGranularity
                        sprintf "supportedEncodeFeedbackFlags = %A" x.supportedEncodeFeedbackFlags
                    ] |> sprintf "VkVideoEncodeCapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoEncodeFlagsKHR
                val mutable public dstBuffer : VkBuffer
                val mutable public dstBufferOffset : VkDeviceSize
                val mutable public dstBufferRange : VkDeviceSize
                val mutable public srcPictureResource : KHRVideoQueue.VkVideoPictureResourceInfoKHR
                val mutable public pSetupReferenceSlot : nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>
                val mutable public referenceSlotCount : uint32
                val mutable public pReferenceSlots : nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>
                val mutable public precedingExternallyEncodedBytes : uint32

                new(pNext: nativeint, flags: VkVideoEncodeFlagsKHR, dstBuffer: VkBuffer, dstBufferOffset: VkDeviceSize, dstBufferRange: VkDeviceSize, srcPictureResource: KHRVideoQueue.VkVideoPictureResourceInfoKHR, pSetupReferenceSlot: nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>, referenceSlotCount: uint32, pReferenceSlots: nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>, precedingExternallyEncodedBytes: uint32) =
                    {
                        sType = 1000299000u
                        pNext = pNext
                        flags = flags
                        dstBuffer = dstBuffer
                        dstBufferOffset = dstBufferOffset
                        dstBufferRange = dstBufferRange
                        srcPictureResource = srcPictureResource
                        pSetupReferenceSlot = pSetupReferenceSlot
                        referenceSlotCount = referenceSlotCount
                        pReferenceSlots = pReferenceSlots
                        precedingExternallyEncodedBytes = precedingExternallyEncodedBytes
                    }

                new(flags: VkVideoEncodeFlagsKHR, dstBuffer: VkBuffer, dstBufferOffset: VkDeviceSize, dstBufferRange: VkDeviceSize, srcPictureResource: KHRVideoQueue.VkVideoPictureResourceInfoKHR, pSetupReferenceSlot: nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>, referenceSlotCount: uint32, pReferenceSlots: nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>, precedingExternallyEncodedBytes: uint32) =
                    VkVideoEncodeInfoKHR(Unchecked.defaultof<nativeint>, flags, dstBuffer, dstBufferOffset, dstBufferRange, srcPictureResource, pSetupReferenceSlot, referenceSlotCount, pReferenceSlots, precedingExternallyEncodedBytes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeFlagsKHR> && x.dstBuffer = Unchecked.defaultof<VkBuffer> && x.dstBufferOffset = Unchecked.defaultof<VkDeviceSize> && x.dstBufferRange = Unchecked.defaultof<VkDeviceSize> && x.srcPictureResource = Unchecked.defaultof<KHRVideoQueue.VkVideoPictureResourceInfoKHR> && x.pSetupReferenceSlot = Unchecked.defaultof<nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>> && x.referenceSlotCount = Unchecked.defaultof<uint32> && x.pReferenceSlots = Unchecked.defaultof<nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>> && x.precedingExternallyEncodedBytes = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeFlagsKHR>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<KHRVideoQueue.VkVideoPictureResourceInfoKHR>, Unchecked.defaultof<nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<KHRVideoQueue.VkVideoReferenceSlotInfoKHR>>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "dstBuffer = %A" x.dstBuffer
                        sprintf "dstBufferOffset = %A" x.dstBufferOffset
                        sprintf "dstBufferRange = %A" x.dstBufferRange
                        sprintf "srcPictureResource = %A" x.srcPictureResource
                        sprintf "pSetupReferenceSlot = %A" x.pSetupReferenceSlot
                        sprintf "referenceSlotCount = %A" x.referenceSlotCount
                        sprintf "pReferenceSlots = %A" x.pReferenceSlots
                        sprintf "precedingExternallyEncodedBytes = %A" x.precedingExternallyEncodedBytes
                    ] |> sprintf "VkVideoEncodeInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeQualityLevelInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public qualityLevel : uint32

                new(pNext: nativeint, qualityLevel: uint32) =
                    {
                        sType = 1000299008u
                        pNext = pNext
                        qualityLevel = qualityLevel
                    }

                new(qualityLevel: uint32) =
                    VkVideoEncodeQualityLevelInfoKHR(Unchecked.defaultof<nativeint>, qualityLevel)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.qualityLevel = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeQualityLevelInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "qualityLevel = %A" x.qualityLevel
                    ] |> sprintf "VkVideoEncodeQualityLevelInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeQualityLevelPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public preferredRateControlMode : VkVideoEncodeRateControlModeFlagsKHR
                val mutable public preferredRateControlLayerCount : uint32

                new(pNext: nativeint, preferredRateControlMode: VkVideoEncodeRateControlModeFlagsKHR, preferredRateControlLayerCount: uint32) =
                    {
                        sType = 1000299007u
                        pNext = pNext
                        preferredRateControlMode = preferredRateControlMode
                        preferredRateControlLayerCount = preferredRateControlLayerCount
                    }

                new(preferredRateControlMode: VkVideoEncodeRateControlModeFlagsKHR, preferredRateControlLayerCount: uint32) =
                    VkVideoEncodeQualityLevelPropertiesKHR(Unchecked.defaultof<nativeint>, preferredRateControlMode, preferredRateControlLayerCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.preferredRateControlMode = Unchecked.defaultof<VkVideoEncodeRateControlModeFlagsKHR> && x.preferredRateControlLayerCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeQualityLevelPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeRateControlModeFlagsKHR>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "preferredRateControlMode = %A" x.preferredRateControlMode
                        sprintf "preferredRateControlLayerCount = %A" x.preferredRateControlLayerCount
                    ] |> sprintf "VkVideoEncodeQualityLevelPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeRateControlLayerInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public averageBitrate : uint64
                val mutable public maxBitrate : uint64
                val mutable public frameRateNumerator : uint32
                val mutable public frameRateDenominator : uint32

                new(pNext: nativeint, averageBitrate: uint64, maxBitrate: uint64, frameRateNumerator: uint32, frameRateDenominator: uint32) =
                    {
                        sType = 1000299002u
                        pNext = pNext
                        averageBitrate = averageBitrate
                        maxBitrate = maxBitrate
                        frameRateNumerator = frameRateNumerator
                        frameRateDenominator = frameRateDenominator
                    }

                new(averageBitrate: uint64, maxBitrate: uint64, frameRateNumerator: uint32, frameRateDenominator: uint32) =
                    VkVideoEncodeRateControlLayerInfoKHR(Unchecked.defaultof<nativeint>, averageBitrate, maxBitrate, frameRateNumerator, frameRateDenominator)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.averageBitrate = Unchecked.defaultof<uint64> && x.maxBitrate = Unchecked.defaultof<uint64> && x.frameRateNumerator = Unchecked.defaultof<uint32> && x.frameRateDenominator = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeRateControlLayerInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "averageBitrate = %A" x.averageBitrate
                        sprintf "maxBitrate = %A" x.maxBitrate
                        sprintf "frameRateNumerator = %A" x.frameRateNumerator
                        sprintf "frameRateDenominator = %A" x.frameRateDenominator
                    ] |> sprintf "VkVideoEncodeRateControlLayerInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeRateControlInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoEncodeRateControlFlagsKHR
                val mutable public rateControlMode : VkVideoEncodeRateControlModeFlagsKHR
                val mutable public layerCount : uint32
                val mutable public pLayers : nativeptr<VkVideoEncodeRateControlLayerInfoKHR>
                val mutable public virtualBufferSizeInMs : uint32
                val mutable public initialVirtualBufferSizeInMs : uint32

                new(pNext: nativeint, flags: VkVideoEncodeRateControlFlagsKHR, rateControlMode: VkVideoEncodeRateControlModeFlagsKHR, layerCount: uint32, pLayers: nativeptr<VkVideoEncodeRateControlLayerInfoKHR>, virtualBufferSizeInMs: uint32, initialVirtualBufferSizeInMs: uint32) =
                    {
                        sType = 1000299001u
                        pNext = pNext
                        flags = flags
                        rateControlMode = rateControlMode
                        layerCount = layerCount
                        pLayers = pLayers
                        virtualBufferSizeInMs = virtualBufferSizeInMs
                        initialVirtualBufferSizeInMs = initialVirtualBufferSizeInMs
                    }

                new(flags: VkVideoEncodeRateControlFlagsKHR, rateControlMode: VkVideoEncodeRateControlModeFlagsKHR, layerCount: uint32, pLayers: nativeptr<VkVideoEncodeRateControlLayerInfoKHR>, virtualBufferSizeInMs: uint32, initialVirtualBufferSizeInMs: uint32) =
                    VkVideoEncodeRateControlInfoKHR(Unchecked.defaultof<nativeint>, flags, rateControlMode, layerCount, pLayers, virtualBufferSizeInMs, initialVirtualBufferSizeInMs)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeRateControlFlagsKHR> && x.rateControlMode = Unchecked.defaultof<VkVideoEncodeRateControlModeFlagsKHR> && x.layerCount = Unchecked.defaultof<uint32> && x.pLayers = Unchecked.defaultof<nativeptr<VkVideoEncodeRateControlLayerInfoKHR>> && x.virtualBufferSizeInMs = Unchecked.defaultof<uint32> && x.initialVirtualBufferSizeInMs = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeRateControlInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeRateControlFlagsKHR>, Unchecked.defaultof<VkVideoEncodeRateControlModeFlagsKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoEncodeRateControlLayerInfoKHR>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "rateControlMode = %A" x.rateControlMode
                        sprintf "layerCount = %A" x.layerCount
                        sprintf "pLayers = %A" x.pLayers
                        sprintf "virtualBufferSizeInMs = %A" x.virtualBufferSizeInMs
                        sprintf "initialVirtualBufferSizeInMs = %A" x.initialVirtualBufferSizeInMs
                    ] |> sprintf "VkVideoEncodeRateControlInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeSessionParametersFeedbackInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public hasOverrides : VkBool32

                new(pNext: nativeint, hasOverrides: VkBool32) =
                    {
                        sType = 1000299010u
                        pNext = pNext
                        hasOverrides = hasOverrides
                    }

                new(hasOverrides: VkBool32) =
                    VkVideoEncodeSessionParametersFeedbackInfoKHR(Unchecked.defaultof<nativeint>, hasOverrides)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.hasOverrides = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkVideoEncodeSessionParametersFeedbackInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "hasOverrides = %A" x.hasOverrides
                    ] |> sprintf "VkVideoEncodeSessionParametersFeedbackInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeSessionParametersGetInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public videoSessionParameters : KHRVideoQueue.VkVideoSessionParametersKHR

                new(pNext: nativeint, videoSessionParameters: KHRVideoQueue.VkVideoSessionParametersKHR) =
                    {
                        sType = 1000299009u
                        pNext = pNext
                        videoSessionParameters = videoSessionParameters
                    }

                new(videoSessionParameters: KHRVideoQueue.VkVideoSessionParametersKHR) =
                    VkVideoEncodeSessionParametersGetInfoKHR(Unchecked.defaultof<nativeint>, videoSessionParameters)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.videoSessionParameters = Unchecked.defaultof<KHRVideoQueue.VkVideoSessionParametersKHR>

                static member Empty =
                    VkVideoEncodeSessionParametersGetInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRVideoQueue.VkVideoSessionParametersKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "videoSessionParameters = %A" x.videoSessionParameters
                    ] |> sprintf "VkVideoEncodeSessionParametersGetInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeUsageInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public videoUsageHints : VkVideoEncodeUsageFlagsKHR
                val mutable public videoContentHints : VkVideoEncodeContentFlagsKHR
                val mutable public tuningMode : VkVideoEncodeTuningModeKHR

                new(pNext: nativeint, videoUsageHints: VkVideoEncodeUsageFlagsKHR, videoContentHints: VkVideoEncodeContentFlagsKHR, tuningMode: VkVideoEncodeTuningModeKHR) =
                    {
                        sType = 1000299004u
                        pNext = pNext
                        videoUsageHints = videoUsageHints
                        videoContentHints = videoContentHints
                        tuningMode = tuningMode
                    }

                new(videoUsageHints: VkVideoEncodeUsageFlagsKHR, videoContentHints: VkVideoEncodeContentFlagsKHR, tuningMode: VkVideoEncodeTuningModeKHR) =
                    VkVideoEncodeUsageInfoKHR(Unchecked.defaultof<nativeint>, videoUsageHints, videoContentHints, tuningMode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.videoUsageHints = Unchecked.defaultof<VkVideoEncodeUsageFlagsKHR> && x.videoContentHints = Unchecked.defaultof<VkVideoEncodeContentFlagsKHR> && x.tuningMode = Unchecked.defaultof<VkVideoEncodeTuningModeKHR>

                static member Empty =
                    VkVideoEncodeUsageInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeUsageFlagsKHR>, Unchecked.defaultof<VkVideoEncodeContentFlagsKHR>, Unchecked.defaultof<VkVideoEncodeTuningModeKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "videoUsageHints = %A" x.videoUsageHints
                        sprintf "videoContentHints = %A" x.videoContentHints
                        sprintf "tuningMode = %A" x.tuningMode
                    ] |> sprintf "VkVideoEncodeUsageInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkAccessFlags2 with
                  static member inline Access2VideoEncodeReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000020
                  static member inline Access2VideoEncodeWriteBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000040
             type VkBufferUsageFlags with
                  static member inline VideoEncodeDstBitKhr = enum<VkBufferUsageFlags> 0x00008000
                  static member inline VideoEncodeSrcBitKhr = enum<VkBufferUsageFlags> 0x00010000
             type VkFormatFeatureFlags with
                  static member inline VideoEncodeInputBitKhr = enum<VkFormatFeatureFlags> 0x08000000
                  static member inline VideoEncodeDpbBitKhr = enum<VkFormatFeatureFlags> 0x10000000
             type VkImageLayout with
                  static member inline VideoEncodeDstKhr = enum<VkImageLayout> 1000299000
                  static member inline VideoEncodeSrcKhr = enum<VkImageLayout> 1000299001
                  static member inline VideoEncodeDpbKhr = enum<VkImageLayout> 1000299002
             type VkImageUsageFlags with
                  static member inline VideoEncodeDstBitKhr = enum<VkImageUsageFlags> 0x00002000
                  static member inline VideoEncodeSrcBitKhr = enum<VkImageUsageFlags> 0x00004000
                  static member inline VideoEncodeDpbBitKhr = enum<VkImageUsageFlags> 0x00008000
             type Vulkan13.VkPipelineStageFlags2 with
                  static member inline PipelineStage2VideoEncodeBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x08000000
             type KHRVideoQueue.VkQueryResultStatusKHR with
                  static member inline InsufficientBitstreamBufferRange = enum<KHRVideoQueue.VkQueryResultStatusKHR> -1000299000
             type VkQueryType with
                  static member inline VideoEncodeFeedbackKhr = enum<VkQueryType> 1000299000
             type VkQueueFlags with
                  static member inline VideoEncodeBitKhr = enum<VkQueueFlags> 0x00000040
             type VkResult with
                  static member inline ErrorInvalidVideoStdParametersKhr = enum<VkResult> -1000299000
             type KHRVideoQueue.VkVideoCodingControlFlagsKHR with
                  static member inline EncodeRateControlBit = enum<KHRVideoQueue.VkVideoCodingControlFlagsKHR> 0x00000002
                  static member inline EncodeQualityLevelBit = enum<KHRVideoQueue.VkVideoCodingControlFlagsKHR> 0x00000004
             type KHRVideoQueue.VkVideoSessionCreateFlagsKHR with
                  static member inline AllowEncodeParameterOptimizationsBit = enum<KHRVideoQueue.VkVideoSessionCreateFlagsKHR> 0x00000002

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR> * nativeptr<VkVideoEncodeQualityLevelPropertiesKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetEncodedVideoSessionParametersKHRDel = delegate of VkDevice * nativeptr<VkVideoEncodeSessionParametersGetInfoKHR> * nativeptr<VkVideoEncodeSessionParametersFeedbackInfoKHR> * nativeptr<uint64> * nativeint -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdEncodeVideoKHRDel = delegate of VkCommandBuffer * nativeptr<VkVideoEncodeInfoKHR> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRVideoEncodeQueue")
                static let s_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHRDel> "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"
                static let s_vkGetEncodedVideoSessionParametersKHRDel = VkRaw.vkImportInstanceDelegate<VkGetEncodedVideoSessionParametersKHRDel> "vkGetEncodedVideoSessionParametersKHR"
                static let s_vkCmdEncodeVideoKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdEncodeVideoKHRDel> "vkCmdEncodeVideoKHR"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = s_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHRDel
                static member vkGetEncodedVideoSessionParametersKHR = s_vkGetEncodedVideoSessionParametersKHRDel
                static member vkCmdEncodeVideoKHR = s_vkCmdEncodeVideoKHRDel
            let vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(physicalDevice : VkPhysicalDevice, pQualityLevelInfo : nativeptr<VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR>, pQualityLevelProperties : nativeptr<VkVideoEncodeQualityLevelPropertiesKHR>) = Loader<unit>.vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR.Invoke(physicalDevice, pQualityLevelInfo, pQualityLevelProperties)
            let vkGetEncodedVideoSessionParametersKHR(device : VkDevice, pVideoSessionParametersInfo : nativeptr<VkVideoEncodeSessionParametersGetInfoKHR>, pFeedbackInfo : nativeptr<VkVideoEncodeSessionParametersFeedbackInfoKHR>, pDataSize : nativeptr<uint64>, pData : nativeint) = Loader<unit>.vkGetEncodedVideoSessionParametersKHR.Invoke(device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize, pData)
            let vkCmdEncodeVideoKHR(commandBuffer : VkCommandBuffer, pEncodeInfo : nativeptr<VkVideoEncodeInfoKHR>) = Loader<unit>.vkCmdEncodeVideoKHR.Invoke(commandBuffer, pEncodeInfo)

        [<AutoOpen>]
        module ``KHRFormatFeatureFlags2 | Vulkan13`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkFormatFeatureFlags2 with
                      static member inline FormatFeature2VideoEncodeInputBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x08000000
                      static member inline FormatFeature2VideoEncodeDpbBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x10000000


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module NVDeviceDiagnosticsConfig =
        let Type = ExtensionType.Device
        let Name = "VK_NV_device_diagnostics_config"
        let Number = 301

        [<Flags>]
        type VkDeviceDiagnosticsConfigFlagsNV =
            | All = 15
            | None = 0
            | EnableShaderDebugInfoBit = 0x00000001
            | EnableResourceTrackingBit = 0x00000002
            | EnableAutomaticCheckpointsBit = 0x00000004
            | EnableShaderErrorReportingBit = 0x00000008


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceDiagnosticsConfigCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkDeviceDiagnosticsConfigFlagsNV

                new(pNext: nativeint, flags: VkDeviceDiagnosticsConfigFlagsNV) =
                    {
                        sType = 1000300001u
                        pNext = pNext
                        flags = flags
                    }

                new(flags: VkDeviceDiagnosticsConfigFlagsNV) =
                    VkDeviceDiagnosticsConfigCreateInfoNV(Unchecked.defaultof<nativeint>, flags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceDiagnosticsConfigFlagsNV>

                static member Empty =
                    VkDeviceDiagnosticsConfigCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceDiagnosticsConfigFlagsNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                    ] |> sprintf "VkDeviceDiagnosticsConfigCreateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDiagnosticsConfigFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public diagnosticsConfig : VkBool32

                new(pNext: nativeint, diagnosticsConfig: VkBool32) =
                    {
                        sType = 1000300000u
                        pNext = pNext
                        diagnosticsConfig = diagnosticsConfig
                    }

                new(diagnosticsConfig: VkBool32) =
                    VkPhysicalDeviceDiagnosticsConfigFeaturesNV(Unchecked.defaultof<nativeint>, diagnosticsConfig)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.diagnosticsConfig = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDiagnosticsConfigFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "diagnosticsConfig = %A" x.diagnosticsConfig
                    ] |> sprintf "VkPhysicalDeviceDiagnosticsConfigFeaturesNV { %s }"
            end



    module QCOMRenderPassStoreOps =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_render_pass_store_ops"
        let Number = 302

        [<AutoOpen>]
        module EnumExtensions =
             type VkAttachmentStoreOp with
                  static member inline NoneQcom = enum<VkAttachmentStoreOp> 1000301000


    module NVCudaKernelLaunch =
        let Type = ExtensionType.Device
        let Name = "VK_NV_cuda_kernel_launch"
        let Number = 308


        [<StructLayout(LayoutKind.Sequential)>]
        type VkCudaModuleNV =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkCudaModuleNV(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCudaFunctionNV =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkCudaFunctionNV(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCudaFunctionCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _module : VkCudaModuleNV
                val mutable public pName : cstr

                new(pNext: nativeint, _module: VkCudaModuleNV, pName: cstr) =
                    {
                        sType = 1000307001u
                        pNext = pNext
                        _module = _module
                        pName = pName
                    }

                new(_module: VkCudaModuleNV, pName: cstr) =
                    VkCudaFunctionCreateInfoNV(Unchecked.defaultof<nativeint>, _module, pName)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._module = Unchecked.defaultof<VkCudaModuleNV> && x.pName = Unchecked.defaultof<cstr>

                static member Empty =
                    VkCudaFunctionCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCudaModuleNV>, Unchecked.defaultof<cstr>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_module = %A" x._module
                        sprintf "pName = %A" x.pName
                    ] |> sprintf "VkCudaFunctionCreateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCudaLaunchInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _function : VkCudaFunctionNV
                val mutable public gridDimX : uint32
                val mutable public gridDimY : uint32
                val mutable public gridDimZ : uint32
                val mutable public blockDimX : uint32
                val mutable public blockDimY : uint32
                val mutable public blockDimZ : uint32
                val mutable public sharedMemBytes : uint32
                val mutable public paramCount : uint64
                val mutable public pParams : nativeptr<nativeint>
                val mutable public extraCount : uint64
                val mutable public pExtras : nativeptr<nativeint>

                new(pNext: nativeint, _function: VkCudaFunctionNV, gridDimX: uint32, gridDimY: uint32, gridDimZ: uint32, blockDimX: uint32, blockDimY: uint32, blockDimZ: uint32, sharedMemBytes: uint32, paramCount: uint64, pParams: nativeptr<nativeint>, extraCount: uint64, pExtras: nativeptr<nativeint>) =
                    {
                        sType = 1000307002u
                        pNext = pNext
                        _function = _function
                        gridDimX = gridDimX
                        gridDimY = gridDimY
                        gridDimZ = gridDimZ
                        blockDimX = blockDimX
                        blockDimY = blockDimY
                        blockDimZ = blockDimZ
                        sharedMemBytes = sharedMemBytes
                        paramCount = paramCount
                        pParams = pParams
                        extraCount = extraCount
                        pExtras = pExtras
                    }

                new(_function: VkCudaFunctionNV, gridDimX: uint32, gridDimY: uint32, gridDimZ: uint32, blockDimX: uint32, blockDimY: uint32, blockDimZ: uint32, sharedMemBytes: uint32, paramCount: uint64, pParams: nativeptr<nativeint>, extraCount: uint64, pExtras: nativeptr<nativeint>) =
                    VkCudaLaunchInfoNV(Unchecked.defaultof<nativeint>, _function, gridDimX, gridDimY, gridDimZ, blockDimX, blockDimY, blockDimZ, sharedMemBytes, paramCount, pParams, extraCount, pExtras)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._function = Unchecked.defaultof<VkCudaFunctionNV> && x.gridDimX = Unchecked.defaultof<uint32> && x.gridDimY = Unchecked.defaultof<uint32> && x.gridDimZ = Unchecked.defaultof<uint32> && x.blockDimX = Unchecked.defaultof<uint32> && x.blockDimY = Unchecked.defaultof<uint32> && x.blockDimZ = Unchecked.defaultof<uint32> && x.sharedMemBytes = Unchecked.defaultof<uint32> && x.paramCount = Unchecked.defaultof<uint64> && x.pParams = Unchecked.defaultof<nativeptr<nativeint>> && x.extraCount = Unchecked.defaultof<uint64> && x.pExtras = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkCudaLaunchInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCudaFunctionNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_function = %A" x._function
                        sprintf "gridDimX = %A" x.gridDimX
                        sprintf "gridDimY = %A" x.gridDimY
                        sprintf "gridDimZ = %A" x.gridDimZ
                        sprintf "blockDimX = %A" x.blockDimX
                        sprintf "blockDimY = %A" x.blockDimY
                        sprintf "blockDimZ = %A" x.blockDimZ
                        sprintf "sharedMemBytes = %A" x.sharedMemBytes
                        sprintf "paramCount = %A" x.paramCount
                        sprintf "pParams = %A" x.pParams
                        sprintf "extraCount = %A" x.extraCount
                        sprintf "pExtras = %A" x.pExtras
                    ] |> sprintf "VkCudaLaunchInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCudaModuleCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public dataSize : uint64
                val mutable public pData : nativeint

                new(pNext: nativeint, dataSize: uint64, pData: nativeint) =
                    {
                        sType = 1000307000u
                        pNext = pNext
                        dataSize = dataSize
                        pData = pData
                    }

                new(dataSize: uint64, pData: nativeint) =
                    VkCudaModuleCreateInfoNV(Unchecked.defaultof<nativeint>, dataSize, pData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.dataSize = Unchecked.defaultof<uint64> && x.pData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkCudaModuleCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "dataSize = %A" x.dataSize
                        sprintf "pData = %A" x.pData
                    ] |> sprintf "VkCudaModuleCreateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCudaKernelLaunchFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cudaKernelLaunchFeatures : VkBool32

                new(pNext: nativeint, cudaKernelLaunchFeatures: VkBool32) =
                    {
                        sType = 1000307003u
                        pNext = pNext
                        cudaKernelLaunchFeatures = cudaKernelLaunchFeatures
                    }

                new(cudaKernelLaunchFeatures: VkBool32) =
                    VkPhysicalDeviceCudaKernelLaunchFeaturesNV(Unchecked.defaultof<nativeint>, cudaKernelLaunchFeatures)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cudaKernelLaunchFeatures = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCudaKernelLaunchFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cudaKernelLaunchFeatures = %A" x.cudaKernelLaunchFeatures
                    ] |> sprintf "VkPhysicalDeviceCudaKernelLaunchFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCudaKernelLaunchPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public computeCapabilityMinor : uint32
                val mutable public computeCapabilityMajor : uint32

                new(pNext: nativeint, computeCapabilityMinor: uint32, computeCapabilityMajor: uint32) =
                    {
                        sType = 1000307004u
                        pNext = pNext
                        computeCapabilityMinor = computeCapabilityMinor
                        computeCapabilityMajor = computeCapabilityMajor
                    }

                new(computeCapabilityMinor: uint32, computeCapabilityMajor: uint32) =
                    VkPhysicalDeviceCudaKernelLaunchPropertiesNV(Unchecked.defaultof<nativeint>, computeCapabilityMinor, computeCapabilityMajor)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.computeCapabilityMinor = Unchecked.defaultof<uint32> && x.computeCapabilityMajor = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceCudaKernelLaunchPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "computeCapabilityMinor = %A" x.computeCapabilityMinor
                        sprintf "computeCapabilityMajor = %A" x.computeCapabilityMajor
                    ] |> sprintf "VkPhysicalDeviceCudaKernelLaunchPropertiesNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  static member inline CudaModuleNv = enum<VkObjectType> 1000307000
                  static member inline CudaFunctionNv = enum<VkObjectType> 1000307001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateCudaModuleNVDel = delegate of VkDevice * nativeptr<VkCudaModuleCreateInfoNV> * nativeptr<VkAllocationCallbacks> * nativeptr<VkCudaModuleNV> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetCudaModuleCacheNVDel = delegate of VkDevice * VkCudaModuleNV * nativeptr<uint64> * nativeint -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateCudaFunctionNVDel = delegate of VkDevice * nativeptr<VkCudaFunctionCreateInfoNV> * nativeptr<VkAllocationCallbacks> * nativeptr<VkCudaFunctionNV> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyCudaModuleNVDel = delegate of VkDevice * VkCudaModuleNV * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyCudaFunctionNVDel = delegate of VkDevice * VkCudaFunctionNV * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCudaLaunchKernelNVDel = delegate of VkCommandBuffer * nativeptr<VkCudaLaunchInfoNV> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVCudaKernelLaunch")
                static let s_vkCreateCudaModuleNVDel = VkRaw.vkImportInstanceDelegate<VkCreateCudaModuleNVDel> "vkCreateCudaModuleNV"
                static let s_vkGetCudaModuleCacheNVDel = VkRaw.vkImportInstanceDelegate<VkGetCudaModuleCacheNVDel> "vkGetCudaModuleCacheNV"
                static let s_vkCreateCudaFunctionNVDel = VkRaw.vkImportInstanceDelegate<VkCreateCudaFunctionNVDel> "vkCreateCudaFunctionNV"
                static let s_vkDestroyCudaModuleNVDel = VkRaw.vkImportInstanceDelegate<VkDestroyCudaModuleNVDel> "vkDestroyCudaModuleNV"
                static let s_vkDestroyCudaFunctionNVDel = VkRaw.vkImportInstanceDelegate<VkDestroyCudaFunctionNVDel> "vkDestroyCudaFunctionNV"
                static let s_vkCmdCudaLaunchKernelNVDel = VkRaw.vkImportInstanceDelegate<VkCmdCudaLaunchKernelNVDel> "vkCmdCudaLaunchKernelNV"
                static do Report.End(3) |> ignore
                static member vkCreateCudaModuleNV = s_vkCreateCudaModuleNVDel
                static member vkGetCudaModuleCacheNV = s_vkGetCudaModuleCacheNVDel
                static member vkCreateCudaFunctionNV = s_vkCreateCudaFunctionNVDel
                static member vkDestroyCudaModuleNV = s_vkDestroyCudaModuleNVDel
                static member vkDestroyCudaFunctionNV = s_vkDestroyCudaFunctionNVDel
                static member vkCmdCudaLaunchKernelNV = s_vkCmdCudaLaunchKernelNVDel
            let vkCreateCudaModuleNV(device : VkDevice, pCreateInfo : nativeptr<VkCudaModuleCreateInfoNV>, pAllocator : nativeptr<VkAllocationCallbacks>, pModule : nativeptr<VkCudaModuleNV>) = Loader<unit>.vkCreateCudaModuleNV.Invoke(device, pCreateInfo, pAllocator, pModule)
            let vkGetCudaModuleCacheNV(device : VkDevice, _module : VkCudaModuleNV, pCacheSize : nativeptr<uint64>, pCacheData : nativeint) = Loader<unit>.vkGetCudaModuleCacheNV.Invoke(device, _module, pCacheSize, pCacheData)
            let vkCreateCudaFunctionNV(device : VkDevice, pCreateInfo : nativeptr<VkCudaFunctionCreateInfoNV>, pAllocator : nativeptr<VkAllocationCallbacks>, pFunction : nativeptr<VkCudaFunctionNV>) = Loader<unit>.vkCreateCudaFunctionNV.Invoke(device, pCreateInfo, pAllocator, pFunction)
            let vkDestroyCudaModuleNV(device : VkDevice, _module : VkCudaModuleNV, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyCudaModuleNV.Invoke(device, _module, pAllocator)
            let vkDestroyCudaFunctionNV(device : VkDevice, _function : VkCudaFunctionNV, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyCudaFunctionNV.Invoke(device, _function, pAllocator)
            let vkCmdCudaLaunchKernelNV(commandBuffer : VkCommandBuffer, pLaunchInfo : nativeptr<VkCudaLaunchInfoNV>) = Loader<unit>.vkCmdCudaLaunchKernelNV.Invoke(commandBuffer, pLaunchInfo)

        [<AutoOpen>]
        module ``EXTDebugReport`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type EXTDebugReport.VkDebugReportObjectTypeEXT with
                      static member inline CudaModuleNv = enum<EXTDebugReport.VkDebugReportObjectTypeEXT> 1000307000
                      static member inline CudaFunctionNv = enum<EXTDebugReport.VkDebugReportObjectTypeEXT> 1000307001


    module NVLowLatency =
        let Type = ExtensionType.Device
        let Name = "VK_NV_low_latency"
        let Number = 311

        [<StructLayout(LayoutKind.Sequential)>]
        type VkQueryLowLatencySupportNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pQueriedLowLatencyData : nativeint

                new(pNext: nativeint, pQueriedLowLatencyData: nativeint) =
                    {
                        sType = 1000310000u
                        pNext = pNext
                        pQueriedLowLatencyData = pQueriedLowLatencyData
                    }

                new(pQueriedLowLatencyData: nativeint) =
                    VkQueryLowLatencySupportNV(Unchecked.defaultof<nativeint>, pQueriedLowLatencyData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pQueriedLowLatencyData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkQueryLowLatencySupportNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pQueriedLowLatencyData = %A" x.pQueriedLowLatencyData
                    ] |> sprintf "VkQueryLowLatencySupportNV { %s }"
            end



    module EXTMetalObjects =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_metal_objects"
        let Number = 312

        type MTLDevice_id = nativeint
        type MTLCommandQueue_id = nativeint
        type MTLBuffer_id = nativeint
        type MTLTexture_id = nativeint
        type MTLSharedEvent_id = nativeint
        type IOSurfaceRef = nativeptr<nativeint>

        [<Flags>]
        type VkExportMetalObjectTypeFlagsEXT =
            | All = 63
            | None = 0
            | MetalDeviceBit = 0x00000001
            | MetalCommandQueueBit = 0x00000002
            | MetalBufferBit = 0x00000004
            | MetalTextureBit = 0x00000008
            | MetalIosurfaceBit = 0x00000010
            | MetalSharedEventBit = 0x00000020


        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportMetalBufferInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memory : VkDeviceMemory
                val mutable public mtlBuffer : nativeint

                new(pNext: nativeint, memory: VkDeviceMemory, mtlBuffer: nativeint) =
                    {
                        sType = 1000311004u
                        pNext = pNext
                        memory = memory
                        mtlBuffer = mtlBuffer
                    }

                new(memory: VkDeviceMemory, mtlBuffer: nativeint) =
                    VkExportMetalBufferInfoEXT(Unchecked.defaultof<nativeint>, memory, mtlBuffer)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.mtlBuffer = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkExportMetalBufferInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memory = %A" x.memory
                        sprintf "mtlBuffer = %A" x.mtlBuffer
                    ] |> sprintf "VkExportMetalBufferInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportMetalCommandQueueInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public queue : VkQueue
                val mutable public mtlCommandQueue : nativeint

                new(pNext: nativeint, queue: VkQueue, mtlCommandQueue: nativeint) =
                    {
                        sType = 1000311003u
                        pNext = pNext
                        queue = queue
                        mtlCommandQueue = mtlCommandQueue
                    }

                new(queue: VkQueue, mtlCommandQueue: nativeint) =
                    VkExportMetalCommandQueueInfoEXT(Unchecked.defaultof<nativeint>, queue, mtlCommandQueue)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.queue = Unchecked.defaultof<VkQueue> && x.mtlCommandQueue = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkExportMetalCommandQueueInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkQueue>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "queue = %A" x.queue
                        sprintf "mtlCommandQueue = %A" x.mtlCommandQueue
                    ] |> sprintf "VkExportMetalCommandQueueInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportMetalDeviceInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public mtlDevice : nativeint

                new(pNext: nativeint, mtlDevice: nativeint) =
                    {
                        sType = 1000311002u
                        pNext = pNext
                        mtlDevice = mtlDevice
                    }

                new(mtlDevice: nativeint) =
                    VkExportMetalDeviceInfoEXT(Unchecked.defaultof<nativeint>, mtlDevice)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.mtlDevice = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkExportMetalDeviceInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "mtlDevice = %A" x.mtlDevice
                    ] |> sprintf "VkExportMetalDeviceInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportMetalIOSurfaceInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public image : VkImage
                val mutable public ioSurface : nativeint

                new(pNext: nativeint, image: VkImage, ioSurface: nativeint) =
                    {
                        sType = 1000311008u
                        pNext = pNext
                        image = image
                        ioSurface = ioSurface
                    }

                new(image: VkImage, ioSurface: nativeint) =
                    VkExportMetalIOSurfaceInfoEXT(Unchecked.defaultof<nativeint>, image, ioSurface)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage> && x.ioSurface = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkExportMetalIOSurfaceInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "image = %A" x.image
                        sprintf "ioSurface = %A" x.ioSurface
                    ] |> sprintf "VkExportMetalIOSurfaceInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportMetalObjectCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public exportObjectType : VkExportMetalObjectTypeFlagsEXT

                new(pNext: nativeint, exportObjectType: VkExportMetalObjectTypeFlagsEXT) =
                    {
                        sType = 1000311000u
                        pNext = pNext
                        exportObjectType = exportObjectType
                    }

                new(exportObjectType: VkExportMetalObjectTypeFlagsEXT) =
                    VkExportMetalObjectCreateInfoEXT(Unchecked.defaultof<nativeint>, exportObjectType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.exportObjectType = Unchecked.defaultof<VkExportMetalObjectTypeFlagsEXT>

                static member Empty =
                    VkExportMetalObjectCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExportMetalObjectTypeFlagsEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "exportObjectType = %A" x.exportObjectType
                    ] |> sprintf "VkExportMetalObjectCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportMetalObjectsInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint

                new(pNext: nativeint) =
                    {
                        sType = 1000311001u
                        pNext = pNext
                    }

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkExportMetalObjectsInfoEXT(Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                    ] |> sprintf "VkExportMetalObjectsInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportMetalSharedEventInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public semaphore : VkSemaphore
                val mutable public event : VkEvent
                val mutable public mtlSharedEvent : nativeint

                new(pNext: nativeint, semaphore: VkSemaphore, event: VkEvent, mtlSharedEvent: nativeint) =
                    {
                        sType = 1000311010u
                        pNext = pNext
                        semaphore = semaphore
                        event = event
                        mtlSharedEvent = mtlSharedEvent
                    }

                new(semaphore: VkSemaphore, event: VkEvent, mtlSharedEvent: nativeint) =
                    VkExportMetalSharedEventInfoEXT(Unchecked.defaultof<nativeint>, semaphore, event, mtlSharedEvent)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.event = Unchecked.defaultof<VkEvent> && x.mtlSharedEvent = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkExportMetalSharedEventInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<VkEvent>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "semaphore = %A" x.semaphore
                        sprintf "event = %A" x.event
                        sprintf "mtlSharedEvent = %A" x.mtlSharedEvent
                    ] |> sprintf "VkExportMetalSharedEventInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExportMetalTextureInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public image : VkImage
                val mutable public imageView : VkImageView
                val mutable public bufferView : VkBufferView
                val mutable public plane : VkImageAspectFlags
                val mutable public mtlTexture : nativeint

                new(pNext: nativeint, image: VkImage, imageView: VkImageView, bufferView: VkBufferView, plane: VkImageAspectFlags, mtlTexture: nativeint) =
                    {
                        sType = 1000311006u
                        pNext = pNext
                        image = image
                        imageView = imageView
                        bufferView = bufferView
                        plane = plane
                        mtlTexture = mtlTexture
                    }

                new(image: VkImage, imageView: VkImageView, bufferView: VkBufferView, plane: VkImageAspectFlags, mtlTexture: nativeint) =
                    VkExportMetalTextureInfoEXT(Unchecked.defaultof<nativeint>, image, imageView, bufferView, plane, mtlTexture)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage> && x.imageView = Unchecked.defaultof<VkImageView> && x.bufferView = Unchecked.defaultof<VkBufferView> && x.plane = Unchecked.defaultof<VkImageAspectFlags> && x.mtlTexture = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkExportMetalTextureInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkBufferView>, Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "image = %A" x.image
                        sprintf "imageView = %A" x.imageView
                        sprintf "bufferView = %A" x.bufferView
                        sprintf "plane = %A" x.plane
                        sprintf "mtlTexture = %A" x.mtlTexture
                    ] |> sprintf "VkExportMetalTextureInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportMetalBufferInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public mtlBuffer : nativeint

                new(pNext: nativeint, mtlBuffer: nativeint) =
                    {
                        sType = 1000311005u
                        pNext = pNext
                        mtlBuffer = mtlBuffer
                    }

                new(mtlBuffer: nativeint) =
                    VkImportMetalBufferInfoEXT(Unchecked.defaultof<nativeint>, mtlBuffer)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.mtlBuffer = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkImportMetalBufferInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "mtlBuffer = %A" x.mtlBuffer
                    ] |> sprintf "VkImportMetalBufferInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportMetalIOSurfaceInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public ioSurface : nativeint

                new(pNext: nativeint, ioSurface: nativeint) =
                    {
                        sType = 1000311009u
                        pNext = pNext
                        ioSurface = ioSurface
                    }

                new(ioSurface: nativeint) =
                    VkImportMetalIOSurfaceInfoEXT(Unchecked.defaultof<nativeint>, ioSurface)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.ioSurface = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkImportMetalIOSurfaceInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "ioSurface = %A" x.ioSurface
                    ] |> sprintf "VkImportMetalIOSurfaceInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportMetalSharedEventInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public mtlSharedEvent : nativeint

                new(pNext: nativeint, mtlSharedEvent: nativeint) =
                    {
                        sType = 1000311011u
                        pNext = pNext
                        mtlSharedEvent = mtlSharedEvent
                    }

                new(mtlSharedEvent: nativeint) =
                    VkImportMetalSharedEventInfoEXT(Unchecked.defaultof<nativeint>, mtlSharedEvent)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.mtlSharedEvent = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkImportMetalSharedEventInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "mtlSharedEvent = %A" x.mtlSharedEvent
                    ] |> sprintf "VkImportMetalSharedEventInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportMetalTextureInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public plane : VkImageAspectFlags
                val mutable public mtlTexture : nativeint

                new(pNext: nativeint, plane: VkImageAspectFlags, mtlTexture: nativeint) =
                    {
                        sType = 1000311007u
                        pNext = pNext
                        plane = plane
                        mtlTexture = mtlTexture
                    }

                new(plane: VkImageAspectFlags, mtlTexture: nativeint) =
                    VkImportMetalTextureInfoEXT(Unchecked.defaultof<nativeint>, plane, mtlTexture)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.plane = Unchecked.defaultof<VkImageAspectFlags> && x.mtlTexture = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkImportMetalTextureInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "plane = %A" x.plane
                        sprintf "mtlTexture = %A" x.mtlTexture
                    ] |> sprintf "VkImportMetalTextureInfoEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkExportMetalObjectsEXTDel = delegate of VkDevice * nativeptr<VkExportMetalObjectsInfoEXT> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTMetalObjects")
                static let s_vkExportMetalObjectsEXTDel = VkRaw.vkImportInstanceDelegate<VkExportMetalObjectsEXTDel> "vkExportMetalObjectsEXT"
                static do Report.End(3) |> ignore
                static member vkExportMetalObjectsEXT = s_vkExportMetalObjectsEXTDel
            let vkExportMetalObjectsEXT(device : VkDevice, pMetalObjectsInfo : nativeptr<VkExportMetalObjectsInfoEXT>) = Loader<unit>.vkExportMetalObjectsEXT.Invoke(device, pMetalObjectsInfo)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module KHRSynchronization2 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_synchronization2"
        let Number = 315

        type VkFlags64 = uint64
        type VkPipelineStageFlags2KHR = Vulkan13.VkPipelineStageFlags2
        type VkAccessFlags2KHR = Vulkan13.VkAccessFlags2
        type VkSubmitFlagsKHR = Vulkan13.VkSubmitFlags

        type VkBufferMemoryBarrier2KHR = Vulkan13.VkBufferMemoryBarrier2

        type VkCommandBufferSubmitInfoKHR = Vulkan13.VkCommandBufferSubmitInfo

        type VkDependencyInfoKHR = Vulkan13.VkDependencyInfo

        type VkImageMemoryBarrier2KHR = Vulkan13.VkImageMemoryBarrier2

        type VkMemoryBarrier2KHR = Vulkan13.VkMemoryBarrier2

        type VkPhysicalDeviceSynchronization2FeaturesKHR = Vulkan13.VkPhysicalDeviceSynchronization2Features

        type VkSemaphoreSubmitInfoKHR = Vulkan13.VkSemaphoreSubmitInfo

        type VkSubmitInfo2KHR = Vulkan13.VkSubmitInfo2


        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags with
                  static member inline NoneKhr = enum<VkAccessFlags> 0
             type Vulkan13.VkAccessFlags2 with
                  static member inline Access2NoneKhr = enum<Vulkan13.VkAccessFlags2> 0
                  static member inline Access2IndirectCommandReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000001
                  static member inline Access2IndexReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000002
                  static member inline Access2VertexAttributeReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000004
                  static member inline Access2UniformReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000008
                  static member inline Access2InputAttachmentReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000010
                  static member inline Access2ShaderReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000020
                  static member inline Access2ShaderWriteBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000040
                  static member inline Access2ColorAttachmentReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000080
                  static member inline Access2ColorAttachmentWriteBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000100
                  static member inline Access2DepthStencilAttachmentReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000200
                  static member inline Access2DepthStencilAttachmentWriteBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000400
                  static member inline Access2TransferReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000800
                  static member inline Access2TransferWriteBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00001000
                  static member inline Access2HostReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00002000
                  static member inline Access2HostWriteBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00004000
                  static member inline Access2MemoryReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00008000
                  static member inline Access2MemoryWriteBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00010000
                  static member inline Access2ShaderSampledReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000001
                  static member inline Access2ShaderStorageReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000002
                  static member inline Access2ShaderStorageWriteBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000004
             type VkEventCreateFlags with
                  static member inline DeviceOnlyBitKhr = enum<VkEventCreateFlags> 0x00000001
             type VkImageLayout with
                  static member inline ReadOnlyOptimalKhr = enum<VkImageLayout> 1000314000
                  static member inline AttachmentOptimalKhr = enum<VkImageLayout> 1000314001
             type VkPipelineStageFlags with
                  static member inline NoneKhr = enum<VkPipelineStageFlags> 0
             type Vulkan13.VkPipelineStageFlags2 with
                  static member inline PipelineStage2NoneKhr = enum<Vulkan13.VkPipelineStageFlags2> 0
                  static member inline PipelineStage2TopOfPipeBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000001
                  static member inline PipelineStage2DrawIndirectBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000002
                  static member inline PipelineStage2VertexInputBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000004
                  static member inline PipelineStage2VertexShaderBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000008
                  static member inline PipelineStage2TessellationControlShaderBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000010
                  static member inline PipelineStage2TessellationEvaluationShaderBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000020
                  static member inline PipelineStage2GeometryShaderBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000040
                  static member inline PipelineStage2FragmentShaderBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000080
                  static member inline PipelineStage2EarlyFragmentTestsBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000100
                  static member inline PipelineStage2LateFragmentTestsBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000200
                  static member inline PipelineStage2ColorAttachmentOutputBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000400
                  static member inline PipelineStage2ComputeShaderBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000800
                  static member inline PipelineStage2AllTransferBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00001000
                  static member inline PipelineStage2TransferBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00001000
                  static member inline PipelineStage2BottomOfPipeBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00002000
                  static member inline PipelineStage2HostBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00004000
                  static member inline PipelineStage2AllGraphicsBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00008000
                  static member inline PipelineStage2AllCommandsBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00010000
                  static member inline PipelineStage2CopyBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000001
                  static member inline PipelineStage2ResolveBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000002
                  static member inline PipelineStage2BlitBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000004
                  static member inline PipelineStage2ClearBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000008
                  static member inline PipelineStage2IndexInputBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000010
                  static member inline PipelineStage2VertexAttributeInputBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000020
                  static member inline PipelineStage2PreRasterizationShadersBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00000040
             type Vulkan13.VkSubmitFlags with
                  static member inline ProtectedBitKhr = enum<Vulkan13.VkSubmitFlags> 0x00000001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetEvent2KHRDel = delegate of VkCommandBuffer * VkEvent * nativeptr<Vulkan13.VkDependencyInfo> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdResetEvent2KHRDel = delegate of VkCommandBuffer * VkEvent * Vulkan13.VkPipelineStageFlags2 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdWaitEvents2KHRDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkEvent> * nativeptr<Vulkan13.VkDependencyInfo> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdPipelineBarrier2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan13.VkDependencyInfo> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdWriteTimestamp2KHRDel = delegate of VkCommandBuffer * Vulkan13.VkPipelineStageFlags2 * VkQueryPool * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkQueueSubmit2KHRDel = delegate of VkQueue * uint32 * nativeptr<Vulkan13.VkSubmitInfo2> * VkFence -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRSynchronization2")
                static let s_vkCmdSetEvent2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdSetEvent2KHRDel> "vkCmdSetEvent2KHR"
                static let s_vkCmdResetEvent2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdResetEvent2KHRDel> "vkCmdResetEvent2KHR"
                static let s_vkCmdWaitEvents2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdWaitEvents2KHRDel> "vkCmdWaitEvents2KHR"
                static let s_vkCmdPipelineBarrier2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdPipelineBarrier2KHRDel> "vkCmdPipelineBarrier2KHR"
                static let s_vkCmdWriteTimestamp2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdWriteTimestamp2KHRDel> "vkCmdWriteTimestamp2KHR"
                static let s_vkQueueSubmit2KHRDel = VkRaw.vkImportInstanceDelegate<VkQueueSubmit2KHRDel> "vkQueueSubmit2KHR"
                static do Report.End(3) |> ignore
                static member vkCmdSetEvent2KHR = s_vkCmdSetEvent2KHRDel
                static member vkCmdResetEvent2KHR = s_vkCmdResetEvent2KHRDel
                static member vkCmdWaitEvents2KHR = s_vkCmdWaitEvents2KHRDel
                static member vkCmdPipelineBarrier2KHR = s_vkCmdPipelineBarrier2KHRDel
                static member vkCmdWriteTimestamp2KHR = s_vkCmdWriteTimestamp2KHRDel
                static member vkQueueSubmit2KHR = s_vkQueueSubmit2KHRDel
            let vkCmdSetEvent2KHR(commandBuffer : VkCommandBuffer, event : VkEvent, pDependencyInfo : nativeptr<Vulkan13.VkDependencyInfo>) = Loader<unit>.vkCmdSetEvent2KHR.Invoke(commandBuffer, event, pDependencyInfo)
            let vkCmdResetEvent2KHR(commandBuffer : VkCommandBuffer, event : VkEvent, stageMask : Vulkan13.VkPipelineStageFlags2) = Loader<unit>.vkCmdResetEvent2KHR.Invoke(commandBuffer, event, stageMask)
            let vkCmdWaitEvents2KHR(commandBuffer : VkCommandBuffer, eventCount : uint32, pEvents : nativeptr<VkEvent>, pDependencyInfos : nativeptr<Vulkan13.VkDependencyInfo>) = Loader<unit>.vkCmdWaitEvents2KHR.Invoke(commandBuffer, eventCount, pEvents, pDependencyInfos)
            let vkCmdPipelineBarrier2KHR(commandBuffer : VkCommandBuffer, pDependencyInfo : nativeptr<Vulkan13.VkDependencyInfo>) = Loader<unit>.vkCmdPipelineBarrier2KHR.Invoke(commandBuffer, pDependencyInfo)
            let vkCmdWriteTimestamp2KHR(commandBuffer : VkCommandBuffer, stage : Vulkan13.VkPipelineStageFlags2, queryPool : VkQueryPool, query : uint32) = Loader<unit>.vkCmdWriteTimestamp2KHR.Invoke(commandBuffer, stage, queryPool, query)
            let vkQueueSubmit2KHR(queue : VkQueue, submitCount : uint32, pSubmits : nativeptr<Vulkan13.VkSubmitInfo2>, fence : VkFence) = Loader<unit>.vkQueueSubmit2KHR.Invoke(queue, submitCount, pSubmits, fence)

        [<AutoOpen>]
        module ``EXTTransformFeedback`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkAccessFlags2 with
                      static member inline Access2TransformFeedbackWriteBitExt = enum<Vulkan13.VkAccessFlags2> 0x02000000
                      static member inline Access2TransformFeedbackCounterReadBitExt = enum<Vulkan13.VkAccessFlags2> 0x04000000
                      static member inline Access2TransformFeedbackCounterWriteBitExt = enum<Vulkan13.VkAccessFlags2> 0x08000000
                 type Vulkan13.VkPipelineStageFlags2 with
                      static member inline PipelineStage2TransformFeedbackBitExt = enum<Vulkan13.VkPipelineStageFlags2> 0x01000000


        [<AutoOpen>]
        module ``EXTConditionalRendering`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkAccessFlags2 with
                      /// read access flag for reading conditional rendering predicate
                      static member inline Access2ConditionalRenderingReadBitExt = enum<Vulkan13.VkAccessFlags2> 0x00100000
                 type Vulkan13.VkPipelineStageFlags2 with
                      /// A pipeline stage for conditional rendering predicate fetch
                      static member inline PipelineStage2ConditionalRenderingBitExt = enum<Vulkan13.VkPipelineStageFlags2> 0x00040000


        [<AutoOpen>]
        module ``NVDeviceGeneratedCommands`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkAccessFlags2 with
                      static member inline Access2CommandPreprocessReadBitNv = enum<Vulkan13.VkAccessFlags2> 0x00020000
                      static member inline Access2CommandPreprocessWriteBitNv = enum<Vulkan13.VkAccessFlags2> 0x00040000
                 type Vulkan13.VkPipelineStageFlags2 with
                      static member inline PipelineStage2CommandPreprocessBitNv = enum<Vulkan13.VkPipelineStageFlags2> 0x00020000


        [<AutoOpen>]
        module ``EXTDeviceGeneratedCommands`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkAccessFlags2 with
                      static member inline Access2CommandPreprocessReadBitExt = enum<Vulkan13.VkAccessFlags2> 0x00020000
                      static member inline Access2CommandPreprocessWriteBitExt = enum<Vulkan13.VkAccessFlags2> 0x00040000
                 type Vulkan13.VkPipelineStageFlags2 with
                      static member inline PipelineStage2CommandPreprocessBitExt = enum<Vulkan13.VkPipelineStageFlags2> 0x00020000


        [<AutoOpen>]
        module ``KHRFragmentShadingRate`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkAccessFlags2 with
                      static member inline Access2FragmentShadingRateAttachmentReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00800000
                 type Vulkan13.VkPipelineStageFlags2 with
                      static member inline PipelineStage2FragmentShadingRateAttachmentBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00400000


        [<AutoOpen>]
        module ``NVShadingRateImage`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkAccessFlags2 with
                      static member inline Access2ShadingRateImageReadBitNv = enum<Vulkan13.VkAccessFlags2> 0x00800000
                 type Vulkan13.VkPipelineStageFlags2 with
                      static member inline PipelineStage2ShadingRateImageBitNv = enum<Vulkan13.VkPipelineStageFlags2> 0x00400000


        [<AutoOpen>]
        module ``KHRAccelerationStructure`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkAccessFlags2 with
                      static member inline Access2AccelerationStructureReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00200000
                      static member inline Access2AccelerationStructureWriteBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00400000
                 type Vulkan13.VkPipelineStageFlags2 with
                      static member inline PipelineStage2AccelerationStructureBuildBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x02000000


        [<AutoOpen>]
        module ``KHRRayTracingPipeline`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkPipelineStageFlags2 with
                      static member inline PipelineStage2RayTracingShaderBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x00200000


        [<AutoOpen>]
        module ``NVRayTracing`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkAccessFlags2 with
                      static member inline Access2AccelerationStructureReadBitNv = enum<Vulkan13.VkAccessFlags2> 0x00200000
                      static member inline Access2AccelerationStructureWriteBitNv = enum<Vulkan13.VkAccessFlags2> 0x00400000
                 type Vulkan13.VkPipelineStageFlags2 with
                      static member inline PipelineStage2RayTracingShaderBitNv = enum<Vulkan13.VkPipelineStageFlags2> 0x00200000
                      static member inline PipelineStage2AccelerationStructureBuildBitNv = enum<Vulkan13.VkPipelineStageFlags2> 0x02000000


        [<AutoOpen>]
        module ``EXTFragmentDensityMap`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkAccessFlags2 with
                      static member inline Access2FragmentDensityMapReadBitExt = enum<Vulkan13.VkAccessFlags2> 0x01000000
                 type Vulkan13.VkPipelineStageFlags2 with
                      static member inline PipelineStage2FragmentDensityProcessBitExt = enum<Vulkan13.VkPipelineStageFlags2> 0x00800000


        [<AutoOpen>]
        module ``EXTBlendOperationAdvanced`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkAccessFlags2 with
                      static member inline Access2ColorAttachmentReadNoncoherentBitExt = enum<Vulkan13.VkAccessFlags2> 0x00080000


        [<AutoOpen>]
        module ``NVMeshShader`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkPipelineStageFlags2 with
                      static member inline PipelineStage2TaskShaderBitNv = enum<Vulkan13.VkPipelineStageFlags2> 0x00080000
                      static member inline PipelineStage2MeshShaderBitNv = enum<Vulkan13.VkPipelineStageFlags2> 0x00100000


        [<AutoOpen>]
        module ``EXTMeshShader`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkPipelineStageFlags2 with
                      static member inline PipelineStage2TaskShaderBitExt = enum<Vulkan13.VkPipelineStageFlags2> 0x00080000
                      static member inline PipelineStage2MeshShaderBitExt = enum<Vulkan13.VkPipelineStageFlags2> 0x00100000


    /// Requires ((((KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRBufferDeviceAddress, EXTDescriptorIndexing) | Vulkan12), KHRSynchronization2) | Vulkan13.
    module EXTDescriptorBuffer =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_descriptor_buffer"
        let Number = 317

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBufferCaptureDescriptorDataInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public buffer : VkBuffer

                new(pNext: nativeint, buffer: VkBuffer) =
                    {
                        sType = 1000316005u
                        pNext = pNext
                        buffer = buffer
                    }

                new(buffer: VkBuffer) =
                    VkBufferCaptureDescriptorDataInfoEXT(Unchecked.defaultof<nativeint>, buffer)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<VkBuffer>

                static member Empty =
                    VkBufferCaptureDescriptorDataInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "buffer = %A" x.buffer
                    ] |> sprintf "VkBufferCaptureDescriptorDataInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDescriptorAddressInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public address : VkDeviceAddress
                val mutable public range : VkDeviceSize
                val mutable public format : VkFormat

                new(pNext: nativeint, address: VkDeviceAddress, range: VkDeviceSize, format: VkFormat) =
                    {
                        sType = 1000316003u
                        pNext = pNext
                        address = address
                        range = range
                        format = format
                    }

                new(address: VkDeviceAddress, range: VkDeviceSize, format: VkFormat) =
                    VkDescriptorAddressInfoEXT(Unchecked.defaultof<nativeint>, address, range, format)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.address = Unchecked.defaultof<VkDeviceAddress> && x.range = Unchecked.defaultof<VkDeviceSize> && x.format = Unchecked.defaultof<VkFormat>

                static member Empty =
                    VkDescriptorAddressInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkFormat>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "address = %A" x.address
                        sprintf "range = %A" x.range
                        sprintf "format = %A" x.format
                    ] |> sprintf "VkDescriptorAddressInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDescriptorBufferBindingInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public address : VkDeviceAddress
                val mutable public usage : VkBufferUsageFlags

                new(pNext: nativeint, address: VkDeviceAddress, usage: VkBufferUsageFlags) =
                    {
                        sType = 1000316011u
                        pNext = pNext
                        address = address
                        usage = usage
                    }

                new(address: VkDeviceAddress, usage: VkBufferUsageFlags) =
                    VkDescriptorBufferBindingInfoEXT(Unchecked.defaultof<nativeint>, address, usage)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.address = Unchecked.defaultof<VkDeviceAddress> && x.usage = Unchecked.defaultof<VkBufferUsageFlags>

                static member Empty =
                    VkDescriptorBufferBindingInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkBufferUsageFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "address = %A" x.address
                        sprintf "usage = %A" x.usage
                    ] |> sprintf "VkDescriptorBufferBindingInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDescriptorBufferBindingPushDescriptorBufferHandleEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public buffer : VkBuffer

                new(pNext: nativeint, buffer: VkBuffer) =
                    {
                        sType = 1000316012u
                        pNext = pNext
                        buffer = buffer
                    }

                new(buffer: VkBuffer) =
                    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(Unchecked.defaultof<nativeint>, buffer)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<VkBuffer>

                static member Empty =
                    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "buffer = %A" x.buffer
                    ] |> sprintf "VkDescriptorBufferBindingPushDescriptorBufferHandleEXT { %s }"
            end

        [<StructLayout(LayoutKind.Explicit)>]
        type VkDescriptorDataEXT =
            struct
                [<FieldOffset(0)>]
                val mutable public pSampler : nativeptr<VkSampler>
                [<FieldOffset(0)>]
                val mutable public pCombinedImageSampler : nativeptr<VkDescriptorImageInfo>
                [<FieldOffset(0)>]
                val mutable public pInputAttachmentImage : nativeptr<VkDescriptorImageInfo>
                [<FieldOffset(0)>]
                val mutable public pSampledImage : nativeptr<VkDescriptorImageInfo>
                [<FieldOffset(0)>]
                val mutable public pStorageImage : nativeptr<VkDescriptorImageInfo>
                [<FieldOffset(0)>]
                val mutable public pUniformTexelBuffer : nativeptr<VkDescriptorAddressInfoEXT>
                [<FieldOffset(0)>]
                val mutable public pStorageTexelBuffer : nativeptr<VkDescriptorAddressInfoEXT>
                [<FieldOffset(0)>]
                val mutable public pUniformBuffer : nativeptr<VkDescriptorAddressInfoEXT>
                [<FieldOffset(0)>]
                val mutable public pStorageBuffer : nativeptr<VkDescriptorAddressInfoEXT>
                [<FieldOffset(0)>]
                val mutable public accelerationStructure : VkDeviceAddress

                static member PSampler(value: nativeptr<VkSampler>) =
                    let mutable result = Unchecked.defaultof<VkDescriptorDataEXT>
                    result.pSampler <- value
                    result

                static member PCombinedImageSampler(value: nativeptr<VkDescriptorImageInfo>) =
                    let mutable result = Unchecked.defaultof<VkDescriptorDataEXT>
                    result.pCombinedImageSampler <- value
                    result

                static member PInputAttachmentImage(value: nativeptr<VkDescriptorImageInfo>) =
                    let mutable result = Unchecked.defaultof<VkDescriptorDataEXT>
                    result.pInputAttachmentImage <- value
                    result

                static member PSampledImage(value: nativeptr<VkDescriptorImageInfo>) =
                    let mutable result = Unchecked.defaultof<VkDescriptorDataEXT>
                    result.pSampledImage <- value
                    result

                static member PStorageImage(value: nativeptr<VkDescriptorImageInfo>) =
                    let mutable result = Unchecked.defaultof<VkDescriptorDataEXT>
                    result.pStorageImage <- value
                    result

                static member PUniformTexelBuffer(value: nativeptr<VkDescriptorAddressInfoEXT>) =
                    let mutable result = Unchecked.defaultof<VkDescriptorDataEXT>
                    result.pUniformTexelBuffer <- value
                    result

                static member PStorageTexelBuffer(value: nativeptr<VkDescriptorAddressInfoEXT>) =
                    let mutable result = Unchecked.defaultof<VkDescriptorDataEXT>
                    result.pStorageTexelBuffer <- value
                    result

                static member PUniformBuffer(value: nativeptr<VkDescriptorAddressInfoEXT>) =
                    let mutable result = Unchecked.defaultof<VkDescriptorDataEXT>
                    result.pUniformBuffer <- value
                    result

                static member PStorageBuffer(value: nativeptr<VkDescriptorAddressInfoEXT>) =
                    let mutable result = Unchecked.defaultof<VkDescriptorDataEXT>
                    result.pStorageBuffer <- value
                    result

                static member AccelerationStructure(value: VkDeviceAddress) =
                    let mutable result = Unchecked.defaultof<VkDescriptorDataEXT>
                    result.accelerationStructure <- value
                    result

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pSampler = %A" x.pSampler
                        sprintf "pCombinedImageSampler = %A" x.pCombinedImageSampler
                        sprintf "pInputAttachmentImage = %A" x.pInputAttachmentImage
                        sprintf "pSampledImage = %A" x.pSampledImage
                        sprintf "pStorageImage = %A" x.pStorageImage
                        sprintf "pUniformTexelBuffer = %A" x.pUniformTexelBuffer
                        sprintf "pStorageTexelBuffer = %A" x.pStorageTexelBuffer
                        sprintf "pUniformBuffer = %A" x.pUniformBuffer
                        sprintf "pStorageBuffer = %A" x.pStorageBuffer
                        sprintf "accelerationStructure = %A" x.accelerationStructure
                    ] |> sprintf "VkDescriptorDataEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDescriptorGetInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _type : VkDescriptorType
                val mutable public data : VkDescriptorDataEXT

                new(pNext: nativeint, _type: VkDescriptorType, data: VkDescriptorDataEXT) =
                    {
                        sType = 1000316004u
                        pNext = pNext
                        _type = _type
                        data = data
                    }

                new(_type: VkDescriptorType, data: VkDescriptorDataEXT) =
                    VkDescriptorGetInfoEXT(Unchecked.defaultof<nativeint>, _type, data)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkDescriptorType> && x.data = Unchecked.defaultof<VkDescriptorDataEXT>

                static member Empty =
                    VkDescriptorGetInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorType>, Unchecked.defaultof<VkDescriptorDataEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_type = %A" x._type
                        sprintf "data = %A" x.data
                    ] |> sprintf "VkDescriptorGetInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageCaptureDescriptorDataInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public image : VkImage

                new(pNext: nativeint, image: VkImage) =
                    {
                        sType = 1000316006u
                        pNext = pNext
                        image = image
                    }

                new(image: VkImage) =
                    VkImageCaptureDescriptorDataInfoEXT(Unchecked.defaultof<nativeint>, image)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage>

                static member Empty =
                    VkImageCaptureDescriptorDataInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "image = %A" x.image
                    ] |> sprintf "VkImageCaptureDescriptorDataInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageViewCaptureDescriptorDataInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageView : VkImageView

                new(pNext: nativeint, imageView: VkImageView) =
                    {
                        sType = 1000316007u
                        pNext = pNext
                        imageView = imageView
                    }

                new(imageView: VkImageView) =
                    VkImageViewCaptureDescriptorDataInfoEXT(Unchecked.defaultof<nativeint>, imageView)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageView = Unchecked.defaultof<VkImageView>

                static member Empty =
                    VkImageViewCaptureDescriptorDataInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageView>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageView = %A" x.imageView
                    ] |> sprintf "VkImageViewCaptureDescriptorDataInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkOpaqueCaptureDescriptorDataCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public opaqueCaptureDescriptorData : nativeint

                new(pNext: nativeint, opaqueCaptureDescriptorData: nativeint) =
                    {
                        sType = 1000316010u
                        pNext = pNext
                        opaqueCaptureDescriptorData = opaqueCaptureDescriptorData
                    }

                new(opaqueCaptureDescriptorData: nativeint) =
                    VkOpaqueCaptureDescriptorDataCreateInfoEXT(Unchecked.defaultof<nativeint>, opaqueCaptureDescriptorData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.opaqueCaptureDescriptorData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkOpaqueCaptureDescriptorDataCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "opaqueCaptureDescriptorData = %A" x.opaqueCaptureDescriptorData
                    ] |> sprintf "VkOpaqueCaptureDescriptorDataCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public combinedImageSamplerDensityMapDescriptorSize : uint64

                new(pNext: nativeint, combinedImageSamplerDensityMapDescriptorSize: uint64) =
                    {
                        sType = 1000316001u
                        pNext = pNext
                        combinedImageSamplerDensityMapDescriptorSize = combinedImageSamplerDensityMapDescriptorSize
                    }

                new(combinedImageSamplerDensityMapDescriptorSize: uint64) =
                    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(Unchecked.defaultof<nativeint>, combinedImageSamplerDensityMapDescriptorSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.combinedImageSamplerDensityMapDescriptorSize = Unchecked.defaultof<uint64>

                static member Empty =
                    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "combinedImageSamplerDensityMapDescriptorSize = %A" x.combinedImageSamplerDensityMapDescriptorSize
                    ] |> sprintf "VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDescriptorBufferFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public descriptorBuffer : VkBool32
                val mutable public descriptorBufferCaptureReplay : VkBool32
                val mutable public descriptorBufferImageLayoutIgnored : VkBool32
                val mutable public descriptorBufferPushDescriptors : VkBool32

                new(pNext: nativeint, descriptorBuffer: VkBool32, descriptorBufferCaptureReplay: VkBool32, descriptorBufferImageLayoutIgnored: VkBool32, descriptorBufferPushDescriptors: VkBool32) =
                    {
                        sType = 1000316002u
                        pNext = pNext
                        descriptorBuffer = descriptorBuffer
                        descriptorBufferCaptureReplay = descriptorBufferCaptureReplay
                        descriptorBufferImageLayoutIgnored = descriptorBufferImageLayoutIgnored
                        descriptorBufferPushDescriptors = descriptorBufferPushDescriptors
                    }

                new(descriptorBuffer: VkBool32, descriptorBufferCaptureReplay: VkBool32, descriptorBufferImageLayoutIgnored: VkBool32, descriptorBufferPushDescriptors: VkBool32) =
                    VkPhysicalDeviceDescriptorBufferFeaturesEXT(Unchecked.defaultof<nativeint>, descriptorBuffer, descriptorBufferCaptureReplay, descriptorBufferImageLayoutIgnored, descriptorBufferPushDescriptors)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.descriptorBuffer = Unchecked.defaultof<VkBool32> && x.descriptorBufferCaptureReplay = Unchecked.defaultof<VkBool32> && x.descriptorBufferImageLayoutIgnored = Unchecked.defaultof<VkBool32> && x.descriptorBufferPushDescriptors = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDescriptorBufferFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "descriptorBuffer = %A" x.descriptorBuffer
                        sprintf "descriptorBufferCaptureReplay = %A" x.descriptorBufferCaptureReplay
                        sprintf "descriptorBufferImageLayoutIgnored = %A" x.descriptorBufferImageLayoutIgnored
                        sprintf "descriptorBufferPushDescriptors = %A" x.descriptorBufferPushDescriptors
                    ] |> sprintf "VkPhysicalDeviceDescriptorBufferFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDescriptorBufferPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public combinedImageSamplerDescriptorSingleArray : VkBool32
                val mutable public bufferlessPushDescriptors : VkBool32
                val mutable public allowSamplerImageViewPostSubmitCreation : VkBool32
                val mutable public descriptorBufferOffsetAlignment : VkDeviceSize
                val mutable public maxDescriptorBufferBindings : uint32
                val mutable public maxResourceDescriptorBufferBindings : uint32
                val mutable public maxSamplerDescriptorBufferBindings : uint32
                val mutable public maxEmbeddedImmutableSamplerBindings : uint32
                val mutable public maxEmbeddedImmutableSamplers : uint32
                val mutable public bufferCaptureReplayDescriptorDataSize : uint64
                val mutable public imageCaptureReplayDescriptorDataSize : uint64
                val mutable public imageViewCaptureReplayDescriptorDataSize : uint64
                val mutable public samplerCaptureReplayDescriptorDataSize : uint64
                val mutable public accelerationStructureCaptureReplayDescriptorDataSize : uint64
                val mutable public samplerDescriptorSize : uint64
                val mutable public combinedImageSamplerDescriptorSize : uint64
                val mutable public sampledImageDescriptorSize : uint64
                val mutable public storageImageDescriptorSize : uint64
                val mutable public uniformTexelBufferDescriptorSize : uint64
                val mutable public robustUniformTexelBufferDescriptorSize : uint64
                val mutable public storageTexelBufferDescriptorSize : uint64
                val mutable public robustStorageTexelBufferDescriptorSize : uint64
                val mutable public uniformBufferDescriptorSize : uint64
                val mutable public robustUniformBufferDescriptorSize : uint64
                val mutable public storageBufferDescriptorSize : uint64
                val mutable public robustStorageBufferDescriptorSize : uint64
                val mutable public inputAttachmentDescriptorSize : uint64
                val mutable public accelerationStructureDescriptorSize : uint64
                val mutable public maxSamplerDescriptorBufferRange : VkDeviceSize
                val mutable public maxResourceDescriptorBufferRange : VkDeviceSize
                val mutable public samplerDescriptorBufferAddressSpaceSize : VkDeviceSize
                val mutable public resourceDescriptorBufferAddressSpaceSize : VkDeviceSize
                val mutable public descriptorBufferAddressSpaceSize : VkDeviceSize

                new(pNext: nativeint, combinedImageSamplerDescriptorSingleArray: VkBool32, bufferlessPushDescriptors: VkBool32, allowSamplerImageViewPostSubmitCreation: VkBool32, descriptorBufferOffsetAlignment: VkDeviceSize, maxDescriptorBufferBindings: uint32, maxResourceDescriptorBufferBindings: uint32, maxSamplerDescriptorBufferBindings: uint32, maxEmbeddedImmutableSamplerBindings: uint32, maxEmbeddedImmutableSamplers: uint32, bufferCaptureReplayDescriptorDataSize: uint64, imageCaptureReplayDescriptorDataSize: uint64, imageViewCaptureReplayDescriptorDataSize: uint64, samplerCaptureReplayDescriptorDataSize: uint64, accelerationStructureCaptureReplayDescriptorDataSize: uint64, samplerDescriptorSize: uint64, combinedImageSamplerDescriptorSize: uint64, sampledImageDescriptorSize: uint64, storageImageDescriptorSize: uint64, uniformTexelBufferDescriptorSize: uint64, robustUniformTexelBufferDescriptorSize: uint64, storageTexelBufferDescriptorSize: uint64, robustStorageTexelBufferDescriptorSize: uint64, uniformBufferDescriptorSize: uint64, robustUniformBufferDescriptorSize: uint64, storageBufferDescriptorSize: uint64, robustStorageBufferDescriptorSize: uint64, inputAttachmentDescriptorSize: uint64, accelerationStructureDescriptorSize: uint64, maxSamplerDescriptorBufferRange: VkDeviceSize, maxResourceDescriptorBufferRange: VkDeviceSize, samplerDescriptorBufferAddressSpaceSize: VkDeviceSize, resourceDescriptorBufferAddressSpaceSize: VkDeviceSize, descriptorBufferAddressSpaceSize: VkDeviceSize) =
                    {
                        sType = 1000316000u
                        pNext = pNext
                        combinedImageSamplerDescriptorSingleArray = combinedImageSamplerDescriptorSingleArray
                        bufferlessPushDescriptors = bufferlessPushDescriptors
                        allowSamplerImageViewPostSubmitCreation = allowSamplerImageViewPostSubmitCreation
                        descriptorBufferOffsetAlignment = descriptorBufferOffsetAlignment
                        maxDescriptorBufferBindings = maxDescriptorBufferBindings
                        maxResourceDescriptorBufferBindings = maxResourceDescriptorBufferBindings
                        maxSamplerDescriptorBufferBindings = maxSamplerDescriptorBufferBindings
                        maxEmbeddedImmutableSamplerBindings = maxEmbeddedImmutableSamplerBindings
                        maxEmbeddedImmutableSamplers = maxEmbeddedImmutableSamplers
                        bufferCaptureReplayDescriptorDataSize = bufferCaptureReplayDescriptorDataSize
                        imageCaptureReplayDescriptorDataSize = imageCaptureReplayDescriptorDataSize
                        imageViewCaptureReplayDescriptorDataSize = imageViewCaptureReplayDescriptorDataSize
                        samplerCaptureReplayDescriptorDataSize = samplerCaptureReplayDescriptorDataSize
                        accelerationStructureCaptureReplayDescriptorDataSize = accelerationStructureCaptureReplayDescriptorDataSize
                        samplerDescriptorSize = samplerDescriptorSize
                        combinedImageSamplerDescriptorSize = combinedImageSamplerDescriptorSize
                        sampledImageDescriptorSize = sampledImageDescriptorSize
                        storageImageDescriptorSize = storageImageDescriptorSize
                        uniformTexelBufferDescriptorSize = uniformTexelBufferDescriptorSize
                        robustUniformTexelBufferDescriptorSize = robustUniformTexelBufferDescriptorSize
                        storageTexelBufferDescriptorSize = storageTexelBufferDescriptorSize
                        robustStorageTexelBufferDescriptorSize = robustStorageTexelBufferDescriptorSize
                        uniformBufferDescriptorSize = uniformBufferDescriptorSize
                        robustUniformBufferDescriptorSize = robustUniformBufferDescriptorSize
                        storageBufferDescriptorSize = storageBufferDescriptorSize
                        robustStorageBufferDescriptorSize = robustStorageBufferDescriptorSize
                        inputAttachmentDescriptorSize = inputAttachmentDescriptorSize
                        accelerationStructureDescriptorSize = accelerationStructureDescriptorSize
                        maxSamplerDescriptorBufferRange = maxSamplerDescriptorBufferRange
                        maxResourceDescriptorBufferRange = maxResourceDescriptorBufferRange
                        samplerDescriptorBufferAddressSpaceSize = samplerDescriptorBufferAddressSpaceSize
                        resourceDescriptorBufferAddressSpaceSize = resourceDescriptorBufferAddressSpaceSize
                        descriptorBufferAddressSpaceSize = descriptorBufferAddressSpaceSize
                    }

                new(combinedImageSamplerDescriptorSingleArray: VkBool32, bufferlessPushDescriptors: VkBool32, allowSamplerImageViewPostSubmitCreation: VkBool32, descriptorBufferOffsetAlignment: VkDeviceSize, maxDescriptorBufferBindings: uint32, maxResourceDescriptorBufferBindings: uint32, maxSamplerDescriptorBufferBindings: uint32, maxEmbeddedImmutableSamplerBindings: uint32, maxEmbeddedImmutableSamplers: uint32, bufferCaptureReplayDescriptorDataSize: uint64, imageCaptureReplayDescriptorDataSize: uint64, imageViewCaptureReplayDescriptorDataSize: uint64, samplerCaptureReplayDescriptorDataSize: uint64, accelerationStructureCaptureReplayDescriptorDataSize: uint64, samplerDescriptorSize: uint64, combinedImageSamplerDescriptorSize: uint64, sampledImageDescriptorSize: uint64, storageImageDescriptorSize: uint64, uniformTexelBufferDescriptorSize: uint64, robustUniformTexelBufferDescriptorSize: uint64, storageTexelBufferDescriptorSize: uint64, robustStorageTexelBufferDescriptorSize: uint64, uniformBufferDescriptorSize: uint64, robustUniformBufferDescriptorSize: uint64, storageBufferDescriptorSize: uint64, robustStorageBufferDescriptorSize: uint64, inputAttachmentDescriptorSize: uint64, accelerationStructureDescriptorSize: uint64, maxSamplerDescriptorBufferRange: VkDeviceSize, maxResourceDescriptorBufferRange: VkDeviceSize, samplerDescriptorBufferAddressSpaceSize: VkDeviceSize, resourceDescriptorBufferAddressSpaceSize: VkDeviceSize, descriptorBufferAddressSpaceSize: VkDeviceSize) =
                    VkPhysicalDeviceDescriptorBufferPropertiesEXT(Unchecked.defaultof<nativeint>, combinedImageSamplerDescriptorSingleArray, bufferlessPushDescriptors, allowSamplerImageViewPostSubmitCreation, descriptorBufferOffsetAlignment, maxDescriptorBufferBindings, maxResourceDescriptorBufferBindings, maxSamplerDescriptorBufferBindings, maxEmbeddedImmutableSamplerBindings, maxEmbeddedImmutableSamplers, bufferCaptureReplayDescriptorDataSize, imageCaptureReplayDescriptorDataSize, imageViewCaptureReplayDescriptorDataSize, samplerCaptureReplayDescriptorDataSize, accelerationStructureCaptureReplayDescriptorDataSize, samplerDescriptorSize, combinedImageSamplerDescriptorSize, sampledImageDescriptorSize, storageImageDescriptorSize, uniformTexelBufferDescriptorSize, robustUniformTexelBufferDescriptorSize, storageTexelBufferDescriptorSize, robustStorageTexelBufferDescriptorSize, uniformBufferDescriptorSize, robustUniformBufferDescriptorSize, storageBufferDescriptorSize, robustStorageBufferDescriptorSize, inputAttachmentDescriptorSize, accelerationStructureDescriptorSize, maxSamplerDescriptorBufferRange, maxResourceDescriptorBufferRange, samplerDescriptorBufferAddressSpaceSize, resourceDescriptorBufferAddressSpaceSize, descriptorBufferAddressSpaceSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.combinedImageSamplerDescriptorSingleArray = Unchecked.defaultof<VkBool32> && x.bufferlessPushDescriptors = Unchecked.defaultof<VkBool32> && x.allowSamplerImageViewPostSubmitCreation = Unchecked.defaultof<VkBool32> && x.descriptorBufferOffsetAlignment = Unchecked.defaultof<VkDeviceSize> && x.maxDescriptorBufferBindings = Unchecked.defaultof<uint32> && x.maxResourceDescriptorBufferBindings = Unchecked.defaultof<uint32> && x.maxSamplerDescriptorBufferBindings = Unchecked.defaultof<uint32> && x.maxEmbeddedImmutableSamplerBindings = Unchecked.defaultof<uint32> && x.maxEmbeddedImmutableSamplers = Unchecked.defaultof<uint32> && x.bufferCaptureReplayDescriptorDataSize = Unchecked.defaultof<uint64> && x.imageCaptureReplayDescriptorDataSize = Unchecked.defaultof<uint64> && x.imageViewCaptureReplayDescriptorDataSize = Unchecked.defaultof<uint64> && x.samplerCaptureReplayDescriptorDataSize = Unchecked.defaultof<uint64> && x.accelerationStructureCaptureReplayDescriptorDataSize = Unchecked.defaultof<uint64> && x.samplerDescriptorSize = Unchecked.defaultof<uint64> && x.combinedImageSamplerDescriptorSize = Unchecked.defaultof<uint64> && x.sampledImageDescriptorSize = Unchecked.defaultof<uint64> && x.storageImageDescriptorSize = Unchecked.defaultof<uint64> && x.uniformTexelBufferDescriptorSize = Unchecked.defaultof<uint64> && x.robustUniformTexelBufferDescriptorSize = Unchecked.defaultof<uint64> && x.storageTexelBufferDescriptorSize = Unchecked.defaultof<uint64> && x.robustStorageTexelBufferDescriptorSize = Unchecked.defaultof<uint64> && x.uniformBufferDescriptorSize = Unchecked.defaultof<uint64> && x.robustUniformBufferDescriptorSize = Unchecked.defaultof<uint64> && x.storageBufferDescriptorSize = Unchecked.defaultof<uint64> && x.robustStorageBufferDescriptorSize = Unchecked.defaultof<uint64> && x.inputAttachmentDescriptorSize = Unchecked.defaultof<uint64> && x.accelerationStructureDescriptorSize = Unchecked.defaultof<uint64> && x.maxSamplerDescriptorBufferRange = Unchecked.defaultof<VkDeviceSize> && x.maxResourceDescriptorBufferRange = Unchecked.defaultof<VkDeviceSize> && x.samplerDescriptorBufferAddressSpaceSize = Unchecked.defaultof<VkDeviceSize> && x.resourceDescriptorBufferAddressSpaceSize = Unchecked.defaultof<VkDeviceSize> && x.descriptorBufferAddressSpaceSize = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkPhysicalDeviceDescriptorBufferPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "combinedImageSamplerDescriptorSingleArray = %A" x.combinedImageSamplerDescriptorSingleArray
                        sprintf "bufferlessPushDescriptors = %A" x.bufferlessPushDescriptors
                        sprintf "allowSamplerImageViewPostSubmitCreation = %A" x.allowSamplerImageViewPostSubmitCreation
                        sprintf "descriptorBufferOffsetAlignment = %A" x.descriptorBufferOffsetAlignment
                        sprintf "maxDescriptorBufferBindings = %A" x.maxDescriptorBufferBindings
                        sprintf "maxResourceDescriptorBufferBindings = %A" x.maxResourceDescriptorBufferBindings
                        sprintf "maxSamplerDescriptorBufferBindings = %A" x.maxSamplerDescriptorBufferBindings
                        sprintf "maxEmbeddedImmutableSamplerBindings = %A" x.maxEmbeddedImmutableSamplerBindings
                        sprintf "maxEmbeddedImmutableSamplers = %A" x.maxEmbeddedImmutableSamplers
                        sprintf "bufferCaptureReplayDescriptorDataSize = %A" x.bufferCaptureReplayDescriptorDataSize
                        sprintf "imageCaptureReplayDescriptorDataSize = %A" x.imageCaptureReplayDescriptorDataSize
                        sprintf "imageViewCaptureReplayDescriptorDataSize = %A" x.imageViewCaptureReplayDescriptorDataSize
                        sprintf "samplerCaptureReplayDescriptorDataSize = %A" x.samplerCaptureReplayDescriptorDataSize
                        sprintf "accelerationStructureCaptureReplayDescriptorDataSize = %A" x.accelerationStructureCaptureReplayDescriptorDataSize
                        sprintf "samplerDescriptorSize = %A" x.samplerDescriptorSize
                        sprintf "combinedImageSamplerDescriptorSize = %A" x.combinedImageSamplerDescriptorSize
                        sprintf "sampledImageDescriptorSize = %A" x.sampledImageDescriptorSize
                        sprintf "storageImageDescriptorSize = %A" x.storageImageDescriptorSize
                        sprintf "uniformTexelBufferDescriptorSize = %A" x.uniformTexelBufferDescriptorSize
                        sprintf "robustUniformTexelBufferDescriptorSize = %A" x.robustUniformTexelBufferDescriptorSize
                        sprintf "storageTexelBufferDescriptorSize = %A" x.storageTexelBufferDescriptorSize
                        sprintf "robustStorageTexelBufferDescriptorSize = %A" x.robustStorageTexelBufferDescriptorSize
                        sprintf "uniformBufferDescriptorSize = %A" x.uniformBufferDescriptorSize
                        sprintf "robustUniformBufferDescriptorSize = %A" x.robustUniformBufferDescriptorSize
                        sprintf "storageBufferDescriptorSize = %A" x.storageBufferDescriptorSize
                        sprintf "robustStorageBufferDescriptorSize = %A" x.robustStorageBufferDescriptorSize
                        sprintf "inputAttachmentDescriptorSize = %A" x.inputAttachmentDescriptorSize
                        sprintf "accelerationStructureDescriptorSize = %A" x.accelerationStructureDescriptorSize
                        sprintf "maxSamplerDescriptorBufferRange = %A" x.maxSamplerDescriptorBufferRange
                        sprintf "maxResourceDescriptorBufferRange = %A" x.maxResourceDescriptorBufferRange
                        sprintf "samplerDescriptorBufferAddressSpaceSize = %A" x.samplerDescriptorBufferAddressSpaceSize
                        sprintf "resourceDescriptorBufferAddressSpaceSize = %A" x.resourceDescriptorBufferAddressSpaceSize
                        sprintf "descriptorBufferAddressSpaceSize = %A" x.descriptorBufferAddressSpaceSize
                    ] |> sprintf "VkPhysicalDeviceDescriptorBufferPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSamplerCaptureDescriptorDataInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public sampler : VkSampler

                new(pNext: nativeint, sampler: VkSampler) =
                    {
                        sType = 1000316008u
                        pNext = pNext
                        sampler = sampler
                    }

                new(sampler: VkSampler) =
                    VkSamplerCaptureDescriptorDataInfoEXT(Unchecked.defaultof<nativeint>, sampler)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.sampler = Unchecked.defaultof<VkSampler>

                static member Empty =
                    VkSamplerCaptureDescriptorDataInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSampler>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "sampler = %A" x.sampler
                    ] |> sprintf "VkSamplerCaptureDescriptorDataInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRAccelerationStructure.VkAccelerationStructureCreateFlagsKHR with
                  static member inline DescriptorBufferCaptureReplayBitExt = enum<KHRAccelerationStructure.VkAccelerationStructureCreateFlagsKHR> 0x00000008
             type Vulkan13.VkAccessFlags2 with
                  static member inline Access2DescriptorBufferReadBitExt = enum<Vulkan13.VkAccessFlags2> 0x00000200
             type VkBufferCreateFlags with
                  static member inline DescriptorBufferCaptureReplayBitExt = enum<VkBufferCreateFlags> 0x00000020
             type VkBufferUsageFlags with
                  static member inline SamplerDescriptorBufferBitExt = enum<VkBufferUsageFlags> 0x00200000
                  static member inline ResourceDescriptorBufferBitExt = enum<VkBufferUsageFlags> 0x00400000
                  static member inline PushDescriptorsDescriptorBufferBitExt = enum<VkBufferUsageFlags> 0x04000000
             type VkDescriptorSetLayoutCreateFlags with
                  static member inline DescriptorBufferBitExt = enum<VkDescriptorSetLayoutCreateFlags> 0x00000010
                  static member inline EmbeddedImmutableSamplersBitExt = enum<VkDescriptorSetLayoutCreateFlags> 0x00000020
             type VkImageCreateFlags with
                  static member inline DescriptorBufferCaptureReplayBitExt = enum<VkImageCreateFlags> 0x00010000
             type VkImageViewCreateFlags with
                  static member inline DescriptorBufferCaptureReplayBitExt = enum<VkImageViewCreateFlags> 0x00000004
             type VkPipelineCreateFlags with
                  static member inline DescriptorBufferBitExt = enum<VkPipelineCreateFlags> 0x20000000
             type VkSamplerCreateFlags with
                  static member inline DescriptorBufferCaptureReplayBitExt = enum<VkSamplerCreateFlags> 0x00000008

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDescriptorSetLayoutSizeEXTDel = delegate of VkDevice * VkDescriptorSetLayout * nativeptr<VkDeviceSize> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDescriptorSetLayoutBindingOffsetEXTDel = delegate of VkDevice * VkDescriptorSetLayout * uint32 * nativeptr<VkDeviceSize> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDescriptorEXTDel = delegate of VkDevice * nativeptr<VkDescriptorGetInfoEXT> * uint64 * nativeint -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBindDescriptorBuffersEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkDescriptorBufferBindingInfoEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetDescriptorBufferOffsetsEXTDel = delegate of VkCommandBuffer * VkPipelineBindPoint * VkPipelineLayout * uint32 * uint32 * nativeptr<uint32> * nativeptr<VkDeviceSize> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBindDescriptorBufferEmbeddedSamplersEXTDel = delegate of VkCommandBuffer * VkPipelineBindPoint * VkPipelineLayout * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetBufferOpaqueCaptureDescriptorDataEXTDel = delegate of VkDevice * nativeptr<VkBufferCaptureDescriptorDataInfoEXT> * nativeint -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetImageOpaqueCaptureDescriptorDataEXTDel = delegate of VkDevice * nativeptr<VkImageCaptureDescriptorDataInfoEXT> * nativeint -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetImageViewOpaqueCaptureDescriptorDataEXTDel = delegate of VkDevice * nativeptr<VkImageViewCaptureDescriptorDataInfoEXT> * nativeint -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetSamplerOpaqueCaptureDescriptorDataEXTDel = delegate of VkDevice * nativeptr<VkSamplerCaptureDescriptorDataInfoEXT> * nativeint -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTDescriptorBuffer")
                static let s_vkGetDescriptorSetLayoutSizeEXTDel = VkRaw.vkImportInstanceDelegate<VkGetDescriptorSetLayoutSizeEXTDel> "vkGetDescriptorSetLayoutSizeEXT"
                static let s_vkGetDescriptorSetLayoutBindingOffsetEXTDel = VkRaw.vkImportInstanceDelegate<VkGetDescriptorSetLayoutBindingOffsetEXTDel> "vkGetDescriptorSetLayoutBindingOffsetEXT"
                static let s_vkGetDescriptorEXTDel = VkRaw.vkImportInstanceDelegate<VkGetDescriptorEXTDel> "vkGetDescriptorEXT"
                static let s_vkCmdBindDescriptorBuffersEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBindDescriptorBuffersEXTDel> "vkCmdBindDescriptorBuffersEXT"
                static let s_vkCmdSetDescriptorBufferOffsetsEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDescriptorBufferOffsetsEXTDel> "vkCmdSetDescriptorBufferOffsetsEXT"
                static let s_vkCmdBindDescriptorBufferEmbeddedSamplersEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBindDescriptorBufferEmbeddedSamplersEXTDel> "vkCmdBindDescriptorBufferEmbeddedSamplersEXT"
                static let s_vkGetBufferOpaqueCaptureDescriptorDataEXTDel = VkRaw.vkImportInstanceDelegate<VkGetBufferOpaqueCaptureDescriptorDataEXTDel> "vkGetBufferOpaqueCaptureDescriptorDataEXT"
                static let s_vkGetImageOpaqueCaptureDescriptorDataEXTDel = VkRaw.vkImportInstanceDelegate<VkGetImageOpaqueCaptureDescriptorDataEXTDel> "vkGetImageOpaqueCaptureDescriptorDataEXT"
                static let s_vkGetImageViewOpaqueCaptureDescriptorDataEXTDel = VkRaw.vkImportInstanceDelegate<VkGetImageViewOpaqueCaptureDescriptorDataEXTDel> "vkGetImageViewOpaqueCaptureDescriptorDataEXT"
                static let s_vkGetSamplerOpaqueCaptureDescriptorDataEXTDel = VkRaw.vkImportInstanceDelegate<VkGetSamplerOpaqueCaptureDescriptorDataEXTDel> "vkGetSamplerOpaqueCaptureDescriptorDataEXT"
                static do Report.End(3) |> ignore
                static member vkGetDescriptorSetLayoutSizeEXT = s_vkGetDescriptorSetLayoutSizeEXTDel
                static member vkGetDescriptorSetLayoutBindingOffsetEXT = s_vkGetDescriptorSetLayoutBindingOffsetEXTDel
                static member vkGetDescriptorEXT = s_vkGetDescriptorEXTDel
                static member vkCmdBindDescriptorBuffersEXT = s_vkCmdBindDescriptorBuffersEXTDel
                static member vkCmdSetDescriptorBufferOffsetsEXT = s_vkCmdSetDescriptorBufferOffsetsEXTDel
                static member vkCmdBindDescriptorBufferEmbeddedSamplersEXT = s_vkCmdBindDescriptorBufferEmbeddedSamplersEXTDel
                static member vkGetBufferOpaqueCaptureDescriptorDataEXT = s_vkGetBufferOpaqueCaptureDescriptorDataEXTDel
                static member vkGetImageOpaqueCaptureDescriptorDataEXT = s_vkGetImageOpaqueCaptureDescriptorDataEXTDel
                static member vkGetImageViewOpaqueCaptureDescriptorDataEXT = s_vkGetImageViewOpaqueCaptureDescriptorDataEXTDel
                static member vkGetSamplerOpaqueCaptureDescriptorDataEXT = s_vkGetSamplerOpaqueCaptureDescriptorDataEXTDel
            let vkGetDescriptorSetLayoutSizeEXT(device : VkDevice, layout : VkDescriptorSetLayout, pLayoutSizeInBytes : nativeptr<VkDeviceSize>) = Loader<unit>.vkGetDescriptorSetLayoutSizeEXT.Invoke(device, layout, pLayoutSizeInBytes)
            let vkGetDescriptorSetLayoutBindingOffsetEXT(device : VkDevice, layout : VkDescriptorSetLayout, binding : uint32, pOffset : nativeptr<VkDeviceSize>) = Loader<unit>.vkGetDescriptorSetLayoutBindingOffsetEXT.Invoke(device, layout, binding, pOffset)
            let vkGetDescriptorEXT(device : VkDevice, pDescriptorInfo : nativeptr<VkDescriptorGetInfoEXT>, dataSize : uint64, pDescriptor : nativeint) = Loader<unit>.vkGetDescriptorEXT.Invoke(device, pDescriptorInfo, dataSize, pDescriptor)
            let vkCmdBindDescriptorBuffersEXT(commandBuffer : VkCommandBuffer, bufferCount : uint32, pBindingInfos : nativeptr<VkDescriptorBufferBindingInfoEXT>) = Loader<unit>.vkCmdBindDescriptorBuffersEXT.Invoke(commandBuffer, bufferCount, pBindingInfos)
            let vkCmdSetDescriptorBufferOffsetsEXT(commandBuffer : VkCommandBuffer, pipelineBindPoint : VkPipelineBindPoint, layout : VkPipelineLayout, firstSet : uint32, setCount : uint32, pBufferIndices : nativeptr<uint32>, pOffsets : nativeptr<VkDeviceSize>) = Loader<unit>.vkCmdSetDescriptorBufferOffsetsEXT.Invoke(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets)
            let vkCmdBindDescriptorBufferEmbeddedSamplersEXT(commandBuffer : VkCommandBuffer, pipelineBindPoint : VkPipelineBindPoint, layout : VkPipelineLayout, set : uint32) = Loader<unit>.vkCmdBindDescriptorBufferEmbeddedSamplersEXT.Invoke(commandBuffer, pipelineBindPoint, layout, set)
            let vkGetBufferOpaqueCaptureDescriptorDataEXT(device : VkDevice, pInfo : nativeptr<VkBufferCaptureDescriptorDataInfoEXT>, pData : nativeint) = Loader<unit>.vkGetBufferOpaqueCaptureDescriptorDataEXT.Invoke(device, pInfo, pData)
            let vkGetImageOpaqueCaptureDescriptorDataEXT(device : VkDevice, pInfo : nativeptr<VkImageCaptureDescriptorDataInfoEXT>, pData : nativeint) = Loader<unit>.vkGetImageOpaqueCaptureDescriptorDataEXT.Invoke(device, pInfo, pData)
            let vkGetImageViewOpaqueCaptureDescriptorDataEXT(device : VkDevice, pInfo : nativeptr<VkImageViewCaptureDescriptorDataInfoEXT>, pData : nativeint) = Loader<unit>.vkGetImageViewOpaqueCaptureDescriptorDataEXT.Invoke(device, pInfo, pData)
            let vkGetSamplerOpaqueCaptureDescriptorDataEXT(device : VkDevice, pInfo : nativeptr<VkSamplerCaptureDescriptorDataInfoEXT>, pData : nativeint) = Loader<unit>.vkGetSamplerOpaqueCaptureDescriptorDataEXT.Invoke(device, pInfo, pData)

        [<AutoOpen>]
        module ``KHRAccelerationStructure | NVRayTracing`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkAccelerationStructureCaptureDescriptorDataInfoEXT =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public accelerationStructure : KHRAccelerationStructure.VkAccelerationStructureKHR
                    val mutable public accelerationStructureNV : NVRayTracing.VkAccelerationStructureNV

                    new(pNext: nativeint, accelerationStructure: KHRAccelerationStructure.VkAccelerationStructureKHR, accelerationStructureNV: NVRayTracing.VkAccelerationStructureNV) =
                        {
                            sType = 1000316009u
                            pNext = pNext
                            accelerationStructure = accelerationStructure
                            accelerationStructureNV = accelerationStructureNV
                        }

                    new(accelerationStructure: KHRAccelerationStructure.VkAccelerationStructureKHR, accelerationStructureNV: NVRayTracing.VkAccelerationStructureNV) =
                        VkAccelerationStructureCaptureDescriptorDataInfoEXT(Unchecked.defaultof<nativeint>, accelerationStructure, accelerationStructureNV)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructure = Unchecked.defaultof<KHRAccelerationStructure.VkAccelerationStructureKHR> && x.accelerationStructureNV = Unchecked.defaultof<NVRayTracing.VkAccelerationStructureNV>

                    static member Empty =
                        VkAccelerationStructureCaptureDescriptorDataInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRAccelerationStructure.VkAccelerationStructureKHR>, Unchecked.defaultof<NVRayTracing.VkAccelerationStructureNV>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "accelerationStructure = %A" x.accelerationStructure
                            sprintf "accelerationStructureNV = %A" x.accelerationStructureNV
                        ] |> sprintf "VkAccelerationStructureCaptureDescriptorDataInfoEXT { %s }"
                end


            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkGetAccelerationStructureOpaqueCaptureDescriptorDataEXTDel = delegate of VkDevice * nativeptr<VkAccelerationStructureCaptureDescriptorDataInfoEXT> * nativeint -> VkResult

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTDescriptorBuffer -> KHRAccelerationStructure | NVRayTracing")
                    static let s_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXTDel = VkRaw.vkImportInstanceDelegate<VkGetAccelerationStructureOpaqueCaptureDescriptorDataEXTDel> "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
                    static do Report.End(3) |> ignore
                    static member vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = s_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXTDel
                let vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device : VkDevice, pInfo : nativeptr<VkAccelerationStructureCaptureDescriptorDataInfoEXT>, pData : nativeint) = Loader<unit>.vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT.Invoke(device, pInfo, pData)

    /// Requires (KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRPipelineLibrary.
    module EXTGraphicsPipelineLibrary =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_graphics_pipeline_library"
        let Number = 321

        [<Flags>]
        type VkGraphicsPipelineLibraryFlagsEXT =
            | All = 15
            | None = 0
            | VertexInputInterfaceBit = 0x00000001
            | PreRasterizationShadersBit = 0x00000002
            | FragmentShaderBit = 0x00000004
            | FragmentOutputInterfaceBit = 0x00000008


        [<StructLayout(LayoutKind.Sequential)>]
        type VkGraphicsPipelineLibraryCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkGraphicsPipelineLibraryFlagsEXT

                new(pNext: nativeint, flags: VkGraphicsPipelineLibraryFlagsEXT) =
                    {
                        sType = 1000320002u
                        pNext = pNext
                        flags = flags
                    }

                new(flags: VkGraphicsPipelineLibraryFlagsEXT) =
                    VkGraphicsPipelineLibraryCreateInfoEXT(Unchecked.defaultof<nativeint>, flags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkGraphicsPipelineLibraryFlagsEXT>

                static member Empty =
                    VkGraphicsPipelineLibraryCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkGraphicsPipelineLibraryFlagsEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                    ] |> sprintf "VkGraphicsPipelineLibraryCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public graphicsPipelineLibrary : VkBool32

                new(pNext: nativeint, graphicsPipelineLibrary: VkBool32) =
                    {
                        sType = 1000320000u
                        pNext = pNext
                        graphicsPipelineLibrary = graphicsPipelineLibrary
                    }

                new(graphicsPipelineLibrary: VkBool32) =
                    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(Unchecked.defaultof<nativeint>, graphicsPipelineLibrary)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.graphicsPipelineLibrary = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "graphicsPipelineLibrary = %A" x.graphicsPipelineLibrary
                    ] |> sprintf "VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public graphicsPipelineLibraryFastLinking : VkBool32
                val mutable public graphicsPipelineLibraryIndependentInterpolationDecoration : VkBool32

                new(pNext: nativeint, graphicsPipelineLibraryFastLinking: VkBool32, graphicsPipelineLibraryIndependentInterpolationDecoration: VkBool32) =
                    {
                        sType = 1000320001u
                        pNext = pNext
                        graphicsPipelineLibraryFastLinking = graphicsPipelineLibraryFastLinking
                        graphicsPipelineLibraryIndependentInterpolationDecoration = graphicsPipelineLibraryIndependentInterpolationDecoration
                    }

                new(graphicsPipelineLibraryFastLinking: VkBool32, graphicsPipelineLibraryIndependentInterpolationDecoration: VkBool32) =
                    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(Unchecked.defaultof<nativeint>, graphicsPipelineLibraryFastLinking, graphicsPipelineLibraryIndependentInterpolationDecoration)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.graphicsPipelineLibraryFastLinking = Unchecked.defaultof<VkBool32> && x.graphicsPipelineLibraryIndependentInterpolationDecoration = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "graphicsPipelineLibraryFastLinking = %A" x.graphicsPipelineLibraryFastLinking
                        sprintf "graphicsPipelineLibraryIndependentInterpolationDecoration = %A" x.graphicsPipelineLibraryIndependentInterpolationDecoration
                    ] |> sprintf "VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineCreateFlags with
                  static member inline RetainLinkTimeOptimizationInfoBitExt = enum<VkPipelineCreateFlags> 0x00800000
                  static member inline LinkTimeOptimizationBitExt = enum<VkPipelineCreateFlags> 0x00000400
             type VkPipelineLayoutCreateFlags with
                  static member inline IndependentSetsBitExt = enum<VkPipelineLayoutCreateFlags> 0x00000002


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module AMDShaderEarlyAndLateFragmentTests =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_shader_early_and_late_fragment_tests"
        let Number = 322

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderEarlyAndLateFragmentTests : VkBool32

                new(pNext: nativeint, shaderEarlyAndLateFragmentTests: VkBool32) =
                    {
                        sType = 1000321000u
                        pNext = pNext
                        shaderEarlyAndLateFragmentTests = shaderEarlyAndLateFragmentTests
                    }

                new(shaderEarlyAndLateFragmentTests: VkBool32) =
                    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(Unchecked.defaultof<nativeint>, shaderEarlyAndLateFragmentTests)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderEarlyAndLateFragmentTests = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderEarlyAndLateFragmentTests = %A" x.shaderEarlyAndLateFragmentTests
                    ] |> sprintf "VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module KHRFragmentShaderBarycentric =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_fragment_shader_barycentric"
        let Number = 323

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fragmentShaderBarycentric : VkBool32

                new(pNext: nativeint, fragmentShaderBarycentric: VkBool32) =
                    {
                        sType = 1000203000u
                        pNext = pNext
                        fragmentShaderBarycentric = fragmentShaderBarycentric
                    }

                new(fragmentShaderBarycentric: VkBool32) =
                    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(Unchecked.defaultof<nativeint>, fragmentShaderBarycentric)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fragmentShaderBarycentric = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fragmentShaderBarycentric = %A" x.fragmentShaderBarycentric
                    ] |> sprintf "VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public triStripVertexOrderIndependentOfProvokingVertex : VkBool32

                new(pNext: nativeint, triStripVertexOrderIndependentOfProvokingVertex: VkBool32) =
                    {
                        sType = 1000322000u
                        pNext = pNext
                        triStripVertexOrderIndependentOfProvokingVertex = triStripVertexOrderIndependentOfProvokingVertex
                    }

                new(triStripVertexOrderIndependentOfProvokingVertex: VkBool32) =
                    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(Unchecked.defaultof<nativeint>, triStripVertexOrderIndependentOfProvokingVertex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.triStripVertexOrderIndependentOfProvokingVertex = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "triStripVertexOrderIndependentOfProvokingVertex = %A" x.triStripVertexOrderIndependentOfProvokingVertex
                    ] |> sprintf "VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR { %s }"
            end



    /// Requires Vulkan11.
    module KHRShaderSubgroupUniformControlFlow =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_subgroup_uniform_control_flow"
        let Number = 324

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderSubgroupUniformControlFlow : VkBool32

                new(pNext: nativeint, shaderSubgroupUniformControlFlow: VkBool32) =
                    {
                        sType = 1000323000u
                        pNext = pNext
                        shaderSubgroupUniformControlFlow = shaderSubgroupUniformControlFlow
                    }

                new(shaderSubgroupUniformControlFlow: VkBool32) =
                    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(Unchecked.defaultof<nativeint>, shaderSubgroupUniformControlFlow)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderSubgroupUniformControlFlow = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderSubgroupUniformControlFlow = %A" x.shaderSubgroupUniformControlFlow
                    ] |> sprintf "VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module KHRZeroInitializeWorkgroupMemory =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_zero_initialize_workgroup_memory"
        let Number = 326

        type VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = Vulkan13.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures



    /// Requires KHRFragmentShadingRate.
    module NVFragmentShadingRateEnums =
        let Type = ExtensionType.Device
        let Name = "VK_NV_fragment_shading_rate_enums"
        let Number = 327

        type VkFragmentShadingRateNV =
            | D1InvocationPerPixel = 0
            | D1InvocationPer1x2Pixels = 1
            | D1InvocationPer2x1Pixels = 4
            | D1InvocationPer2x2Pixels = 5
            | D1InvocationPer2x4Pixels = 6
            | D1InvocationPer4x2Pixels = 9
            | D1InvocationPer4x4Pixels = 10
            | D2InvocationsPerPixel = 11
            | D4InvocationsPerPixel = 12
            | D8InvocationsPerPixel = 13
            | D16InvocationsPerPixel = 14
            | NoInvocations = 15

        type VkFragmentShadingRateTypeNV =
            | FragmentSize = 0
            | Enums = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fragmentShadingRateEnums : VkBool32
                val mutable public supersampleFragmentShadingRates : VkBool32
                val mutable public noInvocationFragmentShadingRates : VkBool32

                new(pNext: nativeint, fragmentShadingRateEnums: VkBool32, supersampleFragmentShadingRates: VkBool32, noInvocationFragmentShadingRates: VkBool32) =
                    {
                        sType = 1000326001u
                        pNext = pNext
                        fragmentShadingRateEnums = fragmentShadingRateEnums
                        supersampleFragmentShadingRates = supersampleFragmentShadingRates
                        noInvocationFragmentShadingRates = noInvocationFragmentShadingRates
                    }

                new(fragmentShadingRateEnums: VkBool32, supersampleFragmentShadingRates: VkBool32, noInvocationFragmentShadingRates: VkBool32) =
                    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(Unchecked.defaultof<nativeint>, fragmentShadingRateEnums, supersampleFragmentShadingRates, noInvocationFragmentShadingRates)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fragmentShadingRateEnums = Unchecked.defaultof<VkBool32> && x.supersampleFragmentShadingRates = Unchecked.defaultof<VkBool32> && x.noInvocationFragmentShadingRates = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fragmentShadingRateEnums = %A" x.fragmentShadingRateEnums
                        sprintf "supersampleFragmentShadingRates = %A" x.supersampleFragmentShadingRates
                        sprintf "noInvocationFragmentShadingRates = %A" x.noInvocationFragmentShadingRates
                    ] |> sprintf "VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxFragmentShadingRateInvocationCount : VkSampleCountFlags

                new(pNext: nativeint, maxFragmentShadingRateInvocationCount: VkSampleCountFlags) =
                    {
                        sType = 1000326000u
                        pNext = pNext
                        maxFragmentShadingRateInvocationCount = maxFragmentShadingRateInvocationCount
                    }

                new(maxFragmentShadingRateInvocationCount: VkSampleCountFlags) =
                    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(Unchecked.defaultof<nativeint>, maxFragmentShadingRateInvocationCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxFragmentShadingRateInvocationCount = Unchecked.defaultof<VkSampleCountFlags>

                static member Empty =
                    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSampleCountFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxFragmentShadingRateInvocationCount = %A" x.maxFragmentShadingRateInvocationCount
                    ] |> sprintf "VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineFragmentShadingRateEnumStateCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shadingRateType : VkFragmentShadingRateTypeNV
                val mutable public shadingRate : VkFragmentShadingRateNV
                val mutable public combinerOps : KHRFragmentShadingRate.VkFragmentShadingRateCombinerOpKHR_2

                new(pNext: nativeint, shadingRateType: VkFragmentShadingRateTypeNV, shadingRate: VkFragmentShadingRateNV, combinerOps: KHRFragmentShadingRate.VkFragmentShadingRateCombinerOpKHR_2) =
                    {
                        sType = 1000326002u
                        pNext = pNext
                        shadingRateType = shadingRateType
                        shadingRate = shadingRate
                        combinerOps = combinerOps
                    }

                new(shadingRateType: VkFragmentShadingRateTypeNV, shadingRate: VkFragmentShadingRateNV, combinerOps: KHRFragmentShadingRate.VkFragmentShadingRateCombinerOpKHR_2) =
                    VkPipelineFragmentShadingRateEnumStateCreateInfoNV(Unchecked.defaultof<nativeint>, shadingRateType, shadingRate, combinerOps)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shadingRateType = Unchecked.defaultof<VkFragmentShadingRateTypeNV> && x.shadingRate = Unchecked.defaultof<VkFragmentShadingRateNV> && x.combinerOps = Unchecked.defaultof<KHRFragmentShadingRate.VkFragmentShadingRateCombinerOpKHR_2>

                static member Empty =
                    VkPipelineFragmentShadingRateEnumStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFragmentShadingRateTypeNV>, Unchecked.defaultof<VkFragmentShadingRateNV>, Unchecked.defaultof<KHRFragmentShadingRate.VkFragmentShadingRateCombinerOpKHR_2>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shadingRateType = %A" x.shadingRateType
                        sprintf "shadingRate = %A" x.shadingRate
                        sprintf "combinerOps = %A" x.combinerOps
                    ] |> sprintf "VkPipelineFragmentShadingRateEnumStateCreateInfoNV { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetFragmentShadingRateEnumNVDel = delegate of VkCommandBuffer * VkFragmentShadingRateNV * KHRFragmentShadingRate.VkFragmentShadingRateCombinerOpKHR_2 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVFragmentShadingRateEnums")
                static let s_vkCmdSetFragmentShadingRateEnumNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetFragmentShadingRateEnumNVDel> "vkCmdSetFragmentShadingRateEnumNV"
                static do Report.End(3) |> ignore
                static member vkCmdSetFragmentShadingRateEnumNV = s_vkCmdSetFragmentShadingRateEnumNVDel
            let vkCmdSetFragmentShadingRateEnumNV(commandBuffer : VkCommandBuffer, shadingRate : VkFragmentShadingRateNV, combinerOps : KHRFragmentShadingRate.VkFragmentShadingRateCombinerOpKHR_2) = Loader<unit>.vkCmdSetFragmentShadingRateEnumNV.Invoke(commandBuffer, shadingRate, combinerOps)

    /// Requires KHRRayTracingPipeline.
    module NVRayTracingMotionBlur =
        let Type = ExtensionType.Device
        let Name = "VK_NV_ray_tracing_motion_blur"
        let Number = 328

        type VkAccelerationStructureMotionInstanceTypeNV =
            | Static = 0
            | MatrixMotion = 1
            | SrtMotion = 2


        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureGeometryMotionTrianglesDataNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public vertexData : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR

                new(pNext: nativeint, vertexData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR) =
                    {
                        sType = 1000327000u
                        pNext = pNext
                        vertexData = vertexData
                    }

                new(vertexData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR) =
                    VkAccelerationStructureGeometryMotionTrianglesDataNV(Unchecked.defaultof<nativeint>, vertexData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.vertexData = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>

                static member Empty =
                    VkAccelerationStructureGeometryMotionTrianglesDataNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "vertexData = %A" x.vertexData
                    ] |> sprintf "VkAccelerationStructureGeometryMotionTrianglesDataNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureMatrixMotionInstanceNV =
            struct
                val mutable public transformT0 : KHRAccelerationStructure.VkTransformMatrixKHR
                val mutable public transformT1 : KHRAccelerationStructure.VkTransformMatrixKHR
                val mutable private __bitfield0 : uint32
                val mutable private __bitfield1 : uint32
                val mutable public accelerationStructureReference : uint64

                member x.instanceCustomIndex
                    with get() : uint32 =  ((x.__bitfield0 >>> 0) &&& 0xFFFFFFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFFFFFFu <<< 0)) ||| ((( value) &&& 0xFFFFFFu) <<< 0)

                member x.mask
                    with get() : uint32 =  ((x.__bitfield0 >>> 24) &&& 0xFFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFFu <<< 24)) ||| ((( value) &&& 0xFFu) <<< 24)

                member x.instanceShaderBindingTableRecordOffset
                    with get() : uint32 =  ((x.__bitfield1 >>> 0) &&& 0xFFFFFFu)
                    and set (value: uint32) = x.__bitfield1 <- (x.__bitfield1 &&& ~~~(0xFFFFFFu <<< 0)) ||| ((( value) &&& 0xFFFFFFu) <<< 0)

                member x.flags
                    with get() : KHRAccelerationStructure.VkGeometryInstanceFlagsKHR = enum<KHRAccelerationStructure.VkGeometryInstanceFlagsKHR> <| int32 ((x.__bitfield1 >>> 24) &&& 0xFFu)
                    and set (value: KHRAccelerationStructure.VkGeometryInstanceFlagsKHR) = x.__bitfield1 <- (x.__bitfield1 &&& ~~~(0xFFu <<< 24)) ||| (((uint32 value) &&& 0xFFu) <<< 24)

                new(transformT0: KHRAccelerationStructure.VkTransformMatrixKHR, transformT1: KHRAccelerationStructure.VkTransformMatrixKHR, instanceCustomIndex: uint32, mask: uint32, instanceShaderBindingTableRecordOffset: uint32, flags: KHRAccelerationStructure.VkGeometryInstanceFlagsKHR, accelerationStructureReference: uint64) =
                    {
                        transformT0 = transformT0
                        transformT1 = transformT1
                        __bitfield0 = (( instanceCustomIndex &&& 0xFFFFFFu) <<< 0) ||| (( mask &&& 0xFFu) <<< 24)
                        __bitfield1 = (( instanceShaderBindingTableRecordOffset &&& 0xFFFFFFu) <<< 0) ||| ((uint32 flags &&& 0xFFu) <<< 24)
                        accelerationStructureReference = accelerationStructureReference
                    }

                member x.IsEmpty =
                    x.transformT0 = Unchecked.defaultof<KHRAccelerationStructure.VkTransformMatrixKHR> && x.transformT1 = Unchecked.defaultof<KHRAccelerationStructure.VkTransformMatrixKHR> && x.__bitfield0 = Unchecked.defaultof<uint32> && x.__bitfield1 = Unchecked.defaultof<uint32> && x.accelerationStructureReference = Unchecked.defaultof<uint64>

                static member Empty =
                    VkAccelerationStructureMatrixMotionInstanceNV(Unchecked.defaultof<KHRAccelerationStructure.VkTransformMatrixKHR>, Unchecked.defaultof<KHRAccelerationStructure.VkTransformMatrixKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<KHRAccelerationStructure.VkGeometryInstanceFlagsKHR>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "transformT0 = %A" x.transformT0
                        sprintf "transformT1 = %A" x.transformT1
                        sprintf "instanceCustomIndex = %A" x.instanceCustomIndex
                        sprintf "mask = %A" x.mask
                        sprintf "instanceShaderBindingTableRecordOffset = %A" x.instanceShaderBindingTableRecordOffset
                        sprintf "flags = %A" x.flags
                        sprintf "accelerationStructureReference = %A" x.accelerationStructureReference
                    ] |> sprintf "VkAccelerationStructureMatrixMotionInstanceNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureMotionInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxInstances : uint32
                val mutable public flags : VkAccelerationStructureMotionInfoFlagsNV

                new(pNext: nativeint, maxInstances: uint32, flags: VkAccelerationStructureMotionInfoFlagsNV) =
                    {
                        sType = 1000327002u
                        pNext = pNext
                        maxInstances = maxInstances
                        flags = flags
                    }

                new(maxInstances: uint32, flags: VkAccelerationStructureMotionInfoFlagsNV) =
                    VkAccelerationStructureMotionInfoNV(Unchecked.defaultof<nativeint>, maxInstances, flags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxInstances = Unchecked.defaultof<uint32> && x.flags = Unchecked.defaultof<VkAccelerationStructureMotionInfoFlagsNV>

                static member Empty =
                    VkAccelerationStructureMotionInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkAccelerationStructureMotionInfoFlagsNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxInstances = %A" x.maxInstances
                        sprintf "flags = %A" x.flags
                    ] |> sprintf "VkAccelerationStructureMotionInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSRTDataNV =
            struct
                val mutable public sx : float32
                val mutable public a : float32
                val mutable public b : float32
                val mutable public pvx : float32
                val mutable public sy : float32
                val mutable public c : float32
                val mutable public pvy : float32
                val mutable public sz : float32
                val mutable public pvz : float32
                val mutable public qx : float32
                val mutable public qy : float32
                val mutable public qz : float32
                val mutable public qw : float32
                val mutable public tx : float32
                val mutable public ty : float32
                val mutable public tz : float32

                new(sx: float32, a: float32, b: float32, pvx: float32, sy: float32, c: float32, pvy: float32, sz: float32, pvz: float32, qx: float32, qy: float32, qz: float32, qw: float32, tx: float32, ty: float32, tz: float32) =
                    {
                        sx = sx
                        a = a
                        b = b
                        pvx = pvx
                        sy = sy
                        c = c
                        pvy = pvy
                        sz = sz
                        pvz = pvz
                        qx = qx
                        qy = qy
                        qz = qz
                        qw = qw
                        tx = tx
                        ty = ty
                        tz = tz
                    }

                member x.IsEmpty =
                    x.sx = Unchecked.defaultof<float32> && x.a = Unchecked.defaultof<float32> && x.b = Unchecked.defaultof<float32> && x.pvx = Unchecked.defaultof<float32> && x.sy = Unchecked.defaultof<float32> && x.c = Unchecked.defaultof<float32> && x.pvy = Unchecked.defaultof<float32> && x.sz = Unchecked.defaultof<float32> && x.pvz = Unchecked.defaultof<float32> && x.qx = Unchecked.defaultof<float32> && x.qy = Unchecked.defaultof<float32> && x.qz = Unchecked.defaultof<float32> && x.qw = Unchecked.defaultof<float32> && x.tx = Unchecked.defaultof<float32> && x.ty = Unchecked.defaultof<float32> && x.tz = Unchecked.defaultof<float32>

                static member Empty =
                    VkSRTDataNV(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sx = %A" x.sx
                        sprintf "a = %A" x.a
                        sprintf "b = %A" x.b
                        sprintf "pvx = %A" x.pvx
                        sprintf "sy = %A" x.sy
                        sprintf "c = %A" x.c
                        sprintf "pvy = %A" x.pvy
                        sprintf "sz = %A" x.sz
                        sprintf "pvz = %A" x.pvz
                        sprintf "qx = %A" x.qx
                        sprintf "qy = %A" x.qy
                        sprintf "qz = %A" x.qz
                        sprintf "qw = %A" x.qw
                        sprintf "tx = %A" x.tx
                        sprintf "ty = %A" x.ty
                        sprintf "tz = %A" x.tz
                    ] |> sprintf "VkSRTDataNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureSRTMotionInstanceNV =
            struct
                val mutable public transformT0 : VkSRTDataNV
                val mutable public transformT1 : VkSRTDataNV
                val mutable private __bitfield0 : uint32
                val mutable private __bitfield1 : uint32
                val mutable public accelerationStructureReference : uint64

                member x.instanceCustomIndex
                    with get() : uint32 =  ((x.__bitfield0 >>> 0) &&& 0xFFFFFFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFFFFFFu <<< 0)) ||| ((( value) &&& 0xFFFFFFu) <<< 0)

                member x.mask
                    with get() : uint32 =  ((x.__bitfield0 >>> 24) &&& 0xFFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFFu <<< 24)) ||| ((( value) &&& 0xFFu) <<< 24)

                member x.instanceShaderBindingTableRecordOffset
                    with get() : uint32 =  ((x.__bitfield1 >>> 0) &&& 0xFFFFFFu)
                    and set (value: uint32) = x.__bitfield1 <- (x.__bitfield1 &&& ~~~(0xFFFFFFu <<< 0)) ||| ((( value) &&& 0xFFFFFFu) <<< 0)

                member x.flags
                    with get() : KHRAccelerationStructure.VkGeometryInstanceFlagsKHR = enum<KHRAccelerationStructure.VkGeometryInstanceFlagsKHR> <| int32 ((x.__bitfield1 >>> 24) &&& 0xFFu)
                    and set (value: KHRAccelerationStructure.VkGeometryInstanceFlagsKHR) = x.__bitfield1 <- (x.__bitfield1 &&& ~~~(0xFFu <<< 24)) ||| (((uint32 value) &&& 0xFFu) <<< 24)

                new(transformT0: VkSRTDataNV, transformT1: VkSRTDataNV, instanceCustomIndex: uint32, mask: uint32, instanceShaderBindingTableRecordOffset: uint32, flags: KHRAccelerationStructure.VkGeometryInstanceFlagsKHR, accelerationStructureReference: uint64) =
                    {
                        transformT0 = transformT0
                        transformT1 = transformT1
                        __bitfield0 = (( instanceCustomIndex &&& 0xFFFFFFu) <<< 0) ||| (( mask &&& 0xFFu) <<< 24)
                        __bitfield1 = (( instanceShaderBindingTableRecordOffset &&& 0xFFFFFFu) <<< 0) ||| ((uint32 flags &&& 0xFFu) <<< 24)
                        accelerationStructureReference = accelerationStructureReference
                    }

                member x.IsEmpty =
                    x.transformT0 = Unchecked.defaultof<VkSRTDataNV> && x.transformT1 = Unchecked.defaultof<VkSRTDataNV> && x.__bitfield0 = Unchecked.defaultof<uint32> && x.__bitfield1 = Unchecked.defaultof<uint32> && x.accelerationStructureReference = Unchecked.defaultof<uint64>

                static member Empty =
                    VkAccelerationStructureSRTMotionInstanceNV(Unchecked.defaultof<VkSRTDataNV>, Unchecked.defaultof<VkSRTDataNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<KHRAccelerationStructure.VkGeometryInstanceFlagsKHR>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "transformT0 = %A" x.transformT0
                        sprintf "transformT1 = %A" x.transformT1
                        sprintf "instanceCustomIndex = %A" x.instanceCustomIndex
                        sprintf "mask = %A" x.mask
                        sprintf "instanceShaderBindingTableRecordOffset = %A" x.instanceShaderBindingTableRecordOffset
                        sprintf "flags = %A" x.flags
                        sprintf "accelerationStructureReference = %A" x.accelerationStructureReference
                    ] |> sprintf "VkAccelerationStructureSRTMotionInstanceNV { %s }"
            end

        [<StructLayout(LayoutKind.Explicit)>]
        type VkAccelerationStructureMotionInstanceDataNV =
            struct
                [<FieldOffset(0)>]
                val mutable public staticInstance : KHRAccelerationStructure.VkAccelerationStructureInstanceKHR
                [<FieldOffset(0)>]
                val mutable public matrixMotionInstance : VkAccelerationStructureMatrixMotionInstanceNV
                [<FieldOffset(0)>]
                val mutable public srtMotionInstance : VkAccelerationStructureSRTMotionInstanceNV

                static member StaticInstance(value: KHRAccelerationStructure.VkAccelerationStructureInstanceKHR) =
                    let mutable result = Unchecked.defaultof<VkAccelerationStructureMotionInstanceDataNV>
                    result.staticInstance <- value
                    result

                static member MatrixMotionInstance(value: VkAccelerationStructureMatrixMotionInstanceNV) =
                    let mutable result = Unchecked.defaultof<VkAccelerationStructureMotionInstanceDataNV>
                    result.matrixMotionInstance <- value
                    result

                static member SrtMotionInstance(value: VkAccelerationStructureSRTMotionInstanceNV) =
                    let mutable result = Unchecked.defaultof<VkAccelerationStructureMotionInstanceDataNV>
                    result.srtMotionInstance <- value
                    result

                override x.ToString() =
                    String.concat "; " [
                        sprintf "staticInstance = %A" x.staticInstance
                        sprintf "matrixMotionInstance = %A" x.matrixMotionInstance
                        sprintf "srtMotionInstance = %A" x.srtMotionInstance
                    ] |> sprintf "VkAccelerationStructureMotionInstanceDataNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureMotionInstanceNV =
            struct
                val mutable public _type : VkAccelerationStructureMotionInstanceTypeNV
                val mutable public flags : VkAccelerationStructureMotionInstanceFlagsNV
                val mutable public data : VkAccelerationStructureMotionInstanceDataNV

                new(_type: VkAccelerationStructureMotionInstanceTypeNV, flags: VkAccelerationStructureMotionInstanceFlagsNV, data: VkAccelerationStructureMotionInstanceDataNV) =
                    {
                        _type = _type
                        flags = flags
                        data = data
                    }

                member x.IsEmpty =
                    x._type = Unchecked.defaultof<VkAccelerationStructureMotionInstanceTypeNV> && x.flags = Unchecked.defaultof<VkAccelerationStructureMotionInstanceFlagsNV> && x.data = Unchecked.defaultof<VkAccelerationStructureMotionInstanceDataNV>

                static member Empty =
                    VkAccelerationStructureMotionInstanceNV(Unchecked.defaultof<VkAccelerationStructureMotionInstanceTypeNV>, Unchecked.defaultof<VkAccelerationStructureMotionInstanceFlagsNV>, Unchecked.defaultof<VkAccelerationStructureMotionInstanceDataNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "_type = %A" x._type
                        sprintf "flags = %A" x.flags
                        sprintf "data = %A" x.data
                    ] |> sprintf "VkAccelerationStructureMotionInstanceNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRayTracingMotionBlurFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public rayTracingMotionBlur : VkBool32
                val mutable public rayTracingMotionBlurPipelineTraceRaysIndirect : VkBool32

                new(pNext: nativeint, rayTracingMotionBlur: VkBool32, rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32) =
                    {
                        sType = 1000327001u
                        pNext = pNext
                        rayTracingMotionBlur = rayTracingMotionBlur
                        rayTracingMotionBlurPipelineTraceRaysIndirect = rayTracingMotionBlurPipelineTraceRaysIndirect
                    }

                new(rayTracingMotionBlur: VkBool32, rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32) =
                    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(Unchecked.defaultof<nativeint>, rayTracingMotionBlur, rayTracingMotionBlurPipelineTraceRaysIndirect)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.rayTracingMotionBlur = Unchecked.defaultof<VkBool32> && x.rayTracingMotionBlurPipelineTraceRaysIndirect = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "rayTracingMotionBlur = %A" x.rayTracingMotionBlur
                        sprintf "rayTracingMotionBlurPipelineTraceRaysIndirect = %A" x.rayTracingMotionBlurPipelineTraceRaysIndirect
                    ] |> sprintf "VkPhysicalDeviceRayTracingMotionBlurFeaturesNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRAccelerationStructure.VkAccelerationStructureCreateFlagsKHR with
                  static member inline MotionBitNv = enum<KHRAccelerationStructure.VkAccelerationStructureCreateFlagsKHR> 0x00000004
             type KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR with
                  static member inline MotionBitNv = enum<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> 0x00000020
             type VkPipelineCreateFlags with
                  static member inline RayTracingAllowMotionBitNv = enum<VkPipelineCreateFlags> 0x00100000


    /// Requires KHRSpirv14.
    module EXTMeshShader =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_mesh_shader"
        let Number = 329

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDrawMeshTasksIndirectCommandEXT =
            struct
                val mutable public groupCountX : uint32
                val mutable public groupCountY : uint32
                val mutable public groupCountZ : uint32

                new(groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32) =
                    {
                        groupCountX = groupCountX
                        groupCountY = groupCountY
                        groupCountZ = groupCountZ
                    }

                member x.IsEmpty =
                    x.groupCountX = Unchecked.defaultof<uint32> && x.groupCountY = Unchecked.defaultof<uint32> && x.groupCountZ = Unchecked.defaultof<uint32>

                static member Empty =
                    VkDrawMeshTasksIndirectCommandEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "groupCountX = %A" x.groupCountX
                        sprintf "groupCountY = %A" x.groupCountY
                        sprintf "groupCountZ = %A" x.groupCountZ
                    ] |> sprintf "VkDrawMeshTasksIndirectCommandEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMeshShaderFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public taskShader : VkBool32
                val mutable public meshShader : VkBool32
                val mutable public multiviewMeshShader : VkBool32
                val mutable public primitiveFragmentShadingRateMeshShader : VkBool32
                val mutable public meshShaderQueries : VkBool32

                new(pNext: nativeint, taskShader: VkBool32, meshShader: VkBool32, multiviewMeshShader: VkBool32, primitiveFragmentShadingRateMeshShader: VkBool32, meshShaderQueries: VkBool32) =
                    {
                        sType = 1000328000u
                        pNext = pNext
                        taskShader = taskShader
                        meshShader = meshShader
                        multiviewMeshShader = multiviewMeshShader
                        primitiveFragmentShadingRateMeshShader = primitiveFragmentShadingRateMeshShader
                        meshShaderQueries = meshShaderQueries
                    }

                new(taskShader: VkBool32, meshShader: VkBool32, multiviewMeshShader: VkBool32, primitiveFragmentShadingRateMeshShader: VkBool32, meshShaderQueries: VkBool32) =
                    VkPhysicalDeviceMeshShaderFeaturesEXT(Unchecked.defaultof<nativeint>, taskShader, meshShader, multiviewMeshShader, primitiveFragmentShadingRateMeshShader, meshShaderQueries)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.taskShader = Unchecked.defaultof<VkBool32> && x.meshShader = Unchecked.defaultof<VkBool32> && x.multiviewMeshShader = Unchecked.defaultof<VkBool32> && x.primitiveFragmentShadingRateMeshShader = Unchecked.defaultof<VkBool32> && x.meshShaderQueries = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMeshShaderFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "taskShader = %A" x.taskShader
                        sprintf "meshShader = %A" x.meshShader
                        sprintf "multiviewMeshShader = %A" x.multiviewMeshShader
                        sprintf "primitiveFragmentShadingRateMeshShader = %A" x.primitiveFragmentShadingRateMeshShader
                        sprintf "meshShaderQueries = %A" x.meshShaderQueries
                    ] |> sprintf "VkPhysicalDeviceMeshShaderFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMeshShaderPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxTaskWorkGroupTotalCount : uint32
                val mutable public maxTaskWorkGroupCount : V3ui
                val mutable public maxTaskWorkGroupInvocations : uint32
                val mutable public maxTaskWorkGroupSize : V3ui
                val mutable public maxTaskPayloadSize : uint32
                val mutable public maxTaskSharedMemorySize : uint32
                val mutable public maxTaskPayloadAndSharedMemorySize : uint32
                val mutable public maxMeshWorkGroupTotalCount : uint32
                val mutable public maxMeshWorkGroupCount : V3ui
                val mutable public maxMeshWorkGroupInvocations : uint32
                val mutable public maxMeshWorkGroupSize : V3ui
                val mutable public maxMeshSharedMemorySize : uint32
                val mutable public maxMeshPayloadAndSharedMemorySize : uint32
                val mutable public maxMeshOutputMemorySize : uint32
                val mutable public maxMeshPayloadAndOutputMemorySize : uint32
                val mutable public maxMeshOutputComponents : uint32
                val mutable public maxMeshOutputVertices : uint32
                val mutable public maxMeshOutputPrimitives : uint32
                val mutable public maxMeshOutputLayers : uint32
                val mutable public maxMeshMultiviewViewCount : uint32
                val mutable public meshOutputPerVertexGranularity : uint32
                val mutable public meshOutputPerPrimitiveGranularity : uint32
                val mutable public maxPreferredTaskWorkGroupInvocations : uint32
                val mutable public maxPreferredMeshWorkGroupInvocations : uint32
                val mutable public prefersLocalInvocationVertexOutput : VkBool32
                val mutable public prefersLocalInvocationPrimitiveOutput : VkBool32
                val mutable public prefersCompactVertexOutput : VkBool32
                val mutable public prefersCompactPrimitiveOutput : VkBool32

                new(pNext: nativeint, maxTaskWorkGroupTotalCount: uint32, maxTaskWorkGroupCount: V3ui, maxTaskWorkGroupInvocations: uint32, maxTaskWorkGroupSize: V3ui, maxTaskPayloadSize: uint32, maxTaskSharedMemorySize: uint32, maxTaskPayloadAndSharedMemorySize: uint32, maxMeshWorkGroupTotalCount: uint32, maxMeshWorkGroupCount: V3ui, maxMeshWorkGroupInvocations: uint32, maxMeshWorkGroupSize: V3ui, maxMeshSharedMemorySize: uint32, maxMeshPayloadAndSharedMemorySize: uint32, maxMeshOutputMemorySize: uint32, maxMeshPayloadAndOutputMemorySize: uint32, maxMeshOutputComponents: uint32, maxMeshOutputVertices: uint32, maxMeshOutputPrimitives: uint32, maxMeshOutputLayers: uint32, maxMeshMultiviewViewCount: uint32, meshOutputPerVertexGranularity: uint32, meshOutputPerPrimitiveGranularity: uint32, maxPreferredTaskWorkGroupInvocations: uint32, maxPreferredMeshWorkGroupInvocations: uint32, prefersLocalInvocationVertexOutput: VkBool32, prefersLocalInvocationPrimitiveOutput: VkBool32, prefersCompactVertexOutput: VkBool32, prefersCompactPrimitiveOutput: VkBool32) =
                    {
                        sType = 1000328001u
                        pNext = pNext
                        maxTaskWorkGroupTotalCount = maxTaskWorkGroupTotalCount
                        maxTaskWorkGroupCount = maxTaskWorkGroupCount
                        maxTaskWorkGroupInvocations = maxTaskWorkGroupInvocations
                        maxTaskWorkGroupSize = maxTaskWorkGroupSize
                        maxTaskPayloadSize = maxTaskPayloadSize
                        maxTaskSharedMemorySize = maxTaskSharedMemorySize
                        maxTaskPayloadAndSharedMemorySize = maxTaskPayloadAndSharedMemorySize
                        maxMeshWorkGroupTotalCount = maxMeshWorkGroupTotalCount
                        maxMeshWorkGroupCount = maxMeshWorkGroupCount
                        maxMeshWorkGroupInvocations = maxMeshWorkGroupInvocations
                        maxMeshWorkGroupSize = maxMeshWorkGroupSize
                        maxMeshSharedMemorySize = maxMeshSharedMemorySize
                        maxMeshPayloadAndSharedMemorySize = maxMeshPayloadAndSharedMemorySize
                        maxMeshOutputMemorySize = maxMeshOutputMemorySize
                        maxMeshPayloadAndOutputMemorySize = maxMeshPayloadAndOutputMemorySize
                        maxMeshOutputComponents = maxMeshOutputComponents
                        maxMeshOutputVertices = maxMeshOutputVertices
                        maxMeshOutputPrimitives = maxMeshOutputPrimitives
                        maxMeshOutputLayers = maxMeshOutputLayers
                        maxMeshMultiviewViewCount = maxMeshMultiviewViewCount
                        meshOutputPerVertexGranularity = meshOutputPerVertexGranularity
                        meshOutputPerPrimitiveGranularity = meshOutputPerPrimitiveGranularity
                        maxPreferredTaskWorkGroupInvocations = maxPreferredTaskWorkGroupInvocations
                        maxPreferredMeshWorkGroupInvocations = maxPreferredMeshWorkGroupInvocations
                        prefersLocalInvocationVertexOutput = prefersLocalInvocationVertexOutput
                        prefersLocalInvocationPrimitiveOutput = prefersLocalInvocationPrimitiveOutput
                        prefersCompactVertexOutput = prefersCompactVertexOutput
                        prefersCompactPrimitiveOutput = prefersCompactPrimitiveOutput
                    }

                new(maxTaskWorkGroupTotalCount: uint32, maxTaskWorkGroupCount: V3ui, maxTaskWorkGroupInvocations: uint32, maxTaskWorkGroupSize: V3ui, maxTaskPayloadSize: uint32, maxTaskSharedMemorySize: uint32, maxTaskPayloadAndSharedMemorySize: uint32, maxMeshWorkGroupTotalCount: uint32, maxMeshWorkGroupCount: V3ui, maxMeshWorkGroupInvocations: uint32, maxMeshWorkGroupSize: V3ui, maxMeshSharedMemorySize: uint32, maxMeshPayloadAndSharedMemorySize: uint32, maxMeshOutputMemorySize: uint32, maxMeshPayloadAndOutputMemorySize: uint32, maxMeshOutputComponents: uint32, maxMeshOutputVertices: uint32, maxMeshOutputPrimitives: uint32, maxMeshOutputLayers: uint32, maxMeshMultiviewViewCount: uint32, meshOutputPerVertexGranularity: uint32, meshOutputPerPrimitiveGranularity: uint32, maxPreferredTaskWorkGroupInvocations: uint32, maxPreferredMeshWorkGroupInvocations: uint32, prefersLocalInvocationVertexOutput: VkBool32, prefersLocalInvocationPrimitiveOutput: VkBool32, prefersCompactVertexOutput: VkBool32, prefersCompactPrimitiveOutput: VkBool32) =
                    VkPhysicalDeviceMeshShaderPropertiesEXT(Unchecked.defaultof<nativeint>, maxTaskWorkGroupTotalCount, maxTaskWorkGroupCount, maxTaskWorkGroupInvocations, maxTaskWorkGroupSize, maxTaskPayloadSize, maxTaskSharedMemorySize, maxTaskPayloadAndSharedMemorySize, maxMeshWorkGroupTotalCount, maxMeshWorkGroupCount, maxMeshWorkGroupInvocations, maxMeshWorkGroupSize, maxMeshSharedMemorySize, maxMeshPayloadAndSharedMemorySize, maxMeshOutputMemorySize, maxMeshPayloadAndOutputMemorySize, maxMeshOutputComponents, maxMeshOutputVertices, maxMeshOutputPrimitives, maxMeshOutputLayers, maxMeshMultiviewViewCount, meshOutputPerVertexGranularity, meshOutputPerPrimitiveGranularity, maxPreferredTaskWorkGroupInvocations, maxPreferredMeshWorkGroupInvocations, prefersLocalInvocationVertexOutput, prefersLocalInvocationPrimitiveOutput, prefersCompactVertexOutput, prefersCompactPrimitiveOutput)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxTaskWorkGroupTotalCount = Unchecked.defaultof<uint32> && x.maxTaskWorkGroupCount = Unchecked.defaultof<V3ui> && x.maxTaskWorkGroupInvocations = Unchecked.defaultof<uint32> && x.maxTaskWorkGroupSize = Unchecked.defaultof<V3ui> && x.maxTaskPayloadSize = Unchecked.defaultof<uint32> && x.maxTaskSharedMemorySize = Unchecked.defaultof<uint32> && x.maxTaskPayloadAndSharedMemorySize = Unchecked.defaultof<uint32> && x.maxMeshWorkGroupTotalCount = Unchecked.defaultof<uint32> && x.maxMeshWorkGroupCount = Unchecked.defaultof<V3ui> && x.maxMeshWorkGroupInvocations = Unchecked.defaultof<uint32> && x.maxMeshWorkGroupSize = Unchecked.defaultof<V3ui> && x.maxMeshSharedMemorySize = Unchecked.defaultof<uint32> && x.maxMeshPayloadAndSharedMemorySize = Unchecked.defaultof<uint32> && x.maxMeshOutputMemorySize = Unchecked.defaultof<uint32> && x.maxMeshPayloadAndOutputMemorySize = Unchecked.defaultof<uint32> && x.maxMeshOutputComponents = Unchecked.defaultof<uint32> && x.maxMeshOutputVertices = Unchecked.defaultof<uint32> && x.maxMeshOutputPrimitives = Unchecked.defaultof<uint32> && x.maxMeshOutputLayers = Unchecked.defaultof<uint32> && x.maxMeshMultiviewViewCount = Unchecked.defaultof<uint32> && x.meshOutputPerVertexGranularity = Unchecked.defaultof<uint32> && x.meshOutputPerPrimitiveGranularity = Unchecked.defaultof<uint32> && x.maxPreferredTaskWorkGroupInvocations = Unchecked.defaultof<uint32> && x.maxPreferredMeshWorkGroupInvocations = Unchecked.defaultof<uint32> && x.prefersLocalInvocationVertexOutput = Unchecked.defaultof<VkBool32> && x.prefersLocalInvocationPrimitiveOutput = Unchecked.defaultof<VkBool32> && x.prefersCompactVertexOutput = Unchecked.defaultof<VkBool32> && x.prefersCompactPrimitiveOutput = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMeshShaderPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxTaskWorkGroupTotalCount = %A" x.maxTaskWorkGroupTotalCount
                        sprintf "maxTaskWorkGroupCount = %A" x.maxTaskWorkGroupCount
                        sprintf "maxTaskWorkGroupInvocations = %A" x.maxTaskWorkGroupInvocations
                        sprintf "maxTaskWorkGroupSize = %A" x.maxTaskWorkGroupSize
                        sprintf "maxTaskPayloadSize = %A" x.maxTaskPayloadSize
                        sprintf "maxTaskSharedMemorySize = %A" x.maxTaskSharedMemorySize
                        sprintf "maxTaskPayloadAndSharedMemorySize = %A" x.maxTaskPayloadAndSharedMemorySize
                        sprintf "maxMeshWorkGroupTotalCount = %A" x.maxMeshWorkGroupTotalCount
                        sprintf "maxMeshWorkGroupCount = %A" x.maxMeshWorkGroupCount
                        sprintf "maxMeshWorkGroupInvocations = %A" x.maxMeshWorkGroupInvocations
                        sprintf "maxMeshWorkGroupSize = %A" x.maxMeshWorkGroupSize
                        sprintf "maxMeshSharedMemorySize = %A" x.maxMeshSharedMemorySize
                        sprintf "maxMeshPayloadAndSharedMemorySize = %A" x.maxMeshPayloadAndSharedMemorySize
                        sprintf "maxMeshOutputMemorySize = %A" x.maxMeshOutputMemorySize
                        sprintf "maxMeshPayloadAndOutputMemorySize = %A" x.maxMeshPayloadAndOutputMemorySize
                        sprintf "maxMeshOutputComponents = %A" x.maxMeshOutputComponents
                        sprintf "maxMeshOutputVertices = %A" x.maxMeshOutputVertices
                        sprintf "maxMeshOutputPrimitives = %A" x.maxMeshOutputPrimitives
                        sprintf "maxMeshOutputLayers = %A" x.maxMeshOutputLayers
                        sprintf "maxMeshMultiviewViewCount = %A" x.maxMeshMultiviewViewCount
                        sprintf "meshOutputPerVertexGranularity = %A" x.meshOutputPerVertexGranularity
                        sprintf "meshOutputPerPrimitiveGranularity = %A" x.meshOutputPerPrimitiveGranularity
                        sprintf "maxPreferredTaskWorkGroupInvocations = %A" x.maxPreferredTaskWorkGroupInvocations
                        sprintf "maxPreferredMeshWorkGroupInvocations = %A" x.maxPreferredMeshWorkGroupInvocations
                        sprintf "prefersLocalInvocationVertexOutput = %A" x.prefersLocalInvocationVertexOutput
                        sprintf "prefersLocalInvocationPrimitiveOutput = %A" x.prefersLocalInvocationPrimitiveOutput
                        sprintf "prefersCompactVertexOutput = %A" x.prefersCompactVertexOutput
                        sprintf "prefersCompactPrimitiveOutput = %A" x.prefersCompactPrimitiveOutput
                    ] |> sprintf "VkPhysicalDeviceMeshShaderPropertiesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineStageFlags with
                  static member inline TaskShaderBitExt = enum<VkPipelineStageFlags> 0x00080000
                  static member inline MeshShaderBitExt = enum<VkPipelineStageFlags> 0x00100000
             type VkQueryPipelineStatisticFlags with
                  static member inline TaskShaderInvocationsBitExt = enum<VkQueryPipelineStatisticFlags> 0x00000800
                  static member inline MeshShaderInvocationsBitExt = enum<VkQueryPipelineStatisticFlags> 0x00001000
             type VkQueryType with
                  static member inline MeshPrimitivesGeneratedExt = enum<VkQueryType> 1000328000
             type VkShaderStageFlags with
                  static member inline TaskBitExt = enum<VkShaderStageFlags> 0x00000040
                  static member inline MeshBitExt = enum<VkShaderStageFlags> 0x00000080

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawMeshTasksEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawMeshTasksIndirectEXTDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTMeshShader")
                static let s_vkCmdDrawMeshTasksEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMeshTasksEXTDel> "vkCmdDrawMeshTasksEXT"
                static let s_vkCmdDrawMeshTasksIndirectEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMeshTasksIndirectEXTDel> "vkCmdDrawMeshTasksIndirectEXT"
                static do Report.End(3) |> ignore
                static member vkCmdDrawMeshTasksEXT = s_vkCmdDrawMeshTasksEXTDel
                static member vkCmdDrawMeshTasksIndirectEXT = s_vkCmdDrawMeshTasksIndirectEXTDel
            let vkCmdDrawMeshTasksEXT(commandBuffer : VkCommandBuffer, groupCountX : uint32, groupCountY : uint32, groupCountZ : uint32) = Loader<unit>.vkCmdDrawMeshTasksEXT.Invoke(commandBuffer, groupCountX, groupCountY, groupCountZ)
            let vkCmdDrawMeshTasksIndirectEXT(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, drawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawMeshTasksIndirectEXT.Invoke(commandBuffer, buffer, offset, drawCount, stride)

        [<AutoOpen>]
        module ``KHRDrawIndirectCount | Vulkan12`` =
            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdDrawMeshTasksIndirectCountEXTDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTMeshShader -> KHRDrawIndirectCount | Vulkan12")
                    static let s_vkCmdDrawMeshTasksIndirectCountEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMeshTasksIndirectCountEXTDel> "vkCmdDrawMeshTasksIndirectCountEXT"
                    static do Report.End(3) |> ignore
                    static member vkCmdDrawMeshTasksIndirectCountEXT = s_vkCmdDrawMeshTasksIndirectCountEXTDel
                let vkCmdDrawMeshTasksIndirectCountEXT(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, countBuffer : VkBuffer, countBufferOffset : VkDeviceSize, maxDrawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawMeshTasksIndirectCountEXT.Invoke(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)

        [<AutoOpen>]
        module ``NVDeviceGeneratedCommands`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type NVDeviceGeneratedCommands.VkIndirectCommandsTokenTypeNV with
                      static member inline DrawMeshTasks = enum<NVDeviceGeneratedCommands.VkIndirectCommandsTokenTypeNV> 1000328000


        [<AutoOpen>]
        module ``EXTDeviceGeneratedCommands`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type EXTDeviceGeneratedCommands.VkIndirectCommandsTokenTypeEXT with
                      static member inline DrawMeshTasks = enum<EXTDeviceGeneratedCommands.VkIndirectCommandsTokenTypeEXT> 1000328000
                      static member inline DrawMeshTasksCount = enum<EXTDeviceGeneratedCommands.VkIndirectCommandsTokenTypeEXT> 1000328001


    /// Requires KHRSamplerYcbcrConversion | Vulkan11.
    /// Promoted to Vulkan13.
    module EXTYcbcr2plane444Formats =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_ycbcr_2plane_444_formats"
        let Number = 331

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public ycbcr2plane444Formats : VkBool32

                new(pNext: nativeint, ycbcr2plane444Formats: VkBool32) =
                    {
                        sType = 1000330000u
                        pNext = pNext
                        ycbcr2plane444Formats = ycbcr2plane444Formats
                    }

                new(ycbcr2plane444Formats: VkBool32) =
                    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(Unchecked.defaultof<nativeint>, ycbcr2plane444Formats)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.ycbcr2plane444Formats = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "ycbcr2plane444Formats = %A" x.ycbcr2plane444Formats
                    ] |> sprintf "VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkFormat with
                  static member inline G8B8r82plane444UnormExt = enum<VkFormat> 1000330000
                  static member inline G10x6B10x6r10x62plane444Unorm3pack16Ext = enum<VkFormat> 1000330001
                  static member inline G12x4B12x4r12x42plane444Unorm3pack16Ext = enum<VkFormat> 1000330002
                  static member inline G16B16r162plane444UnormExt = enum<VkFormat> 1000330003


    /// Requires EXTFragmentDensityMap.
    module EXTFragmentDensityMap2 =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_fragment_density_map2"
        let Number = 333

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentDensityMap2FeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fragmentDensityMapDeferred : VkBool32

                new(pNext: nativeint, fragmentDensityMapDeferred: VkBool32) =
                    {
                        sType = 1000332000u
                        pNext = pNext
                        fragmentDensityMapDeferred = fragmentDensityMapDeferred
                    }

                new(fragmentDensityMapDeferred: VkBool32) =
                    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(Unchecked.defaultof<nativeint>, fragmentDensityMapDeferred)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fragmentDensityMapDeferred = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fragmentDensityMapDeferred = %A" x.fragmentDensityMapDeferred
                    ] |> sprintf "VkPhysicalDeviceFragmentDensityMap2FeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentDensityMap2PropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public subsampledLoads : VkBool32
                val mutable public subsampledCoarseReconstructionEarlyAccess : VkBool32
                val mutable public maxSubsampledArrayLayers : uint32
                val mutable public maxDescriptorSetSubsampledSamplers : uint32

                new(pNext: nativeint, subsampledLoads: VkBool32, subsampledCoarseReconstructionEarlyAccess: VkBool32, maxSubsampledArrayLayers: uint32, maxDescriptorSetSubsampledSamplers: uint32) =
                    {
                        sType = 1000332001u
                        pNext = pNext
                        subsampledLoads = subsampledLoads
                        subsampledCoarseReconstructionEarlyAccess = subsampledCoarseReconstructionEarlyAccess
                        maxSubsampledArrayLayers = maxSubsampledArrayLayers
                        maxDescriptorSetSubsampledSamplers = maxDescriptorSetSubsampledSamplers
                    }

                new(subsampledLoads: VkBool32, subsampledCoarseReconstructionEarlyAccess: VkBool32, maxSubsampledArrayLayers: uint32, maxDescriptorSetSubsampledSamplers: uint32) =
                    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(Unchecked.defaultof<nativeint>, subsampledLoads, subsampledCoarseReconstructionEarlyAccess, maxSubsampledArrayLayers, maxDescriptorSetSubsampledSamplers)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.subsampledLoads = Unchecked.defaultof<VkBool32> && x.subsampledCoarseReconstructionEarlyAccess = Unchecked.defaultof<VkBool32> && x.maxSubsampledArrayLayers = Unchecked.defaultof<uint32> && x.maxDescriptorSetSubsampledSamplers = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "subsampledLoads = %A" x.subsampledLoads
                        sprintf "subsampledCoarseReconstructionEarlyAccess = %A" x.subsampledCoarseReconstructionEarlyAccess
                        sprintf "maxSubsampledArrayLayers = %A" x.maxSubsampledArrayLayers
                        sprintf "maxDescriptorSetSubsampledSamplers = %A" x.maxDescriptorSetSubsampledSamplers
                    ] |> sprintf "VkPhysicalDeviceFragmentDensityMap2PropertiesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageViewCreateFlags with
                  static member inline FragmentDensityMapDeferredBitExt = enum<VkImageViewCreateFlags> 0x00000002


    /// Requires KHRCopyCommands2 | Vulkan13.
    module QCOMRotatedCopyCommands =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_rotated_copy_commands"
        let Number = 334

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCopyCommandTransformInfoQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public transform : KHRSurface.VkSurfaceTransformFlagsKHR

                new(pNext: nativeint, transform: KHRSurface.VkSurfaceTransformFlagsKHR) =
                    {
                        sType = 1000333000u
                        pNext = pNext
                        transform = transform
                    }

                new(transform: KHRSurface.VkSurfaceTransformFlagsKHR) =
                    VkCopyCommandTransformInfoQCOM(Unchecked.defaultof<nativeint>, transform)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.transform = Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR>

                static member Empty =
                    VkCopyCommandTransformInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRSurface.VkSurfaceTransformFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "transform = %A" x.transform
                    ] |> sprintf "VkCopyCommandTransformInfoQCOM { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module EXTImageRobustness =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_image_robustness"
        let Number = 336

        type VkPhysicalDeviceImageRobustnessFeaturesEXT = Vulkan13.VkPhysicalDeviceImageRobustnessFeatures



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module KHRWorkgroupMemoryExplicitLayout =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_workgroup_memory_explicit_layout"
        let Number = 337

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public workgroupMemoryExplicitLayout : VkBool32
                val mutable public workgroupMemoryExplicitLayoutScalarBlockLayout : VkBool32
                val mutable public workgroupMemoryExplicitLayout8BitAccess : VkBool32
                val mutable public workgroupMemoryExplicitLayout16BitAccess : VkBool32

                new(pNext: nativeint, workgroupMemoryExplicitLayout: VkBool32, workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32, workgroupMemoryExplicitLayout8BitAccess: VkBool32, workgroupMemoryExplicitLayout16BitAccess: VkBool32) =
                    {
                        sType = 1000336000u
                        pNext = pNext
                        workgroupMemoryExplicitLayout = workgroupMemoryExplicitLayout
                        workgroupMemoryExplicitLayoutScalarBlockLayout = workgroupMemoryExplicitLayoutScalarBlockLayout
                        workgroupMemoryExplicitLayout8BitAccess = workgroupMemoryExplicitLayout8BitAccess
                        workgroupMemoryExplicitLayout16BitAccess = workgroupMemoryExplicitLayout16BitAccess
                    }

                new(workgroupMemoryExplicitLayout: VkBool32, workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32, workgroupMemoryExplicitLayout8BitAccess: VkBool32, workgroupMemoryExplicitLayout16BitAccess: VkBool32) =
                    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(Unchecked.defaultof<nativeint>, workgroupMemoryExplicitLayout, workgroupMemoryExplicitLayoutScalarBlockLayout, workgroupMemoryExplicitLayout8BitAccess, workgroupMemoryExplicitLayout16BitAccess)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.workgroupMemoryExplicitLayout = Unchecked.defaultof<VkBool32> && x.workgroupMemoryExplicitLayoutScalarBlockLayout = Unchecked.defaultof<VkBool32> && x.workgroupMemoryExplicitLayout8BitAccess = Unchecked.defaultof<VkBool32> && x.workgroupMemoryExplicitLayout16BitAccess = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "workgroupMemoryExplicitLayout = %A" x.workgroupMemoryExplicitLayout
                        sprintf "workgroupMemoryExplicitLayoutScalarBlockLayout = %A" x.workgroupMemoryExplicitLayoutScalarBlockLayout
                        sprintf "workgroupMemoryExplicitLayout8BitAccess = %A" x.workgroupMemoryExplicitLayout8BitAccess
                        sprintf "workgroupMemoryExplicitLayout16BitAccess = %A" x.workgroupMemoryExplicitLayout16BitAccess
                    ] |> sprintf "VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module KHRCopyCommands2 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_copy_commands2"
        let Number = 338

        type VkBlitImageInfo2KHR = Vulkan13.VkBlitImageInfo2

        type VkBufferCopy2KHR = Vulkan13.VkBufferCopy2

        type VkBufferImageCopy2KHR = Vulkan13.VkBufferImageCopy2

        type VkCopyBufferInfo2KHR = Vulkan13.VkCopyBufferInfo2

        type VkCopyBufferToImageInfo2KHR = Vulkan13.VkCopyBufferToImageInfo2

        type VkCopyImageInfo2KHR = Vulkan13.VkCopyImageInfo2

        type VkCopyImageToBufferInfo2KHR = Vulkan13.VkCopyImageToBufferInfo2

        type VkImageBlit2KHR = Vulkan13.VkImageBlit2

        type VkImageCopy2KHR = Vulkan13.VkImageCopy2

        type VkImageResolve2KHR = Vulkan13.VkImageResolve2

        type VkResolveImageInfo2KHR = Vulkan13.VkResolveImageInfo2


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyBuffer2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan13.VkCopyBufferInfo2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyImage2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan13.VkCopyImageInfo2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyBufferToImage2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan13.VkCopyBufferToImageInfo2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyImageToBuffer2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan13.VkCopyImageToBufferInfo2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBlitImage2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan13.VkBlitImageInfo2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdResolveImage2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan13.VkResolveImageInfo2> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRCopyCommands2")
                static let s_vkCmdCopyBuffer2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyBuffer2KHRDel> "vkCmdCopyBuffer2KHR"
                static let s_vkCmdCopyImage2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyImage2KHRDel> "vkCmdCopyImage2KHR"
                static let s_vkCmdCopyBufferToImage2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyBufferToImage2KHRDel> "vkCmdCopyBufferToImage2KHR"
                static let s_vkCmdCopyImageToBuffer2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyImageToBuffer2KHRDel> "vkCmdCopyImageToBuffer2KHR"
                static let s_vkCmdBlitImage2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBlitImage2KHRDel> "vkCmdBlitImage2KHR"
                static let s_vkCmdResolveImage2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdResolveImage2KHRDel> "vkCmdResolveImage2KHR"
                static do Report.End(3) |> ignore
                static member vkCmdCopyBuffer2KHR = s_vkCmdCopyBuffer2KHRDel
                static member vkCmdCopyImage2KHR = s_vkCmdCopyImage2KHRDel
                static member vkCmdCopyBufferToImage2KHR = s_vkCmdCopyBufferToImage2KHRDel
                static member vkCmdCopyImageToBuffer2KHR = s_vkCmdCopyImageToBuffer2KHRDel
                static member vkCmdBlitImage2KHR = s_vkCmdBlitImage2KHRDel
                static member vkCmdResolveImage2KHR = s_vkCmdResolveImage2KHRDel
            let vkCmdCopyBuffer2KHR(commandBuffer : VkCommandBuffer, pCopyBufferInfo : nativeptr<Vulkan13.VkCopyBufferInfo2>) = Loader<unit>.vkCmdCopyBuffer2KHR.Invoke(commandBuffer, pCopyBufferInfo)
            let vkCmdCopyImage2KHR(commandBuffer : VkCommandBuffer, pCopyImageInfo : nativeptr<Vulkan13.VkCopyImageInfo2>) = Loader<unit>.vkCmdCopyImage2KHR.Invoke(commandBuffer, pCopyImageInfo)
            let vkCmdCopyBufferToImage2KHR(commandBuffer : VkCommandBuffer, pCopyBufferToImageInfo : nativeptr<Vulkan13.VkCopyBufferToImageInfo2>) = Loader<unit>.vkCmdCopyBufferToImage2KHR.Invoke(commandBuffer, pCopyBufferToImageInfo)
            let vkCmdCopyImageToBuffer2KHR(commandBuffer : VkCommandBuffer, pCopyImageToBufferInfo : nativeptr<Vulkan13.VkCopyImageToBufferInfo2>) = Loader<unit>.vkCmdCopyImageToBuffer2KHR.Invoke(commandBuffer, pCopyImageToBufferInfo)
            let vkCmdBlitImage2KHR(commandBuffer : VkCommandBuffer, pBlitImageInfo : nativeptr<Vulkan13.VkBlitImageInfo2>) = Loader<unit>.vkCmdBlitImage2KHR.Invoke(commandBuffer, pBlitImageInfo)
            let vkCmdResolveImage2KHR(commandBuffer : VkCommandBuffer, pResolveImageInfo : nativeptr<Vulkan13.VkResolveImageInfo2>) = Loader<unit>.vkCmdResolveImage2KHR.Invoke(commandBuffer, pResolveImageInfo)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTImageCompressionControl =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_image_compression_control"
        let Number = 339

        [<Flags>]
        type VkImageCompressionFlagsEXT =
            | All = 7
            | Default = 0
            | FixedRateDefault = 0x00000001
            | FixedRateExplicit = 0x00000002
            | Disabled = 0x00000004

        [<Flags>]
        type VkImageCompressionFixedRateFlagsEXT =
            | All = 16777215
            | None = 0
            | D1bpcBit = 0x00000001
            | D2bpcBit = 0x00000002
            | D3bpcBit = 0x00000004
            | D4bpcBit = 0x00000008
            | D5bpcBit = 0x00000010
            | D6bpcBit = 0x00000020
            | D7bpcBit = 0x00000040
            | D8bpcBit = 0x00000080
            | D9bpcBit = 0x00000100
            | D10bpcBit = 0x00000200
            | D11bpcBit = 0x00000400
            | D12bpcBit = 0x00000800
            | D13bpcBit = 0x00001000
            | D14bpcBit = 0x00002000
            | D15bpcBit = 0x00004000
            | D16bpcBit = 0x00008000
            | D17bpcBit = 0x00010000
            | D18bpcBit = 0x00020000
            | D19bpcBit = 0x00040000
            | D20bpcBit = 0x00080000
            | D21bpcBit = 0x00100000
            | D22bpcBit = 0x00200000
            | D23bpcBit = 0x00400000
            | D24bpcBit = 0x00800000


        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageCompressionControlEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkImageCompressionFlagsEXT
                val mutable public compressionControlPlaneCount : uint32
                val mutable public pFixedRateFlags : nativeptr<VkImageCompressionFixedRateFlagsEXT>

                new(pNext: nativeint, flags: VkImageCompressionFlagsEXT, compressionControlPlaneCount: uint32, pFixedRateFlags: nativeptr<VkImageCompressionFixedRateFlagsEXT>) =
                    {
                        sType = 1000338001u
                        pNext = pNext
                        flags = flags
                        compressionControlPlaneCount = compressionControlPlaneCount
                        pFixedRateFlags = pFixedRateFlags
                    }

                new(flags: VkImageCompressionFlagsEXT, compressionControlPlaneCount: uint32, pFixedRateFlags: nativeptr<VkImageCompressionFixedRateFlagsEXT>) =
                    VkImageCompressionControlEXT(Unchecked.defaultof<nativeint>, flags, compressionControlPlaneCount, pFixedRateFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkImageCompressionFlagsEXT> && x.compressionControlPlaneCount = Unchecked.defaultof<uint32> && x.pFixedRateFlags = Unchecked.defaultof<nativeptr<VkImageCompressionFixedRateFlagsEXT>>

                static member Empty =
                    VkImageCompressionControlEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageCompressionFlagsEXT>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageCompressionFixedRateFlagsEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "compressionControlPlaneCount = %A" x.compressionControlPlaneCount
                        sprintf "pFixedRateFlags = %A" x.pFixedRateFlags
                    ] |> sprintf "VkImageCompressionControlEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageCompressionPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageCompressionFlags : VkImageCompressionFlagsEXT
                val mutable public imageCompressionFixedRateFlags : VkImageCompressionFixedRateFlagsEXT

                new(pNext: nativeint, imageCompressionFlags: VkImageCompressionFlagsEXT, imageCompressionFixedRateFlags: VkImageCompressionFixedRateFlagsEXT) =
                    {
                        sType = 1000338004u
                        pNext = pNext
                        imageCompressionFlags = imageCompressionFlags
                        imageCompressionFixedRateFlags = imageCompressionFixedRateFlags
                    }

                new(imageCompressionFlags: VkImageCompressionFlagsEXT, imageCompressionFixedRateFlags: VkImageCompressionFixedRateFlagsEXT) =
                    VkImageCompressionPropertiesEXT(Unchecked.defaultof<nativeint>, imageCompressionFlags, imageCompressionFixedRateFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageCompressionFlags = Unchecked.defaultof<VkImageCompressionFlagsEXT> && x.imageCompressionFixedRateFlags = Unchecked.defaultof<VkImageCompressionFixedRateFlagsEXT>

                static member Empty =
                    VkImageCompressionPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageCompressionFlagsEXT>, Unchecked.defaultof<VkImageCompressionFixedRateFlagsEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageCompressionFlags = %A" x.imageCompressionFlags
                        sprintf "imageCompressionFixedRateFlags = %A" x.imageCompressionFixedRateFlags
                    ] |> sprintf "VkImageCompressionPropertiesEXT { %s }"
            end

        type VkImageSubresource2EXT = Vulkan14.VkImageSubresource2

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImageCompressionControlFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageCompressionControl : VkBool32

                new(pNext: nativeint, imageCompressionControl: VkBool32) =
                    {
                        sType = 1000338000u
                        pNext = pNext
                        imageCompressionControl = imageCompressionControl
                    }

                new(imageCompressionControl: VkBool32) =
                    VkPhysicalDeviceImageCompressionControlFeaturesEXT(Unchecked.defaultof<nativeint>, imageCompressionControl)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageCompressionControl = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceImageCompressionControlFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageCompressionControl = %A" x.imageCompressionControl
                    ] |> sprintf "VkPhysicalDeviceImageCompressionControlFeaturesEXT { %s }"
            end

        type VkSubresourceLayout2EXT = Vulkan14.VkSubresourceLayout2


        [<AutoOpen>]
        module EnumExtensions =
             type VkResult with
                  static member inline ErrorCompressionExhaustedExt = enum<VkResult> -1000338000

        module VkRaw =
            let vkGetImageSubresourceLayout2EXT = EXTHostImageCopy.VkRaw.vkGetImageSubresourceLayout2EXT

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTAttachmentFeedbackLoopLayout =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_attachment_feedback_loop_layout"
        let Number = 340

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public attachmentFeedbackLoopLayout : VkBool32

                new(pNext: nativeint, attachmentFeedbackLoopLayout: VkBool32) =
                    {
                        sType = 1000339000u
                        pNext = pNext
                        attachmentFeedbackLoopLayout = attachmentFeedbackLoopLayout
                    }

                new(attachmentFeedbackLoopLayout: VkBool32) =
                    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(Unchecked.defaultof<nativeint>, attachmentFeedbackLoopLayout)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.attachmentFeedbackLoopLayout = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "attachmentFeedbackLoopLayout = %A" x.attachmentFeedbackLoopLayout
                    ] |> sprintf "VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDependencyFlags with
                  /// Dependency may be a feedback loop
                  static member inline FeedbackLoopBitExt = enum<VkDependencyFlags> 0x00000008
             type VkImageLayout with
                  static member inline AttachmentFeedbackLoopOptimalExt = enum<VkImageLayout> 1000339000
             type VkImageUsageFlags with
                  static member inline AttachmentFeedbackLoopBitExt = enum<VkImageUsageFlags> 0x00080000
             type VkPipelineCreateFlags with
                  static member inline ColorAttachmentFeedbackLoopBitExt = enum<VkPipelineCreateFlags> 0x02000000
                  static member inline DepthStencilAttachmentFeedbackLoopBitExt = enum<VkPipelineCreateFlags> 0x04000000


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module EXT4444Formats =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_4444_formats"
        let Number = 341

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevice4444FormatsFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public formatA4R4G4B4 : VkBool32
                val mutable public formatA4B4G4R4 : VkBool32

                new(pNext: nativeint, formatA4R4G4B4: VkBool32, formatA4B4G4R4: VkBool32) =
                    {
                        sType = 1000340000u
                        pNext = pNext
                        formatA4R4G4B4 = formatA4R4G4B4
                        formatA4B4G4R4 = formatA4B4G4R4
                    }

                new(formatA4R4G4B4: VkBool32, formatA4B4G4R4: VkBool32) =
                    VkPhysicalDevice4444FormatsFeaturesEXT(Unchecked.defaultof<nativeint>, formatA4R4G4B4, formatA4B4G4R4)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.formatA4R4G4B4 = Unchecked.defaultof<VkBool32> && x.formatA4B4G4R4 = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevice4444FormatsFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "formatA4R4G4B4 = %A" x.formatA4R4G4B4
                        sprintf "formatA4B4G4R4 = %A" x.formatA4B4G4R4
                    ] |> sprintf "VkPhysicalDevice4444FormatsFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkFormat with
                  static member inline A4r4g4b4UnormPack16Ext = enum<VkFormat> 1000340000
                  static member inline A4b4g4r4UnormPack16Ext = enum<VkFormat> 1000340001


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTDeviceFault =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_device_fault"
        let Number = 342

        type VkDeviceFaultAddressTypeEXT =
            /// Currently unused
            | None = 0
            | ReadInvalid = 1
            | WriteInvalid = 2
            | ExecuteInvalid = 3
            | InstructionPointerUnknown = 4
            | InstructionPointerInvalid = 5
            | InstructionPointerFault = 6

        type VkDeviceFaultVendorBinaryHeaderVersionEXT =
            | One = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceFaultAddressInfoEXT =
            struct
                val mutable public addressType : VkDeviceFaultAddressTypeEXT
                val mutable public reportedAddress : VkDeviceAddress
                val mutable public addressPrecision : VkDeviceSize

                new(addressType: VkDeviceFaultAddressTypeEXT, reportedAddress: VkDeviceAddress, addressPrecision: VkDeviceSize) =
                    {
                        addressType = addressType
                        reportedAddress = reportedAddress
                        addressPrecision = addressPrecision
                    }

                member x.IsEmpty =
                    x.addressType = Unchecked.defaultof<VkDeviceFaultAddressTypeEXT> && x.reportedAddress = Unchecked.defaultof<VkDeviceAddress> && x.addressPrecision = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkDeviceFaultAddressInfoEXT(Unchecked.defaultof<VkDeviceFaultAddressTypeEXT>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "addressType = %A" x.addressType
                        sprintf "reportedAddress = %A" x.reportedAddress
                        sprintf "addressPrecision = %A" x.addressPrecision
                    ] |> sprintf "VkDeviceFaultAddressInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceFaultCountsEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public addressInfoCount : uint32
                val mutable public vendorInfoCount : uint32
                val mutable public vendorBinarySize : VkDeviceSize

                new(pNext: nativeint, addressInfoCount: uint32, vendorInfoCount: uint32, vendorBinarySize: VkDeviceSize) =
                    {
                        sType = 1000341001u
                        pNext = pNext
                        addressInfoCount = addressInfoCount
                        vendorInfoCount = vendorInfoCount
                        vendorBinarySize = vendorBinarySize
                    }

                new(addressInfoCount: uint32, vendorInfoCount: uint32, vendorBinarySize: VkDeviceSize) =
                    VkDeviceFaultCountsEXT(Unchecked.defaultof<nativeint>, addressInfoCount, vendorInfoCount, vendorBinarySize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.addressInfoCount = Unchecked.defaultof<uint32> && x.vendorInfoCount = Unchecked.defaultof<uint32> && x.vendorBinarySize = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkDeviceFaultCountsEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "addressInfoCount = %A" x.addressInfoCount
                        sprintf "vendorInfoCount = %A" x.vendorInfoCount
                        sprintf "vendorBinarySize = %A" x.vendorBinarySize
                    ] |> sprintf "VkDeviceFaultCountsEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceFaultVendorInfoEXT =
            struct
                val mutable public description : String256
                val mutable public vendorFaultCode : uint64
                val mutable public vendorFaultData : uint64

                new(description: String256, vendorFaultCode: uint64, vendorFaultData: uint64) =
                    {
                        description = description
                        vendorFaultCode = vendorFaultCode
                        vendorFaultData = vendorFaultData
                    }

                member x.IsEmpty =
                    x.description = Unchecked.defaultof<String256> && x.vendorFaultCode = Unchecked.defaultof<uint64> && x.vendorFaultData = Unchecked.defaultof<uint64>

                static member Empty =
                    VkDeviceFaultVendorInfoEXT(Unchecked.defaultof<String256>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "description = %A" x.description
                        sprintf "vendorFaultCode = %A" x.vendorFaultCode
                        sprintf "vendorFaultData = %A" x.vendorFaultData
                    ] |> sprintf "VkDeviceFaultVendorInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceFaultInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public description : String256
                val mutable public pAddressInfos : nativeptr<VkDeviceFaultAddressInfoEXT>
                val mutable public pVendorInfos : nativeptr<VkDeviceFaultVendorInfoEXT>
                val mutable public pVendorBinaryData : nativeint

                new(pNext: nativeint, description: String256, pAddressInfos: nativeptr<VkDeviceFaultAddressInfoEXT>, pVendorInfos: nativeptr<VkDeviceFaultVendorInfoEXT>, pVendorBinaryData: nativeint) =
                    {
                        sType = 1000341002u
                        pNext = pNext
                        description = description
                        pAddressInfos = pAddressInfos
                        pVendorInfos = pVendorInfos
                        pVendorBinaryData = pVendorBinaryData
                    }

                new(description: String256, pAddressInfos: nativeptr<VkDeviceFaultAddressInfoEXT>, pVendorInfos: nativeptr<VkDeviceFaultVendorInfoEXT>, pVendorBinaryData: nativeint) =
                    VkDeviceFaultInfoEXT(Unchecked.defaultof<nativeint>, description, pAddressInfos, pVendorInfos, pVendorBinaryData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.description = Unchecked.defaultof<String256> && x.pAddressInfos = Unchecked.defaultof<nativeptr<VkDeviceFaultAddressInfoEXT>> && x.pVendorInfos = Unchecked.defaultof<nativeptr<VkDeviceFaultVendorInfoEXT>> && x.pVendorBinaryData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkDeviceFaultInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<String256>, Unchecked.defaultof<nativeptr<VkDeviceFaultAddressInfoEXT>>, Unchecked.defaultof<nativeptr<VkDeviceFaultVendorInfoEXT>>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "description = %A" x.description
                        sprintf "pAddressInfos = %A" x.pAddressInfos
                        sprintf "pVendorInfos = %A" x.pVendorInfos
                        sprintf "pVendorBinaryData = %A" x.pVendorBinaryData
                    ] |> sprintf "VkDeviceFaultInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceFaultVendorBinaryHeaderVersionOneEXT =
            struct
                val mutable public headerSize : uint32
                val mutable public headerVersion : VkDeviceFaultVendorBinaryHeaderVersionEXT
                val mutable public vendorID : uint32
                val mutable public deviceID : uint32
                val mutable public driverVersion : uint32
                val mutable public pipelineCacheUUID : Guid
                val mutable public applicationNameOffset : uint32
                val mutable public applicationVersion : uint32
                val mutable public engineNameOffset : uint32
                val mutable public engineVersion : uint32
                val mutable public apiVersion : uint32

                new(headerSize: uint32, headerVersion: VkDeviceFaultVendorBinaryHeaderVersionEXT, vendorID: uint32, deviceID: uint32, driverVersion: uint32, pipelineCacheUUID: Guid, applicationNameOffset: uint32, applicationVersion: uint32, engineNameOffset: uint32, engineVersion: uint32, apiVersion: uint32) =
                    {
                        headerSize = headerSize
                        headerVersion = headerVersion
                        vendorID = vendorID
                        deviceID = deviceID
                        driverVersion = driverVersion
                        pipelineCacheUUID = pipelineCacheUUID
                        applicationNameOffset = applicationNameOffset
                        applicationVersion = applicationVersion
                        engineNameOffset = engineNameOffset
                        engineVersion = engineVersion
                        apiVersion = apiVersion
                    }

                member x.IsEmpty =
                    x.headerSize = Unchecked.defaultof<uint32> && x.headerVersion = Unchecked.defaultof<VkDeviceFaultVendorBinaryHeaderVersionEXT> && x.vendorID = Unchecked.defaultof<uint32> && x.deviceID = Unchecked.defaultof<uint32> && x.driverVersion = Unchecked.defaultof<uint32> && x.pipelineCacheUUID = Unchecked.defaultof<Guid> && x.applicationNameOffset = Unchecked.defaultof<uint32> && x.applicationVersion = Unchecked.defaultof<uint32> && x.engineNameOffset = Unchecked.defaultof<uint32> && x.engineVersion = Unchecked.defaultof<uint32> && x.apiVersion = Unchecked.defaultof<uint32>

                static member Empty =
                    VkDeviceFaultVendorBinaryHeaderVersionOneEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceFaultVendorBinaryHeaderVersionEXT>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<Guid>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "headerSize = %A" x.headerSize
                        sprintf "headerVersion = %A" x.headerVersion
                        sprintf "vendorID = %A" x.vendorID
                        sprintf "deviceID = %A" x.deviceID
                        sprintf "driverVersion = %A" x.driverVersion
                        sprintf "pipelineCacheUUID = %A" x.pipelineCacheUUID
                        sprintf "applicationNameOffset = %A" x.applicationNameOffset
                        sprintf "applicationVersion = %A" x.applicationVersion
                        sprintf "engineNameOffset = %A" x.engineNameOffset
                        sprintf "engineVersion = %A" x.engineVersion
                        sprintf "apiVersion = %A" x.apiVersion
                    ] |> sprintf "VkDeviceFaultVendorBinaryHeaderVersionOneEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFaultFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public deviceFault : VkBool32
                val mutable public deviceFaultVendorBinary : VkBool32

                new(pNext: nativeint, deviceFault: VkBool32, deviceFaultVendorBinary: VkBool32) =
                    {
                        sType = 1000341000u
                        pNext = pNext
                        deviceFault = deviceFault
                        deviceFaultVendorBinary = deviceFaultVendorBinary
                    }

                new(deviceFault: VkBool32, deviceFaultVendorBinary: VkBool32) =
                    VkPhysicalDeviceFaultFeaturesEXT(Unchecked.defaultof<nativeint>, deviceFault, deviceFaultVendorBinary)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.deviceFault = Unchecked.defaultof<VkBool32> && x.deviceFaultVendorBinary = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceFaultFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "deviceFault = %A" x.deviceFault
                        sprintf "deviceFaultVendorBinary = %A" x.deviceFaultVendorBinary
                    ] |> sprintf "VkPhysicalDeviceFaultFeaturesEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceFaultInfoEXTDel = delegate of VkDevice * nativeptr<VkDeviceFaultCountsEXT> * nativeptr<VkDeviceFaultInfoEXT> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTDeviceFault")
                static let s_vkGetDeviceFaultInfoEXTDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceFaultInfoEXTDel> "vkGetDeviceFaultInfoEXT"
                static do Report.End(3) |> ignore
                static member vkGetDeviceFaultInfoEXT = s_vkGetDeviceFaultInfoEXTDel
            let vkGetDeviceFaultInfoEXT(device : VkDevice, pFaultCounts : nativeptr<VkDeviceFaultCountsEXT>, pFaultInfo : nativeptr<VkDeviceFaultInfoEXT>) = Loader<unit>.vkGetDeviceFaultInfoEXT.Invoke(device, pFaultCounts, pFaultInfo)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to EXTRasterizationOrderAttachmentAccess.
    module ARMRasterizationOrderAttachmentAccess =
        let Type = ExtensionType.Device
        let Name = "VK_ARM_rasterization_order_attachment_access"
        let Number = 343

        type VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM = EXTRasterizationOrderAttachmentAccess.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineColorBlendStateCreateFlags with
                  static member inline RasterizationOrderAttachmentAccessBitArm = enum<VkPipelineColorBlendStateCreateFlags> 0x00000001
             type VkPipelineDepthStencilStateCreateFlags with
                  static member inline RasterizationOrderAttachmentDepthAccessBitArm = enum<VkPipelineDepthStencilStateCreateFlags> 0x00000001
                  static member inline RasterizationOrderAttachmentStencilAccessBitArm = enum<VkPipelineDepthStencilStateCreateFlags> 0x00000002
             type VkSubpassDescriptionFlags with
                  static member inline RasterizationOrderAttachmentColorAccessBitArm = enum<VkSubpassDescriptionFlags> 0x00000010
                  static member inline RasterizationOrderAttachmentDepthAccessBitArm = enum<VkSubpassDescriptionFlags> 0x00000020
                  static member inline RasterizationOrderAttachmentStencilAccessBitArm = enum<VkSubpassDescriptionFlags> 0x00000040


    /// Requires KHRSamplerYcbcrConversion | Vulkan11.
    module EXTRgba10x6Formats =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_rgba10x6_formats"
        let Number = 345

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public formatRgba10x6WithoutYCbCrSampler : VkBool32

                new(pNext: nativeint, formatRgba10x6WithoutYCbCrSampler: VkBool32) =
                    {
                        sType = 1000344000u
                        pNext = pNext
                        formatRgba10x6WithoutYCbCrSampler = formatRgba10x6WithoutYCbCrSampler
                    }

                new(formatRgba10x6WithoutYCbCrSampler: VkBool32) =
                    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(Unchecked.defaultof<nativeint>, formatRgba10x6WithoutYCbCrSampler)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.formatRgba10x6WithoutYCbCrSampler = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "formatRgba10x6WithoutYCbCrSampler = %A" x.formatRgba10x6WithoutYCbCrSampler
                    ] |> sprintf "VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT { %s }"
            end



    /// Requires EXTDirectModeDisplay.
    module NVAcquireWinrtDisplay =
        let Type = ExtensionType.Device
        let Name = "VK_NV_acquire_winrt_display"
        let Number = 346

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkAcquireWinrtDisplayNVDel = delegate of VkPhysicalDevice * KHRDisplay.VkDisplayKHR -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetWinrtDisplayNVDel = delegate of VkPhysicalDevice * uint32 * nativeptr<KHRDisplay.VkDisplayKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVAcquireWinrtDisplay")
                static let s_vkAcquireWinrtDisplayNVDel = VkRaw.vkImportInstanceDelegate<VkAcquireWinrtDisplayNVDel> "vkAcquireWinrtDisplayNV"
                static let s_vkGetWinrtDisplayNVDel = VkRaw.vkImportInstanceDelegate<VkGetWinrtDisplayNVDel> "vkGetWinrtDisplayNV"
                static do Report.End(3) |> ignore
                static member vkAcquireWinrtDisplayNV = s_vkAcquireWinrtDisplayNVDel
                static member vkGetWinrtDisplayNV = s_vkGetWinrtDisplayNVDel
            let vkAcquireWinrtDisplayNV(physicalDevice : VkPhysicalDevice, display : KHRDisplay.VkDisplayKHR) = Loader<unit>.vkAcquireWinrtDisplayNV.Invoke(physicalDevice, display)
            let vkGetWinrtDisplayNV(physicalDevice : VkPhysicalDevice, deviceRelativeId : uint32, pDisplay : nativeptr<KHRDisplay.VkDisplayKHR>) = Loader<unit>.vkGetWinrtDisplayNV.Invoke(physicalDevice, deviceRelativeId, pDisplay)

    /// Requires KHRSurface.
    module EXTDirectfbSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_directfb_surface"
        let Number = 347

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDirectFBSurfaceCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkDirectFBSurfaceCreateFlagsEXT
                val mutable public dfb : nativeptr<nativeint>
                val mutable public surface : nativeptr<nativeint>

                new(pNext: nativeint, flags: VkDirectFBSurfaceCreateFlagsEXT, dfb: nativeptr<nativeint>, surface: nativeptr<nativeint>) =
                    {
                        sType = 1000346000u
                        pNext = pNext
                        flags = flags
                        dfb = dfb
                        surface = surface
                    }

                new(flags: VkDirectFBSurfaceCreateFlagsEXT, dfb: nativeptr<nativeint>, surface: nativeptr<nativeint>) =
                    VkDirectFBSurfaceCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, dfb, surface)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDirectFBSurfaceCreateFlagsEXT> && x.dfb = Unchecked.defaultof<nativeptr<nativeint>> && x.surface = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkDirectFBSurfaceCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDirectFBSurfaceCreateFlagsEXT>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "dfb = %A" x.dfb
                        sprintf "surface = %A" x.surface
                    ] |> sprintf "VkDirectFBSurfaceCreateInfoEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateDirectFBSurfaceEXTDel = delegate of VkInstance * nativeptr<VkDirectFBSurfaceCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceDirectFBPresentationSupportEXTDel = delegate of VkPhysicalDevice * uint32 * nativeptr<nativeint> -> VkBool32

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTDirectfbSurface")
                static let s_vkCreateDirectFBSurfaceEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateDirectFBSurfaceEXTDel> "vkCreateDirectFBSurfaceEXT"
                static let s_vkGetPhysicalDeviceDirectFBPresentationSupportEXTDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceDirectFBPresentationSupportEXTDel> "vkGetPhysicalDeviceDirectFBPresentationSupportEXT"
                static do Report.End(3) |> ignore
                static member vkCreateDirectFBSurfaceEXT = s_vkCreateDirectFBSurfaceEXTDel
                static member vkGetPhysicalDeviceDirectFBPresentationSupportEXT = s_vkGetPhysicalDeviceDirectFBPresentationSupportEXTDel
            let vkCreateDirectFBSurfaceEXT(instance : VkInstance, pCreateInfo : nativeptr<VkDirectFBSurfaceCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateDirectFBSurfaceEXT.Invoke(instance, pCreateInfo, pAllocator, pSurface)
            let vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, dfb : nativeptr<nativeint>) = Loader<unit>.vkGetPhysicalDeviceDirectFBPresentationSupportEXT.Invoke(physicalDevice, queueFamilyIndex, dfb)

    /// Requires KHRSpirv14, KHRAccelerationStructure.
    module KHRRayTracingPipeline =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_ray_tracing_pipeline"
        let Number = 348

        type VkRayTracingShaderGroupTypeKHR =
            | General = 0
            | TrianglesHitGroup = 1
            | ProceduralHitGroup = 2

        type VkShaderGroupShaderKHR =
            | General = 0
            | ClosestHit = 1
            | AnyHit = 2
            | Intersection = 3


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRayTracingPipelineFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public rayTracingPipeline : VkBool32
                val mutable public rayTracingPipelineShaderGroupHandleCaptureReplay : VkBool32
                val mutable public rayTracingPipelineShaderGroupHandleCaptureReplayMixed : VkBool32
                val mutable public rayTracingPipelineTraceRaysIndirect : VkBool32
                val mutable public rayTraversalPrimitiveCulling : VkBool32

                new(pNext: nativeint, rayTracingPipeline: VkBool32, rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32, rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32, rayTracingPipelineTraceRaysIndirect: VkBool32, rayTraversalPrimitiveCulling: VkBool32) =
                    {
                        sType = 1000347000u
                        pNext = pNext
                        rayTracingPipeline = rayTracingPipeline
                        rayTracingPipelineShaderGroupHandleCaptureReplay = rayTracingPipelineShaderGroupHandleCaptureReplay
                        rayTracingPipelineShaderGroupHandleCaptureReplayMixed = rayTracingPipelineShaderGroupHandleCaptureReplayMixed
                        rayTracingPipelineTraceRaysIndirect = rayTracingPipelineTraceRaysIndirect
                        rayTraversalPrimitiveCulling = rayTraversalPrimitiveCulling
                    }

                new(rayTracingPipeline: VkBool32, rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32, rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32, rayTracingPipelineTraceRaysIndirect: VkBool32, rayTraversalPrimitiveCulling: VkBool32) =
                    VkPhysicalDeviceRayTracingPipelineFeaturesKHR(Unchecked.defaultof<nativeint>, rayTracingPipeline, rayTracingPipelineShaderGroupHandleCaptureReplay, rayTracingPipelineShaderGroupHandleCaptureReplayMixed, rayTracingPipelineTraceRaysIndirect, rayTraversalPrimitiveCulling)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.rayTracingPipeline = Unchecked.defaultof<VkBool32> && x.rayTracingPipelineShaderGroupHandleCaptureReplay = Unchecked.defaultof<VkBool32> && x.rayTracingPipelineShaderGroupHandleCaptureReplayMixed = Unchecked.defaultof<VkBool32> && x.rayTracingPipelineTraceRaysIndirect = Unchecked.defaultof<VkBool32> && x.rayTraversalPrimitiveCulling = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRayTracingPipelineFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "rayTracingPipeline = %A" x.rayTracingPipeline
                        sprintf "rayTracingPipelineShaderGroupHandleCaptureReplay = %A" x.rayTracingPipelineShaderGroupHandleCaptureReplay
                        sprintf "rayTracingPipelineShaderGroupHandleCaptureReplayMixed = %A" x.rayTracingPipelineShaderGroupHandleCaptureReplayMixed
                        sprintf "rayTracingPipelineTraceRaysIndirect = %A" x.rayTracingPipelineTraceRaysIndirect
                        sprintf "rayTraversalPrimitiveCulling = %A" x.rayTraversalPrimitiveCulling
                    ] |> sprintf "VkPhysicalDeviceRayTracingPipelineFeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRayTracingPipelinePropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderGroupHandleSize : uint32
                val mutable public maxRayRecursionDepth : uint32
                val mutable public maxShaderGroupStride : uint32
                val mutable public shaderGroupBaseAlignment : uint32
                val mutable public shaderGroupHandleCaptureReplaySize : uint32
                val mutable public maxRayDispatchInvocationCount : uint32
                val mutable public shaderGroupHandleAlignment : uint32
                val mutable public maxRayHitAttributeSize : uint32

                new(pNext: nativeint, shaderGroupHandleSize: uint32, maxRayRecursionDepth: uint32, maxShaderGroupStride: uint32, shaderGroupBaseAlignment: uint32, shaderGroupHandleCaptureReplaySize: uint32, maxRayDispatchInvocationCount: uint32, shaderGroupHandleAlignment: uint32, maxRayHitAttributeSize: uint32) =
                    {
                        sType = 1000347001u
                        pNext = pNext
                        shaderGroupHandleSize = shaderGroupHandleSize
                        maxRayRecursionDepth = maxRayRecursionDepth
                        maxShaderGroupStride = maxShaderGroupStride
                        shaderGroupBaseAlignment = shaderGroupBaseAlignment
                        shaderGroupHandleCaptureReplaySize = shaderGroupHandleCaptureReplaySize
                        maxRayDispatchInvocationCount = maxRayDispatchInvocationCount
                        shaderGroupHandleAlignment = shaderGroupHandleAlignment
                        maxRayHitAttributeSize = maxRayHitAttributeSize
                    }

                new(shaderGroupHandleSize: uint32, maxRayRecursionDepth: uint32, maxShaderGroupStride: uint32, shaderGroupBaseAlignment: uint32, shaderGroupHandleCaptureReplaySize: uint32, maxRayDispatchInvocationCount: uint32, shaderGroupHandleAlignment: uint32, maxRayHitAttributeSize: uint32) =
                    VkPhysicalDeviceRayTracingPipelinePropertiesKHR(Unchecked.defaultof<nativeint>, shaderGroupHandleSize, maxRayRecursionDepth, maxShaderGroupStride, shaderGroupBaseAlignment, shaderGroupHandleCaptureReplaySize, maxRayDispatchInvocationCount, shaderGroupHandleAlignment, maxRayHitAttributeSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderGroupHandleSize = Unchecked.defaultof<uint32> && x.maxRayRecursionDepth = Unchecked.defaultof<uint32> && x.maxShaderGroupStride = Unchecked.defaultof<uint32> && x.shaderGroupBaseAlignment = Unchecked.defaultof<uint32> && x.shaderGroupHandleCaptureReplaySize = Unchecked.defaultof<uint32> && x.maxRayDispatchInvocationCount = Unchecked.defaultof<uint32> && x.shaderGroupHandleAlignment = Unchecked.defaultof<uint32> && x.maxRayHitAttributeSize = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceRayTracingPipelinePropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderGroupHandleSize = %A" x.shaderGroupHandleSize
                        sprintf "maxRayRecursionDepth = %A" x.maxRayRecursionDepth
                        sprintf "maxShaderGroupStride = %A" x.maxShaderGroupStride
                        sprintf "shaderGroupBaseAlignment = %A" x.shaderGroupBaseAlignment
                        sprintf "shaderGroupHandleCaptureReplaySize = %A" x.shaderGroupHandleCaptureReplaySize
                        sprintf "maxRayDispatchInvocationCount = %A" x.maxRayDispatchInvocationCount
                        sprintf "shaderGroupHandleAlignment = %A" x.shaderGroupHandleAlignment
                        sprintf "maxRayHitAttributeSize = %A" x.maxRayHitAttributeSize
                    ] |> sprintf "VkPhysicalDeviceRayTracingPipelinePropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRayTracingShaderGroupCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _type : VkRayTracingShaderGroupTypeKHR
                val mutable public generalShader : uint32
                val mutable public closestHitShader : uint32
                val mutable public anyHitShader : uint32
                val mutable public intersectionShader : uint32
                val mutable public pShaderGroupCaptureReplayHandle : nativeint

                new(pNext: nativeint, _type: VkRayTracingShaderGroupTypeKHR, generalShader: uint32, closestHitShader: uint32, anyHitShader: uint32, intersectionShader: uint32, pShaderGroupCaptureReplayHandle: nativeint) =
                    {
                        sType = 1000150016u
                        pNext = pNext
                        _type = _type
                        generalShader = generalShader
                        closestHitShader = closestHitShader
                        anyHitShader = anyHitShader
                        intersectionShader = intersectionShader
                        pShaderGroupCaptureReplayHandle = pShaderGroupCaptureReplayHandle
                    }

                new(_type: VkRayTracingShaderGroupTypeKHR, generalShader: uint32, closestHitShader: uint32, anyHitShader: uint32, intersectionShader: uint32, pShaderGroupCaptureReplayHandle: nativeint) =
                    VkRayTracingShaderGroupCreateInfoKHR(Unchecked.defaultof<nativeint>, _type, generalShader, closestHitShader, anyHitShader, intersectionShader, pShaderGroupCaptureReplayHandle)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkRayTracingShaderGroupTypeKHR> && x.generalShader = Unchecked.defaultof<uint32> && x.closestHitShader = Unchecked.defaultof<uint32> && x.anyHitShader = Unchecked.defaultof<uint32> && x.intersectionShader = Unchecked.defaultof<uint32> && x.pShaderGroupCaptureReplayHandle = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkRayTracingShaderGroupCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRayTracingShaderGroupTypeKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_type = %A" x._type
                        sprintf "generalShader = %A" x.generalShader
                        sprintf "closestHitShader = %A" x.closestHitShader
                        sprintf "anyHitShader = %A" x.anyHitShader
                        sprintf "intersectionShader = %A" x.intersectionShader
                        sprintf "pShaderGroupCaptureReplayHandle = %A" x.pShaderGroupCaptureReplayHandle
                    ] |> sprintf "VkRayTracingShaderGroupCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRayTracingPipelineInterfaceCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxPipelineRayPayloadSize : uint32
                val mutable public maxPipelineRayHitAttributeSize : uint32

                new(pNext: nativeint, maxPipelineRayPayloadSize: uint32, maxPipelineRayHitAttributeSize: uint32) =
                    {
                        sType = 1000150018u
                        pNext = pNext
                        maxPipelineRayPayloadSize = maxPipelineRayPayloadSize
                        maxPipelineRayHitAttributeSize = maxPipelineRayHitAttributeSize
                    }

                new(maxPipelineRayPayloadSize: uint32, maxPipelineRayHitAttributeSize: uint32) =
                    VkRayTracingPipelineInterfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, maxPipelineRayPayloadSize, maxPipelineRayHitAttributeSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxPipelineRayPayloadSize = Unchecked.defaultof<uint32> && x.maxPipelineRayHitAttributeSize = Unchecked.defaultof<uint32>

                static member Empty =
                    VkRayTracingPipelineInterfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxPipelineRayPayloadSize = %A" x.maxPipelineRayPayloadSize
                        sprintf "maxPipelineRayHitAttributeSize = %A" x.maxPipelineRayHitAttributeSize
                    ] |> sprintf "VkRayTracingPipelineInterfaceCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRayTracingPipelineCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkPipelineCreateFlags
                val mutable public stageCount : uint32
                val mutable public pStages : nativeptr<VkPipelineShaderStageCreateInfo>
                val mutable public groupCount : uint32
                val mutable public pGroups : nativeptr<VkRayTracingShaderGroupCreateInfoKHR>
                val mutable public maxPipelineRayRecursionDepth : uint32
                val mutable public pLibraryInfo : nativeptr<KHRPipelineLibrary.VkPipelineLibraryCreateInfoKHR>
                val mutable public pLibraryInterface : nativeptr<VkRayTracingPipelineInterfaceCreateInfoKHR>
                val mutable public pDynamicState : nativeptr<VkPipelineDynamicStateCreateInfo>
                val mutable public layout : VkPipelineLayout
                val mutable public basePipelineHandle : VkPipeline
                val mutable public basePipelineIndex : int32

                new(pNext: nativeint, flags: VkPipelineCreateFlags, stageCount: uint32, pStages: nativeptr<VkPipelineShaderStageCreateInfo>, groupCount: uint32, pGroups: nativeptr<VkRayTracingShaderGroupCreateInfoKHR>, maxPipelineRayRecursionDepth: uint32, pLibraryInfo: nativeptr<KHRPipelineLibrary.VkPipelineLibraryCreateInfoKHR>, pLibraryInterface: nativeptr<VkRayTracingPipelineInterfaceCreateInfoKHR>, pDynamicState: nativeptr<VkPipelineDynamicStateCreateInfo>, layout: VkPipelineLayout, basePipelineHandle: VkPipeline, basePipelineIndex: int32) =
                    {
                        sType = 1000150015u
                        pNext = pNext
                        flags = flags
                        stageCount = stageCount
                        pStages = pStages
                        groupCount = groupCount
                        pGroups = pGroups
                        maxPipelineRayRecursionDepth = maxPipelineRayRecursionDepth
                        pLibraryInfo = pLibraryInfo
                        pLibraryInterface = pLibraryInterface
                        pDynamicState = pDynamicState
                        layout = layout
                        basePipelineHandle = basePipelineHandle
                        basePipelineIndex = basePipelineIndex
                    }

                new(flags: VkPipelineCreateFlags, stageCount: uint32, pStages: nativeptr<VkPipelineShaderStageCreateInfo>, groupCount: uint32, pGroups: nativeptr<VkRayTracingShaderGroupCreateInfoKHR>, maxPipelineRayRecursionDepth: uint32, pLibraryInfo: nativeptr<KHRPipelineLibrary.VkPipelineLibraryCreateInfoKHR>, pLibraryInterface: nativeptr<VkRayTracingPipelineInterfaceCreateInfoKHR>, pDynamicState: nativeptr<VkPipelineDynamicStateCreateInfo>, layout: VkPipelineLayout, basePipelineHandle: VkPipeline, basePipelineIndex: int32) =
                    VkRayTracingPipelineCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, stageCount, pStages, groupCount, pGroups, maxPipelineRayRecursionDepth, pLibraryInfo, pLibraryInterface, pDynamicState, layout, basePipelineHandle, basePipelineIndex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCreateFlags> && x.stageCount = Unchecked.defaultof<uint32> && x.pStages = Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>> && x.groupCount = Unchecked.defaultof<uint32> && x.pGroups = Unchecked.defaultof<nativeptr<VkRayTracingShaderGroupCreateInfoKHR>> && x.maxPipelineRayRecursionDepth = Unchecked.defaultof<uint32> && x.pLibraryInfo = Unchecked.defaultof<nativeptr<KHRPipelineLibrary.VkPipelineLibraryCreateInfoKHR>> && x.pLibraryInterface = Unchecked.defaultof<nativeptr<VkRayTracingPipelineInterfaceCreateInfoKHR>> && x.pDynamicState = Unchecked.defaultof<nativeptr<VkPipelineDynamicStateCreateInfo>> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.basePipelineHandle = Unchecked.defaultof<VkPipeline> && x.basePipelineIndex = Unchecked.defaultof<int32>

                static member Empty =
                    VkRayTracingPipelineCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRayTracingShaderGroupCreateInfoKHR>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<KHRPipelineLibrary.VkPipelineLibraryCreateInfoKHR>>, Unchecked.defaultof<nativeptr<VkRayTracingPipelineInterfaceCreateInfoKHR>>, Unchecked.defaultof<nativeptr<VkPipelineDynamicStateCreateInfo>>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<int32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "stageCount = %A" x.stageCount
                        sprintf "pStages = %A" x.pStages
                        sprintf "groupCount = %A" x.groupCount
                        sprintf "pGroups = %A" x.pGroups
                        sprintf "maxPipelineRayRecursionDepth = %A" x.maxPipelineRayRecursionDepth
                        sprintf "pLibraryInfo = %A" x.pLibraryInfo
                        sprintf "pLibraryInterface = %A" x.pLibraryInterface
                        sprintf "pDynamicState = %A" x.pDynamicState
                        sprintf "layout = %A" x.layout
                        sprintf "basePipelineHandle = %A" x.basePipelineHandle
                        sprintf "basePipelineIndex = %A" x.basePipelineIndex
                    ] |> sprintf "VkRayTracingPipelineCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkStridedDeviceAddressRegionKHR =
            struct
                val mutable public deviceAddress : VkDeviceAddress
                val mutable public stride : VkDeviceSize
                val mutable public size : VkDeviceSize

                new(deviceAddress: VkDeviceAddress, stride: VkDeviceSize, size: VkDeviceSize) =
                    {
                        deviceAddress = deviceAddress
                        stride = stride
                        size = size
                    }

                member x.IsEmpty =
                    x.deviceAddress = Unchecked.defaultof<VkDeviceAddress> && x.stride = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkStridedDeviceAddressRegionKHR(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "deviceAddress = %A" x.deviceAddress
                        sprintf "stride = %A" x.stride
                        sprintf "size = %A" x.size
                    ] |> sprintf "VkStridedDeviceAddressRegionKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkTraceRaysIndirectCommandKHR =
            struct
                val mutable public width : uint32
                val mutable public height : uint32
                val mutable public depth : uint32

                new(width: uint32, height: uint32, depth: uint32) =
                    {
                        width = width
                        height = height
                        depth = depth
                    }

                member x.IsEmpty =
                    x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32> && x.depth = Unchecked.defaultof<uint32>

                static member Empty =
                    VkTraceRaysIndirectCommandKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "width = %A" x.width
                        sprintf "height = %A" x.height
                        sprintf "depth = %A" x.depth
                    ] |> sprintf "VkTraceRaysIndirectCommandKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkBufferUsageFlags with
                  static member inline ShaderBindingTableBitKhr = enum<VkBufferUsageFlags> 0x00000400
             type VkDynamicState with
                  static member inline RayTracingPipelineStackSizeKhr = enum<VkDynamicState> 1000347000
             type VkPipelineBindPoint with
                  static member inline RayTracingKhr = enum<VkPipelineBindPoint> 1000165000
             type VkPipelineCreateFlags with
                  static member inline RayTracingNoNullAnyHitShadersBitKhr = enum<VkPipelineCreateFlags> 0x00004000
                  static member inline RayTracingNoNullClosestHitShadersBitKhr = enum<VkPipelineCreateFlags> 0x00008000
                  static member inline RayTracingNoNullMissShadersBitKhr = enum<VkPipelineCreateFlags> 0x00010000
                  static member inline RayTracingNoNullIntersectionShadersBitKhr = enum<VkPipelineCreateFlags> 0x00020000
                  static member inline RayTracingSkipTrianglesBitKhr = enum<VkPipelineCreateFlags> 0x00001000
                  static member inline RayTracingSkipAabbsBitKhr = enum<VkPipelineCreateFlags> 0x00002000
                  static member inline RayTracingShaderGroupHandleCaptureReplayBitKhr = enum<VkPipelineCreateFlags> 0x00080000
             type Vulkan14.VkPipelineCreateFlags2 with
                  static member inline PipelineCreate2RayTracingSkipBuiltInPrimitivesBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00001000
             type VkPipelineStageFlags with
                  static member inline RayTracingShaderBitKhr = enum<VkPipelineStageFlags> 0x00200000
             type VkShaderStageFlags with
                  static member inline RaygenBitKhr = enum<VkShaderStageFlags> 0x00000100
                  static member inline AnyHitBitKhr = enum<VkShaderStageFlags> 0x00000200
                  static member inline ClosestHitBitKhr = enum<VkShaderStageFlags> 0x00000400
                  static member inline MissBitKhr = enum<VkShaderStageFlags> 0x00000800
                  static member inline IntersectionBitKhr = enum<VkShaderStageFlags> 0x00001000
                  static member inline CallableBitKhr = enum<VkShaderStageFlags> 0x00002000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdTraceRaysKHRDel = delegate of VkCommandBuffer * nativeptr<VkStridedDeviceAddressRegionKHR> * nativeptr<VkStridedDeviceAddressRegionKHR> * nativeptr<VkStridedDeviceAddressRegionKHR> * nativeptr<VkStridedDeviceAddressRegionKHR> * uint32 * uint32 * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateRayTracingPipelinesKHRDel = delegate of VkDevice * KHRDeferredHostOperations.VkDeferredOperationKHR * VkPipelineCache * uint32 * nativeptr<VkRayTracingPipelineCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkPipeline> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetRayTracingShaderGroupHandlesKHRDel = delegate of VkDevice * VkPipeline * uint32 * uint32 * uint64 * nativeint -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetRayTracingCaptureReplayShaderGroupHandlesKHRDel = delegate of VkDevice * VkPipeline * uint32 * uint32 * uint64 * nativeint -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdTraceRaysIndirectKHRDel = delegate of VkCommandBuffer * nativeptr<VkStridedDeviceAddressRegionKHR> * nativeptr<VkStridedDeviceAddressRegionKHR> * nativeptr<VkStridedDeviceAddressRegionKHR> * nativeptr<VkStridedDeviceAddressRegionKHR> * VkDeviceAddress -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetRayTracingShaderGroupStackSizeKHRDel = delegate of VkDevice * VkPipeline * uint32 * VkShaderGroupShaderKHR -> VkDeviceSize
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetRayTracingPipelineStackSizeKHRDel = delegate of VkCommandBuffer * uint32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRRayTracingPipeline")
                static let s_vkCmdTraceRaysKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdTraceRaysKHRDel> "vkCmdTraceRaysKHR"
                static let s_vkCreateRayTracingPipelinesKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateRayTracingPipelinesKHRDel> "vkCreateRayTracingPipelinesKHR"
                static let s_vkGetRayTracingShaderGroupHandlesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetRayTracingShaderGroupHandlesKHRDel> "vkGetRayTracingShaderGroupHandlesKHR"
                static let s_vkGetRayTracingCaptureReplayShaderGroupHandlesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetRayTracingCaptureReplayShaderGroupHandlesKHRDel> "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"
                static let s_vkCmdTraceRaysIndirectKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdTraceRaysIndirectKHRDel> "vkCmdTraceRaysIndirectKHR"
                static let s_vkGetRayTracingShaderGroupStackSizeKHRDel = VkRaw.vkImportInstanceDelegate<VkGetRayTracingShaderGroupStackSizeKHRDel> "vkGetRayTracingShaderGroupStackSizeKHR"
                static let s_vkCmdSetRayTracingPipelineStackSizeKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdSetRayTracingPipelineStackSizeKHRDel> "vkCmdSetRayTracingPipelineStackSizeKHR"
                static do Report.End(3) |> ignore
                static member vkCmdTraceRaysKHR = s_vkCmdTraceRaysKHRDel
                static member vkCreateRayTracingPipelinesKHR = s_vkCreateRayTracingPipelinesKHRDel
                static member vkGetRayTracingShaderGroupHandlesKHR = s_vkGetRayTracingShaderGroupHandlesKHRDel
                static member vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = s_vkGetRayTracingCaptureReplayShaderGroupHandlesKHRDel
                static member vkCmdTraceRaysIndirectKHR = s_vkCmdTraceRaysIndirectKHRDel
                static member vkGetRayTracingShaderGroupStackSizeKHR = s_vkGetRayTracingShaderGroupStackSizeKHRDel
                static member vkCmdSetRayTracingPipelineStackSizeKHR = s_vkCmdSetRayTracingPipelineStackSizeKHRDel
            let vkCmdTraceRaysKHR(commandBuffer : VkCommandBuffer, pRaygenShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, pMissShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, pHitShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, pCallableShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, width : uint32, height : uint32, depth : uint32) = Loader<unit>.vkCmdTraceRaysKHR.Invoke(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth)
            let vkCreateRayTracingPipelinesKHR(device : VkDevice, deferredOperation : KHRDeferredHostOperations.VkDeferredOperationKHR, pipelineCache : VkPipelineCache, createInfoCount : uint32, pCreateInfos : nativeptr<VkRayTracingPipelineCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pPipelines : nativeptr<VkPipeline>) = Loader<unit>.vkCreateRayTracingPipelinesKHR.Invoke(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
            let vkGetRayTracingShaderGroupHandlesKHR(device : VkDevice, pipeline : VkPipeline, firstGroup : uint32, groupCount : uint32, dataSize : uint64, pData : nativeint) = Loader<unit>.vkGetRayTracingShaderGroupHandlesKHR.Invoke(device, pipeline, firstGroup, groupCount, dataSize, pData)
            let vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device : VkDevice, pipeline : VkPipeline, firstGroup : uint32, groupCount : uint32, dataSize : uint64, pData : nativeint) = Loader<unit>.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR.Invoke(device, pipeline, firstGroup, groupCount, dataSize, pData)
            let vkCmdTraceRaysIndirectKHR(commandBuffer : VkCommandBuffer, pRaygenShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, pMissShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, pHitShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, pCallableShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, indirectDeviceAddress : VkDeviceAddress) = Loader<unit>.vkCmdTraceRaysIndirectKHR.Invoke(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress)
            let vkGetRayTracingShaderGroupStackSizeKHR(device : VkDevice, pipeline : VkPipeline, group : uint32, groupShader : VkShaderGroupShaderKHR) = Loader<unit>.vkGetRayTracingShaderGroupStackSizeKHR.Invoke(device, pipeline, group, groupShader)
            let vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer : VkCommandBuffer, pipelineStackSize : uint32) = Loader<unit>.vkCmdSetRayTracingPipelineStackSizeKHR.Invoke(commandBuffer, pipelineStackSize)

    /// Requires KHRSpirv14, KHRAccelerationStructure.
    module KHRRayQuery =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_ray_query"
        let Number = 349

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRayQueryFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public rayQuery : VkBool32

                new(pNext: nativeint, rayQuery: VkBool32) =
                    {
                        sType = 1000348013u
                        pNext = pNext
                        rayQuery = rayQuery
                    }

                new(rayQuery: VkBool32) =
                    VkPhysicalDeviceRayQueryFeaturesKHR(Unchecked.defaultof<nativeint>, rayQuery)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.rayQuery = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRayQueryFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "rayQuery = %A" x.rayQuery
                    ] |> sprintf "VkPhysicalDeviceRayQueryFeaturesKHR { %s }"
            end



    /// Requires KHRMaintenance3.
    /// Promoted to EXTMutableDescriptorType.
    module VALVEMutableDescriptorType =
        let Type = ExtensionType.Device
        let Name = "VK_VALVE_mutable_descriptor_type"
        let Number = 352

        type VkMutableDescriptorTypeCreateInfoVALVE = EXTMutableDescriptorType.VkMutableDescriptorTypeCreateInfoEXT

        type VkMutableDescriptorTypeListVALVE = EXTMutableDescriptorType.VkMutableDescriptorTypeListEXT

        type VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE = EXTMutableDescriptorType.VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT


        [<AutoOpen>]
        module EnumExtensions =
             type VkDescriptorPoolCreateFlags with
                  static member inline HostOnlyBitValve = enum<VkDescriptorPoolCreateFlags> 0x00000004
             type VkDescriptorSetLayoutCreateFlags with
                  static member inline HostOnlyPoolBitValve = enum<VkDescriptorSetLayoutCreateFlags> 0x00000004
             type VkDescriptorType with
                  static member inline MutableValve = enum<VkDescriptorType> 1000351000


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTVertexInputDynamicState =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_vertex_input_dynamic_state"
        let Number = 353

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public vertexInputDynamicState : VkBool32

                new(pNext: nativeint, vertexInputDynamicState: VkBool32) =
                    {
                        sType = 1000352000u
                        pNext = pNext
                        vertexInputDynamicState = vertexInputDynamicState
                    }

                new(vertexInputDynamicState: VkBool32) =
                    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(Unchecked.defaultof<nativeint>, vertexInputDynamicState)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.vertexInputDynamicState = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "vertexInputDynamicState = %A" x.vertexInputDynamicState
                    ] |> sprintf "VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVertexInputAttributeDescription2EXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public location : uint32
                val mutable public binding : uint32
                val mutable public format : VkFormat
                val mutable public offset : uint32

                new(pNext: nativeint, location: uint32, binding: uint32, format: VkFormat, offset: uint32) =
                    {
                        sType = 1000352002u
                        pNext = pNext
                        location = location
                        binding = binding
                        format = format
                        offset = offset
                    }

                new(location: uint32, binding: uint32, format: VkFormat, offset: uint32) =
                    VkVertexInputAttributeDescription2EXT(Unchecked.defaultof<nativeint>, location, binding, format, offset)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.location = Unchecked.defaultof<uint32> && x.binding = Unchecked.defaultof<uint32> && x.format = Unchecked.defaultof<VkFormat> && x.offset = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVertexInputAttributeDescription2EXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "location = %A" x.location
                        sprintf "binding = %A" x.binding
                        sprintf "format = %A" x.format
                        sprintf "offset = %A" x.offset
                    ] |> sprintf "VkVertexInputAttributeDescription2EXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVertexInputBindingDescription2EXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public binding : uint32
                val mutable public stride : uint32
                val mutable public inputRate : VkVertexInputRate
                val mutable public divisor : uint32

                new(pNext: nativeint, binding: uint32, stride: uint32, inputRate: VkVertexInputRate, divisor: uint32) =
                    {
                        sType = 1000352001u
                        pNext = pNext
                        binding = binding
                        stride = stride
                        inputRate = inputRate
                        divisor = divisor
                    }

                new(binding: uint32, stride: uint32, inputRate: VkVertexInputRate, divisor: uint32) =
                    VkVertexInputBindingDescription2EXT(Unchecked.defaultof<nativeint>, binding, stride, inputRate, divisor)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.binding = Unchecked.defaultof<uint32> && x.stride = Unchecked.defaultof<uint32> && x.inputRate = Unchecked.defaultof<VkVertexInputRate> && x.divisor = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVertexInputBindingDescription2EXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkVertexInputRate>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "binding = %A" x.binding
                        sprintf "stride = %A" x.stride
                        sprintf "inputRate = %A" x.inputRate
                        sprintf "divisor = %A" x.divisor
                    ] |> sprintf "VkVertexInputBindingDescription2EXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  static member inline VertexInputExt = enum<VkDynamicState> 1000352000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetVertexInputEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkVertexInputBindingDescription2EXT> * uint32 * nativeptr<VkVertexInputAttributeDescription2EXT> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTVertexInputDynamicState")
                static let s_vkCmdSetVertexInputEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetVertexInputEXTDel> "vkCmdSetVertexInputEXT"
                static do Report.End(3) |> ignore
                static member vkCmdSetVertexInputEXT = s_vkCmdSetVertexInputEXTDel
            let vkCmdSetVertexInputEXT(commandBuffer : VkCommandBuffer, vertexBindingDescriptionCount : uint32, pVertexBindingDescriptions : nativeptr<VkVertexInputBindingDescription2EXT>, vertexAttributeDescriptionCount : uint32, pVertexAttributeDescriptions : nativeptr<VkVertexInputAttributeDescription2EXT>) = Loader<unit>.vkCmdSetVertexInputEXT.Invoke(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTPhysicalDeviceDrm =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_physical_device_drm"
        let Number = 354

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDrmPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public hasPrimary : VkBool32
                val mutable public hasRender : VkBool32
                val mutable public primaryMajor : int64
                val mutable public primaryMinor : int64
                val mutable public renderMajor : int64
                val mutable public renderMinor : int64

                new(pNext: nativeint, hasPrimary: VkBool32, hasRender: VkBool32, primaryMajor: int64, primaryMinor: int64, renderMajor: int64, renderMinor: int64) =
                    {
                        sType = 1000353000u
                        pNext = pNext
                        hasPrimary = hasPrimary
                        hasRender = hasRender
                        primaryMajor = primaryMajor
                        primaryMinor = primaryMinor
                        renderMajor = renderMajor
                        renderMinor = renderMinor
                    }

                new(hasPrimary: VkBool32, hasRender: VkBool32, primaryMajor: int64, primaryMinor: int64, renderMajor: int64, renderMinor: int64) =
                    VkPhysicalDeviceDrmPropertiesEXT(Unchecked.defaultof<nativeint>, hasPrimary, hasRender, primaryMajor, primaryMinor, renderMajor, renderMinor)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.hasPrimary = Unchecked.defaultof<VkBool32> && x.hasRender = Unchecked.defaultof<VkBool32> && x.primaryMajor = Unchecked.defaultof<int64> && x.primaryMinor = Unchecked.defaultof<int64> && x.renderMajor = Unchecked.defaultof<int64> && x.renderMinor = Unchecked.defaultof<int64>

                static member Empty =
                    VkPhysicalDeviceDrmPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<int64>, Unchecked.defaultof<int64>, Unchecked.defaultof<int64>, Unchecked.defaultof<int64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "hasPrimary = %A" x.hasPrimary
                        sprintf "hasRender = %A" x.hasRender
                        sprintf "primaryMajor = %A" x.primaryMajor
                        sprintf "primaryMinor = %A" x.primaryMinor
                        sprintf "renderMajor = %A" x.renderMajor
                        sprintf "renderMinor = %A" x.renderMinor
                    ] |> sprintf "VkPhysicalDeviceDrmPropertiesEXT { %s }"
            end



    /// Requires (KHRGetPhysicalDeviceProperties2 | Vulkan11), EXTDebugUtils.
    module EXTDeviceAddressBindingReport =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_device_address_binding_report"
        let Number = 355

        [<Flags>]
        type VkDeviceAddressBindingFlagsEXT =
            | All = 1
            | None = 0
            | InternalObjectBit = 0x00000001

        type VkDeviceAddressBindingTypeEXT =
            | Bind = 0
            | Unbind = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceAddressBindingCallbackDataEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkDeviceAddressBindingFlagsEXT
                val mutable public baseAddress : VkDeviceAddress
                val mutable public size : VkDeviceSize
                val mutable public bindingType : VkDeviceAddressBindingTypeEXT

                new(pNext: nativeint, flags: VkDeviceAddressBindingFlagsEXT, baseAddress: VkDeviceAddress, size: VkDeviceSize, bindingType: VkDeviceAddressBindingTypeEXT) =
                    {
                        sType = 1000354001u
                        pNext = pNext
                        flags = flags
                        baseAddress = baseAddress
                        size = size
                        bindingType = bindingType
                    }

                new(flags: VkDeviceAddressBindingFlagsEXT, baseAddress: VkDeviceAddress, size: VkDeviceSize, bindingType: VkDeviceAddressBindingTypeEXT) =
                    VkDeviceAddressBindingCallbackDataEXT(Unchecked.defaultof<nativeint>, flags, baseAddress, size, bindingType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceAddressBindingFlagsEXT> && x.baseAddress = Unchecked.defaultof<VkDeviceAddress> && x.size = Unchecked.defaultof<VkDeviceSize> && x.bindingType = Unchecked.defaultof<VkDeviceAddressBindingTypeEXT>

                static member Empty =
                    VkDeviceAddressBindingCallbackDataEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceAddressBindingFlagsEXT>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceAddressBindingTypeEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "baseAddress = %A" x.baseAddress
                        sprintf "size = %A" x.size
                        sprintf "bindingType = %A" x.bindingType
                    ] |> sprintf "VkDeviceAddressBindingCallbackDataEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceAddressBindingReportFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public reportAddressBinding : VkBool32

                new(pNext: nativeint, reportAddressBinding: VkBool32) =
                    {
                        sType = 1000354000u
                        pNext = pNext
                        reportAddressBinding = reportAddressBinding
                    }

                new(reportAddressBinding: VkBool32) =
                    VkPhysicalDeviceAddressBindingReportFeaturesEXT(Unchecked.defaultof<nativeint>, reportAddressBinding)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.reportAddressBinding = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceAddressBindingReportFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "reportAddressBinding = %A" x.reportAddressBinding
                    ] |> sprintf "VkPhysicalDeviceAddressBindingReportFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type EXTDebugUtils.VkDebugUtilsMessageTypeFlagsEXT with
                  static member inline DeviceAddressBindingBit = enum<EXTDebugUtils.VkDebugUtilsMessageTypeFlagsEXT> 0x00000008


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTDepthClipControl =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_depth_clip_control"
        let Number = 356

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDepthClipControlFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public depthClipControl : VkBool32

                new(pNext: nativeint, depthClipControl: VkBool32) =
                    {
                        sType = 1000355000u
                        pNext = pNext
                        depthClipControl = depthClipControl
                    }

                new(depthClipControl: VkBool32) =
                    VkPhysicalDeviceDepthClipControlFeaturesEXT(Unchecked.defaultof<nativeint>, depthClipControl)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.depthClipControl = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDepthClipControlFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "depthClipControl = %A" x.depthClipControl
                    ] |> sprintf "VkPhysicalDeviceDepthClipControlFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineViewportDepthClipControlCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public negativeOneToOne : VkBool32

                new(pNext: nativeint, negativeOneToOne: VkBool32) =
                    {
                        sType = 1000355001u
                        pNext = pNext
                        negativeOneToOne = negativeOneToOne
                    }

                new(negativeOneToOne: VkBool32) =
                    VkPipelineViewportDepthClipControlCreateInfoEXT(Unchecked.defaultof<nativeint>, negativeOneToOne)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.negativeOneToOne = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPipelineViewportDepthClipControlCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "negativeOneToOne = %A" x.negativeOneToOne
                    ] |> sprintf "VkPipelineViewportDepthClipControlCreateInfoEXT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTPrimitiveTopologyListRestart =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_primitive_topology_list_restart"
        let Number = 357

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public primitiveTopologyListRestart : VkBool32
                val mutable public primitiveTopologyPatchListRestart : VkBool32

                new(pNext: nativeint, primitiveTopologyListRestart: VkBool32, primitiveTopologyPatchListRestart: VkBool32) =
                    {
                        sType = 1000356000u
                        pNext = pNext
                        primitiveTopologyListRestart = primitiveTopologyListRestart
                        primitiveTopologyPatchListRestart = primitiveTopologyPatchListRestart
                    }

                new(primitiveTopologyListRestart: VkBool32, primitiveTopologyPatchListRestart: VkBool32) =
                    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(Unchecked.defaultof<nativeint>, primitiveTopologyListRestart, primitiveTopologyPatchListRestart)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.primitiveTopologyListRestart = Unchecked.defaultof<VkBool32> && x.primitiveTopologyPatchListRestart = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "primitiveTopologyListRestart = %A" x.primitiveTopologyListRestart
                        sprintf "primitiveTopologyPatchListRestart = %A" x.primitiveTopologyPatchListRestart
                    ] |> sprintf "VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module KHRFormatFeatureFlags2 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_format_feature_flags2"
        let Number = 361

        type VkFormatFeatureFlags2KHR = Vulkan13.VkFormatFeatureFlags2

        type VkFormatProperties3KHR = Vulkan13.VkFormatProperties3


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkFormatFeatureFlags2 with
                  static member inline FormatFeature2SampledImageBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000001
                  static member inline FormatFeature2StorageImageBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000002
                  static member inline FormatFeature2StorageImageAtomicBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000004
                  static member inline FormatFeature2UniformTexelBufferBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000008
                  static member inline FormatFeature2StorageTexelBufferBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000010
                  static member inline FormatFeature2StorageTexelBufferAtomicBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000020
                  static member inline FormatFeature2VertexBufferBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000040
                  static member inline FormatFeature2ColorAttachmentBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000080
                  static member inline FormatFeature2ColorAttachmentBlendBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000100
                  static member inline FormatFeature2DepthStencilAttachmentBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000200
                  static member inline FormatFeature2BlitSrcBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000400
                  static member inline FormatFeature2BlitDstBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000800
                  static member inline FormatFeature2SampledImageFilterLinearBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00001000
                  static member inline FormatFeature2TransferSrcBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00004000
                  static member inline FormatFeature2TransferDstBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00008000
                  static member inline FormatFeature2MidpointChromaSamplesBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00020000
                  static member inline FormatFeature2SampledImageYcbcrConversionLinearFilterBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00040000
                  static member inline FormatFeature2SampledImageYcbcrConversionSeparateReconstructionFilterBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00080000
                  static member inline FormatFeature2SampledImageYcbcrConversionChromaReconstructionExplicitBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00100000
                  static member inline FormatFeature2SampledImageYcbcrConversionChromaReconstructionExplicitForceableBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00200000
                  static member inline FormatFeature2DisjointBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00400000
                  static member inline FormatFeature2CositedChromaSamplesBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00800000
                  static member inline FormatFeature2StorageReadWithoutFormatBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x80000000
                  static member inline FormatFeature2StorageWriteWithoutFormatBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000001
                  static member inline FormatFeature2SampledImageDepthComparisonBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000002


        [<AutoOpen>]
        module ``Vulkan12 | EXTSamplerFilterMinmax`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkFormatFeatureFlags2 with
                      static member inline FormatFeature2SampledImageFilterMinmaxBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00010000


        [<AutoOpen>]
        module ``EXTFilterCubic | IMGFilterCubic`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkFormatFeatureFlags2 with
                      static member inline FormatFeature2SampledImageFilterCubicBitExt = enum<Vulkan13.VkFormatFeatureFlags2> 0x00002000


    /// Requires KHRSwapchain.
    module EXTPresentModeFifoLatestReady =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_present_mode_fifo_latest_ready"
        let Number = 362

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentModeFifoLatestReady : VkBool32

                new(pNext: nativeint, presentModeFifoLatestReady: VkBool32) =
                    {
                        sType = 1000361000u
                        pNext = pNext
                        presentModeFifoLatestReady = presentModeFifoLatestReady
                    }

                new(presentModeFifoLatestReady: VkBool32) =
                    VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT(Unchecked.defaultof<nativeint>, presentModeFifoLatestReady)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentModeFifoLatestReady = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentModeFifoLatestReady = %A" x.presentModeFifoLatestReady
                    ] |> sprintf "VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRSurface.VkPresentModeKHR with
                  static member inline FifoLatestReadyExt = enum<KHRSurface.VkPresentModeKHR> 1000361000


    /// Requires (KHRExternalMemoryCapabilities, KHRExternalMemory) | Vulkan11.
    module FUCHSIAExternalMemory =
        let Type = ExtensionType.Device
        let Name = "VK_FUCHSIA_external_memory"
        let Number = 365

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportMemoryZirconHandleInfoFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public handleType : Vulkan11.VkExternalMemoryHandleTypeFlags
                val mutable public handle : nativeint

                new(pNext: nativeint, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags, handle: nativeint) =
                    {
                        sType = 1000364000u
                        pNext = pNext
                        handleType = handleType
                        handle = handle
                    }

                new(handleType: Vulkan11.VkExternalMemoryHandleTypeFlags, handle: nativeint) =
                    VkImportMemoryZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, handleType, handle)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags> && x.handle = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkImportMemoryZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "handleType = %A" x.handleType
                        sprintf "handle = %A" x.handle
                    ] |> sprintf "VkImportMemoryZirconHandleInfoFUCHSIA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryGetZirconHandleInfoFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memory : VkDeviceMemory
                val mutable public handleType : Vulkan11.VkExternalMemoryHandleTypeFlags

                new(pNext: nativeint, memory: VkDeviceMemory, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags) =
                    {
                        sType = 1000364002u
                        pNext = pNext
                        memory = memory
                        handleType = handleType
                    }

                new(memory: VkDeviceMemory, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags) =
                    VkMemoryGetZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, memory, handleType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>

                static member Empty =
                    VkMemoryGetZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memory = %A" x.memory
                        sprintf "handleType = %A" x.handleType
                    ] |> sprintf "VkMemoryGetZirconHandleInfoFUCHSIA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryZirconHandlePropertiesFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memoryTypeBits : uint32

                new(pNext: nativeint, memoryTypeBits: uint32) =
                    {
                        sType = 1000364001u
                        pNext = pNext
                        memoryTypeBits = memoryTypeBits
                    }

                new(memoryTypeBits: uint32) =
                    VkMemoryZirconHandlePropertiesFUCHSIA(Unchecked.defaultof<nativeint>, memoryTypeBits)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memoryTypeBits = Unchecked.defaultof<uint32>

                static member Empty =
                    VkMemoryZirconHandlePropertiesFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memoryTypeBits = %A" x.memoryTypeBits
                    ] |> sprintf "VkMemoryZirconHandlePropertiesFUCHSIA { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkExternalMemoryHandleTypeFlags with
                  static member inline ZirconVmoBitFuchsia = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00000800

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMemoryZirconHandleFUCHSIADel = delegate of VkDevice * nativeptr<VkMemoryGetZirconHandleInfoFUCHSIA> * nativeptr<nativeint> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMemoryZirconHandlePropertiesFUCHSIADel = delegate of VkDevice * Vulkan11.VkExternalMemoryHandleTypeFlags * nativeint * nativeptr<VkMemoryZirconHandlePropertiesFUCHSIA> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading FUCHSIAExternalMemory")
                static let s_vkGetMemoryZirconHandleFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkGetMemoryZirconHandleFUCHSIADel> "vkGetMemoryZirconHandleFUCHSIA"
                static let s_vkGetMemoryZirconHandlePropertiesFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkGetMemoryZirconHandlePropertiesFUCHSIADel> "vkGetMemoryZirconHandlePropertiesFUCHSIA"
                static do Report.End(3) |> ignore
                static member vkGetMemoryZirconHandleFUCHSIA = s_vkGetMemoryZirconHandleFUCHSIADel
                static member vkGetMemoryZirconHandlePropertiesFUCHSIA = s_vkGetMemoryZirconHandlePropertiesFUCHSIADel
            let vkGetMemoryZirconHandleFUCHSIA(device : VkDevice, pGetZirconHandleInfo : nativeptr<VkMemoryGetZirconHandleInfoFUCHSIA>, pZirconHandle : nativeptr<nativeint>) = Loader<unit>.vkGetMemoryZirconHandleFUCHSIA.Invoke(device, pGetZirconHandleInfo, pZirconHandle)
            let vkGetMemoryZirconHandlePropertiesFUCHSIA(device : VkDevice, handleType : Vulkan11.VkExternalMemoryHandleTypeFlags, zirconHandle : nativeint, pMemoryZirconHandleProperties : nativeptr<VkMemoryZirconHandlePropertiesFUCHSIA>) = Loader<unit>.vkGetMemoryZirconHandlePropertiesFUCHSIA.Invoke(device, handleType, zirconHandle, pMemoryZirconHandleProperties)

    /// Requires KHRExternalSemaphoreCapabilities, KHRExternalSemaphore.
    module FUCHSIAExternalSemaphore =
        let Type = ExtensionType.Device
        let Name = "VK_FUCHSIA_external_semaphore"
        let Number = 366

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportSemaphoreZirconHandleInfoFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public semaphore : VkSemaphore
                val mutable public flags : Vulkan11.VkSemaphoreImportFlags
                val mutable public handleType : Vulkan11.VkExternalSemaphoreHandleTypeFlags
                val mutable public zirconHandle : nativeint

                new(pNext: nativeint, semaphore: VkSemaphore, flags: Vulkan11.VkSemaphoreImportFlags, handleType: Vulkan11.VkExternalSemaphoreHandleTypeFlags, zirconHandle: nativeint) =
                    {
                        sType = 1000365000u
                        pNext = pNext
                        semaphore = semaphore
                        flags = flags
                        handleType = handleType
                        zirconHandle = zirconHandle
                    }

                new(semaphore: VkSemaphore, flags: Vulkan11.VkSemaphoreImportFlags, handleType: Vulkan11.VkExternalSemaphoreHandleTypeFlags, zirconHandle: nativeint) =
                    VkImportSemaphoreZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, semaphore, flags, handleType, zirconHandle)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.flags = Unchecked.defaultof<Vulkan11.VkSemaphoreImportFlags> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalSemaphoreHandleTypeFlags> && x.zirconHandle = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkImportSemaphoreZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<Vulkan11.VkSemaphoreImportFlags>, Unchecked.defaultof<Vulkan11.VkExternalSemaphoreHandleTypeFlags>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "semaphore = %A" x.semaphore
                        sprintf "flags = %A" x.flags
                        sprintf "handleType = %A" x.handleType
                        sprintf "zirconHandle = %A" x.zirconHandle
                    ] |> sprintf "VkImportSemaphoreZirconHandleInfoFUCHSIA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSemaphoreGetZirconHandleInfoFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public semaphore : VkSemaphore
                val mutable public handleType : Vulkan11.VkExternalSemaphoreHandleTypeFlags

                new(pNext: nativeint, semaphore: VkSemaphore, handleType: Vulkan11.VkExternalSemaphoreHandleTypeFlags) =
                    {
                        sType = 1000365001u
                        pNext = pNext
                        semaphore = semaphore
                        handleType = handleType
                    }

                new(semaphore: VkSemaphore, handleType: Vulkan11.VkExternalSemaphoreHandleTypeFlags) =
                    VkSemaphoreGetZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, semaphore, handleType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalSemaphoreHandleTypeFlags>

                static member Empty =
                    VkSemaphoreGetZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<Vulkan11.VkExternalSemaphoreHandleTypeFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "semaphore = %A" x.semaphore
                        sprintf "handleType = %A" x.handleType
                    ] |> sprintf "VkSemaphoreGetZirconHandleInfoFUCHSIA { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkExternalSemaphoreHandleTypeFlags with
                  static member inline ZirconEventBitFuchsia = enum<Vulkan11.VkExternalSemaphoreHandleTypeFlags> 0x00000080

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkImportSemaphoreZirconHandleFUCHSIADel = delegate of VkDevice * nativeptr<VkImportSemaphoreZirconHandleInfoFUCHSIA> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetSemaphoreZirconHandleFUCHSIADel = delegate of VkDevice * nativeptr<VkSemaphoreGetZirconHandleInfoFUCHSIA> * nativeptr<nativeint> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading FUCHSIAExternalSemaphore")
                static let s_vkImportSemaphoreZirconHandleFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkImportSemaphoreZirconHandleFUCHSIADel> "vkImportSemaphoreZirconHandleFUCHSIA"
                static let s_vkGetSemaphoreZirconHandleFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkGetSemaphoreZirconHandleFUCHSIADel> "vkGetSemaphoreZirconHandleFUCHSIA"
                static do Report.End(3) |> ignore
                static member vkImportSemaphoreZirconHandleFUCHSIA = s_vkImportSemaphoreZirconHandleFUCHSIADel
                static member vkGetSemaphoreZirconHandleFUCHSIA = s_vkGetSemaphoreZirconHandleFUCHSIADel
            let vkImportSemaphoreZirconHandleFUCHSIA(device : VkDevice, pImportSemaphoreZirconHandleInfo : nativeptr<VkImportSemaphoreZirconHandleInfoFUCHSIA>) = Loader<unit>.vkImportSemaphoreZirconHandleFUCHSIA.Invoke(device, pImportSemaphoreZirconHandleInfo)
            let vkGetSemaphoreZirconHandleFUCHSIA(device : VkDevice, pGetZirconHandleInfo : nativeptr<VkSemaphoreGetZirconHandleInfoFUCHSIA>, pZirconHandle : nativeptr<nativeint>) = Loader<unit>.vkGetSemaphoreZirconHandleFUCHSIA.Invoke(device, pGetZirconHandleInfo, pZirconHandle)

    /// Requires FUCHSIAExternalMemory, (KHRSamplerYcbcrConversion | Vulkan11).
    module FUCHSIABufferCollection =
        let Type = ExtensionType.Device
        let Name = "VK_FUCHSIA_buffer_collection"
        let Number = 367


        [<StructLayout(LayoutKind.Sequential)>]
        type VkBufferCollectionFUCHSIA =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkBufferCollectionFUCHSIA(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<Flags>]
        type VkImageFormatConstraintsFlagsFUCHSIA =
            | All = 0
            | None = 0

        [<Flags>]
        type VkImageConstraintsInfoFlagsFUCHSIA =
            | All = 31
            | None = 0
            | CpuReadRarely = 0x00000001
            | CpuReadOften = 0x00000002
            | CpuWriteRarely = 0x00000004
            | CpuWriteOften = 0x00000008
            | ProtectedOptional = 0x00000010


        [<StructLayout(LayoutKind.Sequential)>]
        type VkBufferCollectionBufferCreateInfoFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public collection : VkBufferCollectionFUCHSIA
                val mutable public index : uint32

                new(pNext: nativeint, collection: VkBufferCollectionFUCHSIA, index: uint32) =
                    {
                        sType = 1000366005u
                        pNext = pNext
                        collection = collection
                        index = index
                    }

                new(collection: VkBufferCollectionFUCHSIA, index: uint32) =
                    VkBufferCollectionBufferCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, collection, index)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.collection = Unchecked.defaultof<VkBufferCollectionFUCHSIA> && x.index = Unchecked.defaultof<uint32>

                static member Empty =
                    VkBufferCollectionBufferCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferCollectionFUCHSIA>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "collection = %A" x.collection
                        sprintf "index = %A" x.index
                    ] |> sprintf "VkBufferCollectionBufferCreateInfoFUCHSIA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBufferCollectionConstraintsInfoFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public minBufferCount : uint32
                val mutable public maxBufferCount : uint32
                val mutable public minBufferCountForCamping : uint32
                val mutable public minBufferCountForDedicatedSlack : uint32
                val mutable public minBufferCountForSharedSlack : uint32

                new(pNext: nativeint, minBufferCount: uint32, maxBufferCount: uint32, minBufferCountForCamping: uint32, minBufferCountForDedicatedSlack: uint32, minBufferCountForSharedSlack: uint32) =
                    {
                        sType = 1000366009u
                        pNext = pNext
                        minBufferCount = minBufferCount
                        maxBufferCount = maxBufferCount
                        minBufferCountForCamping = minBufferCountForCamping
                        minBufferCountForDedicatedSlack = minBufferCountForDedicatedSlack
                        minBufferCountForSharedSlack = minBufferCountForSharedSlack
                    }

                new(minBufferCount: uint32, maxBufferCount: uint32, minBufferCountForCamping: uint32, minBufferCountForDedicatedSlack: uint32, minBufferCountForSharedSlack: uint32) =
                    VkBufferCollectionConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, minBufferCount, maxBufferCount, minBufferCountForCamping, minBufferCountForDedicatedSlack, minBufferCountForSharedSlack)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.minBufferCount = Unchecked.defaultof<uint32> && x.maxBufferCount = Unchecked.defaultof<uint32> && x.minBufferCountForCamping = Unchecked.defaultof<uint32> && x.minBufferCountForDedicatedSlack = Unchecked.defaultof<uint32> && x.minBufferCountForSharedSlack = Unchecked.defaultof<uint32>

                static member Empty =
                    VkBufferCollectionConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "minBufferCount = %A" x.minBufferCount
                        sprintf "maxBufferCount = %A" x.maxBufferCount
                        sprintf "minBufferCountForCamping = %A" x.minBufferCountForCamping
                        sprintf "minBufferCountForDedicatedSlack = %A" x.minBufferCountForDedicatedSlack
                        sprintf "minBufferCountForSharedSlack = %A" x.minBufferCountForSharedSlack
                    ] |> sprintf "VkBufferCollectionConstraintsInfoFUCHSIA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBufferCollectionCreateInfoFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public collectionToken : nativeint

                new(pNext: nativeint, collectionToken: nativeint) =
                    {
                        sType = 1000366000u
                        pNext = pNext
                        collectionToken = collectionToken
                    }

                new(collectionToken: nativeint) =
                    VkBufferCollectionCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, collectionToken)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.collectionToken = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkBufferCollectionCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "collectionToken = %A" x.collectionToken
                    ] |> sprintf "VkBufferCollectionCreateInfoFUCHSIA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBufferCollectionImageCreateInfoFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public collection : VkBufferCollectionFUCHSIA
                val mutable public index : uint32

                new(pNext: nativeint, collection: VkBufferCollectionFUCHSIA, index: uint32) =
                    {
                        sType = 1000366002u
                        pNext = pNext
                        collection = collection
                        index = index
                    }

                new(collection: VkBufferCollectionFUCHSIA, index: uint32) =
                    VkBufferCollectionImageCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, collection, index)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.collection = Unchecked.defaultof<VkBufferCollectionFUCHSIA> && x.index = Unchecked.defaultof<uint32>

                static member Empty =
                    VkBufferCollectionImageCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferCollectionFUCHSIA>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "collection = %A" x.collection
                        sprintf "index = %A" x.index
                    ] |> sprintf "VkBufferCollectionImageCreateInfoFUCHSIA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSysmemColorSpaceFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public colorSpace : uint32

                new(pNext: nativeint, colorSpace: uint32) =
                    {
                        sType = 1000366008u
                        pNext = pNext
                        colorSpace = colorSpace
                    }

                new(colorSpace: uint32) =
                    VkSysmemColorSpaceFUCHSIA(Unchecked.defaultof<nativeint>, colorSpace)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.colorSpace = Unchecked.defaultof<uint32>

                static member Empty =
                    VkSysmemColorSpaceFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "colorSpace = %A" x.colorSpace
                    ] |> sprintf "VkSysmemColorSpaceFUCHSIA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBufferCollectionPropertiesFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memoryTypeBits : uint32
                val mutable public bufferCount : uint32
                val mutable public createInfoIndex : uint32
                val mutable public sysmemPixelFormat : uint64
                val mutable public formatFeatures : VkFormatFeatureFlags
                val mutable public sysmemColorSpaceIndex : VkSysmemColorSpaceFUCHSIA
                val mutable public samplerYcbcrConversionComponents : VkComponentMapping
                val mutable public suggestedYcbcrModel : Vulkan11.VkSamplerYcbcrModelConversion
                val mutable public suggestedYcbcrRange : Vulkan11.VkSamplerYcbcrRange
                val mutable public suggestedXChromaOffset : Vulkan11.VkChromaLocation
                val mutable public suggestedYChromaOffset : Vulkan11.VkChromaLocation

                new(pNext: nativeint, memoryTypeBits: uint32, bufferCount: uint32, createInfoIndex: uint32, sysmemPixelFormat: uint64, formatFeatures: VkFormatFeatureFlags, sysmemColorSpaceIndex: VkSysmemColorSpaceFUCHSIA, samplerYcbcrConversionComponents: VkComponentMapping, suggestedYcbcrModel: Vulkan11.VkSamplerYcbcrModelConversion, suggestedYcbcrRange: Vulkan11.VkSamplerYcbcrRange, suggestedXChromaOffset: Vulkan11.VkChromaLocation, suggestedYChromaOffset: Vulkan11.VkChromaLocation) =
                    {
                        sType = 1000366003u
                        pNext = pNext
                        memoryTypeBits = memoryTypeBits
                        bufferCount = bufferCount
                        createInfoIndex = createInfoIndex
                        sysmemPixelFormat = sysmemPixelFormat
                        formatFeatures = formatFeatures
                        sysmemColorSpaceIndex = sysmemColorSpaceIndex
                        samplerYcbcrConversionComponents = samplerYcbcrConversionComponents
                        suggestedYcbcrModel = suggestedYcbcrModel
                        suggestedYcbcrRange = suggestedYcbcrRange
                        suggestedXChromaOffset = suggestedXChromaOffset
                        suggestedYChromaOffset = suggestedYChromaOffset
                    }

                new(memoryTypeBits: uint32, bufferCount: uint32, createInfoIndex: uint32, sysmemPixelFormat: uint64, formatFeatures: VkFormatFeatureFlags, sysmemColorSpaceIndex: VkSysmemColorSpaceFUCHSIA, samplerYcbcrConversionComponents: VkComponentMapping, suggestedYcbcrModel: Vulkan11.VkSamplerYcbcrModelConversion, suggestedYcbcrRange: Vulkan11.VkSamplerYcbcrRange, suggestedXChromaOffset: Vulkan11.VkChromaLocation, suggestedYChromaOffset: Vulkan11.VkChromaLocation) =
                    VkBufferCollectionPropertiesFUCHSIA(Unchecked.defaultof<nativeint>, memoryTypeBits, bufferCount, createInfoIndex, sysmemPixelFormat, formatFeatures, sysmemColorSpaceIndex, samplerYcbcrConversionComponents, suggestedYcbcrModel, suggestedYcbcrRange, suggestedXChromaOffset, suggestedYChromaOffset)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memoryTypeBits = Unchecked.defaultof<uint32> && x.bufferCount = Unchecked.defaultof<uint32> && x.createInfoIndex = Unchecked.defaultof<uint32> && x.sysmemPixelFormat = Unchecked.defaultof<uint64> && x.formatFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.sysmemColorSpaceIndex = Unchecked.defaultof<VkSysmemColorSpaceFUCHSIA> && x.samplerYcbcrConversionComponents = Unchecked.defaultof<VkComponentMapping> && x.suggestedYcbcrModel = Unchecked.defaultof<Vulkan11.VkSamplerYcbcrModelConversion> && x.suggestedYcbcrRange = Unchecked.defaultof<Vulkan11.VkSamplerYcbcrRange> && x.suggestedXChromaOffset = Unchecked.defaultof<Vulkan11.VkChromaLocation> && x.suggestedYChromaOffset = Unchecked.defaultof<Vulkan11.VkChromaLocation>

                static member Empty =
                    VkBufferCollectionPropertiesFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkSysmemColorSpaceFUCHSIA>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<Vulkan11.VkSamplerYcbcrModelConversion>, Unchecked.defaultof<Vulkan11.VkSamplerYcbcrRange>, Unchecked.defaultof<Vulkan11.VkChromaLocation>, Unchecked.defaultof<Vulkan11.VkChromaLocation>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memoryTypeBits = %A" x.memoryTypeBits
                        sprintf "bufferCount = %A" x.bufferCount
                        sprintf "createInfoIndex = %A" x.createInfoIndex
                        sprintf "sysmemPixelFormat = %A" x.sysmemPixelFormat
                        sprintf "formatFeatures = %A" x.formatFeatures
                        sprintf "sysmemColorSpaceIndex = %A" x.sysmemColorSpaceIndex
                        sprintf "samplerYcbcrConversionComponents = %A" x.samplerYcbcrConversionComponents
                        sprintf "suggestedYcbcrModel = %A" x.suggestedYcbcrModel
                        sprintf "suggestedYcbcrRange = %A" x.suggestedYcbcrRange
                        sprintf "suggestedXChromaOffset = %A" x.suggestedXChromaOffset
                        sprintf "suggestedYChromaOffset = %A" x.suggestedYChromaOffset
                    ] |> sprintf "VkBufferCollectionPropertiesFUCHSIA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBufferConstraintsInfoFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public createInfo : VkBufferCreateInfo
                val mutable public requiredFormatFeatures : VkFormatFeatureFlags
                val mutable public bufferCollectionConstraints : VkBufferCollectionConstraintsInfoFUCHSIA

                new(pNext: nativeint, createInfo: VkBufferCreateInfo, requiredFormatFeatures: VkFormatFeatureFlags, bufferCollectionConstraints: VkBufferCollectionConstraintsInfoFUCHSIA) =
                    {
                        sType = 1000366004u
                        pNext = pNext
                        createInfo = createInfo
                        requiredFormatFeatures = requiredFormatFeatures
                        bufferCollectionConstraints = bufferCollectionConstraints
                    }

                new(createInfo: VkBufferCreateInfo, requiredFormatFeatures: VkFormatFeatureFlags, bufferCollectionConstraints: VkBufferCollectionConstraintsInfoFUCHSIA) =
                    VkBufferConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, createInfo, requiredFormatFeatures, bufferCollectionConstraints)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.createInfo = Unchecked.defaultof<VkBufferCreateInfo> && x.requiredFormatFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.bufferCollectionConstraints = Unchecked.defaultof<VkBufferCollectionConstraintsInfoFUCHSIA>

                static member Empty =
                    VkBufferConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferCreateInfo>, Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkBufferCollectionConstraintsInfoFUCHSIA>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "createInfo = %A" x.createInfo
                        sprintf "requiredFormatFeatures = %A" x.requiredFormatFeatures
                        sprintf "bufferCollectionConstraints = %A" x.bufferCollectionConstraints
                    ] |> sprintf "VkBufferConstraintsInfoFUCHSIA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageFormatConstraintsInfoFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageCreateInfo : VkImageCreateInfo
                val mutable public requiredFormatFeatures : VkFormatFeatureFlags
                val mutable public flags : VkImageFormatConstraintsFlagsFUCHSIA
                val mutable public sysmemPixelFormat : uint64
                val mutable public colorSpaceCount : uint32
                val mutable public pColorSpaces : nativeptr<VkSysmemColorSpaceFUCHSIA>

                new(pNext: nativeint, imageCreateInfo: VkImageCreateInfo, requiredFormatFeatures: VkFormatFeatureFlags, flags: VkImageFormatConstraintsFlagsFUCHSIA, sysmemPixelFormat: uint64, colorSpaceCount: uint32, pColorSpaces: nativeptr<VkSysmemColorSpaceFUCHSIA>) =
                    {
                        sType = 1000366007u
                        pNext = pNext
                        imageCreateInfo = imageCreateInfo
                        requiredFormatFeatures = requiredFormatFeatures
                        flags = flags
                        sysmemPixelFormat = sysmemPixelFormat
                        colorSpaceCount = colorSpaceCount
                        pColorSpaces = pColorSpaces
                    }

                new(imageCreateInfo: VkImageCreateInfo, requiredFormatFeatures: VkFormatFeatureFlags, flags: VkImageFormatConstraintsFlagsFUCHSIA, sysmemPixelFormat: uint64, colorSpaceCount: uint32, pColorSpaces: nativeptr<VkSysmemColorSpaceFUCHSIA>) =
                    VkImageFormatConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, imageCreateInfo, requiredFormatFeatures, flags, sysmemPixelFormat, colorSpaceCount, pColorSpaces)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageCreateInfo = Unchecked.defaultof<VkImageCreateInfo> && x.requiredFormatFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.flags = Unchecked.defaultof<VkImageFormatConstraintsFlagsFUCHSIA> && x.sysmemPixelFormat = Unchecked.defaultof<uint64> && x.colorSpaceCount = Unchecked.defaultof<uint32> && x.pColorSpaces = Unchecked.defaultof<nativeptr<VkSysmemColorSpaceFUCHSIA>>

                static member Empty =
                    VkImageFormatConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageCreateInfo>, Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkImageFormatConstraintsFlagsFUCHSIA>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSysmemColorSpaceFUCHSIA>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageCreateInfo = %A" x.imageCreateInfo
                        sprintf "requiredFormatFeatures = %A" x.requiredFormatFeatures
                        sprintf "flags = %A" x.flags
                        sprintf "sysmemPixelFormat = %A" x.sysmemPixelFormat
                        sprintf "colorSpaceCount = %A" x.colorSpaceCount
                        sprintf "pColorSpaces = %A" x.pColorSpaces
                    ] |> sprintf "VkImageFormatConstraintsInfoFUCHSIA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageConstraintsInfoFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public formatConstraintsCount : uint32
                val mutable public pFormatConstraints : nativeptr<VkImageFormatConstraintsInfoFUCHSIA>
                val mutable public bufferCollectionConstraints : VkBufferCollectionConstraintsInfoFUCHSIA
                val mutable public flags : VkImageConstraintsInfoFlagsFUCHSIA

                new(pNext: nativeint, formatConstraintsCount: uint32, pFormatConstraints: nativeptr<VkImageFormatConstraintsInfoFUCHSIA>, bufferCollectionConstraints: VkBufferCollectionConstraintsInfoFUCHSIA, flags: VkImageConstraintsInfoFlagsFUCHSIA) =
                    {
                        sType = 1000366006u
                        pNext = pNext
                        formatConstraintsCount = formatConstraintsCount
                        pFormatConstraints = pFormatConstraints
                        bufferCollectionConstraints = bufferCollectionConstraints
                        flags = flags
                    }

                new(formatConstraintsCount: uint32, pFormatConstraints: nativeptr<VkImageFormatConstraintsInfoFUCHSIA>, bufferCollectionConstraints: VkBufferCollectionConstraintsInfoFUCHSIA, flags: VkImageConstraintsInfoFlagsFUCHSIA) =
                    VkImageConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, formatConstraintsCount, pFormatConstraints, bufferCollectionConstraints, flags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.formatConstraintsCount = Unchecked.defaultof<uint32> && x.pFormatConstraints = Unchecked.defaultof<nativeptr<VkImageFormatConstraintsInfoFUCHSIA>> && x.bufferCollectionConstraints = Unchecked.defaultof<VkBufferCollectionConstraintsInfoFUCHSIA> && x.flags = Unchecked.defaultof<VkImageConstraintsInfoFlagsFUCHSIA>

                static member Empty =
                    VkImageConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageFormatConstraintsInfoFUCHSIA>>, Unchecked.defaultof<VkBufferCollectionConstraintsInfoFUCHSIA>, Unchecked.defaultof<VkImageConstraintsInfoFlagsFUCHSIA>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "formatConstraintsCount = %A" x.formatConstraintsCount
                        sprintf "pFormatConstraints = %A" x.pFormatConstraints
                        sprintf "bufferCollectionConstraints = %A" x.bufferCollectionConstraints
                        sprintf "flags = %A" x.flags
                    ] |> sprintf "VkImageConstraintsInfoFUCHSIA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportMemoryBufferCollectionFUCHSIA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public collection : VkBufferCollectionFUCHSIA
                val mutable public index : uint32

                new(pNext: nativeint, collection: VkBufferCollectionFUCHSIA, index: uint32) =
                    {
                        sType = 1000366001u
                        pNext = pNext
                        collection = collection
                        index = index
                    }

                new(collection: VkBufferCollectionFUCHSIA, index: uint32) =
                    VkImportMemoryBufferCollectionFUCHSIA(Unchecked.defaultof<nativeint>, collection, index)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.collection = Unchecked.defaultof<VkBufferCollectionFUCHSIA> && x.index = Unchecked.defaultof<uint32>

                static member Empty =
                    VkImportMemoryBufferCollectionFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferCollectionFUCHSIA>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "collection = %A" x.collection
                        sprintf "index = %A" x.index
                    ] |> sprintf "VkImportMemoryBufferCollectionFUCHSIA { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  /// VkBufferCollectionFUCHSIA
                  static member inline BufferCollectionFuchsia = enum<VkObjectType> 1000366000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateBufferCollectionFUCHSIADel = delegate of VkDevice * nativeptr<VkBufferCollectionCreateInfoFUCHSIA> * nativeptr<VkAllocationCallbacks> * nativeptr<VkBufferCollectionFUCHSIA> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkSetBufferCollectionImageConstraintsFUCHSIADel = delegate of VkDevice * VkBufferCollectionFUCHSIA * nativeptr<VkImageConstraintsInfoFUCHSIA> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkSetBufferCollectionBufferConstraintsFUCHSIADel = delegate of VkDevice * VkBufferCollectionFUCHSIA * nativeptr<VkBufferConstraintsInfoFUCHSIA> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyBufferCollectionFUCHSIADel = delegate of VkDevice * VkBufferCollectionFUCHSIA * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetBufferCollectionPropertiesFUCHSIADel = delegate of VkDevice * VkBufferCollectionFUCHSIA * nativeptr<VkBufferCollectionPropertiesFUCHSIA> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading FUCHSIABufferCollection")
                static let s_vkCreateBufferCollectionFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkCreateBufferCollectionFUCHSIADel> "vkCreateBufferCollectionFUCHSIA"
                static let s_vkSetBufferCollectionImageConstraintsFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkSetBufferCollectionImageConstraintsFUCHSIADel> "vkSetBufferCollectionImageConstraintsFUCHSIA"
                static let s_vkSetBufferCollectionBufferConstraintsFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkSetBufferCollectionBufferConstraintsFUCHSIADel> "vkSetBufferCollectionBufferConstraintsFUCHSIA"
                static let s_vkDestroyBufferCollectionFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkDestroyBufferCollectionFUCHSIADel> "vkDestroyBufferCollectionFUCHSIA"
                static let s_vkGetBufferCollectionPropertiesFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkGetBufferCollectionPropertiesFUCHSIADel> "vkGetBufferCollectionPropertiesFUCHSIA"
                static do Report.End(3) |> ignore
                static member vkCreateBufferCollectionFUCHSIA = s_vkCreateBufferCollectionFUCHSIADel
                static member vkSetBufferCollectionImageConstraintsFUCHSIA = s_vkSetBufferCollectionImageConstraintsFUCHSIADel
                static member vkSetBufferCollectionBufferConstraintsFUCHSIA = s_vkSetBufferCollectionBufferConstraintsFUCHSIADel
                static member vkDestroyBufferCollectionFUCHSIA = s_vkDestroyBufferCollectionFUCHSIADel
                static member vkGetBufferCollectionPropertiesFUCHSIA = s_vkGetBufferCollectionPropertiesFUCHSIADel
            let vkCreateBufferCollectionFUCHSIA(device : VkDevice, pCreateInfo : nativeptr<VkBufferCollectionCreateInfoFUCHSIA>, pAllocator : nativeptr<VkAllocationCallbacks>, pCollection : nativeptr<VkBufferCollectionFUCHSIA>) = Loader<unit>.vkCreateBufferCollectionFUCHSIA.Invoke(device, pCreateInfo, pAllocator, pCollection)
            let vkSetBufferCollectionImageConstraintsFUCHSIA(device : VkDevice, collection : VkBufferCollectionFUCHSIA, pImageConstraintsInfo : nativeptr<VkImageConstraintsInfoFUCHSIA>) = Loader<unit>.vkSetBufferCollectionImageConstraintsFUCHSIA.Invoke(device, collection, pImageConstraintsInfo)
            let vkSetBufferCollectionBufferConstraintsFUCHSIA(device : VkDevice, collection : VkBufferCollectionFUCHSIA, pBufferConstraintsInfo : nativeptr<VkBufferConstraintsInfoFUCHSIA>) = Loader<unit>.vkSetBufferCollectionBufferConstraintsFUCHSIA.Invoke(device, collection, pBufferConstraintsInfo)
            let vkDestroyBufferCollectionFUCHSIA(device : VkDevice, collection : VkBufferCollectionFUCHSIA, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyBufferCollectionFUCHSIA.Invoke(device, collection, pAllocator)
            let vkGetBufferCollectionPropertiesFUCHSIA(device : VkDevice, collection : VkBufferCollectionFUCHSIA, pProperties : nativeptr<VkBufferCollectionPropertiesFUCHSIA>) = Loader<unit>.vkGetBufferCollectionPropertiesFUCHSIA.Invoke(device, collection, pProperties)

        [<AutoOpen>]
        module ``EXTDebugReport`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type EXTDebugReport.VkDebugReportObjectTypeEXT with
                      static member inline BufferCollectionFuchsia = enum<EXTDebugReport.VkDebugReportObjectTypeEXT> 1000366000


    /// Requires ((KHRCreateRenderpass2 | Vulkan12), KHRSynchronization2) | Vulkan13.
    module HUAWEISubpassShading =
        let Type = ExtensionType.Device
        let Name = "VK_HUAWEI_subpass_shading"
        let Number = 370

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceSubpassShadingFeaturesHUAWEI =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public subpassShading : VkBool32

                new(pNext: nativeint, subpassShading: VkBool32) =
                    {
                        sType = 1000369001u
                        pNext = pNext
                        subpassShading = subpassShading
                    }

                new(subpassShading: VkBool32) =
                    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(Unchecked.defaultof<nativeint>, subpassShading)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.subpassShading = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "subpassShading = %A" x.subpassShading
                    ] |> sprintf "VkPhysicalDeviceSubpassShadingFeaturesHUAWEI { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceSubpassShadingPropertiesHUAWEI =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxSubpassShadingWorkgroupSizeAspectRatio : uint32

                new(pNext: nativeint, maxSubpassShadingWorkgroupSizeAspectRatio: uint32) =
                    {
                        sType = 1000369002u
                        pNext = pNext
                        maxSubpassShadingWorkgroupSizeAspectRatio = maxSubpassShadingWorkgroupSizeAspectRatio
                    }

                new(maxSubpassShadingWorkgroupSizeAspectRatio: uint32) =
                    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(Unchecked.defaultof<nativeint>, maxSubpassShadingWorkgroupSizeAspectRatio)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxSubpassShadingWorkgroupSizeAspectRatio = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxSubpassShadingWorkgroupSizeAspectRatio = %A" x.maxSubpassShadingWorkgroupSizeAspectRatio
                    ] |> sprintf "VkPhysicalDeviceSubpassShadingPropertiesHUAWEI { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSubpassShadingPipelineCreateInfoHUAWEI =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public renderPass : VkRenderPass
                val mutable public subpass : uint32

                new(pNext: nativeint, renderPass: VkRenderPass, subpass: uint32) =
                    {
                        sType = 1000369000u
                        pNext = pNext
                        renderPass = renderPass
                        subpass = subpass
                    }

                new(renderPass: VkRenderPass, subpass: uint32) =
                    VkSubpassShadingPipelineCreateInfoHUAWEI(Unchecked.defaultof<nativeint>, renderPass, subpass)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.renderPass = Unchecked.defaultof<VkRenderPass> && x.subpass = Unchecked.defaultof<uint32>

                static member Empty =
                    VkSubpassShadingPipelineCreateInfoHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderPass>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "renderPass = %A" x.renderPass
                        sprintf "subpass = %A" x.subpass
                    ] |> sprintf "VkSubpassShadingPipelineCreateInfoHUAWEI { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineBindPoint with
                  static member inline SubpassShadingHuawei = enum<VkPipelineBindPoint> 1000369003
             type Vulkan13.VkPipelineStageFlags2 with
                  static member inline PipelineStage2SubpassShaderBitHuawei = enum<Vulkan13.VkPipelineStageFlags2> 0x00000080
             type VkShaderStageFlags with
                  static member inline SubpassShadingBitHuawei = enum<VkShaderStageFlags> 0x00004000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEIDel = delegate of VkDevice * VkRenderPass * nativeptr<VkExtent2D> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSubpassShadingHUAWEIDel = delegate of VkCommandBuffer -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading HUAWEISubpassShading")
                static let s_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEIDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEIDel> "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"
                static let s_vkCmdSubpassShadingHUAWEIDel = VkRaw.vkImportInstanceDelegate<VkCmdSubpassShadingHUAWEIDel> "vkCmdSubpassShadingHUAWEI"
                static do Report.End(3) |> ignore
                static member vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = s_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEIDel
                static member vkCmdSubpassShadingHUAWEI = s_vkCmdSubpassShadingHUAWEIDel
            let vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device : VkDevice, renderpass : VkRenderPass, pMaxWorkgroupSize : nativeptr<VkExtent2D>) = Loader<unit>.vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI.Invoke(device, renderpass, pMaxWorkgroupSize)
            let vkCmdSubpassShadingHUAWEI(commandBuffer : VkCommandBuffer) = Loader<unit>.vkCmdSubpassShadingHUAWEI.Invoke(commandBuffer)

    /// Requires KHRRayTracingPipeline, (KHRSynchronization2 | Vulkan13).
    module HUAWEIInvocationMask =
        let Type = ExtensionType.Device
        let Name = "VK_HUAWEI_invocation_mask"
        let Number = 371

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceInvocationMaskFeaturesHUAWEI =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public invocationMask : VkBool32

                new(pNext: nativeint, invocationMask: VkBool32) =
                    {
                        sType = 1000370000u
                        pNext = pNext
                        invocationMask = invocationMask
                    }

                new(invocationMask: VkBool32) =
                    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(Unchecked.defaultof<nativeint>, invocationMask)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.invocationMask = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "invocationMask = %A" x.invocationMask
                    ] |> sprintf "VkPhysicalDeviceInvocationMaskFeaturesHUAWEI { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkAccessFlags2 with
                  static member inline Access2InvocationMaskReadBitHuawei = enum<Vulkan13.VkAccessFlags2> 0x00000080
             type VkImageUsageFlags with
                  static member inline InvocationMaskBitHuawei = enum<VkImageUsageFlags> 0x00040000
             type Vulkan13.VkPipelineStageFlags2 with
                  static member inline PipelineStage2InvocationMaskBitHuawei = enum<Vulkan13.VkPipelineStageFlags2> 0x00000100

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBindInvocationMaskHUAWEIDel = delegate of VkCommandBuffer * VkImageView * VkImageLayout -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading HUAWEIInvocationMask")
                static let s_vkCmdBindInvocationMaskHUAWEIDel = VkRaw.vkImportInstanceDelegate<VkCmdBindInvocationMaskHUAWEIDel> "vkCmdBindInvocationMaskHUAWEI"
                static do Report.End(3) |> ignore
                static member vkCmdBindInvocationMaskHUAWEI = s_vkCmdBindInvocationMaskHUAWEIDel
            let vkCmdBindInvocationMaskHUAWEI(commandBuffer : VkCommandBuffer, imageView : VkImageView, imageLayout : VkImageLayout) = Loader<unit>.vkCmdBindInvocationMaskHUAWEI.Invoke(commandBuffer, imageView, imageLayout)

    /// Requires KHRExternalMemory | Vulkan11.
    module NVExternalMemoryRdma =
        let Type = ExtensionType.Device
        let Name = "VK_NV_external_memory_rdma"
        let Number = 372

        type VkRemoteAddressNV = nativeint

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryGetRemoteAddressInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memory : VkDeviceMemory
                val mutable public handleType : Vulkan11.VkExternalMemoryHandleTypeFlags

                new(pNext: nativeint, memory: VkDeviceMemory, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags) =
                    {
                        sType = 1000371000u
                        pNext = pNext
                        memory = memory
                        handleType = handleType
                    }

                new(memory: VkDeviceMemory, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags) =
                    VkMemoryGetRemoteAddressInfoNV(Unchecked.defaultof<nativeint>, memory, handleType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>

                static member Empty =
                    VkMemoryGetRemoteAddressInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memory = %A" x.memory
                        sprintf "handleType = %A" x.handleType
                    ] |> sprintf "VkMemoryGetRemoteAddressInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceExternalMemoryRDMAFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public externalMemoryRDMA : VkBool32

                new(pNext: nativeint, externalMemoryRDMA: VkBool32) =
                    {
                        sType = 1000371001u
                        pNext = pNext
                        externalMemoryRDMA = externalMemoryRDMA
                    }

                new(externalMemoryRDMA: VkBool32) =
                    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(Unchecked.defaultof<nativeint>, externalMemoryRDMA)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.externalMemoryRDMA = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "externalMemoryRDMA = %A" x.externalMemoryRDMA
                    ] |> sprintf "VkPhysicalDeviceExternalMemoryRDMAFeaturesNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkExternalMemoryHandleTypeFlags with
                  static member inline RdmaAddressBitNv = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00001000
             type VkMemoryPropertyFlags with
                  static member inline RdmaCapableBitNv = enum<VkMemoryPropertyFlags> 0x00000100

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMemoryRemoteAddressNVDel = delegate of VkDevice * nativeptr<VkMemoryGetRemoteAddressInfoNV> * nativeptr<VkRemoteAddressNV> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVExternalMemoryRdma")
                static let s_vkGetMemoryRemoteAddressNVDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryRemoteAddressNVDel> "vkGetMemoryRemoteAddressNV"
                static do Report.End(3) |> ignore
                static member vkGetMemoryRemoteAddressNV = s_vkGetMemoryRemoteAddressNVDel
            let vkGetMemoryRemoteAddressNV(device : VkDevice, pMemoryGetRemoteAddressInfo : nativeptr<VkMemoryGetRemoteAddressInfoNV>, pAddress : nativeptr<VkRemoteAddressNV>) = Loader<unit>.vkGetMemoryRemoteAddressNV.Invoke(device, pMemoryGetRemoteAddressInfo, pAddress)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTPipelineProperties =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_pipeline_properties"
        let Number = 373

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePipelinePropertiesFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelinePropertiesIdentifier : VkBool32

                new(pNext: nativeint, pipelinePropertiesIdentifier: VkBool32) =
                    {
                        sType = 1000372001u
                        pNext = pNext
                        pipelinePropertiesIdentifier = pipelinePropertiesIdentifier
                    }

                new(pipelinePropertiesIdentifier: VkBool32) =
                    VkPhysicalDevicePipelinePropertiesFeaturesEXT(Unchecked.defaultof<nativeint>, pipelinePropertiesIdentifier)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelinePropertiesIdentifier = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePipelinePropertiesFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelinePropertiesIdentifier = %A" x.pipelinePropertiesIdentifier
                    ] |> sprintf "VkPhysicalDevicePipelinePropertiesFeaturesEXT { %s }"
            end

        type VkPipelineInfoEXT = KHRPipelineExecutableProperties.VkPipelineInfoKHR

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelinePropertiesIdentifierEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelineIdentifier : Guid

                new(pNext: nativeint, pipelineIdentifier: Guid) =
                    {
                        sType = 1000372000u
                        pNext = pNext
                        pipelineIdentifier = pipelineIdentifier
                    }

                new(pipelineIdentifier: Guid) =
                    VkPipelinePropertiesIdentifierEXT(Unchecked.defaultof<nativeint>, pipelineIdentifier)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelineIdentifier = Unchecked.defaultof<Guid>

                static member Empty =
                    VkPipelinePropertiesIdentifierEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Guid>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelineIdentifier = %A" x.pipelineIdentifier
                    ] |> sprintf "VkPipelinePropertiesIdentifierEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPipelinePropertiesEXTDel = delegate of VkDevice * nativeptr<VkPipelineInfoEXT> * nativeptr<VkBaseOutStructure> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTPipelineProperties")
                static let s_vkGetPipelinePropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkGetPipelinePropertiesEXTDel> "vkGetPipelinePropertiesEXT"
                static do Report.End(3) |> ignore
                static member vkGetPipelinePropertiesEXT = s_vkGetPipelinePropertiesEXTDel
            let vkGetPipelinePropertiesEXT(device : VkDevice, pPipelineInfo : nativeptr<VkPipelineInfoEXT>, pPipelineProperties : nativeptr<VkBaseOutStructure>) = Loader<unit>.vkGetPipelinePropertiesEXT.Invoke(device, pPipelineInfo, pPipelineProperties)

    module EXTFrameBoundary =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_frame_boundary"
        let Number = 376

        [<Flags>]
        type VkFrameBoundaryFlagsEXT =
            | All = 1
            | None = 0
            | FrameEndBit = 0x00000001


        [<StructLayout(LayoutKind.Sequential)>]
        type VkFrameBoundaryEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkFrameBoundaryFlagsEXT
                val mutable public frameID : uint64
                val mutable public imageCount : uint32
                val mutable public pImages : nativeptr<VkImage>
                val mutable public bufferCount : uint32
                val mutable public pBuffers : nativeptr<VkBuffer>
                val mutable public tagName : uint64
                val mutable public tagSize : uint64
                val mutable public pTag : nativeint

                new(pNext: nativeint, flags: VkFrameBoundaryFlagsEXT, frameID: uint64, imageCount: uint32, pImages: nativeptr<VkImage>, bufferCount: uint32, pBuffers: nativeptr<VkBuffer>, tagName: uint64, tagSize: uint64, pTag: nativeint) =
                    {
                        sType = 1000375001u
                        pNext = pNext
                        flags = flags
                        frameID = frameID
                        imageCount = imageCount
                        pImages = pImages
                        bufferCount = bufferCount
                        pBuffers = pBuffers
                        tagName = tagName
                        tagSize = tagSize
                        pTag = pTag
                    }

                new(flags: VkFrameBoundaryFlagsEXT, frameID: uint64, imageCount: uint32, pImages: nativeptr<VkImage>, bufferCount: uint32, pBuffers: nativeptr<VkBuffer>, tagName: uint64, tagSize: uint64, pTag: nativeint) =
                    VkFrameBoundaryEXT(Unchecked.defaultof<nativeint>, flags, frameID, imageCount, pImages, bufferCount, pBuffers, tagName, tagSize, pTag)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkFrameBoundaryFlagsEXT> && x.frameID = Unchecked.defaultof<uint64> && x.imageCount = Unchecked.defaultof<uint32> && x.pImages = Unchecked.defaultof<nativeptr<VkImage>> && x.bufferCount = Unchecked.defaultof<uint32> && x.pBuffers = Unchecked.defaultof<nativeptr<VkBuffer>> && x.tagName = Unchecked.defaultof<uint64> && x.tagSize = Unchecked.defaultof<uint64> && x.pTag = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkFrameBoundaryEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFrameBoundaryFlagsEXT>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImage>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBuffer>>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "frameID = %A" x.frameID
                        sprintf "imageCount = %A" x.imageCount
                        sprintf "pImages = %A" x.pImages
                        sprintf "bufferCount = %A" x.bufferCount
                        sprintf "pBuffers = %A" x.pBuffers
                        sprintf "tagName = %A" x.tagName
                        sprintf "tagSize = %A" x.tagSize
                        sprintf "pTag = %A" x.pTag
                    ] |> sprintf "VkFrameBoundaryEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFrameBoundaryFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public frameBoundary : VkBool32

                new(pNext: nativeint, frameBoundary: VkBool32) =
                    {
                        sType = 1000375000u
                        pNext = pNext
                        frameBoundary = frameBoundary
                    }

                new(frameBoundary: VkBool32) =
                    VkPhysicalDeviceFrameBoundaryFeaturesEXT(Unchecked.defaultof<nativeint>, frameBoundary)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.frameBoundary = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceFrameBoundaryFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "frameBoundary = %A" x.frameBoundary
                    ] |> sprintf "VkPhysicalDeviceFrameBoundaryFeaturesEXT { %s }"
            end



    /// Requires (KHRCreateRenderpass2, KHRDepthStencilResolve) | Vulkan12.
    module EXTMultisampledRenderToSingleSampled =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_multisampled_render_to_single_sampled"
        let Number = 377

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMultisampledRenderToSingleSampledInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public multisampledRenderToSingleSampledEnable : VkBool32
                val mutable public rasterizationSamples : VkSampleCountFlags

                new(pNext: nativeint, multisampledRenderToSingleSampledEnable: VkBool32, rasterizationSamples: VkSampleCountFlags) =
                    {
                        sType = 1000376002u
                        pNext = pNext
                        multisampledRenderToSingleSampledEnable = multisampledRenderToSingleSampledEnable
                        rasterizationSamples = rasterizationSamples
                    }

                new(multisampledRenderToSingleSampledEnable: VkBool32, rasterizationSamples: VkSampleCountFlags) =
                    VkMultisampledRenderToSingleSampledInfoEXT(Unchecked.defaultof<nativeint>, multisampledRenderToSingleSampledEnable, rasterizationSamples)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.multisampledRenderToSingleSampledEnable = Unchecked.defaultof<VkBool32> && x.rasterizationSamples = Unchecked.defaultof<VkSampleCountFlags>

                static member Empty =
                    VkMultisampledRenderToSingleSampledInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkSampleCountFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "multisampledRenderToSingleSampledEnable = %A" x.multisampledRenderToSingleSampledEnable
                        sprintf "rasterizationSamples = %A" x.rasterizationSamples
                    ] |> sprintf "VkMultisampledRenderToSingleSampledInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public multisampledRenderToSingleSampled : VkBool32

                new(pNext: nativeint, multisampledRenderToSingleSampled: VkBool32) =
                    {
                        sType = 1000376000u
                        pNext = pNext
                        multisampledRenderToSingleSampled = multisampledRenderToSingleSampled
                    }

                new(multisampledRenderToSingleSampled: VkBool32) =
                    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(Unchecked.defaultof<nativeint>, multisampledRenderToSingleSampled)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.multisampledRenderToSingleSampled = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "multisampledRenderToSingleSampled = %A" x.multisampledRenderToSingleSampled
                    ] |> sprintf "VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSubpassResolvePerformanceQueryEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public optimal : VkBool32

                new(pNext: nativeint, optimal: VkBool32) =
                    {
                        sType = 1000376001u
                        pNext = pNext
                        optimal = optimal
                    }

                new(optimal: VkBool32) =
                    VkSubpassResolvePerformanceQueryEXT(Unchecked.defaultof<nativeint>, optimal)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.optimal = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkSubpassResolvePerformanceQueryEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "optimal = %A" x.optimal
                    ] |> sprintf "VkSubpassResolvePerformanceQueryEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageCreateFlags with
                  static member inline MultisampledRenderToSingleSampledBitExt = enum<VkImageCreateFlags> 0x00040000


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan13.
    module EXTExtendedDynamicState2 =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_extended_dynamic_state2"
        let Number = 378

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceExtendedDynamicState2FeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public extendedDynamicState2 : VkBool32
                val mutable public extendedDynamicState2LogicOp : VkBool32
                val mutable public extendedDynamicState2PatchControlPoints : VkBool32

                new(pNext: nativeint, extendedDynamicState2: VkBool32, extendedDynamicState2LogicOp: VkBool32, extendedDynamicState2PatchControlPoints: VkBool32) =
                    {
                        sType = 1000377000u
                        pNext = pNext
                        extendedDynamicState2 = extendedDynamicState2
                        extendedDynamicState2LogicOp = extendedDynamicState2LogicOp
                        extendedDynamicState2PatchControlPoints = extendedDynamicState2PatchControlPoints
                    }

                new(extendedDynamicState2: VkBool32, extendedDynamicState2LogicOp: VkBool32, extendedDynamicState2PatchControlPoints: VkBool32) =
                    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(Unchecked.defaultof<nativeint>, extendedDynamicState2, extendedDynamicState2LogicOp, extendedDynamicState2PatchControlPoints)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.extendedDynamicState2 = Unchecked.defaultof<VkBool32> && x.extendedDynamicState2LogicOp = Unchecked.defaultof<VkBool32> && x.extendedDynamicState2PatchControlPoints = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "extendedDynamicState2 = %A" x.extendedDynamicState2
                        sprintf "extendedDynamicState2LogicOp = %A" x.extendedDynamicState2LogicOp
                        sprintf "extendedDynamicState2PatchControlPoints = %A" x.extendedDynamicState2PatchControlPoints
                    ] |> sprintf "VkPhysicalDeviceExtendedDynamicState2FeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  /// Not promoted to 1.3
                  static member inline PatchControlPointsExt = enum<VkDynamicState> 1000377000
                  static member inline RasterizerDiscardEnableExt = enum<VkDynamicState> 1000377001
                  static member inline DepthBiasEnableExt = enum<VkDynamicState> 1000377002
                  /// Not promoted to 1.3
                  static member inline LogicOpExt = enum<VkDynamicState> 1000377003
                  static member inline PrimitiveRestartEnableExt = enum<VkDynamicState> 1000377004

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetPatchControlPointsEXTDel = delegate of VkCommandBuffer * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetRasterizerDiscardEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetDepthBiasEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetLogicOpEXTDel = delegate of VkCommandBuffer * VkLogicOp -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetPrimitiveRestartEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState2")
                static let s_vkCmdSetPatchControlPointsEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPatchControlPointsEXTDel> "vkCmdSetPatchControlPointsEXT"
                static let s_vkCmdSetRasterizerDiscardEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetRasterizerDiscardEnableEXTDel> "vkCmdSetRasterizerDiscardEnableEXT"
                static let s_vkCmdSetDepthBiasEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthBiasEnableEXTDel> "vkCmdSetDepthBiasEnableEXT"
                static let s_vkCmdSetLogicOpEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetLogicOpEXTDel> "vkCmdSetLogicOpEXT"
                static let s_vkCmdSetPrimitiveRestartEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPrimitiveRestartEnableEXTDel> "vkCmdSetPrimitiveRestartEnableEXT"
                static do Report.End(3) |> ignore
                static member vkCmdSetPatchControlPointsEXT = s_vkCmdSetPatchControlPointsEXTDel
                static member vkCmdSetRasterizerDiscardEnableEXT = s_vkCmdSetRasterizerDiscardEnableEXTDel
                static member vkCmdSetDepthBiasEnableEXT = s_vkCmdSetDepthBiasEnableEXTDel
                static member vkCmdSetLogicOpEXT = s_vkCmdSetLogicOpEXTDel
                static member vkCmdSetPrimitiveRestartEnableEXT = s_vkCmdSetPrimitiveRestartEnableEXTDel
            let vkCmdSetPatchControlPointsEXT(commandBuffer : VkCommandBuffer, patchControlPoints : uint32) = Loader<unit>.vkCmdSetPatchControlPointsEXT.Invoke(commandBuffer, patchControlPoints)
            let vkCmdSetRasterizerDiscardEnableEXT(commandBuffer : VkCommandBuffer, rasterizerDiscardEnable : VkBool32) = Loader<unit>.vkCmdSetRasterizerDiscardEnableEXT.Invoke(commandBuffer, rasterizerDiscardEnable)
            let vkCmdSetDepthBiasEnableEXT(commandBuffer : VkCommandBuffer, depthBiasEnable : VkBool32) = Loader<unit>.vkCmdSetDepthBiasEnableEXT.Invoke(commandBuffer, depthBiasEnable)
            let vkCmdSetLogicOpEXT(commandBuffer : VkCommandBuffer, logicOp : VkLogicOp) = Loader<unit>.vkCmdSetLogicOpEXT.Invoke(commandBuffer, logicOp)
            let vkCmdSetPrimitiveRestartEnableEXT(commandBuffer : VkCommandBuffer, primitiveRestartEnable : VkBool32) = Loader<unit>.vkCmdSetPrimitiveRestartEnableEXT.Invoke(commandBuffer, primitiveRestartEnable)

    /// Requires KHRSurface.
    module QNXScreenSurface =
        let Type = ExtensionType.Instance
        let Name = "VK_QNX_screen_surface"
        let Number = 379

        [<StructLayout(LayoutKind.Sequential)>]
        type VkScreenSurfaceCreateInfoQNX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkScreenSurfaceCreateFlagsQNX
                val mutable public context : nativeptr<nativeint>
                val mutable public window : nativeptr<nativeint>

                new(pNext: nativeint, flags: VkScreenSurfaceCreateFlagsQNX, context: nativeptr<nativeint>, window: nativeptr<nativeint>) =
                    {
                        sType = 1000378000u
                        pNext = pNext
                        flags = flags
                        context = context
                        window = window
                    }

                new(flags: VkScreenSurfaceCreateFlagsQNX, context: nativeptr<nativeint>, window: nativeptr<nativeint>) =
                    VkScreenSurfaceCreateInfoQNX(Unchecked.defaultof<nativeint>, flags, context, window)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkScreenSurfaceCreateFlagsQNX> && x.context = Unchecked.defaultof<nativeptr<nativeint>> && x.window = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkScreenSurfaceCreateInfoQNX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkScreenSurfaceCreateFlagsQNX>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "context = %A" x.context
                        sprintf "window = %A" x.window
                    ] |> sprintf "VkScreenSurfaceCreateInfoQNX { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateScreenSurfaceQNXDel = delegate of VkInstance * nativeptr<VkScreenSurfaceCreateInfoQNX> * nativeptr<VkAllocationCallbacks> * nativeptr<KHRSurface.VkSurfaceKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceScreenPresentationSupportQNXDel = delegate of VkPhysicalDevice * uint32 * nativeptr<nativeint> -> VkBool32

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading QNXScreenSurface")
                static let s_vkCreateScreenSurfaceQNXDel = VkRaw.vkImportInstanceDelegate<VkCreateScreenSurfaceQNXDel> "vkCreateScreenSurfaceQNX"
                static let s_vkGetPhysicalDeviceScreenPresentationSupportQNXDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceScreenPresentationSupportQNXDel> "vkGetPhysicalDeviceScreenPresentationSupportQNX"
                static do Report.End(3) |> ignore
                static member vkCreateScreenSurfaceQNX = s_vkCreateScreenSurfaceQNXDel
                static member vkGetPhysicalDeviceScreenPresentationSupportQNX = s_vkGetPhysicalDeviceScreenPresentationSupportQNXDel
            let vkCreateScreenSurfaceQNX(instance : VkInstance, pCreateInfo : nativeptr<VkScreenSurfaceCreateInfoQNX>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<KHRSurface.VkSurfaceKHR>) = Loader<unit>.vkCreateScreenSurfaceQNX.Invoke(instance, pCreateInfo, pAllocator, pSurface)
            let vkGetPhysicalDeviceScreenPresentationSupportQNX(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, window : nativeptr<nativeint>) = Loader<unit>.vkGetPhysicalDeviceScreenPresentationSupportQNX.Invoke(physicalDevice, queueFamilyIndex, window)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTColorWriteEnable =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_color_write_enable"
        let Number = 382

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceColorWriteEnableFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public colorWriteEnable : VkBool32

                new(pNext: nativeint, colorWriteEnable: VkBool32) =
                    {
                        sType = 1000381000u
                        pNext = pNext
                        colorWriteEnable = colorWriteEnable
                    }

                new(colorWriteEnable: VkBool32) =
                    VkPhysicalDeviceColorWriteEnableFeaturesEXT(Unchecked.defaultof<nativeint>, colorWriteEnable)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.colorWriteEnable = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceColorWriteEnableFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "colorWriteEnable = %A" x.colorWriteEnable
                    ] |> sprintf "VkPhysicalDeviceColorWriteEnableFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineColorWriteCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public attachmentCount : uint32
                val mutable public pColorWriteEnables : nativeptr<VkBool32>

                new(pNext: nativeint, attachmentCount: uint32, pColorWriteEnables: nativeptr<VkBool32>) =
                    {
                        sType = 1000381001u
                        pNext = pNext
                        attachmentCount = attachmentCount
                        pColorWriteEnables = pColorWriteEnables
                    }

                new(attachmentCount: uint32, pColorWriteEnables: nativeptr<VkBool32>) =
                    VkPipelineColorWriteCreateInfoEXT(Unchecked.defaultof<nativeint>, attachmentCount, pColorWriteEnables)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.attachmentCount = Unchecked.defaultof<uint32> && x.pColorWriteEnables = Unchecked.defaultof<nativeptr<VkBool32>>

                static member Empty =
                    VkPipelineColorWriteCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBool32>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "attachmentCount = %A" x.attachmentCount
                        sprintf "pColorWriteEnables = %A" x.pColorWriteEnables
                    ] |> sprintf "VkPipelineColorWriteCreateInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  static member inline ColorWriteEnableExt = enum<VkDynamicState> 1000381000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetColorWriteEnableEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkBool32> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTColorWriteEnable")
                static let s_vkCmdSetColorWriteEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetColorWriteEnableEXTDel> "vkCmdSetColorWriteEnableEXT"
                static do Report.End(3) |> ignore
                static member vkCmdSetColorWriteEnableEXT = s_vkCmdSetColorWriteEnableEXTDel
            let vkCmdSetColorWriteEnableEXT(commandBuffer : VkCommandBuffer, attachmentCount : uint32, pColorWriteEnables : nativeptr<VkBool32>) = Loader<unit>.vkCmdSetColorWriteEnableEXT.Invoke(commandBuffer, attachmentCount, pColorWriteEnables)

    /// Requires EXTTransformFeedback.
    module EXTPrimitivesGeneratedQuery =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_primitives_generated_query"
        let Number = 383

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public primitivesGeneratedQuery : VkBool32
                val mutable public primitivesGeneratedQueryWithRasterizerDiscard : VkBool32
                val mutable public primitivesGeneratedQueryWithNonZeroStreams : VkBool32

                new(pNext: nativeint, primitivesGeneratedQuery: VkBool32, primitivesGeneratedQueryWithRasterizerDiscard: VkBool32, primitivesGeneratedQueryWithNonZeroStreams: VkBool32) =
                    {
                        sType = 1000382000u
                        pNext = pNext
                        primitivesGeneratedQuery = primitivesGeneratedQuery
                        primitivesGeneratedQueryWithRasterizerDiscard = primitivesGeneratedQueryWithRasterizerDiscard
                        primitivesGeneratedQueryWithNonZeroStreams = primitivesGeneratedQueryWithNonZeroStreams
                    }

                new(primitivesGeneratedQuery: VkBool32, primitivesGeneratedQueryWithRasterizerDiscard: VkBool32, primitivesGeneratedQueryWithNonZeroStreams: VkBool32) =
                    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(Unchecked.defaultof<nativeint>, primitivesGeneratedQuery, primitivesGeneratedQueryWithRasterizerDiscard, primitivesGeneratedQueryWithNonZeroStreams)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.primitivesGeneratedQuery = Unchecked.defaultof<VkBool32> && x.primitivesGeneratedQueryWithRasterizerDiscard = Unchecked.defaultof<VkBool32> && x.primitivesGeneratedQueryWithNonZeroStreams = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "primitivesGeneratedQuery = %A" x.primitivesGeneratedQuery
                        sprintf "primitivesGeneratedQueryWithRasterizerDiscard = %A" x.primitivesGeneratedQueryWithRasterizerDiscard
                        sprintf "primitivesGeneratedQueryWithNonZeroStreams = %A" x.primitivesGeneratedQueryWithNonZeroStreams
                    ] |> sprintf "VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkQueryType with
                  static member inline PrimitivesGeneratedExt = enum<VkQueryType> 1000382000


    /// Requires KHRAccelerationStructure.
    module KHRRayTracingMaintenance1 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_ray_tracing_maintenance1"
        let Number = 387

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public rayTracingMaintenance1 : VkBool32
                val mutable public rayTracingPipelineTraceRaysIndirect2 : VkBool32

                new(pNext: nativeint, rayTracingMaintenance1: VkBool32, rayTracingPipelineTraceRaysIndirect2: VkBool32) =
                    {
                        sType = 1000386000u
                        pNext = pNext
                        rayTracingMaintenance1 = rayTracingMaintenance1
                        rayTracingPipelineTraceRaysIndirect2 = rayTracingPipelineTraceRaysIndirect2
                    }

                new(rayTracingMaintenance1: VkBool32, rayTracingPipelineTraceRaysIndirect2: VkBool32) =
                    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(Unchecked.defaultof<nativeint>, rayTracingMaintenance1, rayTracingPipelineTraceRaysIndirect2)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.rayTracingMaintenance1 = Unchecked.defaultof<VkBool32> && x.rayTracingPipelineTraceRaysIndirect2 = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "rayTracingMaintenance1 = %A" x.rayTracingMaintenance1
                        sprintf "rayTracingPipelineTraceRaysIndirect2 = %A" x.rayTracingPipelineTraceRaysIndirect2
                    ] |> sprintf "VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkQueryType with
                  static member inline AccelerationStructureSerializationBottomLevelPointersKhr = enum<VkQueryType> 1000386000
                  static member inline AccelerationStructureSizeKhr = enum<VkQueryType> 1000386001


        [<AutoOpen>]
        module ``KHRSynchronization2 | Vulkan13`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkPipelineStageFlags2 with
                      static member inline PipelineStage2AccelerationStructureCopyBitKhr = enum<Vulkan13.VkPipelineStageFlags2> 0x10000000


        [<AutoOpen>]
        module ``(KHRSynchronization2 | Vulkan13), KHRRayTracingPipeline`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkAccessFlags2 with
                      static member inline Access2ShaderBindingTableReadBitKhr = enum<Vulkan13.VkAccessFlags2> 0x00000100


        [<AutoOpen>]
        module ``KHRRayTracingPipeline`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkTraceRaysIndirectCommand2KHR =
                struct
                    val mutable public raygenShaderRecordAddress : VkDeviceAddress
                    val mutable public raygenShaderRecordSize : VkDeviceSize
                    val mutable public missShaderBindingTableAddress : VkDeviceAddress
                    val mutable public missShaderBindingTableSize : VkDeviceSize
                    val mutable public missShaderBindingTableStride : VkDeviceSize
                    val mutable public hitShaderBindingTableAddress : VkDeviceAddress
                    val mutable public hitShaderBindingTableSize : VkDeviceSize
                    val mutable public hitShaderBindingTableStride : VkDeviceSize
                    val mutable public callableShaderBindingTableAddress : VkDeviceAddress
                    val mutable public callableShaderBindingTableSize : VkDeviceSize
                    val mutable public callableShaderBindingTableStride : VkDeviceSize
                    val mutable public width : uint32
                    val mutable public height : uint32
                    val mutable public depth : uint32

                    new(raygenShaderRecordAddress: VkDeviceAddress, raygenShaderRecordSize: VkDeviceSize, missShaderBindingTableAddress: VkDeviceAddress, missShaderBindingTableSize: VkDeviceSize, missShaderBindingTableStride: VkDeviceSize, hitShaderBindingTableAddress: VkDeviceAddress, hitShaderBindingTableSize: VkDeviceSize, hitShaderBindingTableStride: VkDeviceSize, callableShaderBindingTableAddress: VkDeviceAddress, callableShaderBindingTableSize: VkDeviceSize, callableShaderBindingTableStride: VkDeviceSize, width: uint32, height: uint32, depth: uint32) =
                        {
                            raygenShaderRecordAddress = raygenShaderRecordAddress
                            raygenShaderRecordSize = raygenShaderRecordSize
                            missShaderBindingTableAddress = missShaderBindingTableAddress
                            missShaderBindingTableSize = missShaderBindingTableSize
                            missShaderBindingTableStride = missShaderBindingTableStride
                            hitShaderBindingTableAddress = hitShaderBindingTableAddress
                            hitShaderBindingTableSize = hitShaderBindingTableSize
                            hitShaderBindingTableStride = hitShaderBindingTableStride
                            callableShaderBindingTableAddress = callableShaderBindingTableAddress
                            callableShaderBindingTableSize = callableShaderBindingTableSize
                            callableShaderBindingTableStride = callableShaderBindingTableStride
                            width = width
                            height = height
                            depth = depth
                        }

                    member x.IsEmpty =
                        x.raygenShaderRecordAddress = Unchecked.defaultof<VkDeviceAddress> && x.raygenShaderRecordSize = Unchecked.defaultof<VkDeviceSize> && x.missShaderBindingTableAddress = Unchecked.defaultof<VkDeviceAddress> && x.missShaderBindingTableSize = Unchecked.defaultof<VkDeviceSize> && x.missShaderBindingTableStride = Unchecked.defaultof<VkDeviceSize> && x.hitShaderBindingTableAddress = Unchecked.defaultof<VkDeviceAddress> && x.hitShaderBindingTableSize = Unchecked.defaultof<VkDeviceSize> && x.hitShaderBindingTableStride = Unchecked.defaultof<VkDeviceSize> && x.callableShaderBindingTableAddress = Unchecked.defaultof<VkDeviceAddress> && x.callableShaderBindingTableSize = Unchecked.defaultof<VkDeviceSize> && x.callableShaderBindingTableStride = Unchecked.defaultof<VkDeviceSize> && x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32> && x.depth = Unchecked.defaultof<uint32>

                    static member Empty =
                        VkTraceRaysIndirectCommand2KHR(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "raygenShaderRecordAddress = %A" x.raygenShaderRecordAddress
                            sprintf "raygenShaderRecordSize = %A" x.raygenShaderRecordSize
                            sprintf "missShaderBindingTableAddress = %A" x.missShaderBindingTableAddress
                            sprintf "missShaderBindingTableSize = %A" x.missShaderBindingTableSize
                            sprintf "missShaderBindingTableStride = %A" x.missShaderBindingTableStride
                            sprintf "hitShaderBindingTableAddress = %A" x.hitShaderBindingTableAddress
                            sprintf "hitShaderBindingTableSize = %A" x.hitShaderBindingTableSize
                            sprintf "hitShaderBindingTableStride = %A" x.hitShaderBindingTableStride
                            sprintf "callableShaderBindingTableAddress = %A" x.callableShaderBindingTableAddress
                            sprintf "callableShaderBindingTableSize = %A" x.callableShaderBindingTableSize
                            sprintf "callableShaderBindingTableStride = %A" x.callableShaderBindingTableStride
                            sprintf "width = %A" x.width
                            sprintf "height = %A" x.height
                            sprintf "depth = %A" x.depth
                        ] |> sprintf "VkTraceRaysIndirectCommand2KHR { %s }"
                end


            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdTraceRaysIndirect2KHRDel = delegate of VkCommandBuffer * VkDeviceAddress -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading KHRRayTracingMaintenance1 -> KHRRayTracingPipeline")
                    static let s_vkCmdTraceRaysIndirect2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdTraceRaysIndirect2KHRDel> "vkCmdTraceRaysIndirect2KHR"
                    static do Report.End(3) |> ignore
                    static member vkCmdTraceRaysIndirect2KHR = s_vkCmdTraceRaysIndirect2KHRDel
                let vkCmdTraceRaysIndirect2KHR(commandBuffer : VkCommandBuffer, indirectDeviceAddress : VkDeviceAddress) = Loader<unit>.vkCmdTraceRaysIndirect2KHR.Invoke(commandBuffer, indirectDeviceAddress)

        [<AutoOpen>]
        module ``EXTDeviceGeneratedCommands`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type EXTDeviceGeneratedCommands.VkIndirectCommandsTokenTypeEXT with
                      static member inline TraceRays2 = enum<EXTDeviceGeneratedCommands.VkIndirectCommandsTokenTypeEXT> 1000386004


    /// Requires EXTGlobalPriority, (KHRGetPhysicalDeviceProperties2 | Vulkan11).
    /// Promoted to KHRGlobalPriority.
    module EXTGlobalPriorityQuery =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_global_priority_query"
        let Number = 389

        type VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT = Vulkan14.VkPhysicalDeviceGlobalPriorityQueryFeatures

        type VkQueueFamilyGlobalPriorityPropertiesEXT = Vulkan14.VkQueueFamilyGlobalPriorityProperties



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTImageViewMinLod =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_image_view_min_lod"
        let Number = 392

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageViewMinLodCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public minLod : float32

                new(pNext: nativeint, minLod: float32) =
                    {
                        sType = 1000391001u
                        pNext = pNext
                        minLod = minLod
                    }

                new(minLod: float32) =
                    VkImageViewMinLodCreateInfoEXT(Unchecked.defaultof<nativeint>, minLod)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.minLod = Unchecked.defaultof<float32>

                static member Empty =
                    VkImageViewMinLodCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<float32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "minLod = %A" x.minLod
                    ] |> sprintf "VkImageViewMinLodCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImageViewMinLodFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public minLod : VkBool32

                new(pNext: nativeint, minLod: VkBool32) =
                    {
                        sType = 1000391000u
                        pNext = pNext
                        minLod = minLod
                    }

                new(minLod: VkBool32) =
                    VkPhysicalDeviceImageViewMinLodFeaturesEXT(Unchecked.defaultof<nativeint>, minLod)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.minLod = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceImageViewMinLodFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "minLod = %A" x.minLod
                    ] |> sprintf "VkPhysicalDeviceImageViewMinLodFeaturesEXT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTMultiDraw =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_multi_draw"
        let Number = 393

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMultiDrawIndexedInfoEXT =
            struct
                val mutable public firstIndex : uint32
                val mutable public indexCount : uint32
                val mutable public vertexOffset : int32

                new(firstIndex: uint32, indexCount: uint32, vertexOffset: int32) =
                    {
                        firstIndex = firstIndex
                        indexCount = indexCount
                        vertexOffset = vertexOffset
                    }

                member x.IsEmpty =
                    x.firstIndex = Unchecked.defaultof<uint32> && x.indexCount = Unchecked.defaultof<uint32> && x.vertexOffset = Unchecked.defaultof<int32>

                static member Empty =
                    VkMultiDrawIndexedInfoEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<int32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "firstIndex = %A" x.firstIndex
                        sprintf "indexCount = %A" x.indexCount
                        sprintf "vertexOffset = %A" x.vertexOffset
                    ] |> sprintf "VkMultiDrawIndexedInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMultiDrawInfoEXT =
            struct
                val mutable public firstVertex : uint32
                val mutable public vertexCount : uint32

                new(firstVertex: uint32, vertexCount: uint32) =
                    {
                        firstVertex = firstVertex
                        vertexCount = vertexCount
                    }

                member x.IsEmpty =
                    x.firstVertex = Unchecked.defaultof<uint32> && x.vertexCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkMultiDrawInfoEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "firstVertex = %A" x.firstVertex
                        sprintf "vertexCount = %A" x.vertexCount
                    ] |> sprintf "VkMultiDrawInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMultiDrawFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public multiDraw : VkBool32

                new(pNext: nativeint, multiDraw: VkBool32) =
                    {
                        sType = 1000392000u
                        pNext = pNext
                        multiDraw = multiDraw
                    }

                new(multiDraw: VkBool32) =
                    VkPhysicalDeviceMultiDrawFeaturesEXT(Unchecked.defaultof<nativeint>, multiDraw)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.multiDraw = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMultiDrawFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "multiDraw = %A" x.multiDraw
                    ] |> sprintf "VkPhysicalDeviceMultiDrawFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMultiDrawPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxMultiDrawCount : uint32

                new(pNext: nativeint, maxMultiDrawCount: uint32) =
                    {
                        sType = 1000392001u
                        pNext = pNext
                        maxMultiDrawCount = maxMultiDrawCount
                    }

                new(maxMultiDrawCount: uint32) =
                    VkPhysicalDeviceMultiDrawPropertiesEXT(Unchecked.defaultof<nativeint>, maxMultiDrawCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxMultiDrawCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceMultiDrawPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxMultiDrawCount = %A" x.maxMultiDrawCount
                    ] |> sprintf "VkPhysicalDeviceMultiDrawPropertiesEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawMultiEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkMultiDrawInfoEXT> * uint32 * uint32 * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawMultiIndexedEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkMultiDrawIndexedInfoEXT> * uint32 * uint32 * uint32 * nativeptr<int32> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTMultiDraw")
                static let s_vkCmdDrawMultiEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMultiEXTDel> "vkCmdDrawMultiEXT"
                static let s_vkCmdDrawMultiIndexedEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMultiIndexedEXTDel> "vkCmdDrawMultiIndexedEXT"
                static do Report.End(3) |> ignore
                static member vkCmdDrawMultiEXT = s_vkCmdDrawMultiEXTDel
                static member vkCmdDrawMultiIndexedEXT = s_vkCmdDrawMultiIndexedEXTDel
            let vkCmdDrawMultiEXT(commandBuffer : VkCommandBuffer, drawCount : uint32, pVertexInfo : nativeptr<VkMultiDrawInfoEXT>, instanceCount : uint32, firstInstance : uint32, stride : uint32) = Loader<unit>.vkCmdDrawMultiEXT.Invoke(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride)
            let vkCmdDrawMultiIndexedEXT(commandBuffer : VkCommandBuffer, drawCount : uint32, pIndexInfo : nativeptr<VkMultiDrawIndexedInfoEXT>, instanceCount : uint32, firstInstance : uint32, stride : uint32, pVertexOffset : nativeptr<int32>) = Loader<unit>.vkCmdDrawMultiIndexedEXT.Invoke(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset)

    /// Requires (KHRMaintenance1, KHRGetPhysicalDeviceProperties2) | Vulkan11.
    module EXTImage2dViewOf3d =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_image_2d_view_of_3d"
        let Number = 394

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImage2DViewOf3DFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public image2DViewOf3D : VkBool32
                val mutable public sampler2DViewOf3D : VkBool32

                new(pNext: nativeint, image2DViewOf3D: VkBool32, sampler2DViewOf3D: VkBool32) =
                    {
                        sType = 1000393000u
                        pNext = pNext
                        image2DViewOf3D = image2DViewOf3D
                        sampler2DViewOf3D = sampler2DViewOf3D
                    }

                new(image2DViewOf3D: VkBool32, sampler2DViewOf3D: VkBool32) =
                    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(Unchecked.defaultof<nativeint>, image2DViewOf3D, sampler2DViewOf3D)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.image2DViewOf3D = Unchecked.defaultof<VkBool32> && x.sampler2DViewOf3D = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "image2DViewOf3D = %A" x.image2DViewOf3D
                        sprintf "sampler2DViewOf3D = %A" x.sampler2DViewOf3D
                    ] |> sprintf "VkPhysicalDeviceImage2DViewOf3DFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageCreateFlags with
                  /// Image is created with a layout where individual slices are capable of being used as 2D images
                  static member inline D2dViewCompatibleBitExt = enum<VkImageCreateFlags> 0x00020000


    module KHRPortabilityEnumeration =
        let Type = ExtensionType.Instance
        let Name = "VK_KHR_portability_enumeration"
        let Number = 395

        [<AutoOpen>]
        module EnumExtensions =
             type VkInstanceCreateFlags with
                  static member inline EnumeratePortabilityBitKhr = enum<VkInstanceCreateFlags> 0x00000001


    /// Requires Vulkan13.
    module EXTShaderTileImage =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_shader_tile_image"
        let Number = 396

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderTileImageFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderTileImageColorReadAccess : VkBool32
                val mutable public shaderTileImageDepthReadAccess : VkBool32
                val mutable public shaderTileImageStencilReadAccess : VkBool32

                new(pNext: nativeint, shaderTileImageColorReadAccess: VkBool32, shaderTileImageDepthReadAccess: VkBool32, shaderTileImageStencilReadAccess: VkBool32) =
                    {
                        sType = 1000395000u
                        pNext = pNext
                        shaderTileImageColorReadAccess = shaderTileImageColorReadAccess
                        shaderTileImageDepthReadAccess = shaderTileImageDepthReadAccess
                        shaderTileImageStencilReadAccess = shaderTileImageStencilReadAccess
                    }

                new(shaderTileImageColorReadAccess: VkBool32, shaderTileImageDepthReadAccess: VkBool32, shaderTileImageStencilReadAccess: VkBool32) =
                    VkPhysicalDeviceShaderTileImageFeaturesEXT(Unchecked.defaultof<nativeint>, shaderTileImageColorReadAccess, shaderTileImageDepthReadAccess, shaderTileImageStencilReadAccess)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderTileImageColorReadAccess = Unchecked.defaultof<VkBool32> && x.shaderTileImageDepthReadAccess = Unchecked.defaultof<VkBool32> && x.shaderTileImageStencilReadAccess = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderTileImageFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderTileImageColorReadAccess = %A" x.shaderTileImageColorReadAccess
                        sprintf "shaderTileImageDepthReadAccess = %A" x.shaderTileImageDepthReadAccess
                        sprintf "shaderTileImageStencilReadAccess = %A" x.shaderTileImageStencilReadAccess
                    ] |> sprintf "VkPhysicalDeviceShaderTileImageFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderTileImagePropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderTileImageCoherentReadAccelerated : VkBool32
                val mutable public shaderTileImageReadSampleFromPixelRateInvocation : VkBool32
                val mutable public shaderTileImageReadFromHelperInvocation : VkBool32

                new(pNext: nativeint, shaderTileImageCoherentReadAccelerated: VkBool32, shaderTileImageReadSampleFromPixelRateInvocation: VkBool32, shaderTileImageReadFromHelperInvocation: VkBool32) =
                    {
                        sType = 1000395001u
                        pNext = pNext
                        shaderTileImageCoherentReadAccelerated = shaderTileImageCoherentReadAccelerated
                        shaderTileImageReadSampleFromPixelRateInvocation = shaderTileImageReadSampleFromPixelRateInvocation
                        shaderTileImageReadFromHelperInvocation = shaderTileImageReadFromHelperInvocation
                    }

                new(shaderTileImageCoherentReadAccelerated: VkBool32, shaderTileImageReadSampleFromPixelRateInvocation: VkBool32, shaderTileImageReadFromHelperInvocation: VkBool32) =
                    VkPhysicalDeviceShaderTileImagePropertiesEXT(Unchecked.defaultof<nativeint>, shaderTileImageCoherentReadAccelerated, shaderTileImageReadSampleFromPixelRateInvocation, shaderTileImageReadFromHelperInvocation)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderTileImageCoherentReadAccelerated = Unchecked.defaultof<VkBool32> && x.shaderTileImageReadSampleFromPixelRateInvocation = Unchecked.defaultof<VkBool32> && x.shaderTileImageReadFromHelperInvocation = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderTileImagePropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderTileImageCoherentReadAccelerated = %A" x.shaderTileImageCoherentReadAccelerated
                        sprintf "shaderTileImageReadSampleFromPixelRateInvocation = %A" x.shaderTileImageReadSampleFromPixelRateInvocation
                        sprintf "shaderTileImageReadFromHelperInvocation = %A" x.shaderTileImageReadFromHelperInvocation
                    ] |> sprintf "VkPhysicalDeviceShaderTileImagePropertiesEXT { %s }"
            end



    /// Requires KHRAccelerationStructure, (KHRSynchronization2 | Vulkan13).
    module EXTOpacityMicromap =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_opacity_micromap"
        let Number = 397


        [<StructLayout(LayoutKind.Sequential)>]
        type VkMicromapEXT =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkMicromapEXT(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        type VkMicromapTypeEXT =
            | OpacityMicromap = 0

        [<Flags>]
        type VkBuildMicromapFlagsEXT =
            | All = 7
            | None = 0
            | PreferFastTraceBit = 0x00000001
            | PreferFastBuildBit = 0x00000002
            | AllowCompactionBit = 0x00000004

        type VkCopyMicromapModeEXT =
            | Clone = 0
            | Serialize = 1
            | Deserialize = 2
            | Compact = 3

        [<Flags>]
        type VkMicromapCreateFlagsEXT =
            | All = 1
            | None = 0
            | DeviceAddressCaptureReplayBit = 0x00000001

        type VkBuildMicromapModeEXT =
            | Build = 0

        type VkOpacityMicromapFormatEXT =
            | D2State = 1
            | D4State = 2

        type VkOpacityMicromapSpecialIndexEXT =
            | FullyTransparent = -1
            | FullyOpaque = -2
            | FullyUnknownTransparent = -3
            | FullyUnknownOpaque = -4


        [<StructLayout(LayoutKind.Sequential)>]
        type VkMicromapUsageEXT =
            struct
                val mutable public count : uint32
                val mutable public subdivisionLevel : uint32
                val mutable public format : uint32

                new(count: uint32, subdivisionLevel: uint32, format: uint32) =
                    {
                        count = count
                        subdivisionLevel = subdivisionLevel
                        format = format
                    }

                member x.IsEmpty =
                    x.count = Unchecked.defaultof<uint32> && x.subdivisionLevel = Unchecked.defaultof<uint32> && x.format = Unchecked.defaultof<uint32>

                static member Empty =
                    VkMicromapUsageEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "count = %A" x.count
                        sprintf "subdivisionLevel = %A" x.subdivisionLevel
                        sprintf "format = %A" x.format
                    ] |> sprintf "VkMicromapUsageEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureTrianglesOpacityMicromapEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public indexType : VkIndexType
                val mutable public indexBuffer : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public indexStride : VkDeviceSize
                val mutable public baseTriangle : uint32
                val mutable public usageCountsCount : uint32
                val mutable public pUsageCounts : nativeptr<VkMicromapUsageEXT>
                val mutable public ppUsageCounts : nativeptr<nativeptr<VkMicromapUsageEXT>>
                val mutable public micromap : VkMicromapEXT

                new(pNext: nativeint, indexType: VkIndexType, indexBuffer: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, indexStride: VkDeviceSize, baseTriangle: uint32, usageCountsCount: uint32, pUsageCounts: nativeptr<VkMicromapUsageEXT>, ppUsageCounts: nativeptr<nativeptr<VkMicromapUsageEXT>>, micromap: VkMicromapEXT) =
                    {
                        sType = 1000396009u
                        pNext = pNext
                        indexType = indexType
                        indexBuffer = indexBuffer
                        indexStride = indexStride
                        baseTriangle = baseTriangle
                        usageCountsCount = usageCountsCount
                        pUsageCounts = pUsageCounts
                        ppUsageCounts = ppUsageCounts
                        micromap = micromap
                    }

                new(indexType: VkIndexType, indexBuffer: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, indexStride: VkDeviceSize, baseTriangle: uint32, usageCountsCount: uint32, pUsageCounts: nativeptr<VkMicromapUsageEXT>, ppUsageCounts: nativeptr<nativeptr<VkMicromapUsageEXT>>, micromap: VkMicromapEXT) =
                    VkAccelerationStructureTrianglesOpacityMicromapEXT(Unchecked.defaultof<nativeint>, indexType, indexBuffer, indexStride, baseTriangle, usageCountsCount, pUsageCounts, ppUsageCounts, micromap)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.indexType = Unchecked.defaultof<VkIndexType> && x.indexBuffer = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.indexStride = Unchecked.defaultof<VkDeviceSize> && x.baseTriangle = Unchecked.defaultof<uint32> && x.usageCountsCount = Unchecked.defaultof<uint32> && x.pUsageCounts = Unchecked.defaultof<nativeptr<VkMicromapUsageEXT>> && x.ppUsageCounts = Unchecked.defaultof<nativeptr<nativeptr<VkMicromapUsageEXT>>> && x.micromap = Unchecked.defaultof<VkMicromapEXT>

                static member Empty =
                    VkAccelerationStructureTrianglesOpacityMicromapEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkIndexType>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkMicromapUsageEXT>>, Unchecked.defaultof<nativeptr<nativeptr<VkMicromapUsageEXT>>>, Unchecked.defaultof<VkMicromapEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "indexType = %A" x.indexType
                        sprintf "indexBuffer = %A" x.indexBuffer
                        sprintf "indexStride = %A" x.indexStride
                        sprintf "baseTriangle = %A" x.baseTriangle
                        sprintf "usageCountsCount = %A" x.usageCountsCount
                        sprintf "pUsageCounts = %A" x.pUsageCounts
                        sprintf "ppUsageCounts = %A" x.ppUsageCounts
                        sprintf "micromap = %A" x.micromap
                    ] |> sprintf "VkAccelerationStructureTrianglesOpacityMicromapEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCopyMemoryToMicromapInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public src : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public dst : VkMicromapEXT
                val mutable public mode : VkCopyMicromapModeEXT

                new(pNext: nativeint, src: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, dst: VkMicromapEXT, mode: VkCopyMicromapModeEXT) =
                    {
                        sType = 1000396004u
                        pNext = pNext
                        src = src
                        dst = dst
                        mode = mode
                    }

                new(src: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, dst: VkMicromapEXT, mode: VkCopyMicromapModeEXT) =
                    VkCopyMemoryToMicromapInfoEXT(Unchecked.defaultof<nativeint>, src, dst, mode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.src = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.dst = Unchecked.defaultof<VkMicromapEXT> && x.mode = Unchecked.defaultof<VkCopyMicromapModeEXT>

                static member Empty =
                    VkCopyMemoryToMicromapInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkMicromapEXT>, Unchecked.defaultof<VkCopyMicromapModeEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "src = %A" x.src
                        sprintf "dst = %A" x.dst
                        sprintf "mode = %A" x.mode
                    ] |> sprintf "VkCopyMemoryToMicromapInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCopyMicromapInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public src : VkMicromapEXT
                val mutable public dst : VkMicromapEXT
                val mutable public mode : VkCopyMicromapModeEXT

                new(pNext: nativeint, src: VkMicromapEXT, dst: VkMicromapEXT, mode: VkCopyMicromapModeEXT) =
                    {
                        sType = 1000396002u
                        pNext = pNext
                        src = src
                        dst = dst
                        mode = mode
                    }

                new(src: VkMicromapEXT, dst: VkMicromapEXT, mode: VkCopyMicromapModeEXT) =
                    VkCopyMicromapInfoEXT(Unchecked.defaultof<nativeint>, src, dst, mode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.src = Unchecked.defaultof<VkMicromapEXT> && x.dst = Unchecked.defaultof<VkMicromapEXT> && x.mode = Unchecked.defaultof<VkCopyMicromapModeEXT>

                static member Empty =
                    VkCopyMicromapInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMicromapEXT>, Unchecked.defaultof<VkMicromapEXT>, Unchecked.defaultof<VkCopyMicromapModeEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "src = %A" x.src
                        sprintf "dst = %A" x.dst
                        sprintf "mode = %A" x.mode
                    ] |> sprintf "VkCopyMicromapInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCopyMicromapToMemoryInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public src : VkMicromapEXT
                val mutable public dst : KHRAccelerationStructure.VkDeviceOrHostAddressKHR
                val mutable public mode : VkCopyMicromapModeEXT

                new(pNext: nativeint, src: VkMicromapEXT, dst: KHRAccelerationStructure.VkDeviceOrHostAddressKHR, mode: VkCopyMicromapModeEXT) =
                    {
                        sType = 1000396003u
                        pNext = pNext
                        src = src
                        dst = dst
                        mode = mode
                    }

                new(src: VkMicromapEXT, dst: KHRAccelerationStructure.VkDeviceOrHostAddressKHR, mode: VkCopyMicromapModeEXT) =
                    VkCopyMicromapToMemoryInfoEXT(Unchecked.defaultof<nativeint>, src, dst, mode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.src = Unchecked.defaultof<VkMicromapEXT> && x.dst = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressKHR> && x.mode = Unchecked.defaultof<VkCopyMicromapModeEXT>

                static member Empty =
                    VkCopyMicromapToMemoryInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMicromapEXT>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressKHR>, Unchecked.defaultof<VkCopyMicromapModeEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "src = %A" x.src
                        sprintf "dst = %A" x.dst
                        sprintf "mode = %A" x.mode
                    ] |> sprintf "VkCopyMicromapToMemoryInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMicromapBuildInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _type : VkMicromapTypeEXT
                val mutable public flags : VkBuildMicromapFlagsEXT
                val mutable public mode : VkBuildMicromapModeEXT
                val mutable public dstMicromap : VkMicromapEXT
                val mutable public usageCountsCount : uint32
                val mutable public pUsageCounts : nativeptr<VkMicromapUsageEXT>
                val mutable public ppUsageCounts : nativeptr<nativeptr<VkMicromapUsageEXT>>
                val mutable public data : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public scratchData : KHRAccelerationStructure.VkDeviceOrHostAddressKHR
                val mutable public triangleArray : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public triangleArrayStride : VkDeviceSize

                new(pNext: nativeint, _type: VkMicromapTypeEXT, flags: VkBuildMicromapFlagsEXT, mode: VkBuildMicromapModeEXT, dstMicromap: VkMicromapEXT, usageCountsCount: uint32, pUsageCounts: nativeptr<VkMicromapUsageEXT>, ppUsageCounts: nativeptr<nativeptr<VkMicromapUsageEXT>>, data: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, scratchData: KHRAccelerationStructure.VkDeviceOrHostAddressKHR, triangleArray: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, triangleArrayStride: VkDeviceSize) =
                    {
                        sType = 1000396000u
                        pNext = pNext
                        _type = _type
                        flags = flags
                        mode = mode
                        dstMicromap = dstMicromap
                        usageCountsCount = usageCountsCount
                        pUsageCounts = pUsageCounts
                        ppUsageCounts = ppUsageCounts
                        data = data
                        scratchData = scratchData
                        triangleArray = triangleArray
                        triangleArrayStride = triangleArrayStride
                    }

                new(_type: VkMicromapTypeEXT, flags: VkBuildMicromapFlagsEXT, mode: VkBuildMicromapModeEXT, dstMicromap: VkMicromapEXT, usageCountsCount: uint32, pUsageCounts: nativeptr<VkMicromapUsageEXT>, ppUsageCounts: nativeptr<nativeptr<VkMicromapUsageEXT>>, data: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, scratchData: KHRAccelerationStructure.VkDeviceOrHostAddressKHR, triangleArray: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, triangleArrayStride: VkDeviceSize) =
                    VkMicromapBuildInfoEXT(Unchecked.defaultof<nativeint>, _type, flags, mode, dstMicromap, usageCountsCount, pUsageCounts, ppUsageCounts, data, scratchData, triangleArray, triangleArrayStride)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkMicromapTypeEXT> && x.flags = Unchecked.defaultof<VkBuildMicromapFlagsEXT> && x.mode = Unchecked.defaultof<VkBuildMicromapModeEXT> && x.dstMicromap = Unchecked.defaultof<VkMicromapEXT> && x.usageCountsCount = Unchecked.defaultof<uint32> && x.pUsageCounts = Unchecked.defaultof<nativeptr<VkMicromapUsageEXT>> && x.ppUsageCounts = Unchecked.defaultof<nativeptr<nativeptr<VkMicromapUsageEXT>>> && x.data = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.scratchData = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressKHR> && x.triangleArray = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.triangleArrayStride = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkMicromapBuildInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMicromapTypeEXT>, Unchecked.defaultof<VkBuildMicromapFlagsEXT>, Unchecked.defaultof<VkBuildMicromapModeEXT>, Unchecked.defaultof<VkMicromapEXT>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkMicromapUsageEXT>>, Unchecked.defaultof<nativeptr<nativeptr<VkMicromapUsageEXT>>>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressKHR>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_type = %A" x._type
                        sprintf "flags = %A" x.flags
                        sprintf "mode = %A" x.mode
                        sprintf "dstMicromap = %A" x.dstMicromap
                        sprintf "usageCountsCount = %A" x.usageCountsCount
                        sprintf "pUsageCounts = %A" x.pUsageCounts
                        sprintf "ppUsageCounts = %A" x.ppUsageCounts
                        sprintf "data = %A" x.data
                        sprintf "scratchData = %A" x.scratchData
                        sprintf "triangleArray = %A" x.triangleArray
                        sprintf "triangleArrayStride = %A" x.triangleArrayStride
                    ] |> sprintf "VkMicromapBuildInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMicromapBuildSizesInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public micromapSize : VkDeviceSize
                val mutable public buildScratchSize : VkDeviceSize
                val mutable public discardable : VkBool32

                new(pNext: nativeint, micromapSize: VkDeviceSize, buildScratchSize: VkDeviceSize, discardable: VkBool32) =
                    {
                        sType = 1000396008u
                        pNext = pNext
                        micromapSize = micromapSize
                        buildScratchSize = buildScratchSize
                        discardable = discardable
                    }

                new(micromapSize: VkDeviceSize, buildScratchSize: VkDeviceSize, discardable: VkBool32) =
                    VkMicromapBuildSizesInfoEXT(Unchecked.defaultof<nativeint>, micromapSize, buildScratchSize, discardable)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.micromapSize = Unchecked.defaultof<VkDeviceSize> && x.buildScratchSize = Unchecked.defaultof<VkDeviceSize> && x.discardable = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkMicromapBuildSizesInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "micromapSize = %A" x.micromapSize
                        sprintf "buildScratchSize = %A" x.buildScratchSize
                        sprintf "discardable = %A" x.discardable
                    ] |> sprintf "VkMicromapBuildSizesInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMicromapCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public createFlags : VkMicromapCreateFlagsEXT
                val mutable public buffer : VkBuffer
                val mutable public offset : VkDeviceSize
                val mutable public size : VkDeviceSize
                val mutable public _type : VkMicromapTypeEXT
                val mutable public deviceAddress : VkDeviceAddress

                new(pNext: nativeint, createFlags: VkMicromapCreateFlagsEXT, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize, _type: VkMicromapTypeEXT, deviceAddress: VkDeviceAddress) =
                    {
                        sType = 1000396007u
                        pNext = pNext
                        createFlags = createFlags
                        buffer = buffer
                        offset = offset
                        size = size
                        _type = _type
                        deviceAddress = deviceAddress
                    }

                new(createFlags: VkMicromapCreateFlagsEXT, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize, _type: VkMicromapTypeEXT, deviceAddress: VkDeviceAddress) =
                    VkMicromapCreateInfoEXT(Unchecked.defaultof<nativeint>, createFlags, buffer, offset, size, _type, deviceAddress)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.createFlags = Unchecked.defaultof<VkMicromapCreateFlagsEXT> && x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize> && x._type = Unchecked.defaultof<VkMicromapTypeEXT> && x.deviceAddress = Unchecked.defaultof<VkDeviceAddress>

                static member Empty =
                    VkMicromapCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMicromapCreateFlagsEXT>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkMicromapTypeEXT>, Unchecked.defaultof<VkDeviceAddress>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "createFlags = %A" x.createFlags
                        sprintf "buffer = %A" x.buffer
                        sprintf "offset = %A" x.offset
                        sprintf "size = %A" x.size
                        sprintf "_type = %A" x._type
                        sprintf "deviceAddress = %A" x.deviceAddress
                    ] |> sprintf "VkMicromapCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMicromapTriangleEXT =
            struct
                val mutable public dataOffset : uint32
                val mutable public subdivisionLevel : uint16
                val mutable public format : uint16

                new(dataOffset: uint32, subdivisionLevel: uint16, format: uint16) =
                    {
                        dataOffset = dataOffset
                        subdivisionLevel = subdivisionLevel
                        format = format
                    }

                member x.IsEmpty =
                    x.dataOffset = Unchecked.defaultof<uint32> && x.subdivisionLevel = Unchecked.defaultof<uint16> && x.format = Unchecked.defaultof<uint16>

                static member Empty =
                    VkMicromapTriangleEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint16>, Unchecked.defaultof<uint16>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "dataOffset = %A" x.dataOffset
                        sprintf "subdivisionLevel = %A" x.subdivisionLevel
                        sprintf "format = %A" x.format
                    ] |> sprintf "VkMicromapTriangleEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMicromapVersionInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pVersionData : nativeptr<byte>

                new(pNext: nativeint, pVersionData: nativeptr<byte>) =
                    {
                        sType = 1000396001u
                        pNext = pNext
                        pVersionData = pVersionData
                    }

                new(pVersionData: nativeptr<byte>) =
                    VkMicromapVersionInfoEXT(Unchecked.defaultof<nativeint>, pVersionData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pVersionData = Unchecked.defaultof<nativeptr<byte>>

                static member Empty =
                    VkMicromapVersionInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<byte>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pVersionData = %A" x.pVersionData
                    ] |> sprintf "VkMicromapVersionInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceOpacityMicromapFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public micromap : VkBool32
                val mutable public micromapCaptureReplay : VkBool32
                val mutable public micromapHostCommands : VkBool32

                new(pNext: nativeint, micromap: VkBool32, micromapCaptureReplay: VkBool32, micromapHostCommands: VkBool32) =
                    {
                        sType = 1000396005u
                        pNext = pNext
                        micromap = micromap
                        micromapCaptureReplay = micromapCaptureReplay
                        micromapHostCommands = micromapHostCommands
                    }

                new(micromap: VkBool32, micromapCaptureReplay: VkBool32, micromapHostCommands: VkBool32) =
                    VkPhysicalDeviceOpacityMicromapFeaturesEXT(Unchecked.defaultof<nativeint>, micromap, micromapCaptureReplay, micromapHostCommands)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.micromap = Unchecked.defaultof<VkBool32> && x.micromapCaptureReplay = Unchecked.defaultof<VkBool32> && x.micromapHostCommands = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceOpacityMicromapFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "micromap = %A" x.micromap
                        sprintf "micromapCaptureReplay = %A" x.micromapCaptureReplay
                        sprintf "micromapHostCommands = %A" x.micromapHostCommands
                    ] |> sprintf "VkPhysicalDeviceOpacityMicromapFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceOpacityMicromapPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxOpacity2StateSubdivisionLevel : uint32
                val mutable public maxOpacity4StateSubdivisionLevel : uint32

                new(pNext: nativeint, maxOpacity2StateSubdivisionLevel: uint32, maxOpacity4StateSubdivisionLevel: uint32) =
                    {
                        sType = 1000396006u
                        pNext = pNext
                        maxOpacity2StateSubdivisionLevel = maxOpacity2StateSubdivisionLevel
                        maxOpacity4StateSubdivisionLevel = maxOpacity4StateSubdivisionLevel
                    }

                new(maxOpacity2StateSubdivisionLevel: uint32, maxOpacity4StateSubdivisionLevel: uint32) =
                    VkPhysicalDeviceOpacityMicromapPropertiesEXT(Unchecked.defaultof<nativeint>, maxOpacity2StateSubdivisionLevel, maxOpacity4StateSubdivisionLevel)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxOpacity2StateSubdivisionLevel = Unchecked.defaultof<uint32> && x.maxOpacity4StateSubdivisionLevel = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceOpacityMicromapPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxOpacity2StateSubdivisionLevel = %A" x.maxOpacity2StateSubdivisionLevel
                        sprintf "maxOpacity4StateSubdivisionLevel = %A" x.maxOpacity4StateSubdivisionLevel
                    ] |> sprintf "VkPhysicalDeviceOpacityMicromapPropertiesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkAccessFlags2 with
                  static member inline Access2MicromapReadBitExt = enum<Vulkan13.VkAccessFlags2> 0x00001000
                  static member inline Access2MicromapWriteBitExt = enum<Vulkan13.VkAccessFlags2> 0x00002000
             type VkBufferUsageFlags with
                  static member inline MicromapBuildInputReadOnlyBitExt = enum<VkBufferUsageFlags> 0x00800000
                  static member inline MicromapStorageBitExt = enum<VkBufferUsageFlags> 0x01000000
             type KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR with
                  static member inline AllowOpacityMicromapUpdateExt = enum<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> 0x00000040
                  static member inline AllowDisableOpacityMicromapsExt = enum<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> 0x00000080
                  static member inline AllowOpacityMicromapDataUpdateExt = enum<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> 0x00000100
             type KHRAccelerationStructure.VkGeometryInstanceFlagsKHR with
                  static member inline ForceOpacityMicromap2StateExt = enum<KHRAccelerationStructure.VkGeometryInstanceFlagsKHR> 0x00000010
                  static member inline DisableOpacityMicromapsExt = enum<KHRAccelerationStructure.VkGeometryInstanceFlagsKHR> 0x00000020
             type VkObjectType with
                  static member inline MicromapExt = enum<VkObjectType> 1000396000
             type VkPipelineCreateFlags with
                  static member inline RayTracingOpacityMicromapBitExt = enum<VkPipelineCreateFlags> 0x01000000
             type Vulkan13.VkPipelineStageFlags2 with
                  static member inline PipelineStage2MicromapBuildBitExt = enum<Vulkan13.VkPipelineStageFlags2> 0x40000000
             type VkQueryType with
                  static member inline MicromapSerializationSizeExt = enum<VkQueryType> 1000396000
                  static member inline MicromapCompactedSizeExt = enum<VkQueryType> 1000396001

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateMicromapEXTDel = delegate of VkDevice * nativeptr<VkMicromapCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkMicromapEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyMicromapEXTDel = delegate of VkDevice * VkMicromapEXT * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBuildMicromapsEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkMicromapBuildInfoEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkBuildMicromapsEXTDel = delegate of VkDevice * KHRDeferredHostOperations.VkDeferredOperationKHR * uint32 * nativeptr<VkMicromapBuildInfoEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCopyMicromapEXTDel = delegate of VkDevice * KHRDeferredHostOperations.VkDeferredOperationKHR * nativeptr<VkCopyMicromapInfoEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCopyMicromapToMemoryEXTDel = delegate of VkDevice * KHRDeferredHostOperations.VkDeferredOperationKHR * nativeptr<VkCopyMicromapToMemoryInfoEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCopyMemoryToMicromapEXTDel = delegate of VkDevice * KHRDeferredHostOperations.VkDeferredOperationKHR * nativeptr<VkCopyMemoryToMicromapInfoEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkWriteMicromapsPropertiesEXTDel = delegate of VkDevice * uint32 * nativeptr<VkMicromapEXT> * VkQueryType * uint64 * nativeint * uint64 -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyMicromapEXTDel = delegate of VkCommandBuffer * nativeptr<VkCopyMicromapInfoEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyMicromapToMemoryEXTDel = delegate of VkCommandBuffer * nativeptr<VkCopyMicromapToMemoryInfoEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyMemoryToMicromapEXTDel = delegate of VkCommandBuffer * nativeptr<VkCopyMemoryToMicromapInfoEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdWriteMicromapsPropertiesEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkMicromapEXT> * VkQueryType * VkQueryPool * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceMicromapCompatibilityEXTDel = delegate of VkDevice * nativeptr<VkMicromapVersionInfoEXT> * nativeptr<KHRAccelerationStructure.VkAccelerationStructureCompatibilityKHR> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMicromapBuildSizesEXTDel = delegate of VkDevice * KHRAccelerationStructure.VkAccelerationStructureBuildTypeKHR * nativeptr<VkMicromapBuildInfoEXT> * nativeptr<VkMicromapBuildSizesInfoEXT> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTOpacityMicromap")
                static let s_vkCreateMicromapEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateMicromapEXTDel> "vkCreateMicromapEXT"
                static let s_vkDestroyMicromapEXTDel = VkRaw.vkImportInstanceDelegate<VkDestroyMicromapEXTDel> "vkDestroyMicromapEXT"
                static let s_vkCmdBuildMicromapsEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBuildMicromapsEXTDel> "vkCmdBuildMicromapsEXT"
                static let s_vkBuildMicromapsEXTDel = VkRaw.vkImportInstanceDelegate<VkBuildMicromapsEXTDel> "vkBuildMicromapsEXT"
                static let s_vkCopyMicromapEXTDel = VkRaw.vkImportInstanceDelegate<VkCopyMicromapEXTDel> "vkCopyMicromapEXT"
                static let s_vkCopyMicromapToMemoryEXTDel = VkRaw.vkImportInstanceDelegate<VkCopyMicromapToMemoryEXTDel> "vkCopyMicromapToMemoryEXT"
                static let s_vkCopyMemoryToMicromapEXTDel = VkRaw.vkImportInstanceDelegate<VkCopyMemoryToMicromapEXTDel> "vkCopyMemoryToMicromapEXT"
                static let s_vkWriteMicromapsPropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkWriteMicromapsPropertiesEXTDel> "vkWriteMicromapsPropertiesEXT"
                static let s_vkCmdCopyMicromapEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyMicromapEXTDel> "vkCmdCopyMicromapEXT"
                static let s_vkCmdCopyMicromapToMemoryEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyMicromapToMemoryEXTDel> "vkCmdCopyMicromapToMemoryEXT"
                static let s_vkCmdCopyMemoryToMicromapEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyMemoryToMicromapEXTDel> "vkCmdCopyMemoryToMicromapEXT"
                static let s_vkCmdWriteMicromapsPropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdWriteMicromapsPropertiesEXTDel> "vkCmdWriteMicromapsPropertiesEXT"
                static let s_vkGetDeviceMicromapCompatibilityEXTDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceMicromapCompatibilityEXTDel> "vkGetDeviceMicromapCompatibilityEXT"
                static let s_vkGetMicromapBuildSizesEXTDel = VkRaw.vkImportInstanceDelegate<VkGetMicromapBuildSizesEXTDel> "vkGetMicromapBuildSizesEXT"
                static do Report.End(3) |> ignore
                static member vkCreateMicromapEXT = s_vkCreateMicromapEXTDel
                static member vkDestroyMicromapEXT = s_vkDestroyMicromapEXTDel
                static member vkCmdBuildMicromapsEXT = s_vkCmdBuildMicromapsEXTDel
                static member vkBuildMicromapsEXT = s_vkBuildMicromapsEXTDel
                static member vkCopyMicromapEXT = s_vkCopyMicromapEXTDel
                static member vkCopyMicromapToMemoryEXT = s_vkCopyMicromapToMemoryEXTDel
                static member vkCopyMemoryToMicromapEXT = s_vkCopyMemoryToMicromapEXTDel
                static member vkWriteMicromapsPropertiesEXT = s_vkWriteMicromapsPropertiesEXTDel
                static member vkCmdCopyMicromapEXT = s_vkCmdCopyMicromapEXTDel
                static member vkCmdCopyMicromapToMemoryEXT = s_vkCmdCopyMicromapToMemoryEXTDel
                static member vkCmdCopyMemoryToMicromapEXT = s_vkCmdCopyMemoryToMicromapEXTDel
                static member vkCmdWriteMicromapsPropertiesEXT = s_vkCmdWriteMicromapsPropertiesEXTDel
                static member vkGetDeviceMicromapCompatibilityEXT = s_vkGetDeviceMicromapCompatibilityEXTDel
                static member vkGetMicromapBuildSizesEXT = s_vkGetMicromapBuildSizesEXTDel
            let vkCreateMicromapEXT(device : VkDevice, pCreateInfo : nativeptr<VkMicromapCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pMicromap : nativeptr<VkMicromapEXT>) = Loader<unit>.vkCreateMicromapEXT.Invoke(device, pCreateInfo, pAllocator, pMicromap)
            let vkDestroyMicromapEXT(device : VkDevice, micromap : VkMicromapEXT, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyMicromapEXT.Invoke(device, micromap, pAllocator)
            let vkCmdBuildMicromapsEXT(commandBuffer : VkCommandBuffer, infoCount : uint32, pInfos : nativeptr<VkMicromapBuildInfoEXT>) = Loader<unit>.vkCmdBuildMicromapsEXT.Invoke(commandBuffer, infoCount, pInfos)
            let vkBuildMicromapsEXT(device : VkDevice, deferredOperation : KHRDeferredHostOperations.VkDeferredOperationKHR, infoCount : uint32, pInfos : nativeptr<VkMicromapBuildInfoEXT>) = Loader<unit>.vkBuildMicromapsEXT.Invoke(device, deferredOperation, infoCount, pInfos)
            let vkCopyMicromapEXT(device : VkDevice, deferredOperation : KHRDeferredHostOperations.VkDeferredOperationKHR, pInfo : nativeptr<VkCopyMicromapInfoEXT>) = Loader<unit>.vkCopyMicromapEXT.Invoke(device, deferredOperation, pInfo)
            let vkCopyMicromapToMemoryEXT(device : VkDevice, deferredOperation : KHRDeferredHostOperations.VkDeferredOperationKHR, pInfo : nativeptr<VkCopyMicromapToMemoryInfoEXT>) = Loader<unit>.vkCopyMicromapToMemoryEXT.Invoke(device, deferredOperation, pInfo)
            let vkCopyMemoryToMicromapEXT(device : VkDevice, deferredOperation : KHRDeferredHostOperations.VkDeferredOperationKHR, pInfo : nativeptr<VkCopyMemoryToMicromapInfoEXT>) = Loader<unit>.vkCopyMemoryToMicromapEXT.Invoke(device, deferredOperation, pInfo)
            let vkWriteMicromapsPropertiesEXT(device : VkDevice, micromapCount : uint32, pMicromaps : nativeptr<VkMicromapEXT>, queryType : VkQueryType, dataSize : uint64, pData : nativeint, stride : uint64) = Loader<unit>.vkWriteMicromapsPropertiesEXT.Invoke(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride)
            let vkCmdCopyMicromapEXT(commandBuffer : VkCommandBuffer, pInfo : nativeptr<VkCopyMicromapInfoEXT>) = Loader<unit>.vkCmdCopyMicromapEXT.Invoke(commandBuffer, pInfo)
            let vkCmdCopyMicromapToMemoryEXT(commandBuffer : VkCommandBuffer, pInfo : nativeptr<VkCopyMicromapToMemoryInfoEXT>) = Loader<unit>.vkCmdCopyMicromapToMemoryEXT.Invoke(commandBuffer, pInfo)
            let vkCmdCopyMemoryToMicromapEXT(commandBuffer : VkCommandBuffer, pInfo : nativeptr<VkCopyMemoryToMicromapInfoEXT>) = Loader<unit>.vkCmdCopyMemoryToMicromapEXT.Invoke(commandBuffer, pInfo)
            let vkCmdWriteMicromapsPropertiesEXT(commandBuffer : VkCommandBuffer, micromapCount : uint32, pMicromaps : nativeptr<VkMicromapEXT>, queryType : VkQueryType, queryPool : VkQueryPool, firstQuery : uint32) = Loader<unit>.vkCmdWriteMicromapsPropertiesEXT.Invoke(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery)
            let vkGetDeviceMicromapCompatibilityEXT(device : VkDevice, pVersionInfo : nativeptr<VkMicromapVersionInfoEXT>, pCompatibility : nativeptr<KHRAccelerationStructure.VkAccelerationStructureCompatibilityKHR>) = Loader<unit>.vkGetDeviceMicromapCompatibilityEXT.Invoke(device, pVersionInfo, pCompatibility)
            let vkGetMicromapBuildSizesEXT(device : VkDevice, buildType : KHRAccelerationStructure.VkAccelerationStructureBuildTypeKHR, pBuildInfo : nativeptr<VkMicromapBuildInfoEXT>, pSizeInfo : nativeptr<VkMicromapBuildSizesInfoEXT>) = Loader<unit>.vkGetMicromapBuildSizesEXT.Invoke(device, buildType, pBuildInfo, pSizeInfo)

    /// Requires EXTOpacityMicromap.
    module NVDisplacementMicromap =
        let Type = ExtensionType.Device
        let Name = "VK_NV_displacement_micromap"
        let Number = 398

        type VkDisplacementMicromapFormatNV =
            | D64Triangles64Bytes = 1
            | D256Triangles128Bytes = 2
            | D1024Triangles128Bytes = 3


        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureTrianglesDisplacementMicromapNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public displacementBiasAndScaleFormat : VkFormat
                val mutable public displacementVectorFormat : VkFormat
                val mutable public displacementBiasAndScaleBuffer : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public displacementBiasAndScaleStride : VkDeviceSize
                val mutable public displacementVectorBuffer : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public displacementVectorStride : VkDeviceSize
                val mutable public displacedMicromapPrimitiveFlags : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public displacedMicromapPrimitiveFlagsStride : VkDeviceSize
                val mutable public indexType : VkIndexType
                val mutable public indexBuffer : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public indexStride : VkDeviceSize
                val mutable public baseTriangle : uint32
                val mutable public usageCountsCount : uint32
                val mutable public pUsageCounts : nativeptr<EXTOpacityMicromap.VkMicromapUsageEXT>
                val mutable public ppUsageCounts : nativeptr<nativeptr<EXTOpacityMicromap.VkMicromapUsageEXT>>
                val mutable public micromap : EXTOpacityMicromap.VkMicromapEXT

                new(pNext: nativeint, displacementBiasAndScaleFormat: VkFormat, displacementVectorFormat: VkFormat, displacementBiasAndScaleBuffer: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, displacementBiasAndScaleStride: VkDeviceSize, displacementVectorBuffer: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, displacementVectorStride: VkDeviceSize, displacedMicromapPrimitiveFlags: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, displacedMicromapPrimitiveFlagsStride: VkDeviceSize, indexType: VkIndexType, indexBuffer: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, indexStride: VkDeviceSize, baseTriangle: uint32, usageCountsCount: uint32, pUsageCounts: nativeptr<EXTOpacityMicromap.VkMicromapUsageEXT>, ppUsageCounts: nativeptr<nativeptr<EXTOpacityMicromap.VkMicromapUsageEXT>>, micromap: EXTOpacityMicromap.VkMicromapEXT) =
                    {
                        sType = 1000397002u
                        pNext = pNext
                        displacementBiasAndScaleFormat = displacementBiasAndScaleFormat
                        displacementVectorFormat = displacementVectorFormat
                        displacementBiasAndScaleBuffer = displacementBiasAndScaleBuffer
                        displacementBiasAndScaleStride = displacementBiasAndScaleStride
                        displacementVectorBuffer = displacementVectorBuffer
                        displacementVectorStride = displacementVectorStride
                        displacedMicromapPrimitiveFlags = displacedMicromapPrimitiveFlags
                        displacedMicromapPrimitiveFlagsStride = displacedMicromapPrimitiveFlagsStride
                        indexType = indexType
                        indexBuffer = indexBuffer
                        indexStride = indexStride
                        baseTriangle = baseTriangle
                        usageCountsCount = usageCountsCount
                        pUsageCounts = pUsageCounts
                        ppUsageCounts = ppUsageCounts
                        micromap = micromap
                    }

                new(displacementBiasAndScaleFormat: VkFormat, displacementVectorFormat: VkFormat, displacementBiasAndScaleBuffer: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, displacementBiasAndScaleStride: VkDeviceSize, displacementVectorBuffer: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, displacementVectorStride: VkDeviceSize, displacedMicromapPrimitiveFlags: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, displacedMicromapPrimitiveFlagsStride: VkDeviceSize, indexType: VkIndexType, indexBuffer: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, indexStride: VkDeviceSize, baseTriangle: uint32, usageCountsCount: uint32, pUsageCounts: nativeptr<EXTOpacityMicromap.VkMicromapUsageEXT>, ppUsageCounts: nativeptr<nativeptr<EXTOpacityMicromap.VkMicromapUsageEXT>>, micromap: EXTOpacityMicromap.VkMicromapEXT) =
                    VkAccelerationStructureTrianglesDisplacementMicromapNV(Unchecked.defaultof<nativeint>, displacementBiasAndScaleFormat, displacementVectorFormat, displacementBiasAndScaleBuffer, displacementBiasAndScaleStride, displacementVectorBuffer, displacementVectorStride, displacedMicromapPrimitiveFlags, displacedMicromapPrimitiveFlagsStride, indexType, indexBuffer, indexStride, baseTriangle, usageCountsCount, pUsageCounts, ppUsageCounts, micromap)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.displacementBiasAndScaleFormat = Unchecked.defaultof<VkFormat> && x.displacementVectorFormat = Unchecked.defaultof<VkFormat> && x.displacementBiasAndScaleBuffer = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.displacementBiasAndScaleStride = Unchecked.defaultof<VkDeviceSize> && x.displacementVectorBuffer = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.displacementVectorStride = Unchecked.defaultof<VkDeviceSize> && x.displacedMicromapPrimitiveFlags = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.displacedMicromapPrimitiveFlagsStride = Unchecked.defaultof<VkDeviceSize> && x.indexType = Unchecked.defaultof<VkIndexType> && x.indexBuffer = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.indexStride = Unchecked.defaultof<VkDeviceSize> && x.baseTriangle = Unchecked.defaultof<uint32> && x.usageCountsCount = Unchecked.defaultof<uint32> && x.pUsageCounts = Unchecked.defaultof<nativeptr<EXTOpacityMicromap.VkMicromapUsageEXT>> && x.ppUsageCounts = Unchecked.defaultof<nativeptr<nativeptr<EXTOpacityMicromap.VkMicromapUsageEXT>>> && x.micromap = Unchecked.defaultof<EXTOpacityMicromap.VkMicromapEXT>

                static member Empty =
                    VkAccelerationStructureTrianglesDisplacementMicromapNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkIndexType>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<EXTOpacityMicromap.VkMicromapUsageEXT>>, Unchecked.defaultof<nativeptr<nativeptr<EXTOpacityMicromap.VkMicromapUsageEXT>>>, Unchecked.defaultof<EXTOpacityMicromap.VkMicromapEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "displacementBiasAndScaleFormat = %A" x.displacementBiasAndScaleFormat
                        sprintf "displacementVectorFormat = %A" x.displacementVectorFormat
                        sprintf "displacementBiasAndScaleBuffer = %A" x.displacementBiasAndScaleBuffer
                        sprintf "displacementBiasAndScaleStride = %A" x.displacementBiasAndScaleStride
                        sprintf "displacementVectorBuffer = %A" x.displacementVectorBuffer
                        sprintf "displacementVectorStride = %A" x.displacementVectorStride
                        sprintf "displacedMicromapPrimitiveFlags = %A" x.displacedMicromapPrimitiveFlags
                        sprintf "displacedMicromapPrimitiveFlagsStride = %A" x.displacedMicromapPrimitiveFlagsStride
                        sprintf "indexType = %A" x.indexType
                        sprintf "indexBuffer = %A" x.indexBuffer
                        sprintf "indexStride = %A" x.indexStride
                        sprintf "baseTriangle = %A" x.baseTriangle
                        sprintf "usageCountsCount = %A" x.usageCountsCount
                        sprintf "pUsageCounts = %A" x.pUsageCounts
                        sprintf "ppUsageCounts = %A" x.ppUsageCounts
                        sprintf "micromap = %A" x.micromap
                    ] |> sprintf "VkAccelerationStructureTrianglesDisplacementMicromapNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDisplacementMicromapFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public displacementMicromap : VkBool32

                new(pNext: nativeint, displacementMicromap: VkBool32) =
                    {
                        sType = 1000397000u
                        pNext = pNext
                        displacementMicromap = displacementMicromap
                    }

                new(displacementMicromap: VkBool32) =
                    VkPhysicalDeviceDisplacementMicromapFeaturesNV(Unchecked.defaultof<nativeint>, displacementMicromap)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.displacementMicromap = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDisplacementMicromapFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "displacementMicromap = %A" x.displacementMicromap
                    ] |> sprintf "VkPhysicalDeviceDisplacementMicromapFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDisplacementMicromapPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxDisplacementMicromapSubdivisionLevel : uint32

                new(pNext: nativeint, maxDisplacementMicromapSubdivisionLevel: uint32) =
                    {
                        sType = 1000397001u
                        pNext = pNext
                        maxDisplacementMicromapSubdivisionLevel = maxDisplacementMicromapSubdivisionLevel
                    }

                new(maxDisplacementMicromapSubdivisionLevel: uint32) =
                    VkPhysicalDeviceDisplacementMicromapPropertiesNV(Unchecked.defaultof<nativeint>, maxDisplacementMicromapSubdivisionLevel)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxDisplacementMicromapSubdivisionLevel = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceDisplacementMicromapPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxDisplacementMicromapSubdivisionLevel = %A" x.maxDisplacementMicromapSubdivisionLevel
                    ] |> sprintf "VkPhysicalDeviceDisplacementMicromapPropertiesNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR with
                  static member inline AllowDisplacementMicromapUpdateNv = enum<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> 0x00000200
             type EXTOpacityMicromap.VkMicromapTypeEXT with
                  static member inline DisplacementMicromapNv = enum<EXTOpacityMicromap.VkMicromapTypeEXT> 1000397000
             type VkPipelineCreateFlags with
                  static member inline RayTracingDisplacementMicromapBitNv = enum<VkPipelineCreateFlags> 0x10000000


    /// Promoted to KHRLoadStoreOpNone.
    module EXTLoadStoreOpNone =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_load_store_op_none"
        let Number = 401

        [<AutoOpen>]
        module EnumExtensions =
             type VkAttachmentLoadOp with
                  static member inline NoneExt = enum<VkAttachmentLoadOp> 1000400000
             type VkAttachmentStoreOp with
                  static member inline NoneExt = enum<VkAttachmentStoreOp> 1000301000


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module HUAWEIClusterCullingShader =
        let Type = ExtensionType.Device
        let Name = "VK_HUAWEI_cluster_culling_shader"
        let Number = 405

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public clustercullingShader : VkBool32
                val mutable public multiviewClusterCullingShader : VkBool32

                new(pNext: nativeint, clustercullingShader: VkBool32, multiviewClusterCullingShader: VkBool32) =
                    {
                        sType = 1000404000u
                        pNext = pNext
                        clustercullingShader = clustercullingShader
                        multiviewClusterCullingShader = multiviewClusterCullingShader
                    }

                new(clustercullingShader: VkBool32, multiviewClusterCullingShader: VkBool32) =
                    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(Unchecked.defaultof<nativeint>, clustercullingShader, multiviewClusterCullingShader)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.clustercullingShader = Unchecked.defaultof<VkBool32> && x.multiviewClusterCullingShader = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "clustercullingShader = %A" x.clustercullingShader
                        sprintf "multiviewClusterCullingShader = %A" x.multiviewClusterCullingShader
                    ] |> sprintf "VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxWorkGroupCount : V3ui
                val mutable public maxWorkGroupSize : V3ui
                val mutable public maxOutputClusterCount : uint32
                val mutable public indirectBufferOffsetAlignment : VkDeviceSize

                new(pNext: nativeint, maxWorkGroupCount: V3ui, maxWorkGroupSize: V3ui, maxOutputClusterCount: uint32, indirectBufferOffsetAlignment: VkDeviceSize) =
                    {
                        sType = 1000404001u
                        pNext = pNext
                        maxWorkGroupCount = maxWorkGroupCount
                        maxWorkGroupSize = maxWorkGroupSize
                        maxOutputClusterCount = maxOutputClusterCount
                        indirectBufferOffsetAlignment = indirectBufferOffsetAlignment
                    }

                new(maxWorkGroupCount: V3ui, maxWorkGroupSize: V3ui, maxOutputClusterCount: uint32, indirectBufferOffsetAlignment: VkDeviceSize) =
                    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(Unchecked.defaultof<nativeint>, maxWorkGroupCount, maxWorkGroupSize, maxOutputClusterCount, indirectBufferOffsetAlignment)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxWorkGroupCount = Unchecked.defaultof<V3ui> && x.maxWorkGroupSize = Unchecked.defaultof<V3ui> && x.maxOutputClusterCount = Unchecked.defaultof<uint32> && x.indirectBufferOffsetAlignment = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxWorkGroupCount = %A" x.maxWorkGroupCount
                        sprintf "maxWorkGroupSize = %A" x.maxWorkGroupSize
                        sprintf "maxOutputClusterCount = %A" x.maxOutputClusterCount
                        sprintf "indirectBufferOffsetAlignment = %A" x.indirectBufferOffsetAlignment
                    ] |> sprintf "VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public clusterShadingRate : VkBool32

                new(pNext: nativeint, clusterShadingRate: VkBool32) =
                    {
                        sType = 1000404002u
                        pNext = pNext
                        clusterShadingRate = clusterShadingRate
                    }

                new(clusterShadingRate: VkBool32) =
                    VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(Unchecked.defaultof<nativeint>, clusterShadingRate)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.clusterShadingRate = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "clusterShadingRate = %A" x.clusterShadingRate
                    ] |> sprintf "VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkPipelineStageFlags2 with
                  static member inline PipelineStage2ClusterCullingShaderBitHuawei = enum<Vulkan13.VkPipelineStageFlags2> 0x00000200
             type VkQueryPipelineStatisticFlags with
                  static member inline ClusterCullingShaderInvocationsBitHuawei = enum<VkQueryPipelineStatisticFlags> 0x00002000
             type VkShaderStageFlags with
                  static member inline ClusterCullingBitHuawei = enum<VkShaderStageFlags> 0x00080000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawClusterHUAWEIDel = delegate of VkCommandBuffer * uint32 * uint32 * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDrawClusterIndirectHUAWEIDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading HUAWEIClusterCullingShader")
                static let s_vkCmdDrawClusterHUAWEIDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawClusterHUAWEIDel> "vkCmdDrawClusterHUAWEI"
                static let s_vkCmdDrawClusterIndirectHUAWEIDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawClusterIndirectHUAWEIDel> "vkCmdDrawClusterIndirectHUAWEI"
                static do Report.End(3) |> ignore
                static member vkCmdDrawClusterHUAWEI = s_vkCmdDrawClusterHUAWEIDel
                static member vkCmdDrawClusterIndirectHUAWEI = s_vkCmdDrawClusterIndirectHUAWEIDel
            let vkCmdDrawClusterHUAWEI(commandBuffer : VkCommandBuffer, groupCountX : uint32, groupCountY : uint32, groupCountZ : uint32) = Loader<unit>.vkCmdDrawClusterHUAWEI.Invoke(commandBuffer, groupCountX, groupCountY, groupCountZ)
            let vkCmdDrawClusterIndirectHUAWEI(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize) = Loader<unit>.vkCmdDrawClusterIndirectHUAWEI.Invoke(commandBuffer, buffer, offset)

    /// Requires EXTCustomBorderColor.
    module EXTBorderColorSwizzle =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_border_color_swizzle"
        let Number = 412

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceBorderColorSwizzleFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public borderColorSwizzle : VkBool32
                val mutable public borderColorSwizzleFromImage : VkBool32

                new(pNext: nativeint, borderColorSwizzle: VkBool32, borderColorSwizzleFromImage: VkBool32) =
                    {
                        sType = 1000411000u
                        pNext = pNext
                        borderColorSwizzle = borderColorSwizzle
                        borderColorSwizzleFromImage = borderColorSwizzleFromImage
                    }

                new(borderColorSwizzle: VkBool32, borderColorSwizzleFromImage: VkBool32) =
                    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(Unchecked.defaultof<nativeint>, borderColorSwizzle, borderColorSwizzleFromImage)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.borderColorSwizzle = Unchecked.defaultof<VkBool32> && x.borderColorSwizzleFromImage = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "borderColorSwizzle = %A" x.borderColorSwizzle
                        sprintf "borderColorSwizzleFromImage = %A" x.borderColorSwizzleFromImage
                    ] |> sprintf "VkPhysicalDeviceBorderColorSwizzleFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSamplerBorderColorComponentMappingCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public components : VkComponentMapping
                val mutable public srgb : VkBool32

                new(pNext: nativeint, components: VkComponentMapping, srgb: VkBool32) =
                    {
                        sType = 1000411001u
                        pNext = pNext
                        components = components
                        srgb = srgb
                    }

                new(components: VkComponentMapping, srgb: VkBool32) =
                    VkSamplerBorderColorComponentMappingCreateInfoEXT(Unchecked.defaultof<nativeint>, components, srgb)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.components = Unchecked.defaultof<VkComponentMapping> && x.srgb = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkSamplerBorderColorComponentMappingCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "components = %A" x.components
                        sprintf "srgb = %A" x.srgb
                    ] |> sprintf "VkSamplerBorderColorComponentMappingCreateInfoEXT { %s }"
            end



    /// Requires EXTMemoryPriority.
    module EXTPageableDeviceLocalMemory =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_pageable_device_local_memory"
        let Number = 413

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pageableDeviceLocalMemory : VkBool32

                new(pNext: nativeint, pageableDeviceLocalMemory: VkBool32) =
                    {
                        sType = 1000412000u
                        pNext = pNext
                        pageableDeviceLocalMemory = pageableDeviceLocalMemory
                    }

                new(pageableDeviceLocalMemory: VkBool32) =
                    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(Unchecked.defaultof<nativeint>, pageableDeviceLocalMemory)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pageableDeviceLocalMemory = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pageableDeviceLocalMemory = %A" x.pageableDeviceLocalMemory
                    ] |> sprintf "VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkSetDeviceMemoryPriorityEXTDel = delegate of VkDevice * VkDeviceMemory * float32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTPageableDeviceLocalMemory")
                static let s_vkSetDeviceMemoryPriorityEXTDel = VkRaw.vkImportInstanceDelegate<VkSetDeviceMemoryPriorityEXTDel> "vkSetDeviceMemoryPriorityEXT"
                static do Report.End(3) |> ignore
                static member vkSetDeviceMemoryPriorityEXT = s_vkSetDeviceMemoryPriorityEXTDel
            let vkSetDeviceMemoryPriorityEXT(device : VkDevice, memory : VkDeviceMemory, priority : float32) = Loader<unit>.vkSetDeviceMemoryPriorityEXT.Invoke(device, memory, priority)

    /// Requires Vulkan11.
    /// Promoted to Vulkan13.
    module KHRMaintenance4 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_maintenance4"
        let Number = 414

        type VkDeviceBufferMemoryRequirementsKHR = Vulkan13.VkDeviceBufferMemoryRequirements

        type VkDeviceImageMemoryRequirementsKHR = Vulkan13.VkDeviceImageMemoryRequirements

        type VkPhysicalDeviceMaintenance4FeaturesKHR = Vulkan13.VkPhysicalDeviceMaintenance4Features

        type VkPhysicalDeviceMaintenance4PropertiesKHR = Vulkan13.VkPhysicalDeviceMaintenance4Properties


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageAspectFlags with
                  static member inline NoneKhr = enum<VkImageAspectFlags> 0

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceBufferMemoryRequirementsKHRDel = delegate of VkDevice * nativeptr<Vulkan13.VkDeviceBufferMemoryRequirements> * nativeptr<Vulkan11.VkMemoryRequirements2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceImageMemoryRequirementsKHRDel = delegate of VkDevice * nativeptr<Vulkan13.VkDeviceImageMemoryRequirements> * nativeptr<Vulkan11.VkMemoryRequirements2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceImageSparseMemoryRequirementsKHRDel = delegate of VkDevice * nativeptr<Vulkan13.VkDeviceImageMemoryRequirements> * nativeptr<uint32> * nativeptr<Vulkan11.VkSparseImageMemoryRequirements2> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRMaintenance4")
                static let s_vkGetDeviceBufferMemoryRequirementsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceBufferMemoryRequirementsKHRDel> "vkGetDeviceBufferMemoryRequirementsKHR"
                static let s_vkGetDeviceImageMemoryRequirementsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceImageMemoryRequirementsKHRDel> "vkGetDeviceImageMemoryRequirementsKHR"
                static let s_vkGetDeviceImageSparseMemoryRequirementsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceImageSparseMemoryRequirementsKHRDel> "vkGetDeviceImageSparseMemoryRequirementsKHR"
                static do Report.End(3) |> ignore
                static member vkGetDeviceBufferMemoryRequirementsKHR = s_vkGetDeviceBufferMemoryRequirementsKHRDel
                static member vkGetDeviceImageMemoryRequirementsKHR = s_vkGetDeviceImageMemoryRequirementsKHRDel
                static member vkGetDeviceImageSparseMemoryRequirementsKHR = s_vkGetDeviceImageSparseMemoryRequirementsKHRDel
            let vkGetDeviceBufferMemoryRequirementsKHR(device : VkDevice, pInfo : nativeptr<Vulkan13.VkDeviceBufferMemoryRequirements>, pMemoryRequirements : nativeptr<Vulkan11.VkMemoryRequirements2>) = Loader<unit>.vkGetDeviceBufferMemoryRequirementsKHR.Invoke(device, pInfo, pMemoryRequirements)
            let vkGetDeviceImageMemoryRequirementsKHR(device : VkDevice, pInfo : nativeptr<Vulkan13.VkDeviceImageMemoryRequirements>, pMemoryRequirements : nativeptr<Vulkan11.VkMemoryRequirements2>) = Loader<unit>.vkGetDeviceImageMemoryRequirementsKHR.Invoke(device, pInfo, pMemoryRequirements)
            let vkGetDeviceImageSparseMemoryRequirementsKHR(device : VkDevice, pInfo : nativeptr<Vulkan13.VkDeviceImageMemoryRequirements>, pSparseMemoryRequirementCount : nativeptr<uint32>, pSparseMemoryRequirements : nativeptr<Vulkan11.VkSparseImageMemoryRequirements2>) = Loader<unit>.vkGetDeviceImageSparseMemoryRequirementsKHR.Invoke(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements)

    /// Requires Vulkan11.
    module ARMShaderCoreProperties =
        let Type = ExtensionType.Device
        let Name = "VK_ARM_shader_core_properties"
        let Number = 416

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderCorePropertiesARM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pixelRate : uint32
                val mutable public texelRate : uint32
                val mutable public fmaRate : uint32

                new(pNext: nativeint, pixelRate: uint32, texelRate: uint32, fmaRate: uint32) =
                    {
                        sType = 1000415000u
                        pNext = pNext
                        pixelRate = pixelRate
                        texelRate = texelRate
                        fmaRate = fmaRate
                    }

                new(pixelRate: uint32, texelRate: uint32, fmaRate: uint32) =
                    VkPhysicalDeviceShaderCorePropertiesARM(Unchecked.defaultof<nativeint>, pixelRate, texelRate, fmaRate)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pixelRate = Unchecked.defaultof<uint32> && x.texelRate = Unchecked.defaultof<uint32> && x.fmaRate = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceShaderCorePropertiesARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pixelRate = %A" x.pixelRate
                        sprintf "texelRate = %A" x.texelRate
                        sprintf "fmaRate = %A" x.fmaRate
                    ] |> sprintf "VkPhysicalDeviceShaderCorePropertiesARM { %s }"
            end



    /// Promoted to Vulkan14.
    module KHRShaderSubgroupRotate =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_subgroup_rotate"
        let Number = 417

        type VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR = Vulkan14.VkPhysicalDeviceShaderSubgroupRotateFeatures


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkSubgroupFeatureFlags with
                  static member inline RotateBitKhr = enum<Vulkan11.VkSubgroupFeatureFlags> 0x00000200
                  static member inline RotateClusteredBitKhr = enum<Vulkan11.VkSubgroupFeatureFlags> 0x00000400


    /// Requires ARMShaderCoreBuiltins.
    module ARMSchedulingControls =
        let Type = ExtensionType.Device
        let Name = "VK_ARM_scheduling_controls"
        let Number = 418

        [<Flags>]
        type VkPhysicalDeviceSchedulingControlsFlagsARM =
            | All = 1
            | None = 0
            | ShaderCoreCount = 0x00000001


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceQueueShaderCoreControlCreateInfoARM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderCoreCount : uint32

                new(pNext: nativeint, shaderCoreCount: uint32) =
                    {
                        sType = 1000417000u
                        pNext = pNext
                        shaderCoreCount = shaderCoreCount
                    }

                new(shaderCoreCount: uint32) =
                    VkDeviceQueueShaderCoreControlCreateInfoARM(Unchecked.defaultof<nativeint>, shaderCoreCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderCoreCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkDeviceQueueShaderCoreControlCreateInfoARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderCoreCount = %A" x.shaderCoreCount
                    ] |> sprintf "VkDeviceQueueShaderCoreControlCreateInfoARM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceSchedulingControlsFeaturesARM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public schedulingControls : VkBool32

                new(pNext: nativeint, schedulingControls: VkBool32) =
                    {
                        sType = 1000417001u
                        pNext = pNext
                        schedulingControls = schedulingControls
                    }

                new(schedulingControls: VkBool32) =
                    VkPhysicalDeviceSchedulingControlsFeaturesARM(Unchecked.defaultof<nativeint>, schedulingControls)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.schedulingControls = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceSchedulingControlsFeaturesARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "schedulingControls = %A" x.schedulingControls
                    ] |> sprintf "VkPhysicalDeviceSchedulingControlsFeaturesARM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceSchedulingControlsPropertiesARM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public schedulingControlsFlags : VkPhysicalDeviceSchedulingControlsFlagsARM

                new(pNext: nativeint, schedulingControlsFlags: VkPhysicalDeviceSchedulingControlsFlagsARM) =
                    {
                        sType = 1000417002u
                        pNext = pNext
                        schedulingControlsFlags = schedulingControlsFlags
                    }

                new(schedulingControlsFlags: VkPhysicalDeviceSchedulingControlsFlagsARM) =
                    VkPhysicalDeviceSchedulingControlsPropertiesARM(Unchecked.defaultof<nativeint>, schedulingControlsFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.schedulingControlsFlags = Unchecked.defaultof<VkPhysicalDeviceSchedulingControlsFlagsARM>

                static member Empty =
                    VkPhysicalDeviceSchedulingControlsPropertiesARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPhysicalDeviceSchedulingControlsFlagsARM>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "schedulingControlsFlags = %A" x.schedulingControlsFlags
                    ] |> sprintf "VkPhysicalDeviceSchedulingControlsPropertiesARM { %s }"
            end



    /// Requires (KHRMaintenance1, KHRGetPhysicalDeviceProperties2) | Vulkan11.
    module EXTImageSlicedViewOf3d =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_image_sliced_view_of_3d"
        let Number = 419

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageViewSlicedCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public sliceOffset : uint32
                val mutable public sliceCount : uint32

                new(pNext: nativeint, sliceOffset: uint32, sliceCount: uint32) =
                    {
                        sType = 1000418001u
                        pNext = pNext
                        sliceOffset = sliceOffset
                        sliceCount = sliceCount
                    }

                new(sliceOffset: uint32, sliceCount: uint32) =
                    VkImageViewSlicedCreateInfoEXT(Unchecked.defaultof<nativeint>, sliceOffset, sliceCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.sliceOffset = Unchecked.defaultof<uint32> && x.sliceCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkImageViewSlicedCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "sliceOffset = %A" x.sliceOffset
                        sprintf "sliceCount = %A" x.sliceCount
                    ] |> sprintf "VkImageViewSlicedCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageSlicedViewOf3D : VkBool32

                new(pNext: nativeint, imageSlicedViewOf3D: VkBool32) =
                    {
                        sType = 1000418000u
                        pNext = pNext
                        imageSlicedViewOf3D = imageSlicedViewOf3D
                    }

                new(imageSlicedViewOf3D: VkBool32) =
                    VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT(Unchecked.defaultof<nativeint>, imageSlicedViewOf3D)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageSlicedViewOf3D = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageSlicedViewOf3D = %A" x.imageSlicedViewOf3D
                    ] |> sprintf "VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module VALVEDescriptorSetHostMapping =
        let Type = ExtensionType.Device
        let Name = "VK_VALVE_descriptor_set_host_mapping"
        let Number = 421

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDescriptorSetBindingReferenceVALVE =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public descriptorSetLayout : VkDescriptorSetLayout
                val mutable public binding : uint32

                new(pNext: nativeint, descriptorSetLayout: VkDescriptorSetLayout, binding: uint32) =
                    {
                        sType = 1000420001u
                        pNext = pNext
                        descriptorSetLayout = descriptorSetLayout
                        binding = binding
                    }

                new(descriptorSetLayout: VkDescriptorSetLayout, binding: uint32) =
                    VkDescriptorSetBindingReferenceVALVE(Unchecked.defaultof<nativeint>, descriptorSetLayout, binding)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.descriptorSetLayout = Unchecked.defaultof<VkDescriptorSetLayout> && x.binding = Unchecked.defaultof<uint32>

                static member Empty =
                    VkDescriptorSetBindingReferenceVALVE(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorSetLayout>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "descriptorSetLayout = %A" x.descriptorSetLayout
                        sprintf "binding = %A" x.binding
                    ] |> sprintf "VkDescriptorSetBindingReferenceVALVE { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDescriptorSetLayoutHostMappingInfoVALVE =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public descriptorOffset : uint64
                val mutable public descriptorSize : uint32

                new(pNext: nativeint, descriptorOffset: uint64, descriptorSize: uint32) =
                    {
                        sType = 1000420002u
                        pNext = pNext
                        descriptorOffset = descriptorOffset
                        descriptorSize = descriptorSize
                    }

                new(descriptorOffset: uint64, descriptorSize: uint32) =
                    VkDescriptorSetLayoutHostMappingInfoVALVE(Unchecked.defaultof<nativeint>, descriptorOffset, descriptorSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.descriptorOffset = Unchecked.defaultof<uint64> && x.descriptorSize = Unchecked.defaultof<uint32>

                static member Empty =
                    VkDescriptorSetLayoutHostMappingInfoVALVE(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "descriptorOffset = %A" x.descriptorOffset
                        sprintf "descriptorSize = %A" x.descriptorSize
                    ] |> sprintf "VkDescriptorSetLayoutHostMappingInfoVALVE { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public descriptorSetHostMapping : VkBool32

                new(pNext: nativeint, descriptorSetHostMapping: VkBool32) =
                    {
                        sType = 1000420000u
                        pNext = pNext
                        descriptorSetHostMapping = descriptorSetHostMapping
                    }

                new(descriptorSetHostMapping: VkBool32) =
                    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(Unchecked.defaultof<nativeint>, descriptorSetHostMapping)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.descriptorSetHostMapping = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "descriptorSetHostMapping = %A" x.descriptorSetHostMapping
                    ] |> sprintf "VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDescriptorSetLayoutHostMappingInfoVALVEDel = delegate of VkDevice * nativeptr<VkDescriptorSetBindingReferenceVALVE> * nativeptr<VkDescriptorSetLayoutHostMappingInfoVALVE> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDescriptorSetHostMappingVALVEDel = delegate of VkDevice * VkDescriptorSet * nativeptr<nativeint> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading VALVEDescriptorSetHostMapping")
                static let s_vkGetDescriptorSetLayoutHostMappingInfoVALVEDel = VkRaw.vkImportInstanceDelegate<VkGetDescriptorSetLayoutHostMappingInfoVALVEDel> "vkGetDescriptorSetLayoutHostMappingInfoVALVE"
                static let s_vkGetDescriptorSetHostMappingVALVEDel = VkRaw.vkImportInstanceDelegate<VkGetDescriptorSetHostMappingVALVEDel> "vkGetDescriptorSetHostMappingVALVE"
                static do Report.End(3) |> ignore
                static member vkGetDescriptorSetLayoutHostMappingInfoVALVE = s_vkGetDescriptorSetLayoutHostMappingInfoVALVEDel
                static member vkGetDescriptorSetHostMappingVALVE = s_vkGetDescriptorSetHostMappingVALVEDel
            let vkGetDescriptorSetLayoutHostMappingInfoVALVE(device : VkDevice, pBindingReference : nativeptr<VkDescriptorSetBindingReferenceVALVE>, pHostMapping : nativeptr<VkDescriptorSetLayoutHostMappingInfoVALVE>) = Loader<unit>.vkGetDescriptorSetLayoutHostMappingInfoVALVE.Invoke(device, pBindingReference, pHostMapping)
            let vkGetDescriptorSetHostMappingVALVE(device : VkDevice, descriptorSet : VkDescriptorSet, ppData : nativeptr<nativeint>) = Loader<unit>.vkGetDescriptorSetHostMappingVALVE.Invoke(device, descriptorSet, ppData)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to KHRDepthClampZeroOne.
    module EXTDepthClampZeroOne =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_depth_clamp_zero_one"
        let Number = 422

        type VkPhysicalDeviceDepthClampZeroOneFeaturesEXT = KHRDepthClampZeroOne.VkPhysicalDeviceDepthClampZeroOneFeaturesKHR



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTNonSeamlessCubeMap =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_non_seamless_cube_map"
        let Number = 423

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public nonSeamlessCubeMap : VkBool32

                new(pNext: nativeint, nonSeamlessCubeMap: VkBool32) =
                    {
                        sType = 1000422000u
                        pNext = pNext
                        nonSeamlessCubeMap = nonSeamlessCubeMap
                    }

                new(nonSeamlessCubeMap: VkBool32) =
                    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(Unchecked.defaultof<nativeint>, nonSeamlessCubeMap)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.nonSeamlessCubeMap = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "nonSeamlessCubeMap = %A" x.nonSeamlessCubeMap
                    ] |> sprintf "VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkSamplerCreateFlags with
                  static member inline NonSeamlessCubeMapBitExt = enum<VkSamplerCreateFlags> 0x00000004


    /// Requires ((KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRSynchronization2) | Vulkan13.
    module ARMRenderPassStriped =
        let Type = ExtensionType.Device
        let Name = "VK_ARM_render_pass_striped"
        let Number = 425

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRenderPassStripedFeaturesARM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public renderPassStriped : VkBool32

                new(pNext: nativeint, renderPassStriped: VkBool32) =
                    {
                        sType = 1000424000u
                        pNext = pNext
                        renderPassStriped = renderPassStriped
                    }

                new(renderPassStriped: VkBool32) =
                    VkPhysicalDeviceRenderPassStripedFeaturesARM(Unchecked.defaultof<nativeint>, renderPassStriped)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.renderPassStriped = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRenderPassStripedFeaturesARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "renderPassStriped = %A" x.renderPassStriped
                    ] |> sprintf "VkPhysicalDeviceRenderPassStripedFeaturesARM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRenderPassStripedPropertiesARM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public renderPassStripeGranularity : VkExtent2D
                val mutable public maxRenderPassStripes : uint32

                new(pNext: nativeint, renderPassStripeGranularity: VkExtent2D, maxRenderPassStripes: uint32) =
                    {
                        sType = 1000424001u
                        pNext = pNext
                        renderPassStripeGranularity = renderPassStripeGranularity
                        maxRenderPassStripes = maxRenderPassStripes
                    }

                new(renderPassStripeGranularity: VkExtent2D, maxRenderPassStripes: uint32) =
                    VkPhysicalDeviceRenderPassStripedPropertiesARM(Unchecked.defaultof<nativeint>, renderPassStripeGranularity, maxRenderPassStripes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.renderPassStripeGranularity = Unchecked.defaultof<VkExtent2D> && x.maxRenderPassStripes = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceRenderPassStripedPropertiesARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "renderPassStripeGranularity = %A" x.renderPassStripeGranularity
                        sprintf "maxRenderPassStripes = %A" x.maxRenderPassStripes
                    ] |> sprintf "VkPhysicalDeviceRenderPassStripedPropertiesARM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderPassStripeInfoARM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stripeArea : VkRect2D

                new(pNext: nativeint, stripeArea: VkRect2D) =
                    {
                        sType = 1000424003u
                        pNext = pNext
                        stripeArea = stripeArea
                    }

                new(stripeArea: VkRect2D) =
                    VkRenderPassStripeInfoARM(Unchecked.defaultof<nativeint>, stripeArea)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stripeArea = Unchecked.defaultof<VkRect2D>

                static member Empty =
                    VkRenderPassStripeInfoARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRect2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stripeArea = %A" x.stripeArea
                    ] |> sprintf "VkRenderPassStripeInfoARM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderPassStripeBeginInfoARM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stripeInfoCount : uint32
                val mutable public pStripeInfos : nativeptr<VkRenderPassStripeInfoARM>

                new(pNext: nativeint, stripeInfoCount: uint32, pStripeInfos: nativeptr<VkRenderPassStripeInfoARM>) =
                    {
                        sType = 1000424002u
                        pNext = pNext
                        stripeInfoCount = stripeInfoCount
                        pStripeInfos = pStripeInfos
                    }

                new(stripeInfoCount: uint32, pStripeInfos: nativeptr<VkRenderPassStripeInfoARM>) =
                    VkRenderPassStripeBeginInfoARM(Unchecked.defaultof<nativeint>, stripeInfoCount, pStripeInfos)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stripeInfoCount = Unchecked.defaultof<uint32> && x.pStripeInfos = Unchecked.defaultof<nativeptr<VkRenderPassStripeInfoARM>>

                static member Empty =
                    VkRenderPassStripeBeginInfoARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRenderPassStripeInfoARM>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stripeInfoCount = %A" x.stripeInfoCount
                        sprintf "pStripeInfos = %A" x.pStripeInfos
                    ] |> sprintf "VkRenderPassStripeBeginInfoARM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderPassStripeSubmitInfoARM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stripeSemaphoreInfoCount : uint32
                val mutable public pStripeSemaphoreInfos : nativeptr<Vulkan13.VkSemaphoreSubmitInfo>

                new(pNext: nativeint, stripeSemaphoreInfoCount: uint32, pStripeSemaphoreInfos: nativeptr<Vulkan13.VkSemaphoreSubmitInfo>) =
                    {
                        sType = 1000424004u
                        pNext = pNext
                        stripeSemaphoreInfoCount = stripeSemaphoreInfoCount
                        pStripeSemaphoreInfos = pStripeSemaphoreInfos
                    }

                new(stripeSemaphoreInfoCount: uint32, pStripeSemaphoreInfos: nativeptr<Vulkan13.VkSemaphoreSubmitInfo>) =
                    VkRenderPassStripeSubmitInfoARM(Unchecked.defaultof<nativeint>, stripeSemaphoreInfoCount, pStripeSemaphoreInfos)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stripeSemaphoreInfoCount = Unchecked.defaultof<uint32> && x.pStripeSemaphoreInfos = Unchecked.defaultof<nativeptr<Vulkan13.VkSemaphoreSubmitInfo>>

                static member Empty =
                    VkRenderPassStripeSubmitInfoARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<Vulkan13.VkSemaphoreSubmitInfo>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stripeSemaphoreInfoCount = %A" x.stripeSemaphoreInfoCount
                        sprintf "pStripeSemaphoreInfos = %A" x.pStripeSemaphoreInfos
                    ] |> sprintf "VkRenderPassStripeSubmitInfoARM { %s }"
            end



    /// Requires (KHRGetPhysicalDeviceProperties2 | Vulkan11), EXTFragmentDensityMap.
    module QCOMFragmentDensityMapOffset =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_fragment_density_map_offset"
        let Number = 426

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fragmentDensityMapOffset : VkBool32

                new(pNext: nativeint, fragmentDensityMapOffset: VkBool32) =
                    {
                        sType = 1000425000u
                        pNext = pNext
                        fragmentDensityMapOffset = fragmentDensityMapOffset
                    }

                new(fragmentDensityMapOffset: VkBool32) =
                    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(Unchecked.defaultof<nativeint>, fragmentDensityMapOffset)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fragmentDensityMapOffset = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fragmentDensityMapOffset = %A" x.fragmentDensityMapOffset
                    ] |> sprintf "VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fragmentDensityOffsetGranularity : VkExtent2D

                new(pNext: nativeint, fragmentDensityOffsetGranularity: VkExtent2D) =
                    {
                        sType = 1000425001u
                        pNext = pNext
                        fragmentDensityOffsetGranularity = fragmentDensityOffsetGranularity
                    }

                new(fragmentDensityOffsetGranularity: VkExtent2D) =
                    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(Unchecked.defaultof<nativeint>, fragmentDensityOffsetGranularity)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fragmentDensityOffsetGranularity = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fragmentDensityOffsetGranularity = %A" x.fragmentDensityOffsetGranularity
                    ] |> sprintf "VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSubpassFragmentDensityMapOffsetEndInfoQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public fragmentDensityOffsetCount : uint32
                val mutable public pFragmentDensityOffsets : nativeptr<VkOffset2D>

                new(pNext: nativeint, fragmentDensityOffsetCount: uint32, pFragmentDensityOffsets: nativeptr<VkOffset2D>) =
                    {
                        sType = 1000425002u
                        pNext = pNext
                        fragmentDensityOffsetCount = fragmentDensityOffsetCount
                        pFragmentDensityOffsets = pFragmentDensityOffsets
                    }

                new(fragmentDensityOffsetCount: uint32, pFragmentDensityOffsets: nativeptr<VkOffset2D>) =
                    VkSubpassFragmentDensityMapOffsetEndInfoQCOM(Unchecked.defaultof<nativeint>, fragmentDensityOffsetCount, pFragmentDensityOffsets)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.fragmentDensityOffsetCount = Unchecked.defaultof<uint32> && x.pFragmentDensityOffsets = Unchecked.defaultof<nativeptr<VkOffset2D>>

                static member Empty =
                    VkSubpassFragmentDensityMapOffsetEndInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkOffset2D>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "fragmentDensityOffsetCount = %A" x.fragmentDensityOffsetCount
                        sprintf "pFragmentDensityOffsets = %A" x.pFragmentDensityOffsets
                    ] |> sprintf "VkSubpassFragmentDensityMapOffsetEndInfoQCOM { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageCreateFlags with
                  static member inline FragmentDensityMapOffsetBitQcom = enum<VkImageCreateFlags> 0x00008000


    /// Requires ((KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRBufferDeviceAddress) | Vulkan12.
    module NVCopyMemoryIndirect =
        let Type = ExtensionType.Device
        let Name = "VK_NV_copy_memory_indirect"
        let Number = 427

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCopyMemoryIndirectCommandNV =
            struct
                val mutable public srcAddress : VkDeviceAddress
                val mutable public dstAddress : VkDeviceAddress
                val mutable public size : VkDeviceSize

                new(srcAddress: VkDeviceAddress, dstAddress: VkDeviceAddress, size: VkDeviceSize) =
                    {
                        srcAddress = srcAddress
                        dstAddress = dstAddress
                        size = size
                    }

                member x.IsEmpty =
                    x.srcAddress = Unchecked.defaultof<VkDeviceAddress> && x.dstAddress = Unchecked.defaultof<VkDeviceAddress> && x.size = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkCopyMemoryIndirectCommandNV(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "srcAddress = %A" x.srcAddress
                        sprintf "dstAddress = %A" x.dstAddress
                        sprintf "size = %A" x.size
                    ] |> sprintf "VkCopyMemoryIndirectCommandNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCopyMemoryToImageIndirectCommandNV =
            struct
                val mutable public srcAddress : VkDeviceAddress
                val mutable public bufferRowLength : uint32
                val mutable public bufferImageHeight : uint32
                val mutable public imageSubresource : VkImageSubresourceLayers
                val mutable public imageOffset : VkOffset3D
                val mutable public imageExtent : VkExtent3D

                new(srcAddress: VkDeviceAddress, bufferRowLength: uint32, bufferImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D) =
                    {
                        srcAddress = srcAddress
                        bufferRowLength = bufferRowLength
                        bufferImageHeight = bufferImageHeight
                        imageSubresource = imageSubresource
                        imageOffset = imageOffset
                        imageExtent = imageExtent
                    }

                member x.IsEmpty =
                    x.srcAddress = Unchecked.defaultof<VkDeviceAddress> && x.bufferRowLength = Unchecked.defaultof<uint32> && x.bufferImageHeight = Unchecked.defaultof<uint32> && x.imageSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.imageOffset = Unchecked.defaultof<VkOffset3D> && x.imageExtent = Unchecked.defaultof<VkExtent3D>

                static member Empty =
                    VkCopyMemoryToImageIndirectCommandNV(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "srcAddress = %A" x.srcAddress
                        sprintf "bufferRowLength = %A" x.bufferRowLength
                        sprintf "bufferImageHeight = %A" x.bufferImageHeight
                        sprintf "imageSubresource = %A" x.imageSubresource
                        sprintf "imageOffset = %A" x.imageOffset
                        sprintf "imageExtent = %A" x.imageExtent
                    ] |> sprintf "VkCopyMemoryToImageIndirectCommandNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCopyMemoryIndirectFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public indirectCopy : VkBool32

                new(pNext: nativeint, indirectCopy: VkBool32) =
                    {
                        sType = 1000426000u
                        pNext = pNext
                        indirectCopy = indirectCopy
                    }

                new(indirectCopy: VkBool32) =
                    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(Unchecked.defaultof<nativeint>, indirectCopy)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.indirectCopy = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "indirectCopy = %A" x.indirectCopy
                    ] |> sprintf "VkPhysicalDeviceCopyMemoryIndirectFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCopyMemoryIndirectPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public supportedQueues : VkQueueFlags

                new(pNext: nativeint, supportedQueues: VkQueueFlags) =
                    {
                        sType = 1000426001u
                        pNext = pNext
                        supportedQueues = supportedQueues
                    }

                new(supportedQueues: VkQueueFlags) =
                    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(Unchecked.defaultof<nativeint>, supportedQueues)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.supportedQueues = Unchecked.defaultof<VkQueueFlags>

                static member Empty =
                    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkQueueFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "supportedQueues = %A" x.supportedQueues
                    ] |> sprintf "VkPhysicalDeviceCopyMemoryIndirectPropertiesNV { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyMemoryIndirectNVDel = delegate of VkCommandBuffer * VkDeviceAddress * uint32 * uint32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdCopyMemoryToImageIndirectNVDel = delegate of VkCommandBuffer * VkDeviceAddress * uint32 * uint32 * VkImage * VkImageLayout * nativeptr<VkImageSubresourceLayers> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVCopyMemoryIndirect")
                static let s_vkCmdCopyMemoryIndirectNVDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyMemoryIndirectNVDel> "vkCmdCopyMemoryIndirectNV"
                static let s_vkCmdCopyMemoryToImageIndirectNVDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyMemoryToImageIndirectNVDel> "vkCmdCopyMemoryToImageIndirectNV"
                static do Report.End(3) |> ignore
                static member vkCmdCopyMemoryIndirectNV = s_vkCmdCopyMemoryIndirectNVDel
                static member vkCmdCopyMemoryToImageIndirectNV = s_vkCmdCopyMemoryToImageIndirectNVDel
            let vkCmdCopyMemoryIndirectNV(commandBuffer : VkCommandBuffer, copyBufferAddress : VkDeviceAddress, copyCount : uint32, stride : uint32) = Loader<unit>.vkCmdCopyMemoryIndirectNV.Invoke(commandBuffer, copyBufferAddress, copyCount, stride)
            let vkCmdCopyMemoryToImageIndirectNV(commandBuffer : VkCommandBuffer, copyBufferAddress : VkDeviceAddress, copyCount : uint32, stride : uint32, dstImage : VkImage, dstImageLayout : VkImageLayout, pImageSubresources : nativeptr<VkImageSubresourceLayers>) = Loader<unit>.vkCmdCopyMemoryToImageIndirectNV.Invoke(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources)

    /// Requires ((KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRBufferDeviceAddress) | Vulkan12.
    module NVMemoryDecompression =
        let Type = ExtensionType.Device
        let Name = "VK_NV_memory_decompression"
        let Number = 428

        [<Flags>]
        type VkMemoryDecompressionMethodFlagsNV =
            | All = 1
            | None = 0
            | Gdeflate10Bit = 0x00000001


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDecompressMemoryRegionNV =
            struct
                val mutable public srcAddress : VkDeviceAddress
                val mutable public dstAddress : VkDeviceAddress
                val mutable public compressedSize : VkDeviceSize
                val mutable public decompressedSize : VkDeviceSize
                val mutable public decompressionMethod : VkMemoryDecompressionMethodFlagsNV

                new(srcAddress: VkDeviceAddress, dstAddress: VkDeviceAddress, compressedSize: VkDeviceSize, decompressedSize: VkDeviceSize, decompressionMethod: VkMemoryDecompressionMethodFlagsNV) =
                    {
                        srcAddress = srcAddress
                        dstAddress = dstAddress
                        compressedSize = compressedSize
                        decompressedSize = decompressedSize
                        decompressionMethod = decompressionMethod
                    }

                member x.IsEmpty =
                    x.srcAddress = Unchecked.defaultof<VkDeviceAddress> && x.dstAddress = Unchecked.defaultof<VkDeviceAddress> && x.compressedSize = Unchecked.defaultof<VkDeviceSize> && x.decompressedSize = Unchecked.defaultof<VkDeviceSize> && x.decompressionMethod = Unchecked.defaultof<VkMemoryDecompressionMethodFlagsNV>

                static member Empty =
                    VkDecompressMemoryRegionNV(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkMemoryDecompressionMethodFlagsNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "srcAddress = %A" x.srcAddress
                        sprintf "dstAddress = %A" x.dstAddress
                        sprintf "compressedSize = %A" x.compressedSize
                        sprintf "decompressedSize = %A" x.decompressedSize
                        sprintf "decompressionMethod = %A" x.decompressionMethod
                    ] |> sprintf "VkDecompressMemoryRegionNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMemoryDecompressionFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memoryDecompression : VkBool32

                new(pNext: nativeint, memoryDecompression: VkBool32) =
                    {
                        sType = 1000427000u
                        pNext = pNext
                        memoryDecompression = memoryDecompression
                    }

                new(memoryDecompression: VkBool32) =
                    VkPhysicalDeviceMemoryDecompressionFeaturesNV(Unchecked.defaultof<nativeint>, memoryDecompression)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memoryDecompression = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMemoryDecompressionFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memoryDecompression = %A" x.memoryDecompression
                    ] |> sprintf "VkPhysicalDeviceMemoryDecompressionFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMemoryDecompressionPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public decompressionMethods : VkMemoryDecompressionMethodFlagsNV
                val mutable public maxDecompressionIndirectCount : uint64

                new(pNext: nativeint, decompressionMethods: VkMemoryDecompressionMethodFlagsNV, maxDecompressionIndirectCount: uint64) =
                    {
                        sType = 1000427001u
                        pNext = pNext
                        decompressionMethods = decompressionMethods
                        maxDecompressionIndirectCount = maxDecompressionIndirectCount
                    }

                new(decompressionMethods: VkMemoryDecompressionMethodFlagsNV, maxDecompressionIndirectCount: uint64) =
                    VkPhysicalDeviceMemoryDecompressionPropertiesNV(Unchecked.defaultof<nativeint>, decompressionMethods, maxDecompressionIndirectCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.decompressionMethods = Unchecked.defaultof<VkMemoryDecompressionMethodFlagsNV> && x.maxDecompressionIndirectCount = Unchecked.defaultof<uint64>

                static member Empty =
                    VkPhysicalDeviceMemoryDecompressionPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMemoryDecompressionMethodFlagsNV>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "decompressionMethods = %A" x.decompressionMethods
                        sprintf "maxDecompressionIndirectCount = %A" x.maxDecompressionIndirectCount
                    ] |> sprintf "VkPhysicalDeviceMemoryDecompressionPropertiesNV { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDecompressMemoryNVDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkDecompressMemoryRegionNV> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdDecompressMemoryIndirectCountNVDel = delegate of VkCommandBuffer * VkDeviceAddress * VkDeviceAddress * uint32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVMemoryDecompression")
                static let s_vkCmdDecompressMemoryNVDel = VkRaw.vkImportInstanceDelegate<VkCmdDecompressMemoryNVDel> "vkCmdDecompressMemoryNV"
                static let s_vkCmdDecompressMemoryIndirectCountNVDel = VkRaw.vkImportInstanceDelegate<VkCmdDecompressMemoryIndirectCountNVDel> "vkCmdDecompressMemoryIndirectCountNV"
                static do Report.End(3) |> ignore
                static member vkCmdDecompressMemoryNV = s_vkCmdDecompressMemoryNVDel
                static member vkCmdDecompressMemoryIndirectCountNV = s_vkCmdDecompressMemoryIndirectCountNVDel
            let vkCmdDecompressMemoryNV(commandBuffer : VkCommandBuffer, decompressRegionCount : uint32, pDecompressMemoryRegions : nativeptr<VkDecompressMemoryRegionNV>) = Loader<unit>.vkCmdDecompressMemoryNV.Invoke(commandBuffer, decompressRegionCount, pDecompressMemoryRegions)
            let vkCmdDecompressMemoryIndirectCountNV(commandBuffer : VkCommandBuffer, indirectCommandsAddress : VkDeviceAddress, indirectCommandsCountAddress : VkDeviceAddress, stride : uint32) = Loader<unit>.vkCmdDecompressMemoryIndirectCountNV.Invoke(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride)

    /// Requires NVDeviceGeneratedCommands.
    module NVDeviceGeneratedCommandsCompute =
        let Type = ExtensionType.Device
        let Name = "VK_NV_device_generated_commands_compute"
        let Number = 429

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBindPipelineIndirectCommandNV =
            struct
                val mutable public pipelineAddress : VkDeviceAddress

                new(pipelineAddress: VkDeviceAddress) =
                    {
                        pipelineAddress = pipelineAddress
                    }

                member x.IsEmpty =
                    x.pipelineAddress = Unchecked.defaultof<VkDeviceAddress>

                static member Empty =
                    VkBindPipelineIndirectCommandNV(Unchecked.defaultof<VkDeviceAddress>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pipelineAddress = %A" x.pipelineAddress
                    ] |> sprintf "VkBindPipelineIndirectCommandNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkComputePipelineIndirectBufferInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public deviceAddress : VkDeviceAddress
                val mutable public size : VkDeviceSize
                val mutable public pipelineDeviceAddressCaptureReplay : VkDeviceAddress

                new(pNext: nativeint, deviceAddress: VkDeviceAddress, size: VkDeviceSize, pipelineDeviceAddressCaptureReplay: VkDeviceAddress) =
                    {
                        sType = 1000428001u
                        pNext = pNext
                        deviceAddress = deviceAddress
                        size = size
                        pipelineDeviceAddressCaptureReplay = pipelineDeviceAddressCaptureReplay
                    }

                new(deviceAddress: VkDeviceAddress, size: VkDeviceSize, pipelineDeviceAddressCaptureReplay: VkDeviceAddress) =
                    VkComputePipelineIndirectBufferInfoNV(Unchecked.defaultof<nativeint>, deviceAddress, size, pipelineDeviceAddressCaptureReplay)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.deviceAddress = Unchecked.defaultof<VkDeviceAddress> && x.size = Unchecked.defaultof<VkDeviceSize> && x.pipelineDeviceAddressCaptureReplay = Unchecked.defaultof<VkDeviceAddress>

                static member Empty =
                    VkComputePipelineIndirectBufferInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceAddress>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "deviceAddress = %A" x.deviceAddress
                        sprintf "size = %A" x.size
                        sprintf "pipelineDeviceAddressCaptureReplay = %A" x.pipelineDeviceAddressCaptureReplay
                    ] |> sprintf "VkComputePipelineIndirectBufferInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public deviceGeneratedCompute : VkBool32
                val mutable public deviceGeneratedComputePipelines : VkBool32
                val mutable public deviceGeneratedComputeCaptureReplay : VkBool32

                new(pNext: nativeint, deviceGeneratedCompute: VkBool32, deviceGeneratedComputePipelines: VkBool32, deviceGeneratedComputeCaptureReplay: VkBool32) =
                    {
                        sType = 1000428000u
                        pNext = pNext
                        deviceGeneratedCompute = deviceGeneratedCompute
                        deviceGeneratedComputePipelines = deviceGeneratedComputePipelines
                        deviceGeneratedComputeCaptureReplay = deviceGeneratedComputeCaptureReplay
                    }

                new(deviceGeneratedCompute: VkBool32, deviceGeneratedComputePipelines: VkBool32, deviceGeneratedComputeCaptureReplay: VkBool32) =
                    VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(Unchecked.defaultof<nativeint>, deviceGeneratedCompute, deviceGeneratedComputePipelines, deviceGeneratedComputeCaptureReplay)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.deviceGeneratedCompute = Unchecked.defaultof<VkBool32> && x.deviceGeneratedComputePipelines = Unchecked.defaultof<VkBool32> && x.deviceGeneratedComputeCaptureReplay = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "deviceGeneratedCompute = %A" x.deviceGeneratedCompute
                        sprintf "deviceGeneratedComputePipelines = %A" x.deviceGeneratedComputePipelines
                        sprintf "deviceGeneratedComputeCaptureReplay = %A" x.deviceGeneratedComputeCaptureReplay
                    ] |> sprintf "VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineIndirectDeviceAddressInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelineBindPoint : VkPipelineBindPoint
                val mutable public pipeline : VkPipeline

                new(pNext: nativeint, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) =
                    {
                        sType = 1000428002u
                        pNext = pNext
                        pipelineBindPoint = pipelineBindPoint
                        pipeline = pipeline
                    }

                new(pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) =
                    VkPipelineIndirectDeviceAddressInfoNV(Unchecked.defaultof<nativeint>, pipelineBindPoint, pipeline)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.pipeline = Unchecked.defaultof<VkPipeline>

                static member Empty =
                    VkPipelineIndirectDeviceAddressInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<VkPipeline>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                        sprintf "pipeline = %A" x.pipeline
                    ] |> sprintf "VkPipelineIndirectDeviceAddressInfoNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDescriptorSetLayoutCreateFlags with
                  static member inline IndirectBindableBitNv = enum<VkDescriptorSetLayoutCreateFlags> 0x00000080
             type NVDeviceGeneratedCommands.VkIndirectCommandsTokenTypeNV with
                  static member inline Pipeline = enum<NVDeviceGeneratedCommands.VkIndirectCommandsTokenTypeNV> 1000428003
                  static member inline Dispatch = enum<NVDeviceGeneratedCommands.VkIndirectCommandsTokenTypeNV> 1000428004

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPipelineIndirectMemoryRequirementsNVDel = delegate of VkDevice * nativeptr<VkComputePipelineCreateInfo> * nativeptr<Vulkan11.VkMemoryRequirements2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdUpdatePipelineIndirectBufferNVDel = delegate of VkCommandBuffer * VkPipelineBindPoint * VkPipeline -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPipelineIndirectDeviceAddressNVDel = delegate of VkDevice * nativeptr<VkPipelineIndirectDeviceAddressInfoNV> -> VkDeviceAddress

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVDeviceGeneratedCommandsCompute")
                static let s_vkGetPipelineIndirectMemoryRequirementsNVDel = VkRaw.vkImportInstanceDelegate<VkGetPipelineIndirectMemoryRequirementsNVDel> "vkGetPipelineIndirectMemoryRequirementsNV"
                static let s_vkCmdUpdatePipelineIndirectBufferNVDel = VkRaw.vkImportInstanceDelegate<VkCmdUpdatePipelineIndirectBufferNVDel> "vkCmdUpdatePipelineIndirectBufferNV"
                static let s_vkGetPipelineIndirectDeviceAddressNVDel = VkRaw.vkImportInstanceDelegate<VkGetPipelineIndirectDeviceAddressNVDel> "vkGetPipelineIndirectDeviceAddressNV"
                static do Report.End(3) |> ignore
                static member vkGetPipelineIndirectMemoryRequirementsNV = s_vkGetPipelineIndirectMemoryRequirementsNVDel
                static member vkCmdUpdatePipelineIndirectBufferNV = s_vkCmdUpdatePipelineIndirectBufferNVDel
                static member vkGetPipelineIndirectDeviceAddressNV = s_vkGetPipelineIndirectDeviceAddressNVDel
            let vkGetPipelineIndirectMemoryRequirementsNV(device : VkDevice, pCreateInfo : nativeptr<VkComputePipelineCreateInfo>, pMemoryRequirements : nativeptr<Vulkan11.VkMemoryRequirements2>) = Loader<unit>.vkGetPipelineIndirectMemoryRequirementsNV.Invoke(device, pCreateInfo, pMemoryRequirements)
            let vkCmdUpdatePipelineIndirectBufferNV(commandBuffer : VkCommandBuffer, pipelineBindPoint : VkPipelineBindPoint, pipeline : VkPipeline) = Loader<unit>.vkCmdUpdatePipelineIndirectBufferNV.Invoke(commandBuffer, pipelineBindPoint, pipeline)
            let vkGetPipelineIndirectDeviceAddressNV(device : VkDevice, pInfo : nativeptr<VkPipelineIndirectDeviceAddressInfoNV>) = Loader<unit>.vkGetPipelineIndirectDeviceAddressNV.Invoke(device, pInfo)

    /// Requires KHRRayTracingPipeline.
    module NVRayTracingLinearSweptSpheres =
        let Type = ExtensionType.Device
        let Name = "VK_NV_ray_tracing_linear_swept_spheres"
        let Number = 430

        type VkRayTracingLssIndexingModeNV =
            | List = 0
            | Successive = 1

        type VkRayTracingLssPrimitiveEndCapsModeNV =
            | None = 0
            | Chained = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureGeometryLinearSweptSpheresDataNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public vertexFormat : VkFormat
                val mutable public vertexData : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public vertexStride : VkDeviceSize
                val mutable public radiusFormat : VkFormat
                val mutable public radiusData : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public radiusStride : VkDeviceSize
                val mutable public indexType : VkIndexType
                val mutable public indexData : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public indexStride : VkDeviceSize
                val mutable public indexingMode : VkRayTracingLssIndexingModeNV
                val mutable public endCapsMode : VkRayTracingLssPrimitiveEndCapsModeNV

                new(pNext: nativeint, vertexFormat: VkFormat, vertexData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, vertexStride: VkDeviceSize, radiusFormat: VkFormat, radiusData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, radiusStride: VkDeviceSize, indexType: VkIndexType, indexData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, indexStride: VkDeviceSize, indexingMode: VkRayTracingLssIndexingModeNV, endCapsMode: VkRayTracingLssPrimitiveEndCapsModeNV) =
                    {
                        sType = 1000429009u
                        pNext = pNext
                        vertexFormat = vertexFormat
                        vertexData = vertexData
                        vertexStride = vertexStride
                        radiusFormat = radiusFormat
                        radiusData = radiusData
                        radiusStride = radiusStride
                        indexType = indexType
                        indexData = indexData
                        indexStride = indexStride
                        indexingMode = indexingMode
                        endCapsMode = endCapsMode
                    }

                new(vertexFormat: VkFormat, vertexData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, vertexStride: VkDeviceSize, radiusFormat: VkFormat, radiusData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, radiusStride: VkDeviceSize, indexType: VkIndexType, indexData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, indexStride: VkDeviceSize, indexingMode: VkRayTracingLssIndexingModeNV, endCapsMode: VkRayTracingLssPrimitiveEndCapsModeNV) =
                    VkAccelerationStructureGeometryLinearSweptSpheresDataNV(Unchecked.defaultof<nativeint>, vertexFormat, vertexData, vertexStride, radiusFormat, radiusData, radiusStride, indexType, indexData, indexStride, indexingMode, endCapsMode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.vertexFormat = Unchecked.defaultof<VkFormat> && x.vertexData = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.vertexStride = Unchecked.defaultof<VkDeviceSize> && x.radiusFormat = Unchecked.defaultof<VkFormat> && x.radiusData = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.radiusStride = Unchecked.defaultof<VkDeviceSize> && x.indexType = Unchecked.defaultof<VkIndexType> && x.indexData = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.indexStride = Unchecked.defaultof<VkDeviceSize> && x.indexingMode = Unchecked.defaultof<VkRayTracingLssIndexingModeNV> && x.endCapsMode = Unchecked.defaultof<VkRayTracingLssPrimitiveEndCapsModeNV>

                static member Empty =
                    VkAccelerationStructureGeometryLinearSweptSpheresDataNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkIndexType>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkRayTracingLssIndexingModeNV>, Unchecked.defaultof<VkRayTracingLssPrimitiveEndCapsModeNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "vertexFormat = %A" x.vertexFormat
                        sprintf "vertexData = %A" x.vertexData
                        sprintf "vertexStride = %A" x.vertexStride
                        sprintf "radiusFormat = %A" x.radiusFormat
                        sprintf "radiusData = %A" x.radiusData
                        sprintf "radiusStride = %A" x.radiusStride
                        sprintf "indexType = %A" x.indexType
                        sprintf "indexData = %A" x.indexData
                        sprintf "indexStride = %A" x.indexStride
                        sprintf "indexingMode = %A" x.indexingMode
                        sprintf "endCapsMode = %A" x.endCapsMode
                    ] |> sprintf "VkAccelerationStructureGeometryLinearSweptSpheresDataNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAccelerationStructureGeometrySpheresDataNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public vertexFormat : VkFormat
                val mutable public vertexData : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public vertexStride : VkDeviceSize
                val mutable public radiusFormat : VkFormat
                val mutable public radiusData : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public radiusStride : VkDeviceSize
                val mutable public indexType : VkIndexType
                val mutable public indexData : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public indexStride : VkDeviceSize

                new(pNext: nativeint, vertexFormat: VkFormat, vertexData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, vertexStride: VkDeviceSize, radiusFormat: VkFormat, radiusData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, radiusStride: VkDeviceSize, indexType: VkIndexType, indexData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, indexStride: VkDeviceSize) =
                    {
                        sType = 1000429010u
                        pNext = pNext
                        vertexFormat = vertexFormat
                        vertexData = vertexData
                        vertexStride = vertexStride
                        radiusFormat = radiusFormat
                        radiusData = radiusData
                        radiusStride = radiusStride
                        indexType = indexType
                        indexData = indexData
                        indexStride = indexStride
                    }

                new(vertexFormat: VkFormat, vertexData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, vertexStride: VkDeviceSize, radiusFormat: VkFormat, radiusData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, radiusStride: VkDeviceSize, indexType: VkIndexType, indexData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, indexStride: VkDeviceSize) =
                    VkAccelerationStructureGeometrySpheresDataNV(Unchecked.defaultof<nativeint>, vertexFormat, vertexData, vertexStride, radiusFormat, radiusData, radiusStride, indexType, indexData, indexStride)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.vertexFormat = Unchecked.defaultof<VkFormat> && x.vertexData = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.vertexStride = Unchecked.defaultof<VkDeviceSize> && x.radiusFormat = Unchecked.defaultof<VkFormat> && x.radiusData = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.radiusStride = Unchecked.defaultof<VkDeviceSize> && x.indexType = Unchecked.defaultof<VkIndexType> && x.indexData = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.indexStride = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkAccelerationStructureGeometrySpheresDataNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkIndexType>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "vertexFormat = %A" x.vertexFormat
                        sprintf "vertexData = %A" x.vertexData
                        sprintf "vertexStride = %A" x.vertexStride
                        sprintf "radiusFormat = %A" x.radiusFormat
                        sprintf "radiusData = %A" x.radiusData
                        sprintf "radiusStride = %A" x.radiusStride
                        sprintf "indexType = %A" x.indexType
                        sprintf "indexData = %A" x.indexData
                        sprintf "indexStride = %A" x.indexStride
                    ] |> sprintf "VkAccelerationStructureGeometrySpheresDataNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public spheres : VkBool32
                val mutable public linearSweptSpheres : VkBool32

                new(pNext: nativeint, spheres: VkBool32, linearSweptSpheres: VkBool32) =
                    {
                        sType = 1000429008u
                        pNext = pNext
                        spheres = spheres
                        linearSweptSpheres = linearSweptSpheres
                    }

                new(spheres: VkBool32, linearSweptSpheres: VkBool32) =
                    VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV(Unchecked.defaultof<nativeint>, spheres, linearSweptSpheres)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.spheres = Unchecked.defaultof<VkBool32> && x.linearSweptSpheres = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "spheres = %A" x.spheres
                        sprintf "linearSweptSpheres = %A" x.linearSweptSpheres
                    ] |> sprintf "VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkFormatFeatureFlags2 with
                  static member inline FormatFeature2AccelerationStructureRadiusBufferBitNv = enum<Vulkan13.VkFormatFeatureFlags2> 0x00080000
             type KHRAccelerationStructure.VkGeometryTypeKHR with
                  static member inline SpheresNv = enum<KHRAccelerationStructure.VkGeometryTypeKHR> 1000429004
                  static member inline LinearSweptSpheresNv = enum<KHRAccelerationStructure.VkGeometryTypeKHR> 1000429005
             type Vulkan14.VkPipelineCreateFlags2 with
                  static member inline PipelineCreate2RayTracingAllowSpheresAndLinearSweptSpheresBitNv = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000002


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module NVLinearColorAttachment =
        let Type = ExtensionType.Device
        let Name = "VK_NV_linear_color_attachment"
        let Number = 431

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceLinearColorAttachmentFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public linearColorAttachment : VkBool32

                new(pNext: nativeint, linearColorAttachment: VkBool32) =
                    {
                        sType = 1000430000u
                        pNext = pNext
                        linearColorAttachment = linearColorAttachment
                    }

                new(linearColorAttachment: VkBool32) =
                    VkPhysicalDeviceLinearColorAttachmentFeaturesNV(Unchecked.defaultof<nativeint>, linearColorAttachment)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.linearColorAttachment = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceLinearColorAttachmentFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "linearColorAttachment = %A" x.linearColorAttachment
                    ] |> sprintf "VkPhysicalDeviceLinearColorAttachmentFeaturesNV { %s }"
            end



        [<AutoOpen>]
        module ``KHRFormatFeatureFlags2 | Vulkan13`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkFormatFeatureFlags2 with
                      /// Format support linear image as render target, it cannot be mixed with non linear attachment
                      static member inline FormatFeature2LinearColorAttachmentBitNv = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000040


    /// Requires KHRSurface.
    module GOOGLESurfacelessQuery =
        let Type = ExtensionType.Instance
        let Name = "VK_GOOGLE_surfaceless_query"
        let Number = 434

    /// Requires Vulkan11.
    module KHRShaderMaximalReconvergence =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_maximal_reconvergence"
        let Number = 435

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderMaximalReconvergence : VkBool32

                new(pNext: nativeint, shaderMaximalReconvergence: VkBool32) =
                    {
                        sType = 1000434000u
                        pNext = pNext
                        shaderMaximalReconvergence = shaderMaximalReconvergence
                    }

                new(shaderMaximalReconvergence: VkBool32) =
                    VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(Unchecked.defaultof<nativeint>, shaderMaximalReconvergence)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderMaximalReconvergence = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderMaximalReconvergence = %A" x.shaderMaximalReconvergence
                    ] |> sprintf "VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR { %s }"
            end



    /// Requires EXTImageCompressionControl.
    module EXTImageCompressionControlSwapchain =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_image_compression_control_swapchain"
        let Number = 438

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageCompressionControlSwapchain : VkBool32

                new(pNext: nativeint, imageCompressionControlSwapchain: VkBool32) =
                    {
                        sType = 1000437000u
                        pNext = pNext
                        imageCompressionControlSwapchain = imageCompressionControlSwapchain
                    }

                new(imageCompressionControlSwapchain: VkBool32) =
                    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(Unchecked.defaultof<nativeint>, imageCompressionControlSwapchain)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageCompressionControlSwapchain = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageCompressionControlSwapchain = %A" x.imageCompressionControlSwapchain
                    ] |> sprintf "VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT { %s }"
            end



    /// Requires KHRFormatFeatureFlags2 | Vulkan13.
    module QCOMImageProcessing =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_image_processing"
        let Number = 441

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageViewSampleWeightCreateInfoQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public filterCenter : VkOffset2D
                val mutable public filterSize : VkExtent2D
                val mutable public numPhases : uint32

                new(pNext: nativeint, filterCenter: VkOffset2D, filterSize: VkExtent2D, numPhases: uint32) =
                    {
                        sType = 1000440002u
                        pNext = pNext
                        filterCenter = filterCenter
                        filterSize = filterSize
                        numPhases = numPhases
                    }

                new(filterCenter: VkOffset2D, filterSize: VkExtent2D, numPhases: uint32) =
                    VkImageViewSampleWeightCreateInfoQCOM(Unchecked.defaultof<nativeint>, filterCenter, filterSize, numPhases)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.filterCenter = Unchecked.defaultof<VkOffset2D> && x.filterSize = Unchecked.defaultof<VkExtent2D> && x.numPhases = Unchecked.defaultof<uint32>

                static member Empty =
                    VkImageViewSampleWeightCreateInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "filterCenter = %A" x.filterCenter
                        sprintf "filterSize = %A" x.filterSize
                        sprintf "numPhases = %A" x.numPhases
                    ] |> sprintf "VkImageViewSampleWeightCreateInfoQCOM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImageProcessingFeaturesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public textureSampleWeighted : VkBool32
                val mutable public textureBoxFilter : VkBool32
                val mutable public textureBlockMatch : VkBool32

                new(pNext: nativeint, textureSampleWeighted: VkBool32, textureBoxFilter: VkBool32, textureBlockMatch: VkBool32) =
                    {
                        sType = 1000440000u
                        pNext = pNext
                        textureSampleWeighted = textureSampleWeighted
                        textureBoxFilter = textureBoxFilter
                        textureBlockMatch = textureBlockMatch
                    }

                new(textureSampleWeighted: VkBool32, textureBoxFilter: VkBool32, textureBlockMatch: VkBool32) =
                    VkPhysicalDeviceImageProcessingFeaturesQCOM(Unchecked.defaultof<nativeint>, textureSampleWeighted, textureBoxFilter, textureBlockMatch)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.textureSampleWeighted = Unchecked.defaultof<VkBool32> && x.textureBoxFilter = Unchecked.defaultof<VkBool32> && x.textureBlockMatch = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceImageProcessingFeaturesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "textureSampleWeighted = %A" x.textureSampleWeighted
                        sprintf "textureBoxFilter = %A" x.textureBoxFilter
                        sprintf "textureBlockMatch = %A" x.textureBlockMatch
                    ] |> sprintf "VkPhysicalDeviceImageProcessingFeaturesQCOM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImageProcessingPropertiesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxWeightFilterPhases : uint32
                val mutable public maxWeightFilterDimension : VkExtent2D
                val mutable public maxBlockMatchRegion : VkExtent2D
                val mutable public maxBoxFilterBlockSize : VkExtent2D

                new(pNext: nativeint, maxWeightFilterPhases: uint32, maxWeightFilterDimension: VkExtent2D, maxBlockMatchRegion: VkExtent2D, maxBoxFilterBlockSize: VkExtent2D) =
                    {
                        sType = 1000440001u
                        pNext = pNext
                        maxWeightFilterPhases = maxWeightFilterPhases
                        maxWeightFilterDimension = maxWeightFilterDimension
                        maxBlockMatchRegion = maxBlockMatchRegion
                        maxBoxFilterBlockSize = maxBoxFilterBlockSize
                    }

                new(maxWeightFilterPhases: uint32, maxWeightFilterDimension: VkExtent2D, maxBlockMatchRegion: VkExtent2D, maxBoxFilterBlockSize: VkExtent2D) =
                    VkPhysicalDeviceImageProcessingPropertiesQCOM(Unchecked.defaultof<nativeint>, maxWeightFilterPhases, maxWeightFilterDimension, maxBlockMatchRegion, maxBoxFilterBlockSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxWeightFilterPhases = Unchecked.defaultof<uint32> && x.maxWeightFilterDimension = Unchecked.defaultof<VkExtent2D> && x.maxBlockMatchRegion = Unchecked.defaultof<VkExtent2D> && x.maxBoxFilterBlockSize = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkPhysicalDeviceImageProcessingPropertiesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxWeightFilterPhases = %A" x.maxWeightFilterPhases
                        sprintf "maxWeightFilterDimension = %A" x.maxWeightFilterDimension
                        sprintf "maxBlockMatchRegion = %A" x.maxBlockMatchRegion
                        sprintf "maxBoxFilterBlockSize = %A" x.maxBoxFilterBlockSize
                    ] |> sprintf "VkPhysicalDeviceImageProcessingPropertiesQCOM { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDescriptorType with
                  static member inline SampleWeightImageQcom = enum<VkDescriptorType> 1000440000
                  static member inline BlockMatchImageQcom = enum<VkDescriptorType> 1000440001
             type VkImageUsageFlags with
                  static member inline SampleWeightBitQcom = enum<VkImageUsageFlags> 0x00100000
                  static member inline SampleBlockMatchBitQcom = enum<VkImageUsageFlags> 0x00200000
             type VkSamplerCreateFlags with
                  static member inline ImageProcessingBitQcom = enum<VkSamplerCreateFlags> 0x00000010


        [<AutoOpen>]
        module ``KHRFormatFeatureFlags2 | Vulkan13`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan13.VkFormatFeatureFlags2 with
                      static member inline FormatFeature2WeightImageBitQcom = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000004
                      static member inline FormatFeature2WeightSampledImageBitQcom = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000008
                      static member inline FormatFeature2BlockMatchingBitQcom = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000010
                      static member inline FormatFeature2BoxFilterSampledBitQcom = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000020


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTNestedCommandBuffer =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_nested_command_buffer"
        let Number = 452

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceNestedCommandBufferFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public nestedCommandBuffer : VkBool32
                val mutable public nestedCommandBufferRendering : VkBool32
                val mutable public nestedCommandBufferSimultaneousUse : VkBool32

                new(pNext: nativeint, nestedCommandBuffer: VkBool32, nestedCommandBufferRendering: VkBool32, nestedCommandBufferSimultaneousUse: VkBool32) =
                    {
                        sType = 1000451000u
                        pNext = pNext
                        nestedCommandBuffer = nestedCommandBuffer
                        nestedCommandBufferRendering = nestedCommandBufferRendering
                        nestedCommandBufferSimultaneousUse = nestedCommandBufferSimultaneousUse
                    }

                new(nestedCommandBuffer: VkBool32, nestedCommandBufferRendering: VkBool32, nestedCommandBufferSimultaneousUse: VkBool32) =
                    VkPhysicalDeviceNestedCommandBufferFeaturesEXT(Unchecked.defaultof<nativeint>, nestedCommandBuffer, nestedCommandBufferRendering, nestedCommandBufferSimultaneousUse)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.nestedCommandBuffer = Unchecked.defaultof<VkBool32> && x.nestedCommandBufferRendering = Unchecked.defaultof<VkBool32> && x.nestedCommandBufferSimultaneousUse = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceNestedCommandBufferFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "nestedCommandBuffer = %A" x.nestedCommandBuffer
                        sprintf "nestedCommandBufferRendering = %A" x.nestedCommandBufferRendering
                        sprintf "nestedCommandBufferSimultaneousUse = %A" x.nestedCommandBufferSimultaneousUse
                    ] |> sprintf "VkPhysicalDeviceNestedCommandBufferFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceNestedCommandBufferPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxCommandBufferNestingLevel : uint32

                new(pNext: nativeint, maxCommandBufferNestingLevel: uint32) =
                    {
                        sType = 1000451001u
                        pNext = pNext
                        maxCommandBufferNestingLevel = maxCommandBufferNestingLevel
                    }

                new(maxCommandBufferNestingLevel: uint32) =
                    VkPhysicalDeviceNestedCommandBufferPropertiesEXT(Unchecked.defaultof<nativeint>, maxCommandBufferNestingLevel)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxCommandBufferNestingLevel = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceNestedCommandBufferPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxCommandBufferNestingLevel = %A" x.maxCommandBufferNestingLevel
                    ] |> sprintf "VkPhysicalDeviceNestedCommandBufferPropertiesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkRenderingFlags with
                  static member inline ContentsInlineBitExt = enum<Vulkan13.VkRenderingFlags> 0x00000010
             type VkSubpassContents with
                  static member inline InlineAndSecondaryCommandBuffersExt = enum<VkSubpassContents> 1000451000


    /// Requires KHRExternalMemory | Vulkan11.
    module EXTExternalMemoryAcquireUnmodified =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_external_memory_acquire_unmodified"
        let Number = 454

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExternalMemoryAcquireUnmodifiedEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public acquireUnmodifiedMemory : VkBool32

                new(pNext: nativeint, acquireUnmodifiedMemory: VkBool32) =
                    {
                        sType = 1000453000u
                        pNext = pNext
                        acquireUnmodifiedMemory = acquireUnmodifiedMemory
                    }

                new(acquireUnmodifiedMemory: VkBool32) =
                    VkExternalMemoryAcquireUnmodifiedEXT(Unchecked.defaultof<nativeint>, acquireUnmodifiedMemory)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.acquireUnmodifiedMemory = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkExternalMemoryAcquireUnmodifiedEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "acquireUnmodifiedMemory = %A" x.acquireUnmodifiedMemory
                    ] |> sprintf "VkExternalMemoryAcquireUnmodifiedEXT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTExtendedDynamicState3 =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_extended_dynamic_state3"
        let Number = 456

        [<StructLayout(LayoutKind.Sequential)>]
        type VkColorBlendAdvancedEXT =
            struct
                val mutable public advancedBlendOp : VkBlendOp
                val mutable public srcPremultiplied : VkBool32
                val mutable public dstPremultiplied : VkBool32
                val mutable public blendOverlap : EXTBlendOperationAdvanced.VkBlendOverlapEXT
                val mutable public clampResults : VkBool32

                new(advancedBlendOp: VkBlendOp, srcPremultiplied: VkBool32, dstPremultiplied: VkBool32, blendOverlap: EXTBlendOperationAdvanced.VkBlendOverlapEXT, clampResults: VkBool32) =
                    {
                        advancedBlendOp = advancedBlendOp
                        srcPremultiplied = srcPremultiplied
                        dstPremultiplied = dstPremultiplied
                        blendOverlap = blendOverlap
                        clampResults = clampResults
                    }

                member x.IsEmpty =
                    x.advancedBlendOp = Unchecked.defaultof<VkBlendOp> && x.srcPremultiplied = Unchecked.defaultof<VkBool32> && x.dstPremultiplied = Unchecked.defaultof<VkBool32> && x.blendOverlap = Unchecked.defaultof<EXTBlendOperationAdvanced.VkBlendOverlapEXT> && x.clampResults = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkColorBlendAdvancedEXT(Unchecked.defaultof<VkBlendOp>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<EXTBlendOperationAdvanced.VkBlendOverlapEXT>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "advancedBlendOp = %A" x.advancedBlendOp
                        sprintf "srcPremultiplied = %A" x.srcPremultiplied
                        sprintf "dstPremultiplied = %A" x.dstPremultiplied
                        sprintf "blendOverlap = %A" x.blendOverlap
                        sprintf "clampResults = %A" x.clampResults
                    ] |> sprintf "VkColorBlendAdvancedEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkColorBlendEquationEXT =
            struct
                val mutable public srcColorBlendFactor : VkBlendFactor
                val mutable public dstColorBlendFactor : VkBlendFactor
                val mutable public colorBlendOp : VkBlendOp
                val mutable public srcAlphaBlendFactor : VkBlendFactor
                val mutable public dstAlphaBlendFactor : VkBlendFactor
                val mutable public alphaBlendOp : VkBlendOp

                new(srcColorBlendFactor: VkBlendFactor, dstColorBlendFactor: VkBlendFactor, colorBlendOp: VkBlendOp, srcAlphaBlendFactor: VkBlendFactor, dstAlphaBlendFactor: VkBlendFactor, alphaBlendOp: VkBlendOp) =
                    {
                        srcColorBlendFactor = srcColorBlendFactor
                        dstColorBlendFactor = dstColorBlendFactor
                        colorBlendOp = colorBlendOp
                        srcAlphaBlendFactor = srcAlphaBlendFactor
                        dstAlphaBlendFactor = dstAlphaBlendFactor
                        alphaBlendOp = alphaBlendOp
                    }

                member x.IsEmpty =
                    x.srcColorBlendFactor = Unchecked.defaultof<VkBlendFactor> && x.dstColorBlendFactor = Unchecked.defaultof<VkBlendFactor> && x.colorBlendOp = Unchecked.defaultof<VkBlendOp> && x.srcAlphaBlendFactor = Unchecked.defaultof<VkBlendFactor> && x.dstAlphaBlendFactor = Unchecked.defaultof<VkBlendFactor> && x.alphaBlendOp = Unchecked.defaultof<VkBlendOp>

                static member Empty =
                    VkColorBlendEquationEXT(Unchecked.defaultof<VkBlendFactor>, Unchecked.defaultof<VkBlendFactor>, Unchecked.defaultof<VkBlendOp>, Unchecked.defaultof<VkBlendFactor>, Unchecked.defaultof<VkBlendFactor>, Unchecked.defaultof<VkBlendOp>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "srcColorBlendFactor = %A" x.srcColorBlendFactor
                        sprintf "dstColorBlendFactor = %A" x.dstColorBlendFactor
                        sprintf "colorBlendOp = %A" x.colorBlendOp
                        sprintf "srcAlphaBlendFactor = %A" x.srcAlphaBlendFactor
                        sprintf "dstAlphaBlendFactor = %A" x.dstAlphaBlendFactor
                        sprintf "alphaBlendOp = %A" x.alphaBlendOp
                    ] |> sprintf "VkColorBlendEquationEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceExtendedDynamicState3FeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public extendedDynamicState3TessellationDomainOrigin : VkBool32
                val mutable public extendedDynamicState3DepthClampEnable : VkBool32
                val mutable public extendedDynamicState3PolygonMode : VkBool32
                val mutable public extendedDynamicState3RasterizationSamples : VkBool32
                val mutable public extendedDynamicState3SampleMask : VkBool32
                val mutable public extendedDynamicState3AlphaToCoverageEnable : VkBool32
                val mutable public extendedDynamicState3AlphaToOneEnable : VkBool32
                val mutable public extendedDynamicState3LogicOpEnable : VkBool32
                val mutable public extendedDynamicState3ColorBlendEnable : VkBool32
                val mutable public extendedDynamicState3ColorBlendEquation : VkBool32
                val mutable public extendedDynamicState3ColorWriteMask : VkBool32
                val mutable public extendedDynamicState3RasterizationStream : VkBool32
                val mutable public extendedDynamicState3ConservativeRasterizationMode : VkBool32
                val mutable public extendedDynamicState3ExtraPrimitiveOverestimationSize : VkBool32
                val mutable public extendedDynamicState3DepthClipEnable : VkBool32
                val mutable public extendedDynamicState3SampleLocationsEnable : VkBool32
                val mutable public extendedDynamicState3ColorBlendAdvanced : VkBool32
                val mutable public extendedDynamicState3ProvokingVertexMode : VkBool32
                val mutable public extendedDynamicState3LineRasterizationMode : VkBool32
                val mutable public extendedDynamicState3LineStippleEnable : VkBool32
                val mutable public extendedDynamicState3DepthClipNegativeOneToOne : VkBool32
                val mutable public extendedDynamicState3ViewportWScalingEnable : VkBool32
                val mutable public extendedDynamicState3ViewportSwizzle : VkBool32
                val mutable public extendedDynamicState3CoverageToColorEnable : VkBool32
                val mutable public extendedDynamicState3CoverageToColorLocation : VkBool32
                val mutable public extendedDynamicState3CoverageModulationMode : VkBool32
                val mutable public extendedDynamicState3CoverageModulationTableEnable : VkBool32
                val mutable public extendedDynamicState3CoverageModulationTable : VkBool32
                val mutable public extendedDynamicState3CoverageReductionMode : VkBool32
                val mutable public extendedDynamicState3RepresentativeFragmentTestEnable : VkBool32
                val mutable public extendedDynamicState3ShadingRateImageEnable : VkBool32

                new(pNext: nativeint, extendedDynamicState3TessellationDomainOrigin: VkBool32, extendedDynamicState3DepthClampEnable: VkBool32, extendedDynamicState3PolygonMode: VkBool32, extendedDynamicState3RasterizationSamples: VkBool32, extendedDynamicState3SampleMask: VkBool32, extendedDynamicState3AlphaToCoverageEnable: VkBool32, extendedDynamicState3AlphaToOneEnable: VkBool32, extendedDynamicState3LogicOpEnable: VkBool32, extendedDynamicState3ColorBlendEnable: VkBool32, extendedDynamicState3ColorBlendEquation: VkBool32, extendedDynamicState3ColorWriteMask: VkBool32, extendedDynamicState3RasterizationStream: VkBool32, extendedDynamicState3ConservativeRasterizationMode: VkBool32, extendedDynamicState3ExtraPrimitiveOverestimationSize: VkBool32, extendedDynamicState3DepthClipEnable: VkBool32, extendedDynamicState3SampleLocationsEnable: VkBool32, extendedDynamicState3ColorBlendAdvanced: VkBool32, extendedDynamicState3ProvokingVertexMode: VkBool32, extendedDynamicState3LineRasterizationMode: VkBool32, extendedDynamicState3LineStippleEnable: VkBool32, extendedDynamicState3DepthClipNegativeOneToOne: VkBool32, extendedDynamicState3ViewportWScalingEnable: VkBool32, extendedDynamicState3ViewportSwizzle: VkBool32, extendedDynamicState3CoverageToColorEnable: VkBool32, extendedDynamicState3CoverageToColorLocation: VkBool32, extendedDynamicState3CoverageModulationMode: VkBool32, extendedDynamicState3CoverageModulationTableEnable: VkBool32, extendedDynamicState3CoverageModulationTable: VkBool32, extendedDynamicState3CoverageReductionMode: VkBool32, extendedDynamicState3RepresentativeFragmentTestEnable: VkBool32, extendedDynamicState3ShadingRateImageEnable: VkBool32) =
                    {
                        sType = 1000455000u
                        pNext = pNext
                        extendedDynamicState3TessellationDomainOrigin = extendedDynamicState3TessellationDomainOrigin
                        extendedDynamicState3DepthClampEnable = extendedDynamicState3DepthClampEnable
                        extendedDynamicState3PolygonMode = extendedDynamicState3PolygonMode
                        extendedDynamicState3RasterizationSamples = extendedDynamicState3RasterizationSamples
                        extendedDynamicState3SampleMask = extendedDynamicState3SampleMask
                        extendedDynamicState3AlphaToCoverageEnable = extendedDynamicState3AlphaToCoverageEnable
                        extendedDynamicState3AlphaToOneEnable = extendedDynamicState3AlphaToOneEnable
                        extendedDynamicState3LogicOpEnable = extendedDynamicState3LogicOpEnable
                        extendedDynamicState3ColorBlendEnable = extendedDynamicState3ColorBlendEnable
                        extendedDynamicState3ColorBlendEquation = extendedDynamicState3ColorBlendEquation
                        extendedDynamicState3ColorWriteMask = extendedDynamicState3ColorWriteMask
                        extendedDynamicState3RasterizationStream = extendedDynamicState3RasterizationStream
                        extendedDynamicState3ConservativeRasterizationMode = extendedDynamicState3ConservativeRasterizationMode
                        extendedDynamicState3ExtraPrimitiveOverestimationSize = extendedDynamicState3ExtraPrimitiveOverestimationSize
                        extendedDynamicState3DepthClipEnable = extendedDynamicState3DepthClipEnable
                        extendedDynamicState3SampleLocationsEnable = extendedDynamicState3SampleLocationsEnable
                        extendedDynamicState3ColorBlendAdvanced = extendedDynamicState3ColorBlendAdvanced
                        extendedDynamicState3ProvokingVertexMode = extendedDynamicState3ProvokingVertexMode
                        extendedDynamicState3LineRasterizationMode = extendedDynamicState3LineRasterizationMode
                        extendedDynamicState3LineStippleEnable = extendedDynamicState3LineStippleEnable
                        extendedDynamicState3DepthClipNegativeOneToOne = extendedDynamicState3DepthClipNegativeOneToOne
                        extendedDynamicState3ViewportWScalingEnable = extendedDynamicState3ViewportWScalingEnable
                        extendedDynamicState3ViewportSwizzle = extendedDynamicState3ViewportSwizzle
                        extendedDynamicState3CoverageToColorEnable = extendedDynamicState3CoverageToColorEnable
                        extendedDynamicState3CoverageToColorLocation = extendedDynamicState3CoverageToColorLocation
                        extendedDynamicState3CoverageModulationMode = extendedDynamicState3CoverageModulationMode
                        extendedDynamicState3CoverageModulationTableEnable = extendedDynamicState3CoverageModulationTableEnable
                        extendedDynamicState3CoverageModulationTable = extendedDynamicState3CoverageModulationTable
                        extendedDynamicState3CoverageReductionMode = extendedDynamicState3CoverageReductionMode
                        extendedDynamicState3RepresentativeFragmentTestEnable = extendedDynamicState3RepresentativeFragmentTestEnable
                        extendedDynamicState3ShadingRateImageEnable = extendedDynamicState3ShadingRateImageEnable
                    }

                new(extendedDynamicState3TessellationDomainOrigin: VkBool32, extendedDynamicState3DepthClampEnable: VkBool32, extendedDynamicState3PolygonMode: VkBool32, extendedDynamicState3RasterizationSamples: VkBool32, extendedDynamicState3SampleMask: VkBool32, extendedDynamicState3AlphaToCoverageEnable: VkBool32, extendedDynamicState3AlphaToOneEnable: VkBool32, extendedDynamicState3LogicOpEnable: VkBool32, extendedDynamicState3ColorBlendEnable: VkBool32, extendedDynamicState3ColorBlendEquation: VkBool32, extendedDynamicState3ColorWriteMask: VkBool32, extendedDynamicState3RasterizationStream: VkBool32, extendedDynamicState3ConservativeRasterizationMode: VkBool32, extendedDynamicState3ExtraPrimitiveOverestimationSize: VkBool32, extendedDynamicState3DepthClipEnable: VkBool32, extendedDynamicState3SampleLocationsEnable: VkBool32, extendedDynamicState3ColorBlendAdvanced: VkBool32, extendedDynamicState3ProvokingVertexMode: VkBool32, extendedDynamicState3LineRasterizationMode: VkBool32, extendedDynamicState3LineStippleEnable: VkBool32, extendedDynamicState3DepthClipNegativeOneToOne: VkBool32, extendedDynamicState3ViewportWScalingEnable: VkBool32, extendedDynamicState3ViewportSwizzle: VkBool32, extendedDynamicState3CoverageToColorEnable: VkBool32, extendedDynamicState3CoverageToColorLocation: VkBool32, extendedDynamicState3CoverageModulationMode: VkBool32, extendedDynamicState3CoverageModulationTableEnable: VkBool32, extendedDynamicState3CoverageModulationTable: VkBool32, extendedDynamicState3CoverageReductionMode: VkBool32, extendedDynamicState3RepresentativeFragmentTestEnable: VkBool32, extendedDynamicState3ShadingRateImageEnable: VkBool32) =
                    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(Unchecked.defaultof<nativeint>, extendedDynamicState3TessellationDomainOrigin, extendedDynamicState3DepthClampEnable, extendedDynamicState3PolygonMode, extendedDynamicState3RasterizationSamples, extendedDynamicState3SampleMask, extendedDynamicState3AlphaToCoverageEnable, extendedDynamicState3AlphaToOneEnable, extendedDynamicState3LogicOpEnable, extendedDynamicState3ColorBlendEnable, extendedDynamicState3ColorBlendEquation, extendedDynamicState3ColorWriteMask, extendedDynamicState3RasterizationStream, extendedDynamicState3ConservativeRasterizationMode, extendedDynamicState3ExtraPrimitiveOverestimationSize, extendedDynamicState3DepthClipEnable, extendedDynamicState3SampleLocationsEnable, extendedDynamicState3ColorBlendAdvanced, extendedDynamicState3ProvokingVertexMode, extendedDynamicState3LineRasterizationMode, extendedDynamicState3LineStippleEnable, extendedDynamicState3DepthClipNegativeOneToOne, extendedDynamicState3ViewportWScalingEnable, extendedDynamicState3ViewportSwizzle, extendedDynamicState3CoverageToColorEnable, extendedDynamicState3CoverageToColorLocation, extendedDynamicState3CoverageModulationMode, extendedDynamicState3CoverageModulationTableEnable, extendedDynamicState3CoverageModulationTable, extendedDynamicState3CoverageReductionMode, extendedDynamicState3RepresentativeFragmentTestEnable, extendedDynamicState3ShadingRateImageEnable)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.extendedDynamicState3TessellationDomainOrigin = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3DepthClampEnable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3PolygonMode = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3RasterizationSamples = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3SampleMask = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3AlphaToCoverageEnable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3AlphaToOneEnable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3LogicOpEnable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3ColorBlendEnable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3ColorBlendEquation = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3ColorWriteMask = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3RasterizationStream = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3ConservativeRasterizationMode = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3ExtraPrimitiveOverestimationSize = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3DepthClipEnable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3SampleLocationsEnable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3ColorBlendAdvanced = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3ProvokingVertexMode = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3LineRasterizationMode = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3LineStippleEnable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3DepthClipNegativeOneToOne = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3ViewportWScalingEnable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3ViewportSwizzle = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3CoverageToColorEnable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3CoverageToColorLocation = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3CoverageModulationMode = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3CoverageModulationTableEnable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3CoverageModulationTable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3CoverageReductionMode = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3RepresentativeFragmentTestEnable = Unchecked.defaultof<VkBool32> && x.extendedDynamicState3ShadingRateImageEnable = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "extendedDynamicState3TessellationDomainOrigin = %A" x.extendedDynamicState3TessellationDomainOrigin
                        sprintf "extendedDynamicState3DepthClampEnable = %A" x.extendedDynamicState3DepthClampEnable
                        sprintf "extendedDynamicState3PolygonMode = %A" x.extendedDynamicState3PolygonMode
                        sprintf "extendedDynamicState3RasterizationSamples = %A" x.extendedDynamicState3RasterizationSamples
                        sprintf "extendedDynamicState3SampleMask = %A" x.extendedDynamicState3SampleMask
                        sprintf "extendedDynamicState3AlphaToCoverageEnable = %A" x.extendedDynamicState3AlphaToCoverageEnable
                        sprintf "extendedDynamicState3AlphaToOneEnable = %A" x.extendedDynamicState3AlphaToOneEnable
                        sprintf "extendedDynamicState3LogicOpEnable = %A" x.extendedDynamicState3LogicOpEnable
                        sprintf "extendedDynamicState3ColorBlendEnable = %A" x.extendedDynamicState3ColorBlendEnable
                        sprintf "extendedDynamicState3ColorBlendEquation = %A" x.extendedDynamicState3ColorBlendEquation
                        sprintf "extendedDynamicState3ColorWriteMask = %A" x.extendedDynamicState3ColorWriteMask
                        sprintf "extendedDynamicState3RasterizationStream = %A" x.extendedDynamicState3RasterizationStream
                        sprintf "extendedDynamicState3ConservativeRasterizationMode = %A" x.extendedDynamicState3ConservativeRasterizationMode
                        sprintf "extendedDynamicState3ExtraPrimitiveOverestimationSize = %A" x.extendedDynamicState3ExtraPrimitiveOverestimationSize
                        sprintf "extendedDynamicState3DepthClipEnable = %A" x.extendedDynamicState3DepthClipEnable
                        sprintf "extendedDynamicState3SampleLocationsEnable = %A" x.extendedDynamicState3SampleLocationsEnable
                        sprintf "extendedDynamicState3ColorBlendAdvanced = %A" x.extendedDynamicState3ColorBlendAdvanced
                        sprintf "extendedDynamicState3ProvokingVertexMode = %A" x.extendedDynamicState3ProvokingVertexMode
                        sprintf "extendedDynamicState3LineRasterizationMode = %A" x.extendedDynamicState3LineRasterizationMode
                        sprintf "extendedDynamicState3LineStippleEnable = %A" x.extendedDynamicState3LineStippleEnable
                        sprintf "extendedDynamicState3DepthClipNegativeOneToOne = %A" x.extendedDynamicState3DepthClipNegativeOneToOne
                        sprintf "extendedDynamicState3ViewportWScalingEnable = %A" x.extendedDynamicState3ViewportWScalingEnable
                        sprintf "extendedDynamicState3ViewportSwizzle = %A" x.extendedDynamicState3ViewportSwizzle
                        sprintf "extendedDynamicState3CoverageToColorEnable = %A" x.extendedDynamicState3CoverageToColorEnable
                        sprintf "extendedDynamicState3CoverageToColorLocation = %A" x.extendedDynamicState3CoverageToColorLocation
                        sprintf "extendedDynamicState3CoverageModulationMode = %A" x.extendedDynamicState3CoverageModulationMode
                        sprintf "extendedDynamicState3CoverageModulationTableEnable = %A" x.extendedDynamicState3CoverageModulationTableEnable
                        sprintf "extendedDynamicState3CoverageModulationTable = %A" x.extendedDynamicState3CoverageModulationTable
                        sprintf "extendedDynamicState3CoverageReductionMode = %A" x.extendedDynamicState3CoverageReductionMode
                        sprintf "extendedDynamicState3RepresentativeFragmentTestEnable = %A" x.extendedDynamicState3RepresentativeFragmentTestEnable
                        sprintf "extendedDynamicState3ShadingRateImageEnable = %A" x.extendedDynamicState3ShadingRateImageEnable
                    ] |> sprintf "VkPhysicalDeviceExtendedDynamicState3FeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceExtendedDynamicState3PropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public dynamicPrimitiveTopologyUnrestricted : VkBool32

                new(pNext: nativeint, dynamicPrimitiveTopologyUnrestricted: VkBool32) =
                    {
                        sType = 1000455001u
                        pNext = pNext
                        dynamicPrimitiveTopologyUnrestricted = dynamicPrimitiveTopologyUnrestricted
                    }

                new(dynamicPrimitiveTopologyUnrestricted: VkBool32) =
                    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(Unchecked.defaultof<nativeint>, dynamicPrimitiveTopologyUnrestricted)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.dynamicPrimitiveTopologyUnrestricted = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "dynamicPrimitiveTopologyUnrestricted = %A" x.dynamicPrimitiveTopologyUnrestricted
                    ] |> sprintf "VkPhysicalDeviceExtendedDynamicState3PropertiesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  static member inline DepthClampEnableExt = enum<VkDynamicState> 1000455003
                  static member inline PolygonModeExt = enum<VkDynamicState> 1000455004
                  static member inline RasterizationSamplesExt = enum<VkDynamicState> 1000455005
                  static member inline SampleMaskExt = enum<VkDynamicState> 1000455006
                  static member inline AlphaToCoverageEnableExt = enum<VkDynamicState> 1000455007
                  static member inline AlphaToOneEnableExt = enum<VkDynamicState> 1000455008
                  static member inline LogicOpEnableExt = enum<VkDynamicState> 1000455009
                  static member inline ColorBlendEnableExt = enum<VkDynamicState> 1000455010
                  static member inline ColorBlendEquationExt = enum<VkDynamicState> 1000455011
                  static member inline ColorWriteMaskExt = enum<VkDynamicState> 1000455012

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetDepthClampEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetPolygonModeEXTDel = delegate of VkCommandBuffer * VkPolygonMode -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetRasterizationSamplesEXTDel = delegate of VkCommandBuffer * VkSampleCountFlags -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetSampleMaskEXTDel = delegate of VkCommandBuffer * VkSampleCountFlags * nativeptr<VkSampleMask> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetAlphaToCoverageEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetAlphaToOneEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetLogicOpEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetColorBlendEnableEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkBool32> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetColorBlendEquationEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkColorBlendEquationEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetColorWriteMaskEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkColorComponentFlags> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3")
                static let s_vkCmdSetDepthClampEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthClampEnableEXTDel> "vkCmdSetDepthClampEnableEXT"
                static let s_vkCmdSetPolygonModeEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPolygonModeEXTDel> "vkCmdSetPolygonModeEXT"
                static let s_vkCmdSetRasterizationSamplesEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetRasterizationSamplesEXTDel> "vkCmdSetRasterizationSamplesEXT"
                static let s_vkCmdSetSampleMaskEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetSampleMaskEXTDel> "vkCmdSetSampleMaskEXT"
                static let s_vkCmdSetAlphaToCoverageEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetAlphaToCoverageEnableEXTDel> "vkCmdSetAlphaToCoverageEnableEXT"
                static let s_vkCmdSetAlphaToOneEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetAlphaToOneEnableEXTDel> "vkCmdSetAlphaToOneEnableEXT"
                static let s_vkCmdSetLogicOpEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetLogicOpEnableEXTDel> "vkCmdSetLogicOpEnableEXT"
                static let s_vkCmdSetColorBlendEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetColorBlendEnableEXTDel> "vkCmdSetColorBlendEnableEXT"
                static let s_vkCmdSetColorBlendEquationEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetColorBlendEquationEXTDel> "vkCmdSetColorBlendEquationEXT"
                static let s_vkCmdSetColorWriteMaskEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetColorWriteMaskEXTDel> "vkCmdSetColorWriteMaskEXT"
                static do Report.End(3) |> ignore
                static member vkCmdSetDepthClampEnableEXT = s_vkCmdSetDepthClampEnableEXTDel
                static member vkCmdSetPolygonModeEXT = s_vkCmdSetPolygonModeEXTDel
                static member vkCmdSetRasterizationSamplesEXT = s_vkCmdSetRasterizationSamplesEXTDel
                static member vkCmdSetSampleMaskEXT = s_vkCmdSetSampleMaskEXTDel
                static member vkCmdSetAlphaToCoverageEnableEXT = s_vkCmdSetAlphaToCoverageEnableEXTDel
                static member vkCmdSetAlphaToOneEnableEXT = s_vkCmdSetAlphaToOneEnableEXTDel
                static member vkCmdSetLogicOpEnableEXT = s_vkCmdSetLogicOpEnableEXTDel
                static member vkCmdSetColorBlendEnableEXT = s_vkCmdSetColorBlendEnableEXTDel
                static member vkCmdSetColorBlendEquationEXT = s_vkCmdSetColorBlendEquationEXTDel
                static member vkCmdSetColorWriteMaskEXT = s_vkCmdSetColorWriteMaskEXTDel
            let vkCmdSetDepthClampEnableEXT(commandBuffer : VkCommandBuffer, depthClampEnable : VkBool32) = Loader<unit>.vkCmdSetDepthClampEnableEXT.Invoke(commandBuffer, depthClampEnable)
            let vkCmdSetPolygonModeEXT(commandBuffer : VkCommandBuffer, polygonMode : VkPolygonMode) = Loader<unit>.vkCmdSetPolygonModeEXT.Invoke(commandBuffer, polygonMode)
            let vkCmdSetRasterizationSamplesEXT(commandBuffer : VkCommandBuffer, rasterizationSamples : VkSampleCountFlags) = Loader<unit>.vkCmdSetRasterizationSamplesEXT.Invoke(commandBuffer, rasterizationSamples)
            let vkCmdSetSampleMaskEXT(commandBuffer : VkCommandBuffer, samples : VkSampleCountFlags, pSampleMask : nativeptr<VkSampleMask>) = Loader<unit>.vkCmdSetSampleMaskEXT.Invoke(commandBuffer, samples, pSampleMask)
            let vkCmdSetAlphaToCoverageEnableEXT(commandBuffer : VkCommandBuffer, alphaToCoverageEnable : VkBool32) = Loader<unit>.vkCmdSetAlphaToCoverageEnableEXT.Invoke(commandBuffer, alphaToCoverageEnable)
            let vkCmdSetAlphaToOneEnableEXT(commandBuffer : VkCommandBuffer, alphaToOneEnable : VkBool32) = Loader<unit>.vkCmdSetAlphaToOneEnableEXT.Invoke(commandBuffer, alphaToOneEnable)
            let vkCmdSetLogicOpEnableEXT(commandBuffer : VkCommandBuffer, logicOpEnable : VkBool32) = Loader<unit>.vkCmdSetLogicOpEnableEXT.Invoke(commandBuffer, logicOpEnable)
            let vkCmdSetColorBlendEnableEXT(commandBuffer : VkCommandBuffer, firstAttachment : uint32, attachmentCount : uint32, pColorBlendEnables : nativeptr<VkBool32>) = Loader<unit>.vkCmdSetColorBlendEnableEXT.Invoke(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables)
            let vkCmdSetColorBlendEquationEXT(commandBuffer : VkCommandBuffer, firstAttachment : uint32, attachmentCount : uint32, pColorBlendEquations : nativeptr<VkColorBlendEquationEXT>) = Loader<unit>.vkCmdSetColorBlendEquationEXT.Invoke(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations)
            let vkCmdSetColorWriteMaskEXT(commandBuffer : VkCommandBuffer, firstAttachment : uint32, attachmentCount : uint32, pColorWriteMasks : nativeptr<VkColorComponentFlags>) = Loader<unit>.vkCmdSetColorWriteMaskEXT.Invoke(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks)

        [<AutoOpen>]
        module ``KHRMaintenance2 | Vulkan11`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline TessellationDomainOriginExt = enum<VkDynamicState> 1000455002

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetTessellationDomainOriginEXTDel = delegate of VkCommandBuffer * Vulkan11.VkTessellationDomainOrigin -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> KHRMaintenance2 | Vulkan11")
                    static let s_vkCmdSetTessellationDomainOriginEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetTessellationDomainOriginEXTDel> "vkCmdSetTessellationDomainOriginEXT"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetTessellationDomainOriginEXT = s_vkCmdSetTessellationDomainOriginEXTDel
                let vkCmdSetTessellationDomainOriginEXT(commandBuffer : VkCommandBuffer, domainOrigin : Vulkan11.VkTessellationDomainOrigin) = Loader<unit>.vkCmdSetTessellationDomainOriginEXT.Invoke(commandBuffer, domainOrigin)

        [<AutoOpen>]
        module ``EXTTransformFeedback`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline RasterizationStreamExt = enum<VkDynamicState> 1000455013

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetRasterizationStreamEXTDel = delegate of VkCommandBuffer * uint32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> EXTTransformFeedback")
                    static let s_vkCmdSetRasterizationStreamEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetRasterizationStreamEXTDel> "vkCmdSetRasterizationStreamEXT"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetRasterizationStreamEXT = s_vkCmdSetRasterizationStreamEXTDel
                let vkCmdSetRasterizationStreamEXT(commandBuffer : VkCommandBuffer, rasterizationStream : uint32) = Loader<unit>.vkCmdSetRasterizationStreamEXT.Invoke(commandBuffer, rasterizationStream)

        [<AutoOpen>]
        module ``EXTConservativeRasterization`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline ConservativeRasterizationModeExt = enum<VkDynamicState> 1000455014
                      static member inline ExtraPrimitiveOverestimationSizeExt = enum<VkDynamicState> 1000455015

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetConservativeRasterizationModeEXTDel = delegate of VkCommandBuffer * EXTConservativeRasterization.VkConservativeRasterizationModeEXT -> unit
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetExtraPrimitiveOverestimationSizeEXTDel = delegate of VkCommandBuffer * float32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> EXTConservativeRasterization")
                    static let s_vkCmdSetConservativeRasterizationModeEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetConservativeRasterizationModeEXTDel> "vkCmdSetConservativeRasterizationModeEXT"
                    static let s_vkCmdSetExtraPrimitiveOverestimationSizeEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetExtraPrimitiveOverestimationSizeEXTDel> "vkCmdSetExtraPrimitiveOverestimationSizeEXT"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetConservativeRasterizationModeEXT = s_vkCmdSetConservativeRasterizationModeEXTDel
                    static member vkCmdSetExtraPrimitiveOverestimationSizeEXT = s_vkCmdSetExtraPrimitiveOverestimationSizeEXTDel
                let vkCmdSetConservativeRasterizationModeEXT(commandBuffer : VkCommandBuffer, conservativeRasterizationMode : EXTConservativeRasterization.VkConservativeRasterizationModeEXT) = Loader<unit>.vkCmdSetConservativeRasterizationModeEXT.Invoke(commandBuffer, conservativeRasterizationMode)
                let vkCmdSetExtraPrimitiveOverestimationSizeEXT(commandBuffer : VkCommandBuffer, extraPrimitiveOverestimationSize : float32) = Loader<unit>.vkCmdSetExtraPrimitiveOverestimationSizeEXT.Invoke(commandBuffer, extraPrimitiveOverestimationSize)

        [<AutoOpen>]
        module ``EXTDepthClipEnable`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline DepthClipEnableExt = enum<VkDynamicState> 1000455016

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetDepthClipEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> EXTDepthClipEnable")
                    static let s_vkCmdSetDepthClipEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthClipEnableEXTDel> "vkCmdSetDepthClipEnableEXT"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetDepthClipEnableEXT = s_vkCmdSetDepthClipEnableEXTDel
                let vkCmdSetDepthClipEnableEXT(commandBuffer : VkCommandBuffer, depthClipEnable : VkBool32) = Loader<unit>.vkCmdSetDepthClipEnableEXT.Invoke(commandBuffer, depthClipEnable)

        [<AutoOpen>]
        module ``EXTSampleLocations`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline SampleLocationsEnableExt = enum<VkDynamicState> 1000455017

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetSampleLocationsEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> EXTSampleLocations")
                    static let s_vkCmdSetSampleLocationsEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetSampleLocationsEnableEXTDel> "vkCmdSetSampleLocationsEnableEXT"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetSampleLocationsEnableEXT = s_vkCmdSetSampleLocationsEnableEXTDel
                let vkCmdSetSampleLocationsEnableEXT(commandBuffer : VkCommandBuffer, sampleLocationsEnable : VkBool32) = Loader<unit>.vkCmdSetSampleLocationsEnableEXT.Invoke(commandBuffer, sampleLocationsEnable)

        [<AutoOpen>]
        module ``EXTBlendOperationAdvanced`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline ColorBlendAdvancedExt = enum<VkDynamicState> 1000455018

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetColorBlendAdvancedEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkColorBlendAdvancedEXT> -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> EXTBlendOperationAdvanced")
                    static let s_vkCmdSetColorBlendAdvancedEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetColorBlendAdvancedEXTDel> "vkCmdSetColorBlendAdvancedEXT"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetColorBlendAdvancedEXT = s_vkCmdSetColorBlendAdvancedEXTDel
                let vkCmdSetColorBlendAdvancedEXT(commandBuffer : VkCommandBuffer, firstAttachment : uint32, attachmentCount : uint32, pColorBlendAdvanced : nativeptr<VkColorBlendAdvancedEXT>) = Loader<unit>.vkCmdSetColorBlendAdvancedEXT.Invoke(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced)

        [<AutoOpen>]
        module ``EXTProvokingVertex`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline ProvokingVertexModeExt = enum<VkDynamicState> 1000455019

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetProvokingVertexModeEXTDel = delegate of VkCommandBuffer * EXTProvokingVertex.VkProvokingVertexModeEXT -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> EXTProvokingVertex")
                    static let s_vkCmdSetProvokingVertexModeEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetProvokingVertexModeEXTDel> "vkCmdSetProvokingVertexModeEXT"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetProvokingVertexModeEXT = s_vkCmdSetProvokingVertexModeEXTDel
                let vkCmdSetProvokingVertexModeEXT(commandBuffer : VkCommandBuffer, provokingVertexMode : EXTProvokingVertex.VkProvokingVertexModeEXT) = Loader<unit>.vkCmdSetProvokingVertexModeEXT.Invoke(commandBuffer, provokingVertexMode)

        [<AutoOpen>]
        module ``EXTLineRasterization`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline LineRasterizationModeExt = enum<VkDynamicState> 1000455020
                      static member inline LineStippleEnableExt = enum<VkDynamicState> 1000455021

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetLineRasterizationModeEXTDel = delegate of VkCommandBuffer * EXTLineRasterization.VkLineRasterizationModeEXT -> unit
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetLineStippleEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> EXTLineRasterization")
                    static let s_vkCmdSetLineRasterizationModeEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetLineRasterizationModeEXTDel> "vkCmdSetLineRasterizationModeEXT"
                    static let s_vkCmdSetLineStippleEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetLineStippleEnableEXTDel> "vkCmdSetLineStippleEnableEXT"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetLineRasterizationModeEXT = s_vkCmdSetLineRasterizationModeEXTDel
                    static member vkCmdSetLineStippleEnableEXT = s_vkCmdSetLineStippleEnableEXTDel
                let vkCmdSetLineRasterizationModeEXT(commandBuffer : VkCommandBuffer, lineRasterizationMode : EXTLineRasterization.VkLineRasterizationModeEXT) = Loader<unit>.vkCmdSetLineRasterizationModeEXT.Invoke(commandBuffer, lineRasterizationMode)
                let vkCmdSetLineStippleEnableEXT(commandBuffer : VkCommandBuffer, stippledLineEnable : VkBool32) = Loader<unit>.vkCmdSetLineStippleEnableEXT.Invoke(commandBuffer, stippledLineEnable)

        [<AutoOpen>]
        module ``EXTDepthClipControl`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline DepthClipNegativeOneToOneExt = enum<VkDynamicState> 1000455022

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetDepthClipNegativeOneToOneEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> EXTDepthClipControl")
                    static let s_vkCmdSetDepthClipNegativeOneToOneEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthClipNegativeOneToOneEXTDel> "vkCmdSetDepthClipNegativeOneToOneEXT"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetDepthClipNegativeOneToOneEXT = s_vkCmdSetDepthClipNegativeOneToOneEXTDel
                let vkCmdSetDepthClipNegativeOneToOneEXT(commandBuffer : VkCommandBuffer, negativeOneToOne : VkBool32) = Loader<unit>.vkCmdSetDepthClipNegativeOneToOneEXT.Invoke(commandBuffer, negativeOneToOne)

        [<AutoOpen>]
        module ``NVClipSpaceWScaling`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline ViewportWScalingEnableNv = enum<VkDynamicState> 1000455023

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetViewportWScalingEnableNVDel = delegate of VkCommandBuffer * VkBool32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> NVClipSpaceWScaling")
                    static let s_vkCmdSetViewportWScalingEnableNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetViewportWScalingEnableNVDel> "vkCmdSetViewportWScalingEnableNV"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetViewportWScalingEnableNV = s_vkCmdSetViewportWScalingEnableNVDel
                let vkCmdSetViewportWScalingEnableNV(commandBuffer : VkCommandBuffer, viewportWScalingEnable : VkBool32) = Loader<unit>.vkCmdSetViewportWScalingEnableNV.Invoke(commandBuffer, viewportWScalingEnable)

        [<AutoOpen>]
        module ``NVViewportSwizzle`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline ViewportSwizzleNv = enum<VkDynamicState> 1000455024

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetViewportSwizzleNVDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<NVViewportSwizzle.VkViewportSwizzleNV> -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> NVViewportSwizzle")
                    static let s_vkCmdSetViewportSwizzleNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetViewportSwizzleNVDel> "vkCmdSetViewportSwizzleNV"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetViewportSwizzleNV = s_vkCmdSetViewportSwizzleNVDel
                let vkCmdSetViewportSwizzleNV(commandBuffer : VkCommandBuffer, firstViewport : uint32, viewportCount : uint32, pViewportSwizzles : nativeptr<NVViewportSwizzle.VkViewportSwizzleNV>) = Loader<unit>.vkCmdSetViewportSwizzleNV.Invoke(commandBuffer, firstViewport, viewportCount, pViewportSwizzles)

        [<AutoOpen>]
        module ``NVFragmentCoverageToColor`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline CoverageToColorEnableNv = enum<VkDynamicState> 1000455025
                      static member inline CoverageToColorLocationNv = enum<VkDynamicState> 1000455026

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetCoverageToColorEnableNVDel = delegate of VkCommandBuffer * VkBool32 -> unit
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetCoverageToColorLocationNVDel = delegate of VkCommandBuffer * uint32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> NVFragmentCoverageToColor")
                    static let s_vkCmdSetCoverageToColorEnableNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetCoverageToColorEnableNVDel> "vkCmdSetCoverageToColorEnableNV"
                    static let s_vkCmdSetCoverageToColorLocationNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetCoverageToColorLocationNVDel> "vkCmdSetCoverageToColorLocationNV"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetCoverageToColorEnableNV = s_vkCmdSetCoverageToColorEnableNVDel
                    static member vkCmdSetCoverageToColorLocationNV = s_vkCmdSetCoverageToColorLocationNVDel
                let vkCmdSetCoverageToColorEnableNV(commandBuffer : VkCommandBuffer, coverageToColorEnable : VkBool32) = Loader<unit>.vkCmdSetCoverageToColorEnableNV.Invoke(commandBuffer, coverageToColorEnable)
                let vkCmdSetCoverageToColorLocationNV(commandBuffer : VkCommandBuffer, coverageToColorLocation : uint32) = Loader<unit>.vkCmdSetCoverageToColorLocationNV.Invoke(commandBuffer, coverageToColorLocation)

        [<AutoOpen>]
        module ``NVFramebufferMixedSamples`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline CoverageModulationModeNv = enum<VkDynamicState> 1000455027
                      static member inline CoverageModulationTableEnableNv = enum<VkDynamicState> 1000455028
                      static member inline CoverageModulationTableNv = enum<VkDynamicState> 1000455029

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetCoverageModulationModeNVDel = delegate of VkCommandBuffer * NVFramebufferMixedSamples.VkCoverageModulationModeNV -> unit
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetCoverageModulationTableEnableNVDel = delegate of VkCommandBuffer * VkBool32 -> unit
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetCoverageModulationTableNVDel = delegate of VkCommandBuffer * uint32 * nativeptr<float32> -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> NVFramebufferMixedSamples")
                    static let s_vkCmdSetCoverageModulationModeNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetCoverageModulationModeNVDel> "vkCmdSetCoverageModulationModeNV"
                    static let s_vkCmdSetCoverageModulationTableEnableNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetCoverageModulationTableEnableNVDel> "vkCmdSetCoverageModulationTableEnableNV"
                    static let s_vkCmdSetCoverageModulationTableNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetCoverageModulationTableNVDel> "vkCmdSetCoverageModulationTableNV"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetCoverageModulationModeNV = s_vkCmdSetCoverageModulationModeNVDel
                    static member vkCmdSetCoverageModulationTableEnableNV = s_vkCmdSetCoverageModulationTableEnableNVDel
                    static member vkCmdSetCoverageModulationTableNV = s_vkCmdSetCoverageModulationTableNVDel
                let vkCmdSetCoverageModulationModeNV(commandBuffer : VkCommandBuffer, coverageModulationMode : NVFramebufferMixedSamples.VkCoverageModulationModeNV) = Loader<unit>.vkCmdSetCoverageModulationModeNV.Invoke(commandBuffer, coverageModulationMode)
                let vkCmdSetCoverageModulationTableEnableNV(commandBuffer : VkCommandBuffer, coverageModulationTableEnable : VkBool32) = Loader<unit>.vkCmdSetCoverageModulationTableEnableNV.Invoke(commandBuffer, coverageModulationTableEnable)
                let vkCmdSetCoverageModulationTableNV(commandBuffer : VkCommandBuffer, coverageModulationTableCount : uint32, pCoverageModulationTable : nativeptr<float32>) = Loader<unit>.vkCmdSetCoverageModulationTableNV.Invoke(commandBuffer, coverageModulationTableCount, pCoverageModulationTable)

        [<AutoOpen>]
        module ``NVShadingRateImage`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline ShadingRateImageEnableNv = enum<VkDynamicState> 1000455030

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetShadingRateImageEnableNVDel = delegate of VkCommandBuffer * VkBool32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> NVShadingRateImage")
                    static let s_vkCmdSetShadingRateImageEnableNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetShadingRateImageEnableNVDel> "vkCmdSetShadingRateImageEnableNV"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetShadingRateImageEnableNV = s_vkCmdSetShadingRateImageEnableNVDel
                let vkCmdSetShadingRateImageEnableNV(commandBuffer : VkCommandBuffer, shadingRateImageEnable : VkBool32) = Loader<unit>.vkCmdSetShadingRateImageEnableNV.Invoke(commandBuffer, shadingRateImageEnable)

        [<AutoOpen>]
        module ``NVRepresentativeFragmentTest`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline RepresentativeFragmentTestEnableNv = enum<VkDynamicState> 1000455031

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetRepresentativeFragmentTestEnableNVDel = delegate of VkCommandBuffer * VkBool32 -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> NVRepresentativeFragmentTest")
                    static let s_vkCmdSetRepresentativeFragmentTestEnableNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetRepresentativeFragmentTestEnableNVDel> "vkCmdSetRepresentativeFragmentTestEnableNV"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetRepresentativeFragmentTestEnableNV = s_vkCmdSetRepresentativeFragmentTestEnableNVDel
                let vkCmdSetRepresentativeFragmentTestEnableNV(commandBuffer : VkCommandBuffer, representativeFragmentTestEnable : VkBool32) = Loader<unit>.vkCmdSetRepresentativeFragmentTestEnableNV.Invoke(commandBuffer, representativeFragmentTestEnable)

        [<AutoOpen>]
        module ``NVCoverageReductionMode`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkDynamicState with
                      static member inline CoverageReductionModeNv = enum<VkDynamicState> 1000455032

            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetCoverageReductionModeNVDel = delegate of VkCommandBuffer * NVCoverageReductionMode.VkCoverageReductionModeNV -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState3 -> NVCoverageReductionMode")
                    static let s_vkCmdSetCoverageReductionModeNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetCoverageReductionModeNVDel> "vkCmdSetCoverageReductionModeNV"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetCoverageReductionModeNV = s_vkCmdSetCoverageReductionModeNVDel
                let vkCmdSetCoverageReductionModeNV(commandBuffer : VkCommandBuffer, coverageReductionMode : NVCoverageReductionMode.VkCoverageReductionModeNV) = Loader<unit>.vkCmdSetCoverageReductionModeNV.Invoke(commandBuffer, coverageReductionMode)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTSubpassMergeFeedback =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_subpass_merge_feedback"
        let Number = 459

        type VkSubpassMergeStatusEXT =
            | Merged = 0
            | Disallowed = 1
            | NotMergedSideEffects = 2
            | NotMergedSamplesMismatch = 3
            | NotMergedViewsMismatch = 4
            | NotMergedAliasing = 5
            | NotMergedDependencies = 6
            | NotMergedIncompatibleInputAttachment = 7
            | NotMergedTooManyAttachments = 8
            | NotMergedInsufficientStorage = 9
            | NotMergedDepthStencilCount = 10
            | NotMergedResolveAttachmentReuse = 11
            | NotMergedSingleSubpass = 12
            | NotMergedUnspecified = 13


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public subpassMergeFeedback : VkBool32

                new(pNext: nativeint, subpassMergeFeedback: VkBool32) =
                    {
                        sType = 1000458000u
                        pNext = pNext
                        subpassMergeFeedback = subpassMergeFeedback
                    }

                new(subpassMergeFeedback: VkBool32) =
                    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(Unchecked.defaultof<nativeint>, subpassMergeFeedback)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.subpassMergeFeedback = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "subpassMergeFeedback = %A" x.subpassMergeFeedback
                    ] |> sprintf "VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderPassCreationControlEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public disallowMerging : VkBool32

                new(pNext: nativeint, disallowMerging: VkBool32) =
                    {
                        sType = 1000458001u
                        pNext = pNext
                        disallowMerging = disallowMerging
                    }

                new(disallowMerging: VkBool32) =
                    VkRenderPassCreationControlEXT(Unchecked.defaultof<nativeint>, disallowMerging)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.disallowMerging = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkRenderPassCreationControlEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "disallowMerging = %A" x.disallowMerging
                    ] |> sprintf "VkRenderPassCreationControlEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderPassCreationFeedbackInfoEXT =
            struct
                val mutable public postMergeSubpassCount : uint32

                new(postMergeSubpassCount: uint32) =
                    {
                        postMergeSubpassCount = postMergeSubpassCount
                    }

                member x.IsEmpty =
                    x.postMergeSubpassCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkRenderPassCreationFeedbackInfoEXT(Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "postMergeSubpassCount = %A" x.postMergeSubpassCount
                    ] |> sprintf "VkRenderPassCreationFeedbackInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderPassCreationFeedbackCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pRenderPassFeedback : nativeptr<VkRenderPassCreationFeedbackInfoEXT>

                new(pNext: nativeint, pRenderPassFeedback: nativeptr<VkRenderPassCreationFeedbackInfoEXT>) =
                    {
                        sType = 1000458002u
                        pNext = pNext
                        pRenderPassFeedback = pRenderPassFeedback
                    }

                new(pRenderPassFeedback: nativeptr<VkRenderPassCreationFeedbackInfoEXT>) =
                    VkRenderPassCreationFeedbackCreateInfoEXT(Unchecked.defaultof<nativeint>, pRenderPassFeedback)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pRenderPassFeedback = Unchecked.defaultof<nativeptr<VkRenderPassCreationFeedbackInfoEXT>>

                static member Empty =
                    VkRenderPassCreationFeedbackCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkRenderPassCreationFeedbackInfoEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pRenderPassFeedback = %A" x.pRenderPassFeedback
                    ] |> sprintf "VkRenderPassCreationFeedbackCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderPassSubpassFeedbackInfoEXT =
            struct
                val mutable public subpassMergeStatus : VkSubpassMergeStatusEXT
                val mutable public description : String256
                val mutable public postMergeIndex : uint32

                new(subpassMergeStatus: VkSubpassMergeStatusEXT, description: String256, postMergeIndex: uint32) =
                    {
                        subpassMergeStatus = subpassMergeStatus
                        description = description
                        postMergeIndex = postMergeIndex
                    }

                member x.IsEmpty =
                    x.subpassMergeStatus = Unchecked.defaultof<VkSubpassMergeStatusEXT> && x.description = Unchecked.defaultof<String256> && x.postMergeIndex = Unchecked.defaultof<uint32>

                static member Empty =
                    VkRenderPassSubpassFeedbackInfoEXT(Unchecked.defaultof<VkSubpassMergeStatusEXT>, Unchecked.defaultof<String256>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "subpassMergeStatus = %A" x.subpassMergeStatus
                        sprintf "description = %A" x.description
                        sprintf "postMergeIndex = %A" x.postMergeIndex
                    ] |> sprintf "VkRenderPassSubpassFeedbackInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderPassSubpassFeedbackCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pSubpassFeedback : nativeptr<VkRenderPassSubpassFeedbackInfoEXT>

                new(pNext: nativeint, pSubpassFeedback: nativeptr<VkRenderPassSubpassFeedbackInfoEXT>) =
                    {
                        sType = 1000458003u
                        pNext = pNext
                        pSubpassFeedback = pSubpassFeedback
                    }

                new(pSubpassFeedback: nativeptr<VkRenderPassSubpassFeedbackInfoEXT>) =
                    VkRenderPassSubpassFeedbackCreateInfoEXT(Unchecked.defaultof<nativeint>, pSubpassFeedback)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pSubpassFeedback = Unchecked.defaultof<nativeptr<VkRenderPassSubpassFeedbackInfoEXT>>

                static member Empty =
                    VkRenderPassSubpassFeedbackCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkRenderPassSubpassFeedbackInfoEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pSubpassFeedback = %A" x.pSubpassFeedback
                    ] |> sprintf "VkRenderPassSubpassFeedbackCreateInfoEXT { %s }"
            end



    module LUNARGDirectDriverLoading =
        let Type = ExtensionType.Instance
        let Name = "VK_LUNARG_direct_driver_loading"
        let Number = 460

        type PFN_vkGetInstanceProcAddrLUNARG = nativeint

        type VkDirectDriverLoadingModeLUNARG =
            | Exclusive = 0
            | Inclusive = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDirectDriverLoadingInfoLUNARG =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkDirectDriverLoadingFlagsLUNARG
                val mutable public pfnGetInstanceProcAddr : PFN_vkGetInstanceProcAddrLUNARG

                new(pNext: nativeint, flags: VkDirectDriverLoadingFlagsLUNARG, pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddrLUNARG) =
                    {
                        sType = 1000459000u
                        pNext = pNext
                        flags = flags
                        pfnGetInstanceProcAddr = pfnGetInstanceProcAddr
                    }

                new(flags: VkDirectDriverLoadingFlagsLUNARG, pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddrLUNARG) =
                    VkDirectDriverLoadingInfoLUNARG(Unchecked.defaultof<nativeint>, flags, pfnGetInstanceProcAddr)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDirectDriverLoadingFlagsLUNARG> && x.pfnGetInstanceProcAddr = Unchecked.defaultof<PFN_vkGetInstanceProcAddrLUNARG>

                static member Empty =
                    VkDirectDriverLoadingInfoLUNARG(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDirectDriverLoadingFlagsLUNARG>, Unchecked.defaultof<PFN_vkGetInstanceProcAddrLUNARG>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "pfnGetInstanceProcAddr = %A" x.pfnGetInstanceProcAddr
                    ] |> sprintf "VkDirectDriverLoadingInfoLUNARG { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDirectDriverLoadingListLUNARG =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public mode : VkDirectDriverLoadingModeLUNARG
                val mutable public driverCount : uint32
                val mutable public pDrivers : nativeptr<VkDirectDriverLoadingInfoLUNARG>

                new(pNext: nativeint, mode: VkDirectDriverLoadingModeLUNARG, driverCount: uint32, pDrivers: nativeptr<VkDirectDriverLoadingInfoLUNARG>) =
                    {
                        sType = 1000459001u
                        pNext = pNext
                        mode = mode
                        driverCount = driverCount
                        pDrivers = pDrivers
                    }

                new(mode: VkDirectDriverLoadingModeLUNARG, driverCount: uint32, pDrivers: nativeptr<VkDirectDriverLoadingInfoLUNARG>) =
                    VkDirectDriverLoadingListLUNARG(Unchecked.defaultof<nativeint>, mode, driverCount, pDrivers)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.mode = Unchecked.defaultof<VkDirectDriverLoadingModeLUNARG> && x.driverCount = Unchecked.defaultof<uint32> && x.pDrivers = Unchecked.defaultof<nativeptr<VkDirectDriverLoadingInfoLUNARG>>

                static member Empty =
                    VkDirectDriverLoadingListLUNARG(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDirectDriverLoadingModeLUNARG>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDirectDriverLoadingInfoLUNARG>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "mode = %A" x.mode
                        sprintf "driverCount = %A" x.driverCount
                        sprintf "pDrivers = %A" x.pDrivers
                    ] |> sprintf "VkDirectDriverLoadingListLUNARG { %s }"
            end



    /// Requires ((KHRGetPhysicalDeviceProperties2 | Vulkan11), EXTPipelineCreationCacheControl) | Vulkan13.
    module EXTShaderModuleIdentifier =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_shader_module_identifier"
        let Number = 463

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderModuleIdentifier : VkBool32

                new(pNext: nativeint, shaderModuleIdentifier: VkBool32) =
                    {
                        sType = 1000462000u
                        pNext = pNext
                        shaderModuleIdentifier = shaderModuleIdentifier
                    }

                new(shaderModuleIdentifier: VkBool32) =
                    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(Unchecked.defaultof<nativeint>, shaderModuleIdentifier)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderModuleIdentifier = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderModuleIdentifier = %A" x.shaderModuleIdentifier
                    ] |> sprintf "VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderModuleIdentifierAlgorithmUUID : Guid

                new(pNext: nativeint, shaderModuleIdentifierAlgorithmUUID: Guid) =
                    {
                        sType = 1000462001u
                        pNext = pNext
                        shaderModuleIdentifierAlgorithmUUID = shaderModuleIdentifierAlgorithmUUID
                    }

                new(shaderModuleIdentifierAlgorithmUUID: Guid) =
                    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(Unchecked.defaultof<nativeint>, shaderModuleIdentifierAlgorithmUUID)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderModuleIdentifierAlgorithmUUID = Unchecked.defaultof<Guid>

                static member Empty =
                    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Guid>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderModuleIdentifierAlgorithmUUID = %A" x.shaderModuleIdentifierAlgorithmUUID
                    ] |> sprintf "VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineShaderStageModuleIdentifierCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public identifierSize : uint32
                val mutable public pIdentifier : nativeptr<byte>

                new(pNext: nativeint, identifierSize: uint32, pIdentifier: nativeptr<byte>) =
                    {
                        sType = 1000462002u
                        pNext = pNext
                        identifierSize = identifierSize
                        pIdentifier = pIdentifier
                    }

                new(identifierSize: uint32, pIdentifier: nativeptr<byte>) =
                    VkPipelineShaderStageModuleIdentifierCreateInfoEXT(Unchecked.defaultof<nativeint>, identifierSize, pIdentifier)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.identifierSize = Unchecked.defaultof<uint32> && x.pIdentifier = Unchecked.defaultof<nativeptr<byte>>

                static member Empty =
                    VkPipelineShaderStageModuleIdentifierCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<byte>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "identifierSize = %A" x.identifierSize
                        sprintf "pIdentifier = %A" x.pIdentifier
                    ] |> sprintf "VkPipelineShaderStageModuleIdentifierCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkShaderModuleIdentifierEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public identifierSize : uint32
                val mutable public identifier : byte_32

                new(pNext: nativeint, identifierSize: uint32, identifier: byte_32) =
                    {
                        sType = 1000462003u
                        pNext = pNext
                        identifierSize = identifierSize
                        identifier = identifier
                    }

                new(identifierSize: uint32, identifier: byte_32) =
                    VkShaderModuleIdentifierEXT(Unchecked.defaultof<nativeint>, identifierSize, identifier)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.identifierSize = Unchecked.defaultof<uint32> && x.identifier = Unchecked.defaultof<byte_32>

                static member Empty =
                    VkShaderModuleIdentifierEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<byte_32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "identifierSize = %A" x.identifierSize
                        sprintf "identifier = %A" x.identifier
                    ] |> sprintf "VkShaderModuleIdentifierEXT { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetShaderModuleIdentifierEXTDel = delegate of VkDevice * VkShaderModule * nativeptr<VkShaderModuleIdentifierEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetShaderModuleCreateInfoIdentifierEXTDel = delegate of VkDevice * nativeptr<VkShaderModuleCreateInfo> * nativeptr<VkShaderModuleIdentifierEXT> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTShaderModuleIdentifier")
                static let s_vkGetShaderModuleIdentifierEXTDel = VkRaw.vkImportInstanceDelegate<VkGetShaderModuleIdentifierEXTDel> "vkGetShaderModuleIdentifierEXT"
                static let s_vkGetShaderModuleCreateInfoIdentifierEXTDel = VkRaw.vkImportInstanceDelegate<VkGetShaderModuleCreateInfoIdentifierEXTDel> "vkGetShaderModuleCreateInfoIdentifierEXT"
                static do Report.End(3) |> ignore
                static member vkGetShaderModuleIdentifierEXT = s_vkGetShaderModuleIdentifierEXTDel
                static member vkGetShaderModuleCreateInfoIdentifierEXT = s_vkGetShaderModuleCreateInfoIdentifierEXTDel
            let vkGetShaderModuleIdentifierEXT(device : VkDevice, shaderModule : VkShaderModule, pIdentifier : nativeptr<VkShaderModuleIdentifierEXT>) = Loader<unit>.vkGetShaderModuleIdentifierEXT.Invoke(device, shaderModule, pIdentifier)
            let vkGetShaderModuleCreateInfoIdentifierEXT(device : VkDevice, pCreateInfo : nativeptr<VkShaderModuleCreateInfo>, pIdentifier : nativeptr<VkShaderModuleIdentifierEXT>) = Loader<unit>.vkGetShaderModuleCreateInfoIdentifierEXT.Invoke(device, pCreateInfo, pIdentifier)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTRasterizationOrderAttachmentAccess =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_rasterization_order_attachment_access"
        let Number = 464


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public rasterizationOrderColorAttachmentAccess : VkBool32
                val mutable public rasterizationOrderDepthAttachmentAccess : VkBool32
                val mutable public rasterizationOrderStencilAttachmentAccess : VkBool32

                new(pNext: nativeint, rasterizationOrderColorAttachmentAccess: VkBool32, rasterizationOrderDepthAttachmentAccess: VkBool32, rasterizationOrderStencilAttachmentAccess: VkBool32) =
                    {
                        sType = 1000342000u
                        pNext = pNext
                        rasterizationOrderColorAttachmentAccess = rasterizationOrderColorAttachmentAccess
                        rasterizationOrderDepthAttachmentAccess = rasterizationOrderDepthAttachmentAccess
                        rasterizationOrderStencilAttachmentAccess = rasterizationOrderStencilAttachmentAccess
                    }

                new(rasterizationOrderColorAttachmentAccess: VkBool32, rasterizationOrderDepthAttachmentAccess: VkBool32, rasterizationOrderStencilAttachmentAccess: VkBool32) =
                    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(Unchecked.defaultof<nativeint>, rasterizationOrderColorAttachmentAccess, rasterizationOrderDepthAttachmentAccess, rasterizationOrderStencilAttachmentAccess)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.rasterizationOrderColorAttachmentAccess = Unchecked.defaultof<VkBool32> && x.rasterizationOrderDepthAttachmentAccess = Unchecked.defaultof<VkBool32> && x.rasterizationOrderStencilAttachmentAccess = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "rasterizationOrderColorAttachmentAccess = %A" x.rasterizationOrderColorAttachmentAccess
                        sprintf "rasterizationOrderDepthAttachmentAccess = %A" x.rasterizationOrderDepthAttachmentAccess
                        sprintf "rasterizationOrderStencilAttachmentAccess = %A" x.rasterizationOrderStencilAttachmentAccess
                    ] |> sprintf "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineColorBlendStateCreateFlags with
                  static member inline RasterizationOrderAttachmentAccessBitExt = enum<VkPipelineColorBlendStateCreateFlags> 0x00000001
             type VkPipelineDepthStencilStateCreateFlags with
                  static member inline RasterizationOrderAttachmentDepthAccessBitExt = enum<VkPipelineDepthStencilStateCreateFlags> 0x00000001
                  static member inline RasterizationOrderAttachmentStencilAccessBitExt = enum<VkPipelineDepthStencilStateCreateFlags> 0x00000002
             type VkSubpassDescriptionFlags with
                  static member inline RasterizationOrderAttachmentColorAccessBitExt = enum<VkSubpassDescriptionFlags> 0x00000010
                  static member inline RasterizationOrderAttachmentDepthAccessBitExt = enum<VkSubpassDescriptionFlags> 0x00000020
                  static member inline RasterizationOrderAttachmentStencilAccessBitExt = enum<VkSubpassDescriptionFlags> 0x00000040


    /// Requires ((KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRFormatFeatureFlags2, KHRSynchronization2) | Vulkan13.
    module NVOpticalFlow =
        let Type = ExtensionType.Device
        let Name = "VK_NV_optical_flow"
        let Number = 465


        [<StructLayout(LayoutKind.Sequential)>]
        type VkOpticalFlowSessionNV =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkOpticalFlowSessionNV(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<Flags>]
        type VkOpticalFlowUsageFlagsNV =
            | All = 31
            | Unknown = 0
            | InputBit = 0x00000001
            | OutputBit = 0x00000002
            | HintBit = 0x00000004
            | CostBit = 0x00000008
            | GlobalFlowBit = 0x00000010

        [<Flags>]
        type VkOpticalFlowGridSizeFlagsNV =
            | All = 15
            | Unknown = 0
            | D1x1Bit = 0x00000001
            | D2x2Bit = 0x00000002
            | D4x4Bit = 0x00000004
            | D8x8Bit = 0x00000008

        type VkOpticalFlowPerformanceLevelNV =
            | Unknown = 0
            | Slow = 1
            | Medium = 2
            | Fast = 3

        type VkOpticalFlowSessionBindingPointNV =
            | Unknown = 0
            | Input = 1
            | Reference = 2
            | Hint = 3
            | FlowVector = 4
            | BackwardFlowVector = 5
            | Cost = 6
            | BackwardCost = 7
            | GlobalFlow = 8

        [<Flags>]
        type VkOpticalFlowSessionCreateFlagsNV =
            | All = 31
            | None = 0
            | EnableHintBit = 0x00000001
            | EnableCostBit = 0x00000002
            | EnableGlobalFlowBit = 0x00000004
            | AllowRegionsBit = 0x00000008
            | BothDirectionsBit = 0x00000010

        [<Flags>]
        type VkOpticalFlowExecuteFlagsNV =
            | All = 1
            | None = 0
            | DisableTemporalHintsBit = 0x00000001


        [<StructLayout(LayoutKind.Sequential)>]
        type VkOpticalFlowExecuteInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkOpticalFlowExecuteFlagsNV
                val mutable public regionCount : uint32
                val mutable public pRegions : nativeptr<VkRect2D>

                new(pNext: nativeint, flags: VkOpticalFlowExecuteFlagsNV, regionCount: uint32, pRegions: nativeptr<VkRect2D>) =
                    {
                        sType = 1000464005u
                        pNext = pNext
                        flags = flags
                        regionCount = regionCount
                        pRegions = pRegions
                    }

                new(flags: VkOpticalFlowExecuteFlagsNV, regionCount: uint32, pRegions: nativeptr<VkRect2D>) =
                    VkOpticalFlowExecuteInfoNV(Unchecked.defaultof<nativeint>, flags, regionCount, pRegions)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkOpticalFlowExecuteFlagsNV> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkRect2D>>

                static member Empty =
                    VkOpticalFlowExecuteInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkOpticalFlowExecuteFlagsNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRect2D>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "regionCount = %A" x.regionCount
                        sprintf "pRegions = %A" x.pRegions
                    ] |> sprintf "VkOpticalFlowExecuteInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkOpticalFlowImageFormatInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public usage : VkOpticalFlowUsageFlagsNV

                new(pNext: nativeint, usage: VkOpticalFlowUsageFlagsNV) =
                    {
                        sType = 1000464002u
                        pNext = pNext
                        usage = usage
                    }

                new(usage: VkOpticalFlowUsageFlagsNV) =
                    VkOpticalFlowImageFormatInfoNV(Unchecked.defaultof<nativeint>, usage)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.usage = Unchecked.defaultof<VkOpticalFlowUsageFlagsNV>

                static member Empty =
                    VkOpticalFlowImageFormatInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkOpticalFlowUsageFlagsNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "usage = %A" x.usage
                    ] |> sprintf "VkOpticalFlowImageFormatInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkOpticalFlowImageFormatPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public format : VkFormat

                new(pNext: nativeint, format: VkFormat) =
                    {
                        sType = 1000464003u
                        pNext = pNext
                        format = format
                    }

                new(format: VkFormat) =
                    VkOpticalFlowImageFormatPropertiesNV(Unchecked.defaultof<nativeint>, format)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat>

                static member Empty =
                    VkOpticalFlowImageFormatPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "format = %A" x.format
                    ] |> sprintf "VkOpticalFlowImageFormatPropertiesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkOpticalFlowSessionCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public width : uint32
                val mutable public height : uint32
                val mutable public imageFormat : VkFormat
                val mutable public flowVectorFormat : VkFormat
                val mutable public costFormat : VkFormat
                val mutable public outputGridSize : VkOpticalFlowGridSizeFlagsNV
                val mutable public hintGridSize : VkOpticalFlowGridSizeFlagsNV
                val mutable public performanceLevel : VkOpticalFlowPerformanceLevelNV
                val mutable public flags : VkOpticalFlowSessionCreateFlagsNV

                new(pNext: nativeint, width: uint32, height: uint32, imageFormat: VkFormat, flowVectorFormat: VkFormat, costFormat: VkFormat, outputGridSize: VkOpticalFlowGridSizeFlagsNV, hintGridSize: VkOpticalFlowGridSizeFlagsNV, performanceLevel: VkOpticalFlowPerformanceLevelNV, flags: VkOpticalFlowSessionCreateFlagsNV) =
                    {
                        sType = 1000464004u
                        pNext = pNext
                        width = width
                        height = height
                        imageFormat = imageFormat
                        flowVectorFormat = flowVectorFormat
                        costFormat = costFormat
                        outputGridSize = outputGridSize
                        hintGridSize = hintGridSize
                        performanceLevel = performanceLevel
                        flags = flags
                    }

                new(width: uint32, height: uint32, imageFormat: VkFormat, flowVectorFormat: VkFormat, costFormat: VkFormat, outputGridSize: VkOpticalFlowGridSizeFlagsNV, hintGridSize: VkOpticalFlowGridSizeFlagsNV, performanceLevel: VkOpticalFlowPerformanceLevelNV, flags: VkOpticalFlowSessionCreateFlagsNV) =
                    VkOpticalFlowSessionCreateInfoNV(Unchecked.defaultof<nativeint>, width, height, imageFormat, flowVectorFormat, costFormat, outputGridSize, hintGridSize, performanceLevel, flags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32> && x.imageFormat = Unchecked.defaultof<VkFormat> && x.flowVectorFormat = Unchecked.defaultof<VkFormat> && x.costFormat = Unchecked.defaultof<VkFormat> && x.outputGridSize = Unchecked.defaultof<VkOpticalFlowGridSizeFlagsNV> && x.hintGridSize = Unchecked.defaultof<VkOpticalFlowGridSizeFlagsNV> && x.performanceLevel = Unchecked.defaultof<VkOpticalFlowPerformanceLevelNV> && x.flags = Unchecked.defaultof<VkOpticalFlowSessionCreateFlagsNV>

                static member Empty =
                    VkOpticalFlowSessionCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkOpticalFlowGridSizeFlagsNV>, Unchecked.defaultof<VkOpticalFlowGridSizeFlagsNV>, Unchecked.defaultof<VkOpticalFlowPerformanceLevelNV>, Unchecked.defaultof<VkOpticalFlowSessionCreateFlagsNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "width = %A" x.width
                        sprintf "height = %A" x.height
                        sprintf "imageFormat = %A" x.imageFormat
                        sprintf "flowVectorFormat = %A" x.flowVectorFormat
                        sprintf "costFormat = %A" x.costFormat
                        sprintf "outputGridSize = %A" x.outputGridSize
                        sprintf "hintGridSize = %A" x.hintGridSize
                        sprintf "performanceLevel = %A" x.performanceLevel
                        sprintf "flags = %A" x.flags
                    ] |> sprintf "VkOpticalFlowSessionCreateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkOpticalFlowSessionCreatePrivateDataInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public id : uint32
                val mutable public size : uint32
                val mutable public pPrivateData : nativeint

                new(pNext: nativeint, id: uint32, size: uint32, pPrivateData: nativeint) =
                    {
                        sType = 1000464010u
                        pNext = pNext
                        id = id
                        size = size
                        pPrivateData = pPrivateData
                    }

                new(id: uint32, size: uint32, pPrivateData: nativeint) =
                    VkOpticalFlowSessionCreatePrivateDataInfoNV(Unchecked.defaultof<nativeint>, id, size, pPrivateData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.id = Unchecked.defaultof<uint32> && x.size = Unchecked.defaultof<uint32> && x.pPrivateData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkOpticalFlowSessionCreatePrivateDataInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "id = %A" x.id
                        sprintf "size = %A" x.size
                        sprintf "pPrivateData = %A" x.pPrivateData
                    ] |> sprintf "VkOpticalFlowSessionCreatePrivateDataInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceOpticalFlowFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public opticalFlow : VkBool32

                new(pNext: nativeint, opticalFlow: VkBool32) =
                    {
                        sType = 1000464000u
                        pNext = pNext
                        opticalFlow = opticalFlow
                    }

                new(opticalFlow: VkBool32) =
                    VkPhysicalDeviceOpticalFlowFeaturesNV(Unchecked.defaultof<nativeint>, opticalFlow)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.opticalFlow = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceOpticalFlowFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "opticalFlow = %A" x.opticalFlow
                    ] |> sprintf "VkPhysicalDeviceOpticalFlowFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceOpticalFlowPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public supportedOutputGridSizes : VkOpticalFlowGridSizeFlagsNV
                val mutable public supportedHintGridSizes : VkOpticalFlowGridSizeFlagsNV
                val mutable public hintSupported : VkBool32
                val mutable public costSupported : VkBool32
                val mutable public bidirectionalFlowSupported : VkBool32
                val mutable public globalFlowSupported : VkBool32
                val mutable public minWidth : uint32
                val mutable public minHeight : uint32
                val mutable public maxWidth : uint32
                val mutable public maxHeight : uint32
                val mutable public maxNumRegionsOfInterest : uint32

                new(pNext: nativeint, supportedOutputGridSizes: VkOpticalFlowGridSizeFlagsNV, supportedHintGridSizes: VkOpticalFlowGridSizeFlagsNV, hintSupported: VkBool32, costSupported: VkBool32, bidirectionalFlowSupported: VkBool32, globalFlowSupported: VkBool32, minWidth: uint32, minHeight: uint32, maxWidth: uint32, maxHeight: uint32, maxNumRegionsOfInterest: uint32) =
                    {
                        sType = 1000464001u
                        pNext = pNext
                        supportedOutputGridSizes = supportedOutputGridSizes
                        supportedHintGridSizes = supportedHintGridSizes
                        hintSupported = hintSupported
                        costSupported = costSupported
                        bidirectionalFlowSupported = bidirectionalFlowSupported
                        globalFlowSupported = globalFlowSupported
                        minWidth = minWidth
                        minHeight = minHeight
                        maxWidth = maxWidth
                        maxHeight = maxHeight
                        maxNumRegionsOfInterest = maxNumRegionsOfInterest
                    }

                new(supportedOutputGridSizes: VkOpticalFlowGridSizeFlagsNV, supportedHintGridSizes: VkOpticalFlowGridSizeFlagsNV, hintSupported: VkBool32, costSupported: VkBool32, bidirectionalFlowSupported: VkBool32, globalFlowSupported: VkBool32, minWidth: uint32, minHeight: uint32, maxWidth: uint32, maxHeight: uint32, maxNumRegionsOfInterest: uint32) =
                    VkPhysicalDeviceOpticalFlowPropertiesNV(Unchecked.defaultof<nativeint>, supportedOutputGridSizes, supportedHintGridSizes, hintSupported, costSupported, bidirectionalFlowSupported, globalFlowSupported, minWidth, minHeight, maxWidth, maxHeight, maxNumRegionsOfInterest)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.supportedOutputGridSizes = Unchecked.defaultof<VkOpticalFlowGridSizeFlagsNV> && x.supportedHintGridSizes = Unchecked.defaultof<VkOpticalFlowGridSizeFlagsNV> && x.hintSupported = Unchecked.defaultof<VkBool32> && x.costSupported = Unchecked.defaultof<VkBool32> && x.bidirectionalFlowSupported = Unchecked.defaultof<VkBool32> && x.globalFlowSupported = Unchecked.defaultof<VkBool32> && x.minWidth = Unchecked.defaultof<uint32> && x.minHeight = Unchecked.defaultof<uint32> && x.maxWidth = Unchecked.defaultof<uint32> && x.maxHeight = Unchecked.defaultof<uint32> && x.maxNumRegionsOfInterest = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceOpticalFlowPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkOpticalFlowGridSizeFlagsNV>, Unchecked.defaultof<VkOpticalFlowGridSizeFlagsNV>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "supportedOutputGridSizes = %A" x.supportedOutputGridSizes
                        sprintf "supportedHintGridSizes = %A" x.supportedHintGridSizes
                        sprintf "hintSupported = %A" x.hintSupported
                        sprintf "costSupported = %A" x.costSupported
                        sprintf "bidirectionalFlowSupported = %A" x.bidirectionalFlowSupported
                        sprintf "globalFlowSupported = %A" x.globalFlowSupported
                        sprintf "minWidth = %A" x.minWidth
                        sprintf "minHeight = %A" x.minHeight
                        sprintf "maxWidth = %A" x.maxWidth
                        sprintf "maxHeight = %A" x.maxHeight
                        sprintf "maxNumRegionsOfInterest = %A" x.maxNumRegionsOfInterest
                    ] |> sprintf "VkPhysicalDeviceOpticalFlowPropertiesNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkAccessFlags2 with
                  static member inline Access2OpticalFlowReadBitNv = enum<Vulkan13.VkAccessFlags2> 0x00000400
                  static member inline Access2OpticalFlowWriteBitNv = enum<Vulkan13.VkAccessFlags2> 0x00000800
             type VkFormat with
                  static member inline R16g16Sfixed5Nv = enum<VkFormat> 1000464000
             type Vulkan13.VkFormatFeatureFlags2 with
                  static member inline FormatFeature2OpticalFlowImageBitNv = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000100
                  static member inline FormatFeature2OpticalFlowVectorBitNv = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000200
                  static member inline FormatFeature2OpticalFlowCostBitNv = enum<Vulkan13.VkFormatFeatureFlags2> 0x00000400
             type VkObjectType with
                  static member inline OpticalFlowSessionNv = enum<VkObjectType> 1000464000
             type Vulkan13.VkPipelineStageFlags2 with
                  static member inline PipelineStage2OpticalFlowBitNv = enum<Vulkan13.VkPipelineStageFlags2> 0x20000000
             type VkQueueFlags with
                  static member inline OpticalFlowBitNv = enum<VkQueueFlags> 0x00000100

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceOpticalFlowImageFormatsNVDel = delegate of VkPhysicalDevice * nativeptr<VkOpticalFlowImageFormatInfoNV> * nativeptr<uint32> * nativeptr<VkOpticalFlowImageFormatPropertiesNV> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateOpticalFlowSessionNVDel = delegate of VkDevice * nativeptr<VkOpticalFlowSessionCreateInfoNV> * nativeptr<VkAllocationCallbacks> * nativeptr<VkOpticalFlowSessionNV> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyOpticalFlowSessionNVDel = delegate of VkDevice * VkOpticalFlowSessionNV * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkBindOpticalFlowSessionImageNVDel = delegate of VkDevice * VkOpticalFlowSessionNV * VkOpticalFlowSessionBindingPointNV * VkImageView * VkImageLayout -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdOpticalFlowExecuteNVDel = delegate of VkCommandBuffer * VkOpticalFlowSessionNV * nativeptr<VkOpticalFlowExecuteInfoNV> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVOpticalFlow")
                static let s_vkGetPhysicalDeviceOpticalFlowImageFormatsNVDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceOpticalFlowImageFormatsNVDel> "vkGetPhysicalDeviceOpticalFlowImageFormatsNV"
                static let s_vkCreateOpticalFlowSessionNVDel = VkRaw.vkImportInstanceDelegate<VkCreateOpticalFlowSessionNVDel> "vkCreateOpticalFlowSessionNV"
                static let s_vkDestroyOpticalFlowSessionNVDel = VkRaw.vkImportInstanceDelegate<VkDestroyOpticalFlowSessionNVDel> "vkDestroyOpticalFlowSessionNV"
                static let s_vkBindOpticalFlowSessionImageNVDel = VkRaw.vkImportInstanceDelegate<VkBindOpticalFlowSessionImageNVDel> "vkBindOpticalFlowSessionImageNV"
                static let s_vkCmdOpticalFlowExecuteNVDel = VkRaw.vkImportInstanceDelegate<VkCmdOpticalFlowExecuteNVDel> "vkCmdOpticalFlowExecuteNV"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceOpticalFlowImageFormatsNV = s_vkGetPhysicalDeviceOpticalFlowImageFormatsNVDel
                static member vkCreateOpticalFlowSessionNV = s_vkCreateOpticalFlowSessionNVDel
                static member vkDestroyOpticalFlowSessionNV = s_vkDestroyOpticalFlowSessionNVDel
                static member vkBindOpticalFlowSessionImageNV = s_vkBindOpticalFlowSessionImageNVDel
                static member vkCmdOpticalFlowExecuteNV = s_vkCmdOpticalFlowExecuteNVDel
            let vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice : VkPhysicalDevice, pOpticalFlowImageFormatInfo : nativeptr<VkOpticalFlowImageFormatInfoNV>, pFormatCount : nativeptr<uint32>, pImageFormatProperties : nativeptr<VkOpticalFlowImageFormatPropertiesNV>) = Loader<unit>.vkGetPhysicalDeviceOpticalFlowImageFormatsNV.Invoke(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties)
            let vkCreateOpticalFlowSessionNV(device : VkDevice, pCreateInfo : nativeptr<VkOpticalFlowSessionCreateInfoNV>, pAllocator : nativeptr<VkAllocationCallbacks>, pSession : nativeptr<VkOpticalFlowSessionNV>) = Loader<unit>.vkCreateOpticalFlowSessionNV.Invoke(device, pCreateInfo, pAllocator, pSession)
            let vkDestroyOpticalFlowSessionNV(device : VkDevice, session : VkOpticalFlowSessionNV, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyOpticalFlowSessionNV.Invoke(device, session, pAllocator)
            let vkBindOpticalFlowSessionImageNV(device : VkDevice, session : VkOpticalFlowSessionNV, bindingPoint : VkOpticalFlowSessionBindingPointNV, view : VkImageView, layout : VkImageLayout) = Loader<unit>.vkBindOpticalFlowSessionImageNV.Invoke(device, session, bindingPoint, view, layout)
            let vkCmdOpticalFlowExecuteNV(commandBuffer : VkCommandBuffer, session : VkOpticalFlowSessionNV, pExecuteInfo : nativeptr<VkOpticalFlowExecuteInfoNV>) = Loader<unit>.vkCmdOpticalFlowExecuteNV.Invoke(commandBuffer, session, pExecuteInfo)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTLegacyDithering =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_legacy_dithering"
        let Number = 466

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceLegacyDitheringFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public legacyDithering : VkBool32

                new(pNext: nativeint, legacyDithering: VkBool32) =
                    {
                        sType = 1000465000u
                        pNext = pNext
                        legacyDithering = legacyDithering
                    }

                new(legacyDithering: VkBool32) =
                    VkPhysicalDeviceLegacyDitheringFeaturesEXT(Unchecked.defaultof<nativeint>, legacyDithering)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.legacyDithering = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceLegacyDitheringFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "legacyDithering = %A" x.legacyDithering
                    ] |> sprintf "VkPhysicalDeviceLegacyDitheringFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkSubpassDescriptionFlags with
                  static member inline EnableLegacyDitheringBitExt = enum<VkSubpassDescriptionFlags> 0x00000080


        [<AutoOpen>]
        module ``(KHRDynamicRendering | Vulkan13), (KHRMaintenance5 | Vulkan14)`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2EnableLegacyDitheringBitExt = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000004
                 type Vulkan13.VkRenderingFlags with
                      static member inline EnableLegacyDitheringBitExt = enum<Vulkan13.VkRenderingFlags> 0x00000008


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan14.
    module EXTPipelineProtectedAccess =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_pipeline_protected_access"
        let Number = 467

        type VkPhysicalDevicePipelineProtectedAccessFeaturesEXT = Vulkan14.VkPhysicalDevicePipelineProtectedAccessFeatures


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineCreateFlags with
                  static member inline NoProtectedAccessBitExt = enum<VkPipelineCreateFlags> 0x08000000
                  static member inline ProtectedAccessOnlyBitExt = enum<VkPipelineCreateFlags> 0x40000000


    /// Requires ANDROIDExternalMemoryAndroidHardwareBuffer.
    module ANDROIDExternalFormatResolve =
        let Type = ExtensionType.Device
        let Name = "VK_ANDROID_external_format_resolve"
        let Number = 469

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAndroidHardwareBufferFormatResolvePropertiesANDROID =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public colorAttachmentFormat : VkFormat

                new(pNext: nativeint, colorAttachmentFormat: VkFormat) =
                    {
                        sType = 1000468002u
                        pNext = pNext
                        colorAttachmentFormat = colorAttachmentFormat
                    }

                new(colorAttachmentFormat: VkFormat) =
                    VkAndroidHardwareBufferFormatResolvePropertiesANDROID(Unchecked.defaultof<nativeint>, colorAttachmentFormat)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.colorAttachmentFormat = Unchecked.defaultof<VkFormat>

                static member Empty =
                    VkAndroidHardwareBufferFormatResolvePropertiesANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "colorAttachmentFormat = %A" x.colorAttachmentFormat
                    ] |> sprintf "VkAndroidHardwareBufferFormatResolvePropertiesANDROID { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceExternalFormatResolveFeaturesANDROID =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public externalFormatResolve : VkBool32

                new(pNext: nativeint, externalFormatResolve: VkBool32) =
                    {
                        sType = 1000468000u
                        pNext = pNext
                        externalFormatResolve = externalFormatResolve
                    }

                new(externalFormatResolve: VkBool32) =
                    VkPhysicalDeviceExternalFormatResolveFeaturesANDROID(Unchecked.defaultof<nativeint>, externalFormatResolve)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.externalFormatResolve = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceExternalFormatResolveFeaturesANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "externalFormatResolve = %A" x.externalFormatResolve
                    ] |> sprintf "VkPhysicalDeviceExternalFormatResolveFeaturesANDROID { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceExternalFormatResolvePropertiesANDROID =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public nullColorAttachmentWithExternalFormatResolve : VkBool32
                val mutable public externalFormatResolveChromaOffsetX : Vulkan11.VkChromaLocation
                val mutable public externalFormatResolveChromaOffsetY : Vulkan11.VkChromaLocation

                new(pNext: nativeint, nullColorAttachmentWithExternalFormatResolve: VkBool32, externalFormatResolveChromaOffsetX: Vulkan11.VkChromaLocation, externalFormatResolveChromaOffsetY: Vulkan11.VkChromaLocation) =
                    {
                        sType = 1000468001u
                        pNext = pNext
                        nullColorAttachmentWithExternalFormatResolve = nullColorAttachmentWithExternalFormatResolve
                        externalFormatResolveChromaOffsetX = externalFormatResolveChromaOffsetX
                        externalFormatResolveChromaOffsetY = externalFormatResolveChromaOffsetY
                    }

                new(nullColorAttachmentWithExternalFormatResolve: VkBool32, externalFormatResolveChromaOffsetX: Vulkan11.VkChromaLocation, externalFormatResolveChromaOffsetY: Vulkan11.VkChromaLocation) =
                    VkPhysicalDeviceExternalFormatResolvePropertiesANDROID(Unchecked.defaultof<nativeint>, nullColorAttachmentWithExternalFormatResolve, externalFormatResolveChromaOffsetX, externalFormatResolveChromaOffsetY)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.nullColorAttachmentWithExternalFormatResolve = Unchecked.defaultof<VkBool32> && x.externalFormatResolveChromaOffsetX = Unchecked.defaultof<Vulkan11.VkChromaLocation> && x.externalFormatResolveChromaOffsetY = Unchecked.defaultof<Vulkan11.VkChromaLocation>

                static member Empty =
                    VkPhysicalDeviceExternalFormatResolvePropertiesANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<Vulkan11.VkChromaLocation>, Unchecked.defaultof<Vulkan11.VkChromaLocation>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "nullColorAttachmentWithExternalFormatResolve = %A" x.nullColorAttachmentWithExternalFormatResolve
                        sprintf "externalFormatResolveChromaOffsetX = %A" x.externalFormatResolveChromaOffsetX
                        sprintf "externalFormatResolveChromaOffsetY = %A" x.externalFormatResolveChromaOffsetY
                    ] |> sprintf "VkPhysicalDeviceExternalFormatResolvePropertiesANDROID { %s }"
            end



        [<AutoOpen>]
        module ``KHRDynamicRendering | Vulkan13`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan12.VkResolveModeFlags with
                      static member inline ExternalFormatDownsampleAndroid = enum<Vulkan12.VkResolveModeFlags> 0x00000010


    /// Requires (Vulkan11, KHRDynamicRendering) | Vulkan13.
    /// Promoted to Vulkan14.
    module KHRMaintenance5 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_maintenance5"
        let Number = 471

        type VkPipelineCreateFlags2KHR = Vulkan14.VkPipelineCreateFlags2
        type VkBufferUsageFlags2KHR = Vulkan14.VkBufferUsageFlags2

        type VkBufferUsageFlags2CreateInfoKHR = Vulkan14.VkBufferUsageFlags2CreateInfo

        type VkDeviceImageSubresourceInfoKHR = Vulkan14.VkDeviceImageSubresourceInfo

        type VkImageSubresource2KHR = Vulkan14.VkImageSubresource2

        type VkPhysicalDeviceMaintenance5FeaturesKHR = Vulkan14.VkPhysicalDeviceMaintenance5Features

        type VkPhysicalDeviceMaintenance5PropertiesKHR = Vulkan14.VkPhysicalDeviceMaintenance5Properties

        type VkPipelineCreateFlags2CreateInfoKHR = Vulkan14.VkPipelineCreateFlags2CreateInfo

        type VkRenderingAreaInfoKHR = Vulkan14.VkRenderingAreaInfo

        type VkSubresourceLayout2KHR = Vulkan14.VkSubresourceLayout2


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan14.VkBufferUsageFlags2 with
                  static member inline BufferUsage2TransferSrcBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00000001
                  static member inline BufferUsage2TransferDstBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00000002
                  static member inline BufferUsage2UniformTexelBufferBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00000004
                  static member inline BufferUsage2StorageTexelBufferBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00000008
                  static member inline BufferUsage2UniformBufferBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00000010
                  static member inline BufferUsage2StorageBufferBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00000020
                  static member inline BufferUsage2IndexBufferBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00000040
                  static member inline BufferUsage2VertexBufferBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00000080
                  static member inline BufferUsage2IndirectBufferBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00000100
             type VkFormat with
                  static member inline A1b5g5r5UnormPack16Khr = enum<VkFormat> 1000470000
                  static member inline A8UnormKhr = enum<VkFormat> 1000470001
             type Vulkan14.VkPipelineCreateFlags2 with
                  static member inline PipelineCreate2DisableOptimizationBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000001
                  static member inline PipelineCreate2AllowDerivativesBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000002
                  static member inline PipelineCreate2DerivativeBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000004
                  static member inline PipelineCreate2ViewIndexFromDeviceIndexBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000008
                  static member inline PipelineCreate2DispatchBaseBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000010

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBindIndexBuffer2KHRDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkDeviceSize * VkIndexType -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetRenderingAreaGranularityKHRDel = delegate of VkDevice * nativeptr<Vulkan14.VkRenderingAreaInfo> * nativeptr<VkExtent2D> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceImageSubresourceLayoutKHRDel = delegate of VkDevice * nativeptr<Vulkan14.VkDeviceImageSubresourceInfo> * nativeptr<Vulkan14.VkSubresourceLayout2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetImageSubresourceLayout2KHRDel = delegate of VkDevice * VkImage * nativeptr<Vulkan14.VkImageSubresource2> * nativeptr<Vulkan14.VkSubresourceLayout2> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRMaintenance5")
                static let s_vkCmdBindIndexBuffer2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBindIndexBuffer2KHRDel> "vkCmdBindIndexBuffer2KHR"
                static let s_vkGetRenderingAreaGranularityKHRDel = VkRaw.vkImportInstanceDelegate<VkGetRenderingAreaGranularityKHRDel> "vkGetRenderingAreaGranularityKHR"
                static let s_vkGetDeviceImageSubresourceLayoutKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceImageSubresourceLayoutKHRDel> "vkGetDeviceImageSubresourceLayoutKHR"
                static let s_vkGetImageSubresourceLayout2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetImageSubresourceLayout2KHRDel> "vkGetImageSubresourceLayout2KHR"
                static do Report.End(3) |> ignore
                static member vkCmdBindIndexBuffer2KHR = s_vkCmdBindIndexBuffer2KHRDel
                static member vkGetRenderingAreaGranularityKHR = s_vkGetRenderingAreaGranularityKHRDel
                static member vkGetDeviceImageSubresourceLayoutKHR = s_vkGetDeviceImageSubresourceLayoutKHRDel
                static member vkGetImageSubresourceLayout2KHR = s_vkGetImageSubresourceLayout2KHRDel
            let vkCmdBindIndexBuffer2KHR(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, size : VkDeviceSize, indexType : VkIndexType) = Loader<unit>.vkCmdBindIndexBuffer2KHR.Invoke(commandBuffer, buffer, offset, size, indexType)
            let vkGetRenderingAreaGranularityKHR(device : VkDevice, pRenderingAreaInfo : nativeptr<Vulkan14.VkRenderingAreaInfo>, pGranularity : nativeptr<VkExtent2D>) = Loader<unit>.vkGetRenderingAreaGranularityKHR.Invoke(device, pRenderingAreaInfo, pGranularity)
            let vkGetDeviceImageSubresourceLayoutKHR(device : VkDevice, pInfo : nativeptr<Vulkan14.VkDeviceImageSubresourceInfo>, pLayout : nativeptr<Vulkan14.VkSubresourceLayout2>) = Loader<unit>.vkGetDeviceImageSubresourceLayoutKHR.Invoke(device, pInfo, pLayout)
            let vkGetImageSubresourceLayout2KHR(device : VkDevice, image : VkImage, pSubresource : nativeptr<Vulkan14.VkImageSubresource2>, pLayout : nativeptr<Vulkan14.VkSubresourceLayout2>) = Loader<unit>.vkGetImageSubresourceLayout2KHR.Invoke(device, image, pSubresource, pLayout)

        [<AutoOpen>]
        module ``NVRayTracing`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkBufferUsageFlags2 with
                      static member inline BufferUsage2RayTracingBitNv = enum<Vulkan14.VkBufferUsageFlags2> 0x00000400
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2DeferCompileBitNv = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000020


        [<AutoOpen>]
        module ``KHRPipelineExecutableProperties`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2CaptureStatisticsBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000040
                      static member inline PipelineCreate2CaptureInternalRepresentationsBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000080


        [<AutoOpen>]
        module ``Vulkan13 | EXTPipelineCreationCacheControl`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2FailOnPipelineCompileRequiredBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000100
                      static member inline PipelineCreate2EarlyReturnOnFailureBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000200


        [<AutoOpen>]
        module ``EXTGraphicsPipelineLibrary`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2LinkTimeOptimizationBitExt = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000400
                      static member inline PipelineCreate2RetainLinkTimeOptimizationInfoBitExt = enum<Vulkan14.VkPipelineCreateFlags2> 0x00800000


        [<AutoOpen>]
        module ``KHRPipelineLibrary`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2LibraryBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000800


        [<AutoOpen>]
        module ``KHRRayTracingPipeline`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkBufferUsageFlags2 with
                      static member inline BufferUsage2ShaderBindingTableBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00000400
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2RayTracingSkipTrianglesBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00001000
                      static member inline PipelineCreate2RayTracingSkipAabbsBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00002000
                      static member inline PipelineCreate2RayTracingNoNullAnyHitShadersBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00004000
                      static member inline PipelineCreate2RayTracingNoNullClosestHitShadersBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00008000
                      static member inline PipelineCreate2RayTracingNoNullMissShadersBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00010000
                      static member inline PipelineCreate2RayTracingNoNullIntersectionShadersBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00020000
                      static member inline PipelineCreate2RayTracingShaderGroupHandleCaptureReplayBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00080000


        [<AutoOpen>]
        module ``NVDeviceGeneratedCommands`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2IndirectBindableBitNv = enum<Vulkan14.VkPipelineCreateFlags2> 0x00040000


        [<AutoOpen>]
        module ``NVRayTracingMotionBlur`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2RayTracingAllowMotionBitNv = enum<Vulkan14.VkPipelineCreateFlags2> 0x00100000


        [<AutoOpen>]
        module ``(KHRDynamicRendering | Vulkan13), KHRFragmentShadingRate`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2RenderingFragmentShadingRateAttachmentBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x00200000


        [<AutoOpen>]
        module ``(KHRDynamicRendering | Vulkan13), EXTFragmentDensityMap`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2RenderingFragmentDensityMapAttachmentBitExt = enum<Vulkan14.VkPipelineCreateFlags2> 0x00400000


        [<AutoOpen>]
        module ``EXTOpacityMicromap`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkBufferUsageFlags2 with
                      static member inline BufferUsage2MicromapBuildInputReadOnlyBitExt = enum<Vulkan14.VkBufferUsageFlags2> 0x00800000
                      static member inline BufferUsage2MicromapStorageBitExt = enum<Vulkan14.VkBufferUsageFlags2> 0x01000000
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2RayTracingOpacityMicromapBitExt = enum<Vulkan14.VkPipelineCreateFlags2> 0x01000000


        [<AutoOpen>]
        module ``EXTAttachmentFeedbackLoopLayout`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2ColorAttachmentFeedbackLoopBitExt = enum<Vulkan14.VkPipelineCreateFlags2> 0x02000000
                      static member inline PipelineCreate2DepthStencilAttachmentFeedbackLoopBitExt = enum<Vulkan14.VkPipelineCreateFlags2> 0x04000000


        [<AutoOpen>]
        module ``Vulkan14 | EXTPipelineProtectedAccess`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2NoProtectedAccessBitExt = enum<Vulkan14.VkPipelineCreateFlags2> 0x08000000
                      static member inline PipelineCreate2ProtectedAccessOnlyBitExt = enum<Vulkan14.VkPipelineCreateFlags2> 0x40000000


        [<AutoOpen>]
        module ``NVDisplacementMicromap`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2RayTracingDisplacementMicromapBitNv = enum<Vulkan14.VkPipelineCreateFlags2> 0x10000000


        [<AutoOpen>]
        module ``EXTDescriptorBuffer`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkBufferUsageFlags2 with
                      static member inline BufferUsage2SamplerDescriptorBufferBitExt = enum<Vulkan14.VkBufferUsageFlags2> 0x00200000
                      static member inline BufferUsage2ResourceDescriptorBufferBitExt = enum<Vulkan14.VkBufferUsageFlags2> 0x00400000
                      static member inline BufferUsage2PushDescriptorsDescriptorBufferBitExt = enum<Vulkan14.VkBufferUsageFlags2> 0x04000000
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2DescriptorBufferBitExt = enum<Vulkan14.VkPipelineCreateFlags2> 0x20000000


        [<AutoOpen>]
        module ``EXTConditionalRendering`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkBufferUsageFlags2 with
                      static member inline BufferUsage2ConditionalRenderingBitExt = enum<Vulkan14.VkBufferUsageFlags2> 0x00000200


        [<AutoOpen>]
        module ``EXTTransformFeedback`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkBufferUsageFlags2 with
                      static member inline BufferUsage2TransformFeedbackBufferBitExt = enum<Vulkan14.VkBufferUsageFlags2> 0x00000800
                      static member inline BufferUsage2TransformFeedbackCounterBufferBitExt = enum<Vulkan14.VkBufferUsageFlags2> 0x00001000


        [<AutoOpen>]
        module ``KHRVideoDecodeQueue`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkBufferUsageFlags2 with
                      static member inline BufferUsage2VideoDecodeSrcBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00002000
                      static member inline BufferUsage2VideoDecodeDstBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00004000


        [<AutoOpen>]
        module ``KHRVideoEncodeQueue`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkBufferUsageFlags2 with
                      static member inline BufferUsage2VideoEncodeDstBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00008000
                      static member inline BufferUsage2VideoEncodeSrcBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00010000


        [<AutoOpen>]
        module ``Vulkan12 | KHRBufferDeviceAddress | EXTBufferDeviceAddress`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkBufferUsageFlags2 with
                      static member inline BufferUsage2ShaderDeviceAddressBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00020000


        [<AutoOpen>]
        module ``KHRAccelerationStructure`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkBufferUsageFlags2 with
                      static member inline BufferUsage2AccelerationStructureBuildInputReadOnlyBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00080000
                      static member inline BufferUsage2AccelerationStructureStorageBitKhr = enum<Vulkan14.VkBufferUsageFlags2> 0x00100000


        [<AutoOpen>]
        module ``ARMPipelineOpacityMicromap`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type Vulkan14.VkPipelineCreateFlags2 with
                      static member inline PipelineCreate2DisallowOpacityMicromapBitArm = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000020


    module AMDAntiLag =
        let Type = ExtensionType.Device
        let Name = "VK_AMD_anti_lag"
        let Number = 477

        type VkAntiLagModeAMD =
            | DriverControl = 0
            | On = 1
            | Off = 2

        type VkAntiLagStageAMD =
            | Input = 0
            | Present = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkAntiLagPresentationInfoAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stage : VkAntiLagStageAMD
                val mutable public frameIndex : uint64

                new(pNext: nativeint, stage: VkAntiLagStageAMD, frameIndex: uint64) =
                    {
                        sType = 1000476002u
                        pNext = pNext
                        stage = stage
                        frameIndex = frameIndex
                    }

                new(stage: VkAntiLagStageAMD, frameIndex: uint64) =
                    VkAntiLagPresentationInfoAMD(Unchecked.defaultof<nativeint>, stage, frameIndex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stage = Unchecked.defaultof<VkAntiLagStageAMD> && x.frameIndex = Unchecked.defaultof<uint64>

                static member Empty =
                    VkAntiLagPresentationInfoAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAntiLagStageAMD>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stage = %A" x.stage
                        sprintf "frameIndex = %A" x.frameIndex
                    ] |> sprintf "VkAntiLagPresentationInfoAMD { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAntiLagDataAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public mode : VkAntiLagModeAMD
                val mutable public maxFPS : uint32
                val mutable public pPresentationInfo : nativeptr<VkAntiLagPresentationInfoAMD>

                new(pNext: nativeint, mode: VkAntiLagModeAMD, maxFPS: uint32, pPresentationInfo: nativeptr<VkAntiLagPresentationInfoAMD>) =
                    {
                        sType = 1000476001u
                        pNext = pNext
                        mode = mode
                        maxFPS = maxFPS
                        pPresentationInfo = pPresentationInfo
                    }

                new(mode: VkAntiLagModeAMD, maxFPS: uint32, pPresentationInfo: nativeptr<VkAntiLagPresentationInfoAMD>) =
                    VkAntiLagDataAMD(Unchecked.defaultof<nativeint>, mode, maxFPS, pPresentationInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.mode = Unchecked.defaultof<VkAntiLagModeAMD> && x.maxFPS = Unchecked.defaultof<uint32> && x.pPresentationInfo = Unchecked.defaultof<nativeptr<VkAntiLagPresentationInfoAMD>>

                static member Empty =
                    VkAntiLagDataAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAntiLagModeAMD>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAntiLagPresentationInfoAMD>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "mode = %A" x.mode
                        sprintf "maxFPS = %A" x.maxFPS
                        sprintf "pPresentationInfo = %A" x.pPresentationInfo
                    ] |> sprintf "VkAntiLagDataAMD { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceAntiLagFeaturesAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public antiLag : VkBool32

                new(pNext: nativeint, antiLag: VkBool32) =
                    {
                        sType = 1000476000u
                        pNext = pNext
                        antiLag = antiLag
                    }

                new(antiLag: VkBool32) =
                    VkPhysicalDeviceAntiLagFeaturesAMD(Unchecked.defaultof<nativeint>, antiLag)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.antiLag = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceAntiLagFeaturesAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "antiLag = %A" x.antiLag
                    ] |> sprintf "VkPhysicalDeviceAntiLagFeaturesAMD { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkAntiLagUpdateAMDDel = delegate of VkDevice * nativeptr<VkAntiLagDataAMD> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading AMDAntiLag")
                static let s_vkAntiLagUpdateAMDDel = VkRaw.vkImportInstanceDelegate<VkAntiLagUpdateAMDDel> "vkAntiLagUpdateAMD"
                static do Report.End(3) |> ignore
                static member vkAntiLagUpdateAMD = s_vkAntiLagUpdateAMDDel
            let vkAntiLagUpdateAMD(device : VkDevice, pData : nativeptr<VkAntiLagDataAMD>) = Loader<unit>.vkAntiLagUpdateAMD.Invoke(device, pData)

    /// Requires KHRAccelerationStructure.
    module KHRRayTracingPositionFetch =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_ray_tracing_position_fetch"
        let Number = 482

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public rayTracingPositionFetch : VkBool32

                new(pNext: nativeint, rayTracingPositionFetch: VkBool32) =
                    {
                        sType = 1000481000u
                        pNext = pNext
                        rayTracingPositionFetch = rayTracingPositionFetch
                    }

                new(rayTracingPositionFetch: VkBool32) =
                    VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(Unchecked.defaultof<nativeint>, rayTracingPositionFetch)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.rayTracingPositionFetch = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "rayTracingPositionFetch = %A" x.rayTracingPositionFetch
                    ] |> sprintf "VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR with
                  static member inline AllowDataAccess = enum<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> 0x00000800


    /// Requires ((KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRDynamicRendering) | Vulkan13.
    module EXTShaderObject =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_shader_object"
        let Number = 483


        [<StructLayout(LayoutKind.Sequential)>]
        type VkShaderEXT =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkShaderEXT(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<Flags>]
        type VkShaderCreateFlagsEXT =
            | All = 1
            | None = 0
            | LinkStageBit = 0x00000001

        type VkShaderCodeTypeEXT =
            | Binary = 0
            | Spirv = 1


        type VkColorBlendAdvancedEXT = EXTExtendedDynamicState3.VkColorBlendAdvancedEXT

        type VkColorBlendEquationEXT = EXTExtendedDynamicState3.VkColorBlendEquationEXT

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderObjectFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderObject : VkBool32

                new(pNext: nativeint, shaderObject: VkBool32) =
                    {
                        sType = 1000482000u
                        pNext = pNext
                        shaderObject = shaderObject
                    }

                new(shaderObject: VkBool32) =
                    VkPhysicalDeviceShaderObjectFeaturesEXT(Unchecked.defaultof<nativeint>, shaderObject)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderObject = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderObjectFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderObject = %A" x.shaderObject
                    ] |> sprintf "VkPhysicalDeviceShaderObjectFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderObjectPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderBinaryUUID : Guid
                val mutable public shaderBinaryVersion : uint32

                new(pNext: nativeint, shaderBinaryUUID: Guid, shaderBinaryVersion: uint32) =
                    {
                        sType = 1000482001u
                        pNext = pNext
                        shaderBinaryUUID = shaderBinaryUUID
                        shaderBinaryVersion = shaderBinaryVersion
                    }

                new(shaderBinaryUUID: Guid, shaderBinaryVersion: uint32) =
                    VkPhysicalDeviceShaderObjectPropertiesEXT(Unchecked.defaultof<nativeint>, shaderBinaryUUID, shaderBinaryVersion)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderBinaryUUID = Unchecked.defaultof<Guid> && x.shaderBinaryVersion = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceShaderObjectPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Guid>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderBinaryUUID = %A" x.shaderBinaryUUID
                        sprintf "shaderBinaryVersion = %A" x.shaderBinaryVersion
                    ] |> sprintf "VkPhysicalDeviceShaderObjectPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkShaderCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkShaderCreateFlagsEXT
                val mutable public stage : VkShaderStageFlags
                val mutable public nextStage : VkShaderStageFlags
                val mutable public codeType : VkShaderCodeTypeEXT
                val mutable public codeSize : uint64
                val mutable public pCode : nativeint
                val mutable public pName : cstr
                val mutable public setLayoutCount : uint32
                val mutable public pSetLayouts : nativeptr<VkDescriptorSetLayout>
                val mutable public pushConstantRangeCount : uint32
                val mutable public pPushConstantRanges : nativeptr<VkPushConstantRange>
                val mutable public pSpecializationInfo : nativeptr<VkSpecializationInfo>

                new(pNext: nativeint, flags: VkShaderCreateFlagsEXT, stage: VkShaderStageFlags, nextStage: VkShaderStageFlags, codeType: VkShaderCodeTypeEXT, codeSize: uint64, pCode: nativeint, pName: cstr, setLayoutCount: uint32, pSetLayouts: nativeptr<VkDescriptorSetLayout>, pushConstantRangeCount: uint32, pPushConstantRanges: nativeptr<VkPushConstantRange>, pSpecializationInfo: nativeptr<VkSpecializationInfo>) =
                    {
                        sType = 1000482002u
                        pNext = pNext
                        flags = flags
                        stage = stage
                        nextStage = nextStage
                        codeType = codeType
                        codeSize = codeSize
                        pCode = pCode
                        pName = pName
                        setLayoutCount = setLayoutCount
                        pSetLayouts = pSetLayouts
                        pushConstantRangeCount = pushConstantRangeCount
                        pPushConstantRanges = pPushConstantRanges
                        pSpecializationInfo = pSpecializationInfo
                    }

                new(flags: VkShaderCreateFlagsEXT, stage: VkShaderStageFlags, nextStage: VkShaderStageFlags, codeType: VkShaderCodeTypeEXT, codeSize: uint64, pCode: nativeint, pName: cstr, setLayoutCount: uint32, pSetLayouts: nativeptr<VkDescriptorSetLayout>, pushConstantRangeCount: uint32, pPushConstantRanges: nativeptr<VkPushConstantRange>, pSpecializationInfo: nativeptr<VkSpecializationInfo>) =
                    VkShaderCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, stage, nextStage, codeType, codeSize, pCode, pName, setLayoutCount, pSetLayouts, pushConstantRangeCount, pPushConstantRanges, pSpecializationInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkShaderCreateFlagsEXT> && x.stage = Unchecked.defaultof<VkShaderStageFlags> && x.nextStage = Unchecked.defaultof<VkShaderStageFlags> && x.codeType = Unchecked.defaultof<VkShaderCodeTypeEXT> && x.codeSize = Unchecked.defaultof<uint64> && x.pCode = Unchecked.defaultof<nativeint> && x.pName = Unchecked.defaultof<cstr> && x.setLayoutCount = Unchecked.defaultof<uint32> && x.pSetLayouts = Unchecked.defaultof<nativeptr<VkDescriptorSetLayout>> && x.pushConstantRangeCount = Unchecked.defaultof<uint32> && x.pPushConstantRanges = Unchecked.defaultof<nativeptr<VkPushConstantRange>> && x.pSpecializationInfo = Unchecked.defaultof<nativeptr<VkSpecializationInfo>>

                static member Empty =
                    VkShaderCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderCreateFlagsEXT>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkShaderCodeTypeEXT>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorSetLayout>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPushConstantRange>>, Unchecked.defaultof<nativeptr<VkSpecializationInfo>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "stage = %A" x.stage
                        sprintf "nextStage = %A" x.nextStage
                        sprintf "codeType = %A" x.codeType
                        sprintf "codeSize = %A" x.codeSize
                        sprintf "pCode = %A" x.pCode
                        sprintf "pName = %A" x.pName
                        sprintf "setLayoutCount = %A" x.setLayoutCount
                        sprintf "pSetLayouts = %A" x.pSetLayouts
                        sprintf "pushConstantRangeCount = %A" x.pushConstantRangeCount
                        sprintf "pPushConstantRanges = %A" x.pPushConstantRanges
                        sprintf "pSpecializationInfo = %A" x.pSpecializationInfo
                    ] |> sprintf "VkShaderCreateInfoEXT { %s }"
            end

        type VkShaderRequiredSubgroupSizeCreateInfoEXT = Vulkan13.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo

        type VkVertexInputAttributeDescription2EXT = EXTVertexInputDynamicState.VkVertexInputAttributeDescription2EXT

        type VkVertexInputBindingDescription2EXT = EXTVertexInputDynamicState.VkVertexInputBindingDescription2EXT


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  static member inline ShaderExt = enum<VkObjectType> 1000482000
             type VkResult with
                  static member inline IncompatibleShaderBinaryExt = enum<VkResult> 1000482000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateShadersEXTDel = delegate of VkDevice * uint32 * nativeptr<VkShaderCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkShaderEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyShaderEXTDel = delegate of VkDevice * VkShaderEXT * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetShaderBinaryDataEXTDel = delegate of VkDevice * VkShaderEXT * nativeptr<uint64> * nativeint -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBindShadersEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkShaderStageFlags> * nativeptr<VkShaderEXT> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTShaderObject")
                static let s_vkCreateShadersEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateShadersEXTDel> "vkCreateShadersEXT"
                static let s_vkDestroyShaderEXTDel = VkRaw.vkImportInstanceDelegate<VkDestroyShaderEXTDel> "vkDestroyShaderEXT"
                static let s_vkGetShaderBinaryDataEXTDel = VkRaw.vkImportInstanceDelegate<VkGetShaderBinaryDataEXTDel> "vkGetShaderBinaryDataEXT"
                static let s_vkCmdBindShadersEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBindShadersEXTDel> "vkCmdBindShadersEXT"
                static do Report.End(3) |> ignore
                static member vkCreateShadersEXT = s_vkCreateShadersEXTDel
                static member vkDestroyShaderEXT = s_vkDestroyShaderEXTDel
                static member vkGetShaderBinaryDataEXT = s_vkGetShaderBinaryDataEXTDel
                static member vkCmdBindShadersEXT = s_vkCmdBindShadersEXTDel
            let vkCreateShadersEXT(device : VkDevice, createInfoCount : uint32, pCreateInfos : nativeptr<VkShaderCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pShaders : nativeptr<VkShaderEXT>) = Loader<unit>.vkCreateShadersEXT.Invoke(device, createInfoCount, pCreateInfos, pAllocator, pShaders)
            let vkDestroyShaderEXT(device : VkDevice, shader : VkShaderEXT, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyShaderEXT.Invoke(device, shader, pAllocator)
            let vkGetShaderBinaryDataEXT(device : VkDevice, shader : VkShaderEXT, pDataSize : nativeptr<uint64>, pData : nativeint) = Loader<unit>.vkGetShaderBinaryDataEXT.Invoke(device, shader, pDataSize, pData)
            let vkCmdBindShadersEXT(commandBuffer : VkCommandBuffer, stageCount : uint32, pStages : nativeptr<VkShaderStageFlags>, pShaders : nativeptr<VkShaderEXT>) = Loader<unit>.vkCmdBindShadersEXT.Invoke(commandBuffer, stageCount, pStages, pShaders)
            let vkCmdSetCullModeEXT = EXTExtendedDynamicState.VkRaw.vkCmdSetCullModeEXT
            let vkCmdSetFrontFaceEXT = EXTExtendedDynamicState.VkRaw.vkCmdSetFrontFaceEXT
            let vkCmdSetPrimitiveTopologyEXT = EXTExtendedDynamicState.VkRaw.vkCmdSetPrimitiveTopologyEXT
            let vkCmdSetViewportWithCountEXT = EXTExtendedDynamicState.VkRaw.vkCmdSetViewportWithCountEXT
            let vkCmdSetScissorWithCountEXT = EXTExtendedDynamicState.VkRaw.vkCmdSetScissorWithCountEXT
            let vkCmdBindVertexBuffers2EXT = EXTExtendedDynamicState.VkRaw.vkCmdBindVertexBuffers2EXT
            let vkCmdSetDepthTestEnableEXT = EXTExtendedDynamicState.VkRaw.vkCmdSetDepthTestEnableEXT
            let vkCmdSetDepthWriteEnableEXT = EXTExtendedDynamicState.VkRaw.vkCmdSetDepthWriteEnableEXT
            let vkCmdSetDepthCompareOpEXT = EXTExtendedDynamicState.VkRaw.vkCmdSetDepthCompareOpEXT
            let vkCmdSetDepthBoundsTestEnableEXT = EXTExtendedDynamicState.VkRaw.vkCmdSetDepthBoundsTestEnableEXT
            let vkCmdSetStencilTestEnableEXT = EXTExtendedDynamicState.VkRaw.vkCmdSetStencilTestEnableEXT
            let vkCmdSetStencilOpEXT = EXTExtendedDynamicState.VkRaw.vkCmdSetStencilOpEXT
            let vkCmdSetVertexInputEXT = EXTVertexInputDynamicState.VkRaw.vkCmdSetVertexInputEXT
            let vkCmdSetPatchControlPointsEXT = EXTExtendedDynamicState2.VkRaw.vkCmdSetPatchControlPointsEXT
            let vkCmdSetRasterizerDiscardEnableEXT = EXTExtendedDynamicState2.VkRaw.vkCmdSetRasterizerDiscardEnableEXT
            let vkCmdSetDepthBiasEnableEXT = EXTExtendedDynamicState2.VkRaw.vkCmdSetDepthBiasEnableEXT
            let vkCmdSetLogicOpEXT = EXTExtendedDynamicState2.VkRaw.vkCmdSetLogicOpEXT
            let vkCmdSetPrimitiveRestartEnableEXT = EXTExtendedDynamicState2.VkRaw.vkCmdSetPrimitiveRestartEnableEXT
            let vkCmdSetTessellationDomainOriginEXT = EXTExtendedDynamicState3.``KHRMaintenance2 | Vulkan11``.VkRaw.vkCmdSetTessellationDomainOriginEXT
            let vkCmdSetDepthClampEnableEXT = EXTExtendedDynamicState3.VkRaw.vkCmdSetDepthClampEnableEXT
            let vkCmdSetPolygonModeEXT = EXTExtendedDynamicState3.VkRaw.vkCmdSetPolygonModeEXT
            let vkCmdSetRasterizationSamplesEXT = EXTExtendedDynamicState3.VkRaw.vkCmdSetRasterizationSamplesEXT
            let vkCmdSetSampleMaskEXT = EXTExtendedDynamicState3.VkRaw.vkCmdSetSampleMaskEXT
            let vkCmdSetAlphaToCoverageEnableEXT = EXTExtendedDynamicState3.VkRaw.vkCmdSetAlphaToCoverageEnableEXT
            let vkCmdSetAlphaToOneEnableEXT = EXTExtendedDynamicState3.VkRaw.vkCmdSetAlphaToOneEnableEXT
            let vkCmdSetLogicOpEnableEXT = EXTExtendedDynamicState3.VkRaw.vkCmdSetLogicOpEnableEXT
            let vkCmdSetColorBlendEnableEXT = EXTExtendedDynamicState3.VkRaw.vkCmdSetColorBlendEnableEXT
            let vkCmdSetColorBlendEquationEXT = EXTExtendedDynamicState3.VkRaw.vkCmdSetColorBlendEquationEXT
            let vkCmdSetColorWriteMaskEXT = EXTExtendedDynamicState3.VkRaw.vkCmdSetColorWriteMaskEXT

        [<AutoOpen>]
        module ``EXTTransformFeedback`` =
            module VkRaw =
                let vkCmdSetRasterizationStreamEXT = EXTExtendedDynamicState3.``EXTTransformFeedback``.VkRaw.vkCmdSetRasterizationStreamEXT

        [<AutoOpen>]
        module ``EXTConservativeRasterization`` =
            module VkRaw =
                let vkCmdSetConservativeRasterizationModeEXT = EXTExtendedDynamicState3.``EXTConservativeRasterization``.VkRaw.vkCmdSetConservativeRasterizationModeEXT
                let vkCmdSetExtraPrimitiveOverestimationSizeEXT = EXTExtendedDynamicState3.``EXTConservativeRasterization``.VkRaw.vkCmdSetExtraPrimitiveOverestimationSizeEXT

        [<AutoOpen>]
        module ``EXTDepthClipEnable`` =
            module VkRaw =
                let vkCmdSetDepthClipEnableEXT = EXTExtendedDynamicState3.``EXTDepthClipEnable``.VkRaw.vkCmdSetDepthClipEnableEXT

        [<AutoOpen>]
        module ``EXTSampleLocations`` =
            module VkRaw =
                let vkCmdSetSampleLocationsEnableEXT = EXTExtendedDynamicState3.``EXTSampleLocations``.VkRaw.vkCmdSetSampleLocationsEnableEXT

        [<AutoOpen>]
        module ``EXTBlendOperationAdvanced`` =
            module VkRaw =
                let vkCmdSetColorBlendAdvancedEXT = EXTExtendedDynamicState3.``EXTBlendOperationAdvanced``.VkRaw.vkCmdSetColorBlendAdvancedEXT

        [<AutoOpen>]
        module ``EXTProvokingVertex`` =
            module VkRaw =
                let vkCmdSetProvokingVertexModeEXT = EXTExtendedDynamicState3.``EXTProvokingVertex``.VkRaw.vkCmdSetProvokingVertexModeEXT

        [<AutoOpen>]
        module ``EXTLineRasterization`` =
            module VkRaw =
                let vkCmdSetLineRasterizationModeEXT = EXTExtendedDynamicState3.``EXTLineRasterization``.VkRaw.vkCmdSetLineRasterizationModeEXT
                let vkCmdSetLineStippleEnableEXT = EXTExtendedDynamicState3.``EXTLineRasterization``.VkRaw.vkCmdSetLineStippleEnableEXT

        [<AutoOpen>]
        module ``EXTDepthClipControl`` =
            module VkRaw =
                let vkCmdSetDepthClipNegativeOneToOneEXT = EXTExtendedDynamicState3.``EXTDepthClipControl``.VkRaw.vkCmdSetDepthClipNegativeOneToOneEXT

        [<AutoOpen>]
        module ``EXTSubgroupSizeControl | Vulkan13`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkShaderCreateFlagsEXT with
                      static member inline AllowVaryingSubgroupSizeBit = enum<VkShaderCreateFlagsEXT> 0x00000002
                      static member inline RequireFullSubgroupsBit = enum<VkShaderCreateFlagsEXT> 0x00000004


        [<AutoOpen>]
        module ``EXTMeshShader | NVMeshShader`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkShaderCreateFlagsEXT with
                      static member inline NoTaskShaderBit = enum<VkShaderCreateFlagsEXT> 0x00000008


        [<AutoOpen>]
        module ``KHRDeviceGroup | Vulkan11`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkShaderCreateFlagsEXT with
                      static member inline DispatchBaseBit = enum<VkShaderCreateFlagsEXT> 0x00000010


        [<AutoOpen>]
        module ``KHRFragmentShadingRate`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkShaderCreateFlagsEXT with
                      static member inline FragmentShadingRateAttachmentBit = enum<VkShaderCreateFlagsEXT> 0x00000020


        [<AutoOpen>]
        module ``EXTFragmentDensityMap`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type VkShaderCreateFlagsEXT with
                      static member inline FragmentDensityMapAttachmentBit = enum<VkShaderCreateFlagsEXT> 0x00000040


        [<AutoOpen>]
        module ``NVClipSpaceWScaling`` =
            module VkRaw =
                let vkCmdSetViewportWScalingEnableNV = EXTExtendedDynamicState3.``NVClipSpaceWScaling``.VkRaw.vkCmdSetViewportWScalingEnableNV

        [<AutoOpen>]
        module ``NVViewportSwizzle`` =
            module VkRaw =
                let vkCmdSetViewportSwizzleNV = EXTExtendedDynamicState3.``NVViewportSwizzle``.VkRaw.vkCmdSetViewportSwizzleNV

        [<AutoOpen>]
        module ``NVFragmentCoverageToColor`` =
            module VkRaw =
                let vkCmdSetCoverageToColorEnableNV = EXTExtendedDynamicState3.``NVFragmentCoverageToColor``.VkRaw.vkCmdSetCoverageToColorEnableNV
                let vkCmdSetCoverageToColorLocationNV = EXTExtendedDynamicState3.``NVFragmentCoverageToColor``.VkRaw.vkCmdSetCoverageToColorLocationNV

        [<AutoOpen>]
        module ``NVFramebufferMixedSamples`` =
            module VkRaw =
                let vkCmdSetCoverageModulationModeNV = EXTExtendedDynamicState3.``NVFramebufferMixedSamples``.VkRaw.vkCmdSetCoverageModulationModeNV
                let vkCmdSetCoverageModulationTableEnableNV = EXTExtendedDynamicState3.``NVFramebufferMixedSamples``.VkRaw.vkCmdSetCoverageModulationTableEnableNV
                let vkCmdSetCoverageModulationTableNV = EXTExtendedDynamicState3.``NVFramebufferMixedSamples``.VkRaw.vkCmdSetCoverageModulationTableNV

        [<AutoOpen>]
        module ``NVShadingRateImage`` =
            module VkRaw =
                let vkCmdSetShadingRateImageEnableNV = EXTExtendedDynamicState3.``NVShadingRateImage``.VkRaw.vkCmdSetShadingRateImageEnableNV

        [<AutoOpen>]
        module ``NVRepresentativeFragmentTest`` =
            module VkRaw =
                let vkCmdSetRepresentativeFragmentTestEnableNV = EXTExtendedDynamicState3.``NVRepresentativeFragmentTest``.VkRaw.vkCmdSetRepresentativeFragmentTestEnableNV

        [<AutoOpen>]
        module ``NVCoverageReductionMode`` =
            module VkRaw =
                let vkCmdSetCoverageReductionModeNV = EXTExtendedDynamicState3.``NVCoverageReductionMode``.VkRaw.vkCmdSetCoverageReductionModeNV

        [<AutoOpen>]
        module ``EXTDepthClampControl`` =
            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetDepthClampRangeEXTDel = delegate of VkCommandBuffer * EXTDepthClampControl.VkDepthClampModeEXT * nativeptr<EXTDepthClampControl.VkDepthClampRangeEXT> -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading EXTShaderObject -> EXTDepthClampControl")
                    static let s_vkCmdSetDepthClampRangeEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthClampRangeEXTDel> "vkCmdSetDepthClampRangeEXT"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetDepthClampRangeEXT = s_vkCmdSetDepthClampRangeEXTDel
                let vkCmdSetDepthClampRangeEXT(commandBuffer : VkCommandBuffer, depthClampMode : EXTDepthClampControl.VkDepthClampModeEXT, pDepthClampRange : nativeptr<EXTDepthClampControl.VkDepthClampRangeEXT>) = Loader<unit>.vkCmdSetDepthClampRangeEXT.Invoke(commandBuffer, depthClampMode, pDepthClampRange)

    /// Requires KHRMaintenance5.
    module KHRPipelineBinary =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_pipeline_binary"
        let Number = 484


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineBinaryKHR =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkPipelineBinaryKHR(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDevicePipelineBinaryInternalCacheControlKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public disableInternalCache : VkBool32

                new(pNext: nativeint, disableInternalCache: VkBool32) =
                    {
                        sType = 1000483008u
                        pNext = pNext
                        disableInternalCache = disableInternalCache
                    }

                new(disableInternalCache: VkBool32) =
                    VkDevicePipelineBinaryInternalCacheControlKHR(Unchecked.defaultof<nativeint>, disableInternalCache)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.disableInternalCache = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkDevicePipelineBinaryInternalCacheControlKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "disableInternalCache = %A" x.disableInternalCache
                    ] |> sprintf "VkDevicePipelineBinaryInternalCacheControlKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePipelineBinaryFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelineBinaries : VkBool32

                new(pNext: nativeint, pipelineBinaries: VkBool32) =
                    {
                        sType = 1000483000u
                        pNext = pNext
                        pipelineBinaries = pipelineBinaries
                    }

                new(pipelineBinaries: VkBool32) =
                    VkPhysicalDevicePipelineBinaryFeaturesKHR(Unchecked.defaultof<nativeint>, pipelineBinaries)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelineBinaries = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePipelineBinaryFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelineBinaries = %A" x.pipelineBinaries
                    ] |> sprintf "VkPhysicalDevicePipelineBinaryFeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePipelineBinaryPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelineBinaryInternalCache : VkBool32
                val mutable public pipelineBinaryInternalCacheControl : VkBool32
                val mutable public pipelineBinaryPrefersInternalCache : VkBool32
                val mutable public pipelineBinaryPrecompiledInternalCache : VkBool32
                val mutable public pipelineBinaryCompressedData : VkBool32

                new(pNext: nativeint, pipelineBinaryInternalCache: VkBool32, pipelineBinaryInternalCacheControl: VkBool32, pipelineBinaryPrefersInternalCache: VkBool32, pipelineBinaryPrecompiledInternalCache: VkBool32, pipelineBinaryCompressedData: VkBool32) =
                    {
                        sType = 1000483004u
                        pNext = pNext
                        pipelineBinaryInternalCache = pipelineBinaryInternalCache
                        pipelineBinaryInternalCacheControl = pipelineBinaryInternalCacheControl
                        pipelineBinaryPrefersInternalCache = pipelineBinaryPrefersInternalCache
                        pipelineBinaryPrecompiledInternalCache = pipelineBinaryPrecompiledInternalCache
                        pipelineBinaryCompressedData = pipelineBinaryCompressedData
                    }

                new(pipelineBinaryInternalCache: VkBool32, pipelineBinaryInternalCacheControl: VkBool32, pipelineBinaryPrefersInternalCache: VkBool32, pipelineBinaryPrecompiledInternalCache: VkBool32, pipelineBinaryCompressedData: VkBool32) =
                    VkPhysicalDevicePipelineBinaryPropertiesKHR(Unchecked.defaultof<nativeint>, pipelineBinaryInternalCache, pipelineBinaryInternalCacheControl, pipelineBinaryPrefersInternalCache, pipelineBinaryPrecompiledInternalCache, pipelineBinaryCompressedData)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelineBinaryInternalCache = Unchecked.defaultof<VkBool32> && x.pipelineBinaryInternalCacheControl = Unchecked.defaultof<VkBool32> && x.pipelineBinaryPrefersInternalCache = Unchecked.defaultof<VkBool32> && x.pipelineBinaryPrecompiledInternalCache = Unchecked.defaultof<VkBool32> && x.pipelineBinaryCompressedData = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePipelineBinaryPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelineBinaryInternalCache = %A" x.pipelineBinaryInternalCache
                        sprintf "pipelineBinaryInternalCacheControl = %A" x.pipelineBinaryInternalCacheControl
                        sprintf "pipelineBinaryPrefersInternalCache = %A" x.pipelineBinaryPrefersInternalCache
                        sprintf "pipelineBinaryPrecompiledInternalCache = %A" x.pipelineBinaryPrecompiledInternalCache
                        sprintf "pipelineBinaryCompressedData = %A" x.pipelineBinaryCompressedData
                    ] |> sprintf "VkPhysicalDevicePipelineBinaryPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineBinaryKeyKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public keySize : uint32
                val mutable public key : byte_32

                new(pNext: nativeint, keySize: uint32, key: byte_32) =
                    {
                        sType = 1000483003u
                        pNext = pNext
                        keySize = keySize
                        key = key
                    }

                new(keySize: uint32, key: byte_32) =
                    VkPipelineBinaryKeyKHR(Unchecked.defaultof<nativeint>, keySize, key)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.keySize = Unchecked.defaultof<uint32> && x.key = Unchecked.defaultof<byte_32>

                static member Empty =
                    VkPipelineBinaryKeyKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<byte_32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "keySize = %A" x.keySize
                        sprintf "key = %A" x.key
                    ] |> sprintf "VkPipelineBinaryKeyKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineBinaryDataKHR =
            struct
                val mutable public dataSize : uint64
                val mutable public pData : nativeint

                new(dataSize: uint64, pData: nativeint) =
                    {
                        dataSize = dataSize
                        pData = pData
                    }

                member x.IsEmpty =
                    x.dataSize = Unchecked.defaultof<uint64> && x.pData = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkPipelineBinaryDataKHR(Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "dataSize = %A" x.dataSize
                        sprintf "pData = %A" x.pData
                    ] |> sprintf "VkPipelineBinaryDataKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineBinaryKeysAndDataKHR =
            struct
                val mutable public binaryCount : uint32
                val mutable public pPipelineBinaryKeys : nativeptr<VkPipelineBinaryKeyKHR>
                val mutable public pPipelineBinaryData : nativeptr<VkPipelineBinaryDataKHR>

                new(binaryCount: uint32, pPipelineBinaryKeys: nativeptr<VkPipelineBinaryKeyKHR>, pPipelineBinaryData: nativeptr<VkPipelineBinaryDataKHR>) =
                    {
                        binaryCount = binaryCount
                        pPipelineBinaryKeys = pPipelineBinaryKeys
                        pPipelineBinaryData = pPipelineBinaryData
                    }

                member x.IsEmpty =
                    x.binaryCount = Unchecked.defaultof<uint32> && x.pPipelineBinaryKeys = Unchecked.defaultof<nativeptr<VkPipelineBinaryKeyKHR>> && x.pPipelineBinaryData = Unchecked.defaultof<nativeptr<VkPipelineBinaryDataKHR>>

                static member Empty =
                    VkPipelineBinaryKeysAndDataKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineBinaryKeyKHR>>, Unchecked.defaultof<nativeptr<VkPipelineBinaryDataKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "binaryCount = %A" x.binaryCount
                        sprintf "pPipelineBinaryKeys = %A" x.pPipelineBinaryKeys
                        sprintf "pPipelineBinaryData = %A" x.pPipelineBinaryData
                    ] |> sprintf "VkPipelineBinaryKeysAndDataKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint

                new(pNext: nativeint) =
                    {
                        sType = 1000483007u
                        pNext = pNext
                    }

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkPipelineCreateInfoKHR(Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                    ] |> sprintf "VkPipelineCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineBinaryCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pKeysAndDataInfo : nativeptr<VkPipelineBinaryKeysAndDataKHR>
                val mutable public pipeline : VkPipeline
                val mutable public pPipelineCreateInfo : nativeptr<VkPipelineCreateInfoKHR>

                new(pNext: nativeint, pKeysAndDataInfo: nativeptr<VkPipelineBinaryKeysAndDataKHR>, pipeline: VkPipeline, pPipelineCreateInfo: nativeptr<VkPipelineCreateInfoKHR>) =
                    {
                        sType = 1000483001u
                        pNext = pNext
                        pKeysAndDataInfo = pKeysAndDataInfo
                        pipeline = pipeline
                        pPipelineCreateInfo = pPipelineCreateInfo
                    }

                new(pKeysAndDataInfo: nativeptr<VkPipelineBinaryKeysAndDataKHR>, pipeline: VkPipeline, pPipelineCreateInfo: nativeptr<VkPipelineCreateInfoKHR>) =
                    VkPipelineBinaryCreateInfoKHR(Unchecked.defaultof<nativeint>, pKeysAndDataInfo, pipeline, pPipelineCreateInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pKeysAndDataInfo = Unchecked.defaultof<nativeptr<VkPipelineBinaryKeysAndDataKHR>> && x.pipeline = Unchecked.defaultof<VkPipeline> && x.pPipelineCreateInfo = Unchecked.defaultof<nativeptr<VkPipelineCreateInfoKHR>>

                static member Empty =
                    VkPipelineBinaryCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkPipelineBinaryKeysAndDataKHR>>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<nativeptr<VkPipelineCreateInfoKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pKeysAndDataInfo = %A" x.pKeysAndDataInfo
                        sprintf "pipeline = %A" x.pipeline
                        sprintf "pPipelineCreateInfo = %A" x.pPipelineCreateInfo
                    ] |> sprintf "VkPipelineBinaryCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineBinaryDataInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelineBinary : VkPipelineBinaryKHR

                new(pNext: nativeint, pipelineBinary: VkPipelineBinaryKHR) =
                    {
                        sType = 1000483006u
                        pNext = pNext
                        pipelineBinary = pipelineBinary
                    }

                new(pipelineBinary: VkPipelineBinaryKHR) =
                    VkPipelineBinaryDataInfoKHR(Unchecked.defaultof<nativeint>, pipelineBinary)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelineBinary = Unchecked.defaultof<VkPipelineBinaryKHR>

                static member Empty =
                    VkPipelineBinaryDataInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineBinaryKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelineBinary = %A" x.pipelineBinary
                    ] |> sprintf "VkPipelineBinaryDataInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineBinaryHandlesInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelineBinaryCount : uint32
                val mutable public pPipelineBinaries : nativeptr<VkPipelineBinaryKHR>

                new(pNext: nativeint, pipelineBinaryCount: uint32, pPipelineBinaries: nativeptr<VkPipelineBinaryKHR>) =
                    {
                        sType = 1000483009u
                        pNext = pNext
                        pipelineBinaryCount = pipelineBinaryCount
                        pPipelineBinaries = pPipelineBinaries
                    }

                new(pipelineBinaryCount: uint32, pPipelineBinaries: nativeptr<VkPipelineBinaryKHR>) =
                    VkPipelineBinaryHandlesInfoKHR(Unchecked.defaultof<nativeint>, pipelineBinaryCount, pPipelineBinaries)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelineBinaryCount = Unchecked.defaultof<uint32> && x.pPipelineBinaries = Unchecked.defaultof<nativeptr<VkPipelineBinaryKHR>>

                static member Empty =
                    VkPipelineBinaryHandlesInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineBinaryKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelineBinaryCount = %A" x.pipelineBinaryCount
                        sprintf "pPipelineBinaries = %A" x.pPipelineBinaries
                    ] |> sprintf "VkPipelineBinaryHandlesInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineBinaryInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public binaryCount : uint32
                val mutable public pPipelineBinaries : nativeptr<VkPipelineBinaryKHR>

                new(pNext: nativeint, binaryCount: uint32, pPipelineBinaries: nativeptr<VkPipelineBinaryKHR>) =
                    {
                        sType = 1000483002u
                        pNext = pNext
                        binaryCount = binaryCount
                        pPipelineBinaries = pPipelineBinaries
                    }

                new(binaryCount: uint32, pPipelineBinaries: nativeptr<VkPipelineBinaryKHR>) =
                    VkPipelineBinaryInfoKHR(Unchecked.defaultof<nativeint>, binaryCount, pPipelineBinaries)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.binaryCount = Unchecked.defaultof<uint32> && x.pPipelineBinaries = Unchecked.defaultof<nativeptr<VkPipelineBinaryKHR>>

                static member Empty =
                    VkPipelineBinaryInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineBinaryKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "binaryCount = %A" x.binaryCount
                        sprintf "pPipelineBinaries = %A" x.pPipelineBinaries
                    ] |> sprintf "VkPipelineBinaryInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkReleaseCapturedPipelineDataInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipeline : VkPipeline

                new(pNext: nativeint, pipeline: VkPipeline) =
                    {
                        sType = 1000483005u
                        pNext = pNext
                        pipeline = pipeline
                    }

                new(pipeline: VkPipeline) =
                    VkReleaseCapturedPipelineDataInfoKHR(Unchecked.defaultof<nativeint>, pipeline)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipeline = Unchecked.defaultof<VkPipeline>

                static member Empty =
                    VkReleaseCapturedPipelineDataInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipeline>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipeline = %A" x.pipeline
                    ] |> sprintf "VkReleaseCapturedPipelineDataInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkObjectType with
                  static member inline PipelineBinaryKhr = enum<VkObjectType> 1000483000
             type Vulkan14.VkPipelineCreateFlags2 with
                  static member inline PipelineCreate2CaptureDataBitKhr = enum<Vulkan14.VkPipelineCreateFlags2> 0x80000000
             type VkResult with
                  static member inline PipelineBinaryMissingKhr = enum<VkResult> 1000483000
                  static member inline ErrorNotEnoughSpaceKhr = enum<VkResult> -1000483000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreatePipelineBinariesKHRDel = delegate of VkDevice * nativeptr<VkPipelineBinaryCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkPipelineBinaryHandlesInfoKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyPipelineBinaryKHRDel = delegate of VkDevice * VkPipelineBinaryKHR * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPipelineKeyKHRDel = delegate of VkDevice * nativeptr<VkPipelineCreateInfoKHR> * nativeptr<VkPipelineBinaryKeyKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPipelineBinaryDataKHRDel = delegate of VkDevice * nativeptr<VkPipelineBinaryDataInfoKHR> * nativeptr<VkPipelineBinaryKeyKHR> * nativeptr<uint64> * nativeint -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkReleaseCapturedPipelineDataKHRDel = delegate of VkDevice * nativeptr<VkReleaseCapturedPipelineDataInfoKHR> * nativeptr<VkAllocationCallbacks> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRPipelineBinary")
                static let s_vkCreatePipelineBinariesKHRDel = VkRaw.vkImportInstanceDelegate<VkCreatePipelineBinariesKHRDel> "vkCreatePipelineBinariesKHR"
                static let s_vkDestroyPipelineBinaryKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroyPipelineBinaryKHRDel> "vkDestroyPipelineBinaryKHR"
                static let s_vkGetPipelineKeyKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPipelineKeyKHRDel> "vkGetPipelineKeyKHR"
                static let s_vkGetPipelineBinaryDataKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPipelineBinaryDataKHRDel> "vkGetPipelineBinaryDataKHR"
                static let s_vkReleaseCapturedPipelineDataKHRDel = VkRaw.vkImportInstanceDelegate<VkReleaseCapturedPipelineDataKHRDel> "vkReleaseCapturedPipelineDataKHR"
                static do Report.End(3) |> ignore
                static member vkCreatePipelineBinariesKHR = s_vkCreatePipelineBinariesKHRDel
                static member vkDestroyPipelineBinaryKHR = s_vkDestroyPipelineBinaryKHRDel
                static member vkGetPipelineKeyKHR = s_vkGetPipelineKeyKHRDel
                static member vkGetPipelineBinaryDataKHR = s_vkGetPipelineBinaryDataKHRDel
                static member vkReleaseCapturedPipelineDataKHR = s_vkReleaseCapturedPipelineDataKHRDel
            let vkCreatePipelineBinariesKHR(device : VkDevice, pCreateInfo : nativeptr<VkPipelineBinaryCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pBinaries : nativeptr<VkPipelineBinaryHandlesInfoKHR>) = Loader<unit>.vkCreatePipelineBinariesKHR.Invoke(device, pCreateInfo, pAllocator, pBinaries)
            let vkDestroyPipelineBinaryKHR(device : VkDevice, pipelineBinary : VkPipelineBinaryKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyPipelineBinaryKHR.Invoke(device, pipelineBinary, pAllocator)
            let vkGetPipelineKeyKHR(device : VkDevice, pPipelineCreateInfo : nativeptr<VkPipelineCreateInfoKHR>, pPipelineKey : nativeptr<VkPipelineBinaryKeyKHR>) = Loader<unit>.vkGetPipelineKeyKHR.Invoke(device, pPipelineCreateInfo, pPipelineKey)
            let vkGetPipelineBinaryDataKHR(device : VkDevice, pInfo : nativeptr<VkPipelineBinaryDataInfoKHR>, pPipelineBinaryKey : nativeptr<VkPipelineBinaryKeyKHR>, pPipelineBinaryDataSize : nativeptr<uint64>, pPipelineBinaryData : nativeint) = Loader<unit>.vkGetPipelineBinaryDataKHR.Invoke(device, pInfo, pPipelineBinaryKey, pPipelineBinaryDataSize, pPipelineBinaryData)
            let vkReleaseCapturedPipelineDataKHR(device : VkDevice, pInfo : nativeptr<VkReleaseCapturedPipelineDataInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkReleaseCapturedPipelineDataKHR.Invoke(device, pInfo, pAllocator)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module QCOMTileProperties =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_tile_properties"
        let Number = 485

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceTilePropertiesFeaturesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public tileProperties : VkBool32

                new(pNext: nativeint, tileProperties: VkBool32) =
                    {
                        sType = 1000484000u
                        pNext = pNext
                        tileProperties = tileProperties
                    }

                new(tileProperties: VkBool32) =
                    VkPhysicalDeviceTilePropertiesFeaturesQCOM(Unchecked.defaultof<nativeint>, tileProperties)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.tileProperties = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceTilePropertiesFeaturesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "tileProperties = %A" x.tileProperties
                    ] |> sprintf "VkPhysicalDeviceTilePropertiesFeaturesQCOM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkTilePropertiesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public tileSize : VkExtent3D
                val mutable public apronSize : VkExtent2D
                val mutable public origin : VkOffset2D

                new(pNext: nativeint, tileSize: VkExtent3D, apronSize: VkExtent2D, origin: VkOffset2D) =
                    {
                        sType = 1000484001u
                        pNext = pNext
                        tileSize = tileSize
                        apronSize = apronSize
                        origin = origin
                    }

                new(tileSize: VkExtent3D, apronSize: VkExtent2D, origin: VkOffset2D) =
                    VkTilePropertiesQCOM(Unchecked.defaultof<nativeint>, tileSize, apronSize, origin)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.tileSize = Unchecked.defaultof<VkExtent3D> && x.apronSize = Unchecked.defaultof<VkExtent2D> && x.origin = Unchecked.defaultof<VkOffset2D>

                static member Empty =
                    VkTilePropertiesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent3D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkOffset2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "tileSize = %A" x.tileSize
                        sprintf "apronSize = %A" x.apronSize
                        sprintf "origin = %A" x.origin
                    ] |> sprintf "VkTilePropertiesQCOM { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetFramebufferTilePropertiesQCOMDel = delegate of VkDevice * VkFramebuffer * nativeptr<uint32> * nativeptr<VkTilePropertiesQCOM> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDynamicRenderingTilePropertiesQCOMDel = delegate of VkDevice * nativeptr<Vulkan13.VkRenderingInfo> * nativeptr<VkTilePropertiesQCOM> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading QCOMTileProperties")
                static let s_vkGetFramebufferTilePropertiesQCOMDel = VkRaw.vkImportInstanceDelegate<VkGetFramebufferTilePropertiesQCOMDel> "vkGetFramebufferTilePropertiesQCOM"
                static let s_vkGetDynamicRenderingTilePropertiesQCOMDel = VkRaw.vkImportInstanceDelegate<VkGetDynamicRenderingTilePropertiesQCOMDel> "vkGetDynamicRenderingTilePropertiesQCOM"
                static do Report.End(3) |> ignore
                static member vkGetFramebufferTilePropertiesQCOM = s_vkGetFramebufferTilePropertiesQCOMDel
                static member vkGetDynamicRenderingTilePropertiesQCOM = s_vkGetDynamicRenderingTilePropertiesQCOMDel
            let vkGetFramebufferTilePropertiesQCOM(device : VkDevice, framebuffer : VkFramebuffer, pPropertiesCount : nativeptr<uint32>, pProperties : nativeptr<VkTilePropertiesQCOM>) = Loader<unit>.vkGetFramebufferTilePropertiesQCOM.Invoke(device, framebuffer, pPropertiesCount, pProperties)
            let vkGetDynamicRenderingTilePropertiesQCOM(device : VkDevice, pRenderingInfo : nativeptr<Vulkan13.VkRenderingInfo>, pProperties : nativeptr<VkTilePropertiesQCOM>) = Loader<unit>.vkGetDynamicRenderingTilePropertiesQCOM.Invoke(device, pRenderingInfo, pProperties)

        [<AutoOpen>]
        module ``KHRDynamicRendering | Vulkan13`` =
            type VkRenderingInfoKHR = Vulkan13.VkRenderingInfo



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module SECAmigoProfiling =
        let Type = ExtensionType.Device
        let Name = "VK_SEC_amigo_profiling"
        let Number = 486

        [<StructLayout(LayoutKind.Sequential)>]
        type VkAmigoProfilingSubmitInfoSEC =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public firstDrawTimestamp : uint64
                val mutable public swapBufferTimestamp : uint64

                new(pNext: nativeint, firstDrawTimestamp: uint64, swapBufferTimestamp: uint64) =
                    {
                        sType = 1000485001u
                        pNext = pNext
                        firstDrawTimestamp = firstDrawTimestamp
                        swapBufferTimestamp = swapBufferTimestamp
                    }

                new(firstDrawTimestamp: uint64, swapBufferTimestamp: uint64) =
                    VkAmigoProfilingSubmitInfoSEC(Unchecked.defaultof<nativeint>, firstDrawTimestamp, swapBufferTimestamp)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.firstDrawTimestamp = Unchecked.defaultof<uint64> && x.swapBufferTimestamp = Unchecked.defaultof<uint64>

                static member Empty =
                    VkAmigoProfilingSubmitInfoSEC(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "firstDrawTimestamp = %A" x.firstDrawTimestamp
                        sprintf "swapBufferTimestamp = %A" x.swapBufferTimestamp
                    ] |> sprintf "VkAmigoProfilingSubmitInfoSEC { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceAmigoProfilingFeaturesSEC =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public amigoProfiling : VkBool32

                new(pNext: nativeint, amigoProfiling: VkBool32) =
                    {
                        sType = 1000485000u
                        pNext = pNext
                        amigoProfiling = amigoProfiling
                    }

                new(amigoProfiling: VkBool32) =
                    VkPhysicalDeviceAmigoProfilingFeaturesSEC(Unchecked.defaultof<nativeint>, amigoProfiling)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.amigoProfiling = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceAmigoProfilingFeaturesSEC(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "amigoProfiling = %A" x.amigoProfiling
                    ] |> sprintf "VkPhysicalDeviceAmigoProfilingFeaturesSEC { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module QCOMMultiviewPerViewViewports =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_multiview_per_view_viewports"
        let Number = 489

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public multiviewPerViewViewports : VkBool32

                new(pNext: nativeint, multiviewPerViewViewports: VkBool32) =
                    {
                        sType = 1000488000u
                        pNext = pNext
                        multiviewPerViewViewports = multiviewPerViewViewports
                    }

                new(multiviewPerViewViewports: VkBool32) =
                    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(Unchecked.defaultof<nativeint>, multiviewPerViewViewports)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.multiviewPerViewViewports = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "multiviewPerViewViewports = %A" x.multiviewPerViewViewports
                    ] |> sprintf "VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM { %s }"
            end



    /// Requires KHRRayTracingPipeline.
    module NVRayTracingInvocationReorder =
        let Type = ExtensionType.Device
        let Name = "VK_NV_ray_tracing_invocation_reorder"
        let Number = 491

        type VkRayTracingInvocationReorderModeNV =
            | None = 0
            | Reorder = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public rayTracingInvocationReorder : VkBool32

                new(pNext: nativeint, rayTracingInvocationReorder: VkBool32) =
                    {
                        sType = 1000490000u
                        pNext = pNext
                        rayTracingInvocationReorder = rayTracingInvocationReorder
                    }

                new(rayTracingInvocationReorder: VkBool32) =
                    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(Unchecked.defaultof<nativeint>, rayTracingInvocationReorder)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.rayTracingInvocationReorder = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "rayTracingInvocationReorder = %A" x.rayTracingInvocationReorder
                    ] |> sprintf "VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public rayTracingInvocationReorderReorderingHint : VkRayTracingInvocationReorderModeNV

                new(pNext: nativeint, rayTracingInvocationReorderReorderingHint: VkRayTracingInvocationReorderModeNV) =
                    {
                        sType = 1000490001u
                        pNext = pNext
                        rayTracingInvocationReorderReorderingHint = rayTracingInvocationReorderReorderingHint
                    }

                new(rayTracingInvocationReorderReorderingHint: VkRayTracingInvocationReorderModeNV) =
                    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(Unchecked.defaultof<nativeint>, rayTracingInvocationReorderReorderingHint)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.rayTracingInvocationReorderReorderingHint = Unchecked.defaultof<VkRayTracingInvocationReorderModeNV>

                static member Empty =
                    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRayTracingInvocationReorderModeNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "rayTracingInvocationReorderReorderingHint = %A" x.rayTracingInvocationReorderReorderingHint
                    ] |> sprintf "VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV { %s }"
            end



    module NVCooperativeVector =
        let Type = ExtensionType.Device
        let Name = "VK_NV_cooperative_vector"
        let Number = 492

        type VkCooperativeVectorMatrixLayoutNV =
            | RowMajor = 0
            | ColumnMajor = 1
            | InferencingOptimal = 2
            | TrainingOptimal = 3

        type VkComponentTypeKHR = KHRCooperativeMatrix.VkComponentTypeKHR

        type VkDeviceOrHostAddressConstKHR = KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR

        type VkDeviceOrHostAddressKHR = KHRAccelerationStructure.VkDeviceOrHostAddressKHR

        [<StructLayout(LayoutKind.Sequential)>]
        type VkConvertCooperativeVectorMatrixInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public srcSize : uint64
                val mutable public srcData : KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR
                val mutable public pDstSize : nativeptr<uint64>
                val mutable public dstData : KHRAccelerationStructure.VkDeviceOrHostAddressKHR
                val mutable public srcComponentType : KHRCooperativeMatrix.VkComponentTypeKHR
                val mutable public dstComponentType : KHRCooperativeMatrix.VkComponentTypeKHR
                val mutable public numRows : uint32
                val mutable public numColumns : uint32
                val mutable public srcLayout : VkCooperativeVectorMatrixLayoutNV
                val mutable public srcStride : uint64
                val mutable public dstLayout : VkCooperativeVectorMatrixLayoutNV
                val mutable public dstStride : uint64

                new(pNext: nativeint, srcSize: uint64, srcData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, pDstSize: nativeptr<uint64>, dstData: KHRAccelerationStructure.VkDeviceOrHostAddressKHR, srcComponentType: KHRCooperativeMatrix.VkComponentTypeKHR, dstComponentType: KHRCooperativeMatrix.VkComponentTypeKHR, numRows: uint32, numColumns: uint32, srcLayout: VkCooperativeVectorMatrixLayoutNV, srcStride: uint64, dstLayout: VkCooperativeVectorMatrixLayoutNV, dstStride: uint64) =
                    {
                        sType = 1000491004u
                        pNext = pNext
                        srcSize = srcSize
                        srcData = srcData
                        pDstSize = pDstSize
                        dstData = dstData
                        srcComponentType = srcComponentType
                        dstComponentType = dstComponentType
                        numRows = numRows
                        numColumns = numColumns
                        srcLayout = srcLayout
                        srcStride = srcStride
                        dstLayout = dstLayout
                        dstStride = dstStride
                    }

                new(srcSize: uint64, srcData: KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR, pDstSize: nativeptr<uint64>, dstData: KHRAccelerationStructure.VkDeviceOrHostAddressKHR, srcComponentType: KHRCooperativeMatrix.VkComponentTypeKHR, dstComponentType: KHRCooperativeMatrix.VkComponentTypeKHR, numRows: uint32, numColumns: uint32, srcLayout: VkCooperativeVectorMatrixLayoutNV, srcStride: uint64, dstLayout: VkCooperativeVectorMatrixLayoutNV, dstStride: uint64) =
                    VkConvertCooperativeVectorMatrixInfoNV(Unchecked.defaultof<nativeint>, srcSize, srcData, pDstSize, dstData, srcComponentType, dstComponentType, numRows, numColumns, srcLayout, srcStride, dstLayout, dstStride)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.srcSize = Unchecked.defaultof<uint64> && x.srcData = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR> && x.pDstSize = Unchecked.defaultof<nativeptr<uint64>> && x.dstData = Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressKHR> && x.srcComponentType = Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR> && x.dstComponentType = Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR> && x.numRows = Unchecked.defaultof<uint32> && x.numColumns = Unchecked.defaultof<uint32> && x.srcLayout = Unchecked.defaultof<VkCooperativeVectorMatrixLayoutNV> && x.srcStride = Unchecked.defaultof<uint64> && x.dstLayout = Unchecked.defaultof<VkCooperativeVectorMatrixLayoutNV> && x.dstStride = Unchecked.defaultof<uint64>

                static member Empty =
                    VkConvertCooperativeVectorMatrixInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<nativeptr<uint64>>, Unchecked.defaultof<KHRAccelerationStructure.VkDeviceOrHostAddressKHR>, Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR>, Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkCooperativeVectorMatrixLayoutNV>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkCooperativeVectorMatrixLayoutNV>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "srcSize = %A" x.srcSize
                        sprintf "srcData = %A" x.srcData
                        sprintf "pDstSize = %A" x.pDstSize
                        sprintf "dstData = %A" x.dstData
                        sprintf "srcComponentType = %A" x.srcComponentType
                        sprintf "dstComponentType = %A" x.dstComponentType
                        sprintf "numRows = %A" x.numRows
                        sprintf "numColumns = %A" x.numColumns
                        sprintf "srcLayout = %A" x.srcLayout
                        sprintf "srcStride = %A" x.srcStride
                        sprintf "dstLayout = %A" x.dstLayout
                        sprintf "dstStride = %A" x.dstStride
                    ] |> sprintf "VkConvertCooperativeVectorMatrixInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCooperativeVectorPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public inputType : KHRCooperativeMatrix.VkComponentTypeKHR
                val mutable public inputInterpretation : KHRCooperativeMatrix.VkComponentTypeKHR
                val mutable public matrixInterpretation : KHRCooperativeMatrix.VkComponentTypeKHR
                val mutable public biasInterpretation : KHRCooperativeMatrix.VkComponentTypeKHR
                val mutable public resultType : KHRCooperativeMatrix.VkComponentTypeKHR
                val mutable public transpose : VkBool32

                new(pNext: nativeint, inputType: KHRCooperativeMatrix.VkComponentTypeKHR, inputInterpretation: KHRCooperativeMatrix.VkComponentTypeKHR, matrixInterpretation: KHRCooperativeMatrix.VkComponentTypeKHR, biasInterpretation: KHRCooperativeMatrix.VkComponentTypeKHR, resultType: KHRCooperativeMatrix.VkComponentTypeKHR, transpose: VkBool32) =
                    {
                        sType = 1000491002u
                        pNext = pNext
                        inputType = inputType
                        inputInterpretation = inputInterpretation
                        matrixInterpretation = matrixInterpretation
                        biasInterpretation = biasInterpretation
                        resultType = resultType
                        transpose = transpose
                    }

                new(inputType: KHRCooperativeMatrix.VkComponentTypeKHR, inputInterpretation: KHRCooperativeMatrix.VkComponentTypeKHR, matrixInterpretation: KHRCooperativeMatrix.VkComponentTypeKHR, biasInterpretation: KHRCooperativeMatrix.VkComponentTypeKHR, resultType: KHRCooperativeMatrix.VkComponentTypeKHR, transpose: VkBool32) =
                    VkCooperativeVectorPropertiesNV(Unchecked.defaultof<nativeint>, inputType, inputInterpretation, matrixInterpretation, biasInterpretation, resultType, transpose)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.inputType = Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR> && x.inputInterpretation = Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR> && x.matrixInterpretation = Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR> && x.biasInterpretation = Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR> && x.resultType = Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR> && x.transpose = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkCooperativeVectorPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR>, Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR>, Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR>, Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR>, Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "inputType = %A" x.inputType
                        sprintf "inputInterpretation = %A" x.inputInterpretation
                        sprintf "matrixInterpretation = %A" x.matrixInterpretation
                        sprintf "biasInterpretation = %A" x.biasInterpretation
                        sprintf "resultType = %A" x.resultType
                        sprintf "transpose = %A" x.transpose
                    ] |> sprintf "VkCooperativeVectorPropertiesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCooperativeVectorFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cooperativeVector : VkBool32
                val mutable public cooperativeVectorTraining : VkBool32

                new(pNext: nativeint, cooperativeVector: VkBool32, cooperativeVectorTraining: VkBool32) =
                    {
                        sType = 1000491000u
                        pNext = pNext
                        cooperativeVector = cooperativeVector
                        cooperativeVectorTraining = cooperativeVectorTraining
                    }

                new(cooperativeVector: VkBool32, cooperativeVectorTraining: VkBool32) =
                    VkPhysicalDeviceCooperativeVectorFeaturesNV(Unchecked.defaultof<nativeint>, cooperativeVector, cooperativeVectorTraining)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cooperativeVector = Unchecked.defaultof<VkBool32> && x.cooperativeVectorTraining = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCooperativeVectorFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cooperativeVector = %A" x.cooperativeVector
                        sprintf "cooperativeVectorTraining = %A" x.cooperativeVectorTraining
                    ] |> sprintf "VkPhysicalDeviceCooperativeVectorFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCooperativeVectorPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cooperativeVectorSupportedStages : VkShaderStageFlags
                val mutable public cooperativeVectorTrainingFloat16Accumulation : VkBool32
                val mutable public cooperativeVectorTrainingFloat32Accumulation : VkBool32
                val mutable public maxCooperativeVectorComponents : uint32

                new(pNext: nativeint, cooperativeVectorSupportedStages: VkShaderStageFlags, cooperativeVectorTrainingFloat16Accumulation: VkBool32, cooperativeVectorTrainingFloat32Accumulation: VkBool32, maxCooperativeVectorComponents: uint32) =
                    {
                        sType = 1000491001u
                        pNext = pNext
                        cooperativeVectorSupportedStages = cooperativeVectorSupportedStages
                        cooperativeVectorTrainingFloat16Accumulation = cooperativeVectorTrainingFloat16Accumulation
                        cooperativeVectorTrainingFloat32Accumulation = cooperativeVectorTrainingFloat32Accumulation
                        maxCooperativeVectorComponents = maxCooperativeVectorComponents
                    }

                new(cooperativeVectorSupportedStages: VkShaderStageFlags, cooperativeVectorTrainingFloat16Accumulation: VkBool32, cooperativeVectorTrainingFloat32Accumulation: VkBool32, maxCooperativeVectorComponents: uint32) =
                    VkPhysicalDeviceCooperativeVectorPropertiesNV(Unchecked.defaultof<nativeint>, cooperativeVectorSupportedStages, cooperativeVectorTrainingFloat16Accumulation, cooperativeVectorTrainingFloat32Accumulation, maxCooperativeVectorComponents)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cooperativeVectorSupportedStages = Unchecked.defaultof<VkShaderStageFlags> && x.cooperativeVectorTrainingFloat16Accumulation = Unchecked.defaultof<VkBool32> && x.cooperativeVectorTrainingFloat32Accumulation = Unchecked.defaultof<VkBool32> && x.maxCooperativeVectorComponents = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceCooperativeVectorPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cooperativeVectorSupportedStages = %A" x.cooperativeVectorSupportedStages
                        sprintf "cooperativeVectorTrainingFloat16Accumulation = %A" x.cooperativeVectorTrainingFloat16Accumulation
                        sprintf "cooperativeVectorTrainingFloat32Accumulation = %A" x.cooperativeVectorTrainingFloat32Accumulation
                        sprintf "maxCooperativeVectorComponents = %A" x.maxCooperativeVectorComponents
                    ] |> sprintf "VkPhysicalDeviceCooperativeVectorPropertiesNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRCooperativeMatrix.VkComponentTypeKHR with
                  static member inline Sint8PackedNv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 1000491000
                  static member inline Uint8PackedNv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 1000491001
                  static member inline FloatE4m3Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 1000491002
                  static member inline FloatE5m2Nv = enum<KHRCooperativeMatrix.VkComponentTypeKHR> 1000491003
             type Vulkan13.VkPipelineStageFlags2 with
                  static member inline PipelineStage2ConvertCooperativeVectorMatrixBitNv = enum<Vulkan13.VkPipelineStageFlags2> 0x00001000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceCooperativeVectorPropertiesNVDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkCooperativeVectorPropertiesNV> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkConvertCooperativeVectorMatrixNVDel = delegate of VkDevice * nativeptr<VkConvertCooperativeVectorMatrixInfoNV> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdConvertCooperativeVectorMatrixNVDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkConvertCooperativeVectorMatrixInfoNV> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVCooperativeVector")
                static let s_vkGetPhysicalDeviceCooperativeVectorPropertiesNVDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceCooperativeVectorPropertiesNVDel> "vkGetPhysicalDeviceCooperativeVectorPropertiesNV"
                static let s_vkConvertCooperativeVectorMatrixNVDel = VkRaw.vkImportInstanceDelegate<VkConvertCooperativeVectorMatrixNVDel> "vkConvertCooperativeVectorMatrixNV"
                static let s_vkCmdConvertCooperativeVectorMatrixNVDel = VkRaw.vkImportInstanceDelegate<VkCmdConvertCooperativeVectorMatrixNVDel> "vkCmdConvertCooperativeVectorMatrixNV"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceCooperativeVectorPropertiesNV = s_vkGetPhysicalDeviceCooperativeVectorPropertiesNVDel
                static member vkConvertCooperativeVectorMatrixNV = s_vkConvertCooperativeVectorMatrixNVDel
                static member vkCmdConvertCooperativeVectorMatrixNV = s_vkCmdConvertCooperativeVectorMatrixNVDel
            let vkGetPhysicalDeviceCooperativeVectorPropertiesNV(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkCooperativeVectorPropertiesNV>) = Loader<unit>.vkGetPhysicalDeviceCooperativeVectorPropertiesNV.Invoke(physicalDevice, pPropertyCount, pProperties)
            let vkConvertCooperativeVectorMatrixNV(device : VkDevice, pInfo : nativeptr<VkConvertCooperativeVectorMatrixInfoNV>) = Loader<unit>.vkConvertCooperativeVectorMatrixNV.Invoke(device, pInfo)
            let vkCmdConvertCooperativeVectorMatrixNV(commandBuffer : VkCommandBuffer, infoCount : uint32, pInfos : nativeptr<VkConvertCooperativeVectorMatrixInfoNV>) = Loader<unit>.vkCmdConvertCooperativeVectorMatrixNV.Invoke(commandBuffer, infoCount, pInfos)

    module NVExtendedSparseAddressSpace =
        let Type = ExtensionType.Device
        let Name = "VK_NV_extended_sparse_address_space"
        let Number = 493

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public extendedSparseAddressSpace : VkBool32

                new(pNext: nativeint, extendedSparseAddressSpace: VkBool32) =
                    {
                        sType = 1000492000u
                        pNext = pNext
                        extendedSparseAddressSpace = extendedSparseAddressSpace
                    }

                new(extendedSparseAddressSpace: VkBool32) =
                    VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(Unchecked.defaultof<nativeint>, extendedSparseAddressSpace)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.extendedSparseAddressSpace = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "extendedSparseAddressSpace = %A" x.extendedSparseAddressSpace
                    ] |> sprintf "VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public extendedSparseAddressSpaceSize : VkDeviceSize
                val mutable public extendedSparseImageUsageFlags : VkImageUsageFlags
                val mutable public extendedSparseBufferUsageFlags : VkBufferUsageFlags

                new(pNext: nativeint, extendedSparseAddressSpaceSize: VkDeviceSize, extendedSparseImageUsageFlags: VkImageUsageFlags, extendedSparseBufferUsageFlags: VkBufferUsageFlags) =
                    {
                        sType = 1000492001u
                        pNext = pNext
                        extendedSparseAddressSpaceSize = extendedSparseAddressSpaceSize
                        extendedSparseImageUsageFlags = extendedSparseImageUsageFlags
                        extendedSparseBufferUsageFlags = extendedSparseBufferUsageFlags
                    }

                new(extendedSparseAddressSpaceSize: VkDeviceSize, extendedSparseImageUsageFlags: VkImageUsageFlags, extendedSparseBufferUsageFlags: VkBufferUsageFlags) =
                    VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV(Unchecked.defaultof<nativeint>, extendedSparseAddressSpaceSize, extendedSparseImageUsageFlags, extendedSparseBufferUsageFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.extendedSparseAddressSpaceSize = Unchecked.defaultof<VkDeviceSize> && x.extendedSparseImageUsageFlags = Unchecked.defaultof<VkImageUsageFlags> && x.extendedSparseBufferUsageFlags = Unchecked.defaultof<VkBufferUsageFlags>

                static member Empty =
                    VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<VkBufferUsageFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "extendedSparseAddressSpaceSize = %A" x.extendedSparseAddressSpaceSize
                        sprintf "extendedSparseImageUsageFlags = %A" x.extendedSparseImageUsageFlags
                        sprintf "extendedSparseBufferUsageFlags = %A" x.extendedSparseBufferUsageFlags
                    ] |> sprintf "VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV { %s }"
            end



    /// Requires KHRMaintenance3.
    module EXTMutableDescriptorType =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_mutable_descriptor_type"
        let Number = 495

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMutableDescriptorTypeListEXT =
            struct
                val mutable public descriptorTypeCount : uint32
                val mutable public pDescriptorTypes : nativeptr<VkDescriptorType>

                new(descriptorTypeCount: uint32, pDescriptorTypes: nativeptr<VkDescriptorType>) =
                    {
                        descriptorTypeCount = descriptorTypeCount
                        pDescriptorTypes = pDescriptorTypes
                    }

                member x.IsEmpty =
                    x.descriptorTypeCount = Unchecked.defaultof<uint32> && x.pDescriptorTypes = Unchecked.defaultof<nativeptr<VkDescriptorType>>

                static member Empty =
                    VkMutableDescriptorTypeListEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorType>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "descriptorTypeCount = %A" x.descriptorTypeCount
                        sprintf "pDescriptorTypes = %A" x.pDescriptorTypes
                    ] |> sprintf "VkMutableDescriptorTypeListEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMutableDescriptorTypeCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public mutableDescriptorTypeListCount : uint32
                val mutable public pMutableDescriptorTypeLists : nativeptr<VkMutableDescriptorTypeListEXT>

                new(pNext: nativeint, mutableDescriptorTypeListCount: uint32, pMutableDescriptorTypeLists: nativeptr<VkMutableDescriptorTypeListEXT>) =
                    {
                        sType = 1000351002u
                        pNext = pNext
                        mutableDescriptorTypeListCount = mutableDescriptorTypeListCount
                        pMutableDescriptorTypeLists = pMutableDescriptorTypeLists
                    }

                new(mutableDescriptorTypeListCount: uint32, pMutableDescriptorTypeLists: nativeptr<VkMutableDescriptorTypeListEXT>) =
                    VkMutableDescriptorTypeCreateInfoEXT(Unchecked.defaultof<nativeint>, mutableDescriptorTypeListCount, pMutableDescriptorTypeLists)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.mutableDescriptorTypeListCount = Unchecked.defaultof<uint32> && x.pMutableDescriptorTypeLists = Unchecked.defaultof<nativeptr<VkMutableDescriptorTypeListEXT>>

                static member Empty =
                    VkMutableDescriptorTypeCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkMutableDescriptorTypeListEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "mutableDescriptorTypeListCount = %A" x.mutableDescriptorTypeListCount
                        sprintf "pMutableDescriptorTypeLists = %A" x.pMutableDescriptorTypeLists
                    ] |> sprintf "VkMutableDescriptorTypeCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public mutableDescriptorType : VkBool32

                new(pNext: nativeint, mutableDescriptorType: VkBool32) =
                    {
                        sType = 1000351000u
                        pNext = pNext
                        mutableDescriptorType = mutableDescriptorType
                    }

                new(mutableDescriptorType: VkBool32) =
                    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(Unchecked.defaultof<nativeint>, mutableDescriptorType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.mutableDescriptorType = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "mutableDescriptorType = %A" x.mutableDescriptorType
                    ] |> sprintf "VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDescriptorPoolCreateFlags with
                  static member inline HostOnlyBitExt = enum<VkDescriptorPoolCreateFlags> 0x00000004
             type VkDescriptorSetLayoutCreateFlags with
                  static member inline HostOnlyPoolBitExt = enum<VkDescriptorSetLayoutCreateFlags> 0x00000004
             type VkDescriptorType with
                  static member inline MutableExt = enum<VkDescriptorType> 1000351000


    /// Requires EXTVertexInputDynamicState.
    module EXTLegacyVertexAttributes =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_legacy_vertex_attributes"
        let Number = 496

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public legacyVertexAttributes : VkBool32

                new(pNext: nativeint, legacyVertexAttributes: VkBool32) =
                    {
                        sType = 1000495000u
                        pNext = pNext
                        legacyVertexAttributes = legacyVertexAttributes
                    }

                new(legacyVertexAttributes: VkBool32) =
                    VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT(Unchecked.defaultof<nativeint>, legacyVertexAttributes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.legacyVertexAttributes = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "legacyVertexAttributes = %A" x.legacyVertexAttributes
                    ] |> sprintf "VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public nativeUnalignedPerformance : VkBool32

                new(pNext: nativeint, nativeUnalignedPerformance: VkBool32) =
                    {
                        sType = 1000495001u
                        pNext = pNext
                        nativeUnalignedPerformance = nativeUnalignedPerformance
                    }

                new(nativeUnalignedPerformance: VkBool32) =
                    VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT(Unchecked.defaultof<nativeint>, nativeUnalignedPerformance)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.nativeUnalignedPerformance = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "nativeUnalignedPerformance = %A" x.nativeUnalignedPerformance
                    ] |> sprintf "VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT { %s }"
            end



    module EXTLayerSettings =
        let Type = ExtensionType.Instance
        let Name = "VK_EXT_layer_settings"
        let Number = 497

        type VkLayerSettingTypeEXT =
            | Bool32 = 0
            | Int32 = 1
            | Int64 = 2
            | Uint32 = 3
            | Uint64 = 4
            | Float32 = 5
            | Float64 = 6
            | String = 7


        [<StructLayout(LayoutKind.Sequential)>]
        type VkLayerSettingEXT =
            struct
                val mutable public pLayerName : cstr
                val mutable public pSettingName : cstr
                val mutable public _type : VkLayerSettingTypeEXT
                val mutable public valueCount : uint32
                val mutable public pValues : nativeint

                new(pLayerName: cstr, pSettingName: cstr, _type: VkLayerSettingTypeEXT, valueCount: uint32, pValues: nativeint) =
                    {
                        pLayerName = pLayerName
                        pSettingName = pSettingName
                        _type = _type
                        valueCount = valueCount
                        pValues = pValues
                    }

                member x.IsEmpty =
                    x.pLayerName = Unchecked.defaultof<cstr> && x.pSettingName = Unchecked.defaultof<cstr> && x._type = Unchecked.defaultof<VkLayerSettingTypeEXT> && x.valueCount = Unchecked.defaultof<uint32> && x.pValues = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkLayerSettingEXT(Unchecked.defaultof<cstr>, Unchecked.defaultof<cstr>, Unchecked.defaultof<VkLayerSettingTypeEXT>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pLayerName = %A" x.pLayerName
                        sprintf "pSettingName = %A" x.pSettingName
                        sprintf "_type = %A" x._type
                        sprintf "valueCount = %A" x.valueCount
                        sprintf "pValues = %A" x.pValues
                    ] |> sprintf "VkLayerSettingEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkLayerSettingsCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public settingCount : uint32
                val mutable public pSettings : nativeptr<VkLayerSettingEXT>

                new(pNext: nativeint, settingCount: uint32, pSettings: nativeptr<VkLayerSettingEXT>) =
                    {
                        sType = 1000496000u
                        pNext = pNext
                        settingCount = settingCount
                        pSettings = pSettings
                    }

                new(settingCount: uint32, pSettings: nativeptr<VkLayerSettingEXT>) =
                    VkLayerSettingsCreateInfoEXT(Unchecked.defaultof<nativeint>, settingCount, pSettings)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.settingCount = Unchecked.defaultof<uint32> && x.pSettings = Unchecked.defaultof<nativeptr<VkLayerSettingEXT>>

                static member Empty =
                    VkLayerSettingsCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkLayerSettingEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "settingCount = %A" x.settingCount
                        sprintf "pSettings = %A" x.pSettings
                    ] |> sprintf "VkLayerSettingsCreateInfoEXT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module ARMShaderCoreBuiltins =
        let Type = ExtensionType.Device
        let Name = "VK_ARM_shader_core_builtins"
        let Number = 498

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderCoreBuiltins : VkBool32

                new(pNext: nativeint, shaderCoreBuiltins: VkBool32) =
                    {
                        sType = 1000497000u
                        pNext = pNext
                        shaderCoreBuiltins = shaderCoreBuiltins
                    }

                new(shaderCoreBuiltins: VkBool32) =
                    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(Unchecked.defaultof<nativeint>, shaderCoreBuiltins)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderCoreBuiltins = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderCoreBuiltins = %A" x.shaderCoreBuiltins
                    ] |> sprintf "VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderCoreMask : uint64
                val mutable public shaderCoreCount : uint32
                val mutable public shaderWarpsPerCore : uint32

                new(pNext: nativeint, shaderCoreMask: uint64, shaderCoreCount: uint32, shaderWarpsPerCore: uint32) =
                    {
                        sType = 1000497001u
                        pNext = pNext
                        shaderCoreMask = shaderCoreMask
                        shaderCoreCount = shaderCoreCount
                        shaderWarpsPerCore = shaderWarpsPerCore
                    }

                new(shaderCoreMask: uint64, shaderCoreCount: uint32, shaderWarpsPerCore: uint32) =
                    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(Unchecked.defaultof<nativeint>, shaderCoreMask, shaderCoreCount, shaderWarpsPerCore)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderCoreMask = Unchecked.defaultof<uint64> && x.shaderCoreCount = Unchecked.defaultof<uint32> && x.shaderWarpsPerCore = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderCoreMask = %A" x.shaderCoreMask
                        sprintf "shaderCoreCount = %A" x.shaderCoreCount
                        sprintf "shaderWarpsPerCore = %A" x.shaderWarpsPerCore
                    ] |> sprintf "VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM { %s }"
            end



    /// Requires KHRRayTracingPipeline, KHRPipelineLibrary.
    module EXTPipelineLibraryGroupHandles =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_pipeline_library_group_handles"
        let Number = 499

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelineLibraryGroupHandles : VkBool32

                new(pNext: nativeint, pipelineLibraryGroupHandles: VkBool32) =
                    {
                        sType = 1000498000u
                        pNext = pNext
                        pipelineLibraryGroupHandles = pipelineLibraryGroupHandles
                    }

                new(pipelineLibraryGroupHandles: VkBool32) =
                    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(Unchecked.defaultof<nativeint>, pipelineLibraryGroupHandles)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelineLibraryGroupHandles = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelineLibraryGroupHandles = %A" x.pipelineLibraryGroupHandles
                    ] |> sprintf "VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT { %s }"
            end



    /// Requires ((KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRDynamicRendering) | Vulkan13.
    module EXTDynamicRenderingUnusedAttachments =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_dynamic_rendering_unused_attachments"
        let Number = 500

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public dynamicRenderingUnusedAttachments : VkBool32

                new(pNext: nativeint, dynamicRenderingUnusedAttachments: VkBool32) =
                    {
                        sType = 1000499000u
                        pNext = pNext
                        dynamicRenderingUnusedAttachments = dynamicRenderingUnusedAttachments
                    }

                new(dynamicRenderingUnusedAttachments: VkBool32) =
                    VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(Unchecked.defaultof<nativeint>, dynamicRenderingUnusedAttachments)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.dynamicRenderingUnusedAttachments = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "dynamicRenderingUnusedAttachments = %A" x.dynamicRenderingUnusedAttachments
                    ] |> sprintf "VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT { %s }"
            end



    /// Requires Vulkan12 | KHRTimelineSemaphore.
    module NVLowLatency2 =
        let Type = ExtensionType.Device
        let Name = "VK_NV_low_latency2"
        let Number = 506

        type VkLatencyMarkerNV =
            | SimulationStart = 0
            | SimulationEnd = 1
            | RendersubmitStart = 2
            | RendersubmitEnd = 3
            | PresentStart = 4
            | PresentEnd = 5
            | InputSample = 6
            | TriggerFlash = 7
            | OutOfBandRendersubmitStart = 8
            | OutOfBandRendersubmitEnd = 9
            | OutOfBandPresentStart = 10
            | OutOfBandPresentEnd = 11

        type VkOutOfBandQueueTypeNV =
            | Render = 0
            | Present = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkLatencyTimingsFrameReportNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentID : uint64
                val mutable public inputSampleTimeUs : uint64
                val mutable public simStartTimeUs : uint64
                val mutable public simEndTimeUs : uint64
                val mutable public renderSubmitStartTimeUs : uint64
                val mutable public renderSubmitEndTimeUs : uint64
                val mutable public presentStartTimeUs : uint64
                val mutable public presentEndTimeUs : uint64
                val mutable public driverStartTimeUs : uint64
                val mutable public driverEndTimeUs : uint64
                val mutable public osRenderQueueStartTimeUs : uint64
                val mutable public osRenderQueueEndTimeUs : uint64
                val mutable public gpuRenderStartTimeUs : uint64
                val mutable public gpuRenderEndTimeUs : uint64

                new(pNext: nativeint, presentID: uint64, inputSampleTimeUs: uint64, simStartTimeUs: uint64, simEndTimeUs: uint64, renderSubmitStartTimeUs: uint64, renderSubmitEndTimeUs: uint64, presentStartTimeUs: uint64, presentEndTimeUs: uint64, driverStartTimeUs: uint64, driverEndTimeUs: uint64, osRenderQueueStartTimeUs: uint64, osRenderQueueEndTimeUs: uint64, gpuRenderStartTimeUs: uint64, gpuRenderEndTimeUs: uint64) =
                    {
                        sType = 1000505004u
                        pNext = pNext
                        presentID = presentID
                        inputSampleTimeUs = inputSampleTimeUs
                        simStartTimeUs = simStartTimeUs
                        simEndTimeUs = simEndTimeUs
                        renderSubmitStartTimeUs = renderSubmitStartTimeUs
                        renderSubmitEndTimeUs = renderSubmitEndTimeUs
                        presentStartTimeUs = presentStartTimeUs
                        presentEndTimeUs = presentEndTimeUs
                        driverStartTimeUs = driverStartTimeUs
                        driverEndTimeUs = driverEndTimeUs
                        osRenderQueueStartTimeUs = osRenderQueueStartTimeUs
                        osRenderQueueEndTimeUs = osRenderQueueEndTimeUs
                        gpuRenderStartTimeUs = gpuRenderStartTimeUs
                        gpuRenderEndTimeUs = gpuRenderEndTimeUs
                    }

                new(presentID: uint64, inputSampleTimeUs: uint64, simStartTimeUs: uint64, simEndTimeUs: uint64, renderSubmitStartTimeUs: uint64, renderSubmitEndTimeUs: uint64, presentStartTimeUs: uint64, presentEndTimeUs: uint64, driverStartTimeUs: uint64, driverEndTimeUs: uint64, osRenderQueueStartTimeUs: uint64, osRenderQueueEndTimeUs: uint64, gpuRenderStartTimeUs: uint64, gpuRenderEndTimeUs: uint64) =
                    VkLatencyTimingsFrameReportNV(Unchecked.defaultof<nativeint>, presentID, inputSampleTimeUs, simStartTimeUs, simEndTimeUs, renderSubmitStartTimeUs, renderSubmitEndTimeUs, presentStartTimeUs, presentEndTimeUs, driverStartTimeUs, driverEndTimeUs, osRenderQueueStartTimeUs, osRenderQueueEndTimeUs, gpuRenderStartTimeUs, gpuRenderEndTimeUs)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentID = Unchecked.defaultof<uint64> && x.inputSampleTimeUs = Unchecked.defaultof<uint64> && x.simStartTimeUs = Unchecked.defaultof<uint64> && x.simEndTimeUs = Unchecked.defaultof<uint64> && x.renderSubmitStartTimeUs = Unchecked.defaultof<uint64> && x.renderSubmitEndTimeUs = Unchecked.defaultof<uint64> && x.presentStartTimeUs = Unchecked.defaultof<uint64> && x.presentEndTimeUs = Unchecked.defaultof<uint64> && x.driverStartTimeUs = Unchecked.defaultof<uint64> && x.driverEndTimeUs = Unchecked.defaultof<uint64> && x.osRenderQueueStartTimeUs = Unchecked.defaultof<uint64> && x.osRenderQueueEndTimeUs = Unchecked.defaultof<uint64> && x.gpuRenderStartTimeUs = Unchecked.defaultof<uint64> && x.gpuRenderEndTimeUs = Unchecked.defaultof<uint64>

                static member Empty =
                    VkLatencyTimingsFrameReportNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentID = %A" x.presentID
                        sprintf "inputSampleTimeUs = %A" x.inputSampleTimeUs
                        sprintf "simStartTimeUs = %A" x.simStartTimeUs
                        sprintf "simEndTimeUs = %A" x.simEndTimeUs
                        sprintf "renderSubmitStartTimeUs = %A" x.renderSubmitStartTimeUs
                        sprintf "renderSubmitEndTimeUs = %A" x.renderSubmitEndTimeUs
                        sprintf "presentStartTimeUs = %A" x.presentStartTimeUs
                        sprintf "presentEndTimeUs = %A" x.presentEndTimeUs
                        sprintf "driverStartTimeUs = %A" x.driverStartTimeUs
                        sprintf "driverEndTimeUs = %A" x.driverEndTimeUs
                        sprintf "osRenderQueueStartTimeUs = %A" x.osRenderQueueStartTimeUs
                        sprintf "osRenderQueueEndTimeUs = %A" x.osRenderQueueEndTimeUs
                        sprintf "gpuRenderStartTimeUs = %A" x.gpuRenderStartTimeUs
                        sprintf "gpuRenderEndTimeUs = %A" x.gpuRenderEndTimeUs
                    ] |> sprintf "VkLatencyTimingsFrameReportNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGetLatencyMarkerInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public timingCount : uint32
                val mutable public pTimings : nativeptr<VkLatencyTimingsFrameReportNV>

                new(pNext: nativeint, timingCount: uint32, pTimings: nativeptr<VkLatencyTimingsFrameReportNV>) =
                    {
                        sType = 1000505003u
                        pNext = pNext
                        timingCount = timingCount
                        pTimings = pTimings
                    }

                new(timingCount: uint32, pTimings: nativeptr<VkLatencyTimingsFrameReportNV>) =
                    VkGetLatencyMarkerInfoNV(Unchecked.defaultof<nativeint>, timingCount, pTimings)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.timingCount = Unchecked.defaultof<uint32> && x.pTimings = Unchecked.defaultof<nativeptr<VkLatencyTimingsFrameReportNV>>

                static member Empty =
                    VkGetLatencyMarkerInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkLatencyTimingsFrameReportNV>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "timingCount = %A" x.timingCount
                        sprintf "pTimings = %A" x.pTimings
                    ] |> sprintf "VkGetLatencyMarkerInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkLatencySleepInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public signalSemaphore : VkSemaphore
                val mutable public value : uint64

                new(pNext: nativeint, signalSemaphore: VkSemaphore, value: uint64) =
                    {
                        sType = 1000505001u
                        pNext = pNext
                        signalSemaphore = signalSemaphore
                        value = value
                    }

                new(signalSemaphore: VkSemaphore, value: uint64) =
                    VkLatencySleepInfoNV(Unchecked.defaultof<nativeint>, signalSemaphore, value)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.signalSemaphore = Unchecked.defaultof<VkSemaphore> && x.value = Unchecked.defaultof<uint64>

                static member Empty =
                    VkLatencySleepInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "signalSemaphore = %A" x.signalSemaphore
                        sprintf "value = %A" x.value
                    ] |> sprintf "VkLatencySleepInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkLatencySleepModeInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public lowLatencyMode : VkBool32
                val mutable public lowLatencyBoost : VkBool32
                val mutable public minimumIntervalUs : uint32

                new(pNext: nativeint, lowLatencyMode: VkBool32, lowLatencyBoost: VkBool32, minimumIntervalUs: uint32) =
                    {
                        sType = 1000505000u
                        pNext = pNext
                        lowLatencyMode = lowLatencyMode
                        lowLatencyBoost = lowLatencyBoost
                        minimumIntervalUs = minimumIntervalUs
                    }

                new(lowLatencyMode: VkBool32, lowLatencyBoost: VkBool32, minimumIntervalUs: uint32) =
                    VkLatencySleepModeInfoNV(Unchecked.defaultof<nativeint>, lowLatencyMode, lowLatencyBoost, minimumIntervalUs)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.lowLatencyMode = Unchecked.defaultof<VkBool32> && x.lowLatencyBoost = Unchecked.defaultof<VkBool32> && x.minimumIntervalUs = Unchecked.defaultof<uint32>

                static member Empty =
                    VkLatencySleepModeInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "lowLatencyMode = %A" x.lowLatencyMode
                        sprintf "lowLatencyBoost = %A" x.lowLatencyBoost
                        sprintf "minimumIntervalUs = %A" x.minimumIntervalUs
                    ] |> sprintf "VkLatencySleepModeInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkLatencySubmissionPresentIdNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentID : uint64

                new(pNext: nativeint, presentID: uint64) =
                    {
                        sType = 1000505005u
                        pNext = pNext
                        presentID = presentID
                    }

                new(presentID: uint64) =
                    VkLatencySubmissionPresentIdNV(Unchecked.defaultof<nativeint>, presentID)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentID = Unchecked.defaultof<uint64>

                static member Empty =
                    VkLatencySubmissionPresentIdNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentID = %A" x.presentID
                    ] |> sprintf "VkLatencySubmissionPresentIdNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkLatencySurfaceCapabilitiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentModeCount : uint32
                val mutable public pPresentModes : nativeptr<KHRSurface.VkPresentModeKHR>

                new(pNext: nativeint, presentModeCount: uint32, pPresentModes: nativeptr<KHRSurface.VkPresentModeKHR>) =
                    {
                        sType = 1000505008u
                        pNext = pNext
                        presentModeCount = presentModeCount
                        pPresentModes = pPresentModes
                    }

                new(presentModeCount: uint32, pPresentModes: nativeptr<KHRSurface.VkPresentModeKHR>) =
                    VkLatencySurfaceCapabilitiesNV(Unchecked.defaultof<nativeint>, presentModeCount, pPresentModes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentModeCount = Unchecked.defaultof<uint32> && x.pPresentModes = Unchecked.defaultof<nativeptr<KHRSurface.VkPresentModeKHR>>

                static member Empty =
                    VkLatencySurfaceCapabilitiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<KHRSurface.VkPresentModeKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentModeCount = %A" x.presentModeCount
                        sprintf "pPresentModes = %A" x.pPresentModes
                    ] |> sprintf "VkLatencySurfaceCapabilitiesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkOutOfBandQueueTypeInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public queueType : VkOutOfBandQueueTypeNV

                new(pNext: nativeint, queueType: VkOutOfBandQueueTypeNV) =
                    {
                        sType = 1000505006u
                        pNext = pNext
                        queueType = queueType
                    }

                new(queueType: VkOutOfBandQueueTypeNV) =
                    VkOutOfBandQueueTypeInfoNV(Unchecked.defaultof<nativeint>, queueType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.queueType = Unchecked.defaultof<VkOutOfBandQueueTypeNV>

                static member Empty =
                    VkOutOfBandQueueTypeInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkOutOfBandQueueTypeNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "queueType = %A" x.queueType
                    ] |> sprintf "VkOutOfBandQueueTypeInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSetLatencyMarkerInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentID : uint64
                val mutable public marker : VkLatencyMarkerNV

                new(pNext: nativeint, presentID: uint64, marker: VkLatencyMarkerNV) =
                    {
                        sType = 1000505002u
                        pNext = pNext
                        presentID = presentID
                        marker = marker
                    }

                new(presentID: uint64, marker: VkLatencyMarkerNV) =
                    VkSetLatencyMarkerInfoNV(Unchecked.defaultof<nativeint>, presentID, marker)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentID = Unchecked.defaultof<uint64> && x.marker = Unchecked.defaultof<VkLatencyMarkerNV>

                static member Empty =
                    VkSetLatencyMarkerInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkLatencyMarkerNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentID = %A" x.presentID
                        sprintf "marker = %A" x.marker
                    ] |> sprintf "VkSetLatencyMarkerInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSwapchainLatencyCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public latencyModeEnable : VkBool32

                new(pNext: nativeint, latencyModeEnable: VkBool32) =
                    {
                        sType = 1000505007u
                        pNext = pNext
                        latencyModeEnable = latencyModeEnable
                    }

                new(latencyModeEnable: VkBool32) =
                    VkSwapchainLatencyCreateInfoNV(Unchecked.defaultof<nativeint>, latencyModeEnable)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.latencyModeEnable = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkSwapchainLatencyCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "latencyModeEnable = %A" x.latencyModeEnable
                    ] |> sprintf "VkSwapchainLatencyCreateInfoNV { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkSetLatencySleepModeNVDel = delegate of VkDevice * KHRSwapchain.VkSwapchainKHR * nativeptr<VkLatencySleepModeInfoNV> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkLatencySleepNVDel = delegate of VkDevice * KHRSwapchain.VkSwapchainKHR * nativeptr<VkLatencySleepInfoNV> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkSetLatencyMarkerNVDel = delegate of VkDevice * KHRSwapchain.VkSwapchainKHR * nativeptr<VkSetLatencyMarkerInfoNV> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetLatencyTimingsNVDel = delegate of VkDevice * KHRSwapchain.VkSwapchainKHR * nativeptr<VkGetLatencyMarkerInfoNV> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkQueueNotifyOutOfBandNVDel = delegate of VkQueue * nativeptr<VkOutOfBandQueueTypeInfoNV> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVLowLatency2")
                static let s_vkSetLatencySleepModeNVDel = VkRaw.vkImportInstanceDelegate<VkSetLatencySleepModeNVDel> "vkSetLatencySleepModeNV"
                static let s_vkLatencySleepNVDel = VkRaw.vkImportInstanceDelegate<VkLatencySleepNVDel> "vkLatencySleepNV"
                static let s_vkSetLatencyMarkerNVDel = VkRaw.vkImportInstanceDelegate<VkSetLatencyMarkerNVDel> "vkSetLatencyMarkerNV"
                static let s_vkGetLatencyTimingsNVDel = VkRaw.vkImportInstanceDelegate<VkGetLatencyTimingsNVDel> "vkGetLatencyTimingsNV"
                static let s_vkQueueNotifyOutOfBandNVDel = VkRaw.vkImportInstanceDelegate<VkQueueNotifyOutOfBandNVDel> "vkQueueNotifyOutOfBandNV"
                static do Report.End(3) |> ignore
                static member vkSetLatencySleepModeNV = s_vkSetLatencySleepModeNVDel
                static member vkLatencySleepNV = s_vkLatencySleepNVDel
                static member vkSetLatencyMarkerNV = s_vkSetLatencyMarkerNVDel
                static member vkGetLatencyTimingsNV = s_vkGetLatencyTimingsNVDel
                static member vkQueueNotifyOutOfBandNV = s_vkQueueNotifyOutOfBandNVDel
            let vkSetLatencySleepModeNV(device : VkDevice, swapchain : KHRSwapchain.VkSwapchainKHR, pSleepModeInfo : nativeptr<VkLatencySleepModeInfoNV>) = Loader<unit>.vkSetLatencySleepModeNV.Invoke(device, swapchain, pSleepModeInfo)
            let vkLatencySleepNV(device : VkDevice, swapchain : KHRSwapchain.VkSwapchainKHR, pSleepInfo : nativeptr<VkLatencySleepInfoNV>) = Loader<unit>.vkLatencySleepNV.Invoke(device, swapchain, pSleepInfo)
            let vkSetLatencyMarkerNV(device : VkDevice, swapchain : KHRSwapchain.VkSwapchainKHR, pLatencyMarkerInfo : nativeptr<VkSetLatencyMarkerInfoNV>) = Loader<unit>.vkSetLatencyMarkerNV.Invoke(device, swapchain, pLatencyMarkerInfo)
            let vkGetLatencyTimingsNV(device : VkDevice, swapchain : KHRSwapchain.VkSwapchainKHR, pLatencyMarkerInfo : nativeptr<VkGetLatencyMarkerInfoNV>) = Loader<unit>.vkGetLatencyTimingsNV.Invoke(device, swapchain, pLatencyMarkerInfo)
            let vkQueueNotifyOutOfBandNV(queue : VkQueue, pQueueTypeInfo : nativeptr<VkOutOfBandQueueTypeInfoNV>) = Loader<unit>.vkQueueNotifyOutOfBandNV.Invoke(queue, pQueueTypeInfo)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module KHRCooperativeMatrix =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_cooperative_matrix"
        let Number = 507

        type VkScopeKHR =
            | Device = 1
            | Workgroup = 2
            | Subgroup = 3
            | QueueFamily = 5

        type VkComponentTypeKHR =
            | Float16 = 0
            | Float32 = 1
            | Float64 = 2
            | Sint8 = 3
            | Sint16 = 4
            | Sint32 = 5
            | Sint64 = 6
            | Uint8 = 7
            | Uint16 = 8
            | Uint32 = 9
            | Uint64 = 10


        [<StructLayout(LayoutKind.Sequential)>]
        type VkCooperativeMatrixPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public MSize : uint32
                val mutable public NSize : uint32
                val mutable public KSize : uint32
                val mutable public AType : VkComponentTypeKHR
                val mutable public BType : VkComponentTypeKHR
                val mutable public CType : VkComponentTypeKHR
                val mutable public ResultType : VkComponentTypeKHR
                val mutable public saturatingAccumulation : VkBool32
                val mutable public scope : VkScopeKHR

                new(pNext: nativeint, MSize: uint32, NSize: uint32, KSize: uint32, AType: VkComponentTypeKHR, BType: VkComponentTypeKHR, CType: VkComponentTypeKHR, ResultType: VkComponentTypeKHR, saturatingAccumulation: VkBool32, scope: VkScopeKHR) =
                    {
                        sType = 1000506001u
                        pNext = pNext
                        MSize = MSize
                        NSize = NSize
                        KSize = KSize
                        AType = AType
                        BType = BType
                        CType = CType
                        ResultType = ResultType
                        saturatingAccumulation = saturatingAccumulation
                        scope = scope
                    }

                new(MSize: uint32, NSize: uint32, KSize: uint32, AType: VkComponentTypeKHR, BType: VkComponentTypeKHR, CType: VkComponentTypeKHR, ResultType: VkComponentTypeKHR, saturatingAccumulation: VkBool32, scope: VkScopeKHR) =
                    VkCooperativeMatrixPropertiesKHR(Unchecked.defaultof<nativeint>, MSize, NSize, KSize, AType, BType, CType, ResultType, saturatingAccumulation, scope)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.MSize = Unchecked.defaultof<uint32> && x.NSize = Unchecked.defaultof<uint32> && x.KSize = Unchecked.defaultof<uint32> && x.AType = Unchecked.defaultof<VkComponentTypeKHR> && x.BType = Unchecked.defaultof<VkComponentTypeKHR> && x.CType = Unchecked.defaultof<VkComponentTypeKHR> && x.ResultType = Unchecked.defaultof<VkComponentTypeKHR> && x.saturatingAccumulation = Unchecked.defaultof<VkBool32> && x.scope = Unchecked.defaultof<VkScopeKHR>

                static member Empty =
                    VkCooperativeMatrixPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkComponentTypeKHR>, Unchecked.defaultof<VkComponentTypeKHR>, Unchecked.defaultof<VkComponentTypeKHR>, Unchecked.defaultof<VkComponentTypeKHR>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkScopeKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "MSize = %A" x.MSize
                        sprintf "NSize = %A" x.NSize
                        sprintf "KSize = %A" x.KSize
                        sprintf "AType = %A" x.AType
                        sprintf "BType = %A" x.BType
                        sprintf "CType = %A" x.CType
                        sprintf "ResultType = %A" x.ResultType
                        sprintf "saturatingAccumulation = %A" x.saturatingAccumulation
                        sprintf "scope = %A" x.scope
                    ] |> sprintf "VkCooperativeMatrixPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCooperativeMatrixFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cooperativeMatrix : VkBool32
                val mutable public cooperativeMatrixRobustBufferAccess : VkBool32

                new(pNext: nativeint, cooperativeMatrix: VkBool32, cooperativeMatrixRobustBufferAccess: VkBool32) =
                    {
                        sType = 1000506000u
                        pNext = pNext
                        cooperativeMatrix = cooperativeMatrix
                        cooperativeMatrixRobustBufferAccess = cooperativeMatrixRobustBufferAccess
                    }

                new(cooperativeMatrix: VkBool32, cooperativeMatrixRobustBufferAccess: VkBool32) =
                    VkPhysicalDeviceCooperativeMatrixFeaturesKHR(Unchecked.defaultof<nativeint>, cooperativeMatrix, cooperativeMatrixRobustBufferAccess)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cooperativeMatrix = Unchecked.defaultof<VkBool32> && x.cooperativeMatrixRobustBufferAccess = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCooperativeMatrixFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cooperativeMatrix = %A" x.cooperativeMatrix
                        sprintf "cooperativeMatrixRobustBufferAccess = %A" x.cooperativeMatrixRobustBufferAccess
                    ] |> sprintf "VkPhysicalDeviceCooperativeMatrixFeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCooperativeMatrixPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cooperativeMatrixSupportedStages : VkShaderStageFlags

                new(pNext: nativeint, cooperativeMatrixSupportedStages: VkShaderStageFlags) =
                    {
                        sType = 1000506002u
                        pNext = pNext
                        cooperativeMatrixSupportedStages = cooperativeMatrixSupportedStages
                    }

                new(cooperativeMatrixSupportedStages: VkShaderStageFlags) =
                    VkPhysicalDeviceCooperativeMatrixPropertiesKHR(Unchecked.defaultof<nativeint>, cooperativeMatrixSupportedStages)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cooperativeMatrixSupportedStages = Unchecked.defaultof<VkShaderStageFlags>

                static member Empty =
                    VkPhysicalDeviceCooperativeMatrixPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderStageFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cooperativeMatrixSupportedStages = %A" x.cooperativeMatrixSupportedStages
                    ] |> sprintf "VkPhysicalDeviceCooperativeMatrixPropertiesKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceCooperativeMatrixPropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkCooperativeMatrixPropertiesKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRCooperativeMatrix")
                static let s_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceCooperativeMatrixPropertiesKHRDel> "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = s_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHRDel
            let vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkCooperativeMatrixPropertiesKHR>) = Loader<unit>.vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR.Invoke(physicalDevice, pPropertyCount, pProperties)

    module QCOMMultiviewPerViewRenderAreas =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_multiview_per_view_render_areas"
        let Number = 511

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public perViewRenderAreaCount : uint32
                val mutable public pPerViewRenderAreas : nativeptr<VkRect2D>

                new(pNext: nativeint, perViewRenderAreaCount: uint32, pPerViewRenderAreas: nativeptr<VkRect2D>) =
                    {
                        sType = 1000510001u
                        pNext = pNext
                        perViewRenderAreaCount = perViewRenderAreaCount
                        pPerViewRenderAreas = pPerViewRenderAreas
                    }

                new(perViewRenderAreaCount: uint32, pPerViewRenderAreas: nativeptr<VkRect2D>) =
                    VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(Unchecked.defaultof<nativeint>, perViewRenderAreaCount, pPerViewRenderAreas)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.perViewRenderAreaCount = Unchecked.defaultof<uint32> && x.pPerViewRenderAreas = Unchecked.defaultof<nativeptr<VkRect2D>>

                static member Empty =
                    VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRect2D>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "perViewRenderAreaCount = %A" x.perViewRenderAreaCount
                        sprintf "pPerViewRenderAreas = %A" x.pPerViewRenderAreas
                    ] |> sprintf "VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public multiviewPerViewRenderAreas : VkBool32

                new(pNext: nativeint, multiviewPerViewRenderAreas: VkBool32) =
                    {
                        sType = 1000510000u
                        pNext = pNext
                        multiviewPerViewRenderAreas = multiviewPerViewRenderAreas
                    }

                new(multiviewPerViewRenderAreas: VkBool32) =
                    VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(Unchecked.defaultof<nativeint>, multiviewPerViewRenderAreas)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.multiviewPerViewRenderAreas = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "multiviewPerViewRenderAreas = %A" x.multiviewPerViewRenderAreas
                    ] |> sprintf "VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2.
    module KHRComputeShaderDerivatives =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_compute_shader_derivatives"
        let Number = 512

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public computeDerivativeGroupQuads : VkBool32
                val mutable public computeDerivativeGroupLinear : VkBool32

                new(pNext: nativeint, computeDerivativeGroupQuads: VkBool32, computeDerivativeGroupLinear: VkBool32) =
                    {
                        sType = 1000201000u
                        pNext = pNext
                        computeDerivativeGroupQuads = computeDerivativeGroupQuads
                        computeDerivativeGroupLinear = computeDerivativeGroupLinear
                    }

                new(computeDerivativeGroupQuads: VkBool32, computeDerivativeGroupLinear: VkBool32) =
                    VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR(Unchecked.defaultof<nativeint>, computeDerivativeGroupQuads, computeDerivativeGroupLinear)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.computeDerivativeGroupQuads = Unchecked.defaultof<VkBool32> && x.computeDerivativeGroupLinear = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "computeDerivativeGroupQuads = %A" x.computeDerivativeGroupQuads
                        sprintf "computeDerivativeGroupLinear = %A" x.computeDerivativeGroupLinear
                    ] |> sprintf "VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public meshAndTaskShaderDerivatives : VkBool32

                new(pNext: nativeint, meshAndTaskShaderDerivatives: VkBool32) =
                    {
                        sType = 1000511000u
                        pNext = pNext
                        meshAndTaskShaderDerivatives = meshAndTaskShaderDerivatives
                    }

                new(meshAndTaskShaderDerivatives: VkBool32) =
                    VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR(Unchecked.defaultof<nativeint>, meshAndTaskShaderDerivatives)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.meshAndTaskShaderDerivatives = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "meshAndTaskShaderDerivatives = %A" x.meshAndTaskShaderDerivatives
                    ] |> sprintf "VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR { %s }"
            end



    /// Requires KHRVideoDecodeQueue.
    module KHRVideoDecodeAv1 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_video_decode_av1"
        let Number = 513

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeAV1CapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxLevel : nativeint

                new(pNext: nativeint, maxLevel: nativeint) =
                    {
                        sType = 1000512000u
                        pNext = pNext
                        maxLevel = maxLevel
                    }

                new(maxLevel: nativeint) =
                    VkVideoDecodeAV1CapabilitiesKHR(Unchecked.defaultof<nativeint>, maxLevel)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxLevel = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkVideoDecodeAV1CapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxLevel = %A" x.maxLevel
                    ] |> sprintf "VkVideoDecodeAV1CapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeAV1DpbSlotInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pStdReferenceInfo : nativeptr<nativeint>

                new(pNext: nativeint, pStdReferenceInfo: nativeptr<nativeint>) =
                    {
                        sType = 1000512005u
                        pNext = pNext
                        pStdReferenceInfo = pStdReferenceInfo
                    }

                new(pStdReferenceInfo: nativeptr<nativeint>) =
                    VkVideoDecodeAV1DpbSlotInfoKHR(Unchecked.defaultof<nativeint>, pStdReferenceInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pStdReferenceInfo = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoDecodeAV1DpbSlotInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pStdReferenceInfo = %A" x.pStdReferenceInfo
                    ] |> sprintf "VkVideoDecodeAV1DpbSlotInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeAV1PictureInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pStdPictureInfo : nativeptr<nativeint>
                val mutable public referenceNameSlotIndices : int32_7
                val mutable public frameHeaderOffset : uint32
                val mutable public tileCount : uint32
                val mutable public pTileOffsets : nativeptr<uint32>
                val mutable public pTileSizes : nativeptr<uint32>

                new(pNext: nativeint, pStdPictureInfo: nativeptr<nativeint>, referenceNameSlotIndices: int32_7, frameHeaderOffset: uint32, tileCount: uint32, pTileOffsets: nativeptr<uint32>, pTileSizes: nativeptr<uint32>) =
                    {
                        sType = 1000512001u
                        pNext = pNext
                        pStdPictureInfo = pStdPictureInfo
                        referenceNameSlotIndices = referenceNameSlotIndices
                        frameHeaderOffset = frameHeaderOffset
                        tileCount = tileCount
                        pTileOffsets = pTileOffsets
                        pTileSizes = pTileSizes
                    }

                new(pStdPictureInfo: nativeptr<nativeint>, referenceNameSlotIndices: int32_7, frameHeaderOffset: uint32, tileCount: uint32, pTileOffsets: nativeptr<uint32>, pTileSizes: nativeptr<uint32>) =
                    VkVideoDecodeAV1PictureInfoKHR(Unchecked.defaultof<nativeint>, pStdPictureInfo, referenceNameSlotIndices, frameHeaderOffset, tileCount, pTileOffsets, pTileSizes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pStdPictureInfo = Unchecked.defaultof<nativeptr<nativeint>> && x.referenceNameSlotIndices = Unchecked.defaultof<int32_7> && x.frameHeaderOffset = Unchecked.defaultof<uint32> && x.tileCount = Unchecked.defaultof<uint32> && x.pTileOffsets = Unchecked.defaultof<nativeptr<uint32>> && x.pTileSizes = Unchecked.defaultof<nativeptr<uint32>>

                static member Empty =
                    VkVideoDecodeAV1PictureInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<int32_7>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<nativeptr<uint32>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pStdPictureInfo = %A" x.pStdPictureInfo
                        sprintf "referenceNameSlotIndices = %A" x.referenceNameSlotIndices
                        sprintf "frameHeaderOffset = %A" x.frameHeaderOffset
                        sprintf "tileCount = %A" x.tileCount
                        sprintf "pTileOffsets = %A" x.pTileOffsets
                        sprintf "pTileSizes = %A" x.pTileSizes
                    ] |> sprintf "VkVideoDecodeAV1PictureInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeAV1ProfileInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stdProfile : nativeint
                val mutable public filmGrainSupport : VkBool32

                new(pNext: nativeint, stdProfile: nativeint, filmGrainSupport: VkBool32) =
                    {
                        sType = 1000512003u
                        pNext = pNext
                        stdProfile = stdProfile
                        filmGrainSupport = filmGrainSupport
                    }

                new(stdProfile: nativeint, filmGrainSupport: VkBool32) =
                    VkVideoDecodeAV1ProfileInfoKHR(Unchecked.defaultof<nativeint>, stdProfile, filmGrainSupport)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stdProfile = Unchecked.defaultof<nativeint> && x.filmGrainSupport = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkVideoDecodeAV1ProfileInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stdProfile = %A" x.stdProfile
                        sprintf "filmGrainSupport = %A" x.filmGrainSupport
                    ] |> sprintf "VkVideoDecodeAV1ProfileInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoDecodeAV1SessionParametersCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pStdSequenceHeader : nativeptr<nativeint>

                new(pNext: nativeint, pStdSequenceHeader: nativeptr<nativeint>) =
                    {
                        sType = 1000512004u
                        pNext = pNext
                        pStdSequenceHeader = pStdSequenceHeader
                    }

                new(pStdSequenceHeader: nativeptr<nativeint>) =
                    VkVideoDecodeAV1SessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, pStdSequenceHeader)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pStdSequenceHeader = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoDecodeAV1SessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pStdSequenceHeader = %A" x.pStdSequenceHeader
                    ] |> sprintf "VkVideoDecodeAV1SessionParametersCreateInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRVideoQueue.VkVideoCodecOperationFlagsKHR with
                  static member inline DecodeAv1Bit = enum<KHRVideoQueue.VkVideoCodecOperationFlagsKHR> 0x00000004


    /// Requires KHRVideoEncodeQueue.
    module KHRVideoEncodeAv1 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_video_encode_av1"
        let Number = 514

        type VkVideoEncodeAV1PredictionModeKHR =
            | VideoEncodeAv1PredictionModeIntraOnly = 0
            | VideoEncodeAv1PredictionModeSingleReference = 1
            | VideoEncodeAv1PredictionModeUnidirectionalCompound = 2
            | VideoEncodeAv1PredictionModeBidirectionalCompound = 3

        type VkVideoEncodeAV1RateControlGroupKHR =
            | VideoEncodeAv1RateControlGroupIntra = 0
            | VideoEncodeAv1RateControlGroupPredictive = 1
            | VideoEncodeAv1RateControlGroupBipredictive = 2

        [<Flags>]
        type VkVideoEncodeAV1CapabilityFlagsKHR =
            | All = 31
            | None = 0
            | VideoEncodeAv1CapabilityPerRateControlGroupMinMaxQIndexBit = 0x00000001
            | VideoEncodeAv1CapabilityGenerateObuExtensionHeaderBit = 0x00000002
            | VideoEncodeAv1CapabilityPrimaryReferenceCdfOnlyBit = 0x00000004
            | VideoEncodeAv1CapabilityFrameSizeOverrideBit = 0x00000008
            | VideoEncodeAv1CapabilityMotionVectorScalingBit = 0x00000010

        [<Flags>]
        type VkVideoEncodeAV1StdFlagsKHR =
            | All = 15
            | None = 0
            | VideoEncodeAv1StdUniformTileSpacingFlagSetBit = 0x00000001
            | VideoEncodeAv1StdSkipModePresentUnsetBit = 0x00000002
            | VideoEncodeAv1StdPrimaryRefFrameBit = 0x00000004
            | VideoEncodeAv1StdDeltaQBit = 0x00000008

        [<Flags>]
        type VkVideoEncodeAV1SuperblockSizeFlagsKHR =
            | All = 3
            | None = 0
            | VideoEncodeAv1SuperblockSize64Bit = 0x00000001
            | VideoEncodeAv1SuperblockSize128Bit = 0x00000002

        [<Flags>]
        type VkVideoEncodeAV1RateControlFlagsKHR =
            | All = 15
            | None = 0
            | VideoEncodeAv1RateControlRegularGopBit = 0x00000001
            | VideoEncodeAv1RateControlTemporalLayerPatternDyadicBit = 0x00000002
            | VideoEncodeAv1RateControlReferencePatternFlatBit = 0x00000004
            | VideoEncodeAv1RateControlReferencePatternDyadicBit = 0x00000008


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceVideoEncodeAV1FeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public videoEncodeAV1 : VkBool32

                new(pNext: nativeint, videoEncodeAV1: VkBool32) =
                    {
                        sType = 1000513004u
                        pNext = pNext
                        videoEncodeAV1 = videoEncodeAV1
                    }

                new(videoEncodeAV1: VkBool32) =
                    VkPhysicalDeviceVideoEncodeAV1FeaturesKHR(Unchecked.defaultof<nativeint>, videoEncodeAV1)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.videoEncodeAV1 = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceVideoEncodeAV1FeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "videoEncodeAV1 = %A" x.videoEncodeAV1
                    ] |> sprintf "VkPhysicalDeviceVideoEncodeAV1FeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeAV1CapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoEncodeAV1CapabilityFlagsKHR
                val mutable public maxLevel : nativeint
                val mutable public codedPictureAlignment : VkExtent2D
                val mutable public maxTiles : VkExtent2D
                val mutable public minTileSize : VkExtent2D
                val mutable public maxTileSize : VkExtent2D
                val mutable public superblockSizes : VkVideoEncodeAV1SuperblockSizeFlagsKHR
                val mutable public maxSingleReferenceCount : uint32
                val mutable public singleReferenceNameMask : uint32
                val mutable public maxUnidirectionalCompoundReferenceCount : uint32
                val mutable public maxUnidirectionalCompoundGroup1ReferenceCount : uint32
                val mutable public unidirectionalCompoundReferenceNameMask : uint32
                val mutable public maxBidirectionalCompoundReferenceCount : uint32
                val mutable public maxBidirectionalCompoundGroup1ReferenceCount : uint32
                val mutable public maxBidirectionalCompoundGroup2ReferenceCount : uint32
                val mutable public bidirectionalCompoundReferenceNameMask : uint32
                val mutable public maxTemporalLayerCount : uint32
                val mutable public maxSpatialLayerCount : uint32
                val mutable public maxOperatingPoints : uint32
                val mutable public minQIndex : uint32
                val mutable public maxQIndex : uint32
                val mutable public prefersGopRemainingFrames : VkBool32
                val mutable public requiresGopRemainingFrames : VkBool32
                val mutable public stdSyntaxFlags : VkVideoEncodeAV1StdFlagsKHR

                new(pNext: nativeint, flags: VkVideoEncodeAV1CapabilityFlagsKHR, maxLevel: nativeint, codedPictureAlignment: VkExtent2D, maxTiles: VkExtent2D, minTileSize: VkExtent2D, maxTileSize: VkExtent2D, superblockSizes: VkVideoEncodeAV1SuperblockSizeFlagsKHR, maxSingleReferenceCount: uint32, singleReferenceNameMask: uint32, maxUnidirectionalCompoundReferenceCount: uint32, maxUnidirectionalCompoundGroup1ReferenceCount: uint32, unidirectionalCompoundReferenceNameMask: uint32, maxBidirectionalCompoundReferenceCount: uint32, maxBidirectionalCompoundGroup1ReferenceCount: uint32, maxBidirectionalCompoundGroup2ReferenceCount: uint32, bidirectionalCompoundReferenceNameMask: uint32, maxTemporalLayerCount: uint32, maxSpatialLayerCount: uint32, maxOperatingPoints: uint32, minQIndex: uint32, maxQIndex: uint32, prefersGopRemainingFrames: VkBool32, requiresGopRemainingFrames: VkBool32, stdSyntaxFlags: VkVideoEncodeAV1StdFlagsKHR) =
                    {
                        sType = 1000513000u
                        pNext = pNext
                        flags = flags
                        maxLevel = maxLevel
                        codedPictureAlignment = codedPictureAlignment
                        maxTiles = maxTiles
                        minTileSize = minTileSize
                        maxTileSize = maxTileSize
                        superblockSizes = superblockSizes
                        maxSingleReferenceCount = maxSingleReferenceCount
                        singleReferenceNameMask = singleReferenceNameMask
                        maxUnidirectionalCompoundReferenceCount = maxUnidirectionalCompoundReferenceCount
                        maxUnidirectionalCompoundGroup1ReferenceCount = maxUnidirectionalCompoundGroup1ReferenceCount
                        unidirectionalCompoundReferenceNameMask = unidirectionalCompoundReferenceNameMask
                        maxBidirectionalCompoundReferenceCount = maxBidirectionalCompoundReferenceCount
                        maxBidirectionalCompoundGroup1ReferenceCount = maxBidirectionalCompoundGroup1ReferenceCount
                        maxBidirectionalCompoundGroup2ReferenceCount = maxBidirectionalCompoundGroup2ReferenceCount
                        bidirectionalCompoundReferenceNameMask = bidirectionalCompoundReferenceNameMask
                        maxTemporalLayerCount = maxTemporalLayerCount
                        maxSpatialLayerCount = maxSpatialLayerCount
                        maxOperatingPoints = maxOperatingPoints
                        minQIndex = minQIndex
                        maxQIndex = maxQIndex
                        prefersGopRemainingFrames = prefersGopRemainingFrames
                        requiresGopRemainingFrames = requiresGopRemainingFrames
                        stdSyntaxFlags = stdSyntaxFlags
                    }

                new(flags: VkVideoEncodeAV1CapabilityFlagsKHR, maxLevel: nativeint, codedPictureAlignment: VkExtent2D, maxTiles: VkExtent2D, minTileSize: VkExtent2D, maxTileSize: VkExtent2D, superblockSizes: VkVideoEncodeAV1SuperblockSizeFlagsKHR, maxSingleReferenceCount: uint32, singleReferenceNameMask: uint32, maxUnidirectionalCompoundReferenceCount: uint32, maxUnidirectionalCompoundGroup1ReferenceCount: uint32, unidirectionalCompoundReferenceNameMask: uint32, maxBidirectionalCompoundReferenceCount: uint32, maxBidirectionalCompoundGroup1ReferenceCount: uint32, maxBidirectionalCompoundGroup2ReferenceCount: uint32, bidirectionalCompoundReferenceNameMask: uint32, maxTemporalLayerCount: uint32, maxSpatialLayerCount: uint32, maxOperatingPoints: uint32, minQIndex: uint32, maxQIndex: uint32, prefersGopRemainingFrames: VkBool32, requiresGopRemainingFrames: VkBool32, stdSyntaxFlags: VkVideoEncodeAV1StdFlagsKHR) =
                    VkVideoEncodeAV1CapabilitiesKHR(Unchecked.defaultof<nativeint>, flags, maxLevel, codedPictureAlignment, maxTiles, minTileSize, maxTileSize, superblockSizes, maxSingleReferenceCount, singleReferenceNameMask, maxUnidirectionalCompoundReferenceCount, maxUnidirectionalCompoundGroup1ReferenceCount, unidirectionalCompoundReferenceNameMask, maxBidirectionalCompoundReferenceCount, maxBidirectionalCompoundGroup1ReferenceCount, maxBidirectionalCompoundGroup2ReferenceCount, bidirectionalCompoundReferenceNameMask, maxTemporalLayerCount, maxSpatialLayerCount, maxOperatingPoints, minQIndex, maxQIndex, prefersGopRemainingFrames, requiresGopRemainingFrames, stdSyntaxFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeAV1CapabilityFlagsKHR> && x.maxLevel = Unchecked.defaultof<nativeint> && x.codedPictureAlignment = Unchecked.defaultof<VkExtent2D> && x.maxTiles = Unchecked.defaultof<VkExtent2D> && x.minTileSize = Unchecked.defaultof<VkExtent2D> && x.maxTileSize = Unchecked.defaultof<VkExtent2D> && x.superblockSizes = Unchecked.defaultof<VkVideoEncodeAV1SuperblockSizeFlagsKHR> && x.maxSingleReferenceCount = Unchecked.defaultof<uint32> && x.singleReferenceNameMask = Unchecked.defaultof<uint32> && x.maxUnidirectionalCompoundReferenceCount = Unchecked.defaultof<uint32> && x.maxUnidirectionalCompoundGroup1ReferenceCount = Unchecked.defaultof<uint32> && x.unidirectionalCompoundReferenceNameMask = Unchecked.defaultof<uint32> && x.maxBidirectionalCompoundReferenceCount = Unchecked.defaultof<uint32> && x.maxBidirectionalCompoundGroup1ReferenceCount = Unchecked.defaultof<uint32> && x.maxBidirectionalCompoundGroup2ReferenceCount = Unchecked.defaultof<uint32> && x.bidirectionalCompoundReferenceNameMask = Unchecked.defaultof<uint32> && x.maxTemporalLayerCount = Unchecked.defaultof<uint32> && x.maxSpatialLayerCount = Unchecked.defaultof<uint32> && x.maxOperatingPoints = Unchecked.defaultof<uint32> && x.minQIndex = Unchecked.defaultof<uint32> && x.maxQIndex = Unchecked.defaultof<uint32> && x.prefersGopRemainingFrames = Unchecked.defaultof<VkBool32> && x.requiresGopRemainingFrames = Unchecked.defaultof<VkBool32> && x.stdSyntaxFlags = Unchecked.defaultof<VkVideoEncodeAV1StdFlagsKHR>

                static member Empty =
                    VkVideoEncodeAV1CapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeAV1CapabilityFlagsKHR>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkVideoEncodeAV1SuperblockSizeFlagsKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeAV1StdFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "maxLevel = %A" x.maxLevel
                        sprintf "codedPictureAlignment = %A" x.codedPictureAlignment
                        sprintf "maxTiles = %A" x.maxTiles
                        sprintf "minTileSize = %A" x.minTileSize
                        sprintf "maxTileSize = %A" x.maxTileSize
                        sprintf "superblockSizes = %A" x.superblockSizes
                        sprintf "maxSingleReferenceCount = %A" x.maxSingleReferenceCount
                        sprintf "singleReferenceNameMask = %A" x.singleReferenceNameMask
                        sprintf "maxUnidirectionalCompoundReferenceCount = %A" x.maxUnidirectionalCompoundReferenceCount
                        sprintf "maxUnidirectionalCompoundGroup1ReferenceCount = %A" x.maxUnidirectionalCompoundGroup1ReferenceCount
                        sprintf "unidirectionalCompoundReferenceNameMask = %A" x.unidirectionalCompoundReferenceNameMask
                        sprintf "maxBidirectionalCompoundReferenceCount = %A" x.maxBidirectionalCompoundReferenceCount
                        sprintf "maxBidirectionalCompoundGroup1ReferenceCount = %A" x.maxBidirectionalCompoundGroup1ReferenceCount
                        sprintf "maxBidirectionalCompoundGroup2ReferenceCount = %A" x.maxBidirectionalCompoundGroup2ReferenceCount
                        sprintf "bidirectionalCompoundReferenceNameMask = %A" x.bidirectionalCompoundReferenceNameMask
                        sprintf "maxTemporalLayerCount = %A" x.maxTemporalLayerCount
                        sprintf "maxSpatialLayerCount = %A" x.maxSpatialLayerCount
                        sprintf "maxOperatingPoints = %A" x.maxOperatingPoints
                        sprintf "minQIndex = %A" x.minQIndex
                        sprintf "maxQIndex = %A" x.maxQIndex
                        sprintf "prefersGopRemainingFrames = %A" x.prefersGopRemainingFrames
                        sprintf "requiresGopRemainingFrames = %A" x.requiresGopRemainingFrames
                        sprintf "stdSyntaxFlags = %A" x.stdSyntaxFlags
                    ] |> sprintf "VkVideoEncodeAV1CapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeAV1DpbSlotInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pStdReferenceInfo : nativeptr<nativeint>

                new(pNext: nativeint, pStdReferenceInfo: nativeptr<nativeint>) =
                    {
                        sType = 1000513003u
                        pNext = pNext
                        pStdReferenceInfo = pStdReferenceInfo
                    }

                new(pStdReferenceInfo: nativeptr<nativeint>) =
                    VkVideoEncodeAV1DpbSlotInfoKHR(Unchecked.defaultof<nativeint>, pStdReferenceInfo)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pStdReferenceInfo = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoEncodeAV1DpbSlotInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pStdReferenceInfo = %A" x.pStdReferenceInfo
                    ] |> sprintf "VkVideoEncodeAV1DpbSlotInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeAV1FrameSizeKHR =
            struct
                val mutable public intraFrameSize : uint32
                val mutable public predictiveFrameSize : uint32
                val mutable public bipredictiveFrameSize : uint32

                new(intraFrameSize: uint32, predictiveFrameSize: uint32, bipredictiveFrameSize: uint32) =
                    {
                        intraFrameSize = intraFrameSize
                        predictiveFrameSize = predictiveFrameSize
                        bipredictiveFrameSize = bipredictiveFrameSize
                    }

                member x.IsEmpty =
                    x.intraFrameSize = Unchecked.defaultof<uint32> && x.predictiveFrameSize = Unchecked.defaultof<uint32> && x.bipredictiveFrameSize = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeAV1FrameSizeKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "intraFrameSize = %A" x.intraFrameSize
                        sprintf "predictiveFrameSize = %A" x.predictiveFrameSize
                        sprintf "bipredictiveFrameSize = %A" x.bipredictiveFrameSize
                    ] |> sprintf "VkVideoEncodeAV1FrameSizeKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeAV1GopRemainingFrameInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public useGopRemainingFrames : VkBool32
                val mutable public gopRemainingIntra : uint32
                val mutable public gopRemainingPredictive : uint32
                val mutable public gopRemainingBipredictive : uint32

                new(pNext: nativeint, useGopRemainingFrames: VkBool32, gopRemainingIntra: uint32, gopRemainingPredictive: uint32, gopRemainingBipredictive: uint32) =
                    {
                        sType = 1000513010u
                        pNext = pNext
                        useGopRemainingFrames = useGopRemainingFrames
                        gopRemainingIntra = gopRemainingIntra
                        gopRemainingPredictive = gopRemainingPredictive
                        gopRemainingBipredictive = gopRemainingBipredictive
                    }

                new(useGopRemainingFrames: VkBool32, gopRemainingIntra: uint32, gopRemainingPredictive: uint32, gopRemainingBipredictive: uint32) =
                    VkVideoEncodeAV1GopRemainingFrameInfoKHR(Unchecked.defaultof<nativeint>, useGopRemainingFrames, gopRemainingIntra, gopRemainingPredictive, gopRemainingBipredictive)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.useGopRemainingFrames = Unchecked.defaultof<VkBool32> && x.gopRemainingIntra = Unchecked.defaultof<uint32> && x.gopRemainingPredictive = Unchecked.defaultof<uint32> && x.gopRemainingBipredictive = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeAV1GopRemainingFrameInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "useGopRemainingFrames = %A" x.useGopRemainingFrames
                        sprintf "gopRemainingIntra = %A" x.gopRemainingIntra
                        sprintf "gopRemainingPredictive = %A" x.gopRemainingPredictive
                        sprintf "gopRemainingBipredictive = %A" x.gopRemainingBipredictive
                    ] |> sprintf "VkVideoEncodeAV1GopRemainingFrameInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeAV1PictureInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public predictionMode : VkVideoEncodeAV1PredictionModeKHR
                val mutable public rateControlGroup : VkVideoEncodeAV1RateControlGroupKHR
                val mutable public constantQIndex : uint32
                val mutable public pStdPictureInfo : nativeptr<nativeint>
                val mutable public referenceNameSlotIndices : int32_7
                val mutable public primaryReferenceCdfOnly : VkBool32
                val mutable public generateObuExtensionHeader : VkBool32

                new(pNext: nativeint, predictionMode: VkVideoEncodeAV1PredictionModeKHR, rateControlGroup: VkVideoEncodeAV1RateControlGroupKHR, constantQIndex: uint32, pStdPictureInfo: nativeptr<nativeint>, referenceNameSlotIndices: int32_7, primaryReferenceCdfOnly: VkBool32, generateObuExtensionHeader: VkBool32) =
                    {
                        sType = 1000513002u
                        pNext = pNext
                        predictionMode = predictionMode
                        rateControlGroup = rateControlGroup
                        constantQIndex = constantQIndex
                        pStdPictureInfo = pStdPictureInfo
                        referenceNameSlotIndices = referenceNameSlotIndices
                        primaryReferenceCdfOnly = primaryReferenceCdfOnly
                        generateObuExtensionHeader = generateObuExtensionHeader
                    }

                new(predictionMode: VkVideoEncodeAV1PredictionModeKHR, rateControlGroup: VkVideoEncodeAV1RateControlGroupKHR, constantQIndex: uint32, pStdPictureInfo: nativeptr<nativeint>, referenceNameSlotIndices: int32_7, primaryReferenceCdfOnly: VkBool32, generateObuExtensionHeader: VkBool32) =
                    VkVideoEncodeAV1PictureInfoKHR(Unchecked.defaultof<nativeint>, predictionMode, rateControlGroup, constantQIndex, pStdPictureInfo, referenceNameSlotIndices, primaryReferenceCdfOnly, generateObuExtensionHeader)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.predictionMode = Unchecked.defaultof<VkVideoEncodeAV1PredictionModeKHR> && x.rateControlGroup = Unchecked.defaultof<VkVideoEncodeAV1RateControlGroupKHR> && x.constantQIndex = Unchecked.defaultof<uint32> && x.pStdPictureInfo = Unchecked.defaultof<nativeptr<nativeint>> && x.referenceNameSlotIndices = Unchecked.defaultof<int32_7> && x.primaryReferenceCdfOnly = Unchecked.defaultof<VkBool32> && x.generateObuExtensionHeader = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkVideoEncodeAV1PictureInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeAV1PredictionModeKHR>, Unchecked.defaultof<VkVideoEncodeAV1RateControlGroupKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<int32_7>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "predictionMode = %A" x.predictionMode
                        sprintf "rateControlGroup = %A" x.rateControlGroup
                        sprintf "constantQIndex = %A" x.constantQIndex
                        sprintf "pStdPictureInfo = %A" x.pStdPictureInfo
                        sprintf "referenceNameSlotIndices = %A" x.referenceNameSlotIndices
                        sprintf "primaryReferenceCdfOnly = %A" x.primaryReferenceCdfOnly
                        sprintf "generateObuExtensionHeader = %A" x.generateObuExtensionHeader
                    ] |> sprintf "VkVideoEncodeAV1PictureInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeAV1ProfileInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stdProfile : nativeint

                new(pNext: nativeint, stdProfile: nativeint) =
                    {
                        sType = 1000513005u
                        pNext = pNext
                        stdProfile = stdProfile
                    }

                new(stdProfile: nativeint) =
                    VkVideoEncodeAV1ProfileInfoKHR(Unchecked.defaultof<nativeint>, stdProfile)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stdProfile = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkVideoEncodeAV1ProfileInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stdProfile = %A" x.stdProfile
                    ] |> sprintf "VkVideoEncodeAV1ProfileInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeAV1QIndexKHR =
            struct
                val mutable public intraQIndex : uint32
                val mutable public predictiveQIndex : uint32
                val mutable public bipredictiveQIndex : uint32

                new(intraQIndex: uint32, predictiveQIndex: uint32, bipredictiveQIndex: uint32) =
                    {
                        intraQIndex = intraQIndex
                        predictiveQIndex = predictiveQIndex
                        bipredictiveQIndex = bipredictiveQIndex
                    }

                member x.IsEmpty =
                    x.intraQIndex = Unchecked.defaultof<uint32> && x.predictiveQIndex = Unchecked.defaultof<uint32> && x.bipredictiveQIndex = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeAV1QIndexKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "intraQIndex = %A" x.intraQIndex
                        sprintf "predictiveQIndex = %A" x.predictiveQIndex
                        sprintf "bipredictiveQIndex = %A" x.bipredictiveQIndex
                    ] |> sprintf "VkVideoEncodeAV1QIndexKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeAV1QualityLevelPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public preferredRateControlFlags : VkVideoEncodeAV1RateControlFlagsKHR
                val mutable public preferredGopFrameCount : uint32
                val mutable public preferredKeyFramePeriod : uint32
                val mutable public preferredConsecutiveBipredictiveFrameCount : uint32
                val mutable public preferredTemporalLayerCount : uint32
                val mutable public preferredConstantQIndex : VkVideoEncodeAV1QIndexKHR
                val mutable public preferredMaxSingleReferenceCount : uint32
                val mutable public preferredSingleReferenceNameMask : uint32
                val mutable public preferredMaxUnidirectionalCompoundReferenceCount : uint32
                val mutable public preferredMaxUnidirectionalCompoundGroup1ReferenceCount : uint32
                val mutable public preferredUnidirectionalCompoundReferenceNameMask : uint32
                val mutable public preferredMaxBidirectionalCompoundReferenceCount : uint32
                val mutable public preferredMaxBidirectionalCompoundGroup1ReferenceCount : uint32
                val mutable public preferredMaxBidirectionalCompoundGroup2ReferenceCount : uint32
                val mutable public preferredBidirectionalCompoundReferenceNameMask : uint32

                new(pNext: nativeint, preferredRateControlFlags: VkVideoEncodeAV1RateControlFlagsKHR, preferredGopFrameCount: uint32, preferredKeyFramePeriod: uint32, preferredConsecutiveBipredictiveFrameCount: uint32, preferredTemporalLayerCount: uint32, preferredConstantQIndex: VkVideoEncodeAV1QIndexKHR, preferredMaxSingleReferenceCount: uint32, preferredSingleReferenceNameMask: uint32, preferredMaxUnidirectionalCompoundReferenceCount: uint32, preferredMaxUnidirectionalCompoundGroup1ReferenceCount: uint32, preferredUnidirectionalCompoundReferenceNameMask: uint32, preferredMaxBidirectionalCompoundReferenceCount: uint32, preferredMaxBidirectionalCompoundGroup1ReferenceCount: uint32, preferredMaxBidirectionalCompoundGroup2ReferenceCount: uint32, preferredBidirectionalCompoundReferenceNameMask: uint32) =
                    {
                        sType = 1000513008u
                        pNext = pNext
                        preferredRateControlFlags = preferredRateControlFlags
                        preferredGopFrameCount = preferredGopFrameCount
                        preferredKeyFramePeriod = preferredKeyFramePeriod
                        preferredConsecutiveBipredictiveFrameCount = preferredConsecutiveBipredictiveFrameCount
                        preferredTemporalLayerCount = preferredTemporalLayerCount
                        preferredConstantQIndex = preferredConstantQIndex
                        preferredMaxSingleReferenceCount = preferredMaxSingleReferenceCount
                        preferredSingleReferenceNameMask = preferredSingleReferenceNameMask
                        preferredMaxUnidirectionalCompoundReferenceCount = preferredMaxUnidirectionalCompoundReferenceCount
                        preferredMaxUnidirectionalCompoundGroup1ReferenceCount = preferredMaxUnidirectionalCompoundGroup1ReferenceCount
                        preferredUnidirectionalCompoundReferenceNameMask = preferredUnidirectionalCompoundReferenceNameMask
                        preferredMaxBidirectionalCompoundReferenceCount = preferredMaxBidirectionalCompoundReferenceCount
                        preferredMaxBidirectionalCompoundGroup1ReferenceCount = preferredMaxBidirectionalCompoundGroup1ReferenceCount
                        preferredMaxBidirectionalCompoundGroup2ReferenceCount = preferredMaxBidirectionalCompoundGroup2ReferenceCount
                        preferredBidirectionalCompoundReferenceNameMask = preferredBidirectionalCompoundReferenceNameMask
                    }

                new(preferredRateControlFlags: VkVideoEncodeAV1RateControlFlagsKHR, preferredGopFrameCount: uint32, preferredKeyFramePeriod: uint32, preferredConsecutiveBipredictiveFrameCount: uint32, preferredTemporalLayerCount: uint32, preferredConstantQIndex: VkVideoEncodeAV1QIndexKHR, preferredMaxSingleReferenceCount: uint32, preferredSingleReferenceNameMask: uint32, preferredMaxUnidirectionalCompoundReferenceCount: uint32, preferredMaxUnidirectionalCompoundGroup1ReferenceCount: uint32, preferredUnidirectionalCompoundReferenceNameMask: uint32, preferredMaxBidirectionalCompoundReferenceCount: uint32, preferredMaxBidirectionalCompoundGroup1ReferenceCount: uint32, preferredMaxBidirectionalCompoundGroup2ReferenceCount: uint32, preferredBidirectionalCompoundReferenceNameMask: uint32) =
                    VkVideoEncodeAV1QualityLevelPropertiesKHR(Unchecked.defaultof<nativeint>, preferredRateControlFlags, preferredGopFrameCount, preferredKeyFramePeriod, preferredConsecutiveBipredictiveFrameCount, preferredTemporalLayerCount, preferredConstantQIndex, preferredMaxSingleReferenceCount, preferredSingleReferenceNameMask, preferredMaxUnidirectionalCompoundReferenceCount, preferredMaxUnidirectionalCompoundGroup1ReferenceCount, preferredUnidirectionalCompoundReferenceNameMask, preferredMaxBidirectionalCompoundReferenceCount, preferredMaxBidirectionalCompoundGroup1ReferenceCount, preferredMaxBidirectionalCompoundGroup2ReferenceCount, preferredBidirectionalCompoundReferenceNameMask)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.preferredRateControlFlags = Unchecked.defaultof<VkVideoEncodeAV1RateControlFlagsKHR> && x.preferredGopFrameCount = Unchecked.defaultof<uint32> && x.preferredKeyFramePeriod = Unchecked.defaultof<uint32> && x.preferredConsecutiveBipredictiveFrameCount = Unchecked.defaultof<uint32> && x.preferredTemporalLayerCount = Unchecked.defaultof<uint32> && x.preferredConstantQIndex = Unchecked.defaultof<VkVideoEncodeAV1QIndexKHR> && x.preferredMaxSingleReferenceCount = Unchecked.defaultof<uint32> && x.preferredSingleReferenceNameMask = Unchecked.defaultof<uint32> && x.preferredMaxUnidirectionalCompoundReferenceCount = Unchecked.defaultof<uint32> && x.preferredMaxUnidirectionalCompoundGroup1ReferenceCount = Unchecked.defaultof<uint32> && x.preferredUnidirectionalCompoundReferenceNameMask = Unchecked.defaultof<uint32> && x.preferredMaxBidirectionalCompoundReferenceCount = Unchecked.defaultof<uint32> && x.preferredMaxBidirectionalCompoundGroup1ReferenceCount = Unchecked.defaultof<uint32> && x.preferredMaxBidirectionalCompoundGroup2ReferenceCount = Unchecked.defaultof<uint32> && x.preferredBidirectionalCompoundReferenceNameMask = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeAV1QualityLevelPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeAV1RateControlFlagsKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkVideoEncodeAV1QIndexKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "preferredRateControlFlags = %A" x.preferredRateControlFlags
                        sprintf "preferredGopFrameCount = %A" x.preferredGopFrameCount
                        sprintf "preferredKeyFramePeriod = %A" x.preferredKeyFramePeriod
                        sprintf "preferredConsecutiveBipredictiveFrameCount = %A" x.preferredConsecutiveBipredictiveFrameCount
                        sprintf "preferredTemporalLayerCount = %A" x.preferredTemporalLayerCount
                        sprintf "preferredConstantQIndex = %A" x.preferredConstantQIndex
                        sprintf "preferredMaxSingleReferenceCount = %A" x.preferredMaxSingleReferenceCount
                        sprintf "preferredSingleReferenceNameMask = %A" x.preferredSingleReferenceNameMask
                        sprintf "preferredMaxUnidirectionalCompoundReferenceCount = %A" x.preferredMaxUnidirectionalCompoundReferenceCount
                        sprintf "preferredMaxUnidirectionalCompoundGroup1ReferenceCount = %A" x.preferredMaxUnidirectionalCompoundGroup1ReferenceCount
                        sprintf "preferredUnidirectionalCompoundReferenceNameMask = %A" x.preferredUnidirectionalCompoundReferenceNameMask
                        sprintf "preferredMaxBidirectionalCompoundReferenceCount = %A" x.preferredMaxBidirectionalCompoundReferenceCount
                        sprintf "preferredMaxBidirectionalCompoundGroup1ReferenceCount = %A" x.preferredMaxBidirectionalCompoundGroup1ReferenceCount
                        sprintf "preferredMaxBidirectionalCompoundGroup2ReferenceCount = %A" x.preferredMaxBidirectionalCompoundGroup2ReferenceCount
                        sprintf "preferredBidirectionalCompoundReferenceNameMask = %A" x.preferredBidirectionalCompoundReferenceNameMask
                    ] |> sprintf "VkVideoEncodeAV1QualityLevelPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeAV1RateControlInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkVideoEncodeAV1RateControlFlagsKHR
                val mutable public gopFrameCount : uint32
                val mutable public keyFramePeriod : uint32
                val mutable public consecutiveBipredictiveFrameCount : uint32
                val mutable public temporalLayerCount : uint32

                new(pNext: nativeint, flags: VkVideoEncodeAV1RateControlFlagsKHR, gopFrameCount: uint32, keyFramePeriod: uint32, consecutiveBipredictiveFrameCount: uint32, temporalLayerCount: uint32) =
                    {
                        sType = 1000513006u
                        pNext = pNext
                        flags = flags
                        gopFrameCount = gopFrameCount
                        keyFramePeriod = keyFramePeriod
                        consecutiveBipredictiveFrameCount = consecutiveBipredictiveFrameCount
                        temporalLayerCount = temporalLayerCount
                    }

                new(flags: VkVideoEncodeAV1RateControlFlagsKHR, gopFrameCount: uint32, keyFramePeriod: uint32, consecutiveBipredictiveFrameCount: uint32, temporalLayerCount: uint32) =
                    VkVideoEncodeAV1RateControlInfoKHR(Unchecked.defaultof<nativeint>, flags, gopFrameCount, keyFramePeriod, consecutiveBipredictiveFrameCount, temporalLayerCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeAV1RateControlFlagsKHR> && x.gopFrameCount = Unchecked.defaultof<uint32> && x.keyFramePeriod = Unchecked.defaultof<uint32> && x.consecutiveBipredictiveFrameCount = Unchecked.defaultof<uint32> && x.temporalLayerCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoEncodeAV1RateControlInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeAV1RateControlFlagsKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "gopFrameCount = %A" x.gopFrameCount
                        sprintf "keyFramePeriod = %A" x.keyFramePeriod
                        sprintf "consecutiveBipredictiveFrameCount = %A" x.consecutiveBipredictiveFrameCount
                        sprintf "temporalLayerCount = %A" x.temporalLayerCount
                    ] |> sprintf "VkVideoEncodeAV1RateControlInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeAV1RateControlLayerInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public useMinQIndex : VkBool32
                val mutable public minQIndex : VkVideoEncodeAV1QIndexKHR
                val mutable public useMaxQIndex : VkBool32
                val mutable public maxQIndex : VkVideoEncodeAV1QIndexKHR
                val mutable public useMaxFrameSize : VkBool32
                val mutable public maxFrameSize : VkVideoEncodeAV1FrameSizeKHR

                new(pNext: nativeint, useMinQIndex: VkBool32, minQIndex: VkVideoEncodeAV1QIndexKHR, useMaxQIndex: VkBool32, maxQIndex: VkVideoEncodeAV1QIndexKHR, useMaxFrameSize: VkBool32, maxFrameSize: VkVideoEncodeAV1FrameSizeKHR) =
                    {
                        sType = 1000513007u
                        pNext = pNext
                        useMinQIndex = useMinQIndex
                        minQIndex = minQIndex
                        useMaxQIndex = useMaxQIndex
                        maxQIndex = maxQIndex
                        useMaxFrameSize = useMaxFrameSize
                        maxFrameSize = maxFrameSize
                    }

                new(useMinQIndex: VkBool32, minQIndex: VkVideoEncodeAV1QIndexKHR, useMaxQIndex: VkBool32, maxQIndex: VkVideoEncodeAV1QIndexKHR, useMaxFrameSize: VkBool32, maxFrameSize: VkVideoEncodeAV1FrameSizeKHR) =
                    VkVideoEncodeAV1RateControlLayerInfoKHR(Unchecked.defaultof<nativeint>, useMinQIndex, minQIndex, useMaxQIndex, maxQIndex, useMaxFrameSize, maxFrameSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.useMinQIndex = Unchecked.defaultof<VkBool32> && x.minQIndex = Unchecked.defaultof<VkVideoEncodeAV1QIndexKHR> && x.useMaxQIndex = Unchecked.defaultof<VkBool32> && x.maxQIndex = Unchecked.defaultof<VkVideoEncodeAV1QIndexKHR> && x.useMaxFrameSize = Unchecked.defaultof<VkBool32> && x.maxFrameSize = Unchecked.defaultof<VkVideoEncodeAV1FrameSizeKHR>

                static member Empty =
                    VkVideoEncodeAV1RateControlLayerInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeAV1QIndexKHR>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeAV1QIndexKHR>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeAV1FrameSizeKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "useMinQIndex = %A" x.useMinQIndex
                        sprintf "minQIndex = %A" x.minQIndex
                        sprintf "useMaxQIndex = %A" x.useMaxQIndex
                        sprintf "maxQIndex = %A" x.maxQIndex
                        sprintf "useMaxFrameSize = %A" x.useMaxFrameSize
                        sprintf "maxFrameSize = %A" x.maxFrameSize
                    ] |> sprintf "VkVideoEncodeAV1RateControlLayerInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeAV1SessionCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public useMaxLevel : VkBool32
                val mutable public maxLevel : nativeint

                new(pNext: nativeint, useMaxLevel: VkBool32, maxLevel: nativeint) =
                    {
                        sType = 1000513009u
                        pNext = pNext
                        useMaxLevel = useMaxLevel
                        maxLevel = maxLevel
                    }

                new(useMaxLevel: VkBool32, maxLevel: nativeint) =
                    VkVideoEncodeAV1SessionCreateInfoKHR(Unchecked.defaultof<nativeint>, useMaxLevel, maxLevel)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.useMaxLevel = Unchecked.defaultof<VkBool32> && x.maxLevel = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkVideoEncodeAV1SessionCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "useMaxLevel = %A" x.useMaxLevel
                        sprintf "maxLevel = %A" x.maxLevel
                    ] |> sprintf "VkVideoEncodeAV1SessionCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeAV1SessionParametersCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pStdSequenceHeader : nativeptr<nativeint>
                val mutable public pStdDecoderModelInfo : nativeptr<nativeint>
                val mutable public stdOperatingPointCount : uint32
                val mutable public pStdOperatingPoints : nativeptr<nativeint>

                new(pNext: nativeint, pStdSequenceHeader: nativeptr<nativeint>, pStdDecoderModelInfo: nativeptr<nativeint>, stdOperatingPointCount: uint32, pStdOperatingPoints: nativeptr<nativeint>) =
                    {
                        sType = 1000513001u
                        pNext = pNext
                        pStdSequenceHeader = pStdSequenceHeader
                        pStdDecoderModelInfo = pStdDecoderModelInfo
                        stdOperatingPointCount = stdOperatingPointCount
                        pStdOperatingPoints = pStdOperatingPoints
                    }

                new(pStdSequenceHeader: nativeptr<nativeint>, pStdDecoderModelInfo: nativeptr<nativeint>, stdOperatingPointCount: uint32, pStdOperatingPoints: nativeptr<nativeint>) =
                    VkVideoEncodeAV1SessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, pStdSequenceHeader, pStdDecoderModelInfo, stdOperatingPointCount, pStdOperatingPoints)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pStdSequenceHeader = Unchecked.defaultof<nativeptr<nativeint>> && x.pStdDecoderModelInfo = Unchecked.defaultof<nativeptr<nativeint>> && x.stdOperatingPointCount = Unchecked.defaultof<uint32> && x.pStdOperatingPoints = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkVideoEncodeAV1SessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pStdSequenceHeader = %A" x.pStdSequenceHeader
                        sprintf "pStdDecoderModelInfo = %A" x.pStdDecoderModelInfo
                        sprintf "stdOperatingPointCount = %A" x.stdOperatingPointCount
                        sprintf "pStdOperatingPoints = %A" x.pStdOperatingPoints
                    ] |> sprintf "VkVideoEncodeAV1SessionParametersCreateInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type KHRVideoQueue.VkVideoCodecOperationFlagsKHR with
                  static member inline EncodeAv1Bit = enum<KHRVideoQueue.VkVideoCodecOperationFlagsKHR> 0x00040000


    /// Requires KHRVideoQueue.
    module KHRVideoMaintenance1 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_video_maintenance1"
        let Number = 516

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceVideoMaintenance1FeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public videoMaintenance1 : VkBool32

                new(pNext: nativeint, videoMaintenance1: VkBool32) =
                    {
                        sType = 1000515000u
                        pNext = pNext
                        videoMaintenance1 = videoMaintenance1
                    }

                new(videoMaintenance1: VkBool32) =
                    VkPhysicalDeviceVideoMaintenance1FeaturesKHR(Unchecked.defaultof<nativeint>, videoMaintenance1)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.videoMaintenance1 = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceVideoMaintenance1FeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "videoMaintenance1 = %A" x.videoMaintenance1
                    ] |> sprintf "VkPhysicalDeviceVideoMaintenance1FeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoInlineQueryInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public queryPool : VkQueryPool
                val mutable public firstQuery : uint32
                val mutable public queryCount : uint32

                new(pNext: nativeint, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32) =
                    {
                        sType = 1000515001u
                        pNext = pNext
                        queryPool = queryPool
                        firstQuery = firstQuery
                        queryCount = queryCount
                    }

                new(queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32) =
                    VkVideoInlineQueryInfoKHR(Unchecked.defaultof<nativeint>, queryPool, firstQuery, queryCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.queryPool = Unchecked.defaultof<VkQueryPool> && x.firstQuery = Unchecked.defaultof<uint32> && x.queryCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkVideoInlineQueryInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkQueryPool>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "queryPool = %A" x.queryPool
                        sprintf "firstQuery = %A" x.firstQuery
                        sprintf "queryCount = %A" x.queryCount
                    ] |> sprintf "VkVideoInlineQueryInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkBufferCreateFlags with
                  static member inline VideoProfileIndependentBitKhr = enum<VkBufferCreateFlags> 0x00000040
             type VkImageCreateFlags with
                  static member inline VideoProfileIndependentBitKhr = enum<VkImageCreateFlags> 0x00100000
             type KHRVideoQueue.VkVideoSessionCreateFlagsKHR with
                  static member inline InlineQueriesBit = enum<KHRVideoQueue.VkVideoSessionCreateFlagsKHR> 0x00000004


    /// Requires KHRMaintenance6 | Vulkan14.
    module NVPerStageDescriptorSet =
        let Type = ExtensionType.Device
        let Name = "VK_NV_per_stage_descriptor_set"
        let Number = 517

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePerStageDescriptorSetFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public perStageDescriptorSet : VkBool32
                val mutable public dynamicPipelineLayout : VkBool32

                new(pNext: nativeint, perStageDescriptorSet: VkBool32, dynamicPipelineLayout: VkBool32) =
                    {
                        sType = 1000516000u
                        pNext = pNext
                        perStageDescriptorSet = perStageDescriptorSet
                        dynamicPipelineLayout = dynamicPipelineLayout
                    }

                new(perStageDescriptorSet: VkBool32, dynamicPipelineLayout: VkBool32) =
                    VkPhysicalDevicePerStageDescriptorSetFeaturesNV(Unchecked.defaultof<nativeint>, perStageDescriptorSet, dynamicPipelineLayout)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.perStageDescriptorSet = Unchecked.defaultof<VkBool32> && x.dynamicPipelineLayout = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePerStageDescriptorSetFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "perStageDescriptorSet = %A" x.perStageDescriptorSet
                        sprintf "dynamicPipelineLayout = %A" x.dynamicPipelineLayout
                    ] |> sprintf "VkPhysicalDevicePerStageDescriptorSetFeaturesNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDescriptorSetLayoutCreateFlags with
                  static member inline PerStageBitNv = enum<VkDescriptorSetLayoutCreateFlags> 0x00000040


    /// Requires QCOMImageProcessing.
    module QCOMImageProcessing2 =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_image_processing2"
        let Number = 519

        type VkBlockMatchWindowCompareModeQCOM =
            | Min = 0
            | Max = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImageProcessing2FeaturesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public textureBlockMatch2 : VkBool32

                new(pNext: nativeint, textureBlockMatch2: VkBool32) =
                    {
                        sType = 1000518000u
                        pNext = pNext
                        textureBlockMatch2 = textureBlockMatch2
                    }

                new(textureBlockMatch2: VkBool32) =
                    VkPhysicalDeviceImageProcessing2FeaturesQCOM(Unchecked.defaultof<nativeint>, textureBlockMatch2)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.textureBlockMatch2 = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceImageProcessing2FeaturesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "textureBlockMatch2 = %A" x.textureBlockMatch2
                    ] |> sprintf "VkPhysicalDeviceImageProcessing2FeaturesQCOM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImageProcessing2PropertiesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxBlockMatchWindow : VkExtent2D

                new(pNext: nativeint, maxBlockMatchWindow: VkExtent2D) =
                    {
                        sType = 1000518001u
                        pNext = pNext
                        maxBlockMatchWindow = maxBlockMatchWindow
                    }

                new(maxBlockMatchWindow: VkExtent2D) =
                    VkPhysicalDeviceImageProcessing2PropertiesQCOM(Unchecked.defaultof<nativeint>, maxBlockMatchWindow)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxBlockMatchWindow = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkPhysicalDeviceImageProcessing2PropertiesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxBlockMatchWindow = %A" x.maxBlockMatchWindow
                    ] |> sprintf "VkPhysicalDeviceImageProcessing2PropertiesQCOM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSamplerBlockMatchWindowCreateInfoQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public windowExtent : VkExtent2D
                val mutable public windowCompareMode : VkBlockMatchWindowCompareModeQCOM

                new(pNext: nativeint, windowExtent: VkExtent2D, windowCompareMode: VkBlockMatchWindowCompareModeQCOM) =
                    {
                        sType = 1000518002u
                        pNext = pNext
                        windowExtent = windowExtent
                        windowCompareMode = windowCompareMode
                    }

                new(windowExtent: VkExtent2D, windowCompareMode: VkBlockMatchWindowCompareModeQCOM) =
                    VkSamplerBlockMatchWindowCreateInfoQCOM(Unchecked.defaultof<nativeint>, windowExtent, windowCompareMode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.windowExtent = Unchecked.defaultof<VkExtent2D> && x.windowCompareMode = Unchecked.defaultof<VkBlockMatchWindowCompareModeQCOM>

                static member Empty =
                    VkSamplerBlockMatchWindowCreateInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkBlockMatchWindowCompareModeQCOM>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "windowExtent = %A" x.windowExtent
                        sprintf "windowCompareMode = %A" x.windowCompareMode
                    ] |> sprintf "VkSamplerBlockMatchWindowCreateInfoQCOM { %s }"
            end



    /// Requires EXTFilterCubic.
    module QCOMFilterCubicWeights =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_filter_cubic_weights"
        let Number = 520

        type VkCubicFilterWeightsQCOM =
            | CatmullRom = 0
            | ZeroTangentCardinal = 1
            | BSpline = 2
            | MitchellNetravali = 3


        [<StructLayout(LayoutKind.Sequential)>]
        type VkBlitImageCubicWeightsInfoQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cubicWeights : VkCubicFilterWeightsQCOM

                new(pNext: nativeint, cubicWeights: VkCubicFilterWeightsQCOM) =
                    {
                        sType = 1000519002u
                        pNext = pNext
                        cubicWeights = cubicWeights
                    }

                new(cubicWeights: VkCubicFilterWeightsQCOM) =
                    VkBlitImageCubicWeightsInfoQCOM(Unchecked.defaultof<nativeint>, cubicWeights)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cubicWeights = Unchecked.defaultof<VkCubicFilterWeightsQCOM>

                static member Empty =
                    VkBlitImageCubicWeightsInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCubicFilterWeightsQCOM>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cubicWeights = %A" x.cubicWeights
                    ] |> sprintf "VkBlitImageCubicWeightsInfoQCOM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCubicWeightsFeaturesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public selectableCubicWeights : VkBool32

                new(pNext: nativeint, selectableCubicWeights: VkBool32) =
                    {
                        sType = 1000519001u
                        pNext = pNext
                        selectableCubicWeights = selectableCubicWeights
                    }

                new(selectableCubicWeights: VkBool32) =
                    VkPhysicalDeviceCubicWeightsFeaturesQCOM(Unchecked.defaultof<nativeint>, selectableCubicWeights)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.selectableCubicWeights = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCubicWeightsFeaturesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "selectableCubicWeights = %A" x.selectableCubicWeights
                    ] |> sprintf "VkPhysicalDeviceCubicWeightsFeaturesQCOM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSamplerCubicWeightsCreateInfoQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cubicWeights : VkCubicFilterWeightsQCOM

                new(pNext: nativeint, cubicWeights: VkCubicFilterWeightsQCOM) =
                    {
                        sType = 1000519000u
                        pNext = pNext
                        cubicWeights = cubicWeights
                    }

                new(cubicWeights: VkCubicFilterWeightsQCOM) =
                    VkSamplerCubicWeightsCreateInfoQCOM(Unchecked.defaultof<nativeint>, cubicWeights)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cubicWeights = Unchecked.defaultof<VkCubicFilterWeightsQCOM>

                static member Empty =
                    VkSamplerCubicWeightsCreateInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCubicFilterWeightsQCOM>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cubicWeights = %A" x.cubicWeights
                    ] |> sprintf "VkSamplerCubicWeightsCreateInfoQCOM { %s }"
            end



    module QCOMYcbcrDegamma =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_ycbcr_degamma"
        let Number = 521

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceYcbcrDegammaFeaturesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public ycbcrDegamma : VkBool32

                new(pNext: nativeint, ycbcrDegamma: VkBool32) =
                    {
                        sType = 1000520000u
                        pNext = pNext
                        ycbcrDegamma = ycbcrDegamma
                    }

                new(ycbcrDegamma: VkBool32) =
                    VkPhysicalDeviceYcbcrDegammaFeaturesQCOM(Unchecked.defaultof<nativeint>, ycbcrDegamma)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.ycbcrDegamma = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceYcbcrDegammaFeaturesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "ycbcrDegamma = %A" x.ycbcrDegamma
                    ] |> sprintf "VkPhysicalDeviceYcbcrDegammaFeaturesQCOM { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public enableYDegamma : VkBool32
                val mutable public enableCbCrDegamma : VkBool32

                new(pNext: nativeint, enableYDegamma: VkBool32, enableCbCrDegamma: VkBool32) =
                    {
                        sType = 1000520001u
                        pNext = pNext
                        enableYDegamma = enableYDegamma
                        enableCbCrDegamma = enableCbCrDegamma
                    }

                new(enableYDegamma: VkBool32, enableCbCrDegamma: VkBool32) =
                    VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(Unchecked.defaultof<nativeint>, enableYDegamma, enableCbCrDegamma)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.enableYDegamma = Unchecked.defaultof<VkBool32> && x.enableCbCrDegamma = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "enableYDegamma = %A" x.enableYDegamma
                        sprintf "enableCbCrDegamma = %A" x.enableCbCrDegamma
                    ] |> sprintf "VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM { %s }"
            end



    /// Requires (EXTFilterCubic), (Vulkan12 | EXTSamplerFilterMinmax).
    module QCOMFilterCubicClamp =
        let Type = ExtensionType.Device
        let Name = "VK_QCOM_filter_cubic_clamp"
        let Number = 522

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCubicClampFeaturesQCOM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cubicRangeClamp : VkBool32

                new(pNext: nativeint, cubicRangeClamp: VkBool32) =
                    {
                        sType = 1000521000u
                        pNext = pNext
                        cubicRangeClamp = cubicRangeClamp
                    }

                new(cubicRangeClamp: VkBool32) =
                    VkPhysicalDeviceCubicClampFeaturesQCOM(Unchecked.defaultof<nativeint>, cubicRangeClamp)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cubicRangeClamp = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCubicClampFeaturesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cubicRangeClamp = %A" x.cubicRangeClamp
                    ] |> sprintf "VkPhysicalDeviceCubicClampFeaturesQCOM { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan12.VkSamplerReductionMode with
                  static member inline WeightedAverageRangeclampQcom = enum<Vulkan12.VkSamplerReductionMode> 1000521000


    /// Requires (KHRGetPhysicalDeviceProperties2 | Vulkan11), EXTAttachmentFeedbackLoopLayout.
    module EXTAttachmentFeedbackLoopDynamicState =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_attachment_feedback_loop_dynamic_state"
        let Number = 525

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public attachmentFeedbackLoopDynamicState : VkBool32

                new(pNext: nativeint, attachmentFeedbackLoopDynamicState: VkBool32) =
                    {
                        sType = 1000524000u
                        pNext = pNext
                        attachmentFeedbackLoopDynamicState = attachmentFeedbackLoopDynamicState
                    }

                new(attachmentFeedbackLoopDynamicState: VkBool32) =
                    VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(Unchecked.defaultof<nativeint>, attachmentFeedbackLoopDynamicState)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.attachmentFeedbackLoopDynamicState = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "attachmentFeedbackLoopDynamicState = %A" x.attachmentFeedbackLoopDynamicState
                    ] |> sprintf "VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  static member inline AttachmentFeedbackLoopEnableExt = enum<VkDynamicState> 1000524000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetAttachmentFeedbackLoopEnableEXTDel = delegate of VkCommandBuffer * VkImageAspectFlags -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTAttachmentFeedbackLoopDynamicState")
                static let s_vkCmdSetAttachmentFeedbackLoopEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetAttachmentFeedbackLoopEnableEXTDel> "vkCmdSetAttachmentFeedbackLoopEnableEXT"
                static do Report.End(3) |> ignore
                static member vkCmdSetAttachmentFeedbackLoopEnableEXT = s_vkCmdSetAttachmentFeedbackLoopEnableEXTDel
            let vkCmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer : VkCommandBuffer, aspectMask : VkImageAspectFlags) = Loader<unit>.vkCmdSetAttachmentFeedbackLoopEnableEXT.Invoke(commandBuffer, aspectMask)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan14.
    module KHRVertexAttributeDivisor =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_vertex_attribute_divisor"
        let Number = 526

        type VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR = Vulkan14.VkPhysicalDeviceVertexAttributeDivisorFeatures

        type VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR = Vulkan14.VkPhysicalDeviceVertexAttributeDivisorProperties

        type VkPipelineVertexInputDivisorStateCreateInfoKHR = Vulkan14.VkPipelineVertexInputDivisorStateCreateInfo

        type VkVertexInputBindingDivisorDescriptionKHR = Vulkan14.VkVertexInputBindingDivisorDescription



    /// Promoted to Vulkan14.
    module KHRLoadStoreOpNone =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_load_store_op_none"
        let Number = 527

        [<AutoOpen>]
        module EnumExtensions =
             type VkAttachmentLoadOp with
                  static member inline NoneKhr = enum<VkAttachmentLoadOp> 1000400000
             type VkAttachmentStoreOp with
                  static member inline NoneKhr = enum<VkAttachmentStoreOp> 1000301000


    /// Requires Vulkan11, KHRShaderFloatControls.
    /// Promoted to Vulkan14.
    module KHRShaderFloatControls2 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_float_controls2"
        let Number = 529

        type VkPhysicalDeviceShaderFloatControls2FeaturesKHR = Vulkan14.VkPhysicalDeviceShaderFloatControls2Features



    /// Requires ((KHRSamplerYcbcrConversion, KHRExternalMemory, KHRDedicatedAllocation) | Vulkan11), EXTQueueFamilyForeign.
    module QNXExternalMemoryScreenBuffer =
        let Type = ExtensionType.Device
        let Name = "VK_QNX_external_memory_screen_buffer"
        let Number = 530

        [<StructLayout(LayoutKind.Sequential)>]
        type VkExternalFormatQNX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public externalFormat : uint64

                new(pNext: nativeint, externalFormat: uint64) =
                    {
                        sType = 1000529003u
                        pNext = pNext
                        externalFormat = externalFormat
                    }

                new(externalFormat: uint64) =
                    VkExternalFormatQNX(Unchecked.defaultof<nativeint>, externalFormat)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.externalFormat = Unchecked.defaultof<uint64>

                static member Empty =
                    VkExternalFormatQNX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "externalFormat = %A" x.externalFormat
                    ] |> sprintf "VkExternalFormatQNX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportScreenBufferInfoQNX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public buffer : nativeptr<nativeint>

                new(pNext: nativeint, buffer: nativeptr<nativeint>) =
                    {
                        sType = 1000529002u
                        pNext = pNext
                        buffer = buffer
                    }

                new(buffer: nativeptr<nativeint>) =
                    VkImportScreenBufferInfoQNX(Unchecked.defaultof<nativeint>, buffer)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<nativeptr<nativeint>>

                static member Empty =
                    VkImportScreenBufferInfoQNX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "buffer = %A" x.buffer
                    ] |> sprintf "VkImportScreenBufferInfoQNX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public screenBufferImport : VkBool32

                new(pNext: nativeint, screenBufferImport: VkBool32) =
                    {
                        sType = 1000529004u
                        pNext = pNext
                        screenBufferImport = screenBufferImport
                    }

                new(screenBufferImport: VkBool32) =
                    VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX(Unchecked.defaultof<nativeint>, screenBufferImport)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.screenBufferImport = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "screenBufferImport = %A" x.screenBufferImport
                    ] |> sprintf "VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkScreenBufferFormatPropertiesQNX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public format : VkFormat
                val mutable public externalFormat : uint64
                val mutable public screenUsage : uint64
                val mutable public formatFeatures : VkFormatFeatureFlags
                val mutable public samplerYcbcrConversionComponents : VkComponentMapping
                val mutable public suggestedYcbcrModel : Vulkan11.VkSamplerYcbcrModelConversion
                val mutable public suggestedYcbcrRange : Vulkan11.VkSamplerYcbcrRange
                val mutable public suggestedXChromaOffset : Vulkan11.VkChromaLocation
                val mutable public suggestedYChromaOffset : Vulkan11.VkChromaLocation

                new(pNext: nativeint, format: VkFormat, externalFormat: uint64, screenUsage: uint64, formatFeatures: VkFormatFeatureFlags, samplerYcbcrConversionComponents: VkComponentMapping, suggestedYcbcrModel: Vulkan11.VkSamplerYcbcrModelConversion, suggestedYcbcrRange: Vulkan11.VkSamplerYcbcrRange, suggestedXChromaOffset: Vulkan11.VkChromaLocation, suggestedYChromaOffset: Vulkan11.VkChromaLocation) =
                    {
                        sType = 1000529001u
                        pNext = pNext
                        format = format
                        externalFormat = externalFormat
                        screenUsage = screenUsage
                        formatFeatures = formatFeatures
                        samplerYcbcrConversionComponents = samplerYcbcrConversionComponents
                        suggestedYcbcrModel = suggestedYcbcrModel
                        suggestedYcbcrRange = suggestedYcbcrRange
                        suggestedXChromaOffset = suggestedXChromaOffset
                        suggestedYChromaOffset = suggestedYChromaOffset
                    }

                new(format: VkFormat, externalFormat: uint64, screenUsage: uint64, formatFeatures: VkFormatFeatureFlags, samplerYcbcrConversionComponents: VkComponentMapping, suggestedYcbcrModel: Vulkan11.VkSamplerYcbcrModelConversion, suggestedYcbcrRange: Vulkan11.VkSamplerYcbcrRange, suggestedXChromaOffset: Vulkan11.VkChromaLocation, suggestedYChromaOffset: Vulkan11.VkChromaLocation) =
                    VkScreenBufferFormatPropertiesQNX(Unchecked.defaultof<nativeint>, format, externalFormat, screenUsage, formatFeatures, samplerYcbcrConversionComponents, suggestedYcbcrModel, suggestedYcbcrRange, suggestedXChromaOffset, suggestedYChromaOffset)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x.externalFormat = Unchecked.defaultof<uint64> && x.screenUsage = Unchecked.defaultof<uint64> && x.formatFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.samplerYcbcrConversionComponents = Unchecked.defaultof<VkComponentMapping> && x.suggestedYcbcrModel = Unchecked.defaultof<Vulkan11.VkSamplerYcbcrModelConversion> && x.suggestedYcbcrRange = Unchecked.defaultof<Vulkan11.VkSamplerYcbcrRange> && x.suggestedXChromaOffset = Unchecked.defaultof<Vulkan11.VkChromaLocation> && x.suggestedYChromaOffset = Unchecked.defaultof<Vulkan11.VkChromaLocation>

                static member Empty =
                    VkScreenBufferFormatPropertiesQNX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<Vulkan11.VkSamplerYcbcrModelConversion>, Unchecked.defaultof<Vulkan11.VkSamplerYcbcrRange>, Unchecked.defaultof<Vulkan11.VkChromaLocation>, Unchecked.defaultof<Vulkan11.VkChromaLocation>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "format = %A" x.format
                        sprintf "externalFormat = %A" x.externalFormat
                        sprintf "screenUsage = %A" x.screenUsage
                        sprintf "formatFeatures = %A" x.formatFeatures
                        sprintf "samplerYcbcrConversionComponents = %A" x.samplerYcbcrConversionComponents
                        sprintf "suggestedYcbcrModel = %A" x.suggestedYcbcrModel
                        sprintf "suggestedYcbcrRange = %A" x.suggestedYcbcrRange
                        sprintf "suggestedXChromaOffset = %A" x.suggestedXChromaOffset
                        sprintf "suggestedYChromaOffset = %A" x.suggestedYChromaOffset
                    ] |> sprintf "VkScreenBufferFormatPropertiesQNX { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkScreenBufferPropertiesQNX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public allocationSize : VkDeviceSize
                val mutable public memoryTypeBits : uint32

                new(pNext: nativeint, allocationSize: VkDeviceSize, memoryTypeBits: uint32) =
                    {
                        sType = 1000529000u
                        pNext = pNext
                        allocationSize = allocationSize
                        memoryTypeBits = memoryTypeBits
                    }

                new(allocationSize: VkDeviceSize, memoryTypeBits: uint32) =
                    VkScreenBufferPropertiesQNX(Unchecked.defaultof<nativeint>, allocationSize, memoryTypeBits)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.allocationSize = Unchecked.defaultof<VkDeviceSize> && x.memoryTypeBits = Unchecked.defaultof<uint32>

                static member Empty =
                    VkScreenBufferPropertiesQNX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "allocationSize = %A" x.allocationSize
                        sprintf "memoryTypeBits = %A" x.memoryTypeBits
                    ] |> sprintf "VkScreenBufferPropertiesQNX { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkExternalMemoryHandleTypeFlags with
                  static member inline ScreenBufferBitQnx = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00004000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetScreenBufferPropertiesQNXDel = delegate of VkDevice * nativeptr<nativeint> * nativeptr<VkScreenBufferPropertiesQNX> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading QNXExternalMemoryScreenBuffer")
                static let s_vkGetScreenBufferPropertiesQNXDel = VkRaw.vkImportInstanceDelegate<VkGetScreenBufferPropertiesQNXDel> "vkGetScreenBufferPropertiesQNX"
                static do Report.End(3) |> ignore
                static member vkGetScreenBufferPropertiesQNX = s_vkGetScreenBufferPropertiesQNXDel
            let vkGetScreenBufferPropertiesQNX(device : VkDevice, buffer : nativeptr<nativeint>, pProperties : nativeptr<VkScreenBufferPropertiesQNX>) = Loader<unit>.vkGetScreenBufferPropertiesQNX.Invoke(device, buffer, pProperties)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module MSFTLayeredDriver =
        let Type = ExtensionType.Device
        let Name = "VK_MSFT_layered_driver"
        let Number = 531

        type VkLayeredDriverUnderlyingApiMSFT =
            | None = 0
            | D3d12 = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceLayeredDriverPropertiesMSFT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public underlyingAPI : VkLayeredDriverUnderlyingApiMSFT

                new(pNext: nativeint, underlyingAPI: VkLayeredDriverUnderlyingApiMSFT) =
                    {
                        sType = 1000530000u
                        pNext = pNext
                        underlyingAPI = underlyingAPI
                    }

                new(underlyingAPI: VkLayeredDriverUnderlyingApiMSFT) =
                    VkPhysicalDeviceLayeredDriverPropertiesMSFT(Unchecked.defaultof<nativeint>, underlyingAPI)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.underlyingAPI = Unchecked.defaultof<VkLayeredDriverUnderlyingApiMSFT>

                static member Empty =
                    VkPhysicalDeviceLayeredDriverPropertiesMSFT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkLayeredDriverUnderlyingApiMSFT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "underlyingAPI = %A" x.underlyingAPI
                    ] |> sprintf "VkPhysicalDeviceLayeredDriverPropertiesMSFT { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan14.
    module KHRIndexTypeUint8 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_index_type_uint8"
        let Number = 534

        type VkPhysicalDeviceIndexTypeUint8FeaturesKHR = Vulkan14.VkPhysicalDeviceIndexTypeUint8Features


        [<AutoOpen>]
        module EnumExtensions =
             type VkIndexType with
                  static member inline Uint8Khr = enum<VkIndexType> 1000265000


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan14.
    module KHRLineRasterization =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_line_rasterization"
        let Number = 535

        type VkLineRasterizationModeKHR = Vulkan14.VkLineRasterizationMode

        type VkPhysicalDeviceLineRasterizationFeaturesKHR = Vulkan14.VkPhysicalDeviceLineRasterizationFeatures

        type VkPhysicalDeviceLineRasterizationPropertiesKHR = Vulkan14.VkPhysicalDeviceLineRasterizationProperties

        type VkPipelineRasterizationLineStateCreateInfoKHR = Vulkan14.VkPipelineRasterizationLineStateCreateInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  static member inline LineStippleKhr = enum<VkDynamicState> 1000259000
             type Vulkan14.VkLineRasterizationMode with
                  static member inline DefaultKhr = enum<Vulkan14.VkLineRasterizationMode> 0
                  static member inline RectangularKhr = enum<Vulkan14.VkLineRasterizationMode> 1
                  static member inline BresenhamKhr = enum<Vulkan14.VkLineRasterizationMode> 2
                  static member inline RectangularSmoothKhr = enum<Vulkan14.VkLineRasterizationMode> 3

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdSetLineStippleKHRDel = delegate of VkCommandBuffer * uint32 * uint16 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRLineRasterization")
                static let s_vkCmdSetLineStippleKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdSetLineStippleKHRDel> "vkCmdSetLineStippleKHR"
                static do Report.End(3) |> ignore
                static member vkCmdSetLineStippleKHR = s_vkCmdSetLineStippleKHRDel
            let vkCmdSetLineStippleKHR(commandBuffer : VkCommandBuffer, lineStippleFactor : uint32, lineStipplePattern : uint16) = Loader<unit>.vkCmdSetLineStippleKHR.Invoke(commandBuffer, lineStippleFactor, lineStipplePattern)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module KHRCalibratedTimestamps =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_calibrated_timestamps"
        let Number = 544

        type VkTimeDomainKHR =
            | Device = 0
            | ClockMonotonic = 1
            | ClockMonotonicRaw = 2
            | QueryPerformanceCounter = 3


        [<StructLayout(LayoutKind.Sequential)>]
        type VkCalibratedTimestampInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public timeDomain : VkTimeDomainKHR

                new(pNext: nativeint, timeDomain: VkTimeDomainKHR) =
                    {
                        sType = 1000184000u
                        pNext = pNext
                        timeDomain = timeDomain
                    }

                new(timeDomain: VkTimeDomainKHR) =
                    VkCalibratedTimestampInfoKHR(Unchecked.defaultof<nativeint>, timeDomain)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.timeDomain = Unchecked.defaultof<VkTimeDomainKHR>

                static member Empty =
                    VkCalibratedTimestampInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkTimeDomainKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "timeDomain = %A" x.timeDomain
                    ] |> sprintf "VkCalibratedTimestampInfoKHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceCalibrateableTimeDomainsKHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkTimeDomainKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetCalibratedTimestampsKHRDel = delegate of VkDevice * uint32 * nativeptr<VkCalibratedTimestampInfoKHR> * nativeptr<uint64> * nativeptr<uint64> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRCalibratedTimestamps")
                static let s_vkGetPhysicalDeviceCalibrateableTimeDomainsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceCalibrateableTimeDomainsKHRDel> "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR"
                static let s_vkGetCalibratedTimestampsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetCalibratedTimestampsKHRDel> "vkGetCalibratedTimestampsKHR"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = s_vkGetPhysicalDeviceCalibrateableTimeDomainsKHRDel
                static member vkGetCalibratedTimestampsKHR = s_vkGetCalibratedTimestampsKHRDel
            let vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice : VkPhysicalDevice, pTimeDomainCount : nativeptr<uint32>, pTimeDomains : nativeptr<VkTimeDomainKHR>) = Loader<unit>.vkGetPhysicalDeviceCalibrateableTimeDomainsKHR.Invoke(physicalDevice, pTimeDomainCount, pTimeDomains)
            let vkGetCalibratedTimestampsKHR(device : VkDevice, timestampCount : uint32, pTimestampInfos : nativeptr<VkCalibratedTimestampInfoKHR>, pTimestamps : nativeptr<uint64>, pMaxDeviation : nativeptr<uint64>) = Loader<unit>.vkGetCalibratedTimestampsKHR.Invoke(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    /// Promoted to Vulkan14.
    module KHRShaderExpectAssume =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_expect_assume"
        let Number = 545

        type VkPhysicalDeviceShaderExpectAssumeFeaturesKHR = Vulkan14.VkPhysicalDeviceShaderExpectAssumeFeatures



    /// Requires Vulkan11.
    /// Promoted to Vulkan14.
    module KHRMaintenance6 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_maintenance6"
        let Number = 546

        type VkBindDescriptorSetsInfoKHR = Vulkan14.VkBindDescriptorSetsInfo

        type VkBindMemoryStatusKHR = Vulkan14.VkBindMemoryStatus

        type VkPhysicalDeviceMaintenance6FeaturesKHR = Vulkan14.VkPhysicalDeviceMaintenance6Features

        type VkPhysicalDeviceMaintenance6PropertiesKHR = Vulkan14.VkPhysicalDeviceMaintenance6Properties

        type VkPushConstantsInfoKHR = Vulkan14.VkPushConstantsInfo


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBindDescriptorSets2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan14.VkBindDescriptorSetsInfo> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdPushConstants2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan14.VkPushConstantsInfo> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRMaintenance6")
                static let s_vkCmdBindDescriptorSets2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBindDescriptorSets2KHRDel> "vkCmdBindDescriptorSets2KHR"
                static let s_vkCmdPushConstants2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdPushConstants2KHRDel> "vkCmdPushConstants2KHR"
                static do Report.End(3) |> ignore
                static member vkCmdBindDescriptorSets2KHR = s_vkCmdBindDescriptorSets2KHRDel
                static member vkCmdPushConstants2KHR = s_vkCmdPushConstants2KHRDel
            let vkCmdBindDescriptorSets2KHR(commandBuffer : VkCommandBuffer, pBindDescriptorSetsInfo : nativeptr<Vulkan14.VkBindDescriptorSetsInfo>) = Loader<unit>.vkCmdBindDescriptorSets2KHR.Invoke(commandBuffer, pBindDescriptorSetsInfo)
            let vkCmdPushConstants2KHR(commandBuffer : VkCommandBuffer, pPushConstantsInfo : nativeptr<Vulkan14.VkPushConstantsInfo>) = Loader<unit>.vkCmdPushConstants2KHR.Invoke(commandBuffer, pPushConstantsInfo)

        [<AutoOpen>]
        module ``KHRPushDescriptor`` =
            type VkPushDescriptorSetInfoKHR = Vulkan14.VkPushDescriptorSetInfo

            type VkPushDescriptorSetWithTemplateInfoKHR = Vulkan14.VkPushDescriptorSetWithTemplateInfo


            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdPushDescriptorSet2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan14.VkPushDescriptorSetInfo> -> unit
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdPushDescriptorSetWithTemplate2KHRDel = delegate of VkCommandBuffer * nativeptr<Vulkan14.VkPushDescriptorSetWithTemplateInfo> -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading KHRMaintenance6 -> KHRPushDescriptor")
                    static let s_vkCmdPushDescriptorSet2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdPushDescriptorSet2KHRDel> "vkCmdPushDescriptorSet2KHR"
                    static let s_vkCmdPushDescriptorSetWithTemplate2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdPushDescriptorSetWithTemplate2KHRDel> "vkCmdPushDescriptorSetWithTemplate2KHR"
                    static do Report.End(3) |> ignore
                    static member vkCmdPushDescriptorSet2KHR = s_vkCmdPushDescriptorSet2KHRDel
                    static member vkCmdPushDescriptorSetWithTemplate2KHR = s_vkCmdPushDescriptorSetWithTemplate2KHRDel
                let vkCmdPushDescriptorSet2KHR(commandBuffer : VkCommandBuffer, pPushDescriptorSetInfo : nativeptr<Vulkan14.VkPushDescriptorSetInfo>) = Loader<unit>.vkCmdPushDescriptorSet2KHR.Invoke(commandBuffer, pPushDescriptorSetInfo)
                let vkCmdPushDescriptorSetWithTemplate2KHR(commandBuffer : VkCommandBuffer, pPushDescriptorSetWithTemplateInfo : nativeptr<Vulkan14.VkPushDescriptorSetWithTemplateInfo>) = Loader<unit>.vkCmdPushDescriptorSetWithTemplate2KHR.Invoke(commandBuffer, pPushDescriptorSetWithTemplateInfo)

        [<AutoOpen>]
        module ``EXTDescriptorBuffer`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkBindDescriptorBufferEmbeddedSamplersInfoEXT =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public stageFlags : VkShaderStageFlags
                    val mutable public layout : VkPipelineLayout
                    val mutable public set : uint32

                    new(pNext: nativeint, stageFlags: VkShaderStageFlags, layout: VkPipelineLayout, set: uint32) =
                        {
                            sType = 1000545008u
                            pNext = pNext
                            stageFlags = stageFlags
                            layout = layout
                            set = set
                        }

                    new(stageFlags: VkShaderStageFlags, layout: VkPipelineLayout, set: uint32) =
                        VkBindDescriptorBufferEmbeddedSamplersInfoEXT(Unchecked.defaultof<nativeint>, stageFlags, layout, set)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.stageFlags = Unchecked.defaultof<VkShaderStageFlags> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.set = Unchecked.defaultof<uint32>

                    static member Empty =
                        VkBindDescriptorBufferEmbeddedSamplersInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<uint32>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "stageFlags = %A" x.stageFlags
                            sprintf "layout = %A" x.layout
                            sprintf "set = %A" x.set
                        ] |> sprintf "VkBindDescriptorBufferEmbeddedSamplersInfoEXT { %s }"
                end

            [<StructLayout(LayoutKind.Sequential)>]
            type VkSetDescriptorBufferOffsetsInfoEXT =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public stageFlags : VkShaderStageFlags
                    val mutable public layout : VkPipelineLayout
                    val mutable public firstSet : uint32
                    val mutable public setCount : uint32
                    val mutable public pBufferIndices : nativeptr<uint32>
                    val mutable public pOffsets : nativeptr<VkDeviceSize>

                    new(pNext: nativeint, stageFlags: VkShaderStageFlags, layout: VkPipelineLayout, firstSet: uint32, setCount: uint32, pBufferIndices: nativeptr<uint32>, pOffsets: nativeptr<VkDeviceSize>) =
                        {
                            sType = 1000545007u
                            pNext = pNext
                            stageFlags = stageFlags
                            layout = layout
                            firstSet = firstSet
                            setCount = setCount
                            pBufferIndices = pBufferIndices
                            pOffsets = pOffsets
                        }

                    new(stageFlags: VkShaderStageFlags, layout: VkPipelineLayout, firstSet: uint32, setCount: uint32, pBufferIndices: nativeptr<uint32>, pOffsets: nativeptr<VkDeviceSize>) =
                        VkSetDescriptorBufferOffsetsInfoEXT(Unchecked.defaultof<nativeint>, stageFlags, layout, firstSet, setCount, pBufferIndices, pOffsets)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.stageFlags = Unchecked.defaultof<VkShaderStageFlags> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.firstSet = Unchecked.defaultof<uint32> && x.setCount = Unchecked.defaultof<uint32> && x.pBufferIndices = Unchecked.defaultof<nativeptr<uint32>> && x.pOffsets = Unchecked.defaultof<nativeptr<VkDeviceSize>>

                    static member Empty =
                        VkSetDescriptorBufferOffsetsInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<nativeptr<VkDeviceSize>>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "stageFlags = %A" x.stageFlags
                            sprintf "layout = %A" x.layout
                            sprintf "firstSet = %A" x.firstSet
                            sprintf "setCount = %A" x.setCount
                            sprintf "pBufferIndices = %A" x.pBufferIndices
                            sprintf "pOffsets = %A" x.pOffsets
                        ] |> sprintf "VkSetDescriptorBufferOffsetsInfoEXT { %s }"
                end


            module VkRaw =
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdSetDescriptorBufferOffsets2EXTDel = delegate of VkCommandBuffer * nativeptr<VkSetDescriptorBufferOffsetsInfoEXT> -> unit
                [<SuppressUnmanagedCodeSecurity>]
                type VkCmdBindDescriptorBufferEmbeddedSamplers2EXTDel = delegate of VkCommandBuffer * nativeptr<VkBindDescriptorBufferEmbeddedSamplersInfoEXT> -> unit

                [<AbstractClass; Sealed>]
                type private Loader<'T> private() =
                    static do Report.Begin(3, "[Vulkan] loading KHRMaintenance6 -> EXTDescriptorBuffer")
                    static let s_vkCmdSetDescriptorBufferOffsets2EXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDescriptorBufferOffsets2EXTDel> "vkCmdSetDescriptorBufferOffsets2EXT"
                    static let s_vkCmdBindDescriptorBufferEmbeddedSamplers2EXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBindDescriptorBufferEmbeddedSamplers2EXTDel> "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT"
                    static do Report.End(3) |> ignore
                    static member vkCmdSetDescriptorBufferOffsets2EXT = s_vkCmdSetDescriptorBufferOffsets2EXTDel
                    static member vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = s_vkCmdBindDescriptorBufferEmbeddedSamplers2EXTDel
                let vkCmdSetDescriptorBufferOffsets2EXT(commandBuffer : VkCommandBuffer, pSetDescriptorBufferOffsetsInfo : nativeptr<VkSetDescriptorBufferOffsetsInfoEXT>) = Loader<unit>.vkCmdSetDescriptorBufferOffsets2EXT.Invoke(commandBuffer, pSetDescriptorBufferOffsetsInfo)
                let vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(commandBuffer : VkCommandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo : nativeptr<VkBindDescriptorBufferEmbeddedSamplersInfoEXT>) = Loader<unit>.vkCmdBindDescriptorBufferEmbeddedSamplers2EXT.Invoke(commandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo)

    /// Requires Vulkan11.
    module NVDescriptorPoolOverallocation =
        let Type = ExtensionType.Device
        let Name = "VK_NV_descriptor_pool_overallocation"
        let Number = 547

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public descriptorPoolOverallocation : VkBool32

                new(pNext: nativeint, descriptorPoolOverallocation: VkBool32) =
                    {
                        sType = 1000546000u
                        pNext = pNext
                        descriptorPoolOverallocation = descriptorPoolOverallocation
                    }

                new(descriptorPoolOverallocation: VkBool32) =
                    VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV(Unchecked.defaultof<nativeint>, descriptorPoolOverallocation)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.descriptorPoolOverallocation = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "descriptorPoolOverallocation = %A" x.descriptorPoolOverallocation
                    ] |> sprintf "VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDescriptorPoolCreateFlags with
                  static member inline AllowOverallocationSetsBitNv = enum<VkDescriptorPoolCreateFlags> 0x00000008
                  static member inline AllowOverallocationPoolsBitNv = enum<VkDescriptorPoolCreateFlags> 0x00000010


    /// Requires KHRDisplay, KHRGetDisplayProperties2.
    module NVDisplayStereo =
        let Type = ExtensionType.Instance
        let Name = "VK_NV_display_stereo"
        let Number = 552

        type VkDisplaySurfaceStereoTypeNV =
            | None = 0
            | OnboardDin = 1
            | Hdmi3d = 2
            | InbandDisplayport = 3


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplayModeStereoPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public hdmi3DSupported : VkBool32

                new(pNext: nativeint, hdmi3DSupported: VkBool32) =
                    {
                        sType = 1000551001u
                        pNext = pNext
                        hdmi3DSupported = hdmi3DSupported
                    }

                new(hdmi3DSupported: VkBool32) =
                    VkDisplayModeStereoPropertiesNV(Unchecked.defaultof<nativeint>, hdmi3DSupported)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.hdmi3DSupported = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkDisplayModeStereoPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "hdmi3DSupported = %A" x.hdmi3DSupported
                    ] |> sprintf "VkDisplayModeStereoPropertiesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDisplaySurfaceStereoCreateInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stereoType : VkDisplaySurfaceStereoTypeNV

                new(pNext: nativeint, stereoType: VkDisplaySurfaceStereoTypeNV) =
                    {
                        sType = 1000551000u
                        pNext = pNext
                        stereoType = stereoType
                    }

                new(stereoType: VkDisplaySurfaceStereoTypeNV) =
                    VkDisplaySurfaceStereoCreateInfoNV(Unchecked.defaultof<nativeint>, stereoType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stereoType = Unchecked.defaultof<VkDisplaySurfaceStereoTypeNV>

                static member Empty =
                    VkDisplaySurfaceStereoCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplaySurfaceStereoTypeNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "stereoType = %A" x.stereoType
                    ] |> sprintf "VkDisplaySurfaceStereoCreateInfoNV { %s }"
            end



    /// Requires KHRVideoEncodeQueue, KHRFormatFeatureFlags2.
    module KHRVideoEncodeQuantizationMap =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_video_encode_quantization_map"
        let Number = 554

        type VkVideoEncodeFlagsKHR = KHRVideoEncodeQueue.VkVideoEncodeFlagsKHR
        type VkVideoSessionParametersCreateFlagsKHR = KHRVideoQueue.VkVideoSessionParametersCreateFlagsKHR

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public videoEncodeQuantizationMap : VkBool32

                new(pNext: nativeint, videoEncodeQuantizationMap: VkBool32) =
                    {
                        sType = 1000553009u
                        pNext = pNext
                        videoEncodeQuantizationMap = videoEncodeQuantizationMap
                    }

                new(videoEncodeQuantizationMap: VkBool32) =
                    VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR(Unchecked.defaultof<nativeint>, videoEncodeQuantizationMap)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.videoEncodeQuantizationMap = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "videoEncodeQuantizationMap = %A" x.videoEncodeQuantizationMap
                    ] |> sprintf "VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeQuantizationMapCapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxQuantizationMapExtent : VkExtent2D

                new(pNext: nativeint, maxQuantizationMapExtent: VkExtent2D) =
                    {
                        sType = 1000553000u
                        pNext = pNext
                        maxQuantizationMapExtent = maxQuantizationMapExtent
                    }

                new(maxQuantizationMapExtent: VkExtent2D) =
                    VkVideoEncodeQuantizationMapCapabilitiesKHR(Unchecked.defaultof<nativeint>, maxQuantizationMapExtent)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxQuantizationMapExtent = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkVideoEncodeQuantizationMapCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxQuantizationMapExtent = %A" x.maxQuantizationMapExtent
                    ] |> sprintf "VkVideoEncodeQuantizationMapCapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeQuantizationMapInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public quantizationMap : VkImageView
                val mutable public quantizationMapExtent : VkExtent2D

                new(pNext: nativeint, quantizationMap: VkImageView, quantizationMapExtent: VkExtent2D) =
                    {
                        sType = 1000553002u
                        pNext = pNext
                        quantizationMap = quantizationMap
                        quantizationMapExtent = quantizationMapExtent
                    }

                new(quantizationMap: VkImageView, quantizationMapExtent: VkExtent2D) =
                    VkVideoEncodeQuantizationMapInfoKHR(Unchecked.defaultof<nativeint>, quantizationMap, quantizationMapExtent)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.quantizationMap = Unchecked.defaultof<VkImageView> && x.quantizationMapExtent = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkVideoEncodeQuantizationMapInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "quantizationMap = %A" x.quantizationMap
                        sprintf "quantizationMapExtent = %A" x.quantizationMapExtent
                    ] |> sprintf "VkVideoEncodeQuantizationMapInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public quantizationMapTexelSize : VkExtent2D

                new(pNext: nativeint, quantizationMapTexelSize: VkExtent2D) =
                    {
                        sType = 1000553005u
                        pNext = pNext
                        quantizationMapTexelSize = quantizationMapTexelSize
                    }

                new(quantizationMapTexelSize: VkExtent2D) =
                    VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, quantizationMapTexelSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.quantizationMapTexelSize = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "quantizationMapTexelSize = %A" x.quantizationMapTexelSize
                    ] |> sprintf "VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkVideoFormatQuantizationMapPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public quantizationMapTexelSize : VkExtent2D

                new(pNext: nativeint, quantizationMapTexelSize: VkExtent2D) =
                    {
                        sType = 1000553001u
                        pNext = pNext
                        quantizationMapTexelSize = quantizationMapTexelSize
                    }

                new(quantizationMapTexelSize: VkExtent2D) =
                    VkVideoFormatQuantizationMapPropertiesKHR(Unchecked.defaultof<nativeint>, quantizationMapTexelSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.quantizationMapTexelSize = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkVideoFormatQuantizationMapPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "quantizationMapTexelSize = %A" x.quantizationMapTexelSize
                    ] |> sprintf "VkVideoFormatQuantizationMapPropertiesKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkFormatFeatureFlags2 with
                  static member inline FormatFeature2VideoEncodeQuantizationDeltaMapBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00020000
                  static member inline FormatFeature2VideoEncodeEmphasisMapBitKhr = enum<Vulkan13.VkFormatFeatureFlags2> 0x00040000
             type VkImageLayout with
                  static member inline VideoEncodeQuantizationMapKhr = enum<VkImageLayout> 1000553000
             type VkImageUsageFlags with
                  static member inline VideoEncodeQuantizationDeltaMapBitKhr = enum<VkImageUsageFlags> 0x02000000
                  static member inline VideoEncodeEmphasisMapBitKhr = enum<VkImageUsageFlags> 0x04000000
             type KHRVideoEncodeQueue.VkVideoEncodeCapabilityFlagsKHR with
                  static member inline QuantizationDeltaMapBit = enum<KHRVideoEncodeQueue.VkVideoEncodeCapabilityFlagsKHR> 0x00000004
                  static member inline EmphasisMapBit = enum<KHRVideoEncodeQueue.VkVideoEncodeCapabilityFlagsKHR> 0x00000008
             type KHRVideoEncodeQueue.VkVideoEncodeFlagsKHR with
                  static member inline WithQuantizationDeltaMapBit = enum<KHRVideoEncodeQueue.VkVideoEncodeFlagsKHR> 0x00000001
                  static member inline WithEmphasisMapBit = enum<KHRVideoEncodeQueue.VkVideoEncodeFlagsKHR> 0x00000002
             type KHRVideoQueue.VkVideoSessionCreateFlagsKHR with
                  static member inline AllowEncodeQuantizationDeltaMapBit = enum<KHRVideoQueue.VkVideoSessionCreateFlagsKHR> 0x00000008
                  static member inline AllowEncodeEmphasisMapBit = enum<KHRVideoQueue.VkVideoSessionCreateFlagsKHR> 0x00000010
             type KHRVideoQueue.VkVideoSessionParametersCreateFlagsKHR with
                  static member inline QuantizationMapCompatibleBit = enum<KHRVideoQueue.VkVideoSessionParametersCreateFlagsKHR> 0x00000001


        [<AutoOpen>]
        module ``KHRVideoEncodeH264`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkVideoEncodeH264QuantizationMapCapabilitiesKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public minQpDelta : int32
                    val mutable public maxQpDelta : int32

                    new(pNext: nativeint, minQpDelta: int32, maxQpDelta: int32) =
                        {
                            sType = 1000553003u
                            pNext = pNext
                            minQpDelta = minQpDelta
                            maxQpDelta = maxQpDelta
                        }

                    new(minQpDelta: int32, maxQpDelta: int32) =
                        VkVideoEncodeH264QuantizationMapCapabilitiesKHR(Unchecked.defaultof<nativeint>, minQpDelta, maxQpDelta)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.minQpDelta = Unchecked.defaultof<int32> && x.maxQpDelta = Unchecked.defaultof<int32>

                    static member Empty =
                        VkVideoEncodeH264QuantizationMapCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<int32>, Unchecked.defaultof<int32>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "minQpDelta = %A" x.minQpDelta
                            sprintf "maxQpDelta = %A" x.maxQpDelta
                        ] |> sprintf "VkVideoEncodeH264QuantizationMapCapabilitiesKHR { %s }"
                end


            [<AutoOpen>]
            module EnumExtensions =
                 type KHRVideoEncodeH264.VkVideoEncodeH264CapabilityFlagsKHR with
                      static member inline MbQpDiffWraparoundBit = enum<KHRVideoEncodeH264.VkVideoEncodeH264CapabilityFlagsKHR> 0x00000200


        [<AutoOpen>]
        module ``KHRVideoEncodeH265`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkVideoEncodeH265QuantizationMapCapabilitiesKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public minQpDelta : int32
                    val mutable public maxQpDelta : int32

                    new(pNext: nativeint, minQpDelta: int32, maxQpDelta: int32) =
                        {
                            sType = 1000553004u
                            pNext = pNext
                            minQpDelta = minQpDelta
                            maxQpDelta = maxQpDelta
                        }

                    new(minQpDelta: int32, maxQpDelta: int32) =
                        VkVideoEncodeH265QuantizationMapCapabilitiesKHR(Unchecked.defaultof<nativeint>, minQpDelta, maxQpDelta)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.minQpDelta = Unchecked.defaultof<int32> && x.maxQpDelta = Unchecked.defaultof<int32>

                    static member Empty =
                        VkVideoEncodeH265QuantizationMapCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<int32>, Unchecked.defaultof<int32>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "minQpDelta = %A" x.minQpDelta
                            sprintf "maxQpDelta = %A" x.maxQpDelta
                        ] |> sprintf "VkVideoEncodeH265QuantizationMapCapabilitiesKHR { %s }"
                end

            [<StructLayout(LayoutKind.Sequential)>]
            type VkVideoFormatH265QuantizationMapPropertiesKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public compatibleCtbSizes : KHRVideoEncodeH265.VkVideoEncodeH265CtbSizeFlagsKHR

                    new(pNext: nativeint, compatibleCtbSizes: KHRVideoEncodeH265.VkVideoEncodeH265CtbSizeFlagsKHR) =
                        {
                            sType = 1000553006u
                            pNext = pNext
                            compatibleCtbSizes = compatibleCtbSizes
                        }

                    new(compatibleCtbSizes: KHRVideoEncodeH265.VkVideoEncodeH265CtbSizeFlagsKHR) =
                        VkVideoFormatH265QuantizationMapPropertiesKHR(Unchecked.defaultof<nativeint>, compatibleCtbSizes)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.compatibleCtbSizes = Unchecked.defaultof<KHRVideoEncodeH265.VkVideoEncodeH265CtbSizeFlagsKHR>

                    static member Empty =
                        VkVideoFormatH265QuantizationMapPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRVideoEncodeH265.VkVideoEncodeH265CtbSizeFlagsKHR>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "compatibleCtbSizes = %A" x.compatibleCtbSizes
                        ] |> sprintf "VkVideoFormatH265QuantizationMapPropertiesKHR { %s }"
                end


            [<AutoOpen>]
            module EnumExtensions =
                 type KHRVideoEncodeH265.VkVideoEncodeH265CapabilityFlagsKHR with
                      static member inline CuQpDiffWraparoundBit = enum<KHRVideoEncodeH265.VkVideoEncodeH265CapabilityFlagsKHR> 0x00000400


        [<AutoOpen>]
        module ``KHRVideoEncodeAv1`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkVideoEncodeAV1QuantizationMapCapabilitiesKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public minQIndexDelta : int32
                    val mutable public maxQIndexDelta : int32

                    new(pNext: nativeint, minQIndexDelta: int32, maxQIndexDelta: int32) =
                        {
                            sType = 1000553007u
                            pNext = pNext
                            minQIndexDelta = minQIndexDelta
                            maxQIndexDelta = maxQIndexDelta
                        }

                    new(minQIndexDelta: int32, maxQIndexDelta: int32) =
                        VkVideoEncodeAV1QuantizationMapCapabilitiesKHR(Unchecked.defaultof<nativeint>, minQIndexDelta, maxQIndexDelta)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.minQIndexDelta = Unchecked.defaultof<int32> && x.maxQIndexDelta = Unchecked.defaultof<int32>

                    static member Empty =
                        VkVideoEncodeAV1QuantizationMapCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<int32>, Unchecked.defaultof<int32>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "minQIndexDelta = %A" x.minQIndexDelta
                            sprintf "maxQIndexDelta = %A" x.maxQIndexDelta
                        ] |> sprintf "VkVideoEncodeAV1QuantizationMapCapabilitiesKHR { %s }"
                end

            [<StructLayout(LayoutKind.Sequential)>]
            type VkVideoFormatAV1QuantizationMapPropertiesKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public compatibleSuperblockSizes : KHRVideoEncodeAv1.VkVideoEncodeAV1SuperblockSizeFlagsKHR

                    new(pNext: nativeint, compatibleSuperblockSizes: KHRVideoEncodeAv1.VkVideoEncodeAV1SuperblockSizeFlagsKHR) =
                        {
                            sType = 1000553008u
                            pNext = pNext
                            compatibleSuperblockSizes = compatibleSuperblockSizes
                        }

                    new(compatibleSuperblockSizes: KHRVideoEncodeAv1.VkVideoEncodeAV1SuperblockSizeFlagsKHR) =
                        VkVideoFormatAV1QuantizationMapPropertiesKHR(Unchecked.defaultof<nativeint>, compatibleSuperblockSizes)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.compatibleSuperblockSizes = Unchecked.defaultof<KHRVideoEncodeAv1.VkVideoEncodeAV1SuperblockSizeFlagsKHR>

                    static member Empty =
                        VkVideoFormatAV1QuantizationMapPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRVideoEncodeAv1.VkVideoEncodeAV1SuperblockSizeFlagsKHR>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "compatibleSuperblockSizes = %A" x.compatibleSuperblockSizes
                        ] |> sprintf "VkVideoFormatAV1QuantizationMapPropertiesKHR { %s }"
                end



    module NVRawAccessChains =
        let Type = ExtensionType.Device
        let Name = "VK_NV_raw_access_chains"
        let Number = 556

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRawAccessChainsFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderRawAccessChains : VkBool32

                new(pNext: nativeint, shaderRawAccessChains: VkBool32) =
                    {
                        sType = 1000555000u
                        pNext = pNext
                        shaderRawAccessChains = shaderRawAccessChains
                    }

                new(shaderRawAccessChains: VkBool32) =
                    VkPhysicalDeviceRawAccessChainsFeaturesNV(Unchecked.defaultof<nativeint>, shaderRawAccessChains)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderRawAccessChains = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRawAccessChainsFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderRawAccessChains = %A" x.shaderRawAccessChains
                    ] |> sprintf "VkPhysicalDeviceRawAccessChainsFeaturesNV { %s }"
            end



    module KHRShaderRelaxedExtendedInstruction =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_shader_relaxed_extended_instruction"
        let Number = 559

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderRelaxedExtendedInstruction : VkBool32

                new(pNext: nativeint, shaderRelaxedExtendedInstruction: VkBool32) =
                    {
                        sType = 1000558000u
                        pNext = pNext
                        shaderRelaxedExtendedInstruction = shaderRelaxedExtendedInstruction
                    }

                new(shaderRelaxedExtendedInstruction: VkBool32) =
                    VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR(Unchecked.defaultof<nativeint>, shaderRelaxedExtendedInstruction)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderRelaxedExtendedInstruction = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderRelaxedExtendedInstruction = %A" x.shaderRelaxedExtendedInstruction
                    ] |> sprintf "VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR { %s }"
            end



    module NVCommandBufferInheritance =
        let Type = ExtensionType.Device
        let Name = "VK_NV_command_buffer_inheritance"
        let Number = 560

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCommandBufferInheritanceFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public commandBufferInheritance : VkBool32

                new(pNext: nativeint, commandBufferInheritance: VkBool32) =
                    {
                        sType = 1000559000u
                        pNext = pNext
                        commandBufferInheritance = commandBufferInheritance
                    }

                new(commandBufferInheritance: VkBool32) =
                    VkPhysicalDeviceCommandBufferInheritanceFeaturesNV(Unchecked.defaultof<nativeint>, commandBufferInheritance)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.commandBufferInheritance = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCommandBufferInheritanceFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "commandBufferInheritance = %A" x.commandBufferInheritance
                    ] |> sprintf "VkPhysicalDeviceCommandBufferInheritanceFeaturesNV { %s }"
            end



    /// Requires Vulkan11.
    module KHRMaintenance7 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_maintenance7"
        let Number = 563

        type VkPhysicalDeviceLayeredApiKHR =
            | Vulkan = 0
            | D3d12 = 1
            | Metal = 2
            | Opengl = 3
            | Opengles = 4


        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceLayeredApiPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public vendorID : uint32
                val mutable public deviceID : uint32
                val mutable public layeredAPI : VkPhysicalDeviceLayeredApiKHR
                val mutable public deviceName : String256

                new(pNext: nativeint, vendorID: uint32, deviceID: uint32, layeredAPI: VkPhysicalDeviceLayeredApiKHR, deviceName: String256) =
                    {
                        sType = 1000562003u
                        pNext = pNext
                        vendorID = vendorID
                        deviceID = deviceID
                        layeredAPI = layeredAPI
                        deviceName = deviceName
                    }

                new(vendorID: uint32, deviceID: uint32, layeredAPI: VkPhysicalDeviceLayeredApiKHR, deviceName: String256) =
                    VkPhysicalDeviceLayeredApiPropertiesKHR(Unchecked.defaultof<nativeint>, vendorID, deviceID, layeredAPI, deviceName)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.vendorID = Unchecked.defaultof<uint32> && x.deviceID = Unchecked.defaultof<uint32> && x.layeredAPI = Unchecked.defaultof<VkPhysicalDeviceLayeredApiKHR> && x.deviceName = Unchecked.defaultof<String256>

                static member Empty =
                    VkPhysicalDeviceLayeredApiPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPhysicalDeviceLayeredApiKHR>, Unchecked.defaultof<String256>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "vendorID = %A" x.vendorID
                        sprintf "deviceID = %A" x.deviceID
                        sprintf "layeredAPI = %A" x.layeredAPI
                        sprintf "deviceName = %A" x.deviceName
                    ] |> sprintf "VkPhysicalDeviceLayeredApiPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceLayeredApiPropertiesListKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public layeredApiCount : uint32
                val mutable public pLayeredApis : nativeptr<VkPhysicalDeviceLayeredApiPropertiesKHR>

                new(pNext: nativeint, layeredApiCount: uint32, pLayeredApis: nativeptr<VkPhysicalDeviceLayeredApiPropertiesKHR>) =
                    {
                        sType = 1000562002u
                        pNext = pNext
                        layeredApiCount = layeredApiCount
                        pLayeredApis = pLayeredApis
                    }

                new(layeredApiCount: uint32, pLayeredApis: nativeptr<VkPhysicalDeviceLayeredApiPropertiesKHR>) =
                    VkPhysicalDeviceLayeredApiPropertiesListKHR(Unchecked.defaultof<nativeint>, layeredApiCount, pLayeredApis)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.layeredApiCount = Unchecked.defaultof<uint32> && x.pLayeredApis = Unchecked.defaultof<nativeptr<VkPhysicalDeviceLayeredApiPropertiesKHR>>

                static member Empty =
                    VkPhysicalDeviceLayeredApiPropertiesListKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPhysicalDeviceLayeredApiPropertiesKHR>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "layeredApiCount = %A" x.layeredApiCount
                        sprintf "pLayeredApis = %A" x.pLayeredApis
                    ] |> sprintf "VkPhysicalDeviceLayeredApiPropertiesListKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceLayeredApiVulkanPropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public properties : Vulkan11.VkPhysicalDeviceProperties2

                new(pNext: nativeint, properties: Vulkan11.VkPhysicalDeviceProperties2) =
                    {
                        sType = 1000562004u
                        pNext = pNext
                        properties = properties
                    }

                new(properties: Vulkan11.VkPhysicalDeviceProperties2) =
                    VkPhysicalDeviceLayeredApiVulkanPropertiesKHR(Unchecked.defaultof<nativeint>, properties)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.properties = Unchecked.defaultof<Vulkan11.VkPhysicalDeviceProperties2>

                static member Empty =
                    VkPhysicalDeviceLayeredApiVulkanPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Vulkan11.VkPhysicalDeviceProperties2>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "properties = %A" x.properties
                    ] |> sprintf "VkPhysicalDeviceLayeredApiVulkanPropertiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMaintenance7FeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maintenance7 : VkBool32

                new(pNext: nativeint, maintenance7: VkBool32) =
                    {
                        sType = 1000562000u
                        pNext = pNext
                        maintenance7 = maintenance7
                    }

                new(maintenance7: VkBool32) =
                    VkPhysicalDeviceMaintenance7FeaturesKHR(Unchecked.defaultof<nativeint>, maintenance7)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maintenance7 = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMaintenance7FeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maintenance7 = %A" x.maintenance7
                    ] |> sprintf "VkPhysicalDeviceMaintenance7FeaturesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMaintenance7PropertiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public robustFragmentShadingRateAttachmentAccess : VkBool32
                val mutable public separateDepthStencilAttachmentAccess : VkBool32
                val mutable public maxDescriptorSetTotalUniformBuffersDynamic : uint32
                val mutable public maxDescriptorSetTotalStorageBuffersDynamic : uint32
                val mutable public maxDescriptorSetTotalBuffersDynamic : uint32
                val mutable public maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic : uint32
                val mutable public maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic : uint32
                val mutable public maxDescriptorSetUpdateAfterBindTotalBuffersDynamic : uint32

                new(pNext: nativeint, robustFragmentShadingRateAttachmentAccess: VkBool32, separateDepthStencilAttachmentAccess: VkBool32, maxDescriptorSetTotalUniformBuffersDynamic: uint32, maxDescriptorSetTotalStorageBuffersDynamic: uint32, maxDescriptorSetTotalBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindTotalBuffersDynamic: uint32) =
                    {
                        sType = 1000562001u
                        pNext = pNext
                        robustFragmentShadingRateAttachmentAccess = robustFragmentShadingRateAttachmentAccess
                        separateDepthStencilAttachmentAccess = separateDepthStencilAttachmentAccess
                        maxDescriptorSetTotalUniformBuffersDynamic = maxDescriptorSetTotalUniformBuffersDynamic
                        maxDescriptorSetTotalStorageBuffersDynamic = maxDescriptorSetTotalStorageBuffersDynamic
                        maxDescriptorSetTotalBuffersDynamic = maxDescriptorSetTotalBuffersDynamic
                        maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic = maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic
                        maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic = maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic
                        maxDescriptorSetUpdateAfterBindTotalBuffersDynamic = maxDescriptorSetUpdateAfterBindTotalBuffersDynamic
                    }

                new(robustFragmentShadingRateAttachmentAccess: VkBool32, separateDepthStencilAttachmentAccess: VkBool32, maxDescriptorSetTotalUniformBuffersDynamic: uint32, maxDescriptorSetTotalStorageBuffersDynamic: uint32, maxDescriptorSetTotalBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindTotalBuffersDynamic: uint32) =
                    VkPhysicalDeviceMaintenance7PropertiesKHR(Unchecked.defaultof<nativeint>, robustFragmentShadingRateAttachmentAccess, separateDepthStencilAttachmentAccess, maxDescriptorSetTotalUniformBuffersDynamic, maxDescriptorSetTotalStorageBuffersDynamic, maxDescriptorSetTotalBuffersDynamic, maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic, maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic, maxDescriptorSetUpdateAfterBindTotalBuffersDynamic)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.robustFragmentShadingRateAttachmentAccess = Unchecked.defaultof<VkBool32> && x.separateDepthStencilAttachmentAccess = Unchecked.defaultof<VkBool32> && x.maxDescriptorSetTotalUniformBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetTotalStorageBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetTotalBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindTotalBuffersDynamic = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceMaintenance7PropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "robustFragmentShadingRateAttachmentAccess = %A" x.robustFragmentShadingRateAttachmentAccess
                        sprintf "separateDepthStencilAttachmentAccess = %A" x.separateDepthStencilAttachmentAccess
                        sprintf "maxDescriptorSetTotalUniformBuffersDynamic = %A" x.maxDescriptorSetTotalUniformBuffersDynamic
                        sprintf "maxDescriptorSetTotalStorageBuffersDynamic = %A" x.maxDescriptorSetTotalStorageBuffersDynamic
                        sprintf "maxDescriptorSetTotalBuffersDynamic = %A" x.maxDescriptorSetTotalBuffersDynamic
                        sprintf "maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic = %A" x.maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic
                        sprintf "maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic = %A" x.maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic
                        sprintf "maxDescriptorSetUpdateAfterBindTotalBuffersDynamic = %A" x.maxDescriptorSetUpdateAfterBindTotalBuffersDynamic
                    ] |> sprintf "VkPhysicalDeviceMaintenance7PropertiesKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan13.VkRenderingFlags with
                  /// Promoted from extension 452
                  static member inline ContentsInlineBitKhr = enum<Vulkan13.VkRenderingFlags> 0x00000010
             type VkSubpassContents with
                  static member inline InlineAndSecondaryCommandBuffersKhr = enum<VkSubpassContents> 1000451000


    module NVShaderAtomicFloat16Vector =
        let Type = ExtensionType.Device
        let Name = "VK_NV_shader_atomic_float16_vector"
        let Number = 564

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderFloat16VectorAtomics : VkBool32

                new(pNext: nativeint, shaderFloat16VectorAtomics: VkBool32) =
                    {
                        sType = 1000563000u
                        pNext = pNext
                        shaderFloat16VectorAtomics = shaderFloat16VectorAtomics
                    }

                new(shaderFloat16VectorAtomics: VkBool32) =
                    VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(Unchecked.defaultof<nativeint>, shaderFloat16VectorAtomics)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderFloat16VectorAtomics = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderFloat16VectorAtomics = %A" x.shaderFloat16VectorAtomics
                    ] |> sprintf "VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV { %s }"
            end



    module EXTShaderReplicatedComposites =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_shader_replicated_composites"
        let Number = 565

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderReplicatedComposites : VkBool32

                new(pNext: nativeint, shaderReplicatedComposites: VkBool32) =
                    {
                        sType = 1000564000u
                        pNext = pNext
                        shaderReplicatedComposites = shaderReplicatedComposites
                    }

                new(shaderReplicatedComposites: VkBool32) =
                    VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT(Unchecked.defaultof<nativeint>, shaderReplicatedComposites)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderReplicatedComposites = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderReplicatedComposites = %A" x.shaderReplicatedComposites
                    ] |> sprintf "VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT { %s }"
            end



    module NVRayTracingValidation =
        let Type = ExtensionType.Device
        let Name = "VK_NV_ray_tracing_validation"
        let Number = 569

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceRayTracingValidationFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public rayTracingValidation : VkBool32

                new(pNext: nativeint, rayTracingValidation: VkBool32) =
                    {
                        sType = 1000568000u
                        pNext = pNext
                        rayTracingValidation = rayTracingValidation
                    }

                new(rayTracingValidation: VkBool32) =
                    VkPhysicalDeviceRayTracingValidationFeaturesNV(Unchecked.defaultof<nativeint>, rayTracingValidation)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.rayTracingValidation = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceRayTracingValidationFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "rayTracingValidation = %A" x.rayTracingValidation
                    ] |> sprintf "VkPhysicalDeviceRayTracingValidationFeaturesNV { %s }"
            end



    /// Requires KHRAccelerationStructure.
    module NVClusterAccelerationStructure =
        let Type = ExtensionType.Device
        let Name = "VK_NV_cluster_acceleration_structure"
        let Number = 570

        [<Flags>]
        type VkClusterAccelerationStructureClusterFlagsNV =
            | All = 1
            | None = 0
            | AllowDisableOpacityMicromaps = 0x00000001

        [<Flags>]
        type VkClusterAccelerationStructureGeometryFlagsNV =
            | All = 7
            | None = 0
            | CullDisableBit = 0x00000001
            | NoDuplicateAnyhitInvocationBit = 0x00000002
            | OpaqueBit = 0x00000004

        [<Flags>]
        type VkClusterAccelerationStructureAddressResolutionFlagsNV =
            | All = 63
            | None = 0
            | IndirectedDstImplicitDataBit = 0x00000001
            | IndirectedScratchDataBit = 0x00000002
            | IndirectedDstAddressArrayBit = 0x00000004
            | IndirectedDstSizesArrayBit = 0x00000008
            | IndirectedSrcInfosArrayBit = 0x00000010
            | IndirectedSrcInfosCountBit = 0x00000020

        [<Flags>]
        type VkClusterAccelerationStructureIndexFormatFlagsNV =
            | All = 7
            | None = 0
            | D8bit = 0x00000001
            | D16bit = 0x00000002
            | D32bit = 0x00000004

        type VkClusterAccelerationStructureTypeNV =
            | ClustersBottomLevel = 0
            | TriangleCluster = 1
            | TriangleClusterTemplate = 2

        type VkClusterAccelerationStructureOpTypeNV =
            | MoveObjects = 0
            | BuildClustersBottomLevel = 1
            | BuildTriangleCluster = 2
            | BuildTriangleClusterTemplate = 3
            | InstantiateTriangleCluster = 4

        type VkClusterAccelerationStructureOpModeNV =
            | ImplicitDestinations = 0
            | ExplicitDestinations = 1
            | ComputeSizes = 2


        [<StructLayout(LayoutKind.Sequential)>]
        type VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV =
            struct
                val mutable public clusterReferencesCount : uint32
                val mutable public clusterReferencesStride : uint32
                val mutable public clusterReferences : VkDeviceAddress

                new(clusterReferencesCount: uint32, clusterReferencesStride: uint32, clusterReferences: VkDeviceAddress) =
                    {
                        clusterReferencesCount = clusterReferencesCount
                        clusterReferencesStride = clusterReferencesStride
                        clusterReferences = clusterReferences
                    }

                member x.IsEmpty =
                    x.clusterReferencesCount = Unchecked.defaultof<uint32> && x.clusterReferencesStride = Unchecked.defaultof<uint32> && x.clusterReferences = Unchecked.defaultof<VkDeviceAddress>

                static member Empty =
                    VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceAddress>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "clusterReferencesCount = %A" x.clusterReferencesCount
                        sprintf "clusterReferencesStride = %A" x.clusterReferencesStride
                        sprintf "clusterReferences = %A" x.clusterReferences
                    ] |> sprintf "VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV =
            struct
                val mutable private __bitfield0 : uint32

                member x.geometryIndex
                    with get() : uint32 =  ((x.__bitfield0 >>> 0) &&& 0xFFFFFFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFFFFFFu <<< 0)) ||| ((( value) &&& 0xFFFFFFu) <<< 0)

                member x.reserved
                    with get() : uint32 =  ((x.__bitfield0 >>> 24) &&& 0x1Fu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0x1Fu <<< 24)) ||| ((( value) &&& 0x1Fu) <<< 24)

                member x.geometryFlags
                    with get() : uint32 =  ((x.__bitfield0 >>> 29) &&& 0x7u)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0x7u <<< 29)) ||| ((( value) &&& 0x7u) <<< 29)

                new(geometryIndex: uint32, reserved: uint32, geometryFlags: uint32) =
                    {
                        __bitfield0 = (( geometryIndex &&& 0xFFFFFFu) <<< 0) ||| (( reserved &&& 0x1Fu) <<< 24) ||| (( geometryFlags &&& 0x7u) <<< 29)
                    }

                member x.IsEmpty =
                    x.__bitfield0 = Unchecked.defaultof<uint32>

                static member Empty =
                    VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "geometryIndex = %A" x.geometryIndex
                        sprintf "reserved = %A" x.reserved
                        sprintf "geometryFlags = %A" x.geometryFlags
                    ] |> sprintf "VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkClusterAccelerationStructureBuildTriangleClusterInfoNV =
            struct
                val mutable public clusterID : uint32
                val mutable public clusterFlags : VkClusterAccelerationStructureClusterFlagsNV
                val mutable private __bitfield0 : uint32
                val mutable public baseGeometryIndexAndGeometryFlags : VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV
                val mutable public indexBufferStride : uint16
                val mutable public vertexBufferStride : uint16
                val mutable public geometryIndexAndFlagsBufferStride : uint16
                val mutable public opacityMicromapIndexBufferStride : uint16
                val mutable public indexBuffer : VkDeviceAddress
                val mutable public vertexBuffer : VkDeviceAddress
                val mutable public geometryIndexAndFlagsBuffer : VkDeviceAddress
                val mutable public opacityMicromapArray : VkDeviceAddress
                val mutable public opacityMicromapIndexBuffer : VkDeviceAddress

                member x.triangleCount
                    with get() : uint32 =  ((x.__bitfield0 >>> 0) &&& 0x1FFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0x1FFu <<< 0)) ||| ((( value) &&& 0x1FFu) <<< 0)

                member x.vertexCount
                    with get() : uint32 =  ((x.__bitfield0 >>> 9) &&& 0x1FFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0x1FFu <<< 9)) ||| ((( value) &&& 0x1FFu) <<< 9)

                member x.positionTruncateBitCount
                    with get() : uint32 =  ((x.__bitfield0 >>> 18) &&& 0x3Fu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0x3Fu <<< 18)) ||| ((( value) &&& 0x3Fu) <<< 18)

                member x.indexType
                    with get() : uint32 =  ((x.__bitfield0 >>> 24) &&& 0xFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFu <<< 24)) ||| ((( value) &&& 0xFu) <<< 24)

                member x.opacityMicromapIndexType
                    with get() : uint32 =  ((x.__bitfield0 >>> 28) &&& 0xFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFu <<< 28)) ||| ((( value) &&& 0xFu) <<< 28)

                new(clusterID: uint32, clusterFlags: VkClusterAccelerationStructureClusterFlagsNV, triangleCount: uint32, vertexCount: uint32, positionTruncateBitCount: uint32, indexType: uint32, opacityMicromapIndexType: uint32, baseGeometryIndexAndGeometryFlags: VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV, indexBufferStride: uint16, vertexBufferStride: uint16, geometryIndexAndFlagsBufferStride: uint16, opacityMicromapIndexBufferStride: uint16, indexBuffer: VkDeviceAddress, vertexBuffer: VkDeviceAddress, geometryIndexAndFlagsBuffer: VkDeviceAddress, opacityMicromapArray: VkDeviceAddress, opacityMicromapIndexBuffer: VkDeviceAddress) =
                    {
                        clusterID = clusterID
                        clusterFlags = clusterFlags
                        __bitfield0 = (( triangleCount &&& 0x1FFu) <<< 0) ||| (( vertexCount &&& 0x1FFu) <<< 9) ||| (( positionTruncateBitCount &&& 0x3Fu) <<< 18) ||| (( indexType &&& 0xFu) <<< 24) ||| (( opacityMicromapIndexType &&& 0xFu) <<< 28)
                        baseGeometryIndexAndGeometryFlags = baseGeometryIndexAndGeometryFlags
                        indexBufferStride = indexBufferStride
                        vertexBufferStride = vertexBufferStride
                        geometryIndexAndFlagsBufferStride = geometryIndexAndFlagsBufferStride
                        opacityMicromapIndexBufferStride = opacityMicromapIndexBufferStride
                        indexBuffer = indexBuffer
                        vertexBuffer = vertexBuffer
                        geometryIndexAndFlagsBuffer = geometryIndexAndFlagsBuffer
                        opacityMicromapArray = opacityMicromapArray
                        opacityMicromapIndexBuffer = opacityMicromapIndexBuffer
                    }

                member x.IsEmpty =
                    x.clusterID = Unchecked.defaultof<uint32> && x.clusterFlags = Unchecked.defaultof<VkClusterAccelerationStructureClusterFlagsNV> && x.__bitfield0 = Unchecked.defaultof<uint32> && x.baseGeometryIndexAndGeometryFlags = Unchecked.defaultof<VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV> && x.indexBufferStride = Unchecked.defaultof<uint16> && x.vertexBufferStride = Unchecked.defaultof<uint16> && x.geometryIndexAndFlagsBufferStride = Unchecked.defaultof<uint16> && x.opacityMicromapIndexBufferStride = Unchecked.defaultof<uint16> && x.indexBuffer = Unchecked.defaultof<VkDeviceAddress> && x.vertexBuffer = Unchecked.defaultof<VkDeviceAddress> && x.geometryIndexAndFlagsBuffer = Unchecked.defaultof<VkDeviceAddress> && x.opacityMicromapArray = Unchecked.defaultof<VkDeviceAddress> && x.opacityMicromapIndexBuffer = Unchecked.defaultof<VkDeviceAddress>

                static member Empty =
                    VkClusterAccelerationStructureBuildTriangleClusterInfoNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkClusterAccelerationStructureClusterFlagsNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV>, Unchecked.defaultof<uint16>, Unchecked.defaultof<uint16>, Unchecked.defaultof<uint16>, Unchecked.defaultof<uint16>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "clusterID = %A" x.clusterID
                        sprintf "clusterFlags = %A" x.clusterFlags
                        sprintf "triangleCount = %A" x.triangleCount
                        sprintf "vertexCount = %A" x.vertexCount
                        sprintf "positionTruncateBitCount = %A" x.positionTruncateBitCount
                        sprintf "indexType = %A" x.indexType
                        sprintf "opacityMicromapIndexType = %A" x.opacityMicromapIndexType
                        sprintf "baseGeometryIndexAndGeometryFlags = %A" x.baseGeometryIndexAndGeometryFlags
                        sprintf "indexBufferStride = %A" x.indexBufferStride
                        sprintf "vertexBufferStride = %A" x.vertexBufferStride
                        sprintf "geometryIndexAndFlagsBufferStride = %A" x.geometryIndexAndFlagsBufferStride
                        sprintf "opacityMicromapIndexBufferStride = %A" x.opacityMicromapIndexBufferStride
                        sprintf "indexBuffer = %A" x.indexBuffer
                        sprintf "vertexBuffer = %A" x.vertexBuffer
                        sprintf "geometryIndexAndFlagsBuffer = %A" x.geometryIndexAndFlagsBuffer
                        sprintf "opacityMicromapArray = %A" x.opacityMicromapArray
                        sprintf "opacityMicromapIndexBuffer = %A" x.opacityMicromapIndexBuffer
                    ] |> sprintf "VkClusterAccelerationStructureBuildTriangleClusterInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV =
            struct
                val mutable public clusterID : uint32
                val mutable public clusterFlags : VkClusterAccelerationStructureClusterFlagsNV
                val mutable private __bitfield0 : uint32
                val mutable public baseGeometryIndexAndGeometryFlags : VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV
                val mutable public indexBufferStride : uint16
                val mutable public vertexBufferStride : uint16
                val mutable public geometryIndexAndFlagsBufferStride : uint16
                val mutable public opacityMicromapIndexBufferStride : uint16
                val mutable public indexBuffer : VkDeviceAddress
                val mutable public vertexBuffer : VkDeviceAddress
                val mutable public geometryIndexAndFlagsBuffer : VkDeviceAddress
                val mutable public opacityMicromapArray : VkDeviceAddress
                val mutable public opacityMicromapIndexBuffer : VkDeviceAddress
                val mutable public instantiationBoundingBoxLimit : VkDeviceAddress

                member x.triangleCount
                    with get() : uint32 =  ((x.__bitfield0 >>> 0) &&& 0x1FFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0x1FFu <<< 0)) ||| ((( value) &&& 0x1FFu) <<< 0)

                member x.vertexCount
                    with get() : uint32 =  ((x.__bitfield0 >>> 9) &&& 0x1FFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0x1FFu <<< 9)) ||| ((( value) &&& 0x1FFu) <<< 9)

                member x.positionTruncateBitCount
                    with get() : uint32 =  ((x.__bitfield0 >>> 18) &&& 0x3Fu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0x3Fu <<< 18)) ||| ((( value) &&& 0x3Fu) <<< 18)

                member x.indexType
                    with get() : uint32 =  ((x.__bitfield0 >>> 24) &&& 0xFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFu <<< 24)) ||| ((( value) &&& 0xFu) <<< 24)

                member x.opacityMicromapIndexType
                    with get() : uint32 =  ((x.__bitfield0 >>> 28) &&& 0xFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFu <<< 28)) ||| ((( value) &&& 0xFu) <<< 28)

                new(clusterID: uint32, clusterFlags: VkClusterAccelerationStructureClusterFlagsNV, triangleCount: uint32, vertexCount: uint32, positionTruncateBitCount: uint32, indexType: uint32, opacityMicromapIndexType: uint32, baseGeometryIndexAndGeometryFlags: VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV, indexBufferStride: uint16, vertexBufferStride: uint16, geometryIndexAndFlagsBufferStride: uint16, opacityMicromapIndexBufferStride: uint16, indexBuffer: VkDeviceAddress, vertexBuffer: VkDeviceAddress, geometryIndexAndFlagsBuffer: VkDeviceAddress, opacityMicromapArray: VkDeviceAddress, opacityMicromapIndexBuffer: VkDeviceAddress, instantiationBoundingBoxLimit: VkDeviceAddress) =
                    {
                        clusterID = clusterID
                        clusterFlags = clusterFlags
                        __bitfield0 = (( triangleCount &&& 0x1FFu) <<< 0) ||| (( vertexCount &&& 0x1FFu) <<< 9) ||| (( positionTruncateBitCount &&& 0x3Fu) <<< 18) ||| (( indexType &&& 0xFu) <<< 24) ||| (( opacityMicromapIndexType &&& 0xFu) <<< 28)
                        baseGeometryIndexAndGeometryFlags = baseGeometryIndexAndGeometryFlags
                        indexBufferStride = indexBufferStride
                        vertexBufferStride = vertexBufferStride
                        geometryIndexAndFlagsBufferStride = geometryIndexAndFlagsBufferStride
                        opacityMicromapIndexBufferStride = opacityMicromapIndexBufferStride
                        indexBuffer = indexBuffer
                        vertexBuffer = vertexBuffer
                        geometryIndexAndFlagsBuffer = geometryIndexAndFlagsBuffer
                        opacityMicromapArray = opacityMicromapArray
                        opacityMicromapIndexBuffer = opacityMicromapIndexBuffer
                        instantiationBoundingBoxLimit = instantiationBoundingBoxLimit
                    }

                member x.IsEmpty =
                    x.clusterID = Unchecked.defaultof<uint32> && x.clusterFlags = Unchecked.defaultof<VkClusterAccelerationStructureClusterFlagsNV> && x.__bitfield0 = Unchecked.defaultof<uint32> && x.baseGeometryIndexAndGeometryFlags = Unchecked.defaultof<VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV> && x.indexBufferStride = Unchecked.defaultof<uint16> && x.vertexBufferStride = Unchecked.defaultof<uint16> && x.geometryIndexAndFlagsBufferStride = Unchecked.defaultof<uint16> && x.opacityMicromapIndexBufferStride = Unchecked.defaultof<uint16> && x.indexBuffer = Unchecked.defaultof<VkDeviceAddress> && x.vertexBuffer = Unchecked.defaultof<VkDeviceAddress> && x.geometryIndexAndFlagsBuffer = Unchecked.defaultof<VkDeviceAddress> && x.opacityMicromapArray = Unchecked.defaultof<VkDeviceAddress> && x.opacityMicromapIndexBuffer = Unchecked.defaultof<VkDeviceAddress> && x.instantiationBoundingBoxLimit = Unchecked.defaultof<VkDeviceAddress>

                static member Empty =
                    VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkClusterAccelerationStructureClusterFlagsNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV>, Unchecked.defaultof<uint16>, Unchecked.defaultof<uint16>, Unchecked.defaultof<uint16>, Unchecked.defaultof<uint16>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "clusterID = %A" x.clusterID
                        sprintf "clusterFlags = %A" x.clusterFlags
                        sprintf "triangleCount = %A" x.triangleCount
                        sprintf "vertexCount = %A" x.vertexCount
                        sprintf "positionTruncateBitCount = %A" x.positionTruncateBitCount
                        sprintf "indexType = %A" x.indexType
                        sprintf "opacityMicromapIndexType = %A" x.opacityMicromapIndexType
                        sprintf "baseGeometryIndexAndGeometryFlags = %A" x.baseGeometryIndexAndGeometryFlags
                        sprintf "indexBufferStride = %A" x.indexBufferStride
                        sprintf "vertexBufferStride = %A" x.vertexBufferStride
                        sprintf "geometryIndexAndFlagsBufferStride = %A" x.geometryIndexAndFlagsBufferStride
                        sprintf "opacityMicromapIndexBufferStride = %A" x.opacityMicromapIndexBufferStride
                        sprintf "indexBuffer = %A" x.indexBuffer
                        sprintf "vertexBuffer = %A" x.vertexBuffer
                        sprintf "geometryIndexAndFlagsBuffer = %A" x.geometryIndexAndFlagsBuffer
                        sprintf "opacityMicromapArray = %A" x.opacityMicromapArray
                        sprintf "opacityMicromapIndexBuffer = %A" x.opacityMicromapIndexBuffer
                        sprintf "instantiationBoundingBoxLimit = %A" x.instantiationBoundingBoxLimit
                    ] |> sprintf "VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkClusterAccelerationStructureClustersBottomLevelInputNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxTotalClusterCount : uint32
                val mutable public maxClusterCountPerAccelerationStructure : uint32

                new(pNext: nativeint, maxTotalClusterCount: uint32, maxClusterCountPerAccelerationStructure: uint32) =
                    {
                        sType = 1000569002u
                        pNext = pNext
                        maxTotalClusterCount = maxTotalClusterCount
                        maxClusterCountPerAccelerationStructure = maxClusterCountPerAccelerationStructure
                    }

                new(maxTotalClusterCount: uint32, maxClusterCountPerAccelerationStructure: uint32) =
                    VkClusterAccelerationStructureClustersBottomLevelInputNV(Unchecked.defaultof<nativeint>, maxTotalClusterCount, maxClusterCountPerAccelerationStructure)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxTotalClusterCount = Unchecked.defaultof<uint32> && x.maxClusterCountPerAccelerationStructure = Unchecked.defaultof<uint32>

                static member Empty =
                    VkClusterAccelerationStructureClustersBottomLevelInputNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxTotalClusterCount = %A" x.maxTotalClusterCount
                        sprintf "maxClusterCountPerAccelerationStructure = %A" x.maxClusterCountPerAccelerationStructure
                    ] |> sprintf "VkClusterAccelerationStructureClustersBottomLevelInputNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkClusterAccelerationStructureTriangleClusterInputNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public vertexFormat : VkFormat
                val mutable public maxGeometryIndexValue : uint32
                val mutable public maxClusterUniqueGeometryCount : uint32
                val mutable public maxClusterTriangleCount : uint32
                val mutable public maxClusterVertexCount : uint32
                val mutable public maxTotalTriangleCount : uint32
                val mutable public maxTotalVertexCount : uint32
                val mutable public minPositionTruncateBitCount : uint32

                new(pNext: nativeint, vertexFormat: VkFormat, maxGeometryIndexValue: uint32, maxClusterUniqueGeometryCount: uint32, maxClusterTriangleCount: uint32, maxClusterVertexCount: uint32, maxTotalTriangleCount: uint32, maxTotalVertexCount: uint32, minPositionTruncateBitCount: uint32) =
                    {
                        sType = 1000569003u
                        pNext = pNext
                        vertexFormat = vertexFormat
                        maxGeometryIndexValue = maxGeometryIndexValue
                        maxClusterUniqueGeometryCount = maxClusterUniqueGeometryCount
                        maxClusterTriangleCount = maxClusterTriangleCount
                        maxClusterVertexCount = maxClusterVertexCount
                        maxTotalTriangleCount = maxTotalTriangleCount
                        maxTotalVertexCount = maxTotalVertexCount
                        minPositionTruncateBitCount = minPositionTruncateBitCount
                    }

                new(vertexFormat: VkFormat, maxGeometryIndexValue: uint32, maxClusterUniqueGeometryCount: uint32, maxClusterTriangleCount: uint32, maxClusterVertexCount: uint32, maxTotalTriangleCount: uint32, maxTotalVertexCount: uint32, minPositionTruncateBitCount: uint32) =
                    VkClusterAccelerationStructureTriangleClusterInputNV(Unchecked.defaultof<nativeint>, vertexFormat, maxGeometryIndexValue, maxClusterUniqueGeometryCount, maxClusterTriangleCount, maxClusterVertexCount, maxTotalTriangleCount, maxTotalVertexCount, minPositionTruncateBitCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.vertexFormat = Unchecked.defaultof<VkFormat> && x.maxGeometryIndexValue = Unchecked.defaultof<uint32> && x.maxClusterUniqueGeometryCount = Unchecked.defaultof<uint32> && x.maxClusterTriangleCount = Unchecked.defaultof<uint32> && x.maxClusterVertexCount = Unchecked.defaultof<uint32> && x.maxTotalTriangleCount = Unchecked.defaultof<uint32> && x.maxTotalVertexCount = Unchecked.defaultof<uint32> && x.minPositionTruncateBitCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkClusterAccelerationStructureTriangleClusterInputNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "vertexFormat = %A" x.vertexFormat
                        sprintf "maxGeometryIndexValue = %A" x.maxGeometryIndexValue
                        sprintf "maxClusterUniqueGeometryCount = %A" x.maxClusterUniqueGeometryCount
                        sprintf "maxClusterTriangleCount = %A" x.maxClusterTriangleCount
                        sprintf "maxClusterVertexCount = %A" x.maxClusterVertexCount
                        sprintf "maxTotalTriangleCount = %A" x.maxTotalTriangleCount
                        sprintf "maxTotalVertexCount = %A" x.maxTotalVertexCount
                        sprintf "minPositionTruncateBitCount = %A" x.minPositionTruncateBitCount
                    ] |> sprintf "VkClusterAccelerationStructureTriangleClusterInputNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkClusterAccelerationStructureMoveObjectsInputNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _type : VkClusterAccelerationStructureTypeNV
                val mutable public noMoveOverlap : VkBool32
                val mutable public maxMovedBytes : VkDeviceSize

                new(pNext: nativeint, _type: VkClusterAccelerationStructureTypeNV, noMoveOverlap: VkBool32, maxMovedBytes: VkDeviceSize) =
                    {
                        sType = 1000569004u
                        pNext = pNext
                        _type = _type
                        noMoveOverlap = noMoveOverlap
                        maxMovedBytes = maxMovedBytes
                    }

                new(_type: VkClusterAccelerationStructureTypeNV, noMoveOverlap: VkBool32, maxMovedBytes: VkDeviceSize) =
                    VkClusterAccelerationStructureMoveObjectsInputNV(Unchecked.defaultof<nativeint>, _type, noMoveOverlap, maxMovedBytes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkClusterAccelerationStructureTypeNV> && x.noMoveOverlap = Unchecked.defaultof<VkBool32> && x.maxMovedBytes = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkClusterAccelerationStructureMoveObjectsInputNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkClusterAccelerationStructureTypeNV>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_type = %A" x._type
                        sprintf "noMoveOverlap = %A" x.noMoveOverlap
                        sprintf "maxMovedBytes = %A" x.maxMovedBytes
                    ] |> sprintf "VkClusterAccelerationStructureMoveObjectsInputNV { %s }"
            end

        [<StructLayout(LayoutKind.Explicit)>]
        type VkClusterAccelerationStructureOpInputNV =
            struct
                [<FieldOffset(0)>]
                val mutable public pClustersBottomLevel : nativeptr<VkClusterAccelerationStructureClustersBottomLevelInputNV>
                [<FieldOffset(0)>]
                val mutable public pTriangleClusters : nativeptr<VkClusterAccelerationStructureTriangleClusterInputNV>
                [<FieldOffset(0)>]
                val mutable public pMoveObjects : nativeptr<VkClusterAccelerationStructureMoveObjectsInputNV>

                static member PClustersBottomLevel(value: nativeptr<VkClusterAccelerationStructureClustersBottomLevelInputNV>) =
                    let mutable result = Unchecked.defaultof<VkClusterAccelerationStructureOpInputNV>
                    result.pClustersBottomLevel <- value
                    result

                static member PTriangleClusters(value: nativeptr<VkClusterAccelerationStructureTriangleClusterInputNV>) =
                    let mutable result = Unchecked.defaultof<VkClusterAccelerationStructureOpInputNV>
                    result.pTriangleClusters <- value
                    result

                static member PMoveObjects(value: nativeptr<VkClusterAccelerationStructureMoveObjectsInputNV>) =
                    let mutable result = Unchecked.defaultof<VkClusterAccelerationStructureOpInputNV>
                    result.pMoveObjects <- value
                    result

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pClustersBottomLevel = %A" x.pClustersBottomLevel
                        sprintf "pTriangleClusters = %A" x.pTriangleClusters
                        sprintf "pMoveObjects = %A" x.pMoveObjects
                    ] |> sprintf "VkClusterAccelerationStructureOpInputNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkClusterAccelerationStructureInputInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxAccelerationStructureCount : uint32
                val mutable public flags : KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR
                val mutable public opType : VkClusterAccelerationStructureOpTypeNV
                val mutable public opMode : VkClusterAccelerationStructureOpModeNV
                val mutable public opInput : VkClusterAccelerationStructureOpInputNV

                new(pNext: nativeint, maxAccelerationStructureCount: uint32, flags: KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR, opType: VkClusterAccelerationStructureOpTypeNV, opMode: VkClusterAccelerationStructureOpModeNV, opInput: VkClusterAccelerationStructureOpInputNV) =
                    {
                        sType = 1000569005u
                        pNext = pNext
                        maxAccelerationStructureCount = maxAccelerationStructureCount
                        flags = flags
                        opType = opType
                        opMode = opMode
                        opInput = opInput
                    }

                new(maxAccelerationStructureCount: uint32, flags: KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR, opType: VkClusterAccelerationStructureOpTypeNV, opMode: VkClusterAccelerationStructureOpModeNV, opInput: VkClusterAccelerationStructureOpInputNV) =
                    VkClusterAccelerationStructureInputInfoNV(Unchecked.defaultof<nativeint>, maxAccelerationStructureCount, flags, opType, opMode, opInput)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxAccelerationStructureCount = Unchecked.defaultof<uint32> && x.flags = Unchecked.defaultof<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> && x.opType = Unchecked.defaultof<VkClusterAccelerationStructureOpTypeNV> && x.opMode = Unchecked.defaultof<VkClusterAccelerationStructureOpModeNV> && x.opInput = Unchecked.defaultof<VkClusterAccelerationStructureOpInputNV>

                static member Empty =
                    VkClusterAccelerationStructureInputInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR>, Unchecked.defaultof<VkClusterAccelerationStructureOpTypeNV>, Unchecked.defaultof<VkClusterAccelerationStructureOpModeNV>, Unchecked.defaultof<VkClusterAccelerationStructureOpInputNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxAccelerationStructureCount = %A" x.maxAccelerationStructureCount
                        sprintf "flags = %A" x.flags
                        sprintf "opType = %A" x.opType
                        sprintf "opMode = %A" x.opMode
                        sprintf "opInput = %A" x.opInput
                    ] |> sprintf "VkClusterAccelerationStructureInputInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkClusterAccelerationStructureCommandsInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public input : VkClusterAccelerationStructureInputInfoNV
                val mutable public dstImplicitData : VkDeviceAddress
                val mutable public scratchData : VkDeviceAddress
                val mutable public dstAddressesArray : KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR
                val mutable public dstSizesArray : KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR
                val mutable public srcInfosArray : KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR
                val mutable public srcInfosCount : VkDeviceAddress
                val mutable public addressResolutionFlags : VkClusterAccelerationStructureAddressResolutionFlagsNV

                new(pNext: nativeint, input: VkClusterAccelerationStructureInputInfoNV, dstImplicitData: VkDeviceAddress, scratchData: VkDeviceAddress, dstAddressesArray: KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR, dstSizesArray: KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR, srcInfosArray: KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR, srcInfosCount: VkDeviceAddress, addressResolutionFlags: VkClusterAccelerationStructureAddressResolutionFlagsNV) =
                    {
                        sType = 1000569006u
                        pNext = pNext
                        input = input
                        dstImplicitData = dstImplicitData
                        scratchData = scratchData
                        dstAddressesArray = dstAddressesArray
                        dstSizesArray = dstSizesArray
                        srcInfosArray = srcInfosArray
                        srcInfosCount = srcInfosCount
                        addressResolutionFlags = addressResolutionFlags
                    }

                new(input: VkClusterAccelerationStructureInputInfoNV, dstImplicitData: VkDeviceAddress, scratchData: VkDeviceAddress, dstAddressesArray: KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR, dstSizesArray: KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR, srcInfosArray: KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR, srcInfosCount: VkDeviceAddress, addressResolutionFlags: VkClusterAccelerationStructureAddressResolutionFlagsNV) =
                    VkClusterAccelerationStructureCommandsInfoNV(Unchecked.defaultof<nativeint>, input, dstImplicitData, scratchData, dstAddressesArray, dstSizesArray, srcInfosArray, srcInfosCount, addressResolutionFlags)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.input = Unchecked.defaultof<VkClusterAccelerationStructureInputInfoNV> && x.dstImplicitData = Unchecked.defaultof<VkDeviceAddress> && x.scratchData = Unchecked.defaultof<VkDeviceAddress> && x.dstAddressesArray = Unchecked.defaultof<KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR> && x.dstSizesArray = Unchecked.defaultof<KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR> && x.srcInfosArray = Unchecked.defaultof<KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR> && x.srcInfosCount = Unchecked.defaultof<VkDeviceAddress> && x.addressResolutionFlags = Unchecked.defaultof<VkClusterAccelerationStructureAddressResolutionFlagsNV>

                static member Empty =
                    VkClusterAccelerationStructureCommandsInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkClusterAccelerationStructureInputInfoNV>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR>, Unchecked.defaultof<KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR>, Unchecked.defaultof<KHRRayTracingPipeline.VkStridedDeviceAddressRegionKHR>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkClusterAccelerationStructureAddressResolutionFlagsNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "input = %A" x.input
                        sprintf "dstImplicitData = %A" x.dstImplicitData
                        sprintf "scratchData = %A" x.scratchData
                        sprintf "dstAddressesArray = %A" x.dstAddressesArray
                        sprintf "dstSizesArray = %A" x.dstSizesArray
                        sprintf "srcInfosArray = %A" x.srcInfosArray
                        sprintf "srcInfosCount = %A" x.srcInfosCount
                        sprintf "addressResolutionFlags = %A" x.addressResolutionFlags
                    ] |> sprintf "VkClusterAccelerationStructureCommandsInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkStridedDeviceAddressNV =
            struct
                val mutable public startAddress : VkDeviceAddress
                val mutable public strideInBytes : VkDeviceSize

                new(startAddress: VkDeviceAddress, strideInBytes: VkDeviceSize) =
                    {
                        startAddress = startAddress
                        strideInBytes = strideInBytes
                    }

                member x.IsEmpty =
                    x.startAddress = Unchecked.defaultof<VkDeviceAddress> && x.strideInBytes = Unchecked.defaultof<VkDeviceSize>

                static member Empty =
                    VkStridedDeviceAddressNV(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "startAddress = %A" x.startAddress
                        sprintf "strideInBytes = %A" x.strideInBytes
                    ] |> sprintf "VkStridedDeviceAddressNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkClusterAccelerationStructureInstantiateClusterInfoNV =
            struct
                val mutable public clusterIdOffset : uint32
                val mutable private __bitfield0 : uint32
                val mutable public clusterTemplateAddress : VkDeviceAddress
                val mutable public vertexBuffer : VkStridedDeviceAddressNV

                member x.geometryIndexOffset
                    with get() : uint32 =  ((x.__bitfield0 >>> 0) &&& 0xFFFFFFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFFFFFFu <<< 0)) ||| ((( value) &&& 0xFFFFFFu) <<< 0)

                member x.reserved
                    with get() : uint32 =  ((x.__bitfield0 >>> 24) &&& 0xFFu)
                    and set (value: uint32) = x.__bitfield0 <- (x.__bitfield0 &&& ~~~(0xFFu <<< 24)) ||| ((( value) &&& 0xFFu) <<< 24)

                new(clusterIdOffset: uint32, geometryIndexOffset: uint32, reserved: uint32, clusterTemplateAddress: VkDeviceAddress, vertexBuffer: VkStridedDeviceAddressNV) =
                    {
                        clusterIdOffset = clusterIdOffset
                        __bitfield0 = (( geometryIndexOffset &&& 0xFFFFFFu) <<< 0) ||| (( reserved &&& 0xFFu) <<< 24)
                        clusterTemplateAddress = clusterTemplateAddress
                        vertexBuffer = vertexBuffer
                    }

                member x.IsEmpty =
                    x.clusterIdOffset = Unchecked.defaultof<uint32> && x.__bitfield0 = Unchecked.defaultof<uint32> && x.clusterTemplateAddress = Unchecked.defaultof<VkDeviceAddress> && x.vertexBuffer = Unchecked.defaultof<VkStridedDeviceAddressNV>

                static member Empty =
                    VkClusterAccelerationStructureInstantiateClusterInfoNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkStridedDeviceAddressNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "clusterIdOffset = %A" x.clusterIdOffset
                        sprintf "geometryIndexOffset = %A" x.geometryIndexOffset
                        sprintf "reserved = %A" x.reserved
                        sprintf "clusterTemplateAddress = %A" x.clusterTemplateAddress
                        sprintf "vertexBuffer = %A" x.vertexBuffer
                    ] |> sprintf "VkClusterAccelerationStructureInstantiateClusterInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkClusterAccelerationStructureMoveObjectsInfoNV =
            struct
                val mutable public srcAccelerationStructure : VkDeviceAddress

                new(srcAccelerationStructure: VkDeviceAddress) =
                    {
                        srcAccelerationStructure = srcAccelerationStructure
                    }

                member x.IsEmpty =
                    x.srcAccelerationStructure = Unchecked.defaultof<VkDeviceAddress>

                static member Empty =
                    VkClusterAccelerationStructureMoveObjectsInfoNV(Unchecked.defaultof<VkDeviceAddress>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "srcAccelerationStructure = %A" x.srcAccelerationStructure
                    ] |> sprintf "VkClusterAccelerationStructureMoveObjectsInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceClusterAccelerationStructureFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public clusterAccelerationStructure : VkBool32

                new(pNext: nativeint, clusterAccelerationStructure: VkBool32) =
                    {
                        sType = 1000569000u
                        pNext = pNext
                        clusterAccelerationStructure = clusterAccelerationStructure
                    }

                new(clusterAccelerationStructure: VkBool32) =
                    VkPhysicalDeviceClusterAccelerationStructureFeaturesNV(Unchecked.defaultof<nativeint>, clusterAccelerationStructure)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.clusterAccelerationStructure = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceClusterAccelerationStructureFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "clusterAccelerationStructure = %A" x.clusterAccelerationStructure
                    ] |> sprintf "VkPhysicalDeviceClusterAccelerationStructureFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceClusterAccelerationStructurePropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxVerticesPerCluster : uint32
                val mutable public maxTrianglesPerCluster : uint32
                val mutable public clusterScratchByteAlignment : uint32
                val mutable public clusterByteAlignment : uint32
                val mutable public clusterTemplateByteAlignment : uint32
                val mutable public clusterBottomLevelByteAlignment : uint32
                val mutable public clusterTemplateBoundsByteAlignment : uint32
                val mutable public maxClusterGeometryIndex : uint32

                new(pNext: nativeint, maxVerticesPerCluster: uint32, maxTrianglesPerCluster: uint32, clusterScratchByteAlignment: uint32, clusterByteAlignment: uint32, clusterTemplateByteAlignment: uint32, clusterBottomLevelByteAlignment: uint32, clusterTemplateBoundsByteAlignment: uint32, maxClusterGeometryIndex: uint32) =
                    {
                        sType = 1000569001u
                        pNext = pNext
                        maxVerticesPerCluster = maxVerticesPerCluster
                        maxTrianglesPerCluster = maxTrianglesPerCluster
                        clusterScratchByteAlignment = clusterScratchByteAlignment
                        clusterByteAlignment = clusterByteAlignment
                        clusterTemplateByteAlignment = clusterTemplateByteAlignment
                        clusterBottomLevelByteAlignment = clusterBottomLevelByteAlignment
                        clusterTemplateBoundsByteAlignment = clusterTemplateBoundsByteAlignment
                        maxClusterGeometryIndex = maxClusterGeometryIndex
                    }

                new(maxVerticesPerCluster: uint32, maxTrianglesPerCluster: uint32, clusterScratchByteAlignment: uint32, clusterByteAlignment: uint32, clusterTemplateByteAlignment: uint32, clusterBottomLevelByteAlignment: uint32, clusterTemplateBoundsByteAlignment: uint32, maxClusterGeometryIndex: uint32) =
                    VkPhysicalDeviceClusterAccelerationStructurePropertiesNV(Unchecked.defaultof<nativeint>, maxVerticesPerCluster, maxTrianglesPerCluster, clusterScratchByteAlignment, clusterByteAlignment, clusterTemplateByteAlignment, clusterBottomLevelByteAlignment, clusterTemplateBoundsByteAlignment, maxClusterGeometryIndex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxVerticesPerCluster = Unchecked.defaultof<uint32> && x.maxTrianglesPerCluster = Unchecked.defaultof<uint32> && x.clusterScratchByteAlignment = Unchecked.defaultof<uint32> && x.clusterByteAlignment = Unchecked.defaultof<uint32> && x.clusterTemplateByteAlignment = Unchecked.defaultof<uint32> && x.clusterBottomLevelByteAlignment = Unchecked.defaultof<uint32> && x.clusterTemplateBoundsByteAlignment = Unchecked.defaultof<uint32> && x.maxClusterGeometryIndex = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceClusterAccelerationStructurePropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxVerticesPerCluster = %A" x.maxVerticesPerCluster
                        sprintf "maxTrianglesPerCluster = %A" x.maxTrianglesPerCluster
                        sprintf "clusterScratchByteAlignment = %A" x.clusterScratchByteAlignment
                        sprintf "clusterByteAlignment = %A" x.clusterByteAlignment
                        sprintf "clusterTemplateByteAlignment = %A" x.clusterTemplateByteAlignment
                        sprintf "clusterBottomLevelByteAlignment = %A" x.clusterBottomLevelByteAlignment
                        sprintf "clusterTemplateBoundsByteAlignment = %A" x.clusterTemplateBoundsByteAlignment
                        sprintf "maxClusterGeometryIndex = %A" x.maxClusterGeometryIndex
                    ] |> sprintf "VkPhysicalDeviceClusterAccelerationStructurePropertiesNV { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetClusterAccelerationStructureBuildSizesNVDel = delegate of VkDevice * nativeptr<VkClusterAccelerationStructureInputInfoNV> * nativeptr<KHRAccelerationStructure.VkAccelerationStructureBuildSizesInfoKHR> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBuildClusterAccelerationStructureIndirectNVDel = delegate of VkCommandBuffer * nativeptr<VkClusterAccelerationStructureCommandsInfoNV> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVClusterAccelerationStructure")
                static let s_vkGetClusterAccelerationStructureBuildSizesNVDel = VkRaw.vkImportInstanceDelegate<VkGetClusterAccelerationStructureBuildSizesNVDel> "vkGetClusterAccelerationStructureBuildSizesNV"
                static let s_vkCmdBuildClusterAccelerationStructureIndirectNVDel = VkRaw.vkImportInstanceDelegate<VkCmdBuildClusterAccelerationStructureIndirectNVDel> "vkCmdBuildClusterAccelerationStructureIndirectNV"
                static do Report.End(3) |> ignore
                static member vkGetClusterAccelerationStructureBuildSizesNV = s_vkGetClusterAccelerationStructureBuildSizesNVDel
                static member vkCmdBuildClusterAccelerationStructureIndirectNV = s_vkCmdBuildClusterAccelerationStructureIndirectNVDel
            let vkGetClusterAccelerationStructureBuildSizesNV(device : VkDevice, pInfo : nativeptr<VkClusterAccelerationStructureInputInfoNV>, pSizeInfo : nativeptr<KHRAccelerationStructure.VkAccelerationStructureBuildSizesInfoKHR>) = Loader<unit>.vkGetClusterAccelerationStructureBuildSizesNV.Invoke(device, pInfo, pSizeInfo)
            let vkCmdBuildClusterAccelerationStructureIndirectNV(commandBuffer : VkCommandBuffer, pCommandInfos : nativeptr<VkClusterAccelerationStructureCommandsInfoNV>) = Loader<unit>.vkCmdBuildClusterAccelerationStructureIndirectNV.Invoke(commandBuffer, pCommandInfos)

        [<AutoOpen>]
        module ``EXTOpacityMicromap`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type EXTOpacityMicromap.VkOpacityMicromapSpecialIndexEXT with
                      static member inline ClusterGeometryDisableOpacityMicromapNv = enum<EXTOpacityMicromap.VkOpacityMicromapSpecialIndexEXT> -5


        [<AutoOpen>]
        module ``KHRRayTracingPipeline`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public allowClusterAccelerationStructure : VkBool32

                    new(pNext: nativeint, allowClusterAccelerationStructure: VkBool32) =
                        {
                            sType = 1000569007u
                            pNext = pNext
                            allowClusterAccelerationStructure = allowClusterAccelerationStructure
                        }

                    new(allowClusterAccelerationStructure: VkBool32) =
                        VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV(Unchecked.defaultof<nativeint>, allowClusterAccelerationStructure)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.allowClusterAccelerationStructure = Unchecked.defaultof<VkBool32>

                    static member Empty =
                        VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "allowClusterAccelerationStructure = %A" x.allowClusterAccelerationStructure
                        ] |> sprintf "VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV { %s }"
                end



    /// Requires KHRAccelerationStructure.
    module NVPartitionedAccelerationStructure =
        let Type = ExtensionType.Device
        let Name = "VK_NV_partitioned_acceleration_structure"
        let Number = 571

        type VkPartitionedAccelerationStructureOpTypeNV =
            | WriteInstance = 0
            | UpdateInstance = 1
            | WritePartitionTranslation = 2

        [<Flags>]
        type VkPartitionedAccelerationStructureInstanceFlagsNV =
            | All = 31
            | None = 0
            | FlagTriangleFacingCullDisableBit = 0x00000001
            | FlagTriangleFlipFacingBit = 0x00000002
            | FlagForceOpaqueBit = 0x00000004
            | FlagForceNoOpaqueBit = 0x00000008
            | FlagEnableExplicitBoundingBox = 0x00000010


        [<StructLayout(LayoutKind.Sequential)>]
        type VkBuildPartitionedAccelerationStructureIndirectCommandNV =
            struct
                val mutable public opType : VkPartitionedAccelerationStructureOpTypeNV
                val mutable public argCount : uint32
                val mutable public argData : NVClusterAccelerationStructure.VkStridedDeviceAddressNV

                new(opType: VkPartitionedAccelerationStructureOpTypeNV, argCount: uint32, argData: NVClusterAccelerationStructure.VkStridedDeviceAddressNV) =
                    {
                        opType = opType
                        argCount = argCount
                        argData = argData
                    }

                member x.IsEmpty =
                    x.opType = Unchecked.defaultof<VkPartitionedAccelerationStructureOpTypeNV> && x.argCount = Unchecked.defaultof<uint32> && x.argData = Unchecked.defaultof<NVClusterAccelerationStructure.VkStridedDeviceAddressNV>

                static member Empty =
                    VkBuildPartitionedAccelerationStructureIndirectCommandNV(Unchecked.defaultof<VkPartitionedAccelerationStructureOpTypeNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<NVClusterAccelerationStructure.VkStridedDeviceAddressNV>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "opType = %A" x.opType
                        sprintf "argCount = %A" x.argCount
                        sprintf "argData = %A" x.argData
                    ] |> sprintf "VkBuildPartitionedAccelerationStructureIndirectCommandNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPartitionedAccelerationStructureInstancesInputNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR
                val mutable public instanceCount : uint32
                val mutable public maxInstancePerPartitionCount : uint32
                val mutable public partitionCount : uint32
                val mutable public maxInstanceInGlobalPartitionCount : uint32

                new(pNext: nativeint, flags: KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR, instanceCount: uint32, maxInstancePerPartitionCount: uint32, partitionCount: uint32, maxInstanceInGlobalPartitionCount: uint32) =
                    {
                        sType = 1000570003u
                        pNext = pNext
                        flags = flags
                        instanceCount = instanceCount
                        maxInstancePerPartitionCount = maxInstancePerPartitionCount
                        partitionCount = partitionCount
                        maxInstanceInGlobalPartitionCount = maxInstanceInGlobalPartitionCount
                    }

                new(flags: KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR, instanceCount: uint32, maxInstancePerPartitionCount: uint32, partitionCount: uint32, maxInstanceInGlobalPartitionCount: uint32) =
                    VkPartitionedAccelerationStructureInstancesInputNV(Unchecked.defaultof<nativeint>, flags, instanceCount, maxInstancePerPartitionCount, partitionCount, maxInstanceInGlobalPartitionCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR> && x.instanceCount = Unchecked.defaultof<uint32> && x.maxInstancePerPartitionCount = Unchecked.defaultof<uint32> && x.partitionCount = Unchecked.defaultof<uint32> && x.maxInstanceInGlobalPartitionCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPartitionedAccelerationStructureInstancesInputNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<KHRAccelerationStructure.VkBuildAccelerationStructureFlagsKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "instanceCount = %A" x.instanceCount
                        sprintf "maxInstancePerPartitionCount = %A" x.maxInstancePerPartitionCount
                        sprintf "partitionCount = %A" x.partitionCount
                        sprintf "maxInstanceInGlobalPartitionCount = %A" x.maxInstanceInGlobalPartitionCount
                    ] |> sprintf "VkPartitionedAccelerationStructureInstancesInputNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBuildPartitionedAccelerationStructureInfoNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public input : VkPartitionedAccelerationStructureInstancesInputNV
                val mutable public srcAccelerationStructureData : VkDeviceAddress
                val mutable public dstAccelerationStructureData : VkDeviceAddress
                val mutable public scratchData : VkDeviceAddress
                val mutable public srcInfos : VkDeviceAddress
                val mutable public srcInfosCount : VkDeviceAddress

                new(pNext: nativeint, input: VkPartitionedAccelerationStructureInstancesInputNV, srcAccelerationStructureData: VkDeviceAddress, dstAccelerationStructureData: VkDeviceAddress, scratchData: VkDeviceAddress, srcInfos: VkDeviceAddress, srcInfosCount: VkDeviceAddress) =
                    {
                        sType = 1000570004u
                        pNext = pNext
                        input = input
                        srcAccelerationStructureData = srcAccelerationStructureData
                        dstAccelerationStructureData = dstAccelerationStructureData
                        scratchData = scratchData
                        srcInfos = srcInfos
                        srcInfosCount = srcInfosCount
                    }

                new(input: VkPartitionedAccelerationStructureInstancesInputNV, srcAccelerationStructureData: VkDeviceAddress, dstAccelerationStructureData: VkDeviceAddress, scratchData: VkDeviceAddress, srcInfos: VkDeviceAddress, srcInfosCount: VkDeviceAddress) =
                    VkBuildPartitionedAccelerationStructureInfoNV(Unchecked.defaultof<nativeint>, input, srcAccelerationStructureData, dstAccelerationStructureData, scratchData, srcInfos, srcInfosCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.input = Unchecked.defaultof<VkPartitionedAccelerationStructureInstancesInputNV> && x.srcAccelerationStructureData = Unchecked.defaultof<VkDeviceAddress> && x.dstAccelerationStructureData = Unchecked.defaultof<VkDeviceAddress> && x.scratchData = Unchecked.defaultof<VkDeviceAddress> && x.srcInfos = Unchecked.defaultof<VkDeviceAddress> && x.srcInfosCount = Unchecked.defaultof<VkDeviceAddress>

                static member Empty =
                    VkBuildPartitionedAccelerationStructureInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPartitionedAccelerationStructureInstancesInputNV>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceAddress>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "input = %A" x.input
                        sprintf "srcAccelerationStructureData = %A" x.srcAccelerationStructureData
                        sprintf "dstAccelerationStructureData = %A" x.dstAccelerationStructureData
                        sprintf "scratchData = %A" x.scratchData
                        sprintf "srcInfos = %A" x.srcInfos
                        sprintf "srcInfosCount = %A" x.srcInfosCount
                    ] |> sprintf "VkBuildPartitionedAccelerationStructureInfoNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPartitionedAccelerationStructureFlagsNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public enablePartitionTranslation : VkBool32

                new(pNext: nativeint, enablePartitionTranslation: VkBool32) =
                    {
                        sType = 1000570005u
                        pNext = pNext
                        enablePartitionTranslation = enablePartitionTranslation
                    }

                new(enablePartitionTranslation: VkBool32) =
                    VkPartitionedAccelerationStructureFlagsNV(Unchecked.defaultof<nativeint>, enablePartitionTranslation)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.enablePartitionTranslation = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPartitionedAccelerationStructureFlagsNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "enablePartitionTranslation = %A" x.enablePartitionTranslation
                    ] |> sprintf "VkPartitionedAccelerationStructureFlagsNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPartitionedAccelerationStructureUpdateInstanceDataNV =
            struct
                val mutable public instanceIndex : uint32
                val mutable public instanceContributionToHitGroupIndex : uint32
                val mutable public accelerationStructure : VkDeviceAddress

                new(instanceIndex: uint32, instanceContributionToHitGroupIndex: uint32, accelerationStructure: VkDeviceAddress) =
                    {
                        instanceIndex = instanceIndex
                        instanceContributionToHitGroupIndex = instanceContributionToHitGroupIndex
                        accelerationStructure = accelerationStructure
                    }

                member x.IsEmpty =
                    x.instanceIndex = Unchecked.defaultof<uint32> && x.instanceContributionToHitGroupIndex = Unchecked.defaultof<uint32> && x.accelerationStructure = Unchecked.defaultof<VkDeviceAddress>

                static member Empty =
                    VkPartitionedAccelerationStructureUpdateInstanceDataNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceAddress>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "instanceIndex = %A" x.instanceIndex
                        sprintf "instanceContributionToHitGroupIndex = %A" x.instanceContributionToHitGroupIndex
                        sprintf "accelerationStructure = %A" x.accelerationStructure
                    ] |> sprintf "VkPartitionedAccelerationStructureUpdateInstanceDataNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPartitionedAccelerationStructureWriteInstanceDataNV =
            struct
                val mutable public transform : KHRAccelerationStructure.VkTransformMatrixKHR
                val mutable public explicitAABB : float32_6
                val mutable public instanceID : uint32
                val mutable public instanceMask : uint32
                val mutable public instanceContributionToHitGroupIndex : uint32
                val mutable public instanceFlags : VkPartitionedAccelerationStructureInstanceFlagsNV
                val mutable public instanceIndex : uint32
                val mutable public partitionIndex : uint32
                val mutable public accelerationStructure : VkDeviceAddress

                new(transform: KHRAccelerationStructure.VkTransformMatrixKHR, explicitAABB: float32_6, instanceID: uint32, instanceMask: uint32, instanceContributionToHitGroupIndex: uint32, instanceFlags: VkPartitionedAccelerationStructureInstanceFlagsNV, instanceIndex: uint32, partitionIndex: uint32, accelerationStructure: VkDeviceAddress) =
                    {
                        transform = transform
                        explicitAABB = explicitAABB
                        instanceID = instanceID
                        instanceMask = instanceMask
                        instanceContributionToHitGroupIndex = instanceContributionToHitGroupIndex
                        instanceFlags = instanceFlags
                        instanceIndex = instanceIndex
                        partitionIndex = partitionIndex
                        accelerationStructure = accelerationStructure
                    }

                member x.IsEmpty =
                    x.transform = Unchecked.defaultof<KHRAccelerationStructure.VkTransformMatrixKHR> && x.explicitAABB = Unchecked.defaultof<float32_6> && x.instanceID = Unchecked.defaultof<uint32> && x.instanceMask = Unchecked.defaultof<uint32> && x.instanceContributionToHitGroupIndex = Unchecked.defaultof<uint32> && x.instanceFlags = Unchecked.defaultof<VkPartitionedAccelerationStructureInstanceFlagsNV> && x.instanceIndex = Unchecked.defaultof<uint32> && x.partitionIndex = Unchecked.defaultof<uint32> && x.accelerationStructure = Unchecked.defaultof<VkDeviceAddress>

                static member Empty =
                    VkPartitionedAccelerationStructureWriteInstanceDataNV(Unchecked.defaultof<KHRAccelerationStructure.VkTransformMatrixKHR>, Unchecked.defaultof<float32_6>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPartitionedAccelerationStructureInstanceFlagsNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceAddress>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "transform = %A" x.transform
                        sprintf "explicitAABB = %A" x.explicitAABB
                        sprintf "instanceID = %A" x.instanceID
                        sprintf "instanceMask = %A" x.instanceMask
                        sprintf "instanceContributionToHitGroupIndex = %A" x.instanceContributionToHitGroupIndex
                        sprintf "instanceFlags = %A" x.instanceFlags
                        sprintf "instanceIndex = %A" x.instanceIndex
                        sprintf "partitionIndex = %A" x.partitionIndex
                        sprintf "accelerationStructure = %A" x.accelerationStructure
                    ] |> sprintf "VkPartitionedAccelerationStructureWriteInstanceDataNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPartitionedAccelerationStructureWritePartitionTranslationDataNV =
            struct
                val mutable public partitionIndex : uint32
                val mutable public partitionTranslation : V3f

                new(partitionIndex: uint32, partitionTranslation: V3f) =
                    {
                        partitionIndex = partitionIndex
                        partitionTranslation = partitionTranslation
                    }

                member x.IsEmpty =
                    x.partitionIndex = Unchecked.defaultof<uint32> && x.partitionTranslation = Unchecked.defaultof<V3f>

                static member Empty =
                    VkPartitionedAccelerationStructureWritePartitionTranslationDataNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<V3f>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "partitionIndex = %A" x.partitionIndex
                        sprintf "partitionTranslation = %A" x.partitionTranslation
                    ] |> sprintf "VkPartitionedAccelerationStructureWritePartitionTranslationDataNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public partitionedAccelerationStructure : VkBool32

                new(pNext: nativeint, partitionedAccelerationStructure: VkBool32) =
                    {
                        sType = 1000570000u
                        pNext = pNext
                        partitionedAccelerationStructure = partitionedAccelerationStructure
                    }

                new(partitionedAccelerationStructure: VkBool32) =
                    VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV(Unchecked.defaultof<nativeint>, partitionedAccelerationStructure)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.partitionedAccelerationStructure = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "partitionedAccelerationStructure = %A" x.partitionedAccelerationStructure
                    ] |> sprintf "VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxPartitionCount : uint32

                new(pNext: nativeint, maxPartitionCount: uint32) =
                    {
                        sType = 1000570001u
                        pNext = pNext
                        maxPartitionCount = maxPartitionCount
                    }

                new(maxPartitionCount: uint32) =
                    VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV(Unchecked.defaultof<nativeint>, maxPartitionCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxPartitionCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxPartitionCount = %A" x.maxPartitionCount
                    ] |> sprintf "VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkWriteDescriptorSetPartitionedAccelerationStructureNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public accelerationStructureCount : uint32
                val mutable public pAccelerationStructures : nativeptr<VkDeviceAddress>

                new(pNext: nativeint, accelerationStructureCount: uint32, pAccelerationStructures: nativeptr<VkDeviceAddress>) =
                    {
                        sType = 1000570002u
                        pNext = pNext
                        accelerationStructureCount = accelerationStructureCount
                        pAccelerationStructures = pAccelerationStructures
                    }

                new(accelerationStructureCount: uint32, pAccelerationStructures: nativeptr<VkDeviceAddress>) =
                    VkWriteDescriptorSetPartitionedAccelerationStructureNV(Unchecked.defaultof<nativeint>, accelerationStructureCount, pAccelerationStructures)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructureCount = Unchecked.defaultof<uint32> && x.pAccelerationStructures = Unchecked.defaultof<nativeptr<VkDeviceAddress>>

                static member Empty =
                    VkWriteDescriptorSetPartitionedAccelerationStructureNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDeviceAddress>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "accelerationStructureCount = %A" x.accelerationStructureCount
                        sprintf "pAccelerationStructures = %A" x.pAccelerationStructures
                    ] |> sprintf "VkWriteDescriptorSetPartitionedAccelerationStructureNV { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDescriptorType with
                  static member inline PartitionedAccelerationStructureNv = enum<VkDescriptorType> 1000570000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPartitionedAccelerationStructuresBuildSizesNVDel = delegate of VkDevice * nativeptr<VkPartitionedAccelerationStructureInstancesInputNV> * nativeptr<KHRAccelerationStructure.VkAccelerationStructureBuildSizesInfoKHR> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdBuildPartitionedAccelerationStructuresNVDel = delegate of VkCommandBuffer * nativeptr<VkBuildPartitionedAccelerationStructureInfoNV> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVPartitionedAccelerationStructure")
                static let s_vkGetPartitionedAccelerationStructuresBuildSizesNVDel = VkRaw.vkImportInstanceDelegate<VkGetPartitionedAccelerationStructuresBuildSizesNVDel> "vkGetPartitionedAccelerationStructuresBuildSizesNV"
                static let s_vkCmdBuildPartitionedAccelerationStructuresNVDel = VkRaw.vkImportInstanceDelegate<VkCmdBuildPartitionedAccelerationStructuresNVDel> "vkCmdBuildPartitionedAccelerationStructuresNV"
                static do Report.End(3) |> ignore
                static member vkGetPartitionedAccelerationStructuresBuildSizesNV = s_vkGetPartitionedAccelerationStructuresBuildSizesNVDel
                static member vkCmdBuildPartitionedAccelerationStructuresNV = s_vkCmdBuildPartitionedAccelerationStructuresNVDel
            let vkGetPartitionedAccelerationStructuresBuildSizesNV(device : VkDevice, pInfo : nativeptr<VkPartitionedAccelerationStructureInstancesInputNV>, pSizeInfo : nativeptr<KHRAccelerationStructure.VkAccelerationStructureBuildSizesInfoKHR>) = Loader<unit>.vkGetPartitionedAccelerationStructuresBuildSizesNV.Invoke(device, pInfo, pSizeInfo)
            let vkCmdBuildPartitionedAccelerationStructuresNV(commandBuffer : VkCommandBuffer, pBuildInfo : nativeptr<VkBuildPartitionedAccelerationStructureInfoNV>) = Loader<unit>.vkCmdBuildPartitionedAccelerationStructuresNV.Invoke(commandBuffer, pBuildInfo)

    /// Requires KHRBufferDeviceAddress, KHRMaintenance5.
    module EXTDeviceGeneratedCommands =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_device_generated_commands"
        let Number = 573


        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectCommandsLayoutEXT =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkIndirectCommandsLayoutEXT(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectExecutionSetEXT =
            struct
                val mutable public Handle : uint64
                new(h) = { Handle = h }
                static member Null = VkIndirectExecutionSetEXT(0UL)
                member x.IsNull = x.Handle = 0UL
                member x.IsValid = x.Handle <> 0UL
            end

        type VkIndirectCommandsTokenTypeEXT =
            | ExecutionSet = 0
            | PushConstant = 1
            | SequenceIndex = 2
            | IndexBuffer = 3
            | VertexBuffer = 4
            | DrawIndexed = 5
            | Draw = 6
            | DrawIndexedCount = 7
            | DrawCount = 8
            | Dispatch = 9

        type VkIndirectExecutionSetInfoTypeEXT =
            | Pipelines = 0
            | ShaderObjects = 1

        [<Flags>]
        type VkIndirectCommandsLayoutUsageFlagsEXT =
            | All = 3
            | None = 0
            | ExplicitPreprocessBit = 0x00000001
            | UnorderedSequencesBit = 0x00000002

        [<Flags>]
        type VkIndirectCommandsInputModeFlagsEXT =
            | All = 3
            | None = 0
            | VulkanIndexBuffer = 0x00000001
            | DxgiIndexBuffer = 0x00000002


        [<StructLayout(LayoutKind.Sequential)>]
        type VkBindIndexBufferIndirectCommandEXT =
            struct
                val mutable public bufferAddress : VkDeviceAddress
                val mutable public size : uint32
                val mutable public indexType : VkIndexType

                new(bufferAddress: VkDeviceAddress, size: uint32, indexType: VkIndexType) =
                    {
                        bufferAddress = bufferAddress
                        size = size
                        indexType = indexType
                    }

                member x.IsEmpty =
                    x.bufferAddress = Unchecked.defaultof<VkDeviceAddress> && x.size = Unchecked.defaultof<uint32> && x.indexType = Unchecked.defaultof<VkIndexType>

                static member Empty =
                    VkBindIndexBufferIndirectCommandEXT(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkIndexType>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "bufferAddress = %A" x.bufferAddress
                        sprintf "size = %A" x.size
                        sprintf "indexType = %A" x.indexType
                    ] |> sprintf "VkBindIndexBufferIndirectCommandEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBindVertexBufferIndirectCommandEXT =
            struct
                val mutable public bufferAddress : VkDeviceAddress
                val mutable public size : uint32
                val mutable public stride : uint32

                new(bufferAddress: VkDeviceAddress, size: uint32, stride: uint32) =
                    {
                        bufferAddress = bufferAddress
                        size = size
                        stride = stride
                    }

                member x.IsEmpty =
                    x.bufferAddress = Unchecked.defaultof<VkDeviceAddress> && x.size = Unchecked.defaultof<uint32> && x.stride = Unchecked.defaultof<uint32>

                static member Empty =
                    VkBindVertexBufferIndirectCommandEXT(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "bufferAddress = %A" x.bufferAddress
                        sprintf "size = %A" x.size
                        sprintf "stride = %A" x.stride
                    ] |> sprintf "VkBindVertexBufferIndirectCommandEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDrawIndirectCountIndirectCommandEXT =
            struct
                val mutable public bufferAddress : VkDeviceAddress
                val mutable public stride : uint32
                val mutable public commandCount : uint32

                new(bufferAddress: VkDeviceAddress, stride: uint32, commandCount: uint32) =
                    {
                        bufferAddress = bufferAddress
                        stride = stride
                        commandCount = commandCount
                    }

                member x.IsEmpty =
                    x.bufferAddress = Unchecked.defaultof<VkDeviceAddress> && x.stride = Unchecked.defaultof<uint32> && x.commandCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkDrawIndirectCountIndirectCommandEXT(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "bufferAddress = %A" x.bufferAddress
                        sprintf "stride = %A" x.stride
                        sprintf "commandCount = %A" x.commandCount
                    ] |> sprintf "VkDrawIndirectCountIndirectCommandEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGeneratedCommandsInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderStages : VkShaderStageFlags
                val mutable public indirectExecutionSet : VkIndirectExecutionSetEXT
                val mutable public indirectCommandsLayout : VkIndirectCommandsLayoutEXT
                val mutable public indirectAddress : VkDeviceAddress
                val mutable public indirectAddressSize : VkDeviceSize
                val mutable public preprocessAddress : VkDeviceAddress
                val mutable public preprocessSize : VkDeviceSize
                val mutable public maxSequenceCount : uint32
                val mutable public sequenceCountAddress : VkDeviceAddress
                val mutable public maxDrawCount : uint32

                new(pNext: nativeint, shaderStages: VkShaderStageFlags, indirectExecutionSet: VkIndirectExecutionSetEXT, indirectCommandsLayout: VkIndirectCommandsLayoutEXT, indirectAddress: VkDeviceAddress, indirectAddressSize: VkDeviceSize, preprocessAddress: VkDeviceAddress, preprocessSize: VkDeviceSize, maxSequenceCount: uint32, sequenceCountAddress: VkDeviceAddress, maxDrawCount: uint32) =
                    {
                        sType = 1000572004u
                        pNext = pNext
                        shaderStages = shaderStages
                        indirectExecutionSet = indirectExecutionSet
                        indirectCommandsLayout = indirectCommandsLayout
                        indirectAddress = indirectAddress
                        indirectAddressSize = indirectAddressSize
                        preprocessAddress = preprocessAddress
                        preprocessSize = preprocessSize
                        maxSequenceCount = maxSequenceCount
                        sequenceCountAddress = sequenceCountAddress
                        maxDrawCount = maxDrawCount
                    }

                new(shaderStages: VkShaderStageFlags, indirectExecutionSet: VkIndirectExecutionSetEXT, indirectCommandsLayout: VkIndirectCommandsLayoutEXT, indirectAddress: VkDeviceAddress, indirectAddressSize: VkDeviceSize, preprocessAddress: VkDeviceAddress, preprocessSize: VkDeviceSize, maxSequenceCount: uint32, sequenceCountAddress: VkDeviceAddress, maxDrawCount: uint32) =
                    VkGeneratedCommandsInfoEXT(Unchecked.defaultof<nativeint>, shaderStages, indirectExecutionSet, indirectCommandsLayout, indirectAddress, indirectAddressSize, preprocessAddress, preprocessSize, maxSequenceCount, sequenceCountAddress, maxDrawCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderStages = Unchecked.defaultof<VkShaderStageFlags> && x.indirectExecutionSet = Unchecked.defaultof<VkIndirectExecutionSetEXT> && x.indirectCommandsLayout = Unchecked.defaultof<VkIndirectCommandsLayoutEXT> && x.indirectAddress = Unchecked.defaultof<VkDeviceAddress> && x.indirectAddressSize = Unchecked.defaultof<VkDeviceSize> && x.preprocessAddress = Unchecked.defaultof<VkDeviceAddress> && x.preprocessSize = Unchecked.defaultof<VkDeviceSize> && x.maxSequenceCount = Unchecked.defaultof<uint32> && x.sequenceCountAddress = Unchecked.defaultof<VkDeviceAddress> && x.maxDrawCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkGeneratedCommandsInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkIndirectExecutionSetEXT>, Unchecked.defaultof<VkIndirectCommandsLayoutEXT>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderStages = %A" x.shaderStages
                        sprintf "indirectExecutionSet = %A" x.indirectExecutionSet
                        sprintf "indirectCommandsLayout = %A" x.indirectCommandsLayout
                        sprintf "indirectAddress = %A" x.indirectAddress
                        sprintf "indirectAddressSize = %A" x.indirectAddressSize
                        sprintf "preprocessAddress = %A" x.preprocessAddress
                        sprintf "preprocessSize = %A" x.preprocessSize
                        sprintf "maxSequenceCount = %A" x.maxSequenceCount
                        sprintf "sequenceCountAddress = %A" x.sequenceCountAddress
                        sprintf "maxDrawCount = %A" x.maxDrawCount
                    ] |> sprintf "VkGeneratedCommandsInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGeneratedCommandsMemoryRequirementsInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public indirectExecutionSet : VkIndirectExecutionSetEXT
                val mutable public indirectCommandsLayout : VkIndirectCommandsLayoutEXT
                val mutable public maxSequenceCount : uint32
                val mutable public maxDrawCount : uint32

                new(pNext: nativeint, indirectExecutionSet: VkIndirectExecutionSetEXT, indirectCommandsLayout: VkIndirectCommandsLayoutEXT, maxSequenceCount: uint32, maxDrawCount: uint32) =
                    {
                        sType = 1000572002u
                        pNext = pNext
                        indirectExecutionSet = indirectExecutionSet
                        indirectCommandsLayout = indirectCommandsLayout
                        maxSequenceCount = maxSequenceCount
                        maxDrawCount = maxDrawCount
                    }

                new(indirectExecutionSet: VkIndirectExecutionSetEXT, indirectCommandsLayout: VkIndirectCommandsLayoutEXT, maxSequenceCount: uint32, maxDrawCount: uint32) =
                    VkGeneratedCommandsMemoryRequirementsInfoEXT(Unchecked.defaultof<nativeint>, indirectExecutionSet, indirectCommandsLayout, maxSequenceCount, maxDrawCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.indirectExecutionSet = Unchecked.defaultof<VkIndirectExecutionSetEXT> && x.indirectCommandsLayout = Unchecked.defaultof<VkIndirectCommandsLayoutEXT> && x.maxSequenceCount = Unchecked.defaultof<uint32> && x.maxDrawCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkGeneratedCommandsMemoryRequirementsInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkIndirectExecutionSetEXT>, Unchecked.defaultof<VkIndirectCommandsLayoutEXT>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "indirectExecutionSet = %A" x.indirectExecutionSet
                        sprintf "indirectCommandsLayout = %A" x.indirectCommandsLayout
                        sprintf "maxSequenceCount = %A" x.maxSequenceCount
                        sprintf "maxDrawCount = %A" x.maxDrawCount
                    ] |> sprintf "VkGeneratedCommandsMemoryRequirementsInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGeneratedCommandsPipelineInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipeline : VkPipeline

                new(pNext: nativeint, pipeline: VkPipeline) =
                    {
                        sType = 1000572013u
                        pNext = pNext
                        pipeline = pipeline
                    }

                new(pipeline: VkPipeline) =
                    VkGeneratedCommandsPipelineInfoEXT(Unchecked.defaultof<nativeint>, pipeline)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipeline = Unchecked.defaultof<VkPipeline>

                static member Empty =
                    VkGeneratedCommandsPipelineInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipeline>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipeline = %A" x.pipeline
                    ] |> sprintf "VkGeneratedCommandsPipelineInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkGeneratedCommandsShaderInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderCount : uint32
                val mutable public pShaders : nativeptr<EXTShaderObject.VkShaderEXT>

                new(pNext: nativeint, shaderCount: uint32, pShaders: nativeptr<EXTShaderObject.VkShaderEXT>) =
                    {
                        sType = 1000572014u
                        pNext = pNext
                        shaderCount = shaderCount
                        pShaders = pShaders
                    }

                new(shaderCount: uint32, pShaders: nativeptr<EXTShaderObject.VkShaderEXT>) =
                    VkGeneratedCommandsShaderInfoEXT(Unchecked.defaultof<nativeint>, shaderCount, pShaders)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderCount = Unchecked.defaultof<uint32> && x.pShaders = Unchecked.defaultof<nativeptr<EXTShaderObject.VkShaderEXT>>

                static member Empty =
                    VkGeneratedCommandsShaderInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<EXTShaderObject.VkShaderEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderCount = %A" x.shaderCount
                        sprintf "pShaders = %A" x.pShaders
                    ] |> sprintf "VkGeneratedCommandsShaderInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectCommandsExecutionSetTokenEXT =
            struct
                val mutable public _type : VkIndirectExecutionSetInfoTypeEXT
                val mutable public shaderStages : VkShaderStageFlags

                new(_type: VkIndirectExecutionSetInfoTypeEXT, shaderStages: VkShaderStageFlags) =
                    {
                        _type = _type
                        shaderStages = shaderStages
                    }

                member x.IsEmpty =
                    x._type = Unchecked.defaultof<VkIndirectExecutionSetInfoTypeEXT> && x.shaderStages = Unchecked.defaultof<VkShaderStageFlags>

                static member Empty =
                    VkIndirectCommandsExecutionSetTokenEXT(Unchecked.defaultof<VkIndirectExecutionSetInfoTypeEXT>, Unchecked.defaultof<VkShaderStageFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "_type = %A" x._type
                        sprintf "shaderStages = %A" x.shaderStages
                    ] |> sprintf "VkIndirectCommandsExecutionSetTokenEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectCommandsIndexBufferTokenEXT =
            struct
                val mutable public mode : VkIndirectCommandsInputModeFlagsEXT

                new(mode: VkIndirectCommandsInputModeFlagsEXT) =
                    {
                        mode = mode
                    }

                member x.IsEmpty =
                    x.mode = Unchecked.defaultof<VkIndirectCommandsInputModeFlagsEXT>

                static member Empty =
                    VkIndirectCommandsIndexBufferTokenEXT(Unchecked.defaultof<VkIndirectCommandsInputModeFlagsEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "mode = %A" x.mode
                    ] |> sprintf "VkIndirectCommandsIndexBufferTokenEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectCommandsPushConstantTokenEXT =
            struct
                val mutable public updateRange : VkPushConstantRange

                new(updateRange: VkPushConstantRange) =
                    {
                        updateRange = updateRange
                    }

                member x.IsEmpty =
                    x.updateRange = Unchecked.defaultof<VkPushConstantRange>

                static member Empty =
                    VkIndirectCommandsPushConstantTokenEXT(Unchecked.defaultof<VkPushConstantRange>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "updateRange = %A" x.updateRange
                    ] |> sprintf "VkIndirectCommandsPushConstantTokenEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectCommandsVertexBufferTokenEXT =
            struct
                val mutable public vertexBindingUnit : uint32

                new(vertexBindingUnit: uint32) =
                    {
                        vertexBindingUnit = vertexBindingUnit
                    }

                member x.IsEmpty =
                    x.vertexBindingUnit = Unchecked.defaultof<uint32>

                static member Empty =
                    VkIndirectCommandsVertexBufferTokenEXT(Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "vertexBindingUnit = %A" x.vertexBindingUnit
                    ] |> sprintf "VkIndirectCommandsVertexBufferTokenEXT { %s }"
            end

        [<StructLayout(LayoutKind.Explicit)>]
        type VkIndirectCommandsTokenDataEXT =
            struct
                [<FieldOffset(0)>]
                val mutable public pPushConstant : nativeptr<VkIndirectCommandsPushConstantTokenEXT>
                [<FieldOffset(0)>]
                val mutable public pVertexBuffer : nativeptr<VkIndirectCommandsVertexBufferTokenEXT>
                [<FieldOffset(0)>]
                val mutable public pIndexBuffer : nativeptr<VkIndirectCommandsIndexBufferTokenEXT>
                [<FieldOffset(0)>]
                val mutable public pExecutionSet : nativeptr<VkIndirectCommandsExecutionSetTokenEXT>

                static member PPushConstant(value: nativeptr<VkIndirectCommandsPushConstantTokenEXT>) =
                    let mutable result = Unchecked.defaultof<VkIndirectCommandsTokenDataEXT>
                    result.pPushConstant <- value
                    result

                static member PVertexBuffer(value: nativeptr<VkIndirectCommandsVertexBufferTokenEXT>) =
                    let mutable result = Unchecked.defaultof<VkIndirectCommandsTokenDataEXT>
                    result.pVertexBuffer <- value
                    result

                static member PIndexBuffer(value: nativeptr<VkIndirectCommandsIndexBufferTokenEXT>) =
                    let mutable result = Unchecked.defaultof<VkIndirectCommandsTokenDataEXT>
                    result.pIndexBuffer <- value
                    result

                static member PExecutionSet(value: nativeptr<VkIndirectCommandsExecutionSetTokenEXT>) =
                    let mutable result = Unchecked.defaultof<VkIndirectCommandsTokenDataEXT>
                    result.pExecutionSet <- value
                    result

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pPushConstant = %A" x.pPushConstant
                        sprintf "pVertexBuffer = %A" x.pVertexBuffer
                        sprintf "pIndexBuffer = %A" x.pIndexBuffer
                        sprintf "pExecutionSet = %A" x.pExecutionSet
                    ] |> sprintf "VkIndirectCommandsTokenDataEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectCommandsLayoutTokenEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _type : VkIndirectCommandsTokenTypeEXT
                val mutable public data : VkIndirectCommandsTokenDataEXT
                val mutable public offset : uint32

                new(pNext: nativeint, _type: VkIndirectCommandsTokenTypeEXT, data: VkIndirectCommandsTokenDataEXT, offset: uint32) =
                    {
                        sType = 1000572007u
                        pNext = pNext
                        _type = _type
                        data = data
                        offset = offset
                    }

                new(_type: VkIndirectCommandsTokenTypeEXT, data: VkIndirectCommandsTokenDataEXT, offset: uint32) =
                    VkIndirectCommandsLayoutTokenEXT(Unchecked.defaultof<nativeint>, _type, data, offset)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkIndirectCommandsTokenTypeEXT> && x.data = Unchecked.defaultof<VkIndirectCommandsTokenDataEXT> && x.offset = Unchecked.defaultof<uint32>

                static member Empty =
                    VkIndirectCommandsLayoutTokenEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkIndirectCommandsTokenTypeEXT>, Unchecked.defaultof<VkIndirectCommandsTokenDataEXT>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_type = %A" x._type
                        sprintf "data = %A" x.data
                        sprintf "offset = %A" x.offset
                    ] |> sprintf "VkIndirectCommandsLayoutTokenEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectCommandsLayoutCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public flags : VkIndirectCommandsLayoutUsageFlagsEXT
                val mutable public shaderStages : VkShaderStageFlags
                val mutable public indirectStride : uint32
                val mutable public pipelineLayout : VkPipelineLayout
                val mutable public tokenCount : uint32
                val mutable public pTokens : nativeptr<VkIndirectCommandsLayoutTokenEXT>

                new(pNext: nativeint, flags: VkIndirectCommandsLayoutUsageFlagsEXT, shaderStages: VkShaderStageFlags, indirectStride: uint32, pipelineLayout: VkPipelineLayout, tokenCount: uint32, pTokens: nativeptr<VkIndirectCommandsLayoutTokenEXT>) =
                    {
                        sType = 1000572006u
                        pNext = pNext
                        flags = flags
                        shaderStages = shaderStages
                        indirectStride = indirectStride
                        pipelineLayout = pipelineLayout
                        tokenCount = tokenCount
                        pTokens = pTokens
                    }

                new(flags: VkIndirectCommandsLayoutUsageFlagsEXT, shaderStages: VkShaderStageFlags, indirectStride: uint32, pipelineLayout: VkPipelineLayout, tokenCount: uint32, pTokens: nativeptr<VkIndirectCommandsLayoutTokenEXT>) =
                    VkIndirectCommandsLayoutCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, shaderStages, indirectStride, pipelineLayout, tokenCount, pTokens)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkIndirectCommandsLayoutUsageFlagsEXT> && x.shaderStages = Unchecked.defaultof<VkShaderStageFlags> && x.indirectStride = Unchecked.defaultof<uint32> && x.pipelineLayout = Unchecked.defaultof<VkPipelineLayout> && x.tokenCount = Unchecked.defaultof<uint32> && x.pTokens = Unchecked.defaultof<nativeptr<VkIndirectCommandsLayoutTokenEXT>>

                static member Empty =
                    VkIndirectCommandsLayoutCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkIndirectCommandsLayoutUsageFlagsEXT>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkIndirectCommandsLayoutTokenEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "flags = %A" x.flags
                        sprintf "shaderStages = %A" x.shaderStages
                        sprintf "indirectStride = %A" x.indirectStride
                        sprintf "pipelineLayout = %A" x.pipelineLayout
                        sprintf "tokenCount = %A" x.tokenCount
                        sprintf "pTokens = %A" x.pTokens
                    ] |> sprintf "VkIndirectCommandsLayoutCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectExecutionSetPipelineInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public initialPipeline : VkPipeline
                val mutable public maxPipelineCount : uint32

                new(pNext: nativeint, initialPipeline: VkPipeline, maxPipelineCount: uint32) =
                    {
                        sType = 1000572010u
                        pNext = pNext
                        initialPipeline = initialPipeline
                        maxPipelineCount = maxPipelineCount
                    }

                new(initialPipeline: VkPipeline, maxPipelineCount: uint32) =
                    VkIndirectExecutionSetPipelineInfoEXT(Unchecked.defaultof<nativeint>, initialPipeline, maxPipelineCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.initialPipeline = Unchecked.defaultof<VkPipeline> && x.maxPipelineCount = Unchecked.defaultof<uint32>

                static member Empty =
                    VkIndirectExecutionSetPipelineInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "initialPipeline = %A" x.initialPipeline
                        sprintf "maxPipelineCount = %A" x.maxPipelineCount
                    ] |> sprintf "VkIndirectExecutionSetPipelineInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectExecutionSetShaderLayoutInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public setLayoutCount : uint32
                val mutable public pSetLayouts : nativeptr<VkDescriptorSetLayout>

                new(pNext: nativeint, setLayoutCount: uint32, pSetLayouts: nativeptr<VkDescriptorSetLayout>) =
                    {
                        sType = 1000572012u
                        pNext = pNext
                        setLayoutCount = setLayoutCount
                        pSetLayouts = pSetLayouts
                    }

                new(setLayoutCount: uint32, pSetLayouts: nativeptr<VkDescriptorSetLayout>) =
                    VkIndirectExecutionSetShaderLayoutInfoEXT(Unchecked.defaultof<nativeint>, setLayoutCount, pSetLayouts)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.setLayoutCount = Unchecked.defaultof<uint32> && x.pSetLayouts = Unchecked.defaultof<nativeptr<VkDescriptorSetLayout>>

                static member Empty =
                    VkIndirectExecutionSetShaderLayoutInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorSetLayout>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "setLayoutCount = %A" x.setLayoutCount
                        sprintf "pSetLayouts = %A" x.pSetLayouts
                    ] |> sprintf "VkIndirectExecutionSetShaderLayoutInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectExecutionSetShaderInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public shaderCount : uint32
                val mutable public pInitialShaders : nativeptr<EXTShaderObject.VkShaderEXT>
                val mutable public pSetLayoutInfos : nativeptr<VkIndirectExecutionSetShaderLayoutInfoEXT>
                val mutable public maxShaderCount : uint32
                val mutable public pushConstantRangeCount : uint32
                val mutable public pPushConstantRanges : nativeptr<VkPushConstantRange>

                new(pNext: nativeint, shaderCount: uint32, pInitialShaders: nativeptr<EXTShaderObject.VkShaderEXT>, pSetLayoutInfos: nativeptr<VkIndirectExecutionSetShaderLayoutInfoEXT>, maxShaderCount: uint32, pushConstantRangeCount: uint32, pPushConstantRanges: nativeptr<VkPushConstantRange>) =
                    {
                        sType = 1000572011u
                        pNext = pNext
                        shaderCount = shaderCount
                        pInitialShaders = pInitialShaders
                        pSetLayoutInfos = pSetLayoutInfos
                        maxShaderCount = maxShaderCount
                        pushConstantRangeCount = pushConstantRangeCount
                        pPushConstantRanges = pPushConstantRanges
                    }

                new(shaderCount: uint32, pInitialShaders: nativeptr<EXTShaderObject.VkShaderEXT>, pSetLayoutInfos: nativeptr<VkIndirectExecutionSetShaderLayoutInfoEXT>, maxShaderCount: uint32, pushConstantRangeCount: uint32, pPushConstantRanges: nativeptr<VkPushConstantRange>) =
                    VkIndirectExecutionSetShaderInfoEXT(Unchecked.defaultof<nativeint>, shaderCount, pInitialShaders, pSetLayoutInfos, maxShaderCount, pushConstantRangeCount, pPushConstantRanges)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.shaderCount = Unchecked.defaultof<uint32> && x.pInitialShaders = Unchecked.defaultof<nativeptr<EXTShaderObject.VkShaderEXT>> && x.pSetLayoutInfos = Unchecked.defaultof<nativeptr<VkIndirectExecutionSetShaderLayoutInfoEXT>> && x.maxShaderCount = Unchecked.defaultof<uint32> && x.pushConstantRangeCount = Unchecked.defaultof<uint32> && x.pPushConstantRanges = Unchecked.defaultof<nativeptr<VkPushConstantRange>>

                static member Empty =
                    VkIndirectExecutionSetShaderInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<EXTShaderObject.VkShaderEXT>>, Unchecked.defaultof<nativeptr<VkIndirectExecutionSetShaderLayoutInfoEXT>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPushConstantRange>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "shaderCount = %A" x.shaderCount
                        sprintf "pInitialShaders = %A" x.pInitialShaders
                        sprintf "pSetLayoutInfos = %A" x.pSetLayoutInfos
                        sprintf "maxShaderCount = %A" x.maxShaderCount
                        sprintf "pushConstantRangeCount = %A" x.pushConstantRangeCount
                        sprintf "pPushConstantRanges = %A" x.pPushConstantRanges
                    ] |> sprintf "VkIndirectExecutionSetShaderInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Explicit)>]
        type VkIndirectExecutionSetInfoEXT =
            struct
                [<FieldOffset(0)>]
                val mutable public pPipelineInfo : nativeptr<VkIndirectExecutionSetPipelineInfoEXT>
                [<FieldOffset(0)>]
                val mutable public pShaderInfo : nativeptr<VkIndirectExecutionSetShaderInfoEXT>

                static member PPipelineInfo(value: nativeptr<VkIndirectExecutionSetPipelineInfoEXT>) =
                    let mutable result = Unchecked.defaultof<VkIndirectExecutionSetInfoEXT>
                    result.pPipelineInfo <- value
                    result

                static member PShaderInfo(value: nativeptr<VkIndirectExecutionSetShaderInfoEXT>) =
                    let mutable result = Unchecked.defaultof<VkIndirectExecutionSetInfoEXT>
                    result.pShaderInfo <- value
                    result

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pPipelineInfo = %A" x.pPipelineInfo
                        sprintf "pShaderInfo = %A" x.pShaderInfo
                    ] |> sprintf "VkIndirectExecutionSetInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkIndirectExecutionSetCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public _type : VkIndirectExecutionSetInfoTypeEXT
                val mutable public info : VkIndirectExecutionSetInfoEXT

                new(pNext: nativeint, _type: VkIndirectExecutionSetInfoTypeEXT, info: VkIndirectExecutionSetInfoEXT) =
                    {
                        sType = 1000572003u
                        pNext = pNext
                        _type = _type
                        info = info
                    }

                new(_type: VkIndirectExecutionSetInfoTypeEXT, info: VkIndirectExecutionSetInfoEXT) =
                    VkIndirectExecutionSetCreateInfoEXT(Unchecked.defaultof<nativeint>, _type, info)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkIndirectExecutionSetInfoTypeEXT> && x.info = Unchecked.defaultof<VkIndirectExecutionSetInfoEXT>

                static member Empty =
                    VkIndirectExecutionSetCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkIndirectExecutionSetInfoTypeEXT>, Unchecked.defaultof<VkIndirectExecutionSetInfoEXT>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "_type = %A" x._type
                        sprintf "info = %A" x.info
                    ] |> sprintf "VkIndirectExecutionSetCreateInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public deviceGeneratedCommands : VkBool32
                val mutable public dynamicGeneratedPipelineLayout : VkBool32

                new(pNext: nativeint, deviceGeneratedCommands: VkBool32, dynamicGeneratedPipelineLayout: VkBool32) =
                    {
                        sType = 1000572000u
                        pNext = pNext
                        deviceGeneratedCommands = deviceGeneratedCommands
                        dynamicGeneratedPipelineLayout = dynamicGeneratedPipelineLayout
                    }

                new(deviceGeneratedCommands: VkBool32, dynamicGeneratedPipelineLayout: VkBool32) =
                    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT(Unchecked.defaultof<nativeint>, deviceGeneratedCommands, dynamicGeneratedPipelineLayout)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.deviceGeneratedCommands = Unchecked.defaultof<VkBool32> && x.dynamicGeneratedPipelineLayout = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "deviceGeneratedCommands = %A" x.deviceGeneratedCommands
                        sprintf "dynamicGeneratedPipelineLayout = %A" x.dynamicGeneratedPipelineLayout
                    ] |> sprintf "VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maxIndirectPipelineCount : uint32
                val mutable public maxIndirectShaderObjectCount : uint32
                val mutable public maxIndirectSequenceCount : uint32
                val mutable public maxIndirectCommandsTokenCount : uint32
                val mutable public maxIndirectCommandsTokenOffset : uint32
                val mutable public maxIndirectCommandsIndirectStride : uint32
                val mutable public supportedIndirectCommandsInputModes : VkIndirectCommandsInputModeFlagsEXT
                val mutable public supportedIndirectCommandsShaderStages : VkShaderStageFlags
                val mutable public supportedIndirectCommandsShaderStagesPipelineBinding : VkShaderStageFlags
                val mutable public supportedIndirectCommandsShaderStagesShaderBinding : VkShaderStageFlags
                val mutable public deviceGeneratedCommandsTransformFeedback : VkBool32
                val mutable public deviceGeneratedCommandsMultiDrawIndirectCount : VkBool32

                new(pNext: nativeint, maxIndirectPipelineCount: uint32, maxIndirectShaderObjectCount: uint32, maxIndirectSequenceCount: uint32, maxIndirectCommandsTokenCount: uint32, maxIndirectCommandsTokenOffset: uint32, maxIndirectCommandsIndirectStride: uint32, supportedIndirectCommandsInputModes: VkIndirectCommandsInputModeFlagsEXT, supportedIndirectCommandsShaderStages: VkShaderStageFlags, supportedIndirectCommandsShaderStagesPipelineBinding: VkShaderStageFlags, supportedIndirectCommandsShaderStagesShaderBinding: VkShaderStageFlags, deviceGeneratedCommandsTransformFeedback: VkBool32, deviceGeneratedCommandsMultiDrawIndirectCount: VkBool32) =
                    {
                        sType = 1000572001u
                        pNext = pNext
                        maxIndirectPipelineCount = maxIndirectPipelineCount
                        maxIndirectShaderObjectCount = maxIndirectShaderObjectCount
                        maxIndirectSequenceCount = maxIndirectSequenceCount
                        maxIndirectCommandsTokenCount = maxIndirectCommandsTokenCount
                        maxIndirectCommandsTokenOffset = maxIndirectCommandsTokenOffset
                        maxIndirectCommandsIndirectStride = maxIndirectCommandsIndirectStride
                        supportedIndirectCommandsInputModes = supportedIndirectCommandsInputModes
                        supportedIndirectCommandsShaderStages = supportedIndirectCommandsShaderStages
                        supportedIndirectCommandsShaderStagesPipelineBinding = supportedIndirectCommandsShaderStagesPipelineBinding
                        supportedIndirectCommandsShaderStagesShaderBinding = supportedIndirectCommandsShaderStagesShaderBinding
                        deviceGeneratedCommandsTransformFeedback = deviceGeneratedCommandsTransformFeedback
                        deviceGeneratedCommandsMultiDrawIndirectCount = deviceGeneratedCommandsMultiDrawIndirectCount
                    }

                new(maxIndirectPipelineCount: uint32, maxIndirectShaderObjectCount: uint32, maxIndirectSequenceCount: uint32, maxIndirectCommandsTokenCount: uint32, maxIndirectCommandsTokenOffset: uint32, maxIndirectCommandsIndirectStride: uint32, supportedIndirectCommandsInputModes: VkIndirectCommandsInputModeFlagsEXT, supportedIndirectCommandsShaderStages: VkShaderStageFlags, supportedIndirectCommandsShaderStagesPipelineBinding: VkShaderStageFlags, supportedIndirectCommandsShaderStagesShaderBinding: VkShaderStageFlags, deviceGeneratedCommandsTransformFeedback: VkBool32, deviceGeneratedCommandsMultiDrawIndirectCount: VkBool32) =
                    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT(Unchecked.defaultof<nativeint>, maxIndirectPipelineCount, maxIndirectShaderObjectCount, maxIndirectSequenceCount, maxIndirectCommandsTokenCount, maxIndirectCommandsTokenOffset, maxIndirectCommandsIndirectStride, supportedIndirectCommandsInputModes, supportedIndirectCommandsShaderStages, supportedIndirectCommandsShaderStagesPipelineBinding, supportedIndirectCommandsShaderStagesShaderBinding, deviceGeneratedCommandsTransformFeedback, deviceGeneratedCommandsMultiDrawIndirectCount)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maxIndirectPipelineCount = Unchecked.defaultof<uint32> && x.maxIndirectShaderObjectCount = Unchecked.defaultof<uint32> && x.maxIndirectSequenceCount = Unchecked.defaultof<uint32> && x.maxIndirectCommandsTokenCount = Unchecked.defaultof<uint32> && x.maxIndirectCommandsTokenOffset = Unchecked.defaultof<uint32> && x.maxIndirectCommandsIndirectStride = Unchecked.defaultof<uint32> && x.supportedIndirectCommandsInputModes = Unchecked.defaultof<VkIndirectCommandsInputModeFlagsEXT> && x.supportedIndirectCommandsShaderStages = Unchecked.defaultof<VkShaderStageFlags> && x.supportedIndirectCommandsShaderStagesPipelineBinding = Unchecked.defaultof<VkShaderStageFlags> && x.supportedIndirectCommandsShaderStagesShaderBinding = Unchecked.defaultof<VkShaderStageFlags> && x.deviceGeneratedCommandsTransformFeedback = Unchecked.defaultof<VkBool32> && x.deviceGeneratedCommandsMultiDrawIndirectCount = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkIndirectCommandsInputModeFlagsEXT>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maxIndirectPipelineCount = %A" x.maxIndirectPipelineCount
                        sprintf "maxIndirectShaderObjectCount = %A" x.maxIndirectShaderObjectCount
                        sprintf "maxIndirectSequenceCount = %A" x.maxIndirectSequenceCount
                        sprintf "maxIndirectCommandsTokenCount = %A" x.maxIndirectCommandsTokenCount
                        sprintf "maxIndirectCommandsTokenOffset = %A" x.maxIndirectCommandsTokenOffset
                        sprintf "maxIndirectCommandsIndirectStride = %A" x.maxIndirectCommandsIndirectStride
                        sprintf "supportedIndirectCommandsInputModes = %A" x.supportedIndirectCommandsInputModes
                        sprintf "supportedIndirectCommandsShaderStages = %A" x.supportedIndirectCommandsShaderStages
                        sprintf "supportedIndirectCommandsShaderStagesPipelineBinding = %A" x.supportedIndirectCommandsShaderStagesPipelineBinding
                        sprintf "supportedIndirectCommandsShaderStagesShaderBinding = %A" x.supportedIndirectCommandsShaderStagesShaderBinding
                        sprintf "deviceGeneratedCommandsTransformFeedback = %A" x.deviceGeneratedCommandsTransformFeedback
                        sprintf "deviceGeneratedCommandsMultiDrawIndirectCount = %A" x.deviceGeneratedCommandsMultiDrawIndirectCount
                    ] |> sprintf "VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkWriteIndirectExecutionSetPipelineEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public index : uint32
                val mutable public pipeline : VkPipeline

                new(pNext: nativeint, index: uint32, pipeline: VkPipeline) =
                    {
                        sType = 1000572008u
                        pNext = pNext
                        index = index
                        pipeline = pipeline
                    }

                new(index: uint32, pipeline: VkPipeline) =
                    VkWriteIndirectExecutionSetPipelineEXT(Unchecked.defaultof<nativeint>, index, pipeline)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.index = Unchecked.defaultof<uint32> && x.pipeline = Unchecked.defaultof<VkPipeline>

                static member Empty =
                    VkWriteIndirectExecutionSetPipelineEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPipeline>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "index = %A" x.index
                        sprintf "pipeline = %A" x.pipeline
                    ] |> sprintf "VkWriteIndirectExecutionSetPipelineEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags with
                  static member inline CommandPreprocessReadBitExt = enum<VkAccessFlags> 0x00020000
                  static member inline CommandPreprocessWriteBitExt = enum<VkAccessFlags> 0x00040000
             type Vulkan14.VkBufferUsageFlags2 with
                  static member inline BufferUsage2PreprocessBufferBitExt = enum<Vulkan14.VkBufferUsageFlags2> 0x80000000
             type VkObjectType with
                  static member inline IndirectCommandsLayoutExt = enum<VkObjectType> 1000572000
                  static member inline IndirectExecutionSetExt = enum<VkObjectType> 1000572001
             type Vulkan14.VkPipelineCreateFlags2 with
                  static member inline PipelineCreate2IndirectBindableBitExt = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000040
             type VkPipelineStageFlags with
                  static member inline CommandPreprocessBitExt = enum<VkPipelineStageFlags> 0x00020000
             type EXTShaderObject.VkShaderCreateFlagsEXT with
                  static member inline IndirectBindableBit = enum<EXTShaderObject.VkShaderCreateFlagsEXT> 0x00000080

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetGeneratedCommandsMemoryRequirementsEXTDel = delegate of VkDevice * nativeptr<VkGeneratedCommandsMemoryRequirementsInfoEXT> * nativeptr<Vulkan11.VkMemoryRequirements2> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdPreprocessGeneratedCommandsEXTDel = delegate of VkCommandBuffer * nativeptr<VkGeneratedCommandsInfoEXT> * VkCommandBuffer -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdExecuteGeneratedCommandsEXTDel = delegate of VkCommandBuffer * VkBool32 * nativeptr<VkGeneratedCommandsInfoEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateIndirectCommandsLayoutEXTDel = delegate of VkDevice * nativeptr<VkIndirectCommandsLayoutCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkIndirectCommandsLayoutEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyIndirectCommandsLayoutEXTDel = delegate of VkDevice * VkIndirectCommandsLayoutEXT * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkCreateIndirectExecutionSetEXTDel = delegate of VkDevice * nativeptr<VkIndirectExecutionSetCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkIndirectExecutionSetEXT> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkDestroyIndirectExecutionSetEXTDel = delegate of VkDevice * VkIndirectExecutionSetEXT * nativeptr<VkAllocationCallbacks> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkUpdateIndirectExecutionSetPipelineEXTDel = delegate of VkDevice * VkIndirectExecutionSetEXT * uint32 * nativeptr<VkWriteIndirectExecutionSetPipelineEXT> -> unit
            [<SuppressUnmanagedCodeSecurity>]
            type VkUpdateIndirectExecutionSetShaderEXTDel = delegate of VkDevice * VkIndirectExecutionSetEXT * uint32 * nativeptr<VkWriteIndirectExecutionSetShaderEXT> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTDeviceGeneratedCommands")
                static let s_vkGetGeneratedCommandsMemoryRequirementsEXTDel = VkRaw.vkImportInstanceDelegate<VkGetGeneratedCommandsMemoryRequirementsEXTDel> "vkGetGeneratedCommandsMemoryRequirementsEXT"
                static let s_vkCmdPreprocessGeneratedCommandsEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdPreprocessGeneratedCommandsEXTDel> "vkCmdPreprocessGeneratedCommandsEXT"
                static let s_vkCmdExecuteGeneratedCommandsEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdExecuteGeneratedCommandsEXTDel> "vkCmdExecuteGeneratedCommandsEXT"
                static let s_vkCreateIndirectCommandsLayoutEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateIndirectCommandsLayoutEXTDel> "vkCreateIndirectCommandsLayoutEXT"
                static let s_vkDestroyIndirectCommandsLayoutEXTDel = VkRaw.vkImportInstanceDelegate<VkDestroyIndirectCommandsLayoutEXTDel> "vkDestroyIndirectCommandsLayoutEXT"
                static let s_vkCreateIndirectExecutionSetEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateIndirectExecutionSetEXTDel> "vkCreateIndirectExecutionSetEXT"
                static let s_vkDestroyIndirectExecutionSetEXTDel = VkRaw.vkImportInstanceDelegate<VkDestroyIndirectExecutionSetEXTDel> "vkDestroyIndirectExecutionSetEXT"
                static let s_vkUpdateIndirectExecutionSetPipelineEXTDel = VkRaw.vkImportInstanceDelegate<VkUpdateIndirectExecutionSetPipelineEXTDel> "vkUpdateIndirectExecutionSetPipelineEXT"
                static let s_vkUpdateIndirectExecutionSetShaderEXTDel = VkRaw.vkImportInstanceDelegate<VkUpdateIndirectExecutionSetShaderEXTDel> "vkUpdateIndirectExecutionSetShaderEXT"
                static do Report.End(3) |> ignore
                static member vkGetGeneratedCommandsMemoryRequirementsEXT = s_vkGetGeneratedCommandsMemoryRequirementsEXTDel
                static member vkCmdPreprocessGeneratedCommandsEXT = s_vkCmdPreprocessGeneratedCommandsEXTDel
                static member vkCmdExecuteGeneratedCommandsEXT = s_vkCmdExecuteGeneratedCommandsEXTDel
                static member vkCreateIndirectCommandsLayoutEXT = s_vkCreateIndirectCommandsLayoutEXTDel
                static member vkDestroyIndirectCommandsLayoutEXT = s_vkDestroyIndirectCommandsLayoutEXTDel
                static member vkCreateIndirectExecutionSetEXT = s_vkCreateIndirectExecutionSetEXTDel
                static member vkDestroyIndirectExecutionSetEXT = s_vkDestroyIndirectExecutionSetEXTDel
                static member vkUpdateIndirectExecutionSetPipelineEXT = s_vkUpdateIndirectExecutionSetPipelineEXTDel
                static member vkUpdateIndirectExecutionSetShaderEXT = s_vkUpdateIndirectExecutionSetShaderEXTDel
            let vkGetGeneratedCommandsMemoryRequirementsEXT(device : VkDevice, pInfo : nativeptr<VkGeneratedCommandsMemoryRequirementsInfoEXT>, pMemoryRequirements : nativeptr<Vulkan11.VkMemoryRequirements2>) = Loader<unit>.vkGetGeneratedCommandsMemoryRequirementsEXT.Invoke(device, pInfo, pMemoryRequirements)
            let vkCmdPreprocessGeneratedCommandsEXT(commandBuffer : VkCommandBuffer, pGeneratedCommandsInfo : nativeptr<VkGeneratedCommandsInfoEXT>, stateCommandBuffer : VkCommandBuffer) = Loader<unit>.vkCmdPreprocessGeneratedCommandsEXT.Invoke(commandBuffer, pGeneratedCommandsInfo, stateCommandBuffer)
            let vkCmdExecuteGeneratedCommandsEXT(commandBuffer : VkCommandBuffer, isPreprocessed : VkBool32, pGeneratedCommandsInfo : nativeptr<VkGeneratedCommandsInfoEXT>) = Loader<unit>.vkCmdExecuteGeneratedCommandsEXT.Invoke(commandBuffer, isPreprocessed, pGeneratedCommandsInfo)
            let vkCreateIndirectCommandsLayoutEXT(device : VkDevice, pCreateInfo : nativeptr<VkIndirectCommandsLayoutCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pIndirectCommandsLayout : nativeptr<VkIndirectCommandsLayoutEXT>) = Loader<unit>.vkCreateIndirectCommandsLayoutEXT.Invoke(device, pCreateInfo, pAllocator, pIndirectCommandsLayout)
            let vkDestroyIndirectCommandsLayoutEXT(device : VkDevice, indirectCommandsLayout : VkIndirectCommandsLayoutEXT, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyIndirectCommandsLayoutEXT.Invoke(device, indirectCommandsLayout, pAllocator)
            let vkCreateIndirectExecutionSetEXT(device : VkDevice, pCreateInfo : nativeptr<VkIndirectExecutionSetCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pIndirectExecutionSet : nativeptr<VkIndirectExecutionSetEXT>) = Loader<unit>.vkCreateIndirectExecutionSetEXT.Invoke(device, pCreateInfo, pAllocator, pIndirectExecutionSet)
            let vkDestroyIndirectExecutionSetEXT(device : VkDevice, indirectExecutionSet : VkIndirectExecutionSetEXT, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyIndirectExecutionSetEXT.Invoke(device, indirectExecutionSet, pAllocator)
            let vkUpdateIndirectExecutionSetPipelineEXT(device : VkDevice, indirectExecutionSet : VkIndirectExecutionSetEXT, executionSetWriteCount : uint32, pExecutionSetWrites : nativeptr<VkWriteIndirectExecutionSetPipelineEXT>) = Loader<unit>.vkUpdateIndirectExecutionSetPipelineEXT.Invoke(device, indirectExecutionSet, executionSetWriteCount, pExecutionSetWrites)
            let vkUpdateIndirectExecutionSetShaderEXT(device : VkDevice, indirectExecutionSet : VkIndirectExecutionSetEXT, executionSetWriteCount : uint32, pExecutionSetWrites : nativeptr<VkWriteIndirectExecutionSetShaderEXT>) = Loader<unit>.vkUpdateIndirectExecutionSetShaderEXT.Invoke(device, indirectExecutionSet, executionSetWriteCount, pExecutionSetWrites)

        [<AutoOpen>]
        module ``EXTShaderObject`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkWriteIndirectExecutionSetShaderEXT =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public index : uint32
                    val mutable public shader : EXTShaderObject.VkShaderEXT

                    new(pNext: nativeint, index: uint32, shader: EXTShaderObject.VkShaderEXT) =
                        {
                            sType = 1000572009u
                            pNext = pNext
                            index = index
                            shader = shader
                        }

                    new(index: uint32, shader: EXTShaderObject.VkShaderEXT) =
                        VkWriteIndirectExecutionSetShaderEXT(Unchecked.defaultof<nativeint>, index, shader)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.index = Unchecked.defaultof<uint32> && x.shader = Unchecked.defaultof<EXTShaderObject.VkShaderEXT>

                    static member Empty =
                        VkWriteIndirectExecutionSetShaderEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<EXTShaderObject.VkShaderEXT>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "index = %A" x.index
                            sprintf "shader = %A" x.shader
                        ] |> sprintf "VkWriteIndirectExecutionSetShaderEXT { %s }"
                end



    /// Requires Vulkan11.
    module KHRMaintenance8 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_maintenance8"
        let Number = 575

        [<Flags>]
        type VkAccessFlags3KHR =
            | All = 0
            | Access3None = 0


        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryBarrierAccessFlags3KHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public srcAccessMask3 : VkAccessFlags3KHR
                val mutable public dstAccessMask3 : VkAccessFlags3KHR

                new(pNext: nativeint, srcAccessMask3: VkAccessFlags3KHR, dstAccessMask3: VkAccessFlags3KHR) =
                    {
                        sType = 1000574002u
                        pNext = pNext
                        srcAccessMask3 = srcAccessMask3
                        dstAccessMask3 = dstAccessMask3
                    }

                new(srcAccessMask3: VkAccessFlags3KHR, dstAccessMask3: VkAccessFlags3KHR) =
                    VkMemoryBarrierAccessFlags3KHR(Unchecked.defaultof<nativeint>, srcAccessMask3, dstAccessMask3)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.srcAccessMask3 = Unchecked.defaultof<VkAccessFlags3KHR> && x.dstAccessMask3 = Unchecked.defaultof<VkAccessFlags3KHR>

                static member Empty =
                    VkMemoryBarrierAccessFlags3KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccessFlags3KHR>, Unchecked.defaultof<VkAccessFlags3KHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "srcAccessMask3 = %A" x.srcAccessMask3
                        sprintf "dstAccessMask3 = %A" x.dstAccessMask3
                    ] |> sprintf "VkMemoryBarrierAccessFlags3KHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceMaintenance8FeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maintenance8 : VkBool32

                new(pNext: nativeint, maintenance8: VkBool32) =
                    {
                        sType = 1000574000u
                        pNext = pNext
                        maintenance8 = maintenance8
                    }

                new(maintenance8: VkBool32) =
                    VkPhysicalDeviceMaintenance8FeaturesKHR(Unchecked.defaultof<nativeint>, maintenance8)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maintenance8 = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceMaintenance8FeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maintenance8 = %A" x.maintenance8
                    ] |> sprintf "VkPhysicalDeviceMaintenance8FeaturesKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDependencyFlags with
                  static member inline QueueFamilyOwnershipTransferUseAllStagesBitKhr = enum<VkDependencyFlags> 0x00000020
             type VkPipelineCacheCreateFlags with
                  static member inline InternallySynchronizedMergeBitKhr = enum<VkPipelineCacheCreateFlags> 0x00000008


    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module MESAImageAlignmentControl =
        let Type = ExtensionType.Device
        let Name = "VK_MESA_image_alignment_control"
        let Number = 576

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageAlignmentControlCreateInfoMESA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public maximumRequestedAlignment : uint32

                new(pNext: nativeint, maximumRequestedAlignment: uint32) =
                    {
                        sType = 1000575002u
                        pNext = pNext
                        maximumRequestedAlignment = maximumRequestedAlignment
                    }

                new(maximumRequestedAlignment: uint32) =
                    VkImageAlignmentControlCreateInfoMESA(Unchecked.defaultof<nativeint>, maximumRequestedAlignment)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.maximumRequestedAlignment = Unchecked.defaultof<uint32>

                static member Empty =
                    VkImageAlignmentControlCreateInfoMESA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "maximumRequestedAlignment = %A" x.maximumRequestedAlignment
                    ] |> sprintf "VkImageAlignmentControlCreateInfoMESA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImageAlignmentControlFeaturesMESA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageAlignmentControl : VkBool32

                new(pNext: nativeint, imageAlignmentControl: VkBool32) =
                    {
                        sType = 1000575000u
                        pNext = pNext
                        imageAlignmentControl = imageAlignmentControl
                    }

                new(imageAlignmentControl: VkBool32) =
                    VkPhysicalDeviceImageAlignmentControlFeaturesMESA(Unchecked.defaultof<nativeint>, imageAlignmentControl)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageAlignmentControl = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceImageAlignmentControlFeaturesMESA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageAlignmentControl = %A" x.imageAlignmentControl
                    ] |> sprintf "VkPhysicalDeviceImageAlignmentControlFeaturesMESA { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceImageAlignmentControlPropertiesMESA =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public supportedImageAlignmentMask : uint32

                new(pNext: nativeint, supportedImageAlignmentMask: uint32) =
                    {
                        sType = 1000575001u
                        pNext = pNext
                        supportedImageAlignmentMask = supportedImageAlignmentMask
                    }

                new(supportedImageAlignmentMask: uint32) =
                    VkPhysicalDeviceImageAlignmentControlPropertiesMESA(Unchecked.defaultof<nativeint>, supportedImageAlignmentMask)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.supportedImageAlignmentMask = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceImageAlignmentControlPropertiesMESA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "supportedImageAlignmentMask = %A" x.supportedImageAlignmentMask
                    ] |> sprintf "VkPhysicalDeviceImageAlignmentControlPropertiesMESA { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTDepthClampControl =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_depth_clamp_control"
        let Number = 583

        type VkDepthClampModeEXT =
            | ViewportRange = 0
            | UserDefinedRange = 1


        [<StructLayout(LayoutKind.Sequential)>]
        type VkDepthClampRangeEXT =
            struct
                val mutable public minDepthClamp : float32
                val mutable public maxDepthClamp : float32

                new(minDepthClamp: float32, maxDepthClamp: float32) =
                    {
                        minDepthClamp = minDepthClamp
                        maxDepthClamp = maxDepthClamp
                    }

                member x.IsEmpty =
                    x.minDepthClamp = Unchecked.defaultof<float32> && x.maxDepthClamp = Unchecked.defaultof<float32>

                static member Empty =
                    VkDepthClampRangeEXT(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "minDepthClamp = %A" x.minDepthClamp
                        sprintf "maxDepthClamp = %A" x.maxDepthClamp
                    ] |> sprintf "VkDepthClampRangeEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDepthClampControlFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public depthClampControl : VkBool32

                new(pNext: nativeint, depthClampControl: VkBool32) =
                    {
                        sType = 1000582000u
                        pNext = pNext
                        depthClampControl = depthClampControl
                    }

                new(depthClampControl: VkBool32) =
                    VkPhysicalDeviceDepthClampControlFeaturesEXT(Unchecked.defaultof<nativeint>, depthClampControl)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.depthClampControl = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDepthClampControlFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "depthClampControl = %A" x.depthClampControl
                    ] |> sprintf "VkPhysicalDeviceDepthClampControlFeaturesEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPipelineViewportDepthClampControlCreateInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public depthClampMode : VkDepthClampModeEXT
                val mutable public pDepthClampRange : nativeptr<VkDepthClampRangeEXT>

                new(pNext: nativeint, depthClampMode: VkDepthClampModeEXT, pDepthClampRange: nativeptr<VkDepthClampRangeEXT>) =
                    {
                        sType = 1000582001u
                        pNext = pNext
                        depthClampMode = depthClampMode
                        pDepthClampRange = pDepthClampRange
                    }

                new(depthClampMode: VkDepthClampModeEXT, pDepthClampRange: nativeptr<VkDepthClampRangeEXT>) =
                    VkPipelineViewportDepthClampControlCreateInfoEXT(Unchecked.defaultof<nativeint>, depthClampMode, pDepthClampRange)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.depthClampMode = Unchecked.defaultof<VkDepthClampModeEXT> && x.pDepthClampRange = Unchecked.defaultof<nativeptr<VkDepthClampRangeEXT>>

                static member Empty =
                    VkPipelineViewportDepthClampControlCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDepthClampModeEXT>, Unchecked.defaultof<nativeptr<VkDepthClampRangeEXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "depthClampMode = %A" x.depthClampMode
                        sprintf "pDepthClampRange = %A" x.pDepthClampRange
                    ] |> sprintf "VkPipelineViewportDepthClampControlCreateInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkDynamicState with
                  static member inline DepthClampRangeExt = enum<VkDynamicState> 1000582000

        module VkRaw =
            let vkCmdSetDepthClampRangeEXT = EXTShaderObject.``EXTDepthClampControl``.VkRaw.vkCmdSetDepthClampRangeEXT

    /// Requires KHRVideoDecodeQueue | KHRVideoEncodeQueue.
    module KHRVideoMaintenance2 =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_video_maintenance2"
        let Number = 587

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceVideoMaintenance2FeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public videoMaintenance2 : VkBool32

                new(pNext: nativeint, videoMaintenance2: VkBool32) =
                    {
                        sType = 1000586000u
                        pNext = pNext
                        videoMaintenance2 = videoMaintenance2
                    }

                new(videoMaintenance2: VkBool32) =
                    VkPhysicalDeviceVideoMaintenance2FeaturesKHR(Unchecked.defaultof<nativeint>, videoMaintenance2)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.videoMaintenance2 = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceVideoMaintenance2FeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "videoMaintenance2 = %A" x.videoMaintenance2
                    ] |> sprintf "VkPhysicalDeviceVideoMaintenance2FeaturesKHR { %s }"
            end



        [<AutoOpen>]
        module ``KHRVideoDecodeQueue`` =
            [<AutoOpen>]
            module EnumExtensions =
                 type KHRVideoQueue.VkVideoSessionCreateFlagsKHR with
                      static member inline InlineSessionParametersBit = enum<KHRVideoQueue.VkVideoSessionCreateFlagsKHR> 0x00000020


        [<AutoOpen>]
        module ``KHRVideoDecodeH264`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkVideoDecodeH264InlineSessionParametersInfoKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public pStdSPS : nativeptr<nativeint>
                    val mutable public pStdPPS : nativeptr<nativeint>

                    new(pNext: nativeint, pStdSPS: nativeptr<nativeint>, pStdPPS: nativeptr<nativeint>) =
                        {
                            sType = 1000586001u
                            pNext = pNext
                            pStdSPS = pStdSPS
                            pStdPPS = pStdPPS
                        }

                    new(pStdSPS: nativeptr<nativeint>, pStdPPS: nativeptr<nativeint>) =
                        VkVideoDecodeH264InlineSessionParametersInfoKHR(Unchecked.defaultof<nativeint>, pStdSPS, pStdPPS)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.pStdSPS = Unchecked.defaultof<nativeptr<nativeint>> && x.pStdPPS = Unchecked.defaultof<nativeptr<nativeint>>

                    static member Empty =
                        VkVideoDecodeH264InlineSessionParametersInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeptr<nativeint>>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "pStdSPS = %A" x.pStdSPS
                            sprintf "pStdPPS = %A" x.pStdPPS
                        ] |> sprintf "VkVideoDecodeH264InlineSessionParametersInfoKHR { %s }"
                end



        [<AutoOpen>]
        module ``KHRVideoDecodeH265`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkVideoDecodeH265InlineSessionParametersInfoKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public pStdVPS : nativeptr<nativeint>
                    val mutable public pStdSPS : nativeptr<nativeint>
                    val mutable public pStdPPS : nativeptr<nativeint>

                    new(pNext: nativeint, pStdVPS: nativeptr<nativeint>, pStdSPS: nativeptr<nativeint>, pStdPPS: nativeptr<nativeint>) =
                        {
                            sType = 1000586002u
                            pNext = pNext
                            pStdVPS = pStdVPS
                            pStdSPS = pStdSPS
                            pStdPPS = pStdPPS
                        }

                    new(pStdVPS: nativeptr<nativeint>, pStdSPS: nativeptr<nativeint>, pStdPPS: nativeptr<nativeint>) =
                        VkVideoDecodeH265InlineSessionParametersInfoKHR(Unchecked.defaultof<nativeint>, pStdVPS, pStdSPS, pStdPPS)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.pStdVPS = Unchecked.defaultof<nativeptr<nativeint>> && x.pStdSPS = Unchecked.defaultof<nativeptr<nativeint>> && x.pStdPPS = Unchecked.defaultof<nativeptr<nativeint>>

                    static member Empty =
                        VkVideoDecodeH265InlineSessionParametersInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeptr<nativeint>>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "pStdVPS = %A" x.pStdVPS
                            sprintf "pStdSPS = %A" x.pStdSPS
                            sprintf "pStdPPS = %A" x.pStdPPS
                        ] |> sprintf "VkVideoDecodeH265InlineSessionParametersInfoKHR { %s }"
                end



        [<AutoOpen>]
        module ``KHRVideoDecodeAv1`` =
            [<StructLayout(LayoutKind.Sequential)>]
            type VkVideoDecodeAV1InlineSessionParametersInfoKHR =
                struct
                    val mutable public sType : uint32
                    val mutable public pNext : nativeint
                    val mutable public pStdSequenceHeader : nativeptr<nativeint>

                    new(pNext: nativeint, pStdSequenceHeader: nativeptr<nativeint>) =
                        {
                            sType = 1000586003u
                            pNext = pNext
                            pStdSequenceHeader = pStdSequenceHeader
                        }

                    new(pStdSequenceHeader: nativeptr<nativeint>) =
                        VkVideoDecodeAV1InlineSessionParametersInfoKHR(Unchecked.defaultof<nativeint>, pStdSequenceHeader)

                    member x.IsEmpty =
                        x.pNext = Unchecked.defaultof<nativeint> && x.pStdSequenceHeader = Unchecked.defaultof<nativeptr<nativeint>>

                    static member Empty =
                        VkVideoDecodeAV1InlineSessionParametersInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

                    override x.ToString() =
                        String.concat "; " [
                            sprintf "pNext = %A" x.pNext
                            sprintf "pStdSequenceHeader = %A" x.pStdSequenceHeader
                        ] |> sprintf "VkVideoDecodeAV1InlineSessionParametersInfoKHR { %s }"
                end



    /// Requires (KHRGetPhysicalDeviceProperties2 | Vulkan11), KHRSwapchain, EXTHdrMetadata.
    module HUAWEIHdrVivid =
        let Type = ExtensionType.Device
        let Name = "VK_HUAWEI_hdr_vivid"
        let Number = 591

        [<StructLayout(LayoutKind.Sequential)>]
        type VkHdrVividDynamicMetadataHUAWEI =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public dynamicMetadataSize : uint64
                val mutable public pDynamicMetadata : nativeint

                new(pNext: nativeint, dynamicMetadataSize: uint64, pDynamicMetadata: nativeint) =
                    {
                        sType = 1000590001u
                        pNext = pNext
                        dynamicMetadataSize = dynamicMetadataSize
                        pDynamicMetadata = pDynamicMetadata
                    }

                new(dynamicMetadataSize: uint64, pDynamicMetadata: nativeint) =
                    VkHdrVividDynamicMetadataHUAWEI(Unchecked.defaultof<nativeint>, dynamicMetadataSize, pDynamicMetadata)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.dynamicMetadataSize = Unchecked.defaultof<uint64> && x.pDynamicMetadata = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkHdrVividDynamicMetadataHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "dynamicMetadataSize = %A" x.dynamicMetadataSize
                        sprintf "pDynamicMetadata = %A" x.pDynamicMetadata
                    ] |> sprintf "VkHdrVividDynamicMetadataHUAWEI { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceHdrVividFeaturesHUAWEI =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public hdrVivid : VkBool32

                new(pNext: nativeint, hdrVivid: VkBool32) =
                    {
                        sType = 1000590000u
                        pNext = pNext
                        hdrVivid = hdrVivid
                    }

                new(hdrVivid: VkBool32) =
                    VkPhysicalDeviceHdrVividFeaturesHUAWEI(Unchecked.defaultof<nativeint>, hdrVivid)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.hdrVivid = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceHdrVividFeaturesHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "hdrVivid = %A" x.hdrVivid
                    ] |> sprintf "VkPhysicalDeviceHdrVividFeaturesHUAWEI { %s }"
            end



    /// Requires KHRCooperativeMatrix.
    module NVCooperativeMatrix2 =
        let Type = ExtensionType.Device
        let Name = "VK_NV_cooperative_matrix2"
        let Number = 594

        [<StructLayout(LayoutKind.Sequential)>]
        type VkCooperativeMatrixFlexibleDimensionsPropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public MGranularity : uint32
                val mutable public NGranularity : uint32
                val mutable public KGranularity : uint32
                val mutable public AType : KHRCooperativeMatrix.VkComponentTypeKHR
                val mutable public BType : KHRCooperativeMatrix.VkComponentTypeKHR
                val mutable public CType : KHRCooperativeMatrix.VkComponentTypeKHR
                val mutable public ResultType : KHRCooperativeMatrix.VkComponentTypeKHR
                val mutable public saturatingAccumulation : VkBool32
                val mutable public scope : KHRCooperativeMatrix.VkScopeKHR
                val mutable public workgroupInvocations : uint32

                new(pNext: nativeint, MGranularity: uint32, NGranularity: uint32, KGranularity: uint32, AType: KHRCooperativeMatrix.VkComponentTypeKHR, BType: KHRCooperativeMatrix.VkComponentTypeKHR, CType: KHRCooperativeMatrix.VkComponentTypeKHR, ResultType: KHRCooperativeMatrix.VkComponentTypeKHR, saturatingAccumulation: VkBool32, scope: KHRCooperativeMatrix.VkScopeKHR, workgroupInvocations: uint32) =
                    {
                        sType = 1000593001u
                        pNext = pNext
                        MGranularity = MGranularity
                        NGranularity = NGranularity
                        KGranularity = KGranularity
                        AType = AType
                        BType = BType
                        CType = CType
                        ResultType = ResultType
                        saturatingAccumulation = saturatingAccumulation
                        scope = scope
                        workgroupInvocations = workgroupInvocations
                    }

                new(MGranularity: uint32, NGranularity: uint32, KGranularity: uint32, AType: KHRCooperativeMatrix.VkComponentTypeKHR, BType: KHRCooperativeMatrix.VkComponentTypeKHR, CType: KHRCooperativeMatrix.VkComponentTypeKHR, ResultType: KHRCooperativeMatrix.VkComponentTypeKHR, saturatingAccumulation: VkBool32, scope: KHRCooperativeMatrix.VkScopeKHR, workgroupInvocations: uint32) =
                    VkCooperativeMatrixFlexibleDimensionsPropertiesNV(Unchecked.defaultof<nativeint>, MGranularity, NGranularity, KGranularity, AType, BType, CType, ResultType, saturatingAccumulation, scope, workgroupInvocations)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.MGranularity = Unchecked.defaultof<uint32> && x.NGranularity = Unchecked.defaultof<uint32> && x.KGranularity = Unchecked.defaultof<uint32> && x.AType = Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR> && x.BType = Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR> && x.CType = Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR> && x.ResultType = Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR> && x.saturatingAccumulation = Unchecked.defaultof<VkBool32> && x.scope = Unchecked.defaultof<KHRCooperativeMatrix.VkScopeKHR> && x.workgroupInvocations = Unchecked.defaultof<uint32>

                static member Empty =
                    VkCooperativeMatrixFlexibleDimensionsPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR>, Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR>, Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR>, Unchecked.defaultof<KHRCooperativeMatrix.VkComponentTypeKHR>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<KHRCooperativeMatrix.VkScopeKHR>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "MGranularity = %A" x.MGranularity
                        sprintf "NGranularity = %A" x.NGranularity
                        sprintf "KGranularity = %A" x.KGranularity
                        sprintf "AType = %A" x.AType
                        sprintf "BType = %A" x.BType
                        sprintf "CType = %A" x.CType
                        sprintf "ResultType = %A" x.ResultType
                        sprintf "saturatingAccumulation = %A" x.saturatingAccumulation
                        sprintf "scope = %A" x.scope
                        sprintf "workgroupInvocations = %A" x.workgroupInvocations
                    ] |> sprintf "VkCooperativeMatrixFlexibleDimensionsPropertiesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCooperativeMatrix2FeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cooperativeMatrixWorkgroupScope : VkBool32
                val mutable public cooperativeMatrixFlexibleDimensions : VkBool32
                val mutable public cooperativeMatrixReductions : VkBool32
                val mutable public cooperativeMatrixConversions : VkBool32
                val mutable public cooperativeMatrixPerElementOperations : VkBool32
                val mutable public cooperativeMatrixTensorAddressing : VkBool32
                val mutable public cooperativeMatrixBlockLoads : VkBool32

                new(pNext: nativeint, cooperativeMatrixWorkgroupScope: VkBool32, cooperativeMatrixFlexibleDimensions: VkBool32, cooperativeMatrixReductions: VkBool32, cooperativeMatrixConversions: VkBool32, cooperativeMatrixPerElementOperations: VkBool32, cooperativeMatrixTensorAddressing: VkBool32, cooperativeMatrixBlockLoads: VkBool32) =
                    {
                        sType = 1000593000u
                        pNext = pNext
                        cooperativeMatrixWorkgroupScope = cooperativeMatrixWorkgroupScope
                        cooperativeMatrixFlexibleDimensions = cooperativeMatrixFlexibleDimensions
                        cooperativeMatrixReductions = cooperativeMatrixReductions
                        cooperativeMatrixConversions = cooperativeMatrixConversions
                        cooperativeMatrixPerElementOperations = cooperativeMatrixPerElementOperations
                        cooperativeMatrixTensorAddressing = cooperativeMatrixTensorAddressing
                        cooperativeMatrixBlockLoads = cooperativeMatrixBlockLoads
                    }

                new(cooperativeMatrixWorkgroupScope: VkBool32, cooperativeMatrixFlexibleDimensions: VkBool32, cooperativeMatrixReductions: VkBool32, cooperativeMatrixConversions: VkBool32, cooperativeMatrixPerElementOperations: VkBool32, cooperativeMatrixTensorAddressing: VkBool32, cooperativeMatrixBlockLoads: VkBool32) =
                    VkPhysicalDeviceCooperativeMatrix2FeaturesNV(Unchecked.defaultof<nativeint>, cooperativeMatrixWorkgroupScope, cooperativeMatrixFlexibleDimensions, cooperativeMatrixReductions, cooperativeMatrixConversions, cooperativeMatrixPerElementOperations, cooperativeMatrixTensorAddressing, cooperativeMatrixBlockLoads)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cooperativeMatrixWorkgroupScope = Unchecked.defaultof<VkBool32> && x.cooperativeMatrixFlexibleDimensions = Unchecked.defaultof<VkBool32> && x.cooperativeMatrixReductions = Unchecked.defaultof<VkBool32> && x.cooperativeMatrixConversions = Unchecked.defaultof<VkBool32> && x.cooperativeMatrixPerElementOperations = Unchecked.defaultof<VkBool32> && x.cooperativeMatrixTensorAddressing = Unchecked.defaultof<VkBool32> && x.cooperativeMatrixBlockLoads = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceCooperativeMatrix2FeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cooperativeMatrixWorkgroupScope = %A" x.cooperativeMatrixWorkgroupScope
                        sprintf "cooperativeMatrixFlexibleDimensions = %A" x.cooperativeMatrixFlexibleDimensions
                        sprintf "cooperativeMatrixReductions = %A" x.cooperativeMatrixReductions
                        sprintf "cooperativeMatrixConversions = %A" x.cooperativeMatrixConversions
                        sprintf "cooperativeMatrixPerElementOperations = %A" x.cooperativeMatrixPerElementOperations
                        sprintf "cooperativeMatrixTensorAddressing = %A" x.cooperativeMatrixTensorAddressing
                        sprintf "cooperativeMatrixBlockLoads = %A" x.cooperativeMatrixBlockLoads
                    ] |> sprintf "VkPhysicalDeviceCooperativeMatrix2FeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceCooperativeMatrix2PropertiesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public cooperativeMatrixWorkgroupScopeMaxWorkgroupSize : uint32
                val mutable public cooperativeMatrixFlexibleDimensionsMaxDimension : uint32
                val mutable public cooperativeMatrixWorkgroupScopeReservedSharedMemory : uint32

                new(pNext: nativeint, cooperativeMatrixWorkgroupScopeMaxWorkgroupSize: uint32, cooperativeMatrixFlexibleDimensionsMaxDimension: uint32, cooperativeMatrixWorkgroupScopeReservedSharedMemory: uint32) =
                    {
                        sType = 1000593002u
                        pNext = pNext
                        cooperativeMatrixWorkgroupScopeMaxWorkgroupSize = cooperativeMatrixWorkgroupScopeMaxWorkgroupSize
                        cooperativeMatrixFlexibleDimensionsMaxDimension = cooperativeMatrixFlexibleDimensionsMaxDimension
                        cooperativeMatrixWorkgroupScopeReservedSharedMemory = cooperativeMatrixWorkgroupScopeReservedSharedMemory
                    }

                new(cooperativeMatrixWorkgroupScopeMaxWorkgroupSize: uint32, cooperativeMatrixFlexibleDimensionsMaxDimension: uint32, cooperativeMatrixWorkgroupScopeReservedSharedMemory: uint32) =
                    VkPhysicalDeviceCooperativeMatrix2PropertiesNV(Unchecked.defaultof<nativeint>, cooperativeMatrixWorkgroupScopeMaxWorkgroupSize, cooperativeMatrixFlexibleDimensionsMaxDimension, cooperativeMatrixWorkgroupScopeReservedSharedMemory)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.cooperativeMatrixWorkgroupScopeMaxWorkgroupSize = Unchecked.defaultof<uint32> && x.cooperativeMatrixFlexibleDimensionsMaxDimension = Unchecked.defaultof<uint32> && x.cooperativeMatrixWorkgroupScopeReservedSharedMemory = Unchecked.defaultof<uint32>

                static member Empty =
                    VkPhysicalDeviceCooperativeMatrix2PropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "cooperativeMatrixWorkgroupScopeMaxWorkgroupSize = %A" x.cooperativeMatrixWorkgroupScopeMaxWorkgroupSize
                        sprintf "cooperativeMatrixFlexibleDimensionsMaxDimension = %A" x.cooperativeMatrixFlexibleDimensionsMaxDimension
                        sprintf "cooperativeMatrixWorkgroupScopeReservedSharedMemory = %A" x.cooperativeMatrixWorkgroupScopeReservedSharedMemory
                    ] |> sprintf "VkPhysicalDeviceCooperativeMatrix2PropertiesNV { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNVDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkCooperativeMatrixFlexibleDimensionsPropertiesNV> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading NVCooperativeMatrix2")
                static let s_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNVDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNVDel> "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"
                static do Report.End(3) |> ignore
                static member vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV = s_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNVDel
            let vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkCooperativeMatrixFlexibleDimensionsPropertiesNV>) = Loader<unit>.vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV.Invoke(physicalDevice, pPropertyCount, pProperties)

    /// Requires EXTOpacityMicromap.
    module ARMPipelineOpacityMicromap =
        let Type = ExtensionType.Device
        let Name = "VK_ARM_pipeline_opacity_micromap"
        let Number = 597

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePipelineOpacityMicromapFeaturesARM =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public pipelineOpacityMicromap : VkBool32

                new(pNext: nativeint, pipelineOpacityMicromap: VkBool32) =
                    {
                        sType = 1000596000u
                        pNext = pNext
                        pipelineOpacityMicromap = pipelineOpacityMicromap
                    }

                new(pipelineOpacityMicromap: VkBool32) =
                    VkPhysicalDevicePipelineOpacityMicromapFeaturesARM(Unchecked.defaultof<nativeint>, pipelineOpacityMicromap)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.pipelineOpacityMicromap = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePipelineOpacityMicromapFeaturesARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "pipelineOpacityMicromap = %A" x.pipelineOpacityMicromap
                    ] |> sprintf "VkPhysicalDevicePipelineOpacityMicromapFeaturesARM { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan14.VkPipelineCreateFlags2 with
                  static member inline PipelineCreate2DisallowOpacityMicromapBitArm = enum<Vulkan14.VkPipelineCreateFlags2> 0x00000020


    /// Requires KHRExternalMemory | Vulkan11.
    module EXTExternalMemoryMetal =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_external_memory_metal"
        let Number = 603

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImportMemoryMetalHandleInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public handleType : Vulkan11.VkExternalMemoryHandleTypeFlags
                val mutable public handle : nativeint

                new(pNext: nativeint, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags, handle: nativeint) =
                    {
                        sType = 1000602000u
                        pNext = pNext
                        handleType = handleType
                        handle = handle
                    }

                new(handleType: Vulkan11.VkExternalMemoryHandleTypeFlags, handle: nativeint) =
                    VkImportMemoryMetalHandleInfoEXT(Unchecked.defaultof<nativeint>, handleType, handle)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags> && x.handle = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkImportMemoryMetalHandleInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "handleType = %A" x.handleType
                        sprintf "handle = %A" x.handle
                    ] |> sprintf "VkImportMemoryMetalHandleInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryGetMetalHandleInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memory : VkDeviceMemory
                val mutable public handleType : Vulkan11.VkExternalMemoryHandleTypeFlags

                new(pNext: nativeint, memory: VkDeviceMemory, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags) =
                    {
                        sType = 1000602002u
                        pNext = pNext
                        memory = memory
                        handleType = handleType
                    }

                new(memory: VkDeviceMemory, handleType: Vulkan11.VkExternalMemoryHandleTypeFlags) =
                    VkMemoryGetMetalHandleInfoEXT(Unchecked.defaultof<nativeint>, memory, handleType)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.handleType = Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>

                static member Empty =
                    VkMemoryGetMetalHandleInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<Vulkan11.VkExternalMemoryHandleTypeFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memory = %A" x.memory
                        sprintf "handleType = %A" x.handleType
                    ] |> sprintf "VkMemoryGetMetalHandleInfoEXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkMemoryMetalHandlePropertiesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public memoryTypeBits : uint32

                new(pNext: nativeint, memoryTypeBits: uint32) =
                    {
                        sType = 1000602001u
                        pNext = pNext
                        memoryTypeBits = memoryTypeBits
                    }

                new(memoryTypeBits: uint32) =
                    VkMemoryMetalHandlePropertiesEXT(Unchecked.defaultof<nativeint>, memoryTypeBits)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.memoryTypeBits = Unchecked.defaultof<uint32>

                static member Empty =
                    VkMemoryMetalHandlePropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "memoryTypeBits = %A" x.memoryTypeBits
                    ] |> sprintf "VkMemoryMetalHandlePropertiesEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type Vulkan11.VkExternalMemoryHandleTypeFlags with
                  static member inline MtlbufferBitExt = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00010000
                  static member inline MtltextureBitExt = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00020000
                  static member inline MtlheapBitExt = enum<Vulkan11.VkExternalMemoryHandleTypeFlags> 0x00040000

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMemoryMetalHandleEXTDel = delegate of VkDevice * nativeptr<VkMemoryGetMetalHandleInfoEXT> * nativeptr<nativeint> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetMemoryMetalHandlePropertiesEXTDel = delegate of VkDevice * Vulkan11.VkExternalMemoryHandleTypeFlags * nativeint * nativeptr<VkMemoryMetalHandlePropertiesEXT> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'T> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTExternalMemoryMetal")
                static let s_vkGetMemoryMetalHandleEXTDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryMetalHandleEXTDel> "vkGetMemoryMetalHandleEXT"
                static let s_vkGetMemoryMetalHandlePropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryMetalHandlePropertiesEXTDel> "vkGetMemoryMetalHandlePropertiesEXT"
                static do Report.End(3) |> ignore
                static member vkGetMemoryMetalHandleEXT = s_vkGetMemoryMetalHandleEXTDel
                static member vkGetMemoryMetalHandlePropertiesEXT = s_vkGetMemoryMetalHandlePropertiesEXTDel
            let vkGetMemoryMetalHandleEXT(device : VkDevice, pGetMetalHandleInfo : nativeptr<VkMemoryGetMetalHandleInfoEXT>, pHandle : nativeptr<nativeint>) = Loader<unit>.vkGetMemoryMetalHandleEXT.Invoke(device, pGetMetalHandleInfo, pHandle)
            let vkGetMemoryMetalHandlePropertiesEXT(device : VkDevice, handleType : Vulkan11.VkExternalMemoryHandleTypeFlags, pHandle : nativeint, pMemoryMetalHandleProperties : nativeptr<VkMemoryMetalHandlePropertiesEXT>) = Loader<unit>.vkGetMemoryMetalHandlePropertiesEXT.Invoke(device, handleType, pHandle, pMemoryMetalHandleProperties)

    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module KHRDepthClampZeroOne =
        let Type = ExtensionType.Device
        let Name = "VK_KHR_depth_clamp_zero_one"
        let Number = 605

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceDepthClampZeroOneFeaturesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public depthClampZeroOne : VkBool32

                new(pNext: nativeint, depthClampZeroOne: VkBool32) =
                    {
                        sType = 1000421000u
                        pNext = pNext
                        depthClampZeroOne = depthClampZeroOne
                    }

                new(depthClampZeroOne: VkBool32) =
                    VkPhysicalDeviceDepthClampZeroOneFeaturesKHR(Unchecked.defaultof<nativeint>, depthClampZeroOne)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.depthClampZeroOne = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceDepthClampZeroOneFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "depthClampZeroOne = %A" x.depthClampZeroOne
                    ] |> sprintf "VkPhysicalDeviceDepthClampZeroOneFeaturesKHR { %s }"
            end



    /// Requires KHRGetPhysicalDeviceProperties2 | Vulkan11.
    module EXTVertexAttributeRobustness =
        let Type = ExtensionType.Device
        let Name = "VK_EXT_vertex_attribute_robustness"
        let Number = 609

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public vertexAttributeRobustness : VkBool32

                new(pNext: nativeint, vertexAttributeRobustness: VkBool32) =
                    {
                        sType = 1000608000u
                        pNext = pNext
                        vertexAttributeRobustness = vertexAttributeRobustness
                    }

                new(vertexAttributeRobustness: VkBool32) =
                    VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT(Unchecked.defaultof<nativeint>, vertexAttributeRobustness)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.vertexAttributeRobustness = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "vertexAttributeRobustness = %A" x.vertexAttributeRobustness
                    ] |> sprintf "VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT { %s }"
            end



    module NVPresentMetering =
        let Type = ExtensionType.Device
        let Name = "VK_NV_present_metering"
        let Number = 614

        [<StructLayout(LayoutKind.Sequential)>]
        type VkPhysicalDevicePresentMeteringFeaturesNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentMetering : VkBool32

                new(pNext: nativeint, presentMetering: VkBool32) =
                    {
                        sType = 1000613001u
                        pNext = pNext
                        presentMetering = presentMetering
                    }

                new(presentMetering: VkBool32) =
                    VkPhysicalDevicePresentMeteringFeaturesNV(Unchecked.defaultof<nativeint>, presentMetering)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentMetering = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkPhysicalDevicePresentMeteringFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentMetering = %A" x.presentMetering
                    ] |> sprintf "VkPhysicalDevicePresentMeteringFeaturesNV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkSetPresentConfigNV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public numFramesPerBatch : uint32
                val mutable public presentConfigFeedback : uint32

                new(pNext: nativeint, numFramesPerBatch: uint32, presentConfigFeedback: uint32) =
                    {
                        sType = 1000613000u
                        pNext = pNext
                        numFramesPerBatch = numFramesPerBatch
                        presentConfigFeedback = presentConfigFeedback
                    }

                new(numFramesPerBatch: uint32, presentConfigFeedback: uint32) =
                    VkSetPresentConfigNV(Unchecked.defaultof<nativeint>, numFramesPerBatch, presentConfigFeedback)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.numFramesPerBatch = Unchecked.defaultof<uint32> && x.presentConfigFeedback = Unchecked.defaultof<uint32>

                static member Empty =
                    VkSetPresentConfigNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "pNext = %A" x.pNext
                        sprintf "numFramesPerBatch = %A" x.numFramesPerBatch
                        sprintf "presentConfigFeedback = %A" x.presentConfigFeedback
                    ] |> sprintf "VkSetPresentConfigNV { %s }"
            end



