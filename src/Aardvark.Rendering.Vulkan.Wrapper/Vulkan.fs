namespace Aardvark.Rendering.Vulkan

#nowarn "1337"
#nowarn "49"

open System
open System.Runtime.InteropServices
open System.Runtime.CompilerServices
open Microsoft.FSharp.NativeInterop
open System.Security
open Aardvark.Base
open Aardvark.Rendering.Vulkan

#nowarn "9"
#nowarn "51"

[<AutoOpen>]
module Constants = 

    [<Literal>]
    let VkAttachmentUnused = 4294967295u

    [<Literal>]
    let VkFalse = 0

    [<Literal>]
    let VkLodClampNone = 1000.00000000f

    [<Literal>]
    let VkLuidSize = 8

    [<Literal>]
    let VkMaxDescriptionSize = 256

    [<Literal>]
    let VkMaxDeviceGroupSize = 32

    [<Literal>]
    let VkMaxDriverInfoSize = 256

    [<Literal>]
    let VkMaxDriverNameSize = 256

    [<Literal>]
    let VkMaxExtensionNameSize = 256

    [<Literal>]
    let VkMaxGlobalPrioritySizeKhr = 16

    [<Literal>]
    let VkMaxMemoryHeaps = 16

    [<Literal>]
    let VkMaxMemoryTypes = 32

    [<Literal>]
    let VkMaxPhysicalDeviceNameSize = 256

    [<Literal>]
    let VkMaxShaderModuleIdentifierSizeExt = 32

    [<Literal>]
    let VkQueueFamilyExternal = 4294967294u

    [<Literal>]
    let VkQueueFamilyForeignExt = 4294967293u

    [<Literal>]
    let VkQueueFamilyIgnored = 4294967295u

    [<Literal>]
    let VkRemainingArrayLayers = 4294967295u

    [<Literal>]
    let VkRemainingMipLevels = 4294967295u

    [<Literal>]
    let VkShaderUnusedKhr = 4294967295u

    [<Literal>]
    let VkSubpassExternal = 4294967295u

    [<Literal>]
    let VkTrue = 1

    [<Literal>]
    let VkUuidSize = 16

    [<Literal>]
    let VkWholeSize = 18446744073709551615UL


[<Flags>]
type VkQueryPoolCreateFlags = | None = 0

[<Flags>]
type VkPipelineDynamicStateCreateFlags = | None = 0

[<Flags>]
type VkPipelineMultisampleStateCreateFlags = | None = 0

[<Flags>]
type VkPipelineRasterizationStateCreateFlags = | None = 0

[<Flags>]
type VkPipelineViewportStateCreateFlags = | None = 0

[<Flags>]
type VkPipelineTessellationStateCreateFlags = | None = 0

[<Flags>]
type VkPipelineInputAssemblyStateCreateFlags = | None = 0

[<Flags>]
type VkPipelineVertexInputStateCreateFlags = | None = 0

[<Flags>]
type VkBufferViewCreateFlags = | None = 0

[<Flags>]
type VkDeviceCreateFlags = | None = 0

[<Flags>]
type VkMemoryMapFlags = | None = 0

[<Flags>]
type VkDescriptorPoolResetFlags = | None = 0

[<Flags>]
type VkDescriptorUpdateTemplateCreateFlags = | None = 0

[<Flags>]
type VkAccelerationStructureMotionInfoFlagsNV = | None = 0

[<Flags>]
type VkAccelerationStructureMotionInstanceFlagsNV = | None = 0

[<Flags>]
type VkDisplayModeCreateFlagsKHR = | None = 0

[<Flags>]
type VkDisplaySurfaceCreateFlagsKHR = | None = 0

[<Flags>]
type VkAndroidSurfaceCreateFlagsKHR = | None = 0

[<Flags>]
type VkViSurfaceCreateFlagsNN = | None = 0

[<Flags>]
type VkWaylandSurfaceCreateFlagsKHR = | None = 0

[<Flags>]
type VkWin32SurfaceCreateFlagsKHR = | None = 0

[<Flags>]
type VkXlibSurfaceCreateFlagsKHR = | None = 0

[<Flags>]
type VkXcbSurfaceCreateFlagsKHR = | None = 0

[<Flags>]
type VkDirectFBSurfaceCreateFlagsEXT = | None = 0

[<Flags>]
type VkIOSSurfaceCreateFlagsMVK = | None = 0

[<Flags>]
type VkMacOSSurfaceCreateFlagsMVK = | None = 0

[<Flags>]
type VkMetalSurfaceCreateFlagsEXT = | None = 0

[<Flags>]
type VkImagePipeSurfaceCreateFlagsFUCHSIA = | None = 0

[<Flags>]
type VkStreamDescriptorSurfaceCreateFlagsGGP = | None = 0

[<Flags>]
type VkHeadlessSurfaceCreateFlagsEXT = | None = 0

[<Flags>]
type VkScreenSurfaceCreateFlagsQNX = | None = 0

[<Flags>]
type VkCommandPoolTrimFlags = | None = 0

[<Flags>]
type VkPipelineViewportSwizzleStateCreateFlagsNV = | None = 0

[<Flags>]
type VkPipelineDiscardRectangleStateCreateFlagsEXT = | None = 0

[<Flags>]
type VkPipelineCoverageToColorStateCreateFlagsNV = | None = 0

[<Flags>]
type VkPipelineCoverageModulationStateCreateFlagsNV = | None = 0

[<Flags>]
type VkPipelineCoverageReductionStateCreateFlagsNV = | None = 0

[<Flags>]
type VkValidationCacheCreateFlagsEXT = | None = 0

[<Flags>]
type VkDebugUtilsMessengerCreateFlagsEXT = | None = 0

[<Flags>]
type VkDebugUtilsMessengerCallbackDataFlagsEXT = | None = 0

[<Flags>]
type VkDeviceMemoryReportFlagsEXT = | None = 0

[<Flags>]
type VkPipelineRasterizationConservativeStateCreateFlagsEXT = | None = 0

[<Flags>]
type VkPipelineRasterizationStateStreamCreateFlagsEXT = | None = 0

[<Flags>]
type VkPipelineRasterizationDepthClipStateCreateFlagsEXT = | None = 0

[<Flags>]
type VkVideoBeginCodingFlagsKHR = | None = 0

[<Flags>]
type VkVideoEndCodingFlagsKHR = | None = 0

[<StructLayout(LayoutKind.Explicit, Size = 128)>]
type uint32_32 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : uint32

        member x.Item
            with get (i : int) : uint32 =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : uint32) =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 32

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<uint32> with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator()
    end

[<StructLayout(LayoutKind.Explicit, Size = 32)>]
type byte_32 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : byte

        member x.Item
            with get (i : int) : byte =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : byte) =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 32

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<byte> with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator()
    end

[<StructLayout(LayoutKind.Explicit, Size = 8)>]
type byte_8 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : byte

        member x.Item
            with get (i : int) : byte =
                if i < 0 || i > 7 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : byte) =
                if i < 0 || i > 7 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 8

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 8 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<byte> with
            member x.GetEnumerator() = let x = x in (Seq.init 8 (fun i -> x.[i])).GetEnumerator()
    end
type PFN_vkAllocationFunction = nativeint
type PFN_vkFreeFunction = nativeint
type PFN_vkInternalAllocationNotification = nativeint
type PFN_vkInternalFreeNotification = nativeint
type PFN_vkReallocationFunction = nativeint
type PFN_vkVoidFunction = nativeint

type VkInstance = nativeint
type VkPhysicalDevice = nativeint
type VkDevice = nativeint
type VkQueue = nativeint

[<StructLayout(LayoutKind.Sequential)>]
type VkDeviceMemory =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkDeviceMemory(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkFence =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkFence(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSemaphore =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkSemaphore(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkEvent =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkEvent(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkQueryPool =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkQueryPool(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBuffer =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkBuffer(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBufferView =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkBufferView(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImage =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkImage(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageView =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkImageView(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkShaderModule =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkShaderModule(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineCache =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkPipelineCache(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipeline =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkPipeline(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineLayout =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkPipelineLayout(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSampler =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkSampler(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorPool =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkDescriptorPool(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorSet =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkDescriptorSet(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorSetLayout =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkDescriptorSetLayout(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkFramebuffer =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkFramebuffer(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkRenderPass =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkRenderPass(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkCommandPool =
    struct
        val mutable public Handle : uint64
        new(h) = { Handle = h }
        static member Null = VkCommandPool(0UL)
        member x.IsNull = x.Handle = 0UL
        member x.IsValid = x.Handle <> 0UL
    end
type VkCommandBuffer = nativeint

[<StructLayout(LayoutKind.Explicit, Size = 256)>]
type VkPhysicalDevice_32 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : VkPhysicalDevice

        member x.Item
            with get (i : int) : VkPhysicalDevice =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : VkPhysicalDevice) =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 32

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<VkPhysicalDevice> with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator()
    end

type VkBool32 = uint32
type VkDeviceAddress = uint64
type VkDeviceSize = uint64
type VkFlags = uint32
type VkSampleMask = uint32

[<StructLayout(LayoutKind.Explicit, Size = 128)>]
type VkDeviceSize_16 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : VkDeviceSize

        member x.Item
            with get (i : int) : VkDeviceSize =
                if i < 0 || i > 15 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : VkDeviceSize) =
                if i < 0 || i > 15 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 16

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 16 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<VkDeviceSize> with
            member x.GetEnumerator() = let x = x in (Seq.init 16 (fun i -> x.[i])).GetEnumerator()
    end

type VkResult =
    /// Command completed successfully
    | Success = 0
    /// A fence or query has not yet completed
    | NotReady = 1
    /// A wait operation has not completed in the specified time
    | Timeout = 2
    /// An event is signaled
    | EventSet = 3
    /// An event is unsignaled
    | EventReset = 4
    /// A return array was too small for the result
    | Incomplete = 5
    /// A host memory allocation has failed
    | ErrorOutOfHostMemory = -1
    /// A device memory allocation has failed
    | ErrorOutOfDeviceMemory = -2
    /// Initialization of an object has failed
    | ErrorInitializationFailed = -3
    /// The logical device has been lost. See <<devsandqueues-lost-device>>
    | ErrorDeviceLost = -4
    /// Mapping of a memory object has failed
    | ErrorMemoryMapFailed = -5
    /// Layer specified does not exist
    | ErrorLayerNotPresent = -6
    /// Extension specified does not exist
    | ErrorExtensionNotPresent = -7
    /// Requested feature is not available on this device
    | ErrorFeatureNotPresent = -8
    /// Unable to find a Vulkan driver
    | ErrorIncompatibleDriver = -9
    /// Too many objects of the type have already been created
    | ErrorTooManyObjects = -10
    /// Requested format is not supported on this device
    | ErrorFormatNotSupported = -11
    /// A requested pool allocation has failed due to fragmentation of the pool's memory
    | ErrorFragmentedPool = -12
    /// An unknown error has occurred, due to an implementation or application bug
    | ErrorUnknown = -13

type VkPipelineCacheHeaderVersion =
    | One = 1

type VkObjectType =
    | Unknown = 0
    | Instance = 1
    | PhysicalDevice = 2
    | Device = 3
    | Queue = 4
    | Semaphore = 5
    | CommandBuffer = 6
    | Fence = 7
    | DeviceMemory = 8
    | Buffer = 9
    | Image = 10
    | Event = 11
    | QueryPool = 12
    | BufferView = 13
    | ImageView = 14
    | ShaderModule = 15
    | PipelineCache = 16
    | PipelineLayout = 17
    | RenderPass = 18
    | Pipeline = 19
    | DescriptorSetLayout = 20
    | Sampler = 21
    | DescriptorPool = 22
    | DescriptorSet = 23
    | Framebuffer = 24
    | CommandPool = 25

type VkVendorId =
    /// Vivante vendor ID
    | Viv = 65537
    /// VeriSilicon vendor ID
    | Vsi = 65538
    /// Kazan Software Renderer
    | Kazan = 65539
    /// Codeplay Software Ltd. vendor ID
    | Codeplay = 65540
    /// Mesa vendor ID
    | Mesa = 65541
    /// PoCL vendor ID
    | Pocl = 65542

type VkFormat =
    | Undefined = 0
    | R4g4UnormPack8 = 1
    | R4g4b4a4UnormPack16 = 2
    | B4g4r4a4UnormPack16 = 3
    | R5g6b5UnormPack16 = 4
    | B5g6r5UnormPack16 = 5
    | R5g5b5a1UnormPack16 = 6
    | B5g5r5a1UnormPack16 = 7
    | A1r5g5b5UnormPack16 = 8
    | R8Unorm = 9
    | R8Snorm = 10
    | R8Uscaled = 11
    | R8Sscaled = 12
    | R8Uint = 13
    | R8Sint = 14
    | R8Srgb = 15
    | R8g8Unorm = 16
    | R8g8Snorm = 17
    | R8g8Uscaled = 18
    | R8g8Sscaled = 19
    | R8g8Uint = 20
    | R8g8Sint = 21
    | R8g8Srgb = 22
    | R8g8b8Unorm = 23
    | R8g8b8Snorm = 24
    | R8g8b8Uscaled = 25
    | R8g8b8Sscaled = 26
    | R8g8b8Uint = 27
    | R8g8b8Sint = 28
    | R8g8b8Srgb = 29
    | B8g8r8Unorm = 30
    | B8g8r8Snorm = 31
    | B8g8r8Uscaled = 32
    | B8g8r8Sscaled = 33
    | B8g8r8Uint = 34
    | B8g8r8Sint = 35
    | B8g8r8Srgb = 36
    | R8g8b8a8Unorm = 37
    | R8g8b8a8Snorm = 38
    | R8g8b8a8Uscaled = 39
    | R8g8b8a8Sscaled = 40
    | R8g8b8a8Uint = 41
    | R8g8b8a8Sint = 42
    | R8g8b8a8Srgb = 43
    | B8g8r8a8Unorm = 44
    | B8g8r8a8Snorm = 45
    | B8g8r8a8Uscaled = 46
    | B8g8r8a8Sscaled = 47
    | B8g8r8a8Uint = 48
    | B8g8r8a8Sint = 49
    | B8g8r8a8Srgb = 50
    | A8b8g8r8UnormPack32 = 51
    | A8b8g8r8SnormPack32 = 52
    | A8b8g8r8UscaledPack32 = 53
    | A8b8g8r8SscaledPack32 = 54
    | A8b8g8r8UintPack32 = 55
    | A8b8g8r8SintPack32 = 56
    | A8b8g8r8SrgbPack32 = 57
    | A2r10g10b10UnormPack32 = 58
    | A2r10g10b10SnormPack32 = 59
    | A2r10g10b10UscaledPack32 = 60
    | A2r10g10b10SscaledPack32 = 61
    | A2r10g10b10UintPack32 = 62
    | A2r10g10b10SintPack32 = 63
    | A2b10g10r10UnormPack32 = 64
    | A2b10g10r10SnormPack32 = 65
    | A2b10g10r10UscaledPack32 = 66
    | A2b10g10r10SscaledPack32 = 67
    | A2b10g10r10UintPack32 = 68
    | A2b10g10r10SintPack32 = 69
    | R16Unorm = 70
    | R16Snorm = 71
    | R16Uscaled = 72
    | R16Sscaled = 73
    | R16Uint = 74
    | R16Sint = 75
    | R16Sfloat = 76
    | R16g16Unorm = 77
    | R16g16Snorm = 78
    | R16g16Uscaled = 79
    | R16g16Sscaled = 80
    | R16g16Uint = 81
    | R16g16Sint = 82
    | R16g16Sfloat = 83
    | R16g16b16Unorm = 84
    | R16g16b16Snorm = 85
    | R16g16b16Uscaled = 86
    | R16g16b16Sscaled = 87
    | R16g16b16Uint = 88
    | R16g16b16Sint = 89
    | R16g16b16Sfloat = 90
    | R16g16b16a16Unorm = 91
    | R16g16b16a16Snorm = 92
    | R16g16b16a16Uscaled = 93
    | R16g16b16a16Sscaled = 94
    | R16g16b16a16Uint = 95
    | R16g16b16a16Sint = 96
    | R16g16b16a16Sfloat = 97
    | R32Uint = 98
    | R32Sint = 99
    | R32Sfloat = 100
    | R32g32Uint = 101
    | R32g32Sint = 102
    | R32g32Sfloat = 103
    | R32g32b32Uint = 104
    | R32g32b32Sint = 105
    | R32g32b32Sfloat = 106
    | R32g32b32a32Uint = 107
    | R32g32b32a32Sint = 108
    | R32g32b32a32Sfloat = 109
    | R64Uint = 110
    | R64Sint = 111
    | R64Sfloat = 112
    | R64g64Uint = 113
    | R64g64Sint = 114
    | R64g64Sfloat = 115
    | R64g64b64Uint = 116
    | R64g64b64Sint = 117
    | R64g64b64Sfloat = 118
    | R64g64b64a64Uint = 119
    | R64g64b64a64Sint = 120
    | R64g64b64a64Sfloat = 121
    | B10g11r11UfloatPack32 = 122
    | E5b9g9r9UfloatPack32 = 123
    | D16Unorm = 124
    | X8D24UnormPack32 = 125
    | D32Sfloat = 126
    | S8Uint = 127
    | D16UnormS8Uint = 128
    | D24UnormS8Uint = 129
    | D32SfloatS8Uint = 130
    | Bc1RgbUnormBlock = 131
    | Bc1RgbSrgbBlock = 132
    | Bc1RgbaUnormBlock = 133
    | Bc1RgbaSrgbBlock = 134
    | Bc2UnormBlock = 135
    | Bc2SrgbBlock = 136
    | Bc3UnormBlock = 137
    | Bc3SrgbBlock = 138
    | Bc4UnormBlock = 139
    | Bc4SnormBlock = 140
    | Bc5UnormBlock = 141
    | Bc5SnormBlock = 142
    | Bc6hUfloatBlock = 143
    | Bc6hSfloatBlock = 144
    | Bc7UnormBlock = 145
    | Bc7SrgbBlock = 146
    | Etc2R8g8b8UnormBlock = 147
    | Etc2R8g8b8SrgbBlock = 148
    | Etc2R8g8b8a1UnormBlock = 149
    | Etc2R8g8b8a1SrgbBlock = 150
    | Etc2R8g8b8a8UnormBlock = 151
    | Etc2R8g8b8a8SrgbBlock = 152
    | EacR11UnormBlock = 153
    | EacR11SnormBlock = 154
    | EacR11g11UnormBlock = 155
    | EacR11g11SnormBlock = 156
    | Astc44UnormBlock = 157
    | Astc44SrgbBlock = 158
    | Astc54UnormBlock = 159
    | Astc54SrgbBlock = 160
    | Astc55UnormBlock = 161
    | Astc55SrgbBlock = 162
    | Astc65UnormBlock = 163
    | Astc65SrgbBlock = 164
    | Astc66UnormBlock = 165
    | Astc66SrgbBlock = 166
    | Astc85UnormBlock = 167
    | Astc85SrgbBlock = 168
    | Astc86UnormBlock = 169
    | Astc86SrgbBlock = 170
    | Astc88UnormBlock = 171
    | Astc88SrgbBlock = 172
    | Astc105UnormBlock = 173
    | Astc105SrgbBlock = 174
    | Astc106UnormBlock = 175
    | Astc106SrgbBlock = 176
    | Astc108UnormBlock = 177
    | Astc108SrgbBlock = 178
    | Astc1010UnormBlock = 179
    | Astc1010SrgbBlock = 180
    | Astc1210UnormBlock = 181
    | Astc1210SrgbBlock = 182
    | Astc1212UnormBlock = 183
    | Astc1212SrgbBlock = 184

[<Flags>]
type VkFormatFeatureFlags =
    | All = 8191
    | None = 0
    /// Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
    | SampledImageBit = 0x00000001
    /// Format can be used for storage images (STORAGE_IMAGE descriptor type)
    | StorageImageBit = 0x00000002
    /// Format supports atomic operations in case it is used for storage images
    | StorageImageAtomicBit = 0x00000004
    /// Format can be used for uniform texel buffers (TBOs)
    | UniformTexelBufferBit = 0x00000008
    /// Format can be used for storage texel buffers (IBOs)
    | StorageTexelBufferBit = 0x00000010
    /// Format supports atomic operations in case it is used for storage texel buffers
    | StorageTexelBufferAtomicBit = 0x00000020
    /// Format can be used for vertex buffers (VBOs)
    | VertexBufferBit = 0x00000040
    /// Format can be used for color attachment images
    | ColorAttachmentBit = 0x00000080
    /// Format supports blending in case it is used for color attachment images
    | ColorAttachmentBlendBit = 0x00000100
    /// Format can be used for depth/stencil attachment images
    | DepthStencilAttachmentBit = 0x00000200
    /// Format can be used as the source image of blits with vkCmdBlitImage
    | BlitSrcBit = 0x00000400
    /// Format can be used as the destination image of blits with vkCmdBlitImage
    | BlitDstBit = 0x00000800
    /// Format can be filtered with VK_FILTER_LINEAR when being sampled
    | SampledImageFilterLinearBit = 0x00001000

[<Flags>]
type VkImageCreateFlags =
    | All = 31
    | None = 0
    /// Image should support sparse backing
    | SparseBindingBit = 0x00000001
    /// Image should support sparse backing with partial residency
    | SparseResidencyBit = 0x00000002
    /// Image should support constant data access to physical memory ranges mapped into multiple locations of sparse images
    | SparseAliasedBit = 0x00000004
    /// Allows image views to have different format than the base image
    | MutableFormatBit = 0x00000008
    /// Allows creating image views with cube type from the created image
    | CubeCompatibleBit = 0x00000010

type VkImageTiling =
    | Optimal = 0
    | Linear = 1

type VkImageType =
    | D1d = 0
    | D2d = 1
    | D3d = 2

[<Flags>]
type VkImageUsageFlags =
    | All = 255
    | None = 0
    /// Can be used as a source of transfer operations
    | TransferSrcBit = 0x00000001
    /// Can be used as a destination of transfer operations
    | TransferDstBit = 0x00000002
    /// Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
    | SampledBit = 0x00000004
    /// Can be used as storage image (STORAGE_IMAGE descriptor type)
    | StorageBit = 0x00000008
    /// Can be used as framebuffer color attachment
    | ColorAttachmentBit = 0x00000010
    /// Can be used as framebuffer depth/stencil attachment
    | DepthStencilAttachmentBit = 0x00000020
    /// Image data not needed outside of rendering
    | TransientAttachmentBit = 0x00000040
    /// Can be used as framebuffer input attachment
    | InputAttachmentBit = 0x00000080

[<Flags>]
type VkInstanceCreateFlags =
    | All = 0
    | None = 0

type VkInternalAllocationType =
    | Executable = 0

[<Flags>]
type VkMemoryHeapFlags =
    | All = 1
    | None = 0
    /// If set, heap represents device memory
    | DeviceLocalBit = 0x00000001

[<Flags>]
type VkMemoryPropertyFlags =
    | All = 31
    | None = 0
    /// If otherwise stated, then allocate memory on device
    | DeviceLocalBit = 0x00000001
    /// Memory is mappable by host
    | HostVisibleBit = 0x00000002
    /// Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache
    | HostCoherentBit = 0x00000004
    /// Memory will be cached by the host
    | HostCachedBit = 0x00000008
    /// Memory may be allocated by the driver when it is required
    | LazilyAllocatedBit = 0x00000010

type VkPhysicalDeviceType =
    | Other = 0
    | IntegratedGpu = 1
    | DiscreteGpu = 2
    | VirtualGpu = 3
    | Cpu = 4

[<Flags>]
type VkQueueFlags =
    | All = 15
    | None = 0
    /// Queue supports graphics operations
    | GraphicsBit = 0x00000001
    /// Queue supports compute operations
    | ComputeBit = 0x00000002
    /// Queue supports transfer operations
    | TransferBit = 0x00000004
    /// Queue supports sparse resource memory management operations
    | SparseBindingBit = 0x00000008

[<Flags>]
type VkSampleCountFlags =
    | All = 127
    | None = 0
    /// Sample count 1 supported
    | D1Bit = 0x00000001
    /// Sample count 2 supported
    | D2Bit = 0x00000002
    /// Sample count 4 supported
    | D4Bit = 0x00000004
    /// Sample count 8 supported
    | D8Bit = 0x00000008
    /// Sample count 16 supported
    | D16Bit = 0x00000010
    /// Sample count 32 supported
    | D32Bit = 0x00000020
    /// Sample count 64 supported
    | D64Bit = 0x00000040

type VkSystemAllocationScope =
    | Command = 0
    | Object = 1
    | Cache = 2
    | Device = 3
    | Instance = 4

[<Flags>]
type VkDeviceQueueCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkPipelineStageFlags =
    | All = 131071
    | None = 0
    /// Before subsequent commands are processed
    | TopOfPipeBit = 0x00000001
    /// Draw/DispatchIndirect command fetch
    | DrawIndirectBit = 0x00000002
    /// Vertex/index fetch
    | VertexInputBit = 0x00000004
    /// Vertex shading
    | VertexShaderBit = 0x00000008
    /// Tessellation control shading
    | TessellationControlShaderBit = 0x00000010
    /// Tessellation evaluation shading
    | TessellationEvaluationShaderBit = 0x00000020
    /// Geometry shading
    | GeometryShaderBit = 0x00000040
    /// Fragment shading
    | FragmentShaderBit = 0x00000080
    /// Early fragment (depth and stencil) tests
    | EarlyFragmentTestsBit = 0x00000100
    /// Late fragment (depth and stencil) tests
    | LateFragmentTestsBit = 0x00000200
    /// Color attachment writes
    | ColorAttachmentOutputBit = 0x00000400
    /// Compute shading
    | ComputeShaderBit = 0x00000800
    /// Transfer/copy operations
    | TransferBit = 0x00001000
    /// After previous commands have completed
    | BottomOfPipeBit = 0x00002000
    /// Indicates host (CPU) is a source/sink of the dependency
    | HostBit = 0x00004000
    /// All stages of the graphics pipeline
    | AllGraphicsBit = 0x00008000
    /// All stages supported on the queue
    | AllCommandsBit = 0x00010000

[<Flags>]
type VkImageAspectFlags =
    | All = 15
    | None = 0
    | ColorBit = 0x00000001
    | DepthBit = 0x00000002
    | StencilBit = 0x00000004
    | MetadataBit = 0x00000008

[<Flags>]
type VkSparseImageFormatFlags =
    | All = 7
    | None = 0
    /// Image uses a single mip tail region for all array layers
    | SingleMiptailBit = 0x00000001
    /// Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-tail mip levels.
    | AlignedMipSizeBit = 0x00000002
    /// Image uses a non-standard sparse image block dimensions
    | NonstandardBlockSizeBit = 0x00000004

[<Flags>]
type VkSparseMemoryBindFlags =
    | All = 1
    | None = 0
    /// Operation binds resource metadata to memory
    | MetadataBit = 0x00000001

[<Flags>]
type VkFenceCreateFlags =
    | All = 1
    | None = 0
    | SignaledBit = 0x00000001

[<Flags>]
type VkSemaphoreCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkEventCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkQueryPipelineStatisticFlags =
    | All = 2047
    | None = 0
    | InputAssemblyVerticesBit = 0x00000001
    | InputAssemblyPrimitivesBit = 0x00000002
    | VertexShaderInvocationsBit = 0x00000004
    | GeometryShaderInvocationsBit = 0x00000008
    | GeometryShaderPrimitivesBit = 0x00000010
    | ClippingInvocationsBit = 0x00000020
    | ClippingPrimitivesBit = 0x00000040
    | FragmentShaderInvocationsBit = 0x00000080
    | TessellationControlShaderPatchesBit = 0x00000100
    | TessellationEvaluationShaderInvocationsBit = 0x00000200
    | ComputeShaderInvocationsBit = 0x00000400

[<Flags>]
type VkQueryResultFlags =
    | All = 15
    | None = 0
    /// Results of the queries are written to the destination buffer as 64-bit values
    | D64Bit = 0x00000001
    /// Results of the queries are waited on before proceeding with the result copy
    | WaitBit = 0x00000002
    /// Besides the results of the query, the availability of the results is also written
    | WithAvailabilityBit = 0x00000004
    /// Copy the partial results of the query even if the final results are not available
    | PartialBit = 0x00000008

type VkQueryType =
    | Occlusion = 0
    | PipelineStatistics = 1
    | Timestamp = 2

[<Flags>]
type VkBufferCreateFlags =
    | All = 7
    | None = 0
    /// Buffer should support sparse backing
    | SparseBindingBit = 0x00000001
    /// Buffer should support sparse backing with partial residency
    | SparseResidencyBit = 0x00000002
    /// Buffer should support constant data access to physical memory ranges mapped into multiple locations of sparse buffers
    | SparseAliasedBit = 0x00000004

[<Flags>]
type VkBufferUsageFlags =
    | All = 511
    | None = 0
    /// Can be used as a source of transfer operations
    | TransferSrcBit = 0x00000001
    /// Can be used as a destination of transfer operations
    | TransferDstBit = 0x00000002
    /// Can be used as TBO
    | UniformTexelBufferBit = 0x00000004
    /// Can be used as IBO
    | StorageTexelBufferBit = 0x00000008
    /// Can be used as UBO
    | UniformBufferBit = 0x00000010
    /// Can be used as SSBO
    | StorageBufferBit = 0x00000020
    /// Can be used as source of fixed-function index fetch (index buffer)
    | IndexBufferBit = 0x00000040
    /// Can be used as source of fixed-function vertex fetch (VBO)
    | VertexBufferBit = 0x00000080
    /// Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)
    | IndirectBufferBit = 0x00000100

type VkSharingMode =
    | Exclusive = 0
    | Concurrent = 1

type VkImageLayout =
    /// Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)
    | Undefined = 0
    /// General layout when image can be used for any kind of access
    | General = 1
    /// Optimal layout when image is only used for color attachment read/write
    | ColorAttachmentOptimal = 2
    /// Optimal layout when image is only used for depth/stencil attachment read/write
    | DepthStencilAttachmentOptimal = 3
    /// Optimal layout when image is used for read only depth/stencil attachment and shader access
    | DepthStencilReadOnlyOptimal = 4
    /// Optimal layout when image is used for read only shader access
    | ShaderReadOnlyOptimal = 5
    /// Optimal layout when image is used only as source of transfer operations
    | TransferSrcOptimal = 6
    /// Optimal layout when image is used only as destination of transfer operations
    | TransferDstOptimal = 7
    /// Initial layout used when the data is populated by the CPU
    | Preinitialized = 8

type VkComponentSwizzle =
    | Identity = 0
    | Zero = 1
    | One = 2
    | R = 3
    | G = 4
    | B = 5
    | A = 6

[<Flags>]
type VkImageViewCreateFlags =
    | All = 0
    | None = 0

type VkImageViewType =
    | D1d = 0
    | D2d = 1
    | D3d = 2
    | Cube = 3
    | D1dArray = 4
    | D2dArray = 5
    | CubeArray = 6

[<Flags>]
type VkShaderModuleCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkPipelineCacheCreateFlags =
    | All = 0
    | None = 0

type VkBlendFactor =
    | Zero = 0
    | One = 1
    | SrcColor = 2
    | OneMinusSrcColor = 3
    | DstColor = 4
    | OneMinusDstColor = 5
    | SrcAlpha = 6
    | OneMinusSrcAlpha = 7
    | DstAlpha = 8
    | OneMinusDstAlpha = 9
    | ConstantColor = 10
    | OneMinusConstantColor = 11
    | ConstantAlpha = 12
    | OneMinusConstantAlpha = 13
    | SrcAlphaSaturate = 14
    | Src1Color = 15
    | OneMinusSrc1Color = 16
    | Src1Alpha = 17
    | OneMinusSrc1Alpha = 18

type VkBlendOp =
    | Add = 0
    | Subtract = 1
    | ReverseSubtract = 2
    | Min = 3
    | Max = 4

[<Flags>]
type VkColorComponentFlags =
    | All = 15
    | None = 0
    | RBit = 0x00000001
    | GBit = 0x00000002
    | BBit = 0x00000004
    | ABit = 0x00000008

type VkCompareOp =
    | Never = 0
    | Less = 1
    | Equal = 2
    | LessOrEqual = 3
    | Greater = 4
    | NotEqual = 5
    | GreaterOrEqual = 6
    | Always = 7

[<Flags>]
type VkCullModeFlags =
    | None = 0
    | FrontBit = 0x00000001
    | BackBit = 0x00000002
    | FrontAndBack = 3

type VkDynamicState =
    | Viewport = 0
    | Scissor = 1
    | LineWidth = 2
    | DepthBias = 3
    | BlendConstants = 4
    | DepthBounds = 5
    | StencilCompareMask = 6
    | StencilWriteMask = 7
    | StencilReference = 8

type VkFrontFace =
    | CounterClockwise = 0
    | Clockwise = 1

type VkLogicOp =
    | Clear = 0
    | And = 1
    | AndReverse = 2
    | Copy = 3
    | AndInverted = 4
    | NoOp = 5
    | Xor = 6
    | Or = 7
    | Nor = 8
    | Equivalent = 9
    | Invert = 10
    | OrReverse = 11
    | CopyInverted = 12
    | OrInverted = 13
    | Nand = 14
    | Set = 15

[<Flags>]
type VkPipelineColorBlendStateCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkPipelineCreateFlags =
    | All = 7
    | None = 0
    | DisableOptimizationBit = 0x00000001
    | AllowDerivativesBit = 0x00000002
    | DerivativeBit = 0x00000004

[<Flags>]
type VkPipelineDepthStencilStateCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkPipelineLayoutCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkPipelineShaderStageCreateFlags =
    | All = 0
    | None = 0

type VkPolygonMode =
    | Fill = 0
    | Line = 1
    | Point = 2

type VkPrimitiveTopology =
    | PointList = 0
    | LineList = 1
    | LineStrip = 2
    | TriangleList = 3
    | TriangleStrip = 4
    | TriangleFan = 5
    | LineListWithAdjacency = 6
    | LineStripWithAdjacency = 7
    | TriangleListWithAdjacency = 8
    | TriangleStripWithAdjacency = 9
    | PatchList = 10

[<Flags>]
type VkShaderStageFlags =
    | None = 0
    | VertexBit = 0x00000001
    | TessellationControlBit = 0x00000002
    | TessellationEvaluationBit = 0x00000004
    | GeometryBit = 0x00000008
    | FragmentBit = 0x00000010
    | ComputeBit = 0x00000020
    | AllGraphics = 31
    | All = 2147483647

type VkStencilOp =
    | Keep = 0
    | Zero = 1
    | Replace = 2
    | IncrementAndClamp = 3
    | DecrementAndClamp = 4
    | Invert = 5
    | IncrementAndWrap = 6
    | DecrementAndWrap = 7

type VkVertexInputRate =
    | Vertex = 0
    | Instance = 1

type VkBorderColor =
    | FloatTransparentBlack = 0
    | IntTransparentBlack = 1
    | FloatOpaqueBlack = 2
    | IntOpaqueBlack = 3
    | FloatOpaqueWhite = 4
    | IntOpaqueWhite = 5

type VkFilter =
    | Nearest = 0
    | Linear = 1

type VkSamplerAddressMode =
    | Repeat = 0
    | MirroredRepeat = 1
    | ClampToEdge = 2
    | ClampToBorder = 3

[<Flags>]
type VkSamplerCreateFlags =
    | All = 0
    | None = 0

type VkSamplerMipmapMode =
    /// Choose nearest mip level
    | Nearest = 0
    /// Linear filter between mip levels
    | Linear = 1

[<Flags>]
type VkDescriptorPoolCreateFlags =
    | All = 1
    | None = 0
    /// Descriptor sets may be freed individually
    | FreeDescriptorSetBit = 0x00000001

[<Flags>]
type VkDescriptorSetLayoutCreateFlags =
    | All = 0
    | None = 0

type VkDescriptorType =
    | Sampler = 0
    | CombinedImageSampler = 1
    | SampledImage = 2
    | StorageImage = 3
    | UniformTexelBuffer = 4
    | StorageTexelBuffer = 5
    | UniformBuffer = 6
    | StorageBuffer = 7
    | UniformBufferDynamic = 8
    | StorageBufferDynamic = 9
    | InputAttachment = 10

[<Flags>]
type VkAccessFlags =
    | All = 131071
    | None = 0
    /// Controls coherency of indirect command reads
    | IndirectCommandReadBit = 0x00000001
    /// Controls coherency of index reads
    | IndexReadBit = 0x00000002
    /// Controls coherency of vertex attribute reads
    | VertexAttributeReadBit = 0x00000004
    /// Controls coherency of uniform buffer reads
    | UniformReadBit = 0x00000008
    /// Controls coherency of input attachment reads
    | InputAttachmentReadBit = 0x00000010
    /// Controls coherency of shader reads
    | ShaderReadBit = 0x00000020
    /// Controls coherency of shader writes
    | ShaderWriteBit = 0x00000040
    /// Controls coherency of color attachment reads
    | ColorAttachmentReadBit = 0x00000080
    /// Controls coherency of color attachment writes
    | ColorAttachmentWriteBit = 0x00000100
    /// Controls coherency of depth/stencil attachment reads
    | DepthStencilAttachmentReadBit = 0x00000200
    /// Controls coherency of depth/stencil attachment writes
    | DepthStencilAttachmentWriteBit = 0x00000400
    /// Controls coherency of transfer reads
    | TransferReadBit = 0x00000800
    /// Controls coherency of transfer writes
    | TransferWriteBit = 0x00001000
    /// Controls coherency of host reads
    | HostReadBit = 0x00002000
    /// Controls coherency of host writes
    | HostWriteBit = 0x00004000
    /// Controls coherency of memory reads
    | MemoryReadBit = 0x00008000
    /// Controls coherency of memory writes
    | MemoryWriteBit = 0x00010000

[<Flags>]
type VkAttachmentDescriptionFlags =
    | All = 1
    | None = 0
    /// The attachment may alias physical memory of another attachment in the same render pass
    | MayAliasBit = 0x00000001

type VkAttachmentLoadOp =
    | Load = 0
    | Clear = 1
    | DontCare = 2

type VkAttachmentStoreOp =
    | Store = 0
    | DontCare = 1

[<Flags>]
type VkDependencyFlags =
    | All = 1
    | None = 0
    /// Dependency is per pixel region
    | ByRegionBit = 0x00000001

[<Flags>]
type VkFramebufferCreateFlags =
    | All = 0
    | None = 0

type VkPipelineBindPoint =
    | Graphics = 0
    | Compute = 1

[<Flags>]
type VkRenderPassCreateFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkSubpassDescriptionFlags =
    | All = 0
    | None = 0

[<Flags>]
type VkCommandPoolCreateFlags =
    | All = 3
    | None = 0
    /// Command buffers have a short lifetime
    | TransientBit = 0x00000001
    /// Command buffers may release their memory individually
    | ResetCommandBufferBit = 0x00000002

[<Flags>]
type VkCommandPoolResetFlags =
    | All = 1
    | None = 0
    /// Release resources owned by the pool
    | ReleaseResourcesBit = 0x00000001

type VkCommandBufferLevel =
    | Primary = 0
    | Secondary = 1

[<Flags>]
type VkCommandBufferResetFlags =
    | All = 1
    | None = 0
    /// Release resources owned by the buffer
    | ReleaseResourcesBit = 0x00000001

[<Flags>]
type VkCommandBufferUsageFlags =
    | All = 7
    | None = 0
    | OneTimeSubmitBit = 0x00000001
    | RenderPassContinueBit = 0x00000002
    /// Command buffer may be submitted/executed more than once simultaneously
    | SimultaneousUseBit = 0x00000004

[<Flags>]
type VkQueryControlFlags =
    | All = 1
    | None = 0
    /// Require precise results to be collected by the query
    | PreciseBit = 0x00000001

type VkIndexType =
    | Uint16 = 0
    | Uint32 = 1

[<Flags>]
type VkStencilFaceFlags =
    | None = 0
    /// Front face
    | FrontBit = 0x00000001
    /// Back face
    | BackBit = 0x00000002
    /// Front and back faces
    | FrontAndBack = 3

type VkSubpassContents =
    | Inline = 0
    | SecondaryCommandBuffers = 1


[<StructLayout(LayoutKind.Sequential)>]
type VkAllocationCallbacks =
    struct
        val mutable public pUserData : nativeint
        val mutable public pfnAllocation : PFN_vkAllocationFunction
        val mutable public pfnReallocation : PFN_vkReallocationFunction
        val mutable public pfnFree : PFN_vkFreeFunction
        val mutable public pfnInternalAllocation : PFN_vkInternalAllocationNotification
        val mutable public pfnInternalFree : PFN_vkInternalFreeNotification

        new(pUserData : nativeint, pfnAllocation : PFN_vkAllocationFunction, pfnReallocation : PFN_vkReallocationFunction, pfnFree : PFN_vkFreeFunction, pfnInternalAllocation : PFN_vkInternalAllocationNotification, pfnInternalFree : PFN_vkInternalFreeNotification) =
            {
                pUserData = pUserData
                pfnAllocation = pfnAllocation
                pfnReallocation = pfnReallocation
                pfnFree = pfnFree
                pfnInternalAllocation = pfnInternalAllocation
                pfnInternalFree = pfnInternalFree
            }

        member x.IsEmpty =
            x.pUserData = Unchecked.defaultof<nativeint> && x.pfnAllocation = Unchecked.defaultof<PFN_vkAllocationFunction> && x.pfnReallocation = Unchecked.defaultof<PFN_vkReallocationFunction> && x.pfnFree = Unchecked.defaultof<PFN_vkFreeFunction> && x.pfnInternalAllocation = Unchecked.defaultof<PFN_vkInternalAllocationNotification> && x.pfnInternalFree = Unchecked.defaultof<PFN_vkInternalFreeNotification>

        static member Empty =
            VkAllocationCallbacks(Unchecked.defaultof<nativeint>, Unchecked.defaultof<PFN_vkAllocationFunction>, Unchecked.defaultof<PFN_vkReallocationFunction>, Unchecked.defaultof<PFN_vkFreeFunction>, Unchecked.defaultof<PFN_vkInternalAllocationNotification>, Unchecked.defaultof<PFN_vkInternalFreeNotification>)

        override x.ToString() =
            String.concat "; " [
                sprintf "pUserData = %A" x.pUserData
                sprintf "pfnAllocation = %A" x.pfnAllocation
                sprintf "pfnReallocation = %A" x.pfnReallocation
                sprintf "pfnFree = %A" x.pfnFree
                sprintf "pfnInternalAllocation = %A" x.pfnInternalAllocation
                sprintf "pfnInternalFree = %A" x.pfnInternalFree
            ] |> sprintf "VkAllocationCallbacks { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkApplicationInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public pApplicationName : cstr
        val mutable public applicationVersion : uint32
        val mutable public pEngineName : cstr
        val mutable public engineVersion : uint32
        val mutable public apiVersion : uint32

        new(pNext : nativeint, pApplicationName : cstr, applicationVersion : uint32, pEngineName : cstr, engineVersion : uint32, apiVersion : uint32) =
            {
                sType = 0u
                pNext = pNext
                pApplicationName = pApplicationName
                applicationVersion = applicationVersion
                pEngineName = pEngineName
                engineVersion = engineVersion
                apiVersion = apiVersion
            }

        new(pApplicationName : cstr, applicationVersion : uint32, pEngineName : cstr, engineVersion : uint32, apiVersion : uint32) =
            VkApplicationInfo(Unchecked.defaultof<nativeint>, pApplicationName, applicationVersion, pEngineName, engineVersion, apiVersion)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.pApplicationName = Unchecked.defaultof<cstr> && x.applicationVersion = Unchecked.defaultof<uint32> && x.pEngineName = Unchecked.defaultof<cstr> && x.engineVersion = Unchecked.defaultof<uint32> && x.apiVersion = Unchecked.defaultof<uint32>

        static member Empty =
            VkApplicationInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>, Unchecked.defaultof<uint32>, Unchecked.defaultof<cstr>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "pApplicationName = %A" x.pApplicationName
                sprintf "applicationVersion = %A" x.applicationVersion
                sprintf "pEngineName = %A" x.pEngineName
                sprintf "engineVersion = %A" x.engineVersion
                sprintf "apiVersion = %A" x.apiVersion
            ] |> sprintf "VkApplicationInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkAttachmentDescription =
    struct
        val mutable public flags : VkAttachmentDescriptionFlags
        val mutable public format : VkFormat
        val mutable public samples : VkSampleCountFlags
        val mutable public loadOp : VkAttachmentLoadOp
        val mutable public storeOp : VkAttachmentStoreOp
        val mutable public stencilLoadOp : VkAttachmentLoadOp
        val mutable public stencilStoreOp : VkAttachmentStoreOp
        val mutable public initialLayout : VkImageLayout
        val mutable public finalLayout : VkImageLayout

        new(flags : VkAttachmentDescriptionFlags, format : VkFormat, samples : VkSampleCountFlags, loadOp : VkAttachmentLoadOp, storeOp : VkAttachmentStoreOp, stencilLoadOp : VkAttachmentLoadOp, stencilStoreOp : VkAttachmentStoreOp, initialLayout : VkImageLayout, finalLayout : VkImageLayout) =
            {
                flags = flags
                format = format
                samples = samples
                loadOp = loadOp
                storeOp = storeOp
                stencilLoadOp = stencilLoadOp
                stencilStoreOp = stencilStoreOp
                initialLayout = initialLayout
                finalLayout = finalLayout
            }

        member x.IsEmpty =
            x.flags = Unchecked.defaultof<VkAttachmentDescriptionFlags> && x.format = Unchecked.defaultof<VkFormat> && x.samples = Unchecked.defaultof<VkSampleCountFlags> && x.loadOp = Unchecked.defaultof<VkAttachmentLoadOp> && x.storeOp = Unchecked.defaultof<VkAttachmentStoreOp> && x.stencilLoadOp = Unchecked.defaultof<VkAttachmentLoadOp> && x.stencilStoreOp = Unchecked.defaultof<VkAttachmentStoreOp> && x.initialLayout = Unchecked.defaultof<VkImageLayout> && x.finalLayout = Unchecked.defaultof<VkImageLayout>

        static member Empty =
            VkAttachmentDescription(Unchecked.defaultof<VkAttachmentDescriptionFlags>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkAttachmentLoadOp>, Unchecked.defaultof<VkAttachmentStoreOp>, Unchecked.defaultof<VkAttachmentLoadOp>, Unchecked.defaultof<VkAttachmentStoreOp>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageLayout>)

        override x.ToString() =
            String.concat "; " [
                sprintf "flags = %A" x.flags
                sprintf "format = %A" x.format
                sprintf "samples = %A" x.samples
                sprintf "loadOp = %A" x.loadOp
                sprintf "storeOp = %A" x.storeOp
                sprintf "stencilLoadOp = %A" x.stencilLoadOp
                sprintf "stencilStoreOp = %A" x.stencilStoreOp
                sprintf "initialLayout = %A" x.initialLayout
                sprintf "finalLayout = %A" x.finalLayout
            ] |> sprintf "VkAttachmentDescription { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkAttachmentReference =
    struct
        val mutable public attachment : uint32
        val mutable public layout : VkImageLayout

        new(attachment : uint32, layout : VkImageLayout) =
            {
                attachment = attachment
                layout = layout
            }

        member x.IsEmpty =
            x.attachment = Unchecked.defaultof<uint32> && x.layout = Unchecked.defaultof<VkImageLayout>

        static member Empty =
            VkAttachmentReference(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageLayout>)

        override x.ToString() =
            String.concat "; " [
                sprintf "attachment = %A" x.attachment
                sprintf "layout = %A" x.layout
            ] |> sprintf "VkAttachmentReference { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBaseInStructure =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeptr<VkBaseInStructure>

        new(sType : uint32, pNext : nativeptr<VkBaseInStructure>) =
            {
                sType = sType
                pNext = pNext
            }

        member x.IsEmpty =
            x.sType = Unchecked.defaultof<uint32> && x.pNext = Unchecked.defaultof<nativeptr<VkBaseInStructure>>

        static member Empty =
            VkBaseInStructure(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBaseInStructure>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
            ] |> sprintf "VkBaseInStructure { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBaseOutStructure =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeptr<VkBaseOutStructure>

        new(sType : uint32, pNext : nativeptr<VkBaseOutStructure>) =
            {
                sType = sType
                pNext = pNext
            }

        member x.IsEmpty =
            x.sType = Unchecked.defaultof<uint32> && x.pNext = Unchecked.defaultof<nativeptr<VkBaseOutStructure>>

        static member Empty =
            VkBaseOutStructure(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBaseOutStructure>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
            ] |> sprintf "VkBaseOutStructure { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseMemoryBind =
    struct
        val mutable public resourceOffset : VkDeviceSize
        val mutable public size : VkDeviceSize
        val mutable public memory : VkDeviceMemory
        val mutable public memoryOffset : VkDeviceSize
        val mutable public flags : VkSparseMemoryBindFlags

        new(resourceOffset : VkDeviceSize, size : VkDeviceSize, memory : VkDeviceMemory, memoryOffset : VkDeviceSize, flags : VkSparseMemoryBindFlags) =
            {
                resourceOffset = resourceOffset
                size = size
                memory = memory
                memoryOffset = memoryOffset
                flags = flags
            }

        member x.IsEmpty =
            x.resourceOffset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.memoryOffset = Unchecked.defaultof<VkDeviceSize> && x.flags = Unchecked.defaultof<VkSparseMemoryBindFlags>

        static member Empty =
            VkSparseMemoryBind(Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkSparseMemoryBindFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "resourceOffset = %A" x.resourceOffset
                sprintf "size = %A" x.size
                sprintf "memory = %A" x.memory
                sprintf "memoryOffset = %A" x.memoryOffset
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkSparseMemoryBind { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseBufferMemoryBindInfo =
    struct
        val mutable public buffer : VkBuffer
        val mutable public bindCount : uint32
        val mutable public pBinds : nativeptr<VkSparseMemoryBind>

        new(buffer : VkBuffer, bindCount : uint32, pBinds : nativeptr<VkSparseMemoryBind>) =
            {
                buffer = buffer
                bindCount = bindCount
                pBinds = pBinds
            }

        member x.IsEmpty =
            x.buffer = Unchecked.defaultof<VkBuffer> && x.bindCount = Unchecked.defaultof<uint32> && x.pBinds = Unchecked.defaultof<nativeptr<VkSparseMemoryBind>>

        static member Empty =
            VkSparseBufferMemoryBindInfo(Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSparseMemoryBind>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "buffer = %A" x.buffer
                sprintf "bindCount = %A" x.bindCount
                sprintf "pBinds = %A" x.pBinds
            ] |> sprintf "VkSparseBufferMemoryBindInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseImageOpaqueMemoryBindInfo =
    struct
        val mutable public image : VkImage
        val mutable public bindCount : uint32
        val mutable public pBinds : nativeptr<VkSparseMemoryBind>

        new(image : VkImage, bindCount : uint32, pBinds : nativeptr<VkSparseMemoryBind>) =
            {
                image = image
                bindCount = bindCount
                pBinds = pBinds
            }

        member x.IsEmpty =
            x.image = Unchecked.defaultof<VkImage> && x.bindCount = Unchecked.defaultof<uint32> && x.pBinds = Unchecked.defaultof<nativeptr<VkSparseMemoryBind>>

        static member Empty =
            VkSparseImageOpaqueMemoryBindInfo(Unchecked.defaultof<VkImage>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSparseMemoryBind>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "image = %A" x.image
                sprintf "bindCount = %A" x.bindCount
                sprintf "pBinds = %A" x.pBinds
            ] |> sprintf "VkSparseImageOpaqueMemoryBindInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageSubresource =
    struct
        val mutable public aspectMask : VkImageAspectFlags
        val mutable public mipLevel : uint32
        val mutable public arrayLayer : uint32

        new(aspectMask : VkImageAspectFlags, mipLevel : uint32, arrayLayer : uint32) =
            {
                aspectMask = aspectMask
                mipLevel = mipLevel
                arrayLayer = arrayLayer
            }

        member x.IsEmpty =
            x.aspectMask = Unchecked.defaultof<VkImageAspectFlags> && x.mipLevel = Unchecked.defaultof<uint32> && x.arrayLayer = Unchecked.defaultof<uint32>

        static member Empty =
            VkImageSubresource(Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "aspectMask = %A" x.aspectMask
                sprintf "mipLevel = %A" x.mipLevel
                sprintf "arrayLayer = %A" x.arrayLayer
            ] |> sprintf "VkImageSubresource { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkOffset3D =
    struct
        val mutable public x : int
        val mutable public y : int
        val mutable public z : int

        new(x : int, y : int, z : int) =
            {
                x = x
                y = y
                z = z
            }

        member x.IsEmpty =
            x.x = Unchecked.defaultof<int> && x.y = Unchecked.defaultof<int> && x.z = Unchecked.defaultof<int>

        static member Empty =
            VkOffset3D(Unchecked.defaultof<int>, Unchecked.defaultof<int>, Unchecked.defaultof<int>)

        override x.ToString() =
            String.concat "; " [
                sprintf "x = %A" x.x
                sprintf "y = %A" x.y
                sprintf "z = %A" x.z
            ] |> sprintf "VkOffset3D { %s }"
    end

[<StructLayout(LayoutKind.Explicit, Size = 24)>]
type VkOffset3D_2 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : VkOffset3D

        member x.Item
            with get (i : int) : VkOffset3D =
                if i < 0 || i > 1 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : VkOffset3D) =
                if i < 0 || i > 1 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 2

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 2 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<VkOffset3D> with
            member x.GetEnumerator() = let x = x in (Seq.init 2 (fun i -> x.[i])).GetEnumerator()
    end
[<StructLayout(LayoutKind.Sequential)>]
type VkExtent3D =
    struct
        val mutable public width : uint32
        val mutable public height : uint32
        val mutable public depth : uint32

        new(width : uint32, height : uint32, depth : uint32) =
            {
                width = width
                height = height
                depth = depth
            }

        member x.IsEmpty =
            x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32> && x.depth = Unchecked.defaultof<uint32>

        static member Empty =
            VkExtent3D(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        new(w : int, h : int, d : int) = VkExtent3D(uint32 w, uint32 h, uint32 d)

        override x.ToString() =
            String.concat "; " [
                sprintf "width = %A" x.width
                sprintf "height = %A" x.height
                sprintf "depth = %A" x.depth
            ] |> sprintf "VkExtent3D { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseImageMemoryBind =
    struct
        val mutable public subresource : VkImageSubresource
        val mutable public offset : VkOffset3D
        val mutable public extent : VkExtent3D
        val mutable public memory : VkDeviceMemory
        val mutable public memoryOffset : VkDeviceSize
        val mutable public flags : VkSparseMemoryBindFlags

        new(subresource : VkImageSubresource, offset : VkOffset3D, extent : VkExtent3D, memory : VkDeviceMemory, memoryOffset : VkDeviceSize, flags : VkSparseMemoryBindFlags) =
            {
                subresource = subresource
                offset = offset
                extent = extent
                memory = memory
                memoryOffset = memoryOffset
                flags = flags
            }

        member x.IsEmpty =
            x.subresource = Unchecked.defaultof<VkImageSubresource> && x.offset = Unchecked.defaultof<VkOffset3D> && x.extent = Unchecked.defaultof<VkExtent3D> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.memoryOffset = Unchecked.defaultof<VkDeviceSize> && x.flags = Unchecked.defaultof<VkSparseMemoryBindFlags>

        static member Empty =
            VkSparseImageMemoryBind(Unchecked.defaultof<VkImageSubresource>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkSparseMemoryBindFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "subresource = %A" x.subresource
                sprintf "offset = %A" x.offset
                sprintf "extent = %A" x.extent
                sprintf "memory = %A" x.memory
                sprintf "memoryOffset = %A" x.memoryOffset
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkSparseImageMemoryBind { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseImageMemoryBindInfo =
    struct
        val mutable public image : VkImage
        val mutable public bindCount : uint32
        val mutable public pBinds : nativeptr<VkSparseImageMemoryBind>

        new(image : VkImage, bindCount : uint32, pBinds : nativeptr<VkSparseImageMemoryBind>) =
            {
                image = image
                bindCount = bindCount
                pBinds = pBinds
            }

        member x.IsEmpty =
            x.image = Unchecked.defaultof<VkImage> && x.bindCount = Unchecked.defaultof<uint32> && x.pBinds = Unchecked.defaultof<nativeptr<VkSparseImageMemoryBind>>

        static member Empty =
            VkSparseImageMemoryBindInfo(Unchecked.defaultof<VkImage>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSparseImageMemoryBind>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "image = %A" x.image
                sprintf "bindCount = %A" x.bindCount
                sprintf "pBinds = %A" x.pBinds
            ] |> sprintf "VkSparseImageMemoryBindInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBindSparseInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public waitSemaphoreCount : uint32
        val mutable public pWaitSemaphores : nativeptr<VkSemaphore>
        val mutable public bufferBindCount : uint32
        val mutable public pBufferBinds : nativeptr<VkSparseBufferMemoryBindInfo>
        val mutable public imageOpaqueBindCount : uint32
        val mutable public pImageOpaqueBinds : nativeptr<VkSparseImageOpaqueMemoryBindInfo>
        val mutable public imageBindCount : uint32
        val mutable public pImageBinds : nativeptr<VkSparseImageMemoryBindInfo>
        val mutable public signalSemaphoreCount : uint32
        val mutable public pSignalSemaphores : nativeptr<VkSemaphore>

        new(pNext : nativeint, waitSemaphoreCount : uint32, pWaitSemaphores : nativeptr<VkSemaphore>, bufferBindCount : uint32, pBufferBinds : nativeptr<VkSparseBufferMemoryBindInfo>, imageOpaqueBindCount : uint32, pImageOpaqueBinds : nativeptr<VkSparseImageOpaqueMemoryBindInfo>, imageBindCount : uint32, pImageBinds : nativeptr<VkSparseImageMemoryBindInfo>, signalSemaphoreCount : uint32, pSignalSemaphores : nativeptr<VkSemaphore>) =
            {
                sType = 7u
                pNext = pNext
                waitSemaphoreCount = waitSemaphoreCount
                pWaitSemaphores = pWaitSemaphores
                bufferBindCount = bufferBindCount
                pBufferBinds = pBufferBinds
                imageOpaqueBindCount = imageOpaqueBindCount
                pImageOpaqueBinds = pImageOpaqueBinds
                imageBindCount = imageBindCount
                pImageBinds = pImageBinds
                signalSemaphoreCount = signalSemaphoreCount
                pSignalSemaphores = pSignalSemaphores
            }

        new(waitSemaphoreCount : uint32, pWaitSemaphores : nativeptr<VkSemaphore>, bufferBindCount : uint32, pBufferBinds : nativeptr<VkSparseBufferMemoryBindInfo>, imageOpaqueBindCount : uint32, pImageOpaqueBinds : nativeptr<VkSparseImageOpaqueMemoryBindInfo>, imageBindCount : uint32, pImageBinds : nativeptr<VkSparseImageMemoryBindInfo>, signalSemaphoreCount : uint32, pSignalSemaphores : nativeptr<VkSemaphore>) =
            VkBindSparseInfo(Unchecked.defaultof<nativeint>, waitSemaphoreCount, pWaitSemaphores, bufferBindCount, pBufferBinds, imageOpaqueBindCount, pImageOpaqueBinds, imageBindCount, pImageBinds, signalSemaphoreCount, pSignalSemaphores)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.waitSemaphoreCount = Unchecked.defaultof<uint32> && x.pWaitSemaphores = Unchecked.defaultof<nativeptr<VkSemaphore>> && x.bufferBindCount = Unchecked.defaultof<uint32> && x.pBufferBinds = Unchecked.defaultof<nativeptr<VkSparseBufferMemoryBindInfo>> && x.imageOpaqueBindCount = Unchecked.defaultof<uint32> && x.pImageOpaqueBinds = Unchecked.defaultof<nativeptr<VkSparseImageOpaqueMemoryBindInfo>> && x.imageBindCount = Unchecked.defaultof<uint32> && x.pImageBinds = Unchecked.defaultof<nativeptr<VkSparseImageMemoryBindInfo>> && x.signalSemaphoreCount = Unchecked.defaultof<uint32> && x.pSignalSemaphores = Unchecked.defaultof<nativeptr<VkSemaphore>>

        static member Empty =
            VkBindSparseInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphore>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSparseBufferMemoryBindInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSparseImageOpaqueMemoryBindInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSparseImageMemoryBindInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphore>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "waitSemaphoreCount = %A" x.waitSemaphoreCount
                sprintf "pWaitSemaphores = %A" x.pWaitSemaphores
                sprintf "bufferBindCount = %A" x.bufferBindCount
                sprintf "pBufferBinds = %A" x.pBufferBinds
                sprintf "imageOpaqueBindCount = %A" x.imageOpaqueBindCount
                sprintf "pImageOpaqueBinds = %A" x.pImageOpaqueBinds
                sprintf "imageBindCount = %A" x.imageBindCount
                sprintf "pImageBinds = %A" x.pImageBinds
                sprintf "signalSemaphoreCount = %A" x.signalSemaphoreCount
                sprintf "pSignalSemaphores = %A" x.pSignalSemaphores
            ] |> sprintf "VkBindSparseInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBufferCopy =
    struct
        val mutable public srcOffset : VkDeviceSize
        val mutable public dstOffset : VkDeviceSize
        val mutable public size : VkDeviceSize

        new(srcOffset : VkDeviceSize, dstOffset : VkDeviceSize, size : VkDeviceSize) =
            {
                srcOffset = srcOffset
                dstOffset = dstOffset
                size = size
            }

        member x.IsEmpty =
            x.srcOffset = Unchecked.defaultof<VkDeviceSize> && x.dstOffset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkBufferCopy(Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "srcOffset = %A" x.srcOffset
                sprintf "dstOffset = %A" x.dstOffset
                sprintf "size = %A" x.size
            ] |> sprintf "VkBufferCopy { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBufferCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkBufferCreateFlags
        val mutable public size : VkDeviceSize
        val mutable public usage : VkBufferUsageFlags
        val mutable public sharingMode : VkSharingMode
        val mutable public queueFamilyIndexCount : uint32
        val mutable public pQueueFamilyIndices : nativeptr<uint32>

        new(pNext : nativeint, flags : VkBufferCreateFlags, size : VkDeviceSize, usage : VkBufferUsageFlags, sharingMode : VkSharingMode, queueFamilyIndexCount : uint32, pQueueFamilyIndices : nativeptr<uint32>) =
            {
                sType = 12u
                pNext = pNext
                flags = flags
                size = size
                usage = usage
                sharingMode = sharingMode
                queueFamilyIndexCount = queueFamilyIndexCount
                pQueueFamilyIndices = pQueueFamilyIndices
            }

        new(flags : VkBufferCreateFlags, size : VkDeviceSize, usage : VkBufferUsageFlags, sharingMode : VkSharingMode, queueFamilyIndexCount : uint32, pQueueFamilyIndices : nativeptr<uint32>) =
            VkBufferCreateInfo(Unchecked.defaultof<nativeint>, flags, size, usage, sharingMode, queueFamilyIndexCount, pQueueFamilyIndices)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkBufferCreateFlags> && x.size = Unchecked.defaultof<VkDeviceSize> && x.usage = Unchecked.defaultof<VkBufferUsageFlags> && x.sharingMode = Unchecked.defaultof<VkSharingMode> && x.queueFamilyIndexCount = Unchecked.defaultof<uint32> && x.pQueueFamilyIndices = Unchecked.defaultof<nativeptr<uint32>>

        static member Empty =
            VkBufferCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferCreateFlags>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBufferUsageFlags>, Unchecked.defaultof<VkSharingMode>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "size = %A" x.size
                sprintf "usage = %A" x.usage
                sprintf "sharingMode = %A" x.sharingMode
                sprintf "queueFamilyIndexCount = %A" x.queueFamilyIndexCount
                sprintf "pQueueFamilyIndices = %A" x.pQueueFamilyIndices
            ] |> sprintf "VkBufferCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageSubresourceLayers =
    struct
        val mutable public aspectMask : VkImageAspectFlags
        val mutable public mipLevel : uint32
        val mutable public baseArrayLayer : uint32
        val mutable public layerCount : uint32

        new(aspectMask : VkImageAspectFlags, mipLevel : uint32, baseArrayLayer : uint32, layerCount : uint32) =
            {
                aspectMask = aspectMask
                mipLevel = mipLevel
                baseArrayLayer = baseArrayLayer
                layerCount = layerCount
            }

        member x.IsEmpty =
            x.aspectMask = Unchecked.defaultof<VkImageAspectFlags> && x.mipLevel = Unchecked.defaultof<uint32> && x.baseArrayLayer = Unchecked.defaultof<uint32> && x.layerCount = Unchecked.defaultof<uint32>

        static member Empty =
            VkImageSubresourceLayers(Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "aspectMask = %A" x.aspectMask
                sprintf "mipLevel = %A" x.mipLevel
                sprintf "baseArrayLayer = %A" x.baseArrayLayer
                sprintf "layerCount = %A" x.layerCount
            ] |> sprintf "VkImageSubresourceLayers { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBufferImageCopy =
    struct
        val mutable public bufferOffset : VkDeviceSize
        val mutable public bufferRowLength : uint32
        val mutable public bufferImageHeight : uint32
        val mutable public imageSubresource : VkImageSubresourceLayers
        val mutable public imageOffset : VkOffset3D
        val mutable public imageExtent : VkExtent3D

        new(bufferOffset : VkDeviceSize, bufferRowLength : uint32, bufferImageHeight : uint32, imageSubresource : VkImageSubresourceLayers, imageOffset : VkOffset3D, imageExtent : VkExtent3D) =
            {
                bufferOffset = bufferOffset
                bufferRowLength = bufferRowLength
                bufferImageHeight = bufferImageHeight
                imageSubresource = imageSubresource
                imageOffset = imageOffset
                imageExtent = imageExtent
            }

        member x.IsEmpty =
            x.bufferOffset = Unchecked.defaultof<VkDeviceSize> && x.bufferRowLength = Unchecked.defaultof<uint32> && x.bufferImageHeight = Unchecked.defaultof<uint32> && x.imageSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.imageOffset = Unchecked.defaultof<VkOffset3D> && x.imageExtent = Unchecked.defaultof<VkExtent3D>

        static member Empty =
            VkBufferImageCopy(Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

        override x.ToString() =
            String.concat "; " [
                sprintf "bufferOffset = %A" x.bufferOffset
                sprintf "bufferRowLength = %A" x.bufferRowLength
                sprintf "bufferImageHeight = %A" x.bufferImageHeight
                sprintf "imageSubresource = %A" x.imageSubresource
                sprintf "imageOffset = %A" x.imageOffset
                sprintf "imageExtent = %A" x.imageExtent
            ] |> sprintf "VkBufferImageCopy { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBufferMemoryBarrier =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public srcAccessMask : VkAccessFlags
        val mutable public dstAccessMask : VkAccessFlags
        val mutable public srcQueueFamilyIndex : uint32
        val mutable public dstQueueFamilyIndex : uint32
        val mutable public buffer : VkBuffer
        val mutable public offset : VkDeviceSize
        val mutable public size : VkDeviceSize

        new(pNext : nativeint, srcAccessMask : VkAccessFlags, dstAccessMask : VkAccessFlags, srcQueueFamilyIndex : uint32, dstQueueFamilyIndex : uint32, buffer : VkBuffer, offset : VkDeviceSize, size : VkDeviceSize) =
            {
                sType = 44u
                pNext = pNext
                srcAccessMask = srcAccessMask
                dstAccessMask = dstAccessMask
                srcQueueFamilyIndex = srcQueueFamilyIndex
                dstQueueFamilyIndex = dstQueueFamilyIndex
                buffer = buffer
                offset = offset
                size = size
            }

        new(srcAccessMask : VkAccessFlags, dstAccessMask : VkAccessFlags, srcQueueFamilyIndex : uint32, dstQueueFamilyIndex : uint32, buffer : VkBuffer, offset : VkDeviceSize, size : VkDeviceSize) =
            VkBufferMemoryBarrier(Unchecked.defaultof<nativeint>, srcAccessMask, dstAccessMask, srcQueueFamilyIndex, dstQueueFamilyIndex, buffer, offset, size)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags> && x.srcQueueFamilyIndex = Unchecked.defaultof<uint32> && x.dstQueueFamilyIndex = Unchecked.defaultof<uint32> && x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkBufferMemoryBarrier(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "srcAccessMask = %A" x.srcAccessMask
                sprintf "dstAccessMask = %A" x.dstAccessMask
                sprintf "srcQueueFamilyIndex = %A" x.srcQueueFamilyIndex
                sprintf "dstQueueFamilyIndex = %A" x.dstQueueFamilyIndex
                sprintf "buffer = %A" x.buffer
                sprintf "offset = %A" x.offset
                sprintf "size = %A" x.size
            ] |> sprintf "VkBufferMemoryBarrier { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkBufferViewCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkBufferViewCreateFlags
        val mutable public buffer : VkBuffer
        val mutable public format : VkFormat
        val mutable public offset : VkDeviceSize
        val mutable public range : VkDeviceSize

        new(pNext : nativeint, flags : VkBufferViewCreateFlags, buffer : VkBuffer, format : VkFormat, offset : VkDeviceSize, range : VkDeviceSize) =
            {
                sType = 13u
                pNext = pNext
                flags = flags
                buffer = buffer
                format = format
                offset = offset
                range = range
            }

        new(flags : VkBufferViewCreateFlags, buffer : VkBuffer, format : VkFormat, offset : VkDeviceSize, range : VkDeviceSize) =
            VkBufferViewCreateInfo(Unchecked.defaultof<nativeint>, flags, buffer, format, offset, range)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkBufferViewCreateFlags> && x.buffer = Unchecked.defaultof<VkBuffer> && x.format = Unchecked.defaultof<VkFormat> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.range = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkBufferViewCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferViewCreateFlags>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "buffer = %A" x.buffer
                sprintf "format = %A" x.format
                sprintf "offset = %A" x.offset
                sprintf "range = %A" x.range
            ] |> sprintf "VkBufferViewCreateInfo { %s }"
    end

/// Union allowing specification of floating point, integer, or unsigned integer color data. Actual value selected is based on image/attachment being cleared.
[<StructLayout(LayoutKind.Explicit)>]
type VkClearColorValue =
    struct
        [<FieldOffset(0)>]
        val mutable public float32 : V4f
        [<FieldOffset(0)>]
        val mutable public int32 : V4i
        [<FieldOffset(0)>]
        val mutable public uint32 : V4ui

        static member Float32(value : V4f) =
            let mutable result = Unchecked.defaultof<VkClearColorValue>
            result.float32 <- value
            result

        static member Int32(value : V4i) =
            let mutable result = Unchecked.defaultof<VkClearColorValue>
            result.int32 <- value
            result

        static member Uint32(value : V4ui) =
            let mutable result = Unchecked.defaultof<VkClearColorValue>
            result.uint32 <- value
            result

        override x.ToString() =
            String.concat "; " [
                sprintf "float32 = %A" x.float32
                sprintf "int32 = %A" x.int32
                sprintf "uint32 = %A" x.uint32
            ] |> sprintf "VkClearColorValue { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkClearDepthStencilValue =
    struct
        val mutable public depth : float32
        val mutable public stencil : uint32

        new(depth : float32, stencil : uint32) =
            {
                depth = depth
                stencil = stencil
            }

        member x.IsEmpty =
            x.depth = Unchecked.defaultof<float32> && x.stencil = Unchecked.defaultof<uint32>

        static member Empty =
            VkClearDepthStencilValue(Unchecked.defaultof<float32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "depth = %A" x.depth
                sprintf "stencil = %A" x.stencil
            ] |> sprintf "VkClearDepthStencilValue { %s }"
    end

/// Union allowing specification of color or depth and stencil values. Actual value selected is based on attachment being cleared.
[<StructLayout(LayoutKind.Explicit)>]
type VkClearValue =
    struct
        [<FieldOffset(0)>]
        val mutable public color : VkClearColorValue
        [<FieldOffset(0)>]
        val mutable public depthStencil : VkClearDepthStencilValue

        static member Color(value : VkClearColorValue) =
            let mutable result = Unchecked.defaultof<VkClearValue>
            result.color <- value
            result

        static member DepthStencil(value : VkClearDepthStencilValue) =
            let mutable result = Unchecked.defaultof<VkClearValue>
            result.depthStencil <- value
            result

        override x.ToString() =
            String.concat "; " [
                sprintf "color = %A" x.color
                sprintf "depthStencil = %A" x.depthStencil
            ] |> sprintf "VkClearValue { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkClearAttachment =
    struct
        val mutable public aspectMask : VkImageAspectFlags
        val mutable public colorAttachment : uint32
        val mutable public clearValue : VkClearValue

        new(aspectMask : VkImageAspectFlags, colorAttachment : uint32, clearValue : VkClearValue) =
            {
                aspectMask = aspectMask
                colorAttachment = colorAttachment
                clearValue = clearValue
            }

        member x.IsEmpty =
            x.aspectMask = Unchecked.defaultof<VkImageAspectFlags> && x.colorAttachment = Unchecked.defaultof<uint32> && x.clearValue = Unchecked.defaultof<VkClearValue>

        static member Empty =
            VkClearAttachment(Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkClearValue>)

        override x.ToString() =
            String.concat "; " [
                sprintf "aspectMask = %A" x.aspectMask
                sprintf "colorAttachment = %A" x.colorAttachment
                sprintf "clearValue = %A" x.clearValue
            ] |> sprintf "VkClearAttachment { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkOffset2D =
    struct
        val mutable public x : int
        val mutable public y : int

        new(x : int, y : int) =
            {
                x = x
                y = y
            }

        member x.IsEmpty =
            x.x = Unchecked.defaultof<int> && x.y = Unchecked.defaultof<int>

        static member Empty =
            VkOffset2D(Unchecked.defaultof<int>, Unchecked.defaultof<int>)

        override x.ToString() =
            String.concat "; " [
                sprintf "x = %A" x.x
                sprintf "y = %A" x.y
            ] |> sprintf "VkOffset2D { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkExtent2D =
    struct
        val mutable public width : uint32
        val mutable public height : uint32

        new(width : uint32, height : uint32) =
            {
                width = width
                height = height
            }

        member x.IsEmpty =
            x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32>

        static member Empty =
            VkExtent2D(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        new(w : int, h : int) = VkExtent2D(uint32 w, uint32 h)

        override x.ToString() =
            String.concat "; " [
                sprintf "width = %A" x.width
                sprintf "height = %A" x.height
            ] |> sprintf "VkExtent2D { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkRect2D =
    struct
        val mutable public offset : VkOffset2D
        val mutable public extent : VkExtent2D

        new(offset : VkOffset2D, extent : VkExtent2D) =
            {
                offset = offset
                extent = extent
            }

        member x.IsEmpty =
            x.offset = Unchecked.defaultof<VkOffset2D> && x.extent = Unchecked.defaultof<VkExtent2D>

        static member Empty =
            VkRect2D(Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkExtent2D>)

        override x.ToString() =
            String.concat "; " [
                sprintf "offset = %A" x.offset
                sprintf "extent = %A" x.extent
            ] |> sprintf "VkRect2D { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkClearRect =
    struct
        val mutable public rect : VkRect2D
        val mutable public baseArrayLayer : uint32
        val mutable public layerCount : uint32

        new(rect : VkRect2D, baseArrayLayer : uint32, layerCount : uint32) =
            {
                rect = rect
                baseArrayLayer = baseArrayLayer
                layerCount = layerCount
            }

        member x.IsEmpty =
            x.rect = Unchecked.defaultof<VkRect2D> && x.baseArrayLayer = Unchecked.defaultof<uint32> && x.layerCount = Unchecked.defaultof<uint32>

        static member Empty =
            VkClearRect(Unchecked.defaultof<VkRect2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "rect = %A" x.rect
                sprintf "baseArrayLayer = %A" x.baseArrayLayer
                sprintf "layerCount = %A" x.layerCount
            ] |> sprintf "VkClearRect { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkCommandBufferAllocateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public commandPool : VkCommandPool
        val mutable public level : VkCommandBufferLevel
        val mutable public commandBufferCount : uint32

        new(pNext : nativeint, commandPool : VkCommandPool, level : VkCommandBufferLevel, commandBufferCount : uint32) =
            {
                sType = 40u
                pNext = pNext
                commandPool = commandPool
                level = level
                commandBufferCount = commandBufferCount
            }

        new(commandPool : VkCommandPool, level : VkCommandBufferLevel, commandBufferCount : uint32) =
            VkCommandBufferAllocateInfo(Unchecked.defaultof<nativeint>, commandPool, level, commandBufferCount)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.commandPool = Unchecked.defaultof<VkCommandPool> && x.level = Unchecked.defaultof<VkCommandBufferLevel> && x.commandBufferCount = Unchecked.defaultof<uint32>

        static member Empty =
            VkCommandBufferAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCommandPool>, Unchecked.defaultof<VkCommandBufferLevel>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "commandPool = %A" x.commandPool
                sprintf "level = %A" x.level
                sprintf "commandBufferCount = %A" x.commandBufferCount
            ] |> sprintf "VkCommandBufferAllocateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkCommandBufferInheritanceInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public renderPass : VkRenderPass
        val mutable public subpass : uint32
        val mutable public framebuffer : VkFramebuffer
        val mutable public occlusionQueryEnable : VkBool32
        val mutable public queryFlags : VkQueryControlFlags
        val mutable public pipelineStatistics : VkQueryPipelineStatisticFlags

        new(pNext : nativeint, renderPass : VkRenderPass, subpass : uint32, framebuffer : VkFramebuffer, occlusionQueryEnable : VkBool32, queryFlags : VkQueryControlFlags, pipelineStatistics : VkQueryPipelineStatisticFlags) =
            {
                sType = 41u
                pNext = pNext
                renderPass = renderPass
                subpass = subpass
                framebuffer = framebuffer
                occlusionQueryEnable = occlusionQueryEnable
                queryFlags = queryFlags
                pipelineStatistics = pipelineStatistics
            }

        new(renderPass : VkRenderPass, subpass : uint32, framebuffer : VkFramebuffer, occlusionQueryEnable : VkBool32, queryFlags : VkQueryControlFlags, pipelineStatistics : VkQueryPipelineStatisticFlags) =
            VkCommandBufferInheritanceInfo(Unchecked.defaultof<nativeint>, renderPass, subpass, framebuffer, occlusionQueryEnable, queryFlags, pipelineStatistics)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.renderPass = Unchecked.defaultof<VkRenderPass> && x.subpass = Unchecked.defaultof<uint32> && x.framebuffer = Unchecked.defaultof<VkFramebuffer> && x.occlusionQueryEnable = Unchecked.defaultof<VkBool32> && x.queryFlags = Unchecked.defaultof<VkQueryControlFlags> && x.pipelineStatistics = Unchecked.defaultof<VkQueryPipelineStatisticFlags>

        static member Empty =
            VkCommandBufferInheritanceInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderPass>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkFramebuffer>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkQueryControlFlags>, Unchecked.defaultof<VkQueryPipelineStatisticFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "renderPass = %A" x.renderPass
                sprintf "subpass = %A" x.subpass
                sprintf "framebuffer = %A" x.framebuffer
                sprintf "occlusionQueryEnable = %A" x.occlusionQueryEnable
                sprintf "queryFlags = %A" x.queryFlags
                sprintf "pipelineStatistics = %A" x.pipelineStatistics
            ] |> sprintf "VkCommandBufferInheritanceInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkCommandBufferBeginInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkCommandBufferUsageFlags
        val mutable public pInheritanceInfo : nativeptr<VkCommandBufferInheritanceInfo>

        new(pNext : nativeint, flags : VkCommandBufferUsageFlags, pInheritanceInfo : nativeptr<VkCommandBufferInheritanceInfo>) =
            {
                sType = 42u
                pNext = pNext
                flags = flags
                pInheritanceInfo = pInheritanceInfo
            }

        new(flags : VkCommandBufferUsageFlags, pInheritanceInfo : nativeptr<VkCommandBufferInheritanceInfo>) =
            VkCommandBufferBeginInfo(Unchecked.defaultof<nativeint>, flags, pInheritanceInfo)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkCommandBufferUsageFlags> && x.pInheritanceInfo = Unchecked.defaultof<nativeptr<VkCommandBufferInheritanceInfo>>

        static member Empty =
            VkCommandBufferBeginInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCommandBufferUsageFlags>, Unchecked.defaultof<nativeptr<VkCommandBufferInheritanceInfo>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "pInheritanceInfo = %A" x.pInheritanceInfo
            ] |> sprintf "VkCommandBufferBeginInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkCommandPoolCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkCommandPoolCreateFlags
        val mutable public queueFamilyIndex : uint32

        new(pNext : nativeint, flags : VkCommandPoolCreateFlags, queueFamilyIndex : uint32) =
            {
                sType = 39u
                pNext = pNext
                flags = flags
                queueFamilyIndex = queueFamilyIndex
            }

        new(flags : VkCommandPoolCreateFlags, queueFamilyIndex : uint32) =
            VkCommandPoolCreateInfo(Unchecked.defaultof<nativeint>, flags, queueFamilyIndex)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkCommandPoolCreateFlags> && x.queueFamilyIndex = Unchecked.defaultof<uint32>

        static member Empty =
            VkCommandPoolCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCommandPoolCreateFlags>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "queueFamilyIndex = %A" x.queueFamilyIndex
            ] |> sprintf "VkCommandPoolCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkComponentMapping =
    struct
        val mutable public r : VkComponentSwizzle
        val mutable public g : VkComponentSwizzle
        val mutable public b : VkComponentSwizzle
        val mutable public a : VkComponentSwizzle

        new(r : VkComponentSwizzle, g : VkComponentSwizzle, b : VkComponentSwizzle, a : VkComponentSwizzle) =
            {
                r = r
                g = g
                b = b
                a = a
            }

        member x.IsEmpty =
            x.r = Unchecked.defaultof<VkComponentSwizzle> && x.g = Unchecked.defaultof<VkComponentSwizzle> && x.b = Unchecked.defaultof<VkComponentSwizzle> && x.a = Unchecked.defaultof<VkComponentSwizzle>

        static member Empty =
            VkComponentMapping(Unchecked.defaultof<VkComponentSwizzle>, Unchecked.defaultof<VkComponentSwizzle>, Unchecked.defaultof<VkComponentSwizzle>, Unchecked.defaultof<VkComponentSwizzle>)

        override x.ToString() =
            String.concat "; " [
                sprintf "r = %A" x.r
                sprintf "g = %A" x.g
                sprintf "b = %A" x.b
                sprintf "a = %A" x.a
            ] |> sprintf "VkComponentMapping { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSpecializationMapEntry =
    struct
        val mutable public constantID : uint32
        val mutable public offset : uint32
        val mutable public size : uint64

        new(constantID : uint32, offset : uint32, size : uint64) =
            {
                constantID = constantID
                offset = offset
                size = size
            }

        member x.IsEmpty =
            x.constantID = Unchecked.defaultof<uint32> && x.offset = Unchecked.defaultof<uint32> && x.size = Unchecked.defaultof<uint64>

        static member Empty =
            VkSpecializationMapEntry(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>)

        override x.ToString() =
            String.concat "; " [
                sprintf "constantID = %A" x.constantID
                sprintf "offset = %A" x.offset
                sprintf "size = %A" x.size
            ] |> sprintf "VkSpecializationMapEntry { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSpecializationInfo =
    struct
        val mutable public mapEntryCount : uint32
        val mutable public pMapEntries : nativeptr<VkSpecializationMapEntry>
        val mutable public dataSize : uint64
        val mutable public pData : nativeint

        new(mapEntryCount : uint32, pMapEntries : nativeptr<VkSpecializationMapEntry>, dataSize : uint64, pData : nativeint) =
            {
                mapEntryCount = mapEntryCount
                pMapEntries = pMapEntries
                dataSize = dataSize
                pData = pData
            }

        member x.IsEmpty =
            x.mapEntryCount = Unchecked.defaultof<uint32> && x.pMapEntries = Unchecked.defaultof<nativeptr<VkSpecializationMapEntry>> && x.dataSize = Unchecked.defaultof<uint64> && x.pData = Unchecked.defaultof<nativeint>

        static member Empty =
            VkSpecializationInfo(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSpecializationMapEntry>>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

        override x.ToString() =
            String.concat "; " [
                sprintf "mapEntryCount = %A" x.mapEntryCount
                sprintf "pMapEntries = %A" x.pMapEntries
                sprintf "dataSize = %A" x.dataSize
                sprintf "pData = %A" x.pData
            ] |> sprintf "VkSpecializationInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineShaderStageCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineShaderStageCreateFlags
        val mutable public stage : VkShaderStageFlags
        val mutable public _module : VkShaderModule
        val mutable public pName : cstr
        val mutable public pSpecializationInfo : nativeptr<VkSpecializationInfo>

        new(pNext : nativeint, flags : VkPipelineShaderStageCreateFlags, stage : VkShaderStageFlags, _module : VkShaderModule, pName : cstr, pSpecializationInfo : nativeptr<VkSpecializationInfo>) =
            {
                sType = 18u
                pNext = pNext
                flags = flags
                stage = stage
                _module = _module
                pName = pName
                pSpecializationInfo = pSpecializationInfo
            }

        new(flags : VkPipelineShaderStageCreateFlags, stage : VkShaderStageFlags, _module : VkShaderModule, pName : cstr, pSpecializationInfo : nativeptr<VkSpecializationInfo>) =
            VkPipelineShaderStageCreateInfo(Unchecked.defaultof<nativeint>, flags, stage, _module, pName, pSpecializationInfo)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineShaderStageCreateFlags> && x.stage = Unchecked.defaultof<VkShaderStageFlags> && x._module = Unchecked.defaultof<VkShaderModule> && x.pName = Unchecked.defaultof<cstr> && x.pSpecializationInfo = Unchecked.defaultof<nativeptr<VkSpecializationInfo>>

        static member Empty =
            VkPipelineShaderStageCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineShaderStageCreateFlags>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkShaderModule>, Unchecked.defaultof<cstr>, Unchecked.defaultof<nativeptr<VkSpecializationInfo>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "stage = %A" x.stage
                sprintf "_module = %A" x._module
                sprintf "pName = %A" x.pName
                sprintf "pSpecializationInfo = %A" x.pSpecializationInfo
            ] |> sprintf "VkPipelineShaderStageCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkComputePipelineCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineCreateFlags
        val mutable public stage : VkPipelineShaderStageCreateInfo
        val mutable public layout : VkPipelineLayout
        val mutable public basePipelineHandle : VkPipeline
        val mutable public basePipelineIndex : int

        new(pNext : nativeint, flags : VkPipelineCreateFlags, stage : VkPipelineShaderStageCreateInfo, layout : VkPipelineLayout, basePipelineHandle : VkPipeline, basePipelineIndex : int) =
            {
                sType = 29u
                pNext = pNext
                flags = flags
                stage = stage
                layout = layout
                basePipelineHandle = basePipelineHandle
                basePipelineIndex = basePipelineIndex
            }

        new(flags : VkPipelineCreateFlags, stage : VkPipelineShaderStageCreateInfo, layout : VkPipelineLayout, basePipelineHandle : VkPipeline, basePipelineIndex : int) =
            VkComputePipelineCreateInfo(Unchecked.defaultof<nativeint>, flags, stage, layout, basePipelineHandle, basePipelineIndex)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCreateFlags> && x.stage = Unchecked.defaultof<VkPipelineShaderStageCreateInfo> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.basePipelineHandle = Unchecked.defaultof<VkPipeline> && x.basePipelineIndex = Unchecked.defaultof<int>

        static member Empty =
            VkComputePipelineCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCreateFlags>, Unchecked.defaultof<VkPipelineShaderStageCreateInfo>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<int>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "stage = %A" x.stage
                sprintf "layout = %A" x.layout
                sprintf "basePipelineHandle = %A" x.basePipelineHandle
                sprintf "basePipelineIndex = %A" x.basePipelineIndex
            ] |> sprintf "VkComputePipelineCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkCopyDescriptorSet =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public srcSet : VkDescriptorSet
        val mutable public srcBinding : uint32
        val mutable public srcArrayElement : uint32
        val mutable public dstSet : VkDescriptorSet
        val mutable public dstBinding : uint32
        val mutable public dstArrayElement : uint32
        val mutable public descriptorCount : uint32

        new(pNext : nativeint, srcSet : VkDescriptorSet, srcBinding : uint32, srcArrayElement : uint32, dstSet : VkDescriptorSet, dstBinding : uint32, dstArrayElement : uint32, descriptorCount : uint32) =
            {
                sType = 36u
                pNext = pNext
                srcSet = srcSet
                srcBinding = srcBinding
                srcArrayElement = srcArrayElement
                dstSet = dstSet
                dstBinding = dstBinding
                dstArrayElement = dstArrayElement
                descriptorCount = descriptorCount
            }

        new(srcSet : VkDescriptorSet, srcBinding : uint32, srcArrayElement : uint32, dstSet : VkDescriptorSet, dstBinding : uint32, dstArrayElement : uint32, descriptorCount : uint32) =
            VkCopyDescriptorSet(Unchecked.defaultof<nativeint>, srcSet, srcBinding, srcArrayElement, dstSet, dstBinding, dstArrayElement, descriptorCount)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.srcSet = Unchecked.defaultof<VkDescriptorSet> && x.srcBinding = Unchecked.defaultof<uint32> && x.srcArrayElement = Unchecked.defaultof<uint32> && x.dstSet = Unchecked.defaultof<VkDescriptorSet> && x.dstBinding = Unchecked.defaultof<uint32> && x.dstArrayElement = Unchecked.defaultof<uint32> && x.descriptorCount = Unchecked.defaultof<uint32>

        static member Empty =
            VkCopyDescriptorSet(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorSet>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDescriptorSet>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "srcSet = %A" x.srcSet
                sprintf "srcBinding = %A" x.srcBinding
                sprintf "srcArrayElement = %A" x.srcArrayElement
                sprintf "dstSet = %A" x.dstSet
                sprintf "dstBinding = %A" x.dstBinding
                sprintf "dstArrayElement = %A" x.dstArrayElement
                sprintf "descriptorCount = %A" x.descriptorCount
            ] |> sprintf "VkCopyDescriptorSet { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorBufferInfo =
    struct
        val mutable public buffer : VkBuffer
        val mutable public offset : VkDeviceSize
        val mutable public range : VkDeviceSize

        new(buffer : VkBuffer, offset : VkDeviceSize, range : VkDeviceSize) =
            {
                buffer = buffer
                offset = offset
                range = range
            }

        member x.IsEmpty =
            x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.range = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkDescriptorBufferInfo(Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "buffer = %A" x.buffer
                sprintf "offset = %A" x.offset
                sprintf "range = %A" x.range
            ] |> sprintf "VkDescriptorBufferInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorImageInfo =
    struct
        val mutable public sampler : VkSampler
        val mutable public imageView : VkImageView
        val mutable public imageLayout : VkImageLayout

        new(sampler : VkSampler, imageView : VkImageView, imageLayout : VkImageLayout) =
            {
                sampler = sampler
                imageView = imageView
                imageLayout = imageLayout
            }

        member x.IsEmpty =
            x.sampler = Unchecked.defaultof<VkSampler> && x.imageView = Unchecked.defaultof<VkImageView> && x.imageLayout = Unchecked.defaultof<VkImageLayout>

        static member Empty =
            VkDescriptorImageInfo(Unchecked.defaultof<VkSampler>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkImageLayout>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sampler = %A" x.sampler
                sprintf "imageView = %A" x.imageView
                sprintf "imageLayout = %A" x.imageLayout
            ] |> sprintf "VkDescriptorImageInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorPoolSize =
    struct
        val mutable public _type : VkDescriptorType
        val mutable public descriptorCount : uint32

        new(_type : VkDescriptorType, descriptorCount : uint32) =
            {
                _type = _type
                descriptorCount = descriptorCount
            }

        member x.IsEmpty =
            x._type = Unchecked.defaultof<VkDescriptorType> && x.descriptorCount = Unchecked.defaultof<uint32>

        static member Empty =
            VkDescriptorPoolSize(Unchecked.defaultof<VkDescriptorType>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "_type = %A" x._type
                sprintf "descriptorCount = %A" x.descriptorCount
            ] |> sprintf "VkDescriptorPoolSize { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorPoolCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkDescriptorPoolCreateFlags
        val mutable public maxSets : uint32
        val mutable public poolSizeCount : uint32
        val mutable public pPoolSizes : nativeptr<VkDescriptorPoolSize>

        new(pNext : nativeint, flags : VkDescriptorPoolCreateFlags, maxSets : uint32, poolSizeCount : uint32, pPoolSizes : nativeptr<VkDescriptorPoolSize>) =
            {
                sType = 33u
                pNext = pNext
                flags = flags
                maxSets = maxSets
                poolSizeCount = poolSizeCount
                pPoolSizes = pPoolSizes
            }

        new(flags : VkDescriptorPoolCreateFlags, maxSets : uint32, poolSizeCount : uint32, pPoolSizes : nativeptr<VkDescriptorPoolSize>) =
            VkDescriptorPoolCreateInfo(Unchecked.defaultof<nativeint>, flags, maxSets, poolSizeCount, pPoolSizes)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDescriptorPoolCreateFlags> && x.maxSets = Unchecked.defaultof<uint32> && x.poolSizeCount = Unchecked.defaultof<uint32> && x.pPoolSizes = Unchecked.defaultof<nativeptr<VkDescriptorPoolSize>>

        static member Empty =
            VkDescriptorPoolCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorPoolCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorPoolSize>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "maxSets = %A" x.maxSets
                sprintf "poolSizeCount = %A" x.poolSizeCount
                sprintf "pPoolSizes = %A" x.pPoolSizes
            ] |> sprintf "VkDescriptorPoolCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorSetAllocateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public descriptorPool : VkDescriptorPool
        val mutable public descriptorSetCount : uint32
        val mutable public pSetLayouts : nativeptr<VkDescriptorSetLayout>

        new(pNext : nativeint, descriptorPool : VkDescriptorPool, descriptorSetCount : uint32, pSetLayouts : nativeptr<VkDescriptorSetLayout>) =
            {
                sType = 34u
                pNext = pNext
                descriptorPool = descriptorPool
                descriptorSetCount = descriptorSetCount
                pSetLayouts = pSetLayouts
            }

        new(descriptorPool : VkDescriptorPool, descriptorSetCount : uint32, pSetLayouts : nativeptr<VkDescriptorSetLayout>) =
            VkDescriptorSetAllocateInfo(Unchecked.defaultof<nativeint>, descriptorPool, descriptorSetCount, pSetLayouts)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.descriptorPool = Unchecked.defaultof<VkDescriptorPool> && x.descriptorSetCount = Unchecked.defaultof<uint32> && x.pSetLayouts = Unchecked.defaultof<nativeptr<VkDescriptorSetLayout>>

        static member Empty =
            VkDescriptorSetAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorPool>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorSetLayout>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "descriptorPool = %A" x.descriptorPool
                sprintf "descriptorSetCount = %A" x.descriptorSetCount
                sprintf "pSetLayouts = %A" x.pSetLayouts
            ] |> sprintf "VkDescriptorSetAllocateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorSetLayoutBinding =
    struct
        val mutable public binding : uint32
        val mutable public descriptorType : VkDescriptorType
        val mutable public descriptorCount : uint32
        val mutable public stageFlags : VkShaderStageFlags
        val mutable public pImmutableSamplers : nativeptr<VkSampler>

        new(binding : uint32, descriptorType : VkDescriptorType, descriptorCount : uint32, stageFlags : VkShaderStageFlags, pImmutableSamplers : nativeptr<VkSampler>) =
            {
                binding = binding
                descriptorType = descriptorType
                descriptorCount = descriptorCount
                stageFlags = stageFlags
                pImmutableSamplers = pImmutableSamplers
            }

        member x.IsEmpty =
            x.binding = Unchecked.defaultof<uint32> && x.descriptorType = Unchecked.defaultof<VkDescriptorType> && x.descriptorCount = Unchecked.defaultof<uint32> && x.stageFlags = Unchecked.defaultof<VkShaderStageFlags> && x.pImmutableSamplers = Unchecked.defaultof<nativeptr<VkSampler>>

        static member Empty =
            VkDescriptorSetLayoutBinding(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDescriptorType>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<nativeptr<VkSampler>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "binding = %A" x.binding
                sprintf "descriptorType = %A" x.descriptorType
                sprintf "descriptorCount = %A" x.descriptorCount
                sprintf "stageFlags = %A" x.stageFlags
                sprintf "pImmutableSamplers = %A" x.pImmutableSamplers
            ] |> sprintf "VkDescriptorSetLayoutBinding { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDescriptorSetLayoutCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkDescriptorSetLayoutCreateFlags
        val mutable public bindingCount : uint32
        val mutable public pBindings : nativeptr<VkDescriptorSetLayoutBinding>

        new(pNext : nativeint, flags : VkDescriptorSetLayoutCreateFlags, bindingCount : uint32, pBindings : nativeptr<VkDescriptorSetLayoutBinding>) =
            {
                sType = 32u
                pNext = pNext
                flags = flags
                bindingCount = bindingCount
                pBindings = pBindings
            }

        new(flags : VkDescriptorSetLayoutCreateFlags, bindingCount : uint32, pBindings : nativeptr<VkDescriptorSetLayoutBinding>) =
            VkDescriptorSetLayoutCreateInfo(Unchecked.defaultof<nativeint>, flags, bindingCount, pBindings)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDescriptorSetLayoutCreateFlags> && x.bindingCount = Unchecked.defaultof<uint32> && x.pBindings = Unchecked.defaultof<nativeptr<VkDescriptorSetLayoutBinding>>

        static member Empty =
            VkDescriptorSetLayoutCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorSetLayoutCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorSetLayoutBinding>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "bindingCount = %A" x.bindingCount
                sprintf "pBindings = %A" x.pBindings
            ] |> sprintf "VkDescriptorSetLayoutCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDeviceQueueCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkDeviceQueueCreateFlags
        val mutable public queueFamilyIndex : uint32
        val mutable public queueCount : uint32
        val mutable public pQueuePriorities : nativeptr<float32>

        new(pNext : nativeint, flags : VkDeviceQueueCreateFlags, queueFamilyIndex : uint32, queueCount : uint32, pQueuePriorities : nativeptr<float32>) =
            {
                sType = 2u
                pNext = pNext
                flags = flags
                queueFamilyIndex = queueFamilyIndex
                queueCount = queueCount
                pQueuePriorities = pQueuePriorities
            }

        new(flags : VkDeviceQueueCreateFlags, queueFamilyIndex : uint32, queueCount : uint32, pQueuePriorities : nativeptr<float32>) =
            VkDeviceQueueCreateInfo(Unchecked.defaultof<nativeint>, flags, queueFamilyIndex, queueCount, pQueuePriorities)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceQueueCreateFlags> && x.queueFamilyIndex = Unchecked.defaultof<uint32> && x.queueCount = Unchecked.defaultof<uint32> && x.pQueuePriorities = Unchecked.defaultof<nativeptr<float32>>

        static member Empty =
            VkDeviceQueueCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceQueueCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<float32>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "queueFamilyIndex = %A" x.queueFamilyIndex
                sprintf "queueCount = %A" x.queueCount
                sprintf "pQueuePriorities = %A" x.pQueuePriorities
            ] |> sprintf "VkDeviceQueueCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPhysicalDeviceFeatures =
    struct
        val mutable public robustBufferAccess : VkBool32
        val mutable public fullDrawIndexUint32 : VkBool32
        val mutable public imageCubeArray : VkBool32
        val mutable public independentBlend : VkBool32
        val mutable public geometryShader : VkBool32
        val mutable public tessellationShader : VkBool32
        val mutable public sampleRateShading : VkBool32
        val mutable public dualSrcBlend : VkBool32
        val mutable public logicOp : VkBool32
        val mutable public multiDrawIndirect : VkBool32
        val mutable public drawIndirectFirstInstance : VkBool32
        val mutable public depthClamp : VkBool32
        val mutable public depthBiasClamp : VkBool32
        val mutable public fillModeNonSolid : VkBool32
        val mutable public depthBounds : VkBool32
        val mutable public wideLines : VkBool32
        val mutable public largePoints : VkBool32
        val mutable public alphaToOne : VkBool32
        val mutable public multiViewport : VkBool32
        val mutable public samplerAnisotropy : VkBool32
        val mutable public textureCompressionETC2 : VkBool32
        val mutable public textureCompressionASTC_LDR : VkBool32
        val mutable public textureCompressionBC : VkBool32
        val mutable public occlusionQueryPrecise : VkBool32
        val mutable public pipelineStatisticsQuery : VkBool32
        val mutable public vertexPipelineStoresAndAtomics : VkBool32
        val mutable public fragmentStoresAndAtomics : VkBool32
        val mutable public shaderTessellationAndGeometryPointSize : VkBool32
        val mutable public shaderImageGatherExtended : VkBool32
        val mutable public shaderStorageImageExtendedFormats : VkBool32
        val mutable public shaderStorageImageMultisample : VkBool32
        val mutable public shaderStorageImageReadWithoutFormat : VkBool32
        val mutable public shaderStorageImageWriteWithoutFormat : VkBool32
        val mutable public shaderUniformBufferArrayDynamicIndexing : VkBool32
        val mutable public shaderSampledImageArrayDynamicIndexing : VkBool32
        val mutable public shaderStorageBufferArrayDynamicIndexing : VkBool32
        val mutable public shaderStorageImageArrayDynamicIndexing : VkBool32
        val mutable public shaderClipDistance : VkBool32
        val mutable public shaderCullDistance : VkBool32
        val mutable public shaderFloat64 : VkBool32
        val mutable public shaderInt64 : VkBool32
        val mutable public shaderInt16 : VkBool32
        val mutable public shaderResourceResidency : VkBool32
        val mutable public shaderResourceMinLod : VkBool32
        val mutable public sparseBinding : VkBool32
        val mutable public sparseResidencyBuffer : VkBool32
        val mutable public sparseResidencyImage2D : VkBool32
        val mutable public sparseResidencyImage3D : VkBool32
        val mutable public sparseResidency2Samples : VkBool32
        val mutable public sparseResidency4Samples : VkBool32
        val mutable public sparseResidency8Samples : VkBool32
        val mutable public sparseResidency16Samples : VkBool32
        val mutable public sparseResidencyAliased : VkBool32
        val mutable public variableMultisampleRate : VkBool32
        val mutable public inheritedQueries : VkBool32

        new(robustBufferAccess : VkBool32, fullDrawIndexUint32 : VkBool32, imageCubeArray : VkBool32, independentBlend : VkBool32, geometryShader : VkBool32, tessellationShader : VkBool32, sampleRateShading : VkBool32, dualSrcBlend : VkBool32, logicOp : VkBool32, multiDrawIndirect : VkBool32, drawIndirectFirstInstance : VkBool32, depthClamp : VkBool32, depthBiasClamp : VkBool32, fillModeNonSolid : VkBool32, depthBounds : VkBool32, wideLines : VkBool32, largePoints : VkBool32, alphaToOne : VkBool32, multiViewport : VkBool32, samplerAnisotropy : VkBool32, textureCompressionETC2 : VkBool32, textureCompressionASTC_LDR : VkBool32, textureCompressionBC : VkBool32, occlusionQueryPrecise : VkBool32, pipelineStatisticsQuery : VkBool32, vertexPipelineStoresAndAtomics : VkBool32, fragmentStoresAndAtomics : VkBool32, shaderTessellationAndGeometryPointSize : VkBool32, shaderImageGatherExtended : VkBool32, shaderStorageImageExtendedFormats : VkBool32, shaderStorageImageMultisample : VkBool32, shaderStorageImageReadWithoutFormat : VkBool32, shaderStorageImageWriteWithoutFormat : VkBool32, shaderUniformBufferArrayDynamicIndexing : VkBool32, shaderSampledImageArrayDynamicIndexing : VkBool32, shaderStorageBufferArrayDynamicIndexing : VkBool32, shaderStorageImageArrayDynamicIndexing : VkBool32, shaderClipDistance : VkBool32, shaderCullDistance : VkBool32, shaderFloat64 : VkBool32, shaderInt64 : VkBool32, shaderInt16 : VkBool32, shaderResourceResidency : VkBool32, shaderResourceMinLod : VkBool32, sparseBinding : VkBool32, sparseResidencyBuffer : VkBool32, sparseResidencyImage2D : VkBool32, sparseResidencyImage3D : VkBool32, sparseResidency2Samples : VkBool32, sparseResidency4Samples : VkBool32, sparseResidency8Samples : VkBool32, sparseResidency16Samples : VkBool32, sparseResidencyAliased : VkBool32, variableMultisampleRate : VkBool32, inheritedQueries : VkBool32) =
            {
                robustBufferAccess = robustBufferAccess
                fullDrawIndexUint32 = fullDrawIndexUint32
                imageCubeArray = imageCubeArray
                independentBlend = independentBlend
                geometryShader = geometryShader
                tessellationShader = tessellationShader
                sampleRateShading = sampleRateShading
                dualSrcBlend = dualSrcBlend
                logicOp = logicOp
                multiDrawIndirect = multiDrawIndirect
                drawIndirectFirstInstance = drawIndirectFirstInstance
                depthClamp = depthClamp
                depthBiasClamp = depthBiasClamp
                fillModeNonSolid = fillModeNonSolid
                depthBounds = depthBounds
                wideLines = wideLines
                largePoints = largePoints
                alphaToOne = alphaToOne
                multiViewport = multiViewport
                samplerAnisotropy = samplerAnisotropy
                textureCompressionETC2 = textureCompressionETC2
                textureCompressionASTC_LDR = textureCompressionASTC_LDR
                textureCompressionBC = textureCompressionBC
                occlusionQueryPrecise = occlusionQueryPrecise
                pipelineStatisticsQuery = pipelineStatisticsQuery
                vertexPipelineStoresAndAtomics = vertexPipelineStoresAndAtomics
                fragmentStoresAndAtomics = fragmentStoresAndAtomics
                shaderTessellationAndGeometryPointSize = shaderTessellationAndGeometryPointSize
                shaderImageGatherExtended = shaderImageGatherExtended
                shaderStorageImageExtendedFormats = shaderStorageImageExtendedFormats
                shaderStorageImageMultisample = shaderStorageImageMultisample
                shaderStorageImageReadWithoutFormat = shaderStorageImageReadWithoutFormat
                shaderStorageImageWriteWithoutFormat = shaderStorageImageWriteWithoutFormat
                shaderUniformBufferArrayDynamicIndexing = shaderUniformBufferArrayDynamicIndexing
                shaderSampledImageArrayDynamicIndexing = shaderSampledImageArrayDynamicIndexing
                shaderStorageBufferArrayDynamicIndexing = shaderStorageBufferArrayDynamicIndexing
                shaderStorageImageArrayDynamicIndexing = shaderStorageImageArrayDynamicIndexing
                shaderClipDistance = shaderClipDistance
                shaderCullDistance = shaderCullDistance
                shaderFloat64 = shaderFloat64
                shaderInt64 = shaderInt64
                shaderInt16 = shaderInt16
                shaderResourceResidency = shaderResourceResidency
                shaderResourceMinLod = shaderResourceMinLod
                sparseBinding = sparseBinding
                sparseResidencyBuffer = sparseResidencyBuffer
                sparseResidencyImage2D = sparseResidencyImage2D
                sparseResidencyImage3D = sparseResidencyImage3D
                sparseResidency2Samples = sparseResidency2Samples
                sparseResidency4Samples = sparseResidency4Samples
                sparseResidency8Samples = sparseResidency8Samples
                sparseResidency16Samples = sparseResidency16Samples
                sparseResidencyAliased = sparseResidencyAliased
                variableMultisampleRate = variableMultisampleRate
                inheritedQueries = inheritedQueries
            }

        member x.IsEmpty =
            x.robustBufferAccess = Unchecked.defaultof<VkBool32> && x.fullDrawIndexUint32 = Unchecked.defaultof<VkBool32> && x.imageCubeArray = Unchecked.defaultof<VkBool32> && x.independentBlend = Unchecked.defaultof<VkBool32> && x.geometryShader = Unchecked.defaultof<VkBool32> && x.tessellationShader = Unchecked.defaultof<VkBool32> && x.sampleRateShading = Unchecked.defaultof<VkBool32> && x.dualSrcBlend = Unchecked.defaultof<VkBool32> && x.logicOp = Unchecked.defaultof<VkBool32> && x.multiDrawIndirect = Unchecked.defaultof<VkBool32> && x.drawIndirectFirstInstance = Unchecked.defaultof<VkBool32> && x.depthClamp = Unchecked.defaultof<VkBool32> && x.depthBiasClamp = Unchecked.defaultof<VkBool32> && x.fillModeNonSolid = Unchecked.defaultof<VkBool32> && x.depthBounds = Unchecked.defaultof<VkBool32> && x.wideLines = Unchecked.defaultof<VkBool32> && x.largePoints = Unchecked.defaultof<VkBool32> && x.alphaToOne = Unchecked.defaultof<VkBool32> && x.multiViewport = Unchecked.defaultof<VkBool32> && x.samplerAnisotropy = Unchecked.defaultof<VkBool32> && x.textureCompressionETC2 = Unchecked.defaultof<VkBool32> && x.textureCompressionASTC_LDR = Unchecked.defaultof<VkBool32> && x.textureCompressionBC = Unchecked.defaultof<VkBool32> && x.occlusionQueryPrecise = Unchecked.defaultof<VkBool32> && x.pipelineStatisticsQuery = Unchecked.defaultof<VkBool32> && x.vertexPipelineStoresAndAtomics = Unchecked.defaultof<VkBool32> && x.fragmentStoresAndAtomics = Unchecked.defaultof<VkBool32> && x.shaderTessellationAndGeometryPointSize = Unchecked.defaultof<VkBool32> && x.shaderImageGatherExtended = Unchecked.defaultof<VkBool32> && x.shaderStorageImageExtendedFormats = Unchecked.defaultof<VkBool32> && x.shaderStorageImageMultisample = Unchecked.defaultof<VkBool32> && x.shaderStorageImageReadWithoutFormat = Unchecked.defaultof<VkBool32> && x.shaderStorageImageWriteWithoutFormat = Unchecked.defaultof<VkBool32> && x.shaderUniformBufferArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderSampledImageArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageBufferArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageImageArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderClipDistance = Unchecked.defaultof<VkBool32> && x.shaderCullDistance = Unchecked.defaultof<VkBool32> && x.shaderFloat64 = Unchecked.defaultof<VkBool32> && x.shaderInt64 = Unchecked.defaultof<VkBool32> && x.shaderInt16 = Unchecked.defaultof<VkBool32> && x.shaderResourceResidency = Unchecked.defaultof<VkBool32> && x.shaderResourceMinLod = Unchecked.defaultof<VkBool32> && x.sparseBinding = Unchecked.defaultof<VkBool32> && x.sparseResidencyBuffer = Unchecked.defaultof<VkBool32> && x.sparseResidencyImage2D = Unchecked.defaultof<VkBool32> && x.sparseResidencyImage3D = Unchecked.defaultof<VkBool32> && x.sparseResidency2Samples = Unchecked.defaultof<VkBool32> && x.sparseResidency4Samples = Unchecked.defaultof<VkBool32> && x.sparseResidency8Samples = Unchecked.defaultof<VkBool32> && x.sparseResidency16Samples = Unchecked.defaultof<VkBool32> && x.sparseResidencyAliased = Unchecked.defaultof<VkBool32> && x.variableMultisampleRate = Unchecked.defaultof<VkBool32> && x.inheritedQueries = Unchecked.defaultof<VkBool32>

        static member Empty =
            VkPhysicalDeviceFeatures(Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "robustBufferAccess = %A" x.robustBufferAccess
                sprintf "fullDrawIndexUint32 = %A" x.fullDrawIndexUint32
                sprintf "imageCubeArray = %A" x.imageCubeArray
                sprintf "independentBlend = %A" x.independentBlend
                sprintf "geometryShader = %A" x.geometryShader
                sprintf "tessellationShader = %A" x.tessellationShader
                sprintf "sampleRateShading = %A" x.sampleRateShading
                sprintf "dualSrcBlend = %A" x.dualSrcBlend
                sprintf "logicOp = %A" x.logicOp
                sprintf "multiDrawIndirect = %A" x.multiDrawIndirect
                sprintf "drawIndirectFirstInstance = %A" x.drawIndirectFirstInstance
                sprintf "depthClamp = %A" x.depthClamp
                sprintf "depthBiasClamp = %A" x.depthBiasClamp
                sprintf "fillModeNonSolid = %A" x.fillModeNonSolid
                sprintf "depthBounds = %A" x.depthBounds
                sprintf "wideLines = %A" x.wideLines
                sprintf "largePoints = %A" x.largePoints
                sprintf "alphaToOne = %A" x.alphaToOne
                sprintf "multiViewport = %A" x.multiViewport
                sprintf "samplerAnisotropy = %A" x.samplerAnisotropy
                sprintf "textureCompressionETC2 = %A" x.textureCompressionETC2
                sprintf "textureCompressionASTC_LDR = %A" x.textureCompressionASTC_LDR
                sprintf "textureCompressionBC = %A" x.textureCompressionBC
                sprintf "occlusionQueryPrecise = %A" x.occlusionQueryPrecise
                sprintf "pipelineStatisticsQuery = %A" x.pipelineStatisticsQuery
                sprintf "vertexPipelineStoresAndAtomics = %A" x.vertexPipelineStoresAndAtomics
                sprintf "fragmentStoresAndAtomics = %A" x.fragmentStoresAndAtomics
                sprintf "shaderTessellationAndGeometryPointSize = %A" x.shaderTessellationAndGeometryPointSize
                sprintf "shaderImageGatherExtended = %A" x.shaderImageGatherExtended
                sprintf "shaderStorageImageExtendedFormats = %A" x.shaderStorageImageExtendedFormats
                sprintf "shaderStorageImageMultisample = %A" x.shaderStorageImageMultisample
                sprintf "shaderStorageImageReadWithoutFormat = %A" x.shaderStorageImageReadWithoutFormat
                sprintf "shaderStorageImageWriteWithoutFormat = %A" x.shaderStorageImageWriteWithoutFormat
                sprintf "shaderUniformBufferArrayDynamicIndexing = %A" x.shaderUniformBufferArrayDynamicIndexing
                sprintf "shaderSampledImageArrayDynamicIndexing = %A" x.shaderSampledImageArrayDynamicIndexing
                sprintf "shaderStorageBufferArrayDynamicIndexing = %A" x.shaderStorageBufferArrayDynamicIndexing
                sprintf "shaderStorageImageArrayDynamicIndexing = %A" x.shaderStorageImageArrayDynamicIndexing
                sprintf "shaderClipDistance = %A" x.shaderClipDistance
                sprintf "shaderCullDistance = %A" x.shaderCullDistance
                sprintf "shaderFloat64 = %A" x.shaderFloat64
                sprintf "shaderInt64 = %A" x.shaderInt64
                sprintf "shaderInt16 = %A" x.shaderInt16
                sprintf "shaderResourceResidency = %A" x.shaderResourceResidency
                sprintf "shaderResourceMinLod = %A" x.shaderResourceMinLod
                sprintf "sparseBinding = %A" x.sparseBinding
                sprintf "sparseResidencyBuffer = %A" x.sparseResidencyBuffer
                sprintf "sparseResidencyImage2D = %A" x.sparseResidencyImage2D
                sprintf "sparseResidencyImage3D = %A" x.sparseResidencyImage3D
                sprintf "sparseResidency2Samples = %A" x.sparseResidency2Samples
                sprintf "sparseResidency4Samples = %A" x.sparseResidency4Samples
                sprintf "sparseResidency8Samples = %A" x.sparseResidency8Samples
                sprintf "sparseResidency16Samples = %A" x.sparseResidency16Samples
                sprintf "sparseResidencyAliased = %A" x.sparseResidencyAliased
                sprintf "variableMultisampleRate = %A" x.variableMultisampleRate
                sprintf "inheritedQueries = %A" x.inheritedQueries
            ] |> sprintf "VkPhysicalDeviceFeatures { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDeviceCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkDeviceCreateFlags
        val mutable public queueCreateInfoCount : uint32
        val mutable public pQueueCreateInfos : nativeptr<VkDeviceQueueCreateInfo>
        val mutable public enabledLayerCount : uint32
        val mutable public ppEnabledLayerNames : nativeptr<cstr>
        val mutable public enabledExtensionCount : uint32
        val mutable public ppEnabledExtensionNames : nativeptr<cstr>
        val mutable public pEnabledFeatures : nativeptr<VkPhysicalDeviceFeatures>

        new(pNext : nativeint, flags : VkDeviceCreateFlags, queueCreateInfoCount : uint32, pQueueCreateInfos : nativeptr<VkDeviceQueueCreateInfo>, enabledLayerCount : uint32, ppEnabledLayerNames : nativeptr<cstr>, enabledExtensionCount : uint32, ppEnabledExtensionNames : nativeptr<cstr>, pEnabledFeatures : nativeptr<VkPhysicalDeviceFeatures>) =
            {
                sType = 3u
                pNext = pNext
                flags = flags
                queueCreateInfoCount = queueCreateInfoCount
                pQueueCreateInfos = pQueueCreateInfos
                enabledLayerCount = enabledLayerCount
                ppEnabledLayerNames = ppEnabledLayerNames
                enabledExtensionCount = enabledExtensionCount
                ppEnabledExtensionNames = ppEnabledExtensionNames
                pEnabledFeatures = pEnabledFeatures
            }

        new(flags : VkDeviceCreateFlags, queueCreateInfoCount : uint32, pQueueCreateInfos : nativeptr<VkDeviceQueueCreateInfo>, enabledLayerCount : uint32, ppEnabledLayerNames : nativeptr<cstr>, enabledExtensionCount : uint32, ppEnabledExtensionNames : nativeptr<cstr>, pEnabledFeatures : nativeptr<VkPhysicalDeviceFeatures>) =
            VkDeviceCreateInfo(Unchecked.defaultof<nativeint>, flags, queueCreateInfoCount, pQueueCreateInfos, enabledLayerCount, ppEnabledLayerNames, enabledExtensionCount, ppEnabledExtensionNames, pEnabledFeatures)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceCreateFlags> && x.queueCreateInfoCount = Unchecked.defaultof<uint32> && x.pQueueCreateInfos = Unchecked.defaultof<nativeptr<VkDeviceQueueCreateInfo>> && x.enabledLayerCount = Unchecked.defaultof<uint32> && x.ppEnabledLayerNames = Unchecked.defaultof<nativeptr<cstr>> && x.enabledExtensionCount = Unchecked.defaultof<uint32> && x.ppEnabledExtensionNames = Unchecked.defaultof<nativeptr<cstr>> && x.pEnabledFeatures = Unchecked.defaultof<nativeptr<VkPhysicalDeviceFeatures>>

        static member Empty =
            VkDeviceCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDeviceQueueCreateInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<cstr>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<cstr>>, Unchecked.defaultof<nativeptr<VkPhysicalDeviceFeatures>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "queueCreateInfoCount = %A" x.queueCreateInfoCount
                sprintf "pQueueCreateInfos = %A" x.pQueueCreateInfos
                sprintf "enabledLayerCount = %A" x.enabledLayerCount
                sprintf "ppEnabledLayerNames = %A" x.ppEnabledLayerNames
                sprintf "enabledExtensionCount = %A" x.enabledExtensionCount
                sprintf "ppEnabledExtensionNames = %A" x.ppEnabledExtensionNames
                sprintf "pEnabledFeatures = %A" x.pEnabledFeatures
            ] |> sprintf "VkDeviceCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDispatchIndirectCommand =
    struct
        val mutable public x : uint32
        val mutable public y : uint32
        val mutable public z : uint32

        new(x : uint32, y : uint32, z : uint32) =
            {
                x = x
                y = y
                z = z
            }

        member x.IsEmpty =
            x.x = Unchecked.defaultof<uint32> && x.y = Unchecked.defaultof<uint32> && x.z = Unchecked.defaultof<uint32>

        static member Empty =
            VkDispatchIndirectCommand(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "x = %A" x.x
                sprintf "y = %A" x.y
                sprintf "z = %A" x.z
            ] |> sprintf "VkDispatchIndirectCommand { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDrawIndexedIndirectCommand =
    struct
        val mutable public indexCount : uint32
        val mutable public instanceCount : uint32
        val mutable public firstIndex : uint32
        val mutable public vertexOffset : int
        val mutable public firstInstance : uint32

        new(indexCount : uint32, instanceCount : uint32, firstIndex : uint32, vertexOffset : int, firstInstance : uint32) =
            {
                indexCount = indexCount
                instanceCount = instanceCount
                firstIndex = firstIndex
                vertexOffset = vertexOffset
                firstInstance = firstInstance
            }

        member x.IsEmpty =
            x.indexCount = Unchecked.defaultof<uint32> && x.instanceCount = Unchecked.defaultof<uint32> && x.firstIndex = Unchecked.defaultof<uint32> && x.vertexOffset = Unchecked.defaultof<int> && x.firstInstance = Unchecked.defaultof<uint32>

        static member Empty =
            VkDrawIndexedIndirectCommand(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<int>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "indexCount = %A" x.indexCount
                sprintf "instanceCount = %A" x.instanceCount
                sprintf "firstIndex = %A" x.firstIndex
                sprintf "vertexOffset = %A" x.vertexOffset
                sprintf "firstInstance = %A" x.firstInstance
            ] |> sprintf "VkDrawIndexedIndirectCommand { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkDrawIndirectCommand =
    struct
        val mutable public vertexCount : uint32
        val mutable public instanceCount : uint32
        val mutable public firstVertex : uint32
        val mutable public firstInstance : uint32

        new(vertexCount : uint32, instanceCount : uint32, firstVertex : uint32, firstInstance : uint32) =
            {
                vertexCount = vertexCount
                instanceCount = instanceCount
                firstVertex = firstVertex
                firstInstance = firstInstance
            }

        member x.IsEmpty =
            x.vertexCount = Unchecked.defaultof<uint32> && x.instanceCount = Unchecked.defaultof<uint32> && x.firstVertex = Unchecked.defaultof<uint32> && x.firstInstance = Unchecked.defaultof<uint32>

        static member Empty =
            VkDrawIndirectCommand(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "vertexCount = %A" x.vertexCount
                sprintf "instanceCount = %A" x.instanceCount
                sprintf "firstVertex = %A" x.firstVertex
                sprintf "firstInstance = %A" x.firstInstance
            ] |> sprintf "VkDrawIndirectCommand { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkEventCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkEventCreateFlags

        new(pNext : nativeint, flags : VkEventCreateFlags) =
            {
                sType = 10u
                pNext = pNext
                flags = flags
            }

        new(flags : VkEventCreateFlags) =
            VkEventCreateInfo(Unchecked.defaultof<nativeint>, flags)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkEventCreateFlags>

        static member Empty =
            VkEventCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkEventCreateFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkEventCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkExtensionProperties =
    struct
        val mutable public extensionName : String256
        val mutable public specVersion : uint32

        new(extensionName : String256, specVersion : uint32) =
            {
                extensionName = extensionName
                specVersion = specVersion
            }

        member x.IsEmpty =
            x.extensionName = Unchecked.defaultof<String256> && x.specVersion = Unchecked.defaultof<uint32>

        static member Empty =
            VkExtensionProperties(Unchecked.defaultof<String256>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "extensionName = %A" x.extensionName
                sprintf "specVersion = %A" x.specVersion
            ] |> sprintf "VkExtensionProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkFenceCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkFenceCreateFlags

        new(pNext : nativeint, flags : VkFenceCreateFlags) =
            {
                sType = 8u
                pNext = pNext
                flags = flags
            }

        new(flags : VkFenceCreateFlags) =
            VkFenceCreateInfo(Unchecked.defaultof<nativeint>, flags)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkFenceCreateFlags>

        static member Empty =
            VkFenceCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFenceCreateFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkFenceCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkFormatProperties =
    struct
        val mutable public linearTilingFeatures : VkFormatFeatureFlags
        val mutable public optimalTilingFeatures : VkFormatFeatureFlags
        val mutable public bufferFeatures : VkFormatFeatureFlags

        new(linearTilingFeatures : VkFormatFeatureFlags, optimalTilingFeatures : VkFormatFeatureFlags, bufferFeatures : VkFormatFeatureFlags) =
            {
                linearTilingFeatures = linearTilingFeatures
                optimalTilingFeatures = optimalTilingFeatures
                bufferFeatures = bufferFeatures
            }

        member x.IsEmpty =
            x.linearTilingFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.optimalTilingFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.bufferFeatures = Unchecked.defaultof<VkFormatFeatureFlags>

        static member Empty =
            VkFormatProperties(Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkFormatFeatureFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "linearTilingFeatures = %A" x.linearTilingFeatures
                sprintf "optimalTilingFeatures = %A" x.optimalTilingFeatures
                sprintf "bufferFeatures = %A" x.bufferFeatures
            ] |> sprintf "VkFormatProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkFramebufferCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkFramebufferCreateFlags
        val mutable public renderPass : VkRenderPass
        val mutable public attachmentCount : uint32
        val mutable public pAttachments : nativeptr<VkImageView>
        val mutable public width : uint32
        val mutable public height : uint32
        val mutable public layers : uint32

        new(pNext : nativeint, flags : VkFramebufferCreateFlags, renderPass : VkRenderPass, attachmentCount : uint32, pAttachments : nativeptr<VkImageView>, width : uint32, height : uint32, layers : uint32) =
            {
                sType = 37u
                pNext = pNext
                flags = flags
                renderPass = renderPass
                attachmentCount = attachmentCount
                pAttachments = pAttachments
                width = width
                height = height
                layers = layers
            }

        new(flags : VkFramebufferCreateFlags, renderPass : VkRenderPass, attachmentCount : uint32, pAttachments : nativeptr<VkImageView>, width : uint32, height : uint32, layers : uint32) =
            VkFramebufferCreateInfo(Unchecked.defaultof<nativeint>, flags, renderPass, attachmentCount, pAttachments, width, height, layers)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkFramebufferCreateFlags> && x.renderPass = Unchecked.defaultof<VkRenderPass> && x.attachmentCount = Unchecked.defaultof<uint32> && x.pAttachments = Unchecked.defaultof<nativeptr<VkImageView>> && x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32> && x.layers = Unchecked.defaultof<uint32>

        static member Empty =
            VkFramebufferCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFramebufferCreateFlags>, Unchecked.defaultof<VkRenderPass>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageView>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "renderPass = %A" x.renderPass
                sprintf "attachmentCount = %A" x.attachmentCount
                sprintf "pAttachments = %A" x.pAttachments
                sprintf "width = %A" x.width
                sprintf "height = %A" x.height
                sprintf "layers = %A" x.layers
            ] |> sprintf "VkFramebufferCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkVertexInputBindingDescription =
    struct
        val mutable public binding : uint32
        val mutable public stride : uint32
        val mutable public inputRate : VkVertexInputRate

        new(binding : uint32, stride : uint32, inputRate : VkVertexInputRate) =
            {
                binding = binding
                stride = stride
                inputRate = inputRate
            }

        member x.IsEmpty =
            x.binding = Unchecked.defaultof<uint32> && x.stride = Unchecked.defaultof<uint32> && x.inputRate = Unchecked.defaultof<VkVertexInputRate>

        static member Empty =
            VkVertexInputBindingDescription(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkVertexInputRate>)

        override x.ToString() =
            String.concat "; " [
                sprintf "binding = %A" x.binding
                sprintf "stride = %A" x.stride
                sprintf "inputRate = %A" x.inputRate
            ] |> sprintf "VkVertexInputBindingDescription { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkVertexInputAttributeDescription =
    struct
        val mutable public location : uint32
        val mutable public binding : uint32
        val mutable public format : VkFormat
        val mutable public offset : uint32

        new(location : uint32, binding : uint32, format : VkFormat, offset : uint32) =
            {
                location = location
                binding = binding
                format = format
                offset = offset
            }

        member x.IsEmpty =
            x.location = Unchecked.defaultof<uint32> && x.binding = Unchecked.defaultof<uint32> && x.format = Unchecked.defaultof<VkFormat> && x.offset = Unchecked.defaultof<uint32>

        static member Empty =
            VkVertexInputAttributeDescription(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "location = %A" x.location
                sprintf "binding = %A" x.binding
                sprintf "format = %A" x.format
                sprintf "offset = %A" x.offset
            ] |> sprintf "VkVertexInputAttributeDescription { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineVertexInputStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineVertexInputStateCreateFlags
        val mutable public vertexBindingDescriptionCount : uint32
        val mutable public pVertexBindingDescriptions : nativeptr<VkVertexInputBindingDescription>
        val mutable public vertexAttributeDescriptionCount : uint32
        val mutable public pVertexAttributeDescriptions : nativeptr<VkVertexInputAttributeDescription>

        new(pNext : nativeint, flags : VkPipelineVertexInputStateCreateFlags, vertexBindingDescriptionCount : uint32, pVertexBindingDescriptions : nativeptr<VkVertexInputBindingDescription>, vertexAttributeDescriptionCount : uint32, pVertexAttributeDescriptions : nativeptr<VkVertexInputAttributeDescription>) =
            {
                sType = 19u
                pNext = pNext
                flags = flags
                vertexBindingDescriptionCount = vertexBindingDescriptionCount
                pVertexBindingDescriptions = pVertexBindingDescriptions
                vertexAttributeDescriptionCount = vertexAttributeDescriptionCount
                pVertexAttributeDescriptions = pVertexAttributeDescriptions
            }

        new(flags : VkPipelineVertexInputStateCreateFlags, vertexBindingDescriptionCount : uint32, pVertexBindingDescriptions : nativeptr<VkVertexInputBindingDescription>, vertexAttributeDescriptionCount : uint32, pVertexAttributeDescriptions : nativeptr<VkVertexInputAttributeDescription>) =
            VkPipelineVertexInputStateCreateInfo(Unchecked.defaultof<nativeint>, flags, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineVertexInputStateCreateFlags> && x.vertexBindingDescriptionCount = Unchecked.defaultof<uint32> && x.pVertexBindingDescriptions = Unchecked.defaultof<nativeptr<VkVertexInputBindingDescription>> && x.vertexAttributeDescriptionCount = Unchecked.defaultof<uint32> && x.pVertexAttributeDescriptions = Unchecked.defaultof<nativeptr<VkVertexInputAttributeDescription>>

        static member Empty =
            VkPipelineVertexInputStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineVertexInputStateCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVertexInputBindingDescription>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVertexInputAttributeDescription>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "vertexBindingDescriptionCount = %A" x.vertexBindingDescriptionCount
                sprintf "pVertexBindingDescriptions = %A" x.pVertexBindingDescriptions
                sprintf "vertexAttributeDescriptionCount = %A" x.vertexAttributeDescriptionCount
                sprintf "pVertexAttributeDescriptions = %A" x.pVertexAttributeDescriptions
            ] |> sprintf "VkPipelineVertexInputStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineInputAssemblyStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineInputAssemblyStateCreateFlags
        val mutable public topology : VkPrimitiveTopology
        val mutable public primitiveRestartEnable : VkBool32

        new(pNext : nativeint, flags : VkPipelineInputAssemblyStateCreateFlags, topology : VkPrimitiveTopology, primitiveRestartEnable : VkBool32) =
            {
                sType = 20u
                pNext = pNext
                flags = flags
                topology = topology
                primitiveRestartEnable = primitiveRestartEnable
            }

        new(flags : VkPipelineInputAssemblyStateCreateFlags, topology : VkPrimitiveTopology, primitiveRestartEnable : VkBool32) =
            VkPipelineInputAssemblyStateCreateInfo(Unchecked.defaultof<nativeint>, flags, topology, primitiveRestartEnable)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineInputAssemblyStateCreateFlags> && x.topology = Unchecked.defaultof<VkPrimitiveTopology> && x.primitiveRestartEnable = Unchecked.defaultof<VkBool32>

        static member Empty =
            VkPipelineInputAssemblyStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineInputAssemblyStateCreateFlags>, Unchecked.defaultof<VkPrimitiveTopology>, Unchecked.defaultof<VkBool32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "topology = %A" x.topology
                sprintf "primitiveRestartEnable = %A" x.primitiveRestartEnable
            ] |> sprintf "VkPipelineInputAssemblyStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineTessellationStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineTessellationStateCreateFlags
        val mutable public patchControlPoints : uint32

        new(pNext : nativeint, flags : VkPipelineTessellationStateCreateFlags, patchControlPoints : uint32) =
            {
                sType = 21u
                pNext = pNext
                flags = flags
                patchControlPoints = patchControlPoints
            }

        new(flags : VkPipelineTessellationStateCreateFlags, patchControlPoints : uint32) =
            VkPipelineTessellationStateCreateInfo(Unchecked.defaultof<nativeint>, flags, patchControlPoints)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineTessellationStateCreateFlags> && x.patchControlPoints = Unchecked.defaultof<uint32>

        static member Empty =
            VkPipelineTessellationStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineTessellationStateCreateFlags>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "patchControlPoints = %A" x.patchControlPoints
            ] |> sprintf "VkPipelineTessellationStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkViewport =
    struct
        val mutable public x : float32
        val mutable public y : float32
        val mutable public width : float32
        val mutable public height : float32
        val mutable public minDepth : float32
        val mutable public maxDepth : float32

        new(x : float32, y : float32, width : float32, height : float32, minDepth : float32, maxDepth : float32) =
            {
                x = x
                y = y
                width = width
                height = height
                minDepth = minDepth
                maxDepth = maxDepth
            }

        member x.IsEmpty =
            x.x = Unchecked.defaultof<float32> && x.y = Unchecked.defaultof<float32> && x.width = Unchecked.defaultof<float32> && x.height = Unchecked.defaultof<float32> && x.minDepth = Unchecked.defaultof<float32> && x.maxDepth = Unchecked.defaultof<float32>

        static member Empty =
            VkViewport(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "x = %A" x.x
                sprintf "y = %A" x.y
                sprintf "width = %A" x.width
                sprintf "height = %A" x.height
                sprintf "minDepth = %A" x.minDepth
                sprintf "maxDepth = %A" x.maxDepth
            ] |> sprintf "VkViewport { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineViewportStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineViewportStateCreateFlags
        val mutable public viewportCount : uint32
        val mutable public pViewports : nativeptr<VkViewport>
        val mutable public scissorCount : uint32
        val mutable public pScissors : nativeptr<VkRect2D>

        new(pNext : nativeint, flags : VkPipelineViewportStateCreateFlags, viewportCount : uint32, pViewports : nativeptr<VkViewport>, scissorCount : uint32, pScissors : nativeptr<VkRect2D>) =
            {
                sType = 22u
                pNext = pNext
                flags = flags
                viewportCount = viewportCount
                pViewports = pViewports
                scissorCount = scissorCount
                pScissors = pScissors
            }

        new(flags : VkPipelineViewportStateCreateFlags, viewportCount : uint32, pViewports : nativeptr<VkViewport>, scissorCount : uint32, pScissors : nativeptr<VkRect2D>) =
            VkPipelineViewportStateCreateInfo(Unchecked.defaultof<nativeint>, flags, viewportCount, pViewports, scissorCount, pScissors)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineViewportStateCreateFlags> && x.viewportCount = Unchecked.defaultof<uint32> && x.pViewports = Unchecked.defaultof<nativeptr<VkViewport>> && x.scissorCount = Unchecked.defaultof<uint32> && x.pScissors = Unchecked.defaultof<nativeptr<VkRect2D>>

        static member Empty =
            VkPipelineViewportStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineViewportStateCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkViewport>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRect2D>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "viewportCount = %A" x.viewportCount
                sprintf "pViewports = %A" x.pViewports
                sprintf "scissorCount = %A" x.scissorCount
                sprintf "pScissors = %A" x.pScissors
            ] |> sprintf "VkPipelineViewportStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineRasterizationStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineRasterizationStateCreateFlags
        val mutable public depthClampEnable : VkBool32
        val mutable public rasterizerDiscardEnable : VkBool32
        val mutable public polygonMode : VkPolygonMode
        val mutable public cullMode : VkCullModeFlags
        val mutable public frontFace : VkFrontFace
        val mutable public depthBiasEnable : VkBool32
        val mutable public depthBiasConstantFactor : float32
        val mutable public depthBiasClamp : float32
        val mutable public depthBiasSlopeFactor : float32
        val mutable public lineWidth : float32

        new(pNext : nativeint, flags : VkPipelineRasterizationStateCreateFlags, depthClampEnable : VkBool32, rasterizerDiscardEnable : VkBool32, polygonMode : VkPolygonMode, cullMode : VkCullModeFlags, frontFace : VkFrontFace, depthBiasEnable : VkBool32, depthBiasConstantFactor : float32, depthBiasClamp : float32, depthBiasSlopeFactor : float32, lineWidth : float32) =
            {
                sType = 23u
                pNext = pNext
                flags = flags
                depthClampEnable = depthClampEnable
                rasterizerDiscardEnable = rasterizerDiscardEnable
                polygonMode = polygonMode
                cullMode = cullMode
                frontFace = frontFace
                depthBiasEnable = depthBiasEnable
                depthBiasConstantFactor = depthBiasConstantFactor
                depthBiasClamp = depthBiasClamp
                depthBiasSlopeFactor = depthBiasSlopeFactor
                lineWidth = lineWidth
            }

        new(flags : VkPipelineRasterizationStateCreateFlags, depthClampEnable : VkBool32, rasterizerDiscardEnable : VkBool32, polygonMode : VkPolygonMode, cullMode : VkCullModeFlags, frontFace : VkFrontFace, depthBiasEnable : VkBool32, depthBiasConstantFactor : float32, depthBiasClamp : float32, depthBiasSlopeFactor : float32, lineWidth : float32) =
            VkPipelineRasterizationStateCreateInfo(Unchecked.defaultof<nativeint>, flags, depthClampEnable, rasterizerDiscardEnable, polygonMode, cullMode, frontFace, depthBiasEnable, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor, lineWidth)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineRasterizationStateCreateFlags> && x.depthClampEnable = Unchecked.defaultof<VkBool32> && x.rasterizerDiscardEnable = Unchecked.defaultof<VkBool32> && x.polygonMode = Unchecked.defaultof<VkPolygonMode> && x.cullMode = Unchecked.defaultof<VkCullModeFlags> && x.frontFace = Unchecked.defaultof<VkFrontFace> && x.depthBiasEnable = Unchecked.defaultof<VkBool32> && x.depthBiasConstantFactor = Unchecked.defaultof<float32> && x.depthBiasClamp = Unchecked.defaultof<float32> && x.depthBiasSlopeFactor = Unchecked.defaultof<float32> && x.lineWidth = Unchecked.defaultof<float32>

        static member Empty =
            VkPipelineRasterizationStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineRasterizationStateCreateFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkPolygonMode>, Unchecked.defaultof<VkCullModeFlags>, Unchecked.defaultof<VkFrontFace>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "depthClampEnable = %A" x.depthClampEnable
                sprintf "rasterizerDiscardEnable = %A" x.rasterizerDiscardEnable
                sprintf "polygonMode = %A" x.polygonMode
                sprintf "cullMode = %A" x.cullMode
                sprintf "frontFace = %A" x.frontFace
                sprintf "depthBiasEnable = %A" x.depthBiasEnable
                sprintf "depthBiasConstantFactor = %A" x.depthBiasConstantFactor
                sprintf "depthBiasClamp = %A" x.depthBiasClamp
                sprintf "depthBiasSlopeFactor = %A" x.depthBiasSlopeFactor
                sprintf "lineWidth = %A" x.lineWidth
            ] |> sprintf "VkPipelineRasterizationStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineMultisampleStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineMultisampleStateCreateFlags
        val mutable public rasterizationSamples : VkSampleCountFlags
        val mutable public sampleShadingEnable : VkBool32
        val mutable public minSampleShading : float32
        val mutable public pSampleMask : nativeptr<VkSampleMask>
        val mutable public alphaToCoverageEnable : VkBool32
        val mutable public alphaToOneEnable : VkBool32

        new(pNext : nativeint, flags : VkPipelineMultisampleStateCreateFlags, rasterizationSamples : VkSampleCountFlags, sampleShadingEnable : VkBool32, minSampleShading : float32, pSampleMask : nativeptr<VkSampleMask>, alphaToCoverageEnable : VkBool32, alphaToOneEnable : VkBool32) =
            {
                sType = 24u
                pNext = pNext
                flags = flags
                rasterizationSamples = rasterizationSamples
                sampleShadingEnable = sampleShadingEnable
                minSampleShading = minSampleShading
                pSampleMask = pSampleMask
                alphaToCoverageEnable = alphaToCoverageEnable
                alphaToOneEnable = alphaToOneEnable
            }

        new(flags : VkPipelineMultisampleStateCreateFlags, rasterizationSamples : VkSampleCountFlags, sampleShadingEnable : VkBool32, minSampleShading : float32, pSampleMask : nativeptr<VkSampleMask>, alphaToCoverageEnable : VkBool32, alphaToOneEnable : VkBool32) =
            VkPipelineMultisampleStateCreateInfo(Unchecked.defaultof<nativeint>, flags, rasterizationSamples, sampleShadingEnable, minSampleShading, pSampleMask, alphaToCoverageEnable, alphaToOneEnable)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineMultisampleStateCreateFlags> && x.rasterizationSamples = Unchecked.defaultof<VkSampleCountFlags> && x.sampleShadingEnable = Unchecked.defaultof<VkBool32> && x.minSampleShading = Unchecked.defaultof<float32> && x.pSampleMask = Unchecked.defaultof<nativeptr<VkSampleMask>> && x.alphaToCoverageEnable = Unchecked.defaultof<VkBool32> && x.alphaToOneEnable = Unchecked.defaultof<VkBool32>

        static member Empty =
            VkPipelineMultisampleStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineMultisampleStateCreateFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<float32>, Unchecked.defaultof<nativeptr<VkSampleMask>>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "rasterizationSamples = %A" x.rasterizationSamples
                sprintf "sampleShadingEnable = %A" x.sampleShadingEnable
                sprintf "minSampleShading = %A" x.minSampleShading
                sprintf "pSampleMask = %A" x.pSampleMask
                sprintf "alphaToCoverageEnable = %A" x.alphaToCoverageEnable
                sprintf "alphaToOneEnable = %A" x.alphaToOneEnable
            ] |> sprintf "VkPipelineMultisampleStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkStencilOpState =
    struct
        val mutable public failOp : VkStencilOp
        val mutable public passOp : VkStencilOp
        val mutable public depthFailOp : VkStencilOp
        val mutable public compareOp : VkCompareOp
        val mutable public compareMask : uint32
        val mutable public writeMask : uint32
        val mutable public reference : uint32

        new(failOp : VkStencilOp, passOp : VkStencilOp, depthFailOp : VkStencilOp, compareOp : VkCompareOp, compareMask : uint32, writeMask : uint32, reference : uint32) =
            {
                failOp = failOp
                passOp = passOp
                depthFailOp = depthFailOp
                compareOp = compareOp
                compareMask = compareMask
                writeMask = writeMask
                reference = reference
            }

        member x.IsEmpty =
            x.failOp = Unchecked.defaultof<VkStencilOp> && x.passOp = Unchecked.defaultof<VkStencilOp> && x.depthFailOp = Unchecked.defaultof<VkStencilOp> && x.compareOp = Unchecked.defaultof<VkCompareOp> && x.compareMask = Unchecked.defaultof<uint32> && x.writeMask = Unchecked.defaultof<uint32> && x.reference = Unchecked.defaultof<uint32>

        static member Empty =
            VkStencilOpState(Unchecked.defaultof<VkStencilOp>, Unchecked.defaultof<VkStencilOp>, Unchecked.defaultof<VkStencilOp>, Unchecked.defaultof<VkCompareOp>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "failOp = %A" x.failOp
                sprintf "passOp = %A" x.passOp
                sprintf "depthFailOp = %A" x.depthFailOp
                sprintf "compareOp = %A" x.compareOp
                sprintf "compareMask = %A" x.compareMask
                sprintf "writeMask = %A" x.writeMask
                sprintf "reference = %A" x.reference
            ] |> sprintf "VkStencilOpState { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineDepthStencilStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineDepthStencilStateCreateFlags
        val mutable public depthTestEnable : VkBool32
        val mutable public depthWriteEnable : VkBool32
        val mutable public depthCompareOp : VkCompareOp
        val mutable public depthBoundsTestEnable : VkBool32
        val mutable public stencilTestEnable : VkBool32
        val mutable public front : VkStencilOpState
        val mutable public back : VkStencilOpState
        val mutable public minDepthBounds : float32
        val mutable public maxDepthBounds : float32

        new(pNext : nativeint, flags : VkPipelineDepthStencilStateCreateFlags, depthTestEnable : VkBool32, depthWriteEnable : VkBool32, depthCompareOp : VkCompareOp, depthBoundsTestEnable : VkBool32, stencilTestEnable : VkBool32, front : VkStencilOpState, back : VkStencilOpState, minDepthBounds : float32, maxDepthBounds : float32) =
            {
                sType = 25u
                pNext = pNext
                flags = flags
                depthTestEnable = depthTestEnable
                depthWriteEnable = depthWriteEnable
                depthCompareOp = depthCompareOp
                depthBoundsTestEnable = depthBoundsTestEnable
                stencilTestEnable = stencilTestEnable
                front = front
                back = back
                minDepthBounds = minDepthBounds
                maxDepthBounds = maxDepthBounds
            }

        new(flags : VkPipelineDepthStencilStateCreateFlags, depthTestEnable : VkBool32, depthWriteEnable : VkBool32, depthCompareOp : VkCompareOp, depthBoundsTestEnable : VkBool32, stencilTestEnable : VkBool32, front : VkStencilOpState, back : VkStencilOpState, minDepthBounds : float32, maxDepthBounds : float32) =
            VkPipelineDepthStencilStateCreateInfo(Unchecked.defaultof<nativeint>, flags, depthTestEnable, depthWriteEnable, depthCompareOp, depthBoundsTestEnable, stencilTestEnable, front, back, minDepthBounds, maxDepthBounds)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineDepthStencilStateCreateFlags> && x.depthTestEnable = Unchecked.defaultof<VkBool32> && x.depthWriteEnable = Unchecked.defaultof<VkBool32> && x.depthCompareOp = Unchecked.defaultof<VkCompareOp> && x.depthBoundsTestEnable = Unchecked.defaultof<VkBool32> && x.stencilTestEnable = Unchecked.defaultof<VkBool32> && x.front = Unchecked.defaultof<VkStencilOpState> && x.back = Unchecked.defaultof<VkStencilOpState> && x.minDepthBounds = Unchecked.defaultof<float32> && x.maxDepthBounds = Unchecked.defaultof<float32>

        static member Empty =
            VkPipelineDepthStencilStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineDepthStencilStateCreateFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkCompareOp>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkStencilOpState>, Unchecked.defaultof<VkStencilOpState>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "depthTestEnable = %A" x.depthTestEnable
                sprintf "depthWriteEnable = %A" x.depthWriteEnable
                sprintf "depthCompareOp = %A" x.depthCompareOp
                sprintf "depthBoundsTestEnable = %A" x.depthBoundsTestEnable
                sprintf "stencilTestEnable = %A" x.stencilTestEnable
                sprintf "front = %A" x.front
                sprintf "back = %A" x.back
                sprintf "minDepthBounds = %A" x.minDepthBounds
                sprintf "maxDepthBounds = %A" x.maxDepthBounds
            ] |> sprintf "VkPipelineDepthStencilStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineColorBlendAttachmentState =
    struct
        val mutable public blendEnable : VkBool32
        val mutable public srcColorBlendFactor : VkBlendFactor
        val mutable public dstColorBlendFactor : VkBlendFactor
        val mutable public colorBlendOp : VkBlendOp
        val mutable public srcAlphaBlendFactor : VkBlendFactor
        val mutable public dstAlphaBlendFactor : VkBlendFactor
        val mutable public alphaBlendOp : VkBlendOp
        val mutable public colorWriteMask : VkColorComponentFlags

        new(blendEnable : VkBool32, srcColorBlendFactor : VkBlendFactor, dstColorBlendFactor : VkBlendFactor, colorBlendOp : VkBlendOp, srcAlphaBlendFactor : VkBlendFactor, dstAlphaBlendFactor : VkBlendFactor, alphaBlendOp : VkBlendOp, colorWriteMask : VkColorComponentFlags) =
            {
                blendEnable = blendEnable
                srcColorBlendFactor = srcColorBlendFactor
                dstColorBlendFactor = dstColorBlendFactor
                colorBlendOp = colorBlendOp
                srcAlphaBlendFactor = srcAlphaBlendFactor
                dstAlphaBlendFactor = dstAlphaBlendFactor
                alphaBlendOp = alphaBlendOp
                colorWriteMask = colorWriteMask
            }

        member x.IsEmpty =
            x.blendEnable = Unchecked.defaultof<VkBool32> && x.srcColorBlendFactor = Unchecked.defaultof<VkBlendFactor> && x.dstColorBlendFactor = Unchecked.defaultof<VkBlendFactor> && x.colorBlendOp = Unchecked.defaultof<VkBlendOp> && x.srcAlphaBlendFactor = Unchecked.defaultof<VkBlendFactor> && x.dstAlphaBlendFactor = Unchecked.defaultof<VkBlendFactor> && x.alphaBlendOp = Unchecked.defaultof<VkBlendOp> && x.colorWriteMask = Unchecked.defaultof<VkColorComponentFlags>

        static member Empty =
            VkPipelineColorBlendAttachmentState(Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBlendFactor>, Unchecked.defaultof<VkBlendFactor>, Unchecked.defaultof<VkBlendOp>, Unchecked.defaultof<VkBlendFactor>, Unchecked.defaultof<VkBlendFactor>, Unchecked.defaultof<VkBlendOp>, Unchecked.defaultof<VkColorComponentFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "blendEnable = %A" x.blendEnable
                sprintf "srcColorBlendFactor = %A" x.srcColorBlendFactor
                sprintf "dstColorBlendFactor = %A" x.dstColorBlendFactor
                sprintf "colorBlendOp = %A" x.colorBlendOp
                sprintf "srcAlphaBlendFactor = %A" x.srcAlphaBlendFactor
                sprintf "dstAlphaBlendFactor = %A" x.dstAlphaBlendFactor
                sprintf "alphaBlendOp = %A" x.alphaBlendOp
                sprintf "colorWriteMask = %A" x.colorWriteMask
            ] |> sprintf "VkPipelineColorBlendAttachmentState { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineColorBlendStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineColorBlendStateCreateFlags
        val mutable public logicOpEnable : VkBool32
        val mutable public logicOp : VkLogicOp
        val mutable public attachmentCount : uint32
        val mutable public pAttachments : nativeptr<VkPipelineColorBlendAttachmentState>
        val mutable public blendConstants : V4f

        new(pNext : nativeint, flags : VkPipelineColorBlendStateCreateFlags, logicOpEnable : VkBool32, logicOp : VkLogicOp, attachmentCount : uint32, pAttachments : nativeptr<VkPipelineColorBlendAttachmentState>, blendConstants : V4f) =
            {
                sType = 26u
                pNext = pNext
                flags = flags
                logicOpEnable = logicOpEnable
                logicOp = logicOp
                attachmentCount = attachmentCount
                pAttachments = pAttachments
                blendConstants = blendConstants
            }

        new(flags : VkPipelineColorBlendStateCreateFlags, logicOpEnable : VkBool32, logicOp : VkLogicOp, attachmentCount : uint32, pAttachments : nativeptr<VkPipelineColorBlendAttachmentState>, blendConstants : V4f) =
            VkPipelineColorBlendStateCreateInfo(Unchecked.defaultof<nativeint>, flags, logicOpEnable, logicOp, attachmentCount, pAttachments, blendConstants)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineColorBlendStateCreateFlags> && x.logicOpEnable = Unchecked.defaultof<VkBool32> && x.logicOp = Unchecked.defaultof<VkLogicOp> && x.attachmentCount = Unchecked.defaultof<uint32> && x.pAttachments = Unchecked.defaultof<nativeptr<VkPipelineColorBlendAttachmentState>> && x.blendConstants = Unchecked.defaultof<V4f>

        static member Empty =
            VkPipelineColorBlendStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineColorBlendStateCreateFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkLogicOp>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineColorBlendAttachmentState>>, Unchecked.defaultof<V4f>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "logicOpEnable = %A" x.logicOpEnable
                sprintf "logicOp = %A" x.logicOp
                sprintf "attachmentCount = %A" x.attachmentCount
                sprintf "pAttachments = %A" x.pAttachments
                sprintf "blendConstants = %A" x.blendConstants
            ] |> sprintf "VkPipelineColorBlendStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineDynamicStateCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineDynamicStateCreateFlags
        val mutable public dynamicStateCount : uint32
        val mutable public pDynamicStates : nativeptr<VkDynamicState>

        new(pNext : nativeint, flags : VkPipelineDynamicStateCreateFlags, dynamicStateCount : uint32, pDynamicStates : nativeptr<VkDynamicState>) =
            {
                sType = 27u
                pNext = pNext
                flags = flags
                dynamicStateCount = dynamicStateCount
                pDynamicStates = pDynamicStates
            }

        new(flags : VkPipelineDynamicStateCreateFlags, dynamicStateCount : uint32, pDynamicStates : nativeptr<VkDynamicState>) =
            VkPipelineDynamicStateCreateInfo(Unchecked.defaultof<nativeint>, flags, dynamicStateCount, pDynamicStates)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineDynamicStateCreateFlags> && x.dynamicStateCount = Unchecked.defaultof<uint32> && x.pDynamicStates = Unchecked.defaultof<nativeptr<VkDynamicState>>

        static member Empty =
            VkPipelineDynamicStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineDynamicStateCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDynamicState>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "dynamicStateCount = %A" x.dynamicStateCount
                sprintf "pDynamicStates = %A" x.pDynamicStates
            ] |> sprintf "VkPipelineDynamicStateCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkGraphicsPipelineCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineCreateFlags
        val mutable public stageCount : uint32
        val mutable public pStages : nativeptr<VkPipelineShaderStageCreateInfo>
        val mutable public pVertexInputState : nativeptr<VkPipelineVertexInputStateCreateInfo>
        val mutable public pInputAssemblyState : nativeptr<VkPipelineInputAssemblyStateCreateInfo>
        val mutable public pTessellationState : nativeptr<VkPipelineTessellationStateCreateInfo>
        val mutable public pViewportState : nativeptr<VkPipelineViewportStateCreateInfo>
        val mutable public pRasterizationState : nativeptr<VkPipelineRasterizationStateCreateInfo>
        val mutable public pMultisampleState : nativeptr<VkPipelineMultisampleStateCreateInfo>
        val mutable public pDepthStencilState : nativeptr<VkPipelineDepthStencilStateCreateInfo>
        val mutable public pColorBlendState : nativeptr<VkPipelineColorBlendStateCreateInfo>
        val mutable public pDynamicState : nativeptr<VkPipelineDynamicStateCreateInfo>
        val mutable public layout : VkPipelineLayout
        val mutable public renderPass : VkRenderPass
        val mutable public subpass : uint32
        val mutable public basePipelineHandle : VkPipeline
        val mutable public basePipelineIndex : int

        new(pNext : nativeint, flags : VkPipelineCreateFlags, stageCount : uint32, pStages : nativeptr<VkPipelineShaderStageCreateInfo>, pVertexInputState : nativeptr<VkPipelineVertexInputStateCreateInfo>, pInputAssemblyState : nativeptr<VkPipelineInputAssemblyStateCreateInfo>, pTessellationState : nativeptr<VkPipelineTessellationStateCreateInfo>, pViewportState : nativeptr<VkPipelineViewportStateCreateInfo>, pRasterizationState : nativeptr<VkPipelineRasterizationStateCreateInfo>, pMultisampleState : nativeptr<VkPipelineMultisampleStateCreateInfo>, pDepthStencilState : nativeptr<VkPipelineDepthStencilStateCreateInfo>, pColorBlendState : nativeptr<VkPipelineColorBlendStateCreateInfo>, pDynamicState : nativeptr<VkPipelineDynamicStateCreateInfo>, layout : VkPipelineLayout, renderPass : VkRenderPass, subpass : uint32, basePipelineHandle : VkPipeline, basePipelineIndex : int) =
            {
                sType = 28u
                pNext = pNext
                flags = flags
                stageCount = stageCount
                pStages = pStages
                pVertexInputState = pVertexInputState
                pInputAssemblyState = pInputAssemblyState
                pTessellationState = pTessellationState
                pViewportState = pViewportState
                pRasterizationState = pRasterizationState
                pMultisampleState = pMultisampleState
                pDepthStencilState = pDepthStencilState
                pColorBlendState = pColorBlendState
                pDynamicState = pDynamicState
                layout = layout
                renderPass = renderPass
                subpass = subpass
                basePipelineHandle = basePipelineHandle
                basePipelineIndex = basePipelineIndex
            }

        new(flags : VkPipelineCreateFlags, stageCount : uint32, pStages : nativeptr<VkPipelineShaderStageCreateInfo>, pVertexInputState : nativeptr<VkPipelineVertexInputStateCreateInfo>, pInputAssemblyState : nativeptr<VkPipelineInputAssemblyStateCreateInfo>, pTessellationState : nativeptr<VkPipelineTessellationStateCreateInfo>, pViewportState : nativeptr<VkPipelineViewportStateCreateInfo>, pRasterizationState : nativeptr<VkPipelineRasterizationStateCreateInfo>, pMultisampleState : nativeptr<VkPipelineMultisampleStateCreateInfo>, pDepthStencilState : nativeptr<VkPipelineDepthStencilStateCreateInfo>, pColorBlendState : nativeptr<VkPipelineColorBlendStateCreateInfo>, pDynamicState : nativeptr<VkPipelineDynamicStateCreateInfo>, layout : VkPipelineLayout, renderPass : VkRenderPass, subpass : uint32, basePipelineHandle : VkPipeline, basePipelineIndex : int) =
            VkGraphicsPipelineCreateInfo(Unchecked.defaultof<nativeint>, flags, stageCount, pStages, pVertexInputState, pInputAssemblyState, pTessellationState, pViewportState, pRasterizationState, pMultisampleState, pDepthStencilState, pColorBlendState, pDynamicState, layout, renderPass, subpass, basePipelineHandle, basePipelineIndex)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCreateFlags> && x.stageCount = Unchecked.defaultof<uint32> && x.pStages = Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>> && x.pVertexInputState = Unchecked.defaultof<nativeptr<VkPipelineVertexInputStateCreateInfo>> && x.pInputAssemblyState = Unchecked.defaultof<nativeptr<VkPipelineInputAssemblyStateCreateInfo>> && x.pTessellationState = Unchecked.defaultof<nativeptr<VkPipelineTessellationStateCreateInfo>> && x.pViewportState = Unchecked.defaultof<nativeptr<VkPipelineViewportStateCreateInfo>> && x.pRasterizationState = Unchecked.defaultof<nativeptr<VkPipelineRasterizationStateCreateInfo>> && x.pMultisampleState = Unchecked.defaultof<nativeptr<VkPipelineMultisampleStateCreateInfo>> && x.pDepthStencilState = Unchecked.defaultof<nativeptr<VkPipelineDepthStencilStateCreateInfo>> && x.pColorBlendState = Unchecked.defaultof<nativeptr<VkPipelineColorBlendStateCreateInfo>> && x.pDynamicState = Unchecked.defaultof<nativeptr<VkPipelineDynamicStateCreateInfo>> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.renderPass = Unchecked.defaultof<VkRenderPass> && x.subpass = Unchecked.defaultof<uint32> && x.basePipelineHandle = Unchecked.defaultof<VkPipeline> && x.basePipelineIndex = Unchecked.defaultof<int>

        static member Empty =
            VkGraphicsPipelineCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineVertexInputStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineInputAssemblyStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineTessellationStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineViewportStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineRasterizationStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineMultisampleStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineDepthStencilStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineColorBlendStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineDynamicStateCreateInfo>>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<VkRenderPass>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<int>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "stageCount = %A" x.stageCount
                sprintf "pStages = %A" x.pStages
                sprintf "pVertexInputState = %A" x.pVertexInputState
                sprintf "pInputAssemblyState = %A" x.pInputAssemblyState
                sprintf "pTessellationState = %A" x.pTessellationState
                sprintf "pViewportState = %A" x.pViewportState
                sprintf "pRasterizationState = %A" x.pRasterizationState
                sprintf "pMultisampleState = %A" x.pMultisampleState
                sprintf "pDepthStencilState = %A" x.pDepthStencilState
                sprintf "pColorBlendState = %A" x.pColorBlendState
                sprintf "pDynamicState = %A" x.pDynamicState
                sprintf "layout = %A" x.layout
                sprintf "renderPass = %A" x.renderPass
                sprintf "subpass = %A" x.subpass
                sprintf "basePipelineHandle = %A" x.basePipelineHandle
                sprintf "basePipelineIndex = %A" x.basePipelineIndex
            ] |> sprintf "VkGraphicsPipelineCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageBlit =
    struct
        val mutable public srcSubresource : VkImageSubresourceLayers
        val mutable public srcOffsets : VkOffset3D_2
        val mutable public dstSubresource : VkImageSubresourceLayers
        val mutable public dstOffsets : VkOffset3D_2

        new(srcSubresource : VkImageSubresourceLayers, srcOffsets : VkOffset3D_2, dstSubresource : VkImageSubresourceLayers, dstOffsets : VkOffset3D_2) =
            {
                srcSubresource = srcSubresource
                srcOffsets = srcOffsets
                dstSubresource = dstSubresource
                dstOffsets = dstOffsets
            }

        member x.IsEmpty =
            x.srcSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.srcOffsets = Unchecked.defaultof<VkOffset3D_2> && x.dstSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.dstOffsets = Unchecked.defaultof<VkOffset3D_2>

        static member Empty =
            VkImageBlit(Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D_2>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D_2>)

        override x.ToString() =
            String.concat "; " [
                sprintf "srcSubresource = %A" x.srcSubresource
                sprintf "srcOffsets = %A" x.srcOffsets
                sprintf "dstSubresource = %A" x.dstSubresource
                sprintf "dstOffsets = %A" x.dstOffsets
            ] |> sprintf "VkImageBlit { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageCopy =
    struct
        val mutable public srcSubresource : VkImageSubresourceLayers
        val mutable public srcOffset : VkOffset3D
        val mutable public dstSubresource : VkImageSubresourceLayers
        val mutable public dstOffset : VkOffset3D
        val mutable public extent : VkExtent3D

        new(srcSubresource : VkImageSubresourceLayers, srcOffset : VkOffset3D, dstSubresource : VkImageSubresourceLayers, dstOffset : VkOffset3D, extent : VkExtent3D) =
            {
                srcSubresource = srcSubresource
                srcOffset = srcOffset
                dstSubresource = dstSubresource
                dstOffset = dstOffset
                extent = extent
            }

        member x.IsEmpty =
            x.srcSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.srcOffset = Unchecked.defaultof<VkOffset3D> && x.dstSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.dstOffset = Unchecked.defaultof<VkOffset3D> && x.extent = Unchecked.defaultof<VkExtent3D>

        static member Empty =
            VkImageCopy(Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

        override x.ToString() =
            String.concat "; " [
                sprintf "srcSubresource = %A" x.srcSubresource
                sprintf "srcOffset = %A" x.srcOffset
                sprintf "dstSubresource = %A" x.dstSubresource
                sprintf "dstOffset = %A" x.dstOffset
                sprintf "extent = %A" x.extent
            ] |> sprintf "VkImageCopy { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkImageCreateFlags
        val mutable public imageType : VkImageType
        val mutable public format : VkFormat
        val mutable public extent : VkExtent3D
        val mutable public mipLevels : uint32
        val mutable public arrayLayers : uint32
        val mutable public samples : VkSampleCountFlags
        val mutable public tiling : VkImageTiling
        val mutable public usage : VkImageUsageFlags
        val mutable public sharingMode : VkSharingMode
        val mutable public queueFamilyIndexCount : uint32
        val mutable public pQueueFamilyIndices : nativeptr<uint32>
        val mutable public initialLayout : VkImageLayout

        new(pNext : nativeint, flags : VkImageCreateFlags, imageType : VkImageType, format : VkFormat, extent : VkExtent3D, mipLevels : uint32, arrayLayers : uint32, samples : VkSampleCountFlags, tiling : VkImageTiling, usage : VkImageUsageFlags, sharingMode : VkSharingMode, queueFamilyIndexCount : uint32, pQueueFamilyIndices : nativeptr<uint32>, initialLayout : VkImageLayout) =
            {
                sType = 14u
                pNext = pNext
                flags = flags
                imageType = imageType
                format = format
                extent = extent
                mipLevels = mipLevels
                arrayLayers = arrayLayers
                samples = samples
                tiling = tiling
                usage = usage
                sharingMode = sharingMode
                queueFamilyIndexCount = queueFamilyIndexCount
                pQueueFamilyIndices = pQueueFamilyIndices
                initialLayout = initialLayout
            }

        new(flags : VkImageCreateFlags, imageType : VkImageType, format : VkFormat, extent : VkExtent3D, mipLevels : uint32, arrayLayers : uint32, samples : VkSampleCountFlags, tiling : VkImageTiling, usage : VkImageUsageFlags, sharingMode : VkSharingMode, queueFamilyIndexCount : uint32, pQueueFamilyIndices : nativeptr<uint32>, initialLayout : VkImageLayout) =
            VkImageCreateInfo(Unchecked.defaultof<nativeint>, flags, imageType, format, extent, mipLevels, arrayLayers, samples, tiling, usage, sharingMode, queueFamilyIndexCount, pQueueFamilyIndices, initialLayout)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkImageCreateFlags> && x.imageType = Unchecked.defaultof<VkImageType> && x.format = Unchecked.defaultof<VkFormat> && x.extent = Unchecked.defaultof<VkExtent3D> && x.mipLevels = Unchecked.defaultof<uint32> && x.arrayLayers = Unchecked.defaultof<uint32> && x.samples = Unchecked.defaultof<VkSampleCountFlags> && x.tiling = Unchecked.defaultof<VkImageTiling> && x.usage = Unchecked.defaultof<VkImageUsageFlags> && x.sharingMode = Unchecked.defaultof<VkSharingMode> && x.queueFamilyIndexCount = Unchecked.defaultof<uint32> && x.pQueueFamilyIndices = Unchecked.defaultof<nativeptr<uint32>> && x.initialLayout = Unchecked.defaultof<VkImageLayout>

        static member Empty =
            VkImageCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageCreateFlags>, Unchecked.defaultof<VkImageType>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkExtent3D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkImageTiling>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<VkSharingMode>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<VkImageLayout>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "imageType = %A" x.imageType
                sprintf "format = %A" x.format
                sprintf "extent = %A" x.extent
                sprintf "mipLevels = %A" x.mipLevels
                sprintf "arrayLayers = %A" x.arrayLayers
                sprintf "samples = %A" x.samples
                sprintf "tiling = %A" x.tiling
                sprintf "usage = %A" x.usage
                sprintf "sharingMode = %A" x.sharingMode
                sprintf "queueFamilyIndexCount = %A" x.queueFamilyIndexCount
                sprintf "pQueueFamilyIndices = %A" x.pQueueFamilyIndices
                sprintf "initialLayout = %A" x.initialLayout
            ] |> sprintf "VkImageCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageFormatProperties =
    struct
        val mutable public maxExtent : VkExtent3D
        val mutable public maxMipLevels : uint32
        val mutable public maxArrayLayers : uint32
        val mutable public sampleCounts : VkSampleCountFlags
        val mutable public maxResourceSize : VkDeviceSize

        new(maxExtent : VkExtent3D, maxMipLevels : uint32, maxArrayLayers : uint32, sampleCounts : VkSampleCountFlags, maxResourceSize : VkDeviceSize) =
            {
                maxExtent = maxExtent
                maxMipLevels = maxMipLevels
                maxArrayLayers = maxArrayLayers
                sampleCounts = sampleCounts
                maxResourceSize = maxResourceSize
            }

        member x.IsEmpty =
            x.maxExtent = Unchecked.defaultof<VkExtent3D> && x.maxMipLevels = Unchecked.defaultof<uint32> && x.maxArrayLayers = Unchecked.defaultof<uint32> && x.sampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.maxResourceSize = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkImageFormatProperties(Unchecked.defaultof<VkExtent3D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "maxExtent = %A" x.maxExtent
                sprintf "maxMipLevels = %A" x.maxMipLevels
                sprintf "maxArrayLayers = %A" x.maxArrayLayers
                sprintf "sampleCounts = %A" x.sampleCounts
                sprintf "maxResourceSize = %A" x.maxResourceSize
            ] |> sprintf "VkImageFormatProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageSubresourceRange =
    struct
        val mutable public aspectMask : VkImageAspectFlags
        val mutable public baseMipLevel : uint32
        val mutable public levelCount : uint32
        val mutable public baseArrayLayer : uint32
        val mutable public layerCount : uint32

        new(aspectMask : VkImageAspectFlags, baseMipLevel : uint32, levelCount : uint32, baseArrayLayer : uint32, layerCount : uint32) =
            {
                aspectMask = aspectMask
                baseMipLevel = baseMipLevel
                levelCount = levelCount
                baseArrayLayer = baseArrayLayer
                layerCount = layerCount
            }

        member x.IsEmpty =
            x.aspectMask = Unchecked.defaultof<VkImageAspectFlags> && x.baseMipLevel = Unchecked.defaultof<uint32> && x.levelCount = Unchecked.defaultof<uint32> && x.baseArrayLayer = Unchecked.defaultof<uint32> && x.layerCount = Unchecked.defaultof<uint32>

        static member Empty =
            VkImageSubresourceRange(Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "aspectMask = %A" x.aspectMask
                sprintf "baseMipLevel = %A" x.baseMipLevel
                sprintf "levelCount = %A" x.levelCount
                sprintf "baseArrayLayer = %A" x.baseArrayLayer
                sprintf "layerCount = %A" x.layerCount
            ] |> sprintf "VkImageSubresourceRange { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageMemoryBarrier =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public srcAccessMask : VkAccessFlags
        val mutable public dstAccessMask : VkAccessFlags
        val mutable public oldLayout : VkImageLayout
        val mutable public newLayout : VkImageLayout
        val mutable public srcQueueFamilyIndex : uint32
        val mutable public dstQueueFamilyIndex : uint32
        val mutable public image : VkImage
        val mutable public subresourceRange : VkImageSubresourceRange

        new(pNext : nativeint, srcAccessMask : VkAccessFlags, dstAccessMask : VkAccessFlags, oldLayout : VkImageLayout, newLayout : VkImageLayout, srcQueueFamilyIndex : uint32, dstQueueFamilyIndex : uint32, image : VkImage, subresourceRange : VkImageSubresourceRange) =
            {
                sType = 45u
                pNext = pNext
                srcAccessMask = srcAccessMask
                dstAccessMask = dstAccessMask
                oldLayout = oldLayout
                newLayout = newLayout
                srcQueueFamilyIndex = srcQueueFamilyIndex
                dstQueueFamilyIndex = dstQueueFamilyIndex
                image = image
                subresourceRange = subresourceRange
            }

        new(srcAccessMask : VkAccessFlags, dstAccessMask : VkAccessFlags, oldLayout : VkImageLayout, newLayout : VkImageLayout, srcQueueFamilyIndex : uint32, dstQueueFamilyIndex : uint32, image : VkImage, subresourceRange : VkImageSubresourceRange) =
            VkImageMemoryBarrier(Unchecked.defaultof<nativeint>, srcAccessMask, dstAccessMask, oldLayout, newLayout, srcQueueFamilyIndex, dstQueueFamilyIndex, image, subresourceRange)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags> && x.oldLayout = Unchecked.defaultof<VkImageLayout> && x.newLayout = Unchecked.defaultof<VkImageLayout> && x.srcQueueFamilyIndex = Unchecked.defaultof<uint32> && x.dstQueueFamilyIndex = Unchecked.defaultof<uint32> && x.image = Unchecked.defaultof<VkImage> && x.subresourceRange = Unchecked.defaultof<VkImageSubresourceRange>

        static member Empty =
            VkImageMemoryBarrier(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageSubresourceRange>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "srcAccessMask = %A" x.srcAccessMask
                sprintf "dstAccessMask = %A" x.dstAccessMask
                sprintf "oldLayout = %A" x.oldLayout
                sprintf "newLayout = %A" x.newLayout
                sprintf "srcQueueFamilyIndex = %A" x.srcQueueFamilyIndex
                sprintf "dstQueueFamilyIndex = %A" x.dstQueueFamilyIndex
                sprintf "image = %A" x.image
                sprintf "subresourceRange = %A" x.subresourceRange
            ] |> sprintf "VkImageMemoryBarrier { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageResolve =
    struct
        val mutable public srcSubresource : VkImageSubresourceLayers
        val mutable public srcOffset : VkOffset3D
        val mutable public dstSubresource : VkImageSubresourceLayers
        val mutable public dstOffset : VkOffset3D
        val mutable public extent : VkExtent3D

        new(srcSubresource : VkImageSubresourceLayers, srcOffset : VkOffset3D, dstSubresource : VkImageSubresourceLayers, dstOffset : VkOffset3D, extent : VkExtent3D) =
            {
                srcSubresource = srcSubresource
                srcOffset = srcOffset
                dstSubresource = dstSubresource
                dstOffset = dstOffset
                extent = extent
            }

        member x.IsEmpty =
            x.srcSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.srcOffset = Unchecked.defaultof<VkOffset3D> && x.dstSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.dstOffset = Unchecked.defaultof<VkOffset3D> && x.extent = Unchecked.defaultof<VkExtent3D>

        static member Empty =
            VkImageResolve(Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

        override x.ToString() =
            String.concat "; " [
                sprintf "srcSubresource = %A" x.srcSubresource
                sprintf "srcOffset = %A" x.srcOffset
                sprintf "dstSubresource = %A" x.dstSubresource
                sprintf "dstOffset = %A" x.dstOffset
                sprintf "extent = %A" x.extent
            ] |> sprintf "VkImageResolve { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkImageViewCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkImageViewCreateFlags
        val mutable public image : VkImage
        val mutable public viewType : VkImageViewType
        val mutable public format : VkFormat
        val mutable public components : VkComponentMapping
        val mutable public subresourceRange : VkImageSubresourceRange

        new(pNext : nativeint, flags : VkImageViewCreateFlags, image : VkImage, viewType : VkImageViewType, format : VkFormat, components : VkComponentMapping, subresourceRange : VkImageSubresourceRange) =
            {
                sType = 15u
                pNext = pNext
                flags = flags
                image = image
                viewType = viewType
                format = format
                components = components
                subresourceRange = subresourceRange
            }

        new(flags : VkImageViewCreateFlags, image : VkImage, viewType : VkImageViewType, format : VkFormat, components : VkComponentMapping, subresourceRange : VkImageSubresourceRange) =
            VkImageViewCreateInfo(Unchecked.defaultof<nativeint>, flags, image, viewType, format, components, subresourceRange)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkImageViewCreateFlags> && x.image = Unchecked.defaultof<VkImage> && x.viewType = Unchecked.defaultof<VkImageViewType> && x.format = Unchecked.defaultof<VkFormat> && x.components = Unchecked.defaultof<VkComponentMapping> && x.subresourceRange = Unchecked.defaultof<VkImageSubresourceRange>

        static member Empty =
            VkImageViewCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageViewCreateFlags>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageViewType>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<VkImageSubresourceRange>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "image = %A" x.image
                sprintf "viewType = %A" x.viewType
                sprintf "format = %A" x.format
                sprintf "components = %A" x.components
                sprintf "subresourceRange = %A" x.subresourceRange
            ] |> sprintf "VkImageViewCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkInstanceCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkInstanceCreateFlags
        val mutable public pApplicationInfo : nativeptr<VkApplicationInfo>
        val mutable public enabledLayerCount : uint32
        val mutable public ppEnabledLayerNames : nativeptr<cstr>
        val mutable public enabledExtensionCount : uint32
        val mutable public ppEnabledExtensionNames : nativeptr<cstr>

        new(pNext : nativeint, flags : VkInstanceCreateFlags, pApplicationInfo : nativeptr<VkApplicationInfo>, enabledLayerCount : uint32, ppEnabledLayerNames : nativeptr<cstr>, enabledExtensionCount : uint32, ppEnabledExtensionNames : nativeptr<cstr>) =
            {
                sType = 1u
                pNext = pNext
                flags = flags
                pApplicationInfo = pApplicationInfo
                enabledLayerCount = enabledLayerCount
                ppEnabledLayerNames = ppEnabledLayerNames
                enabledExtensionCount = enabledExtensionCount
                ppEnabledExtensionNames = ppEnabledExtensionNames
            }

        new(flags : VkInstanceCreateFlags, pApplicationInfo : nativeptr<VkApplicationInfo>, enabledLayerCount : uint32, ppEnabledLayerNames : nativeptr<cstr>, enabledExtensionCount : uint32, ppEnabledExtensionNames : nativeptr<cstr>) =
            VkInstanceCreateInfo(Unchecked.defaultof<nativeint>, flags, pApplicationInfo, enabledLayerCount, ppEnabledLayerNames, enabledExtensionCount, ppEnabledExtensionNames)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkInstanceCreateFlags> && x.pApplicationInfo = Unchecked.defaultof<nativeptr<VkApplicationInfo>> && x.enabledLayerCount = Unchecked.defaultof<uint32> && x.ppEnabledLayerNames = Unchecked.defaultof<nativeptr<cstr>> && x.enabledExtensionCount = Unchecked.defaultof<uint32> && x.ppEnabledExtensionNames = Unchecked.defaultof<nativeptr<cstr>>

        static member Empty =
            VkInstanceCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkInstanceCreateFlags>, Unchecked.defaultof<nativeptr<VkApplicationInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<cstr>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<cstr>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "pApplicationInfo = %A" x.pApplicationInfo
                sprintf "enabledLayerCount = %A" x.enabledLayerCount
                sprintf "ppEnabledLayerNames = %A" x.ppEnabledLayerNames
                sprintf "enabledExtensionCount = %A" x.enabledExtensionCount
                sprintf "ppEnabledExtensionNames = %A" x.ppEnabledExtensionNames
            ] |> sprintf "VkInstanceCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkLayerProperties =
    struct
        val mutable public layerName : String256
        val mutable public specVersion : uint32
        val mutable public implementationVersion : uint32
        val mutable public description : String256

        new(layerName : String256, specVersion : uint32, implementationVersion : uint32, description : String256) =
            {
                layerName = layerName
                specVersion = specVersion
                implementationVersion = implementationVersion
                description = description
            }

        member x.IsEmpty =
            x.layerName = Unchecked.defaultof<String256> && x.specVersion = Unchecked.defaultof<uint32> && x.implementationVersion = Unchecked.defaultof<uint32> && x.description = Unchecked.defaultof<String256>

        static member Empty =
            VkLayerProperties(Unchecked.defaultof<String256>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<String256>)

        override x.ToString() =
            String.concat "; " [
                sprintf "layerName = %A" x.layerName
                sprintf "specVersion = %A" x.specVersion
                sprintf "implementationVersion = %A" x.implementationVersion
                sprintf "description = %A" x.description
            ] |> sprintf "VkLayerProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkMappedMemoryRange =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public memory : VkDeviceMemory
        val mutable public offset : VkDeviceSize
        val mutable public size : VkDeviceSize

        new(pNext : nativeint, memory : VkDeviceMemory, offset : VkDeviceSize, size : VkDeviceSize) =
            {
                sType = 6u
                pNext = pNext
                memory = memory
                offset = offset
                size = size
            }

        new(memory : VkDeviceMemory, offset : VkDeviceSize, size : VkDeviceSize) =
            VkMappedMemoryRange(Unchecked.defaultof<nativeint>, memory, offset, size)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkMappedMemoryRange(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "memory = %A" x.memory
                sprintf "offset = %A" x.offset
                sprintf "size = %A" x.size
            ] |> sprintf "VkMappedMemoryRange { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkMemoryAllocateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public allocationSize : VkDeviceSize
        val mutable public memoryTypeIndex : uint32

        new(pNext : nativeint, allocationSize : VkDeviceSize, memoryTypeIndex : uint32) =
            {
                sType = 5u
                pNext = pNext
                allocationSize = allocationSize
                memoryTypeIndex = memoryTypeIndex
            }

        new(allocationSize : VkDeviceSize, memoryTypeIndex : uint32) =
            VkMemoryAllocateInfo(Unchecked.defaultof<nativeint>, allocationSize, memoryTypeIndex)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.allocationSize = Unchecked.defaultof<VkDeviceSize> && x.memoryTypeIndex = Unchecked.defaultof<uint32>

        static member Empty =
            VkMemoryAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "allocationSize = %A" x.allocationSize
                sprintf "memoryTypeIndex = %A" x.memoryTypeIndex
            ] |> sprintf "VkMemoryAllocateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkMemoryBarrier =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public srcAccessMask : VkAccessFlags
        val mutable public dstAccessMask : VkAccessFlags

        new(pNext : nativeint, srcAccessMask : VkAccessFlags, dstAccessMask : VkAccessFlags) =
            {
                sType = 46u
                pNext = pNext
                srcAccessMask = srcAccessMask
                dstAccessMask = dstAccessMask
            }

        new(srcAccessMask : VkAccessFlags, dstAccessMask : VkAccessFlags) =
            VkMemoryBarrier(Unchecked.defaultof<nativeint>, srcAccessMask, dstAccessMask)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags>

        static member Empty =
            VkMemoryBarrier(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkAccessFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "srcAccessMask = %A" x.srcAccessMask
                sprintf "dstAccessMask = %A" x.dstAccessMask
            ] |> sprintf "VkMemoryBarrier { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkMemoryHeap =
    struct
        val mutable public size : VkDeviceSize
        val mutable public flags : VkMemoryHeapFlags

        new(size : VkDeviceSize, flags : VkMemoryHeapFlags) =
            {
                size = size
                flags = flags
            }

        member x.IsEmpty =
            x.size = Unchecked.defaultof<VkDeviceSize> && x.flags = Unchecked.defaultof<VkMemoryHeapFlags>

        static member Empty =
            VkMemoryHeap(Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkMemoryHeapFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "size = %A" x.size
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkMemoryHeap { %s }"
    end

[<StructLayout(LayoutKind.Explicit, Size = 256)>]
type VkMemoryHeap_16 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : VkMemoryHeap

        member x.Item
            with get (i : int) : VkMemoryHeap =
                if i < 0 || i > 15 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : VkMemoryHeap) =
                if i < 0 || i > 15 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 16

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 16 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<VkMemoryHeap> with
            member x.GetEnumerator() = let x = x in (Seq.init 16 (fun i -> x.[i])).GetEnumerator()
    end
[<StructLayout(LayoutKind.Sequential)>]
type VkMemoryRequirements =
    struct
        val mutable public size : VkDeviceSize
        val mutable public alignment : VkDeviceSize
        val mutable public memoryTypeBits : uint32

        new(size : VkDeviceSize, alignment : VkDeviceSize, memoryTypeBits : uint32) =
            {
                size = size
                alignment = alignment
                memoryTypeBits = memoryTypeBits
            }

        member x.IsEmpty =
            x.size = Unchecked.defaultof<VkDeviceSize> && x.alignment = Unchecked.defaultof<VkDeviceSize> && x.memoryTypeBits = Unchecked.defaultof<uint32>

        static member Empty =
            VkMemoryRequirements(Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "size = %A" x.size
                sprintf "alignment = %A" x.alignment
                sprintf "memoryTypeBits = %A" x.memoryTypeBits
            ] |> sprintf "VkMemoryRequirements { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkMemoryType =
    struct
        val mutable public propertyFlags : VkMemoryPropertyFlags
        val mutable public heapIndex : uint32

        new(propertyFlags : VkMemoryPropertyFlags, heapIndex : uint32) =
            {
                propertyFlags = propertyFlags
                heapIndex = heapIndex
            }

        member x.IsEmpty =
            x.propertyFlags = Unchecked.defaultof<VkMemoryPropertyFlags> && x.heapIndex = Unchecked.defaultof<uint32>

        static member Empty =
            VkMemoryType(Unchecked.defaultof<VkMemoryPropertyFlags>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "propertyFlags = %A" x.propertyFlags
                sprintf "heapIndex = %A" x.heapIndex
            ] |> sprintf "VkMemoryType { %s }"
    end

[<StructLayout(LayoutKind.Explicit, Size = 256)>]
type VkMemoryType_32 =
    struct
        [<FieldOffset(0)>]
        val mutable public First : VkMemoryType

        member x.Item
            with get (i : int) : VkMemoryType =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.get ptr i
            and set (i : int) (value : VkMemoryType) =
                if i < 0 || i > 31 then raise <| IndexOutOfRangeException()
                let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                NativePtr.set ptr i value

        member x.Length = 32

        interface System.Collections.IEnumerable with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
        interface System.Collections.Generic.IEnumerable<VkMemoryType> with
            member x.GetEnumerator() = let x = x in (Seq.init 32 (fun i -> x.[i])).GetEnumerator()
    end
[<StructLayout(LayoutKind.Sequential)>]
type VkPhysicalDeviceLimits =
    struct
        val mutable public maxImageDimension1D : uint32
        val mutable public maxImageDimension2D : uint32
        val mutable public maxImageDimension3D : uint32
        val mutable public maxImageDimensionCube : uint32
        val mutable public maxImageArrayLayers : uint32
        val mutable public maxTexelBufferElements : uint32
        val mutable public maxUniformBufferRange : uint32
        val mutable public maxStorageBufferRange : uint32
        val mutable public maxPushConstantsSize : uint32
        val mutable public maxMemoryAllocationCount : uint32
        val mutable public maxSamplerAllocationCount : uint32
        val mutable public bufferImageGranularity : VkDeviceSize
        val mutable public sparseAddressSpaceSize : VkDeviceSize
        val mutable public maxBoundDescriptorSets : uint32
        val mutable public maxPerStageDescriptorSamplers : uint32
        val mutable public maxPerStageDescriptorUniformBuffers : uint32
        val mutable public maxPerStageDescriptorStorageBuffers : uint32
        val mutable public maxPerStageDescriptorSampledImages : uint32
        val mutable public maxPerStageDescriptorStorageImages : uint32
        val mutable public maxPerStageDescriptorInputAttachments : uint32
        val mutable public maxPerStageResources : uint32
        val mutable public maxDescriptorSetSamplers : uint32
        val mutable public maxDescriptorSetUniformBuffers : uint32
        val mutable public maxDescriptorSetUniformBuffersDynamic : uint32
        val mutable public maxDescriptorSetStorageBuffers : uint32
        val mutable public maxDescriptorSetStorageBuffersDynamic : uint32
        val mutable public maxDescriptorSetSampledImages : uint32
        val mutable public maxDescriptorSetStorageImages : uint32
        val mutable public maxDescriptorSetInputAttachments : uint32
        val mutable public maxVertexInputAttributes : uint32
        val mutable public maxVertexInputBindings : uint32
        val mutable public maxVertexInputAttributeOffset : uint32
        val mutable public maxVertexInputBindingStride : uint32
        val mutable public maxVertexOutputComponents : uint32
        val mutable public maxTessellationGenerationLevel : uint32
        val mutable public maxTessellationPatchSize : uint32
        val mutable public maxTessellationControlPerVertexInputComponents : uint32
        val mutable public maxTessellationControlPerVertexOutputComponents : uint32
        val mutable public maxTessellationControlPerPatchOutputComponents : uint32
        val mutable public maxTessellationControlTotalOutputComponents : uint32
        val mutable public maxTessellationEvaluationInputComponents : uint32
        val mutable public maxTessellationEvaluationOutputComponents : uint32
        val mutable public maxGeometryShaderInvocations : uint32
        val mutable public maxGeometryInputComponents : uint32
        val mutable public maxGeometryOutputComponents : uint32
        val mutable public maxGeometryOutputVertices : uint32
        val mutable public maxGeometryTotalOutputComponents : uint32
        val mutable public maxFragmentInputComponents : uint32
        val mutable public maxFragmentOutputAttachments : uint32
        val mutable public maxFragmentDualSrcAttachments : uint32
        val mutable public maxFragmentCombinedOutputResources : uint32
        val mutable public maxComputeSharedMemorySize : uint32
        val mutable public maxComputeWorkGroupCount : V3ui
        val mutable public maxComputeWorkGroupInvocations : uint32
        val mutable public maxComputeWorkGroupSize : V3ui
        val mutable public subPixelPrecisionBits : uint32
        val mutable public subTexelPrecisionBits : uint32
        val mutable public mipmapPrecisionBits : uint32
        val mutable public maxDrawIndexedIndexValue : uint32
        val mutable public maxDrawIndirectCount : uint32
        val mutable public maxSamplerLodBias : float32
        val mutable public maxSamplerAnisotropy : float32
        val mutable public maxViewports : uint32
        val mutable public maxViewportDimensions : V2ui
        val mutable public viewportBoundsRange : V2f
        val mutable public viewportSubPixelBits : uint32
        val mutable public minMemoryMapAlignment : uint64
        val mutable public minTexelBufferOffsetAlignment : VkDeviceSize
        val mutable public minUniformBufferOffsetAlignment : VkDeviceSize
        val mutable public minStorageBufferOffsetAlignment : VkDeviceSize
        val mutable public minTexelOffset : int
        val mutable public maxTexelOffset : uint32
        val mutable public minTexelGatherOffset : int
        val mutable public maxTexelGatherOffset : uint32
        val mutable public minInterpolationOffset : float32
        val mutable public maxInterpolationOffset : float32
        val mutable public subPixelInterpolationOffsetBits : uint32
        val mutable public maxFramebufferWidth : uint32
        val mutable public maxFramebufferHeight : uint32
        val mutable public maxFramebufferLayers : uint32
        val mutable public framebufferColorSampleCounts : VkSampleCountFlags
        val mutable public framebufferDepthSampleCounts : VkSampleCountFlags
        val mutable public framebufferStencilSampleCounts : VkSampleCountFlags
        val mutable public framebufferNoAttachmentsSampleCounts : VkSampleCountFlags
        val mutable public maxColorAttachments : uint32
        val mutable public sampledImageColorSampleCounts : VkSampleCountFlags
        val mutable public sampledImageIntegerSampleCounts : VkSampleCountFlags
        val mutable public sampledImageDepthSampleCounts : VkSampleCountFlags
        val mutable public sampledImageStencilSampleCounts : VkSampleCountFlags
        val mutable public storageImageSampleCounts : VkSampleCountFlags
        val mutable public maxSampleMaskWords : uint32
        val mutable public timestampComputeAndGraphics : VkBool32
        val mutable public timestampPeriod : float32
        val mutable public maxClipDistances : uint32
        val mutable public maxCullDistances : uint32
        val mutable public maxCombinedClipAndCullDistances : uint32
        val mutable public discreteQueuePriorities : uint32
        val mutable public pointSizeRange : V2f
        val mutable public lineWidthRange : V2f
        val mutable public pointSizeGranularity : float32
        val mutable public lineWidthGranularity : float32
        val mutable public strictLines : VkBool32
        val mutable public standardSampleLocations : VkBool32
        val mutable public optimalBufferCopyOffsetAlignment : VkDeviceSize
        val mutable public optimalBufferCopyRowPitchAlignment : VkDeviceSize
        val mutable public nonCoherentAtomSize : VkDeviceSize

        new(maxImageDimension1D : uint32, maxImageDimension2D : uint32, maxImageDimension3D : uint32, maxImageDimensionCube : uint32, maxImageArrayLayers : uint32, maxTexelBufferElements : uint32, maxUniformBufferRange : uint32, maxStorageBufferRange : uint32, maxPushConstantsSize : uint32, maxMemoryAllocationCount : uint32, maxSamplerAllocationCount : uint32, bufferImageGranularity : VkDeviceSize, sparseAddressSpaceSize : VkDeviceSize, maxBoundDescriptorSets : uint32, maxPerStageDescriptorSamplers : uint32, maxPerStageDescriptorUniformBuffers : uint32, maxPerStageDescriptorStorageBuffers : uint32, maxPerStageDescriptorSampledImages : uint32, maxPerStageDescriptorStorageImages : uint32, maxPerStageDescriptorInputAttachments : uint32, maxPerStageResources : uint32, maxDescriptorSetSamplers : uint32, maxDescriptorSetUniformBuffers : uint32, maxDescriptorSetUniformBuffersDynamic : uint32, maxDescriptorSetStorageBuffers : uint32, maxDescriptorSetStorageBuffersDynamic : uint32, maxDescriptorSetSampledImages : uint32, maxDescriptorSetStorageImages : uint32, maxDescriptorSetInputAttachments : uint32, maxVertexInputAttributes : uint32, maxVertexInputBindings : uint32, maxVertexInputAttributeOffset : uint32, maxVertexInputBindingStride : uint32, maxVertexOutputComponents : uint32, maxTessellationGenerationLevel : uint32, maxTessellationPatchSize : uint32, maxTessellationControlPerVertexInputComponents : uint32, maxTessellationControlPerVertexOutputComponents : uint32, maxTessellationControlPerPatchOutputComponents : uint32, maxTessellationControlTotalOutputComponents : uint32, maxTessellationEvaluationInputComponents : uint32, maxTessellationEvaluationOutputComponents : uint32, maxGeometryShaderInvocations : uint32, maxGeometryInputComponents : uint32, maxGeometryOutputComponents : uint32, maxGeometryOutputVertices : uint32, maxGeometryTotalOutputComponents : uint32, maxFragmentInputComponents : uint32, maxFragmentOutputAttachments : uint32, maxFragmentDualSrcAttachments : uint32, maxFragmentCombinedOutputResources : uint32, maxComputeSharedMemorySize : uint32, maxComputeWorkGroupCount : V3ui, maxComputeWorkGroupInvocations : uint32, maxComputeWorkGroupSize : V3ui, subPixelPrecisionBits : uint32, subTexelPrecisionBits : uint32, mipmapPrecisionBits : uint32, maxDrawIndexedIndexValue : uint32, maxDrawIndirectCount : uint32, maxSamplerLodBias : float32, maxSamplerAnisotropy : float32, maxViewports : uint32, maxViewportDimensions : V2ui, viewportBoundsRange : V2f, viewportSubPixelBits : uint32, minMemoryMapAlignment : uint64, minTexelBufferOffsetAlignment : VkDeviceSize, minUniformBufferOffsetAlignment : VkDeviceSize, minStorageBufferOffsetAlignment : VkDeviceSize, minTexelOffset : int, maxTexelOffset : uint32, minTexelGatherOffset : int, maxTexelGatherOffset : uint32, minInterpolationOffset : float32, maxInterpolationOffset : float32, subPixelInterpolationOffsetBits : uint32, maxFramebufferWidth : uint32, maxFramebufferHeight : uint32, maxFramebufferLayers : uint32, framebufferColorSampleCounts : VkSampleCountFlags, framebufferDepthSampleCounts : VkSampleCountFlags, framebufferStencilSampleCounts : VkSampleCountFlags, framebufferNoAttachmentsSampleCounts : VkSampleCountFlags, maxColorAttachments : uint32, sampledImageColorSampleCounts : VkSampleCountFlags, sampledImageIntegerSampleCounts : VkSampleCountFlags, sampledImageDepthSampleCounts : VkSampleCountFlags, sampledImageStencilSampleCounts : VkSampleCountFlags, storageImageSampleCounts : VkSampleCountFlags, maxSampleMaskWords : uint32, timestampComputeAndGraphics : VkBool32, timestampPeriod : float32, maxClipDistances : uint32, maxCullDistances : uint32, maxCombinedClipAndCullDistances : uint32, discreteQueuePriorities : uint32, pointSizeRange : V2f, lineWidthRange : V2f, pointSizeGranularity : float32, lineWidthGranularity : float32, strictLines : VkBool32, standardSampleLocations : VkBool32, optimalBufferCopyOffsetAlignment : VkDeviceSize, optimalBufferCopyRowPitchAlignment : VkDeviceSize, nonCoherentAtomSize : VkDeviceSize) =
            {
                maxImageDimension1D = maxImageDimension1D
                maxImageDimension2D = maxImageDimension2D
                maxImageDimension3D = maxImageDimension3D
                maxImageDimensionCube = maxImageDimensionCube
                maxImageArrayLayers = maxImageArrayLayers
                maxTexelBufferElements = maxTexelBufferElements
                maxUniformBufferRange = maxUniformBufferRange
                maxStorageBufferRange = maxStorageBufferRange
                maxPushConstantsSize = maxPushConstantsSize
                maxMemoryAllocationCount = maxMemoryAllocationCount
                maxSamplerAllocationCount = maxSamplerAllocationCount
                bufferImageGranularity = bufferImageGranularity
                sparseAddressSpaceSize = sparseAddressSpaceSize
                maxBoundDescriptorSets = maxBoundDescriptorSets
                maxPerStageDescriptorSamplers = maxPerStageDescriptorSamplers
                maxPerStageDescriptorUniformBuffers = maxPerStageDescriptorUniformBuffers
                maxPerStageDescriptorStorageBuffers = maxPerStageDescriptorStorageBuffers
                maxPerStageDescriptorSampledImages = maxPerStageDescriptorSampledImages
                maxPerStageDescriptorStorageImages = maxPerStageDescriptorStorageImages
                maxPerStageDescriptorInputAttachments = maxPerStageDescriptorInputAttachments
                maxPerStageResources = maxPerStageResources
                maxDescriptorSetSamplers = maxDescriptorSetSamplers
                maxDescriptorSetUniformBuffers = maxDescriptorSetUniformBuffers
                maxDescriptorSetUniformBuffersDynamic = maxDescriptorSetUniformBuffersDynamic
                maxDescriptorSetStorageBuffers = maxDescriptorSetStorageBuffers
                maxDescriptorSetStorageBuffersDynamic = maxDescriptorSetStorageBuffersDynamic
                maxDescriptorSetSampledImages = maxDescriptorSetSampledImages
                maxDescriptorSetStorageImages = maxDescriptorSetStorageImages
                maxDescriptorSetInputAttachments = maxDescriptorSetInputAttachments
                maxVertexInputAttributes = maxVertexInputAttributes
                maxVertexInputBindings = maxVertexInputBindings
                maxVertexInputAttributeOffset = maxVertexInputAttributeOffset
                maxVertexInputBindingStride = maxVertexInputBindingStride
                maxVertexOutputComponents = maxVertexOutputComponents
                maxTessellationGenerationLevel = maxTessellationGenerationLevel
                maxTessellationPatchSize = maxTessellationPatchSize
                maxTessellationControlPerVertexInputComponents = maxTessellationControlPerVertexInputComponents
                maxTessellationControlPerVertexOutputComponents = maxTessellationControlPerVertexOutputComponents
                maxTessellationControlPerPatchOutputComponents = maxTessellationControlPerPatchOutputComponents
                maxTessellationControlTotalOutputComponents = maxTessellationControlTotalOutputComponents
                maxTessellationEvaluationInputComponents = maxTessellationEvaluationInputComponents
                maxTessellationEvaluationOutputComponents = maxTessellationEvaluationOutputComponents
                maxGeometryShaderInvocations = maxGeometryShaderInvocations
                maxGeometryInputComponents = maxGeometryInputComponents
                maxGeometryOutputComponents = maxGeometryOutputComponents
                maxGeometryOutputVertices = maxGeometryOutputVertices
                maxGeometryTotalOutputComponents = maxGeometryTotalOutputComponents
                maxFragmentInputComponents = maxFragmentInputComponents
                maxFragmentOutputAttachments = maxFragmentOutputAttachments
                maxFragmentDualSrcAttachments = maxFragmentDualSrcAttachments
                maxFragmentCombinedOutputResources = maxFragmentCombinedOutputResources
                maxComputeSharedMemorySize = maxComputeSharedMemorySize
                maxComputeWorkGroupCount = maxComputeWorkGroupCount
                maxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations
                maxComputeWorkGroupSize = maxComputeWorkGroupSize
                subPixelPrecisionBits = subPixelPrecisionBits
                subTexelPrecisionBits = subTexelPrecisionBits
                mipmapPrecisionBits = mipmapPrecisionBits
                maxDrawIndexedIndexValue = maxDrawIndexedIndexValue
                maxDrawIndirectCount = maxDrawIndirectCount
                maxSamplerLodBias = maxSamplerLodBias
                maxSamplerAnisotropy = maxSamplerAnisotropy
                maxViewports = maxViewports
                maxViewportDimensions = maxViewportDimensions
                viewportBoundsRange = viewportBoundsRange
                viewportSubPixelBits = viewportSubPixelBits
                minMemoryMapAlignment = minMemoryMapAlignment
                minTexelBufferOffsetAlignment = minTexelBufferOffsetAlignment
                minUniformBufferOffsetAlignment = minUniformBufferOffsetAlignment
                minStorageBufferOffsetAlignment = minStorageBufferOffsetAlignment
                minTexelOffset = minTexelOffset
                maxTexelOffset = maxTexelOffset
                minTexelGatherOffset = minTexelGatherOffset
                maxTexelGatherOffset = maxTexelGatherOffset
                minInterpolationOffset = minInterpolationOffset
                maxInterpolationOffset = maxInterpolationOffset
                subPixelInterpolationOffsetBits = subPixelInterpolationOffsetBits
                maxFramebufferWidth = maxFramebufferWidth
                maxFramebufferHeight = maxFramebufferHeight
                maxFramebufferLayers = maxFramebufferLayers
                framebufferColorSampleCounts = framebufferColorSampleCounts
                framebufferDepthSampleCounts = framebufferDepthSampleCounts
                framebufferStencilSampleCounts = framebufferStencilSampleCounts
                framebufferNoAttachmentsSampleCounts = framebufferNoAttachmentsSampleCounts
                maxColorAttachments = maxColorAttachments
                sampledImageColorSampleCounts = sampledImageColorSampleCounts
                sampledImageIntegerSampleCounts = sampledImageIntegerSampleCounts
                sampledImageDepthSampleCounts = sampledImageDepthSampleCounts
                sampledImageStencilSampleCounts = sampledImageStencilSampleCounts
                storageImageSampleCounts = storageImageSampleCounts
                maxSampleMaskWords = maxSampleMaskWords
                timestampComputeAndGraphics = timestampComputeAndGraphics
                timestampPeriod = timestampPeriod
                maxClipDistances = maxClipDistances
                maxCullDistances = maxCullDistances
                maxCombinedClipAndCullDistances = maxCombinedClipAndCullDistances
                discreteQueuePriorities = discreteQueuePriorities
                pointSizeRange = pointSizeRange
                lineWidthRange = lineWidthRange
                pointSizeGranularity = pointSizeGranularity
                lineWidthGranularity = lineWidthGranularity
                strictLines = strictLines
                standardSampleLocations = standardSampleLocations
                optimalBufferCopyOffsetAlignment = optimalBufferCopyOffsetAlignment
                optimalBufferCopyRowPitchAlignment = optimalBufferCopyRowPitchAlignment
                nonCoherentAtomSize = nonCoherentAtomSize
            }

        member x.IsEmpty =
            x.maxImageDimension1D = Unchecked.defaultof<uint32> && x.maxImageDimension2D = Unchecked.defaultof<uint32> && x.maxImageDimension3D = Unchecked.defaultof<uint32> && x.maxImageDimensionCube = Unchecked.defaultof<uint32> && x.maxImageArrayLayers = Unchecked.defaultof<uint32> && x.maxTexelBufferElements = Unchecked.defaultof<uint32> && x.maxUniformBufferRange = Unchecked.defaultof<uint32> && x.maxStorageBufferRange = Unchecked.defaultof<uint32> && x.maxPushConstantsSize = Unchecked.defaultof<uint32> && x.maxMemoryAllocationCount = Unchecked.defaultof<uint32> && x.maxSamplerAllocationCount = Unchecked.defaultof<uint32> && x.bufferImageGranularity = Unchecked.defaultof<VkDeviceSize> && x.sparseAddressSpaceSize = Unchecked.defaultof<VkDeviceSize> && x.maxBoundDescriptorSets = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorSamplers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUniformBuffers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorStorageBuffers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorSampledImages = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorStorageImages = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorInputAttachments = Unchecked.defaultof<uint32> && x.maxPerStageResources = Unchecked.defaultof<uint32> && x.maxDescriptorSetSamplers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUniformBuffers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUniformBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetStorageBuffers = Unchecked.defaultof<uint32> && x.maxDescriptorSetStorageBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetSampledImages = Unchecked.defaultof<uint32> && x.maxDescriptorSetStorageImages = Unchecked.defaultof<uint32> && x.maxDescriptorSetInputAttachments = Unchecked.defaultof<uint32> && x.maxVertexInputAttributes = Unchecked.defaultof<uint32> && x.maxVertexInputBindings = Unchecked.defaultof<uint32> && x.maxVertexInputAttributeOffset = Unchecked.defaultof<uint32> && x.maxVertexInputBindingStride = Unchecked.defaultof<uint32> && x.maxVertexOutputComponents = Unchecked.defaultof<uint32> && x.maxTessellationGenerationLevel = Unchecked.defaultof<uint32> && x.maxTessellationPatchSize = Unchecked.defaultof<uint32> && x.maxTessellationControlPerVertexInputComponents = Unchecked.defaultof<uint32> && x.maxTessellationControlPerVertexOutputComponents = Unchecked.defaultof<uint32> && x.maxTessellationControlPerPatchOutputComponents = Unchecked.defaultof<uint32> && x.maxTessellationControlTotalOutputComponents = Unchecked.defaultof<uint32> && x.maxTessellationEvaluationInputComponents = Unchecked.defaultof<uint32> && x.maxTessellationEvaluationOutputComponents = Unchecked.defaultof<uint32> && x.maxGeometryShaderInvocations = Unchecked.defaultof<uint32> && x.maxGeometryInputComponents = Unchecked.defaultof<uint32> && x.maxGeometryOutputComponents = Unchecked.defaultof<uint32> && x.maxGeometryOutputVertices = Unchecked.defaultof<uint32> && x.maxGeometryTotalOutputComponents = Unchecked.defaultof<uint32> && x.maxFragmentInputComponents = Unchecked.defaultof<uint32> && x.maxFragmentOutputAttachments = Unchecked.defaultof<uint32> && x.maxFragmentDualSrcAttachments = Unchecked.defaultof<uint32> && x.maxFragmentCombinedOutputResources = Unchecked.defaultof<uint32> && x.maxComputeSharedMemorySize = Unchecked.defaultof<uint32> && x.maxComputeWorkGroupCount = Unchecked.defaultof<V3ui> && x.maxComputeWorkGroupInvocations = Unchecked.defaultof<uint32> && x.maxComputeWorkGroupSize = Unchecked.defaultof<V3ui> && x.subPixelPrecisionBits = Unchecked.defaultof<uint32> && x.subTexelPrecisionBits = Unchecked.defaultof<uint32> && x.mipmapPrecisionBits = Unchecked.defaultof<uint32> && x.maxDrawIndexedIndexValue = Unchecked.defaultof<uint32> && x.maxDrawIndirectCount = Unchecked.defaultof<uint32> && x.maxSamplerLodBias = Unchecked.defaultof<float32> && x.maxSamplerAnisotropy = Unchecked.defaultof<float32> && x.maxViewports = Unchecked.defaultof<uint32> && x.maxViewportDimensions = Unchecked.defaultof<V2ui> && x.viewportBoundsRange = Unchecked.defaultof<V2f> && x.viewportSubPixelBits = Unchecked.defaultof<uint32> && x.minMemoryMapAlignment = Unchecked.defaultof<uint64> && x.minTexelBufferOffsetAlignment = Unchecked.defaultof<VkDeviceSize> && x.minUniformBufferOffsetAlignment = Unchecked.defaultof<VkDeviceSize> && x.minStorageBufferOffsetAlignment = Unchecked.defaultof<VkDeviceSize> && x.minTexelOffset = Unchecked.defaultof<int> && x.maxTexelOffset = Unchecked.defaultof<uint32> && x.minTexelGatherOffset = Unchecked.defaultof<int> && x.maxTexelGatherOffset = Unchecked.defaultof<uint32> && x.minInterpolationOffset = Unchecked.defaultof<float32> && x.maxInterpolationOffset = Unchecked.defaultof<float32> && x.subPixelInterpolationOffsetBits = Unchecked.defaultof<uint32> && x.maxFramebufferWidth = Unchecked.defaultof<uint32> && x.maxFramebufferHeight = Unchecked.defaultof<uint32> && x.maxFramebufferLayers = Unchecked.defaultof<uint32> && x.framebufferColorSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.framebufferDepthSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.framebufferStencilSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.framebufferNoAttachmentsSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.maxColorAttachments = Unchecked.defaultof<uint32> && x.sampledImageColorSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.sampledImageIntegerSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.sampledImageDepthSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.sampledImageStencilSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.storageImageSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.maxSampleMaskWords = Unchecked.defaultof<uint32> && x.timestampComputeAndGraphics = Unchecked.defaultof<VkBool32> && x.timestampPeriod = Unchecked.defaultof<float32> && x.maxClipDistances = Unchecked.defaultof<uint32> && x.maxCullDistances = Unchecked.defaultof<uint32> && x.maxCombinedClipAndCullDistances = Unchecked.defaultof<uint32> && x.discreteQueuePriorities = Unchecked.defaultof<uint32> && x.pointSizeRange = Unchecked.defaultof<V2f> && x.lineWidthRange = Unchecked.defaultof<V2f> && x.pointSizeGranularity = Unchecked.defaultof<float32> && x.lineWidthGranularity = Unchecked.defaultof<float32> && x.strictLines = Unchecked.defaultof<VkBool32> && x.standardSampleLocations = Unchecked.defaultof<VkBool32> && x.optimalBufferCopyOffsetAlignment = Unchecked.defaultof<VkDeviceSize> && x.optimalBufferCopyRowPitchAlignment = Unchecked.defaultof<VkDeviceSize> && x.nonCoherentAtomSize = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkPhysicalDeviceLimits(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V2ui>, Unchecked.defaultof<V2f>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<int>, Unchecked.defaultof<uint32>, Unchecked.defaultof<int>, Unchecked.defaultof<uint32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<float32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V2f>, Unchecked.defaultof<V2f>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "maxImageDimension1D = %A" x.maxImageDimension1D
                sprintf "maxImageDimension2D = %A" x.maxImageDimension2D
                sprintf "maxImageDimension3D = %A" x.maxImageDimension3D
                sprintf "maxImageDimensionCube = %A" x.maxImageDimensionCube
                sprintf "maxImageArrayLayers = %A" x.maxImageArrayLayers
                sprintf "maxTexelBufferElements = %A" x.maxTexelBufferElements
                sprintf "maxUniformBufferRange = %A" x.maxUniformBufferRange
                sprintf "maxStorageBufferRange = %A" x.maxStorageBufferRange
                sprintf "maxPushConstantsSize = %A" x.maxPushConstantsSize
                sprintf "maxMemoryAllocationCount = %A" x.maxMemoryAllocationCount
                sprintf "maxSamplerAllocationCount = %A" x.maxSamplerAllocationCount
                sprintf "bufferImageGranularity = %A" x.bufferImageGranularity
                sprintf "sparseAddressSpaceSize = %A" x.sparseAddressSpaceSize
                sprintf "maxBoundDescriptorSets = %A" x.maxBoundDescriptorSets
                sprintf "maxPerStageDescriptorSamplers = %A" x.maxPerStageDescriptorSamplers
                sprintf "maxPerStageDescriptorUniformBuffers = %A" x.maxPerStageDescriptorUniformBuffers
                sprintf "maxPerStageDescriptorStorageBuffers = %A" x.maxPerStageDescriptorStorageBuffers
                sprintf "maxPerStageDescriptorSampledImages = %A" x.maxPerStageDescriptorSampledImages
                sprintf "maxPerStageDescriptorStorageImages = %A" x.maxPerStageDescriptorStorageImages
                sprintf "maxPerStageDescriptorInputAttachments = %A" x.maxPerStageDescriptorInputAttachments
                sprintf "maxPerStageResources = %A" x.maxPerStageResources
                sprintf "maxDescriptorSetSamplers = %A" x.maxDescriptorSetSamplers
                sprintf "maxDescriptorSetUniformBuffers = %A" x.maxDescriptorSetUniformBuffers
                sprintf "maxDescriptorSetUniformBuffersDynamic = %A" x.maxDescriptorSetUniformBuffersDynamic
                sprintf "maxDescriptorSetStorageBuffers = %A" x.maxDescriptorSetStorageBuffers
                sprintf "maxDescriptorSetStorageBuffersDynamic = %A" x.maxDescriptorSetStorageBuffersDynamic
                sprintf "maxDescriptorSetSampledImages = %A" x.maxDescriptorSetSampledImages
                sprintf "maxDescriptorSetStorageImages = %A" x.maxDescriptorSetStorageImages
                sprintf "maxDescriptorSetInputAttachments = %A" x.maxDescriptorSetInputAttachments
                sprintf "maxVertexInputAttributes = %A" x.maxVertexInputAttributes
                sprintf "maxVertexInputBindings = %A" x.maxVertexInputBindings
                sprintf "maxVertexInputAttributeOffset = %A" x.maxVertexInputAttributeOffset
                sprintf "maxVertexInputBindingStride = %A" x.maxVertexInputBindingStride
                sprintf "maxVertexOutputComponents = %A" x.maxVertexOutputComponents
                sprintf "maxTessellationGenerationLevel = %A" x.maxTessellationGenerationLevel
                sprintf "maxTessellationPatchSize = %A" x.maxTessellationPatchSize
                sprintf "maxTessellationControlPerVertexInputComponents = %A" x.maxTessellationControlPerVertexInputComponents
                sprintf "maxTessellationControlPerVertexOutputComponents = %A" x.maxTessellationControlPerVertexOutputComponents
                sprintf "maxTessellationControlPerPatchOutputComponents = %A" x.maxTessellationControlPerPatchOutputComponents
                sprintf "maxTessellationControlTotalOutputComponents = %A" x.maxTessellationControlTotalOutputComponents
                sprintf "maxTessellationEvaluationInputComponents = %A" x.maxTessellationEvaluationInputComponents
                sprintf "maxTessellationEvaluationOutputComponents = %A" x.maxTessellationEvaluationOutputComponents
                sprintf "maxGeometryShaderInvocations = %A" x.maxGeometryShaderInvocations
                sprintf "maxGeometryInputComponents = %A" x.maxGeometryInputComponents
                sprintf "maxGeometryOutputComponents = %A" x.maxGeometryOutputComponents
                sprintf "maxGeometryOutputVertices = %A" x.maxGeometryOutputVertices
                sprintf "maxGeometryTotalOutputComponents = %A" x.maxGeometryTotalOutputComponents
                sprintf "maxFragmentInputComponents = %A" x.maxFragmentInputComponents
                sprintf "maxFragmentOutputAttachments = %A" x.maxFragmentOutputAttachments
                sprintf "maxFragmentDualSrcAttachments = %A" x.maxFragmentDualSrcAttachments
                sprintf "maxFragmentCombinedOutputResources = %A" x.maxFragmentCombinedOutputResources
                sprintf "maxComputeSharedMemorySize = %A" x.maxComputeSharedMemorySize
                sprintf "maxComputeWorkGroupCount = %A" x.maxComputeWorkGroupCount
                sprintf "maxComputeWorkGroupInvocations = %A" x.maxComputeWorkGroupInvocations
                sprintf "maxComputeWorkGroupSize = %A" x.maxComputeWorkGroupSize
                sprintf "subPixelPrecisionBits = %A" x.subPixelPrecisionBits
                sprintf "subTexelPrecisionBits = %A" x.subTexelPrecisionBits
                sprintf "mipmapPrecisionBits = %A" x.mipmapPrecisionBits
                sprintf "maxDrawIndexedIndexValue = %A" x.maxDrawIndexedIndexValue
                sprintf "maxDrawIndirectCount = %A" x.maxDrawIndirectCount
                sprintf "maxSamplerLodBias = %A" x.maxSamplerLodBias
                sprintf "maxSamplerAnisotropy = %A" x.maxSamplerAnisotropy
                sprintf "maxViewports = %A" x.maxViewports
                sprintf "maxViewportDimensions = %A" x.maxViewportDimensions
                sprintf "viewportBoundsRange = %A" x.viewportBoundsRange
                sprintf "viewportSubPixelBits = %A" x.viewportSubPixelBits
                sprintf "minMemoryMapAlignment = %A" x.minMemoryMapAlignment
                sprintf "minTexelBufferOffsetAlignment = %A" x.minTexelBufferOffsetAlignment
                sprintf "minUniformBufferOffsetAlignment = %A" x.minUniformBufferOffsetAlignment
                sprintf "minStorageBufferOffsetAlignment = %A" x.minStorageBufferOffsetAlignment
                sprintf "minTexelOffset = %A" x.minTexelOffset
                sprintf "maxTexelOffset = %A" x.maxTexelOffset
                sprintf "minTexelGatherOffset = %A" x.minTexelGatherOffset
                sprintf "maxTexelGatherOffset = %A" x.maxTexelGatherOffset
                sprintf "minInterpolationOffset = %A" x.minInterpolationOffset
                sprintf "maxInterpolationOffset = %A" x.maxInterpolationOffset
                sprintf "subPixelInterpolationOffsetBits = %A" x.subPixelInterpolationOffsetBits
                sprintf "maxFramebufferWidth = %A" x.maxFramebufferWidth
                sprintf "maxFramebufferHeight = %A" x.maxFramebufferHeight
                sprintf "maxFramebufferLayers = %A" x.maxFramebufferLayers
                sprintf "framebufferColorSampleCounts = %A" x.framebufferColorSampleCounts
                sprintf "framebufferDepthSampleCounts = %A" x.framebufferDepthSampleCounts
                sprintf "framebufferStencilSampleCounts = %A" x.framebufferStencilSampleCounts
                sprintf "framebufferNoAttachmentsSampleCounts = %A" x.framebufferNoAttachmentsSampleCounts
                sprintf "maxColorAttachments = %A" x.maxColorAttachments
                sprintf "sampledImageColorSampleCounts = %A" x.sampledImageColorSampleCounts
                sprintf "sampledImageIntegerSampleCounts = %A" x.sampledImageIntegerSampleCounts
                sprintf "sampledImageDepthSampleCounts = %A" x.sampledImageDepthSampleCounts
                sprintf "sampledImageStencilSampleCounts = %A" x.sampledImageStencilSampleCounts
                sprintf "storageImageSampleCounts = %A" x.storageImageSampleCounts
                sprintf "maxSampleMaskWords = %A" x.maxSampleMaskWords
                sprintf "timestampComputeAndGraphics = %A" x.timestampComputeAndGraphics
                sprintf "timestampPeriod = %A" x.timestampPeriod
                sprintf "maxClipDistances = %A" x.maxClipDistances
                sprintf "maxCullDistances = %A" x.maxCullDistances
                sprintf "maxCombinedClipAndCullDistances = %A" x.maxCombinedClipAndCullDistances
                sprintf "discreteQueuePriorities = %A" x.discreteQueuePriorities
                sprintf "pointSizeRange = %A" x.pointSizeRange
                sprintf "lineWidthRange = %A" x.lineWidthRange
                sprintf "pointSizeGranularity = %A" x.pointSizeGranularity
                sprintf "lineWidthGranularity = %A" x.lineWidthGranularity
                sprintf "strictLines = %A" x.strictLines
                sprintf "standardSampleLocations = %A" x.standardSampleLocations
                sprintf "optimalBufferCopyOffsetAlignment = %A" x.optimalBufferCopyOffsetAlignment
                sprintf "optimalBufferCopyRowPitchAlignment = %A" x.optimalBufferCopyRowPitchAlignment
                sprintf "nonCoherentAtomSize = %A" x.nonCoherentAtomSize
            ] |> sprintf "VkPhysicalDeviceLimits { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPhysicalDeviceMemoryProperties =
    struct
        val mutable public memoryTypeCount : uint32
        val mutable public memoryTypes : VkMemoryType_32
        val mutable public memoryHeapCount : uint32
        val mutable public memoryHeaps : VkMemoryHeap_16

        new(memoryTypeCount : uint32, memoryTypes : VkMemoryType_32, memoryHeapCount : uint32, memoryHeaps : VkMemoryHeap_16) =
            {
                memoryTypeCount = memoryTypeCount
                memoryTypes = memoryTypes
                memoryHeapCount = memoryHeapCount
                memoryHeaps = memoryHeaps
            }

        member x.IsEmpty =
            x.memoryTypeCount = Unchecked.defaultof<uint32> && x.memoryTypes = Unchecked.defaultof<VkMemoryType_32> && x.memoryHeapCount = Unchecked.defaultof<uint32> && x.memoryHeaps = Unchecked.defaultof<VkMemoryHeap_16>

        static member Empty =
            VkPhysicalDeviceMemoryProperties(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkMemoryType_32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkMemoryHeap_16>)

        override x.ToString() =
            String.concat "; " [
                sprintf "memoryTypeCount = %A" x.memoryTypeCount
                sprintf "memoryTypes = %A" x.memoryTypes
                sprintf "memoryHeapCount = %A" x.memoryHeapCount
                sprintf "memoryHeaps = %A" x.memoryHeaps
            ] |> sprintf "VkPhysicalDeviceMemoryProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPhysicalDeviceSparseProperties =
    struct
        val mutable public residencyStandard2DBlockShape : VkBool32
        val mutable public residencyStandard2DMultisampleBlockShape : VkBool32
        val mutable public residencyStandard3DBlockShape : VkBool32
        val mutable public residencyAlignedMipSize : VkBool32
        val mutable public residencyNonResidentStrict : VkBool32

        new(residencyStandard2DBlockShape : VkBool32, residencyStandard2DMultisampleBlockShape : VkBool32, residencyStandard3DBlockShape : VkBool32, residencyAlignedMipSize : VkBool32, residencyNonResidentStrict : VkBool32) =
            {
                residencyStandard2DBlockShape = residencyStandard2DBlockShape
                residencyStandard2DMultisampleBlockShape = residencyStandard2DMultisampleBlockShape
                residencyStandard3DBlockShape = residencyStandard3DBlockShape
                residencyAlignedMipSize = residencyAlignedMipSize
                residencyNonResidentStrict = residencyNonResidentStrict
            }

        member x.IsEmpty =
            x.residencyStandard2DBlockShape = Unchecked.defaultof<VkBool32> && x.residencyStandard2DMultisampleBlockShape = Unchecked.defaultof<VkBool32> && x.residencyStandard3DBlockShape = Unchecked.defaultof<VkBool32> && x.residencyAlignedMipSize = Unchecked.defaultof<VkBool32> && x.residencyNonResidentStrict = Unchecked.defaultof<VkBool32>

        static member Empty =
            VkPhysicalDeviceSparseProperties(Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "residencyStandard2DBlockShape = %A" x.residencyStandard2DBlockShape
                sprintf "residencyStandard2DMultisampleBlockShape = %A" x.residencyStandard2DMultisampleBlockShape
                sprintf "residencyStandard3DBlockShape = %A" x.residencyStandard3DBlockShape
                sprintf "residencyAlignedMipSize = %A" x.residencyAlignedMipSize
                sprintf "residencyNonResidentStrict = %A" x.residencyNonResidentStrict
            ] |> sprintf "VkPhysicalDeviceSparseProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPhysicalDeviceProperties =
    struct
        val mutable public apiVersion : uint32
        val mutable public driverVersion : uint32
        val mutable public vendorID : uint32
        val mutable public deviceID : uint32
        val mutable public deviceType : VkPhysicalDeviceType
        val mutable public deviceName : String256
        val mutable public pipelineCacheUUID : Guid
        val mutable public limits : VkPhysicalDeviceLimits
        val mutable public sparseProperties : VkPhysicalDeviceSparseProperties

        new(apiVersion : uint32, driverVersion : uint32, vendorID : uint32, deviceID : uint32, deviceType : VkPhysicalDeviceType, deviceName : String256, pipelineCacheUUID : Guid, limits : VkPhysicalDeviceLimits, sparseProperties : VkPhysicalDeviceSparseProperties) =
            {
                apiVersion = apiVersion
                driverVersion = driverVersion
                vendorID = vendorID
                deviceID = deviceID
                deviceType = deviceType
                deviceName = deviceName
                pipelineCacheUUID = pipelineCacheUUID
                limits = limits
                sparseProperties = sparseProperties
            }

        member x.IsEmpty =
            x.apiVersion = Unchecked.defaultof<uint32> && x.driverVersion = Unchecked.defaultof<uint32> && x.vendorID = Unchecked.defaultof<uint32> && x.deviceID = Unchecked.defaultof<uint32> && x.deviceType = Unchecked.defaultof<VkPhysicalDeviceType> && x.deviceName = Unchecked.defaultof<String256> && x.pipelineCacheUUID = Unchecked.defaultof<Guid> && x.limits = Unchecked.defaultof<VkPhysicalDeviceLimits> && x.sparseProperties = Unchecked.defaultof<VkPhysicalDeviceSparseProperties>

        static member Empty =
            VkPhysicalDeviceProperties(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPhysicalDeviceType>, Unchecked.defaultof<String256>, Unchecked.defaultof<Guid>, Unchecked.defaultof<VkPhysicalDeviceLimits>, Unchecked.defaultof<VkPhysicalDeviceSparseProperties>)

        override x.ToString() =
            String.concat "; " [
                sprintf "apiVersion = %A" x.apiVersion
                sprintf "driverVersion = %A" x.driverVersion
                sprintf "vendorID = %A" x.vendorID
                sprintf "deviceID = %A" x.deviceID
                sprintf "deviceType = %A" x.deviceType
                sprintf "deviceName = %A" x.deviceName
                sprintf "pipelineCacheUUID = %A" x.pipelineCacheUUID
                sprintf "limits = %A" x.limits
                sprintf "sparseProperties = %A" x.sparseProperties
            ] |> sprintf "VkPhysicalDeviceProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineCacheCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineCacheCreateFlags
        val mutable public initialDataSize : uint64
        val mutable public pInitialData : nativeint

        new(pNext : nativeint, flags : VkPipelineCacheCreateFlags, initialDataSize : uint64, pInitialData : nativeint) =
            {
                sType = 17u
                pNext = pNext
                flags = flags
                initialDataSize = initialDataSize
                pInitialData = pInitialData
            }

        new(flags : VkPipelineCacheCreateFlags, initialDataSize : uint64, pInitialData : nativeint) =
            VkPipelineCacheCreateInfo(Unchecked.defaultof<nativeint>, flags, initialDataSize, pInitialData)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCacheCreateFlags> && x.initialDataSize = Unchecked.defaultof<uint64> && x.pInitialData = Unchecked.defaultof<nativeint>

        static member Empty =
            VkPipelineCacheCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCacheCreateFlags>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "initialDataSize = %A" x.initialDataSize
                sprintf "pInitialData = %A" x.pInitialData
            ] |> sprintf "VkPipelineCacheCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineCacheHeaderVersionOne =
    struct
        val mutable public headerSize : uint32
        val mutable public headerVersion : VkPipelineCacheHeaderVersion
        val mutable public vendorID : uint32
        val mutable public deviceID : uint32
        val mutable public pipelineCacheUUID : Guid

        new(headerSize : uint32, headerVersion : VkPipelineCacheHeaderVersion, vendorID : uint32, deviceID : uint32, pipelineCacheUUID : Guid) =
            {
                headerSize = headerSize
                headerVersion = headerVersion
                vendorID = vendorID
                deviceID = deviceID
                pipelineCacheUUID = pipelineCacheUUID
            }

        member x.IsEmpty =
            x.headerSize = Unchecked.defaultof<uint32> && x.headerVersion = Unchecked.defaultof<VkPipelineCacheHeaderVersion> && x.vendorID = Unchecked.defaultof<uint32> && x.deviceID = Unchecked.defaultof<uint32> && x.pipelineCacheUUID = Unchecked.defaultof<Guid>

        static member Empty =
            VkPipelineCacheHeaderVersionOne(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPipelineCacheHeaderVersion>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<Guid>)

        override x.ToString() =
            String.concat "; " [
                sprintf "headerSize = %A" x.headerSize
                sprintf "headerVersion = %A" x.headerVersion
                sprintf "vendorID = %A" x.vendorID
                sprintf "deviceID = %A" x.deviceID
                sprintf "pipelineCacheUUID = %A" x.pipelineCacheUUID
            ] |> sprintf "VkPipelineCacheHeaderVersionOne { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPushConstantRange =
    struct
        val mutable public stageFlags : VkShaderStageFlags
        val mutable public offset : uint32
        val mutable public size : uint32

        new(stageFlags : VkShaderStageFlags, offset : uint32, size : uint32) =
            {
                stageFlags = stageFlags
                offset = offset
                size = size
            }

        member x.IsEmpty =
            x.stageFlags = Unchecked.defaultof<VkShaderStageFlags> && x.offset = Unchecked.defaultof<uint32> && x.size = Unchecked.defaultof<uint32>

        static member Empty =
            VkPushConstantRange(Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "stageFlags = %A" x.stageFlags
                sprintf "offset = %A" x.offset
                sprintf "size = %A" x.size
            ] |> sprintf "VkPushConstantRange { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkPipelineLayoutCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkPipelineLayoutCreateFlags
        val mutable public setLayoutCount : uint32
        val mutable public pSetLayouts : nativeptr<VkDescriptorSetLayout>
        val mutable public pushConstantRangeCount : uint32
        val mutable public pPushConstantRanges : nativeptr<VkPushConstantRange>

        new(pNext : nativeint, flags : VkPipelineLayoutCreateFlags, setLayoutCount : uint32, pSetLayouts : nativeptr<VkDescriptorSetLayout>, pushConstantRangeCount : uint32, pPushConstantRanges : nativeptr<VkPushConstantRange>) =
            {
                sType = 30u
                pNext = pNext
                flags = flags
                setLayoutCount = setLayoutCount
                pSetLayouts = pSetLayouts
                pushConstantRangeCount = pushConstantRangeCount
                pPushConstantRanges = pPushConstantRanges
            }

        new(flags : VkPipelineLayoutCreateFlags, setLayoutCount : uint32, pSetLayouts : nativeptr<VkDescriptorSetLayout>, pushConstantRangeCount : uint32, pPushConstantRanges : nativeptr<VkPushConstantRange>) =
            VkPipelineLayoutCreateInfo(Unchecked.defaultof<nativeint>, flags, setLayoutCount, pSetLayouts, pushConstantRangeCount, pPushConstantRanges)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineLayoutCreateFlags> && x.setLayoutCount = Unchecked.defaultof<uint32> && x.pSetLayouts = Unchecked.defaultof<nativeptr<VkDescriptorSetLayout>> && x.pushConstantRangeCount = Unchecked.defaultof<uint32> && x.pPushConstantRanges = Unchecked.defaultof<nativeptr<VkPushConstantRange>>

        static member Empty =
            VkPipelineLayoutCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineLayoutCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorSetLayout>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPushConstantRange>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "setLayoutCount = %A" x.setLayoutCount
                sprintf "pSetLayouts = %A" x.pSetLayouts
                sprintf "pushConstantRangeCount = %A" x.pushConstantRangeCount
                sprintf "pPushConstantRanges = %A" x.pPushConstantRanges
            ] |> sprintf "VkPipelineLayoutCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkQueryPoolCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkQueryPoolCreateFlags
        val mutable public queryType : VkQueryType
        val mutable public queryCount : uint32
        val mutable public pipelineStatistics : VkQueryPipelineStatisticFlags

        new(pNext : nativeint, flags : VkQueryPoolCreateFlags, queryType : VkQueryType, queryCount : uint32, pipelineStatistics : VkQueryPipelineStatisticFlags) =
            {
                sType = 11u
                pNext = pNext
                flags = flags
                queryType = queryType
                queryCount = queryCount
                pipelineStatistics = pipelineStatistics
            }

        new(flags : VkQueryPoolCreateFlags, queryType : VkQueryType, queryCount : uint32, pipelineStatistics : VkQueryPipelineStatisticFlags) =
            VkQueryPoolCreateInfo(Unchecked.defaultof<nativeint>, flags, queryType, queryCount, pipelineStatistics)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkQueryPoolCreateFlags> && x.queryType = Unchecked.defaultof<VkQueryType> && x.queryCount = Unchecked.defaultof<uint32> && x.pipelineStatistics = Unchecked.defaultof<VkQueryPipelineStatisticFlags>

        static member Empty =
            VkQueryPoolCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkQueryPoolCreateFlags>, Unchecked.defaultof<VkQueryType>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkQueryPipelineStatisticFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "queryType = %A" x.queryType
                sprintf "queryCount = %A" x.queryCount
                sprintf "pipelineStatistics = %A" x.pipelineStatistics
            ] |> sprintf "VkQueryPoolCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkQueueFamilyProperties =
    struct
        val mutable public queueFlags : VkQueueFlags
        val mutable public queueCount : uint32
        val mutable public timestampValidBits : uint32
        val mutable public minImageTransferGranularity : VkExtent3D

        new(queueFlags : VkQueueFlags, queueCount : uint32, timestampValidBits : uint32, minImageTransferGranularity : VkExtent3D) =
            {
                queueFlags = queueFlags
                queueCount = queueCount
                timestampValidBits = timestampValidBits
                minImageTransferGranularity = minImageTransferGranularity
            }

        member x.IsEmpty =
            x.queueFlags = Unchecked.defaultof<VkQueueFlags> && x.queueCount = Unchecked.defaultof<uint32> && x.timestampValidBits = Unchecked.defaultof<uint32> && x.minImageTransferGranularity = Unchecked.defaultof<VkExtent3D>

        static member Empty =
            VkQueueFamilyProperties(Unchecked.defaultof<VkQueueFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkExtent3D>)

        override x.ToString() =
            String.concat "; " [
                sprintf "queueFlags = %A" x.queueFlags
                sprintf "queueCount = %A" x.queueCount
                sprintf "timestampValidBits = %A" x.timestampValidBits
                sprintf "minImageTransferGranularity = %A" x.minImageTransferGranularity
            ] |> sprintf "VkQueueFamilyProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkRenderPassBeginInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public renderPass : VkRenderPass
        val mutable public framebuffer : VkFramebuffer
        val mutable public renderArea : VkRect2D
        val mutable public clearValueCount : uint32
        val mutable public pClearValues : nativeptr<VkClearValue>

        new(pNext : nativeint, renderPass : VkRenderPass, framebuffer : VkFramebuffer, renderArea : VkRect2D, clearValueCount : uint32, pClearValues : nativeptr<VkClearValue>) =
            {
                sType = 43u
                pNext = pNext
                renderPass = renderPass
                framebuffer = framebuffer
                renderArea = renderArea
                clearValueCount = clearValueCount
                pClearValues = pClearValues
            }

        new(renderPass : VkRenderPass, framebuffer : VkFramebuffer, renderArea : VkRect2D, clearValueCount : uint32, pClearValues : nativeptr<VkClearValue>) =
            VkRenderPassBeginInfo(Unchecked.defaultof<nativeint>, renderPass, framebuffer, renderArea, clearValueCount, pClearValues)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.renderPass = Unchecked.defaultof<VkRenderPass> && x.framebuffer = Unchecked.defaultof<VkFramebuffer> && x.renderArea = Unchecked.defaultof<VkRect2D> && x.clearValueCount = Unchecked.defaultof<uint32> && x.pClearValues = Unchecked.defaultof<nativeptr<VkClearValue>>

        static member Empty =
            VkRenderPassBeginInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderPass>, Unchecked.defaultof<VkFramebuffer>, Unchecked.defaultof<VkRect2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkClearValue>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "renderPass = %A" x.renderPass
                sprintf "framebuffer = %A" x.framebuffer
                sprintf "renderArea = %A" x.renderArea
                sprintf "clearValueCount = %A" x.clearValueCount
                sprintf "pClearValues = %A" x.pClearValues
            ] |> sprintf "VkRenderPassBeginInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSubpassDescription =
    struct
        val mutable public flags : VkSubpassDescriptionFlags
        val mutable public pipelineBindPoint : VkPipelineBindPoint
        val mutable public inputAttachmentCount : uint32
        val mutable public pInputAttachments : nativeptr<VkAttachmentReference>
        val mutable public colorAttachmentCount : uint32
        val mutable public pColorAttachments : nativeptr<VkAttachmentReference>
        val mutable public pResolveAttachments : nativeptr<VkAttachmentReference>
        val mutable public pDepthStencilAttachment : nativeptr<VkAttachmentReference>
        val mutable public preserveAttachmentCount : uint32
        val mutable public pPreserveAttachments : nativeptr<uint32>

        new(flags : VkSubpassDescriptionFlags, pipelineBindPoint : VkPipelineBindPoint, inputAttachmentCount : uint32, pInputAttachments : nativeptr<VkAttachmentReference>, colorAttachmentCount : uint32, pColorAttachments : nativeptr<VkAttachmentReference>, pResolveAttachments : nativeptr<VkAttachmentReference>, pDepthStencilAttachment : nativeptr<VkAttachmentReference>, preserveAttachmentCount : uint32, pPreserveAttachments : nativeptr<uint32>) =
            {
                flags = flags
                pipelineBindPoint = pipelineBindPoint
                inputAttachmentCount = inputAttachmentCount
                pInputAttachments = pInputAttachments
                colorAttachmentCount = colorAttachmentCount
                pColorAttachments = pColorAttachments
                pResolveAttachments = pResolveAttachments
                pDepthStencilAttachment = pDepthStencilAttachment
                preserveAttachmentCount = preserveAttachmentCount
                pPreserveAttachments = pPreserveAttachments
            }

        member x.IsEmpty =
            x.flags = Unchecked.defaultof<VkSubpassDescriptionFlags> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.inputAttachmentCount = Unchecked.defaultof<uint32> && x.pInputAttachments = Unchecked.defaultof<nativeptr<VkAttachmentReference>> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachments = Unchecked.defaultof<nativeptr<VkAttachmentReference>> && x.pResolveAttachments = Unchecked.defaultof<nativeptr<VkAttachmentReference>> && x.pDepthStencilAttachment = Unchecked.defaultof<nativeptr<VkAttachmentReference>> && x.preserveAttachmentCount = Unchecked.defaultof<uint32> && x.pPreserveAttachments = Unchecked.defaultof<nativeptr<uint32>>

        static member Empty =
            VkSubpassDescription(Unchecked.defaultof<VkSubpassDescriptionFlags>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentReference>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentReference>>, Unchecked.defaultof<nativeptr<VkAttachmentReference>>, Unchecked.defaultof<nativeptr<VkAttachmentReference>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "flags = %A" x.flags
                sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                sprintf "inputAttachmentCount = %A" x.inputAttachmentCount
                sprintf "pInputAttachments = %A" x.pInputAttachments
                sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                sprintf "pColorAttachments = %A" x.pColorAttachments
                sprintf "pResolveAttachments = %A" x.pResolveAttachments
                sprintf "pDepthStencilAttachment = %A" x.pDepthStencilAttachment
                sprintf "preserveAttachmentCount = %A" x.preserveAttachmentCount
                sprintf "pPreserveAttachments = %A" x.pPreserveAttachments
            ] |> sprintf "VkSubpassDescription { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSubpassDependency =
    struct
        val mutable public srcSubpass : uint32
        val mutable public dstSubpass : uint32
        val mutable public srcStageMask : VkPipelineStageFlags
        val mutable public dstStageMask : VkPipelineStageFlags
        val mutable public srcAccessMask : VkAccessFlags
        val mutable public dstAccessMask : VkAccessFlags
        val mutable public dependencyFlags : VkDependencyFlags

        new(srcSubpass : uint32, dstSubpass : uint32, srcStageMask : VkPipelineStageFlags, dstStageMask : VkPipelineStageFlags, srcAccessMask : VkAccessFlags, dstAccessMask : VkAccessFlags, dependencyFlags : VkDependencyFlags) =
            {
                srcSubpass = srcSubpass
                dstSubpass = dstSubpass
                srcStageMask = srcStageMask
                dstStageMask = dstStageMask
                srcAccessMask = srcAccessMask
                dstAccessMask = dstAccessMask
                dependencyFlags = dependencyFlags
            }

        member x.IsEmpty =
            x.srcSubpass = Unchecked.defaultof<uint32> && x.dstSubpass = Unchecked.defaultof<uint32> && x.srcStageMask = Unchecked.defaultof<VkPipelineStageFlags> && x.dstStageMask = Unchecked.defaultof<VkPipelineStageFlags> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dependencyFlags = Unchecked.defaultof<VkDependencyFlags>

        static member Empty =
            VkSubpassDependency(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPipelineStageFlags>, Unchecked.defaultof<VkPipelineStageFlags>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkDependencyFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "srcSubpass = %A" x.srcSubpass
                sprintf "dstSubpass = %A" x.dstSubpass
                sprintf "srcStageMask = %A" x.srcStageMask
                sprintf "dstStageMask = %A" x.dstStageMask
                sprintf "srcAccessMask = %A" x.srcAccessMask
                sprintf "dstAccessMask = %A" x.dstAccessMask
                sprintf "dependencyFlags = %A" x.dependencyFlags
            ] |> sprintf "VkSubpassDependency { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkRenderPassCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkRenderPassCreateFlags
        val mutable public attachmentCount : uint32
        val mutable public pAttachments : nativeptr<VkAttachmentDescription>
        val mutable public subpassCount : uint32
        val mutable public pSubpasses : nativeptr<VkSubpassDescription>
        val mutable public dependencyCount : uint32
        val mutable public pDependencies : nativeptr<VkSubpassDependency>

        new(pNext : nativeint, flags : VkRenderPassCreateFlags, attachmentCount : uint32, pAttachments : nativeptr<VkAttachmentDescription>, subpassCount : uint32, pSubpasses : nativeptr<VkSubpassDescription>, dependencyCount : uint32, pDependencies : nativeptr<VkSubpassDependency>) =
            {
                sType = 38u
                pNext = pNext
                flags = flags
                attachmentCount = attachmentCount
                pAttachments = pAttachments
                subpassCount = subpassCount
                pSubpasses = pSubpasses
                dependencyCount = dependencyCount
                pDependencies = pDependencies
            }

        new(flags : VkRenderPassCreateFlags, attachmentCount : uint32, pAttachments : nativeptr<VkAttachmentDescription>, subpassCount : uint32, pSubpasses : nativeptr<VkSubpassDescription>, dependencyCount : uint32, pDependencies : nativeptr<VkSubpassDependency>) =
            VkRenderPassCreateInfo(Unchecked.defaultof<nativeint>, flags, attachmentCount, pAttachments, subpassCount, pSubpasses, dependencyCount, pDependencies)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkRenderPassCreateFlags> && x.attachmentCount = Unchecked.defaultof<uint32> && x.pAttachments = Unchecked.defaultof<nativeptr<VkAttachmentDescription>> && x.subpassCount = Unchecked.defaultof<uint32> && x.pSubpasses = Unchecked.defaultof<nativeptr<VkSubpassDescription>> && x.dependencyCount = Unchecked.defaultof<uint32> && x.pDependencies = Unchecked.defaultof<nativeptr<VkSubpassDependency>>

        static member Empty =
            VkRenderPassCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderPassCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentDescription>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSubpassDescription>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSubpassDependency>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "attachmentCount = %A" x.attachmentCount
                sprintf "pAttachments = %A" x.pAttachments
                sprintf "subpassCount = %A" x.subpassCount
                sprintf "pSubpasses = %A" x.pSubpasses
                sprintf "dependencyCount = %A" x.dependencyCount
                sprintf "pDependencies = %A" x.pDependencies
            ] |> sprintf "VkRenderPassCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSamplerCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkSamplerCreateFlags
        val mutable public magFilter : VkFilter
        val mutable public minFilter : VkFilter
        val mutable public mipmapMode : VkSamplerMipmapMode
        val mutable public addressModeU : VkSamplerAddressMode
        val mutable public addressModeV : VkSamplerAddressMode
        val mutable public addressModeW : VkSamplerAddressMode
        val mutable public mipLodBias : float32
        val mutable public anisotropyEnable : VkBool32
        val mutable public maxAnisotropy : float32
        val mutable public compareEnable : VkBool32
        val mutable public compareOp : VkCompareOp
        val mutable public minLod : float32
        val mutable public maxLod : float32
        val mutable public borderColor : VkBorderColor
        val mutable public unnormalizedCoordinates : VkBool32

        new(pNext : nativeint, flags : VkSamplerCreateFlags, magFilter : VkFilter, minFilter : VkFilter, mipmapMode : VkSamplerMipmapMode, addressModeU : VkSamplerAddressMode, addressModeV : VkSamplerAddressMode, addressModeW : VkSamplerAddressMode, mipLodBias : float32, anisotropyEnable : VkBool32, maxAnisotropy : float32, compareEnable : VkBool32, compareOp : VkCompareOp, minLod : float32, maxLod : float32, borderColor : VkBorderColor, unnormalizedCoordinates : VkBool32) =
            {
                sType = 31u
                pNext = pNext
                flags = flags
                magFilter = magFilter
                minFilter = minFilter
                mipmapMode = mipmapMode
                addressModeU = addressModeU
                addressModeV = addressModeV
                addressModeW = addressModeW
                mipLodBias = mipLodBias
                anisotropyEnable = anisotropyEnable
                maxAnisotropy = maxAnisotropy
                compareEnable = compareEnable
                compareOp = compareOp
                minLod = minLod
                maxLod = maxLod
                borderColor = borderColor
                unnormalizedCoordinates = unnormalizedCoordinates
            }

        new(flags : VkSamplerCreateFlags, magFilter : VkFilter, minFilter : VkFilter, mipmapMode : VkSamplerMipmapMode, addressModeU : VkSamplerAddressMode, addressModeV : VkSamplerAddressMode, addressModeW : VkSamplerAddressMode, mipLodBias : float32, anisotropyEnable : VkBool32, maxAnisotropy : float32, compareEnable : VkBool32, compareOp : VkCompareOp, minLod : float32, maxLod : float32, borderColor : VkBorderColor, unnormalizedCoordinates : VkBool32) =
            VkSamplerCreateInfo(Unchecked.defaultof<nativeint>, flags, magFilter, minFilter, mipmapMode, addressModeU, addressModeV, addressModeW, mipLodBias, anisotropyEnable, maxAnisotropy, compareEnable, compareOp, minLod, maxLod, borderColor, unnormalizedCoordinates)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkSamplerCreateFlags> && x.magFilter = Unchecked.defaultof<VkFilter> && x.minFilter = Unchecked.defaultof<VkFilter> && x.mipmapMode = Unchecked.defaultof<VkSamplerMipmapMode> && x.addressModeU = Unchecked.defaultof<VkSamplerAddressMode> && x.addressModeV = Unchecked.defaultof<VkSamplerAddressMode> && x.addressModeW = Unchecked.defaultof<VkSamplerAddressMode> && x.mipLodBias = Unchecked.defaultof<float32> && x.anisotropyEnable = Unchecked.defaultof<VkBool32> && x.maxAnisotropy = Unchecked.defaultof<float32> && x.compareEnable = Unchecked.defaultof<VkBool32> && x.compareOp = Unchecked.defaultof<VkCompareOp> && x.minLod = Unchecked.defaultof<float32> && x.maxLod = Unchecked.defaultof<float32> && x.borderColor = Unchecked.defaultof<VkBorderColor> && x.unnormalizedCoordinates = Unchecked.defaultof<VkBool32>

        static member Empty =
            VkSamplerCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSamplerCreateFlags>, Unchecked.defaultof<VkFilter>, Unchecked.defaultof<VkFilter>, Unchecked.defaultof<VkSamplerMipmapMode>, Unchecked.defaultof<VkSamplerAddressMode>, Unchecked.defaultof<VkSamplerAddressMode>, Unchecked.defaultof<VkSamplerAddressMode>, Unchecked.defaultof<float32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<float32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkCompareOp>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<VkBorderColor>, Unchecked.defaultof<VkBool32>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "magFilter = %A" x.magFilter
                sprintf "minFilter = %A" x.minFilter
                sprintf "mipmapMode = %A" x.mipmapMode
                sprintf "addressModeU = %A" x.addressModeU
                sprintf "addressModeV = %A" x.addressModeV
                sprintf "addressModeW = %A" x.addressModeW
                sprintf "mipLodBias = %A" x.mipLodBias
                sprintf "anisotropyEnable = %A" x.anisotropyEnable
                sprintf "maxAnisotropy = %A" x.maxAnisotropy
                sprintf "compareEnable = %A" x.compareEnable
                sprintf "compareOp = %A" x.compareOp
                sprintf "minLod = %A" x.minLod
                sprintf "maxLod = %A" x.maxLod
                sprintf "borderColor = %A" x.borderColor
                sprintf "unnormalizedCoordinates = %A" x.unnormalizedCoordinates
            ] |> sprintf "VkSamplerCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSemaphoreCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkSemaphoreCreateFlags

        new(pNext : nativeint, flags : VkSemaphoreCreateFlags) =
            {
                sType = 9u
                pNext = pNext
                flags = flags
            }

        new(flags : VkSemaphoreCreateFlags) =
            VkSemaphoreCreateInfo(Unchecked.defaultof<nativeint>, flags)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkSemaphoreCreateFlags>

        static member Empty =
            VkSemaphoreCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphoreCreateFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkSemaphoreCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkShaderModuleCreateInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public flags : VkShaderModuleCreateFlags
        val mutable public codeSize : uint64
        val mutable public pCode : nativeptr<uint32>

        new(pNext : nativeint, flags : VkShaderModuleCreateFlags, codeSize : uint64, pCode : nativeptr<uint32>) =
            {
                sType = 16u
                pNext = pNext
                flags = flags
                codeSize = codeSize
                pCode = pCode
            }

        new(flags : VkShaderModuleCreateFlags, codeSize : uint64, pCode : nativeptr<uint32>) =
            VkShaderModuleCreateInfo(Unchecked.defaultof<nativeint>, flags, codeSize, pCode)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkShaderModuleCreateFlags> && x.codeSize = Unchecked.defaultof<uint64> && x.pCode = Unchecked.defaultof<nativeptr<uint32>>

        static member Empty =
            VkShaderModuleCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderModuleCreateFlags>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeptr<uint32>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "flags = %A" x.flags
                sprintf "codeSize = %A" x.codeSize
                sprintf "pCode = %A" x.pCode
            ] |> sprintf "VkShaderModuleCreateInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseImageFormatProperties =
    struct
        val mutable public aspectMask : VkImageAspectFlags
        val mutable public imageGranularity : VkExtent3D
        val mutable public flags : VkSparseImageFormatFlags

        new(aspectMask : VkImageAspectFlags, imageGranularity : VkExtent3D, flags : VkSparseImageFormatFlags) =
            {
                aspectMask = aspectMask
                imageGranularity = imageGranularity
                flags = flags
            }

        member x.IsEmpty =
            x.aspectMask = Unchecked.defaultof<VkImageAspectFlags> && x.imageGranularity = Unchecked.defaultof<VkExtent3D> && x.flags = Unchecked.defaultof<VkSparseImageFormatFlags>

        static member Empty =
            VkSparseImageFormatProperties(Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<VkExtent3D>, Unchecked.defaultof<VkSparseImageFormatFlags>)

        override x.ToString() =
            String.concat "; " [
                sprintf "aspectMask = %A" x.aspectMask
                sprintf "imageGranularity = %A" x.imageGranularity
                sprintf "flags = %A" x.flags
            ] |> sprintf "VkSparseImageFormatProperties { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSparseImageMemoryRequirements =
    struct
        val mutable public formatProperties : VkSparseImageFormatProperties
        val mutable public imageMipTailFirstLod : uint32
        val mutable public imageMipTailSize : VkDeviceSize
        val mutable public imageMipTailOffset : VkDeviceSize
        val mutable public imageMipTailStride : VkDeviceSize

        new(formatProperties : VkSparseImageFormatProperties, imageMipTailFirstLod : uint32, imageMipTailSize : VkDeviceSize, imageMipTailOffset : VkDeviceSize, imageMipTailStride : VkDeviceSize) =
            {
                formatProperties = formatProperties
                imageMipTailFirstLod = imageMipTailFirstLod
                imageMipTailSize = imageMipTailSize
                imageMipTailOffset = imageMipTailOffset
                imageMipTailStride = imageMipTailStride
            }

        member x.IsEmpty =
            x.formatProperties = Unchecked.defaultof<VkSparseImageFormatProperties> && x.imageMipTailFirstLod = Unchecked.defaultof<uint32> && x.imageMipTailSize = Unchecked.defaultof<VkDeviceSize> && x.imageMipTailOffset = Unchecked.defaultof<VkDeviceSize> && x.imageMipTailStride = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkSparseImageMemoryRequirements(Unchecked.defaultof<VkSparseImageFormatProperties>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "formatProperties = %A" x.formatProperties
                sprintf "imageMipTailFirstLod = %A" x.imageMipTailFirstLod
                sprintf "imageMipTailSize = %A" x.imageMipTailSize
                sprintf "imageMipTailOffset = %A" x.imageMipTailOffset
                sprintf "imageMipTailStride = %A" x.imageMipTailStride
            ] |> sprintf "VkSparseImageMemoryRequirements { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSubmitInfo =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public waitSemaphoreCount : uint32
        val mutable public pWaitSemaphores : nativeptr<VkSemaphore>
        val mutable public pWaitDstStageMask : nativeptr<VkPipelineStageFlags>
        val mutable public commandBufferCount : uint32
        val mutable public pCommandBuffers : nativeptr<VkCommandBuffer>
        val mutable public signalSemaphoreCount : uint32
        val mutable public pSignalSemaphores : nativeptr<VkSemaphore>

        new(pNext : nativeint, waitSemaphoreCount : uint32, pWaitSemaphores : nativeptr<VkSemaphore>, pWaitDstStageMask : nativeptr<VkPipelineStageFlags>, commandBufferCount : uint32, pCommandBuffers : nativeptr<VkCommandBuffer>, signalSemaphoreCount : uint32, pSignalSemaphores : nativeptr<VkSemaphore>) =
            {
                sType = 4u
                pNext = pNext
                waitSemaphoreCount = waitSemaphoreCount
                pWaitSemaphores = pWaitSemaphores
                pWaitDstStageMask = pWaitDstStageMask
                commandBufferCount = commandBufferCount
                pCommandBuffers = pCommandBuffers
                signalSemaphoreCount = signalSemaphoreCount
                pSignalSemaphores = pSignalSemaphores
            }

        new(waitSemaphoreCount : uint32, pWaitSemaphores : nativeptr<VkSemaphore>, pWaitDstStageMask : nativeptr<VkPipelineStageFlags>, commandBufferCount : uint32, pCommandBuffers : nativeptr<VkCommandBuffer>, signalSemaphoreCount : uint32, pSignalSemaphores : nativeptr<VkSemaphore>) =
            VkSubmitInfo(Unchecked.defaultof<nativeint>, waitSemaphoreCount, pWaitSemaphores, pWaitDstStageMask, commandBufferCount, pCommandBuffers, signalSemaphoreCount, pSignalSemaphores)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.waitSemaphoreCount = Unchecked.defaultof<uint32> && x.pWaitSemaphores = Unchecked.defaultof<nativeptr<VkSemaphore>> && x.pWaitDstStageMask = Unchecked.defaultof<nativeptr<VkPipelineStageFlags>> && x.commandBufferCount = Unchecked.defaultof<uint32> && x.pCommandBuffers = Unchecked.defaultof<nativeptr<VkCommandBuffer>> && x.signalSemaphoreCount = Unchecked.defaultof<uint32> && x.pSignalSemaphores = Unchecked.defaultof<nativeptr<VkSemaphore>>

        static member Empty =
            VkSubmitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphore>>, Unchecked.defaultof<nativeptr<VkPipelineStageFlags>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkCommandBuffer>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphore>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "waitSemaphoreCount = %A" x.waitSemaphoreCount
                sprintf "pWaitSemaphores = %A" x.pWaitSemaphores
                sprintf "pWaitDstStageMask = %A" x.pWaitDstStageMask
                sprintf "commandBufferCount = %A" x.commandBufferCount
                sprintf "pCommandBuffers = %A" x.pCommandBuffers
                sprintf "signalSemaphoreCount = %A" x.signalSemaphoreCount
                sprintf "pSignalSemaphores = %A" x.pSignalSemaphores
            ] |> sprintf "VkSubmitInfo { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkSubresourceLayout =
    struct
        val mutable public offset : VkDeviceSize
        val mutable public size : VkDeviceSize
        val mutable public rowPitch : VkDeviceSize
        val mutable public arrayPitch : VkDeviceSize
        val mutable public depthPitch : VkDeviceSize

        new(offset : VkDeviceSize, size : VkDeviceSize, rowPitch : VkDeviceSize, arrayPitch : VkDeviceSize, depthPitch : VkDeviceSize) =
            {
                offset = offset
                size = size
                rowPitch = rowPitch
                arrayPitch = arrayPitch
                depthPitch = depthPitch
            }

        member x.IsEmpty =
            x.offset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize> && x.rowPitch = Unchecked.defaultof<VkDeviceSize> && x.arrayPitch = Unchecked.defaultof<VkDeviceSize> && x.depthPitch = Unchecked.defaultof<VkDeviceSize>

        static member Empty =
            VkSubresourceLayout(Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

        override x.ToString() =
            String.concat "; " [
                sprintf "offset = %A" x.offset
                sprintf "size = %A" x.size
                sprintf "rowPitch = %A" x.rowPitch
                sprintf "arrayPitch = %A" x.arrayPitch
                sprintf "depthPitch = %A" x.depthPitch
            ] |> sprintf "VkSubresourceLayout { %s }"
    end

[<StructLayout(LayoutKind.Sequential)>]
type VkWriteDescriptorSet =
    struct
        val mutable public sType : uint32
        val mutable public pNext : nativeint
        val mutable public dstSet : VkDescriptorSet
        val mutable public dstBinding : uint32
        val mutable public dstArrayElement : uint32
        val mutable public descriptorCount : uint32
        val mutable public descriptorType : VkDescriptorType
        val mutable public pImageInfo : nativeptr<VkDescriptorImageInfo>
        val mutable public pBufferInfo : nativeptr<VkDescriptorBufferInfo>
        val mutable public pTexelBufferView : nativeptr<VkBufferView>

        new(pNext : nativeint, dstSet : VkDescriptorSet, dstBinding : uint32, dstArrayElement : uint32, descriptorCount : uint32, descriptorType : VkDescriptorType, pImageInfo : nativeptr<VkDescriptorImageInfo>, pBufferInfo : nativeptr<VkDescriptorBufferInfo>, pTexelBufferView : nativeptr<VkBufferView>) =
            {
                sType = 35u
                pNext = pNext
                dstSet = dstSet
                dstBinding = dstBinding
                dstArrayElement = dstArrayElement
                descriptorCount = descriptorCount
                descriptorType = descriptorType
                pImageInfo = pImageInfo
                pBufferInfo = pBufferInfo
                pTexelBufferView = pTexelBufferView
            }

        new(dstSet : VkDescriptorSet, dstBinding : uint32, dstArrayElement : uint32, descriptorCount : uint32, descriptorType : VkDescriptorType, pImageInfo : nativeptr<VkDescriptorImageInfo>, pBufferInfo : nativeptr<VkDescriptorBufferInfo>, pTexelBufferView : nativeptr<VkBufferView>) =
            VkWriteDescriptorSet(Unchecked.defaultof<nativeint>, dstSet, dstBinding, dstArrayElement, descriptorCount, descriptorType, pImageInfo, pBufferInfo, pTexelBufferView)

        member x.IsEmpty =
            x.pNext = Unchecked.defaultof<nativeint> && x.dstSet = Unchecked.defaultof<VkDescriptorSet> && x.dstBinding = Unchecked.defaultof<uint32> && x.dstArrayElement = Unchecked.defaultof<uint32> && x.descriptorCount = Unchecked.defaultof<uint32> && x.descriptorType = Unchecked.defaultof<VkDescriptorType> && x.pImageInfo = Unchecked.defaultof<nativeptr<VkDescriptorImageInfo>> && x.pBufferInfo = Unchecked.defaultof<nativeptr<VkDescriptorBufferInfo>> && x.pTexelBufferView = Unchecked.defaultof<nativeptr<VkBufferView>>

        static member Empty =
            VkWriteDescriptorSet(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorSet>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDescriptorType>, Unchecked.defaultof<nativeptr<VkDescriptorImageInfo>>, Unchecked.defaultof<nativeptr<VkDescriptorBufferInfo>>, Unchecked.defaultof<nativeptr<VkBufferView>>)

        override x.ToString() =
            String.concat "; " [
                sprintf "sType = %A" x.sType
                sprintf "pNext = %A" x.pNext
                sprintf "dstSet = %A" x.dstSet
                sprintf "dstBinding = %A" x.dstBinding
                sprintf "dstArrayElement = %A" x.dstArrayElement
                sprintf "descriptorCount = %A" x.descriptorCount
                sprintf "descriptorType = %A" x.descriptorType
                sprintf "pImageInfo = %A" x.pImageInfo
                sprintf "pBufferInfo = %A" x.pBufferInfo
                sprintf "pTexelBufferView = %A" x.pTexelBufferView
            ] |> sprintf "VkWriteDescriptorSet { %s }"
    end


module VkRaw =
    [<CompilerMessage("activeInstance is for internal use only", 1337, IsError=false, IsHidden=true)>]
    let mutable internal activeInstance : VkInstance = 0n

    [<Literal>]
    let lib = "vulkan-1"

    [<DllImport(lib, EntryPoint="vkCreateInstance"); SuppressUnmanagedCodeSecurity>]
    extern VkResult private _vkCreateInstance(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkInstance* pInstance)
    let vkCreateInstance(pCreateInfo : nativeptr<VkInstanceCreateInfo>, pAllocator : nativeptr<VkAllocationCallbacks>, pInstance : nativeptr<VkInstance>) =
        let res = _vkCreateInstance(pCreateInfo, pAllocator, pInstance)
        if res = VkResult.Success then
            activeInstance <- NativePtr.read pInstance
        res

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyInstance(VkInstance instance, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType _type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, string pName)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, string pName)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDevice* pDevice)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyDevice(VkDevice device, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkEnumerateInstanceExtensionProperties(string pLayerName, uint32* pPropertyCount, VkExtensionProperties* pProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string pLayerName, uint32* pPropertyCount, VkExtensionProperties* pProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkEnumerateInstanceLayerProperties(uint32* pPropertyCount, VkLayerProperties* pProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32* pPropertyCount, VkLayerProperties* pProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetDeviceQueue(VkDevice device, uint32 queueFamilyIndex, uint32 queueIndex, VkQueue* pQueue)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkQueueSubmit(VkQueue queue, uint32 submitCount, VkSubmitInfo* pSubmits, VkFence fence)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkQueueWaitIdle(VkQueue queue)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkDeviceWaitIdle(VkDevice device)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkFreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, nativeint* ppData)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkUnmapMemory(VkDevice device, VkDeviceMemory memory)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32 memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType _type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32* pPropertyCount, VkSparseImageFormatProperties* pProperties)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkQueueBindSparse(VkQueue queue, uint32 bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence fence)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkResetFences(VkDevice device, uint32 fenceCount, VkFence* pFences)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkGetFenceStatus(VkDevice device, VkFence fence)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkWaitForFences(VkDevice device, uint32 fenceCount, VkFence* pFences, VkBool32 waitAll, uint64 timeout)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateEvent(VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent* pEvent)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyEvent(VkDevice device, VkEvent event, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkGetEventStatus(VkDevice device, VkEvent event)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkSetEvent(VkDevice device, VkEvent event)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkResetEvent(VkDevice device, VkEvent event)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount, uint64 dataSize, nativeint pData, VkDeviceSize stride, VkQueryResultFlags flags)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView* pView)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateImage(VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage* pImage)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView* pView)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, uint64* pDataSize, nativeint pData)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32 srcCacheCount, VkPipelineCache* pSrcCaches)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32 createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler* pSampler)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkAllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32 descriptorSetCount, VkDescriptorSet* pDescriptorSets)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkUpdateDescriptorSets(VkDevice device, uint32 descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint32 descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* pAllocator)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32 commandBufferCount, VkCommandBuffer* pCommandBuffers)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* pBeginInfo)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32 firstViewport, uint32 viewportCount, VkViewport* pViewports)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32 firstScissor, uint32 scissorCount, VkRect2D* pScissors)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float32 lineWidth)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float32 depthBiasConstantFactor, float32 depthBiasClamp, float32 depthBiasSlopeFactor)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, V4f blendConstants)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float32 minDepthBounds, float32 maxDepthBounds)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 compareMask)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 writeMask)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32 reference)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32 firstSet, uint32 descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint32 dynamicOffsetCount, uint32* pDynamicOffsets)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32 firstBinding, uint32 bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdDraw(VkCommandBuffer commandBuffer, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int vertexOffset, uint32 firstInstance)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32 drawCount, uint32 stride)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32 regionCount, VkBufferCopy* pRegions)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageCopy* pRegions)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageBlit* pRegions, VkFilter filter)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkBufferImageCopy* pRegions)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32 regionCount, VkBufferImageCopy* pRegions)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, nativeint pData)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32 data)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint32 rangeCount, VkImageSubresourceRange* pRanges)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint32 rangeCount, VkImageSubresourceRange* pRanges)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32 attachmentCount, VkClearAttachment* pAttachments, uint32 rectCount, VkClearRect* pRects)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32 regionCount, VkImageResolve* pRegions)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32 eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32 memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint32 bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32 imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query, VkQueryControlFlags flags)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 query)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint32 query)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32 offset, uint32 size, nativeint pValues)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdEndRenderPass(VkCommandBuffer commandBuffer)

    [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
    extern void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32 commandBufferCount, VkCommandBuffer* pCommandBuffers)

    [<CompilerMessage("vkImportInstanceDelegate is for internal use only", 1337, IsError=false, IsHidden=true)>]
    let vkImportInstanceDelegate<'a>(name : string) = 
        let ptr = vkGetInstanceProcAddr(activeInstance, name)
        if ptr = 0n then
            Log.warn "could not load function: %s" name
            Unchecked.defaultof<'a>
        else
            Report.Line(3, sprintf "loaded function %s (0x%08X)" name ptr)
            Marshal.GetDelegateForFunctionPointer(ptr, typeof<'a>) |> unbox<'a>


module Vulkan11 =


    [<StructLayout(LayoutKind.Sequential)>]
    type VkSamplerYcbcrConversion =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkSamplerYcbcrConversion(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorUpdateTemplate =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkDescriptorUpdateTemplate(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<Flags>]
    type VkSubgroupFeatureFlags =
        | All = 255
        | None = 0
        /// Basic subgroup operations
        | BasicBit = 0x00000001
        /// Vote subgroup operations
        | VoteBit = 0x00000002
        /// Arithmetic subgroup operations
        | ArithmeticBit = 0x00000004
        /// Ballot subgroup operations
        | BallotBit = 0x00000008
        /// Shuffle subgroup operations
        | ShuffleBit = 0x00000010
        /// Shuffle relative subgroup operations
        | ShuffleRelativeBit = 0x00000020
        /// Clustered subgroup operations
        | ClusteredBit = 0x00000040
        /// Quad subgroup operations
        | QuadBit = 0x00000080

    [<Flags>]
    type VkPeerMemoryFeatureFlags =
        | All = 15
        | None = 0
        /// Can read with vkCmdCopy commands
        | CopySrcBit = 0x00000001
        /// Can write with vkCmdCopy commands
        | CopyDstBit = 0x00000002
        /// Can read with any access type/command
        | GenericSrcBit = 0x00000004
        /// Can write with and access type/command
        | GenericDstBit = 0x00000008

    [<Flags>]
    type VkMemoryAllocateFlags =
        | All = 1
        | None = 0
        /// Force allocation on specific devices
        | DeviceMaskBit = 0x00000001

    type VkPointClippingBehavior =
        | AllClipPlanes = 0
        | UserClipPlanesOnly = 1

    type VkTessellationDomainOrigin =
        | UpperLeft = 0
        | LowerLeft = 1

    type VkSamplerYcbcrModelConversion =
        | RgbIdentity = 0
        /// just range expansion
        | YcbcrIdentity = 1
        /// aka HD YUV
        | Ycbcr709 = 2
        /// aka SD YUV
        | Ycbcr601 = 3
        /// aka UHD YUV
        | Ycbcr2020 = 4

    type VkSamplerYcbcrRange =
        /// Luma 0..1 maps to 0..255, chroma -0.5..0.5 to 1..255 (clamped)
        | ItuFull = 0
        /// Luma 0..1 maps to 16..235, chroma -0.5..0.5 to 16..240
        | ItuNarrow = 1

    type VkChromaLocation =
        | CositedEven = 0
        | Midpoint = 1

    type VkDescriptorUpdateTemplateType =
        /// Create descriptor update template for descriptor set updates
        | DescriptorSet = 0

    [<Flags>]
    type VkExternalMemoryHandleTypeFlags =
        | All = 127
        | None = 0
        | OpaqueFdBit = 0x00000001
        | OpaqueWin32Bit = 0x00000002
        | OpaqueWin32KmtBit = 0x00000004
        | D3d11TextureBit = 0x00000008
        | D3d11TextureKmtBit = 0x00000010
        | D3d12HeapBit = 0x00000020
        | D3d12ResourceBit = 0x00000040

    [<Flags>]
    type VkExternalMemoryFeatureFlags =
        | All = 7
        | None = 0
        | DedicatedOnlyBit = 0x00000001
        | ExportableBit = 0x00000002
        | ImportableBit = 0x00000004

    [<Flags>]
    type VkExternalFenceHandleTypeFlags =
        | All = 15
        | None = 0
        | OpaqueFdBit = 0x00000001
        | OpaqueWin32Bit = 0x00000002
        | OpaqueWin32KmtBit = 0x00000004
        | SyncFdBit = 0x00000008

    [<Flags>]
    type VkExternalFenceFeatureFlags =
        | All = 3
        | None = 0
        | ExportableBit = 0x00000001
        | ImportableBit = 0x00000002

    [<Flags>]
    type VkFenceImportFlags =
        | All = 1
        | None = 0
        | TemporaryBit = 0x00000001

    [<Flags>]
    type VkSemaphoreImportFlags =
        | All = 1
        | None = 0
        | TemporaryBit = 0x00000001

    [<Flags>]
    type VkExternalSemaphoreHandleTypeFlags =
        | All = 31
        | None = 0
        | OpaqueFdBit = 0x00000001
        | OpaqueWin32Bit = 0x00000002
        | OpaqueWin32KmtBit = 0x00000004
        | D3d12FenceBit = 0x00000008
        | D3d11FenceBit = 0x00000008
        | SyncFdBit = 0x00000010

    [<Flags>]
    type VkExternalSemaphoreFeatureFlags =
        | All = 3
        | None = 0
        | ExportableBit = 0x00000001
        | ImportableBit = 0x00000002


    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindBufferMemoryDeviceGroupInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceIndexCount : uint32
            val mutable public pDeviceIndices : nativeptr<uint32>

            new(pNext : nativeint, deviceIndexCount : uint32, pDeviceIndices : nativeptr<uint32>) =
                {
                    sType = 1000060013u
                    pNext = pNext
                    deviceIndexCount = deviceIndexCount
                    pDeviceIndices = pDeviceIndices
                }

            new(deviceIndexCount : uint32, pDeviceIndices : nativeptr<uint32>) =
                VkBindBufferMemoryDeviceGroupInfo(Unchecked.defaultof<nativeint>, deviceIndexCount, pDeviceIndices)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceIndexCount = Unchecked.defaultof<uint32> && x.pDeviceIndices = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkBindBufferMemoryDeviceGroupInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceIndexCount = %A" x.deviceIndexCount
                    sprintf "pDeviceIndices = %A" x.pDeviceIndices
                ] |> sprintf "VkBindBufferMemoryDeviceGroupInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindBufferMemoryInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public buffer : VkBuffer
            val mutable public memory : VkDeviceMemory
            val mutable public memoryOffset : VkDeviceSize

            new(pNext : nativeint, buffer : VkBuffer, memory : VkDeviceMemory, memoryOffset : VkDeviceSize) =
                {
                    sType = 1000157000u
                    pNext = pNext
                    buffer = buffer
                    memory = memory
                    memoryOffset = memoryOffset
                }

            new(buffer : VkBuffer, memory : VkDeviceMemory, memoryOffset : VkDeviceSize) =
                VkBindBufferMemoryInfo(Unchecked.defaultof<nativeint>, buffer, memory, memoryOffset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<VkBuffer> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.memoryOffset = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkBindBufferMemoryInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "buffer = %A" x.buffer
                    sprintf "memory = %A" x.memory
                    sprintf "memoryOffset = %A" x.memoryOffset
                ] |> sprintf "VkBindBufferMemoryInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindImageMemoryDeviceGroupInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceIndexCount : uint32
            val mutable public pDeviceIndices : nativeptr<uint32>
            val mutable public splitInstanceBindRegionCount : uint32
            val mutable public pSplitInstanceBindRegions : nativeptr<VkRect2D>

            new(pNext : nativeint, deviceIndexCount : uint32, pDeviceIndices : nativeptr<uint32>, splitInstanceBindRegionCount : uint32, pSplitInstanceBindRegions : nativeptr<VkRect2D>) =
                {
                    sType = 1000060014u
                    pNext = pNext
                    deviceIndexCount = deviceIndexCount
                    pDeviceIndices = pDeviceIndices
                    splitInstanceBindRegionCount = splitInstanceBindRegionCount
                    pSplitInstanceBindRegions = pSplitInstanceBindRegions
                }

            new(deviceIndexCount : uint32, pDeviceIndices : nativeptr<uint32>, splitInstanceBindRegionCount : uint32, pSplitInstanceBindRegions : nativeptr<VkRect2D>) =
                VkBindImageMemoryDeviceGroupInfo(Unchecked.defaultof<nativeint>, deviceIndexCount, pDeviceIndices, splitInstanceBindRegionCount, pSplitInstanceBindRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceIndexCount = Unchecked.defaultof<uint32> && x.pDeviceIndices = Unchecked.defaultof<nativeptr<uint32>> && x.splitInstanceBindRegionCount = Unchecked.defaultof<uint32> && x.pSplitInstanceBindRegions = Unchecked.defaultof<nativeptr<VkRect2D>>

            static member Empty =
                VkBindImageMemoryDeviceGroupInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRect2D>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceIndexCount = %A" x.deviceIndexCount
                    sprintf "pDeviceIndices = %A" x.pDeviceIndices
                    sprintf "splitInstanceBindRegionCount = %A" x.splitInstanceBindRegionCount
                    sprintf "pSplitInstanceBindRegions = %A" x.pSplitInstanceBindRegions
                ] |> sprintf "VkBindImageMemoryDeviceGroupInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindImageMemoryInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image : VkImage
            val mutable public memory : VkDeviceMemory
            val mutable public memoryOffset : VkDeviceSize

            new(pNext : nativeint, image : VkImage, memory : VkDeviceMemory, memoryOffset : VkDeviceSize) =
                {
                    sType = 1000157001u
                    pNext = pNext
                    image = image
                    memory = memory
                    memoryOffset = memoryOffset
                }

            new(image : VkImage, memory : VkDeviceMemory, memoryOffset : VkDeviceSize) =
                VkBindImageMemoryInfo(Unchecked.defaultof<nativeint>, image, memory, memoryOffset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.memoryOffset = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkBindImageMemoryInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "image = %A" x.image
                    sprintf "memory = %A" x.memory
                    sprintf "memoryOffset = %A" x.memoryOffset
                ] |> sprintf "VkBindImageMemoryInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindImagePlaneMemoryInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public planeAspect : VkImageAspectFlags

            new(pNext : nativeint, planeAspect : VkImageAspectFlags) =
                {
                    sType = 1000156002u
                    pNext = pNext
                    planeAspect = planeAspect
                }

            new(planeAspect : VkImageAspectFlags) =
                VkBindImagePlaneMemoryInfo(Unchecked.defaultof<nativeint>, planeAspect)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.planeAspect = Unchecked.defaultof<VkImageAspectFlags>

            static member Empty =
                VkBindImagePlaneMemoryInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageAspectFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "planeAspect = %A" x.planeAspect
                ] |> sprintf "VkBindImagePlaneMemoryInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferMemoryRequirementsInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public buffer : VkBuffer

            new(pNext : nativeint, buffer : VkBuffer) =
                {
                    sType = 1000146000u
                    pNext = pNext
                    buffer = buffer
                }

            new(buffer : VkBuffer) =
                VkBufferMemoryRequirementsInfo2(Unchecked.defaultof<nativeint>, buffer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<VkBuffer>

            static member Empty =
                VkBufferMemoryRequirementsInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "buffer = %A" x.buffer
                ] |> sprintf "VkBufferMemoryRequirementsInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorSetLayoutSupport =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public supported : VkBool32

            new(pNext : nativeint, supported : VkBool32) =
                {
                    sType = 1000168001u
                    pNext = pNext
                    supported = supported
                }

            new(supported : VkBool32) =
                VkDescriptorSetLayoutSupport(Unchecked.defaultof<nativeint>, supported)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.supported = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkDescriptorSetLayoutSupport(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "supported = %A" x.supported
                ] |> sprintf "VkDescriptorSetLayoutSupport { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorUpdateTemplateEntry =
        struct
            val mutable public dstBinding : uint32
            val mutable public dstArrayElement : uint32
            val mutable public descriptorCount : uint32
            val mutable public descriptorType : VkDescriptorType
            val mutable public offset : uint64
            val mutable public stride : uint64

            new(dstBinding : uint32, dstArrayElement : uint32, descriptorCount : uint32, descriptorType : VkDescriptorType, offset : uint64, stride : uint64) =
                {
                    dstBinding = dstBinding
                    dstArrayElement = dstArrayElement
                    descriptorCount = descriptorCount
                    descriptorType = descriptorType
                    offset = offset
                    stride = stride
                }

            member x.IsEmpty =
                x.dstBinding = Unchecked.defaultof<uint32> && x.dstArrayElement = Unchecked.defaultof<uint32> && x.descriptorCount = Unchecked.defaultof<uint32> && x.descriptorType = Unchecked.defaultof<VkDescriptorType> && x.offset = Unchecked.defaultof<uint64> && x.stride = Unchecked.defaultof<uint64>

            static member Empty =
                VkDescriptorUpdateTemplateEntry(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDescriptorType>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "dstBinding = %A" x.dstBinding
                    sprintf "dstArrayElement = %A" x.dstArrayElement
                    sprintf "descriptorCount = %A" x.descriptorCount
                    sprintf "descriptorType = %A" x.descriptorType
                    sprintf "offset = %A" x.offset
                    sprintf "stride = %A" x.stride
                ] |> sprintf "VkDescriptorUpdateTemplateEntry { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorUpdateTemplateCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDescriptorUpdateTemplateCreateFlags
            val mutable public descriptorUpdateEntryCount : uint32
            val mutable public pDescriptorUpdateEntries : nativeptr<VkDescriptorUpdateTemplateEntry>
            val mutable public templateType : VkDescriptorUpdateTemplateType
            val mutable public descriptorSetLayout : VkDescriptorSetLayout
            val mutable public pipelineBindPoint : VkPipelineBindPoint
            val mutable public pipelineLayout : VkPipelineLayout
            val mutable public set : uint32

            new(pNext : nativeint, flags : VkDescriptorUpdateTemplateCreateFlags, descriptorUpdateEntryCount : uint32, pDescriptorUpdateEntries : nativeptr<VkDescriptorUpdateTemplateEntry>, templateType : VkDescriptorUpdateTemplateType, descriptorSetLayout : VkDescriptorSetLayout, pipelineBindPoint : VkPipelineBindPoint, pipelineLayout : VkPipelineLayout, set : uint32) =
                {
                    sType = 1000085000u
                    pNext = pNext
                    flags = flags
                    descriptorUpdateEntryCount = descriptorUpdateEntryCount
                    pDescriptorUpdateEntries = pDescriptorUpdateEntries
                    templateType = templateType
                    descriptorSetLayout = descriptorSetLayout
                    pipelineBindPoint = pipelineBindPoint
                    pipelineLayout = pipelineLayout
                    set = set
                }

            new(flags : VkDescriptorUpdateTemplateCreateFlags, descriptorUpdateEntryCount : uint32, pDescriptorUpdateEntries : nativeptr<VkDescriptorUpdateTemplateEntry>, templateType : VkDescriptorUpdateTemplateType, descriptorSetLayout : VkDescriptorSetLayout, pipelineBindPoint : VkPipelineBindPoint, pipelineLayout : VkPipelineLayout, set : uint32) =
                VkDescriptorUpdateTemplateCreateInfo(Unchecked.defaultof<nativeint>, flags, descriptorUpdateEntryCount, pDescriptorUpdateEntries, templateType, descriptorSetLayout, pipelineBindPoint, pipelineLayout, set)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDescriptorUpdateTemplateCreateFlags> && x.descriptorUpdateEntryCount = Unchecked.defaultof<uint32> && x.pDescriptorUpdateEntries = Unchecked.defaultof<nativeptr<VkDescriptorUpdateTemplateEntry>> && x.templateType = Unchecked.defaultof<VkDescriptorUpdateTemplateType> && x.descriptorSetLayout = Unchecked.defaultof<VkDescriptorSetLayout> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.pipelineLayout = Unchecked.defaultof<VkPipelineLayout> && x.set = Unchecked.defaultof<uint32>

            static member Empty =
                VkDescriptorUpdateTemplateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorUpdateTemplateCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorUpdateTemplateEntry>>, Unchecked.defaultof<VkDescriptorUpdateTemplateType>, Unchecked.defaultof<VkDescriptorSetLayout>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "descriptorUpdateEntryCount = %A" x.descriptorUpdateEntryCount
                    sprintf "pDescriptorUpdateEntries = %A" x.pDescriptorUpdateEntries
                    sprintf "templateType = %A" x.templateType
                    sprintf "descriptorSetLayout = %A" x.descriptorSetLayout
                    sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                    sprintf "pipelineLayout = %A" x.pipelineLayout
                    sprintf "set = %A" x.set
                ] |> sprintf "VkDescriptorUpdateTemplateCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceGroupBindSparseInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public resourceDeviceIndex : uint32
            val mutable public memoryDeviceIndex : uint32

            new(pNext : nativeint, resourceDeviceIndex : uint32, memoryDeviceIndex : uint32) =
                {
                    sType = 1000060006u
                    pNext = pNext
                    resourceDeviceIndex = resourceDeviceIndex
                    memoryDeviceIndex = memoryDeviceIndex
                }

            new(resourceDeviceIndex : uint32, memoryDeviceIndex : uint32) =
                VkDeviceGroupBindSparseInfo(Unchecked.defaultof<nativeint>, resourceDeviceIndex, memoryDeviceIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.resourceDeviceIndex = Unchecked.defaultof<uint32> && x.memoryDeviceIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkDeviceGroupBindSparseInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "resourceDeviceIndex = %A" x.resourceDeviceIndex
                    sprintf "memoryDeviceIndex = %A" x.memoryDeviceIndex
                ] |> sprintf "VkDeviceGroupBindSparseInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceGroupCommandBufferBeginInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceMask : uint32

            new(pNext : nativeint, deviceMask : uint32) =
                {
                    sType = 1000060004u
                    pNext = pNext
                    deviceMask = deviceMask
                }

            new(deviceMask : uint32) =
                VkDeviceGroupCommandBufferBeginInfo(Unchecked.defaultof<nativeint>, deviceMask)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceMask = Unchecked.defaultof<uint32>

            static member Empty =
                VkDeviceGroupCommandBufferBeginInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceMask = %A" x.deviceMask
                ] |> sprintf "VkDeviceGroupCommandBufferBeginInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceGroupDeviceCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public physicalDeviceCount : uint32
            val mutable public pPhysicalDevices : nativeptr<VkPhysicalDevice>

            new(pNext : nativeint, physicalDeviceCount : uint32, pPhysicalDevices : nativeptr<VkPhysicalDevice>) =
                {
                    sType = 1000070001u
                    pNext = pNext
                    physicalDeviceCount = physicalDeviceCount
                    pPhysicalDevices = pPhysicalDevices
                }

            new(physicalDeviceCount : uint32, pPhysicalDevices : nativeptr<VkPhysicalDevice>) =
                VkDeviceGroupDeviceCreateInfo(Unchecked.defaultof<nativeint>, physicalDeviceCount, pPhysicalDevices)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.physicalDeviceCount = Unchecked.defaultof<uint32> && x.pPhysicalDevices = Unchecked.defaultof<nativeptr<VkPhysicalDevice>>

            static member Empty =
                VkDeviceGroupDeviceCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPhysicalDevice>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "physicalDeviceCount = %A" x.physicalDeviceCount
                    sprintf "pPhysicalDevices = %A" x.pPhysicalDevices
                ] |> sprintf "VkDeviceGroupDeviceCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceGroupRenderPassBeginInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceMask : uint32
            val mutable public deviceRenderAreaCount : uint32
            val mutable public pDeviceRenderAreas : nativeptr<VkRect2D>

            new(pNext : nativeint, deviceMask : uint32, deviceRenderAreaCount : uint32, pDeviceRenderAreas : nativeptr<VkRect2D>) =
                {
                    sType = 1000060003u
                    pNext = pNext
                    deviceMask = deviceMask
                    deviceRenderAreaCount = deviceRenderAreaCount
                    pDeviceRenderAreas = pDeviceRenderAreas
                }

            new(deviceMask : uint32, deviceRenderAreaCount : uint32, pDeviceRenderAreas : nativeptr<VkRect2D>) =
                VkDeviceGroupRenderPassBeginInfo(Unchecked.defaultof<nativeint>, deviceMask, deviceRenderAreaCount, pDeviceRenderAreas)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceMask = Unchecked.defaultof<uint32> && x.deviceRenderAreaCount = Unchecked.defaultof<uint32> && x.pDeviceRenderAreas = Unchecked.defaultof<nativeptr<VkRect2D>>

            static member Empty =
                VkDeviceGroupRenderPassBeginInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRect2D>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceMask = %A" x.deviceMask
                    sprintf "deviceRenderAreaCount = %A" x.deviceRenderAreaCount
                    sprintf "pDeviceRenderAreas = %A" x.pDeviceRenderAreas
                ] |> sprintf "VkDeviceGroupRenderPassBeginInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceGroupSubmitInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public waitSemaphoreCount : uint32
            val mutable public pWaitSemaphoreDeviceIndices : nativeptr<uint32>
            val mutable public commandBufferCount : uint32
            val mutable public pCommandBufferDeviceMasks : nativeptr<uint32>
            val mutable public signalSemaphoreCount : uint32
            val mutable public pSignalSemaphoreDeviceIndices : nativeptr<uint32>

            new(pNext : nativeint, waitSemaphoreCount : uint32, pWaitSemaphoreDeviceIndices : nativeptr<uint32>, commandBufferCount : uint32, pCommandBufferDeviceMasks : nativeptr<uint32>, signalSemaphoreCount : uint32, pSignalSemaphoreDeviceIndices : nativeptr<uint32>) =
                {
                    sType = 1000060005u
                    pNext = pNext
                    waitSemaphoreCount = waitSemaphoreCount
                    pWaitSemaphoreDeviceIndices = pWaitSemaphoreDeviceIndices
                    commandBufferCount = commandBufferCount
                    pCommandBufferDeviceMasks = pCommandBufferDeviceMasks
                    signalSemaphoreCount = signalSemaphoreCount
                    pSignalSemaphoreDeviceIndices = pSignalSemaphoreDeviceIndices
                }

            new(waitSemaphoreCount : uint32, pWaitSemaphoreDeviceIndices : nativeptr<uint32>, commandBufferCount : uint32, pCommandBufferDeviceMasks : nativeptr<uint32>, signalSemaphoreCount : uint32, pSignalSemaphoreDeviceIndices : nativeptr<uint32>) =
                VkDeviceGroupSubmitInfo(Unchecked.defaultof<nativeint>, waitSemaphoreCount, pWaitSemaphoreDeviceIndices, commandBufferCount, pCommandBufferDeviceMasks, signalSemaphoreCount, pSignalSemaphoreDeviceIndices)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.waitSemaphoreCount = Unchecked.defaultof<uint32> && x.pWaitSemaphoreDeviceIndices = Unchecked.defaultof<nativeptr<uint32>> && x.commandBufferCount = Unchecked.defaultof<uint32> && x.pCommandBufferDeviceMasks = Unchecked.defaultof<nativeptr<uint32>> && x.signalSemaphoreCount = Unchecked.defaultof<uint32> && x.pSignalSemaphoreDeviceIndices = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkDeviceGroupSubmitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "waitSemaphoreCount = %A" x.waitSemaphoreCount
                    sprintf "pWaitSemaphoreDeviceIndices = %A" x.pWaitSemaphoreDeviceIndices
                    sprintf "commandBufferCount = %A" x.commandBufferCount
                    sprintf "pCommandBufferDeviceMasks = %A" x.pCommandBufferDeviceMasks
                    sprintf "signalSemaphoreCount = %A" x.signalSemaphoreCount
                    sprintf "pSignalSemaphoreDeviceIndices = %A" x.pSignalSemaphoreDeviceIndices
                ] |> sprintf "VkDeviceGroupSubmitInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceQueueInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDeviceQueueCreateFlags
            val mutable public queueFamilyIndex : uint32
            val mutable public queueIndex : uint32

            new(pNext : nativeint, flags : VkDeviceQueueCreateFlags, queueFamilyIndex : uint32, queueIndex : uint32) =
                {
                    sType = 1000145003u
                    pNext = pNext
                    flags = flags
                    queueFamilyIndex = queueFamilyIndex
                    queueIndex = queueIndex
                }

            new(flags : VkDeviceQueueCreateFlags, queueFamilyIndex : uint32, queueIndex : uint32) =
                VkDeviceQueueInfo2(Unchecked.defaultof<nativeint>, flags, queueFamilyIndex, queueIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceQueueCreateFlags> && x.queueFamilyIndex = Unchecked.defaultof<uint32> && x.queueIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkDeviceQueueInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceQueueCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "queueFamilyIndex = %A" x.queueFamilyIndex
                    sprintf "queueIndex = %A" x.queueIndex
                ] |> sprintf "VkDeviceQueueInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportFenceCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleTypes : VkExternalFenceHandleTypeFlags

            new(pNext : nativeint, handleTypes : VkExternalFenceHandleTypeFlags) =
                {
                    sType = 1000113000u
                    pNext = pNext
                    handleTypes = handleTypes
                }

            new(handleTypes : VkExternalFenceHandleTypeFlags) =
                VkExportFenceCreateInfo(Unchecked.defaultof<nativeint>, handleTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<VkExternalFenceHandleTypeFlags>

            static member Empty =
                VkExportFenceCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalFenceHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleTypes = %A" x.handleTypes
                ] |> sprintf "VkExportFenceCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMemoryAllocateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleTypes : VkExternalMemoryHandleTypeFlags

            new(pNext : nativeint, handleTypes : VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000072002u
                    pNext = pNext
                    handleTypes = handleTypes
                }

            new(handleTypes : VkExternalMemoryHandleTypeFlags) =
                VkExportMemoryAllocateInfo(Unchecked.defaultof<nativeint>, handleTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkExportMemoryAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleTypes = %A" x.handleTypes
                ] |> sprintf "VkExportMemoryAllocateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportSemaphoreCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleTypes : VkExternalSemaphoreHandleTypeFlags

            new(pNext : nativeint, handleTypes : VkExternalSemaphoreHandleTypeFlags) =
                {
                    sType = 1000077000u
                    pNext = pNext
                    handleTypes = handleTypes
                }

            new(handleTypes : VkExternalSemaphoreHandleTypeFlags) =
                VkExportSemaphoreCreateInfo(Unchecked.defaultof<nativeint>, handleTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>

            static member Empty =
                VkExportSemaphoreCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleTypes = %A" x.handleTypes
                ] |> sprintf "VkExportSemaphoreCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalMemoryProperties =
        struct
            val mutable public externalMemoryFeatures : VkExternalMemoryFeatureFlags
            val mutable public exportFromImportedHandleTypes : VkExternalMemoryHandleTypeFlags
            val mutable public compatibleHandleTypes : VkExternalMemoryHandleTypeFlags

            new(externalMemoryFeatures : VkExternalMemoryFeatureFlags, exportFromImportedHandleTypes : VkExternalMemoryHandleTypeFlags, compatibleHandleTypes : VkExternalMemoryHandleTypeFlags) =
                {
                    externalMemoryFeatures = externalMemoryFeatures
                    exportFromImportedHandleTypes = exportFromImportedHandleTypes
                    compatibleHandleTypes = compatibleHandleTypes
                }

            member x.IsEmpty =
                x.externalMemoryFeatures = Unchecked.defaultof<VkExternalMemoryFeatureFlags> && x.exportFromImportedHandleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags> && x.compatibleHandleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkExternalMemoryProperties(Unchecked.defaultof<VkExternalMemoryFeatureFlags>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "externalMemoryFeatures = %A" x.externalMemoryFeatures
                    sprintf "exportFromImportedHandleTypes = %A" x.exportFromImportedHandleTypes
                    sprintf "compatibleHandleTypes = %A" x.compatibleHandleTypes
                ] |> sprintf "VkExternalMemoryProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalBufferProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public externalMemoryProperties : VkExternalMemoryProperties

            new(pNext : nativeint, externalMemoryProperties : VkExternalMemoryProperties) =
                {
                    sType = 1000071003u
                    pNext = pNext
                    externalMemoryProperties = externalMemoryProperties
                }

            new(externalMemoryProperties : VkExternalMemoryProperties) =
                VkExternalBufferProperties(Unchecked.defaultof<nativeint>, externalMemoryProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.externalMemoryProperties = Unchecked.defaultof<VkExternalMemoryProperties>

            static member Empty =
                VkExternalBufferProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "externalMemoryProperties = %A" x.externalMemoryProperties
                ] |> sprintf "VkExternalBufferProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalFenceProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public exportFromImportedHandleTypes : VkExternalFenceHandleTypeFlags
            val mutable public compatibleHandleTypes : VkExternalFenceHandleTypeFlags
            val mutable public externalFenceFeatures : VkExternalFenceFeatureFlags

            new(pNext : nativeint, exportFromImportedHandleTypes : VkExternalFenceHandleTypeFlags, compatibleHandleTypes : VkExternalFenceHandleTypeFlags, externalFenceFeatures : VkExternalFenceFeatureFlags) =
                {
                    sType = 1000112001u
                    pNext = pNext
                    exportFromImportedHandleTypes = exportFromImportedHandleTypes
                    compatibleHandleTypes = compatibleHandleTypes
                    externalFenceFeatures = externalFenceFeatures
                }

            new(exportFromImportedHandleTypes : VkExternalFenceHandleTypeFlags, compatibleHandleTypes : VkExternalFenceHandleTypeFlags, externalFenceFeatures : VkExternalFenceFeatureFlags) =
                VkExternalFenceProperties(Unchecked.defaultof<nativeint>, exportFromImportedHandleTypes, compatibleHandleTypes, externalFenceFeatures)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.exportFromImportedHandleTypes = Unchecked.defaultof<VkExternalFenceHandleTypeFlags> && x.compatibleHandleTypes = Unchecked.defaultof<VkExternalFenceHandleTypeFlags> && x.externalFenceFeatures = Unchecked.defaultof<VkExternalFenceFeatureFlags>

            static member Empty =
                VkExternalFenceProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalFenceHandleTypeFlags>, Unchecked.defaultof<VkExternalFenceHandleTypeFlags>, Unchecked.defaultof<VkExternalFenceFeatureFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "exportFromImportedHandleTypes = %A" x.exportFromImportedHandleTypes
                    sprintf "compatibleHandleTypes = %A" x.compatibleHandleTypes
                    sprintf "externalFenceFeatures = %A" x.externalFenceFeatures
                ] |> sprintf "VkExternalFenceProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalImageFormatProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public externalMemoryProperties : VkExternalMemoryProperties

            new(pNext : nativeint, externalMemoryProperties : VkExternalMemoryProperties) =
                {
                    sType = 1000071001u
                    pNext = pNext
                    externalMemoryProperties = externalMemoryProperties
                }

            new(externalMemoryProperties : VkExternalMemoryProperties) =
                VkExternalImageFormatProperties(Unchecked.defaultof<nativeint>, externalMemoryProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.externalMemoryProperties = Unchecked.defaultof<VkExternalMemoryProperties>

            static member Empty =
                VkExternalImageFormatProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "externalMemoryProperties = %A" x.externalMemoryProperties
                ] |> sprintf "VkExternalImageFormatProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalMemoryBufferCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleTypes : VkExternalMemoryHandleTypeFlags

            new(pNext : nativeint, handleTypes : VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000072000u
                    pNext = pNext
                    handleTypes = handleTypes
                }

            new(handleTypes : VkExternalMemoryHandleTypeFlags) =
                VkExternalMemoryBufferCreateInfo(Unchecked.defaultof<nativeint>, handleTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkExternalMemoryBufferCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleTypes = %A" x.handleTypes
                ] |> sprintf "VkExternalMemoryBufferCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalMemoryImageCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleTypes : VkExternalMemoryHandleTypeFlags

            new(pNext : nativeint, handleTypes : VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000072001u
                    pNext = pNext
                    handleTypes = handleTypes
                }

            new(handleTypes : VkExternalMemoryHandleTypeFlags) =
                VkExternalMemoryImageCreateInfo(Unchecked.defaultof<nativeint>, handleTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkExternalMemoryImageCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleTypes = %A" x.handleTypes
                ] |> sprintf "VkExternalMemoryImageCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalSemaphoreProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public exportFromImportedHandleTypes : VkExternalSemaphoreHandleTypeFlags
            val mutable public compatibleHandleTypes : VkExternalSemaphoreHandleTypeFlags
            val mutable public externalSemaphoreFeatures : VkExternalSemaphoreFeatureFlags

            new(pNext : nativeint, exportFromImportedHandleTypes : VkExternalSemaphoreHandleTypeFlags, compatibleHandleTypes : VkExternalSemaphoreHandleTypeFlags, externalSemaphoreFeatures : VkExternalSemaphoreFeatureFlags) =
                {
                    sType = 1000076001u
                    pNext = pNext
                    exportFromImportedHandleTypes = exportFromImportedHandleTypes
                    compatibleHandleTypes = compatibleHandleTypes
                    externalSemaphoreFeatures = externalSemaphoreFeatures
                }

            new(exportFromImportedHandleTypes : VkExternalSemaphoreHandleTypeFlags, compatibleHandleTypes : VkExternalSemaphoreHandleTypeFlags, externalSemaphoreFeatures : VkExternalSemaphoreFeatureFlags) =
                VkExternalSemaphoreProperties(Unchecked.defaultof<nativeint>, exportFromImportedHandleTypes, compatibleHandleTypes, externalSemaphoreFeatures)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.exportFromImportedHandleTypes = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags> && x.compatibleHandleTypes = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags> && x.externalSemaphoreFeatures = Unchecked.defaultof<VkExternalSemaphoreFeatureFlags>

            static member Empty =
                VkExternalSemaphoreProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>, Unchecked.defaultof<VkExternalSemaphoreFeatureFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "exportFromImportedHandleTypes = %A" x.exportFromImportedHandleTypes
                    sprintf "compatibleHandleTypes = %A" x.compatibleHandleTypes
                    sprintf "externalSemaphoreFeatures = %A" x.externalSemaphoreFeatures
                ] |> sprintf "VkExternalSemaphoreProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkFormatProperties2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public formatProperties : VkFormatProperties

            new(pNext : nativeint, formatProperties : VkFormatProperties) =
                {
                    sType = 1000059002u
                    pNext = pNext
                    formatProperties = formatProperties
                }

            new(formatProperties : VkFormatProperties) =
                VkFormatProperties2(Unchecked.defaultof<nativeint>, formatProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.formatProperties = Unchecked.defaultof<VkFormatProperties>

            static member Empty =
                VkFormatProperties2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormatProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "formatProperties = %A" x.formatProperties
                ] |> sprintf "VkFormatProperties2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageFormatProperties2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageFormatProperties : VkImageFormatProperties

            new(pNext : nativeint, imageFormatProperties : VkImageFormatProperties) =
                {
                    sType = 1000059003u
                    pNext = pNext
                    imageFormatProperties = imageFormatProperties
                }

            new(imageFormatProperties : VkImageFormatProperties) =
                VkImageFormatProperties2(Unchecked.defaultof<nativeint>, imageFormatProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageFormatProperties = Unchecked.defaultof<VkImageFormatProperties>

            static member Empty =
                VkImageFormatProperties2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageFormatProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageFormatProperties = %A" x.imageFormatProperties
                ] |> sprintf "VkImageFormatProperties2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageMemoryRequirementsInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image : VkImage

            new(pNext : nativeint, image : VkImage) =
                {
                    sType = 1000146001u
                    pNext = pNext
                    image = image
                }

            new(image : VkImage) =
                VkImageMemoryRequirementsInfo2(Unchecked.defaultof<nativeint>, image)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage>

            static member Empty =
                VkImageMemoryRequirementsInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "image = %A" x.image
                ] |> sprintf "VkImageMemoryRequirementsInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImagePlaneMemoryRequirementsInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public planeAspect : VkImageAspectFlags

            new(pNext : nativeint, planeAspect : VkImageAspectFlags) =
                {
                    sType = 1000156003u
                    pNext = pNext
                    planeAspect = planeAspect
                }

            new(planeAspect : VkImageAspectFlags) =
                VkImagePlaneMemoryRequirementsInfo(Unchecked.defaultof<nativeint>, planeAspect)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.planeAspect = Unchecked.defaultof<VkImageAspectFlags>

            static member Empty =
                VkImagePlaneMemoryRequirementsInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageAspectFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "planeAspect = %A" x.planeAspect
                ] |> sprintf "VkImagePlaneMemoryRequirementsInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageSparseMemoryRequirementsInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image : VkImage

            new(pNext : nativeint, image : VkImage) =
                {
                    sType = 1000146002u
                    pNext = pNext
                    image = image
                }

            new(image : VkImage) =
                VkImageSparseMemoryRequirementsInfo2(Unchecked.defaultof<nativeint>, image)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage>

            static member Empty =
                VkImageSparseMemoryRequirementsInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "image = %A" x.image
                ] |> sprintf "VkImageSparseMemoryRequirementsInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageViewUsageCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public usage : VkImageUsageFlags

            new(pNext : nativeint, usage : VkImageUsageFlags) =
                {
                    sType = 1000117002u
                    pNext = pNext
                    usage = usage
                }

            new(usage : VkImageUsageFlags) =
                VkImageViewUsageCreateInfo(Unchecked.defaultof<nativeint>, usage)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.usage = Unchecked.defaultof<VkImageUsageFlags>

            static member Empty =
                VkImageViewUsageCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageUsageFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "usage = %A" x.usage
                ] |> sprintf "VkImageViewUsageCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkInputAttachmentAspectReference =
        struct
            val mutable public subpass : uint32
            val mutable public inputAttachmentIndex : uint32
            val mutable public aspectMask : VkImageAspectFlags

            new(subpass : uint32, inputAttachmentIndex : uint32, aspectMask : VkImageAspectFlags) =
                {
                    subpass = subpass
                    inputAttachmentIndex = inputAttachmentIndex
                    aspectMask = aspectMask
                }

            member x.IsEmpty =
                x.subpass = Unchecked.defaultof<uint32> && x.inputAttachmentIndex = Unchecked.defaultof<uint32> && x.aspectMask = Unchecked.defaultof<VkImageAspectFlags>

            static member Empty =
                VkInputAttachmentAspectReference(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageAspectFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "subpass = %A" x.subpass
                    sprintf "inputAttachmentIndex = %A" x.inputAttachmentIndex
                    sprintf "aspectMask = %A" x.aspectMask
                ] |> sprintf "VkInputAttachmentAspectReference { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryAllocateFlagsInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkMemoryAllocateFlags
            val mutable public deviceMask : uint32

            new(pNext : nativeint, flags : VkMemoryAllocateFlags, deviceMask : uint32) =
                {
                    sType = 1000060000u
                    pNext = pNext
                    flags = flags
                    deviceMask = deviceMask
                }

            new(flags : VkMemoryAllocateFlags, deviceMask : uint32) =
                VkMemoryAllocateFlagsInfo(Unchecked.defaultof<nativeint>, flags, deviceMask)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkMemoryAllocateFlags> && x.deviceMask = Unchecked.defaultof<uint32>

            static member Empty =
                VkMemoryAllocateFlagsInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMemoryAllocateFlags>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "deviceMask = %A" x.deviceMask
                ] |> sprintf "VkMemoryAllocateFlagsInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryDedicatedAllocateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image : VkImage
            val mutable public buffer : VkBuffer

            new(pNext : nativeint, image : VkImage, buffer : VkBuffer) =
                {
                    sType = 1000127001u
                    pNext = pNext
                    image = image
                    buffer = buffer
                }

            new(image : VkImage, buffer : VkBuffer) =
                VkMemoryDedicatedAllocateInfo(Unchecked.defaultof<nativeint>, image, buffer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage> && x.buffer = Unchecked.defaultof<VkBuffer>

            static member Empty =
                VkMemoryDedicatedAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkBuffer>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "image = %A" x.image
                    sprintf "buffer = %A" x.buffer
                ] |> sprintf "VkMemoryDedicatedAllocateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryDedicatedRequirements =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public prefersDedicatedAllocation : VkBool32
            val mutable public requiresDedicatedAllocation : VkBool32

            new(pNext : nativeint, prefersDedicatedAllocation : VkBool32, requiresDedicatedAllocation : VkBool32) =
                {
                    sType = 1000127000u
                    pNext = pNext
                    prefersDedicatedAllocation = prefersDedicatedAllocation
                    requiresDedicatedAllocation = requiresDedicatedAllocation
                }

            new(prefersDedicatedAllocation : VkBool32, requiresDedicatedAllocation : VkBool32) =
                VkMemoryDedicatedRequirements(Unchecked.defaultof<nativeint>, prefersDedicatedAllocation, requiresDedicatedAllocation)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.prefersDedicatedAllocation = Unchecked.defaultof<VkBool32> && x.requiresDedicatedAllocation = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkMemoryDedicatedRequirements(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "prefersDedicatedAllocation = %A" x.prefersDedicatedAllocation
                    sprintf "requiresDedicatedAllocation = %A" x.requiresDedicatedAllocation
                ] |> sprintf "VkMemoryDedicatedRequirements { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryRequirements2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryRequirements : VkMemoryRequirements

            new(pNext : nativeint, memoryRequirements : VkMemoryRequirements) =
                {
                    sType = 1000146003u
                    pNext = pNext
                    memoryRequirements = memoryRequirements
                }

            new(memoryRequirements : VkMemoryRequirements) =
                VkMemoryRequirements2(Unchecked.defaultof<nativeint>, memoryRequirements)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryRequirements = Unchecked.defaultof<VkMemoryRequirements>

            static member Empty =
                VkMemoryRequirements2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMemoryRequirements>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryRequirements = %A" x.memoryRequirements
                ] |> sprintf "VkMemoryRequirements2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevice16BitStorageFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public storageBuffer16BitAccess : VkBool32
            val mutable public uniformAndStorageBuffer16BitAccess : VkBool32
            val mutable public storagePushConstant16 : VkBool32
            val mutable public storageInputOutput16 : VkBool32

            new(pNext : nativeint, storageBuffer16BitAccess : VkBool32, uniformAndStorageBuffer16BitAccess : VkBool32, storagePushConstant16 : VkBool32, storageInputOutput16 : VkBool32) =
                {
                    sType = 1000083000u
                    pNext = pNext
                    storageBuffer16BitAccess = storageBuffer16BitAccess
                    uniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess
                    storagePushConstant16 = storagePushConstant16
                    storageInputOutput16 = storageInputOutput16
                }

            new(storageBuffer16BitAccess : VkBool32, uniformAndStorageBuffer16BitAccess : VkBool32, storagePushConstant16 : VkBool32, storageInputOutput16 : VkBool32) =
                VkPhysicalDevice16BitStorageFeatures(Unchecked.defaultof<nativeint>, storageBuffer16BitAccess, uniformAndStorageBuffer16BitAccess, storagePushConstant16, storageInputOutput16)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.storageBuffer16BitAccess = Unchecked.defaultof<VkBool32> && x.uniformAndStorageBuffer16BitAccess = Unchecked.defaultof<VkBool32> && x.storagePushConstant16 = Unchecked.defaultof<VkBool32> && x.storageInputOutput16 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevice16BitStorageFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "storageBuffer16BitAccess = %A" x.storageBuffer16BitAccess
                    sprintf "uniformAndStorageBuffer16BitAccess = %A" x.uniformAndStorageBuffer16BitAccess
                    sprintf "storagePushConstant16 = %A" x.storagePushConstant16
                    sprintf "storageInputOutput16 = %A" x.storageInputOutput16
                ] |> sprintf "VkPhysicalDevice16BitStorageFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExternalBufferInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkBufferCreateFlags
            val mutable public usage : VkBufferUsageFlags
            val mutable public handleType : VkExternalMemoryHandleTypeFlags

            new(pNext : nativeint, flags : VkBufferCreateFlags, usage : VkBufferUsageFlags, handleType : VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000071002u
                    pNext = pNext
                    flags = flags
                    usage = usage
                    handleType = handleType
                }

            new(flags : VkBufferCreateFlags, usage : VkBufferUsageFlags, handleType : VkExternalMemoryHandleTypeFlags) =
                VkPhysicalDeviceExternalBufferInfo(Unchecked.defaultof<nativeint>, flags, usage, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkBufferCreateFlags> && x.usage = Unchecked.defaultof<VkBufferUsageFlags> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkPhysicalDeviceExternalBufferInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferCreateFlags>, Unchecked.defaultof<VkBufferUsageFlags>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "usage = %A" x.usage
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkPhysicalDeviceExternalBufferInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExternalFenceInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleType : VkExternalFenceHandleTypeFlags

            new(pNext : nativeint, handleType : VkExternalFenceHandleTypeFlags) =
                {
                    sType = 1000112000u
                    pNext = pNext
                    handleType = handleType
                }

            new(handleType : VkExternalFenceHandleTypeFlags) =
                VkPhysicalDeviceExternalFenceInfo(Unchecked.defaultof<nativeint>, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<VkExternalFenceHandleTypeFlags>

            static member Empty =
                VkPhysicalDeviceExternalFenceInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalFenceHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkPhysicalDeviceExternalFenceInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExternalImageFormatInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleType : VkExternalMemoryHandleTypeFlags

            new(pNext : nativeint, handleType : VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000071000u
                    pNext = pNext
                    handleType = handleType
                }

            new(handleType : VkExternalMemoryHandleTypeFlags) =
                VkPhysicalDeviceExternalImageFormatInfo(Unchecked.defaultof<nativeint>, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkPhysicalDeviceExternalImageFormatInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkPhysicalDeviceExternalImageFormatInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExternalSemaphoreInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleType : VkExternalSemaphoreHandleTypeFlags

            new(pNext : nativeint, handleType : VkExternalSemaphoreHandleTypeFlags) =
                {
                    sType = 1000076000u
                    pNext = pNext
                    handleType = handleType
                }

            new(handleType : VkExternalSemaphoreHandleTypeFlags) =
                VkPhysicalDeviceExternalSemaphoreInfo(Unchecked.defaultof<nativeint>, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>

            static member Empty =
                VkPhysicalDeviceExternalSemaphoreInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkPhysicalDeviceExternalSemaphoreInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFeatures2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public features : VkPhysicalDeviceFeatures

            new(pNext : nativeint, features : VkPhysicalDeviceFeatures) =
                {
                    sType = 1000059000u
                    pNext = pNext
                    features = features
                }

            new(features : VkPhysicalDeviceFeatures) =
                VkPhysicalDeviceFeatures2(Unchecked.defaultof<nativeint>, features)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.features = Unchecked.defaultof<VkPhysicalDeviceFeatures>

            static member Empty =
                VkPhysicalDeviceFeatures2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPhysicalDeviceFeatures>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "features = %A" x.features
                ] |> sprintf "VkPhysicalDeviceFeatures2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceGroupProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public physicalDeviceCount : uint32
            val mutable public physicalDevices : VkPhysicalDevice_32
            val mutable public subsetAllocation : VkBool32

            new(pNext : nativeint, physicalDeviceCount : uint32, physicalDevices : VkPhysicalDevice_32, subsetAllocation : VkBool32) =
                {
                    sType = 1000070000u
                    pNext = pNext
                    physicalDeviceCount = physicalDeviceCount
                    physicalDevices = physicalDevices
                    subsetAllocation = subsetAllocation
                }

            new(physicalDeviceCount : uint32, physicalDevices : VkPhysicalDevice_32, subsetAllocation : VkBool32) =
                VkPhysicalDeviceGroupProperties(Unchecked.defaultof<nativeint>, physicalDeviceCount, physicalDevices, subsetAllocation)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.physicalDeviceCount = Unchecked.defaultof<uint32> && x.physicalDevices = Unchecked.defaultof<VkPhysicalDevice_32> && x.subsetAllocation = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceGroupProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPhysicalDevice_32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "physicalDeviceCount = %A" x.physicalDeviceCount
                    sprintf "physicalDevices = %A" x.physicalDevices
                    sprintf "subsetAllocation = %A" x.subsetAllocation
                ] |> sprintf "VkPhysicalDeviceGroupProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceIDProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceUUID : Guid
            val mutable public driverUUID : Guid
            val mutable public deviceLUID : byte_8
            val mutable public deviceNodeMask : uint32
            val mutable public deviceLUIDValid : VkBool32

            new(pNext : nativeint, deviceUUID : Guid, driverUUID : Guid, deviceLUID : byte_8, deviceNodeMask : uint32, deviceLUIDValid : VkBool32) =
                {
                    sType = 1000071004u
                    pNext = pNext
                    deviceUUID = deviceUUID
                    driverUUID = driverUUID
                    deviceLUID = deviceLUID
                    deviceNodeMask = deviceNodeMask
                    deviceLUIDValid = deviceLUIDValid
                }

            new(deviceUUID : Guid, driverUUID : Guid, deviceLUID : byte_8, deviceNodeMask : uint32, deviceLUIDValid : VkBool32) =
                VkPhysicalDeviceIDProperties(Unchecked.defaultof<nativeint>, deviceUUID, driverUUID, deviceLUID, deviceNodeMask, deviceLUIDValid)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceUUID = Unchecked.defaultof<Guid> && x.driverUUID = Unchecked.defaultof<Guid> && x.deviceLUID = Unchecked.defaultof<byte_8> && x.deviceNodeMask = Unchecked.defaultof<uint32> && x.deviceLUIDValid = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceIDProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Guid>, Unchecked.defaultof<Guid>, Unchecked.defaultof<byte_8>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceUUID = %A" x.deviceUUID
                    sprintf "driverUUID = %A" x.driverUUID
                    sprintf "deviceLUID = %A" x.deviceLUID
                    sprintf "deviceNodeMask = %A" x.deviceNodeMask
                    sprintf "deviceLUIDValid = %A" x.deviceLUIDValid
                ] |> sprintf "VkPhysicalDeviceIDProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceImageFormatInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public format : VkFormat
            val mutable public _type : VkImageType
            val mutable public tiling : VkImageTiling
            val mutable public usage : VkImageUsageFlags
            val mutable public flags : VkImageCreateFlags

            new(pNext : nativeint, format : VkFormat, _type : VkImageType, tiling : VkImageTiling, usage : VkImageUsageFlags, flags : VkImageCreateFlags) =
                {
                    sType = 1000059004u
                    pNext = pNext
                    format = format
                    _type = _type
                    tiling = tiling
                    usage = usage
                    flags = flags
                }

            new(format : VkFormat, _type : VkImageType, tiling : VkImageTiling, usage : VkImageUsageFlags, flags : VkImageCreateFlags) =
                VkPhysicalDeviceImageFormatInfo2(Unchecked.defaultof<nativeint>, format, _type, tiling, usage, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x._type = Unchecked.defaultof<VkImageType> && x.tiling = Unchecked.defaultof<VkImageTiling> && x.usage = Unchecked.defaultof<VkImageUsageFlags> && x.flags = Unchecked.defaultof<VkImageCreateFlags>

            static member Empty =
                VkPhysicalDeviceImageFormatInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkImageType>, Unchecked.defaultof<VkImageTiling>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<VkImageCreateFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "format = %A" x.format
                    sprintf "_type = %A" x._type
                    sprintf "tiling = %A" x.tiling
                    sprintf "usage = %A" x.usage
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkPhysicalDeviceImageFormatInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMaintenance3Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxPerSetDescriptors : uint32
            val mutable public maxMemoryAllocationSize : VkDeviceSize

            new(pNext : nativeint, maxPerSetDescriptors : uint32, maxMemoryAllocationSize : VkDeviceSize) =
                {
                    sType = 1000168000u
                    pNext = pNext
                    maxPerSetDescriptors = maxPerSetDescriptors
                    maxMemoryAllocationSize = maxMemoryAllocationSize
                }

            new(maxPerSetDescriptors : uint32, maxMemoryAllocationSize : VkDeviceSize) =
                VkPhysicalDeviceMaintenance3Properties(Unchecked.defaultof<nativeint>, maxPerSetDescriptors, maxMemoryAllocationSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxPerSetDescriptors = Unchecked.defaultof<uint32> && x.maxMemoryAllocationSize = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkPhysicalDeviceMaintenance3Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxPerSetDescriptors = %A" x.maxPerSetDescriptors
                    sprintf "maxMemoryAllocationSize = %A" x.maxMemoryAllocationSize
                ] |> sprintf "VkPhysicalDeviceMaintenance3Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMemoryProperties2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryProperties : VkPhysicalDeviceMemoryProperties

            new(pNext : nativeint, memoryProperties : VkPhysicalDeviceMemoryProperties) =
                {
                    sType = 1000059006u
                    pNext = pNext
                    memoryProperties = memoryProperties
                }

            new(memoryProperties : VkPhysicalDeviceMemoryProperties) =
                VkPhysicalDeviceMemoryProperties2(Unchecked.defaultof<nativeint>, memoryProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryProperties = Unchecked.defaultof<VkPhysicalDeviceMemoryProperties>

            static member Empty =
                VkPhysicalDeviceMemoryProperties2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPhysicalDeviceMemoryProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryProperties = %A" x.memoryProperties
                ] |> sprintf "VkPhysicalDeviceMemoryProperties2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMultiviewFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public multiview : VkBool32
            val mutable public multiviewGeometryShader : VkBool32
            val mutable public multiviewTessellationShader : VkBool32

            new(pNext : nativeint, multiview : VkBool32, multiviewGeometryShader : VkBool32, multiviewTessellationShader : VkBool32) =
                {
                    sType = 1000053001u
                    pNext = pNext
                    multiview = multiview
                    multiviewGeometryShader = multiviewGeometryShader
                    multiviewTessellationShader = multiviewTessellationShader
                }

            new(multiview : VkBool32, multiviewGeometryShader : VkBool32, multiviewTessellationShader : VkBool32) =
                VkPhysicalDeviceMultiviewFeatures(Unchecked.defaultof<nativeint>, multiview, multiviewGeometryShader, multiviewTessellationShader)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.multiview = Unchecked.defaultof<VkBool32> && x.multiviewGeometryShader = Unchecked.defaultof<VkBool32> && x.multiviewTessellationShader = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMultiviewFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "multiview = %A" x.multiview
                    sprintf "multiviewGeometryShader = %A" x.multiviewGeometryShader
                    sprintf "multiviewTessellationShader = %A" x.multiviewTessellationShader
                ] |> sprintf "VkPhysicalDeviceMultiviewFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMultiviewProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxMultiviewViewCount : uint32
            val mutable public maxMultiviewInstanceIndex : uint32

            new(pNext : nativeint, maxMultiviewViewCount : uint32, maxMultiviewInstanceIndex : uint32) =
                {
                    sType = 1000053002u
                    pNext = pNext
                    maxMultiviewViewCount = maxMultiviewViewCount
                    maxMultiviewInstanceIndex = maxMultiviewInstanceIndex
                }

            new(maxMultiviewViewCount : uint32, maxMultiviewInstanceIndex : uint32) =
                VkPhysicalDeviceMultiviewProperties(Unchecked.defaultof<nativeint>, maxMultiviewViewCount, maxMultiviewInstanceIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxMultiviewViewCount = Unchecked.defaultof<uint32> && x.maxMultiviewInstanceIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceMultiviewProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxMultiviewViewCount = %A" x.maxMultiviewViewCount
                    sprintf "maxMultiviewInstanceIndex = %A" x.maxMultiviewInstanceIndex
                ] |> sprintf "VkPhysicalDeviceMultiviewProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePointClippingProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pointClippingBehavior : VkPointClippingBehavior

            new(pNext : nativeint, pointClippingBehavior : VkPointClippingBehavior) =
                {
                    sType = 1000117000u
                    pNext = pNext
                    pointClippingBehavior = pointClippingBehavior
                }

            new(pointClippingBehavior : VkPointClippingBehavior) =
                VkPhysicalDevicePointClippingProperties(Unchecked.defaultof<nativeint>, pointClippingBehavior)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pointClippingBehavior = Unchecked.defaultof<VkPointClippingBehavior>

            static member Empty =
                VkPhysicalDevicePointClippingProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPointClippingBehavior>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pointClippingBehavior = %A" x.pointClippingBehavior
                ] |> sprintf "VkPhysicalDevicePointClippingProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceProperties2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public properties : VkPhysicalDeviceProperties

            new(pNext : nativeint, properties : VkPhysicalDeviceProperties) =
                {
                    sType = 1000059001u
                    pNext = pNext
                    properties = properties
                }

            new(properties : VkPhysicalDeviceProperties) =
                VkPhysicalDeviceProperties2(Unchecked.defaultof<nativeint>, properties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.properties = Unchecked.defaultof<VkPhysicalDeviceProperties>

            static member Empty =
                VkPhysicalDeviceProperties2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPhysicalDeviceProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "properties = %A" x.properties
                ] |> sprintf "VkPhysicalDeviceProperties2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceProtectedMemoryFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public protectedMemory : VkBool32

            new(pNext : nativeint, protectedMemory : VkBool32) =
                {
                    sType = 1000145001u
                    pNext = pNext
                    protectedMemory = protectedMemory
                }

            new(protectedMemory : VkBool32) =
                VkPhysicalDeviceProtectedMemoryFeatures(Unchecked.defaultof<nativeint>, protectedMemory)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.protectedMemory = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceProtectedMemoryFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "protectedMemory = %A" x.protectedMemory
                ] |> sprintf "VkPhysicalDeviceProtectedMemoryFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceProtectedMemoryProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public protectedNoFault : VkBool32

            new(pNext : nativeint, protectedNoFault : VkBool32) =
                {
                    sType = 1000145002u
                    pNext = pNext
                    protectedNoFault = protectedNoFault
                }

            new(protectedNoFault : VkBool32) =
                VkPhysicalDeviceProtectedMemoryProperties(Unchecked.defaultof<nativeint>, protectedNoFault)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.protectedNoFault = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceProtectedMemoryProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "protectedNoFault = %A" x.protectedNoFault
                ] |> sprintf "VkPhysicalDeviceProtectedMemoryProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSamplerYcbcrConversionFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public samplerYcbcrConversion : VkBool32

            new(pNext : nativeint, samplerYcbcrConversion : VkBool32) =
                {
                    sType = 1000156004u
                    pNext = pNext
                    samplerYcbcrConversion = samplerYcbcrConversion
                }

            new(samplerYcbcrConversion : VkBool32) =
                VkPhysicalDeviceSamplerYcbcrConversionFeatures(Unchecked.defaultof<nativeint>, samplerYcbcrConversion)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.samplerYcbcrConversion = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSamplerYcbcrConversionFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "samplerYcbcrConversion = %A" x.samplerYcbcrConversion
                ] |> sprintf "VkPhysicalDeviceSamplerYcbcrConversionFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderDrawParametersFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderDrawParameters : VkBool32

            new(pNext : nativeint, shaderDrawParameters : VkBool32) =
                {
                    sType = 1000063000u
                    pNext = pNext
                    shaderDrawParameters = shaderDrawParameters
                }

            new(shaderDrawParameters : VkBool32) =
                VkPhysicalDeviceShaderDrawParametersFeatures(Unchecked.defaultof<nativeint>, shaderDrawParameters)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderDrawParameters = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderDrawParametersFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderDrawParameters = %A" x.shaderDrawParameters
                ] |> sprintf "VkPhysicalDeviceShaderDrawParametersFeatures { %s }"
        end

    type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSparseImageFormatInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public format : VkFormat
            val mutable public _type : VkImageType
            val mutable public samples : VkSampleCountFlags
            val mutable public usage : VkImageUsageFlags
            val mutable public tiling : VkImageTiling

            new(pNext : nativeint, format : VkFormat, _type : VkImageType, samples : VkSampleCountFlags, usage : VkImageUsageFlags, tiling : VkImageTiling) =
                {
                    sType = 1000059008u
                    pNext = pNext
                    format = format
                    _type = _type
                    samples = samples
                    usage = usage
                    tiling = tiling
                }

            new(format : VkFormat, _type : VkImageType, samples : VkSampleCountFlags, usage : VkImageUsageFlags, tiling : VkImageTiling) =
                VkPhysicalDeviceSparseImageFormatInfo2(Unchecked.defaultof<nativeint>, format, _type, samples, usage, tiling)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x._type = Unchecked.defaultof<VkImageType> && x.samples = Unchecked.defaultof<VkSampleCountFlags> && x.usage = Unchecked.defaultof<VkImageUsageFlags> && x.tiling = Unchecked.defaultof<VkImageTiling>

            static member Empty =
                VkPhysicalDeviceSparseImageFormatInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkImageType>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<VkImageTiling>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "format = %A" x.format
                    sprintf "_type = %A" x._type
                    sprintf "samples = %A" x.samples
                    sprintf "usage = %A" x.usage
                    sprintf "tiling = %A" x.tiling
                ] |> sprintf "VkPhysicalDeviceSparseImageFormatInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSubgroupProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public subgroupSize : uint32
            val mutable public supportedStages : VkShaderStageFlags
            val mutable public supportedOperations : VkSubgroupFeatureFlags
            val mutable public quadOperationsInAllStages : VkBool32

            new(pNext : nativeint, subgroupSize : uint32, supportedStages : VkShaderStageFlags, supportedOperations : VkSubgroupFeatureFlags, quadOperationsInAllStages : VkBool32) =
                {
                    sType = 1000094000u
                    pNext = pNext
                    subgroupSize = subgroupSize
                    supportedStages = supportedStages
                    supportedOperations = supportedOperations
                    quadOperationsInAllStages = quadOperationsInAllStages
                }

            new(subgroupSize : uint32, supportedStages : VkShaderStageFlags, supportedOperations : VkSubgroupFeatureFlags, quadOperationsInAllStages : VkBool32) =
                VkPhysicalDeviceSubgroupProperties(Unchecked.defaultof<nativeint>, subgroupSize, supportedStages, supportedOperations, quadOperationsInAllStages)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.subgroupSize = Unchecked.defaultof<uint32> && x.supportedStages = Unchecked.defaultof<VkShaderStageFlags> && x.supportedOperations = Unchecked.defaultof<VkSubgroupFeatureFlags> && x.quadOperationsInAllStages = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSubgroupProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkSubgroupFeatureFlags>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "subgroupSize = %A" x.subgroupSize
                    sprintf "supportedStages = %A" x.supportedStages
                    sprintf "supportedOperations = %A" x.supportedOperations
                    sprintf "quadOperationsInAllStages = %A" x.quadOperationsInAllStages
                ] |> sprintf "VkPhysicalDeviceSubgroupProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVariablePointersFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public variablePointersStorageBuffer : VkBool32
            val mutable public variablePointers : VkBool32

            new(pNext : nativeint, variablePointersStorageBuffer : VkBool32, variablePointers : VkBool32) =
                {
                    sType = 1000120000u
                    pNext = pNext
                    variablePointersStorageBuffer = variablePointersStorageBuffer
                    variablePointers = variablePointers
                }

            new(variablePointersStorageBuffer : VkBool32, variablePointers : VkBool32) =
                VkPhysicalDeviceVariablePointersFeatures(Unchecked.defaultof<nativeint>, variablePointersStorageBuffer, variablePointers)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.variablePointersStorageBuffer = Unchecked.defaultof<VkBool32> && x.variablePointers = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVariablePointersFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "variablePointersStorageBuffer = %A" x.variablePointersStorageBuffer
                    sprintf "variablePointers = %A" x.variablePointers
                ] |> sprintf "VkPhysicalDeviceVariablePointersFeatures { %s }"
        end

    type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineTessellationDomainOriginStateCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public domainOrigin : VkTessellationDomainOrigin

            new(pNext : nativeint, domainOrigin : VkTessellationDomainOrigin) =
                {
                    sType = 1000117003u
                    pNext = pNext
                    domainOrigin = domainOrigin
                }

            new(domainOrigin : VkTessellationDomainOrigin) =
                VkPipelineTessellationDomainOriginStateCreateInfo(Unchecked.defaultof<nativeint>, domainOrigin)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.domainOrigin = Unchecked.defaultof<VkTessellationDomainOrigin>

            static member Empty =
                VkPipelineTessellationDomainOriginStateCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkTessellationDomainOrigin>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "domainOrigin = %A" x.domainOrigin
                ] |> sprintf "VkPipelineTessellationDomainOriginStateCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkProtectedSubmitInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public protectedSubmit : VkBool32

            new(pNext : nativeint, protectedSubmit : VkBool32) =
                {
                    sType = 1000145000u
                    pNext = pNext
                    protectedSubmit = protectedSubmit
                }

            new(protectedSubmit : VkBool32) =
                VkProtectedSubmitInfo(Unchecked.defaultof<nativeint>, protectedSubmit)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.protectedSubmit = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkProtectedSubmitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "protectedSubmit = %A" x.protectedSubmit
                ] |> sprintf "VkProtectedSubmitInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkQueueFamilyProperties2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public queueFamilyProperties : VkQueueFamilyProperties

            new(pNext : nativeint, queueFamilyProperties : VkQueueFamilyProperties) =
                {
                    sType = 1000059005u
                    pNext = pNext
                    queueFamilyProperties = queueFamilyProperties
                }

            new(queueFamilyProperties : VkQueueFamilyProperties) =
                VkQueueFamilyProperties2(Unchecked.defaultof<nativeint>, queueFamilyProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.queueFamilyProperties = Unchecked.defaultof<VkQueueFamilyProperties>

            static member Empty =
                VkQueueFamilyProperties2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkQueueFamilyProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "queueFamilyProperties = %A" x.queueFamilyProperties
                ] |> sprintf "VkQueueFamilyProperties2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassInputAttachmentAspectCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public aspectReferenceCount : uint32
            val mutable public pAspectReferences : nativeptr<VkInputAttachmentAspectReference>

            new(pNext : nativeint, aspectReferenceCount : uint32, pAspectReferences : nativeptr<VkInputAttachmentAspectReference>) =
                {
                    sType = 1000117001u
                    pNext = pNext
                    aspectReferenceCount = aspectReferenceCount
                    pAspectReferences = pAspectReferences
                }

            new(aspectReferenceCount : uint32, pAspectReferences : nativeptr<VkInputAttachmentAspectReference>) =
                VkRenderPassInputAttachmentAspectCreateInfo(Unchecked.defaultof<nativeint>, aspectReferenceCount, pAspectReferences)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.aspectReferenceCount = Unchecked.defaultof<uint32> && x.pAspectReferences = Unchecked.defaultof<nativeptr<VkInputAttachmentAspectReference>>

            static member Empty =
                VkRenderPassInputAttachmentAspectCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkInputAttachmentAspectReference>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "aspectReferenceCount = %A" x.aspectReferenceCount
                    sprintf "pAspectReferences = %A" x.pAspectReferences
                ] |> sprintf "VkRenderPassInputAttachmentAspectCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassMultiviewCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public subpassCount : uint32
            val mutable public pViewMasks : nativeptr<uint32>
            val mutable public dependencyCount : uint32
            val mutable public pViewOffsets : nativeptr<int>
            val mutable public correlationMaskCount : uint32
            val mutable public pCorrelationMasks : nativeptr<uint32>

            new(pNext : nativeint, subpassCount : uint32, pViewMasks : nativeptr<uint32>, dependencyCount : uint32, pViewOffsets : nativeptr<int>, correlationMaskCount : uint32, pCorrelationMasks : nativeptr<uint32>) =
                {
                    sType = 1000053000u
                    pNext = pNext
                    subpassCount = subpassCount
                    pViewMasks = pViewMasks
                    dependencyCount = dependencyCount
                    pViewOffsets = pViewOffsets
                    correlationMaskCount = correlationMaskCount
                    pCorrelationMasks = pCorrelationMasks
                }

            new(subpassCount : uint32, pViewMasks : nativeptr<uint32>, dependencyCount : uint32, pViewOffsets : nativeptr<int>, correlationMaskCount : uint32, pCorrelationMasks : nativeptr<uint32>) =
                VkRenderPassMultiviewCreateInfo(Unchecked.defaultof<nativeint>, subpassCount, pViewMasks, dependencyCount, pViewOffsets, correlationMaskCount, pCorrelationMasks)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.subpassCount = Unchecked.defaultof<uint32> && x.pViewMasks = Unchecked.defaultof<nativeptr<uint32>> && x.dependencyCount = Unchecked.defaultof<uint32> && x.pViewOffsets = Unchecked.defaultof<nativeptr<int>> && x.correlationMaskCount = Unchecked.defaultof<uint32> && x.pCorrelationMasks = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkRenderPassMultiviewCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<int>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "subpassCount = %A" x.subpassCount
                    sprintf "pViewMasks = %A" x.pViewMasks
                    sprintf "dependencyCount = %A" x.dependencyCount
                    sprintf "pViewOffsets = %A" x.pViewOffsets
                    sprintf "correlationMaskCount = %A" x.correlationMaskCount
                    sprintf "pCorrelationMasks = %A" x.pCorrelationMasks
                ] |> sprintf "VkRenderPassMultiviewCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSamplerYcbcrConversionCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public format : VkFormat
            val mutable public ycbcrModel : VkSamplerYcbcrModelConversion
            val mutable public ycbcrRange : VkSamplerYcbcrRange
            val mutable public components : VkComponentMapping
            val mutable public xChromaOffset : VkChromaLocation
            val mutable public yChromaOffset : VkChromaLocation
            val mutable public chromaFilter : VkFilter
            val mutable public forceExplicitReconstruction : VkBool32

            new(pNext : nativeint, format : VkFormat, ycbcrModel : VkSamplerYcbcrModelConversion, ycbcrRange : VkSamplerYcbcrRange, components : VkComponentMapping, xChromaOffset : VkChromaLocation, yChromaOffset : VkChromaLocation, chromaFilter : VkFilter, forceExplicitReconstruction : VkBool32) =
                {
                    sType = 1000156000u
                    pNext = pNext
                    format = format
                    ycbcrModel = ycbcrModel
                    ycbcrRange = ycbcrRange
                    components = components
                    xChromaOffset = xChromaOffset
                    yChromaOffset = yChromaOffset
                    chromaFilter = chromaFilter
                    forceExplicitReconstruction = forceExplicitReconstruction
                }

            new(format : VkFormat, ycbcrModel : VkSamplerYcbcrModelConversion, ycbcrRange : VkSamplerYcbcrRange, components : VkComponentMapping, xChromaOffset : VkChromaLocation, yChromaOffset : VkChromaLocation, chromaFilter : VkFilter, forceExplicitReconstruction : VkBool32) =
                VkSamplerYcbcrConversionCreateInfo(Unchecked.defaultof<nativeint>, format, ycbcrModel, ycbcrRange, components, xChromaOffset, yChromaOffset, chromaFilter, forceExplicitReconstruction)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x.ycbcrModel = Unchecked.defaultof<VkSamplerYcbcrModelConversion> && x.ycbcrRange = Unchecked.defaultof<VkSamplerYcbcrRange> && x.components = Unchecked.defaultof<VkComponentMapping> && x.xChromaOffset = Unchecked.defaultof<VkChromaLocation> && x.yChromaOffset = Unchecked.defaultof<VkChromaLocation> && x.chromaFilter = Unchecked.defaultof<VkFilter> && x.forceExplicitReconstruction = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkSamplerYcbcrConversionCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkSamplerYcbcrModelConversion>, Unchecked.defaultof<VkSamplerYcbcrRange>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<VkChromaLocation>, Unchecked.defaultof<VkChromaLocation>, Unchecked.defaultof<VkFilter>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "format = %A" x.format
                    sprintf "ycbcrModel = %A" x.ycbcrModel
                    sprintf "ycbcrRange = %A" x.ycbcrRange
                    sprintf "components = %A" x.components
                    sprintf "xChromaOffset = %A" x.xChromaOffset
                    sprintf "yChromaOffset = %A" x.yChromaOffset
                    sprintf "chromaFilter = %A" x.chromaFilter
                    sprintf "forceExplicitReconstruction = %A" x.forceExplicitReconstruction
                ] |> sprintf "VkSamplerYcbcrConversionCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSamplerYcbcrConversionImageFormatProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public combinedImageSamplerDescriptorCount : uint32

            new(pNext : nativeint, combinedImageSamplerDescriptorCount : uint32) =
                {
                    sType = 1000156005u
                    pNext = pNext
                    combinedImageSamplerDescriptorCount = combinedImageSamplerDescriptorCount
                }

            new(combinedImageSamplerDescriptorCount : uint32) =
                VkSamplerYcbcrConversionImageFormatProperties(Unchecked.defaultof<nativeint>, combinedImageSamplerDescriptorCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.combinedImageSamplerDescriptorCount = Unchecked.defaultof<uint32>

            static member Empty =
                VkSamplerYcbcrConversionImageFormatProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "combinedImageSamplerDescriptorCount = %A" x.combinedImageSamplerDescriptorCount
                ] |> sprintf "VkSamplerYcbcrConversionImageFormatProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSamplerYcbcrConversionInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public conversion : VkSamplerYcbcrConversion

            new(pNext : nativeint, conversion : VkSamplerYcbcrConversion) =
                {
                    sType = 1000156001u
                    pNext = pNext
                    conversion = conversion
                }

            new(conversion : VkSamplerYcbcrConversion) =
                VkSamplerYcbcrConversionInfo(Unchecked.defaultof<nativeint>, conversion)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.conversion = Unchecked.defaultof<VkSamplerYcbcrConversion>

            static member Empty =
                VkSamplerYcbcrConversionInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSamplerYcbcrConversion>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "conversion = %A" x.conversion
                ] |> sprintf "VkSamplerYcbcrConversionInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSparseImageFormatProperties2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public properties : VkSparseImageFormatProperties

            new(pNext : nativeint, properties : VkSparseImageFormatProperties) =
                {
                    sType = 1000059007u
                    pNext = pNext
                    properties = properties
                }

            new(properties : VkSparseImageFormatProperties) =
                VkSparseImageFormatProperties2(Unchecked.defaultof<nativeint>, properties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.properties = Unchecked.defaultof<VkSparseImageFormatProperties>

            static member Empty =
                VkSparseImageFormatProperties2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSparseImageFormatProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "properties = %A" x.properties
                ] |> sprintf "VkSparseImageFormatProperties2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSparseImageMemoryRequirements2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryRequirements : VkSparseImageMemoryRequirements

            new(pNext : nativeint, memoryRequirements : VkSparseImageMemoryRequirements) =
                {
                    sType = 1000146004u
                    pNext = pNext
                    memoryRequirements = memoryRequirements
                }

            new(memoryRequirements : VkSparseImageMemoryRequirements) =
                VkSparseImageMemoryRequirements2(Unchecked.defaultof<nativeint>, memoryRequirements)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryRequirements = Unchecked.defaultof<VkSparseImageMemoryRequirements>

            static member Empty =
                VkSparseImageMemoryRequirements2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSparseImageMemoryRequirements>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryRequirements = %A" x.memoryRequirements
                ] |> sprintf "VkSparseImageMemoryRequirements2 { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkBufferCreateFlags with
              /// Buffer requires protected memory
              static member inline ProtectedBit = unbox<VkBufferCreateFlags> 0x00000008
         type VkCommandPoolCreateFlags with
              /// Command buffers allocated from pool are protected command buffers
              static member inline ProtectedBit = unbox<VkCommandPoolCreateFlags> 0x00000004
         type VkDependencyFlags with
              /// Dependency is across devices
              static member inline DeviceGroupBit = unbox<VkDependencyFlags> 0x00000004
              static member inline ViewLocalBit = unbox<VkDependencyFlags> 0x00000002
         type VkDeviceQueueCreateFlags with
              /// Queue is a protected-capable device queue
              static member inline ProtectedBit = unbox<VkDeviceQueueCreateFlags> 0x00000001
         type VkFormat with
              static member inline G8b8g8r8422Unorm = unbox<VkFormat> 1000156000
              static member inline B8g8r8g8422Unorm = unbox<VkFormat> 1000156001
              static member inline G8B8R83plane420Unorm = unbox<VkFormat> 1000156002
              static member inline G8B8r82plane420Unorm = unbox<VkFormat> 1000156003
              static member inline G8B8R83plane422Unorm = unbox<VkFormat> 1000156004
              static member inline G8B8r82plane422Unorm = unbox<VkFormat> 1000156005
              static member inline G8B8R83plane444Unorm = unbox<VkFormat> 1000156006
              static member inline R10x6UnormPack16 = unbox<VkFormat> 1000156007
              static member inline R10x6g10x6Unorm2pack16 = unbox<VkFormat> 1000156008
              static member inline R10x6g10x6b10x6a10x6Unorm4pack16 = unbox<VkFormat> 1000156009
              static member inline G10x6b10x6g10x6r10x6422Unorm4pack16 = unbox<VkFormat> 1000156010
              static member inline B10x6g10x6r10x6g10x6422Unorm4pack16 = unbox<VkFormat> 1000156011
              static member inline G10x6B10x6R10x63plane420Unorm3pack16 = unbox<VkFormat> 1000156012
              static member inline G10x6B10x6r10x62plane420Unorm3pack16 = unbox<VkFormat> 1000156013
              static member inline G10x6B10x6R10x63plane422Unorm3pack16 = unbox<VkFormat> 1000156014
              static member inline G10x6B10x6r10x62plane422Unorm3pack16 = unbox<VkFormat> 1000156015
              static member inline G10x6B10x6R10x63plane444Unorm3pack16 = unbox<VkFormat> 1000156016
              static member inline R12x4UnormPack16 = unbox<VkFormat> 1000156017
              static member inline R12x4g12x4Unorm2pack16 = unbox<VkFormat> 1000156018
              static member inline R12x4g12x4b12x4a12x4Unorm4pack16 = unbox<VkFormat> 1000156019
              static member inline G12x4b12x4g12x4r12x4422Unorm4pack16 = unbox<VkFormat> 1000156020
              static member inline B12x4g12x4r12x4g12x4422Unorm4pack16 = unbox<VkFormat> 1000156021
              static member inline G12x4B12x4R12x43plane420Unorm3pack16 = unbox<VkFormat> 1000156022
              static member inline G12x4B12x4r12x42plane420Unorm3pack16 = unbox<VkFormat> 1000156023
              static member inline G12x4B12x4R12x43plane422Unorm3pack16 = unbox<VkFormat> 1000156024
              static member inline G12x4B12x4r12x42plane422Unorm3pack16 = unbox<VkFormat> 1000156025
              static member inline G12x4B12x4R12x43plane444Unorm3pack16 = unbox<VkFormat> 1000156026
              static member inline G16b16g16r16422Unorm = unbox<VkFormat> 1000156027
              static member inline B16g16r16g16422Unorm = unbox<VkFormat> 1000156028
              static member inline G16B16R163plane420Unorm = unbox<VkFormat> 1000156029
              static member inline G16B16r162plane420Unorm = unbox<VkFormat> 1000156030
              static member inline G16B16R163plane422Unorm = unbox<VkFormat> 1000156031
              static member inline G16B16r162plane422Unorm = unbox<VkFormat> 1000156032
              static member inline G16B16R163plane444Unorm = unbox<VkFormat> 1000156033
         type VkFormatFeatureFlags with
              /// Format can be used as the source image of image transfer commands
              static member inline TransferSrcBit = unbox<VkFormatFeatureFlags> 0x00004000
              /// Format can be used as the destination image of image transfer commands
              static member inline TransferDstBit = unbox<VkFormatFeatureFlags> 0x00008000
              /// Format can have midpoint rather than cosited chroma samples
              static member inline MidpointChromaSamplesBit = unbox<VkFormatFeatureFlags> 0x00020000
              /// Format can be used with linear filtering whilst color conversion is enabled
              static member inline SampledImageYcbcrConversionLinearFilterBit = unbox<VkFormatFeatureFlags> 0x00040000
              /// Format can have different chroma, min and mag filters
              static member inline SampledImageYcbcrConversionSeparateReconstructionFilterBit = unbox<VkFormatFeatureFlags> 0x00080000
              static member inline SampledImageYcbcrConversionChromaReconstructionExplicitBit = unbox<VkFormatFeatureFlags> 0x00100000
              static member inline SampledImageYcbcrConversionChromaReconstructionExplicitForceableBit = unbox<VkFormatFeatureFlags> 0x00200000
              /// Format supports disjoint planes
              static member inline DisjointBit = unbox<VkFormatFeatureFlags> 0x00400000
              /// Format can have cosited rather than midpoint chroma samples
              static member inline CositedChromaSamplesBit = unbox<VkFormatFeatureFlags> 0x00800000
         type VkImageAspectFlags with
              static member inline Plane0Bit = unbox<VkImageAspectFlags> 0x00000010
              static member inline Plane1Bit = unbox<VkImageAspectFlags> 0x00000020
              static member inline Plane2Bit = unbox<VkImageAspectFlags> 0x00000040
         type VkImageCreateFlags with
              static member inline AliasBit = unbox<VkImageCreateFlags> 0x00000400
              /// Allows using VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions when binding memory to the image
              static member inline SplitInstanceBindRegionsBit = unbox<VkImageCreateFlags> 0x00000040
              /// The 3D image can be viewed as a 2D or 2D array image
              static member inline D2dArrayCompatibleBit = unbox<VkImageCreateFlags> 0x00000020
              static member inline BlockTexelViewCompatibleBit = unbox<VkImageCreateFlags> 0x00000080
              static member inline ExtendedUsageBit = unbox<VkImageCreateFlags> 0x00000100
              /// Image requires protected memory
              static member inline ProtectedBit = unbox<VkImageCreateFlags> 0x00000800
              static member inline DisjointBit = unbox<VkImageCreateFlags> 0x00000200
         type VkImageLayout with
              static member inline DepthReadOnlyStencilAttachmentOptimal = unbox<VkImageLayout> 1000117000
              static member inline DepthAttachmentStencilReadOnlyOptimal = unbox<VkImageLayout> 1000117001
         type VkMemoryHeapFlags with
              /// If set, heap allocations allocate multiple instances by default
              static member inline MultiInstanceBit = unbox<VkMemoryHeapFlags> 0x00000002
         type VkMemoryPropertyFlags with
              /// Memory is protected
              static member inline ProtectedBit = unbox<VkMemoryPropertyFlags> 0x00000020
         type VkObjectType with
              static member inline SamplerYcbcrConversion = unbox<VkObjectType> 1000156000
              static member inline DescriptorUpdateTemplate = unbox<VkObjectType> 1000085000
         type VkPipelineCreateFlags with
              static member inline ViewIndexFromDeviceIndexBit = unbox<VkPipelineCreateFlags> 0x00000008
              static member inline DispatchBaseBit = unbox<VkPipelineCreateFlags> 0x00000010
              static member inline DispatchBase = unbox<VkPipelineCreateFlags> 0x00000010
         type VkQueueFlags with
              /// Queues may support protected operations
              static member inline ProtectedBit = unbox<VkQueueFlags> 0x00000010
         type VkResult with
              static member inline ErrorOutOfPoolMemory = unbox<VkResult> -1000069000
              static member inline ErrorInvalidExternalHandle = unbox<VkResult> -1000072003

    module VkRaw =
        open VkRaw

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkEnumerateInstanceVersion(uint32* pApiVersion)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkBindBufferMemory2(VkDevice device, uint32 bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkBindImageMemory2(VkDevice device, uint32 bindInfoCount, VkBindImageMemoryInfo* pBindInfos)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32 heapIndex, uint32 localDeviceIndex, uint32 remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32 deviceMask)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32 baseGroupX, uint32 baseGroupY, uint32 baseGroupZ, uint32 groupCountX, uint32 groupCountY, uint32 groupCountZ)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32* pPropertyCount, VkSparseImageFormatProperties2* pProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, nativeint pData)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)



module Vulkan12 =
    open Vulkan11

    type VkDriverId =
        /// Advanced Micro Devices, Inc.
        | AmdProprietary = 1
        /// Advanced Micro Devices, Inc.
        | AmdOpenSource = 2
        /// Mesa open source project
        | MesaRadv = 3
        /// NVIDIA Corporation
        | NvidiaProprietary = 4
        /// Intel Corporation
        | IntelProprietaryWindows = 5
        /// Intel Corporation
        | IntelOpenSource = 6
        /// Imagination Technologies
        | ImaginationProprietary = 7
        /// Qualcomm Technologies, Inc.
        | QualcommProprietary = 8
        /// Arm Limited
        | ArmProprietary = 9
        /// Google LLC
        | GoogleSwiftshader = 10
        /// Google LLC
        | GgpProprietary = 11
        /// Broadcom Inc.
        | BroadcomProprietary = 12
        /// Mesa
        | MesaLlvmpipe = 13
        /// MoltenVK
        | Moltenvk = 14
        /// Core Avionics & Industrial Inc.
        | CoreaviProprietary = 15
        /// Juice Technologies, Inc.
        | JuiceProprietary = 16
        /// Verisilicon, Inc.
        | VerisiliconProprietary = 17
        /// Mesa open source project
        | MesaTurnip = 18
        /// Mesa open source project
        | MesaV3dv = 19
        /// Mesa open source project
        | MesaPanvk = 20
        /// Samsung Electronics Co., Ltd.
        | SamsungProprietary = 21
        /// Mesa open source project
        | MesaVenus = 22
        /// Mesa open source project
        | MesaDozen = 23

    type VkShaderFloatControlsIndependence =
        | D32BitOnly = 0
        | All = 1
        | None = 2

    [<Flags>]
    type VkDescriptorBindingFlags =
        | All = 15
        | None = 0
        | UpdateAfterBindBit = 0x00000001
        | UpdateUnusedWhilePendingBit = 0x00000002
        | PartiallyBoundBit = 0x00000004
        | VariableDescriptorCountBit = 0x00000008

    [<Flags>]
    type VkResolveModeFlags =
        | All = 15
        | None = 0
        | SampleZeroBit = 0x00000001
        | AverageBit = 0x00000002
        | MinBit = 0x00000004
        | MaxBit = 0x00000008

    type VkSamplerReductionMode =
        | WeightedAverage = 0
        | Min = 1
        | Max = 2

    type VkSemaphoreType =
        | Binary = 0
        | Timeline = 1

    [<Flags>]
    type VkSemaphoreWaitFlags =
        | All = 1
        | None = 0
        | AnyBit = 0x00000001


    [<StructLayout(LayoutKind.Sequential)>]
    type VkAttachmentDescription2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkAttachmentDescriptionFlags
            val mutable public format : VkFormat
            val mutable public samples : VkSampleCountFlags
            val mutable public loadOp : VkAttachmentLoadOp
            val mutable public storeOp : VkAttachmentStoreOp
            val mutable public stencilLoadOp : VkAttachmentLoadOp
            val mutable public stencilStoreOp : VkAttachmentStoreOp
            val mutable public initialLayout : VkImageLayout
            val mutable public finalLayout : VkImageLayout

            new(pNext : nativeint, flags : VkAttachmentDescriptionFlags, format : VkFormat, samples : VkSampleCountFlags, loadOp : VkAttachmentLoadOp, storeOp : VkAttachmentStoreOp, stencilLoadOp : VkAttachmentLoadOp, stencilStoreOp : VkAttachmentStoreOp, initialLayout : VkImageLayout, finalLayout : VkImageLayout) =
                {
                    sType = 1000109000u
                    pNext = pNext
                    flags = flags
                    format = format
                    samples = samples
                    loadOp = loadOp
                    storeOp = storeOp
                    stencilLoadOp = stencilLoadOp
                    stencilStoreOp = stencilStoreOp
                    initialLayout = initialLayout
                    finalLayout = finalLayout
                }

            new(flags : VkAttachmentDescriptionFlags, format : VkFormat, samples : VkSampleCountFlags, loadOp : VkAttachmentLoadOp, storeOp : VkAttachmentStoreOp, stencilLoadOp : VkAttachmentLoadOp, stencilStoreOp : VkAttachmentStoreOp, initialLayout : VkImageLayout, finalLayout : VkImageLayout) =
                VkAttachmentDescription2(Unchecked.defaultof<nativeint>, flags, format, samples, loadOp, storeOp, stencilLoadOp, stencilStoreOp, initialLayout, finalLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkAttachmentDescriptionFlags> && x.format = Unchecked.defaultof<VkFormat> && x.samples = Unchecked.defaultof<VkSampleCountFlags> && x.loadOp = Unchecked.defaultof<VkAttachmentLoadOp> && x.storeOp = Unchecked.defaultof<VkAttachmentStoreOp> && x.stencilLoadOp = Unchecked.defaultof<VkAttachmentLoadOp> && x.stencilStoreOp = Unchecked.defaultof<VkAttachmentStoreOp> && x.initialLayout = Unchecked.defaultof<VkImageLayout> && x.finalLayout = Unchecked.defaultof<VkImageLayout>

            static member Empty =
                VkAttachmentDescription2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAttachmentDescriptionFlags>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkAttachmentLoadOp>, Unchecked.defaultof<VkAttachmentStoreOp>, Unchecked.defaultof<VkAttachmentLoadOp>, Unchecked.defaultof<VkAttachmentStoreOp>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageLayout>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "format = %A" x.format
                    sprintf "samples = %A" x.samples
                    sprintf "loadOp = %A" x.loadOp
                    sprintf "storeOp = %A" x.storeOp
                    sprintf "stencilLoadOp = %A" x.stencilLoadOp
                    sprintf "stencilStoreOp = %A" x.stencilStoreOp
                    sprintf "initialLayout = %A" x.initialLayout
                    sprintf "finalLayout = %A" x.finalLayout
                ] |> sprintf "VkAttachmentDescription2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAttachmentDescriptionStencilLayout =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stencilInitialLayout : VkImageLayout
            val mutable public stencilFinalLayout : VkImageLayout

            new(pNext : nativeint, stencilInitialLayout : VkImageLayout, stencilFinalLayout : VkImageLayout) =
                {
                    sType = 1000241002u
                    pNext = pNext
                    stencilInitialLayout = stencilInitialLayout
                    stencilFinalLayout = stencilFinalLayout
                }

            new(stencilInitialLayout : VkImageLayout, stencilFinalLayout : VkImageLayout) =
                VkAttachmentDescriptionStencilLayout(Unchecked.defaultof<nativeint>, stencilInitialLayout, stencilFinalLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stencilInitialLayout = Unchecked.defaultof<VkImageLayout> && x.stencilFinalLayout = Unchecked.defaultof<VkImageLayout>

            static member Empty =
                VkAttachmentDescriptionStencilLayout(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageLayout>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "stencilInitialLayout = %A" x.stencilInitialLayout
                    sprintf "stencilFinalLayout = %A" x.stencilFinalLayout
                ] |> sprintf "VkAttachmentDescriptionStencilLayout { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAttachmentReference2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public attachment : uint32
            val mutable public layout : VkImageLayout
            val mutable public aspectMask : VkImageAspectFlags

            new(pNext : nativeint, attachment : uint32, layout : VkImageLayout, aspectMask : VkImageAspectFlags) =
                {
                    sType = 1000109001u
                    pNext = pNext
                    attachment = attachment
                    layout = layout
                    aspectMask = aspectMask
                }

            new(attachment : uint32, layout : VkImageLayout, aspectMask : VkImageAspectFlags) =
                VkAttachmentReference2(Unchecked.defaultof<nativeint>, attachment, layout, aspectMask)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.attachment = Unchecked.defaultof<uint32> && x.layout = Unchecked.defaultof<VkImageLayout> && x.aspectMask = Unchecked.defaultof<VkImageAspectFlags>

            static member Empty =
                VkAttachmentReference2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageAspectFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "attachment = %A" x.attachment
                    sprintf "layout = %A" x.layout
                    sprintf "aspectMask = %A" x.aspectMask
                ] |> sprintf "VkAttachmentReference2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAttachmentReferenceStencilLayout =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stencilLayout : VkImageLayout

            new(pNext : nativeint, stencilLayout : VkImageLayout) =
                {
                    sType = 1000241001u
                    pNext = pNext
                    stencilLayout = stencilLayout
                }

            new(stencilLayout : VkImageLayout) =
                VkAttachmentReferenceStencilLayout(Unchecked.defaultof<nativeint>, stencilLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stencilLayout = Unchecked.defaultof<VkImageLayout>

            static member Empty =
                VkAttachmentReferenceStencilLayout(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageLayout>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "stencilLayout = %A" x.stencilLayout
                ] |> sprintf "VkAttachmentReferenceStencilLayout { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferDeviceAddressInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public buffer : VkBuffer

            new(pNext : nativeint, buffer : VkBuffer) =
                {
                    sType = 1000244001u
                    pNext = pNext
                    buffer = buffer
                }

            new(buffer : VkBuffer) =
                VkBufferDeviceAddressInfo(Unchecked.defaultof<nativeint>, buffer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<VkBuffer>

            static member Empty =
                VkBufferDeviceAddressInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "buffer = %A" x.buffer
                ] |> sprintf "VkBufferDeviceAddressInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferOpaqueCaptureAddressCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public opaqueCaptureAddress : uint64

            new(pNext : nativeint, opaqueCaptureAddress : uint64) =
                {
                    sType = 1000257002u
                    pNext = pNext
                    opaqueCaptureAddress = opaqueCaptureAddress
                }

            new(opaqueCaptureAddress : uint64) =
                VkBufferOpaqueCaptureAddressCreateInfo(Unchecked.defaultof<nativeint>, opaqueCaptureAddress)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.opaqueCaptureAddress = Unchecked.defaultof<uint64>

            static member Empty =
                VkBufferOpaqueCaptureAddressCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "opaqueCaptureAddress = %A" x.opaqueCaptureAddress
                ] |> sprintf "VkBufferOpaqueCaptureAddressCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkConformanceVersion =
        struct
            val mutable public major : byte
            val mutable public minor : byte
            val mutable public subminor : byte
            val mutable public patch : byte

            new(major : byte, minor : byte, subminor : byte, patch : byte) =
                {
                    major = major
                    minor = minor
                    subminor = subminor
                    patch = patch
                }

            member x.IsEmpty =
                x.major = Unchecked.defaultof<byte> && x.minor = Unchecked.defaultof<byte> && x.subminor = Unchecked.defaultof<byte> && x.patch = Unchecked.defaultof<byte>

            static member Empty =
                VkConformanceVersion(Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "major = %A" x.major
                    sprintf "minor = %A" x.minor
                    sprintf "subminor = %A" x.subminor
                    sprintf "patch = %A" x.patch
                ] |> sprintf "VkConformanceVersion { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorSetLayoutBindingFlagsCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public bindingCount : uint32
            val mutable public pBindingFlags : nativeptr<VkDescriptorBindingFlags>

            new(pNext : nativeint, bindingCount : uint32, pBindingFlags : nativeptr<VkDescriptorBindingFlags>) =
                {
                    sType = 1000161000u
                    pNext = pNext
                    bindingCount = bindingCount
                    pBindingFlags = pBindingFlags
                }

            new(bindingCount : uint32, pBindingFlags : nativeptr<VkDescriptorBindingFlags>) =
                VkDescriptorSetLayoutBindingFlagsCreateInfo(Unchecked.defaultof<nativeint>, bindingCount, pBindingFlags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.bindingCount = Unchecked.defaultof<uint32> && x.pBindingFlags = Unchecked.defaultof<nativeptr<VkDescriptorBindingFlags>>

            static member Empty =
                VkDescriptorSetLayoutBindingFlagsCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorBindingFlags>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "bindingCount = %A" x.bindingCount
                    sprintf "pBindingFlags = %A" x.pBindingFlags
                ] |> sprintf "VkDescriptorSetLayoutBindingFlagsCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorSetVariableDescriptorCountAllocateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public descriptorSetCount : uint32
            val mutable public pDescriptorCounts : nativeptr<uint32>

            new(pNext : nativeint, descriptorSetCount : uint32, pDescriptorCounts : nativeptr<uint32>) =
                {
                    sType = 1000161003u
                    pNext = pNext
                    descriptorSetCount = descriptorSetCount
                    pDescriptorCounts = pDescriptorCounts
                }

            new(descriptorSetCount : uint32, pDescriptorCounts : nativeptr<uint32>) =
                VkDescriptorSetVariableDescriptorCountAllocateInfo(Unchecked.defaultof<nativeint>, descriptorSetCount, pDescriptorCounts)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.descriptorSetCount = Unchecked.defaultof<uint32> && x.pDescriptorCounts = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkDescriptorSetVariableDescriptorCountAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "descriptorSetCount = %A" x.descriptorSetCount
                    sprintf "pDescriptorCounts = %A" x.pDescriptorCounts
                ] |> sprintf "VkDescriptorSetVariableDescriptorCountAllocateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorSetVariableDescriptorCountLayoutSupport =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxVariableDescriptorCount : uint32

            new(pNext : nativeint, maxVariableDescriptorCount : uint32) =
                {
                    sType = 1000161004u
                    pNext = pNext
                    maxVariableDescriptorCount = maxVariableDescriptorCount
                }

            new(maxVariableDescriptorCount : uint32) =
                VkDescriptorSetVariableDescriptorCountLayoutSupport(Unchecked.defaultof<nativeint>, maxVariableDescriptorCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxVariableDescriptorCount = Unchecked.defaultof<uint32>

            static member Empty =
                VkDescriptorSetVariableDescriptorCountLayoutSupport(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxVariableDescriptorCount = %A" x.maxVariableDescriptorCount
                ] |> sprintf "VkDescriptorSetVariableDescriptorCountLayoutSupport { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceMemoryOpaqueCaptureAddressInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memory : VkDeviceMemory

            new(pNext : nativeint, memory : VkDeviceMemory) =
                {
                    sType = 1000257004u
                    pNext = pNext
                    memory = memory
                }

            new(memory : VkDeviceMemory) =
                VkDeviceMemoryOpaqueCaptureAddressInfo(Unchecked.defaultof<nativeint>, memory)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory>

            static member Empty =
                VkDeviceMemoryOpaqueCaptureAddressInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memory = %A" x.memory
                ] |> sprintf "VkDeviceMemoryOpaqueCaptureAddressInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkFramebufferAttachmentImageInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkImageCreateFlags
            val mutable public usage : VkImageUsageFlags
            val mutable public width : uint32
            val mutable public height : uint32
            val mutable public layerCount : uint32
            val mutable public viewFormatCount : uint32
            val mutable public pViewFormats : nativeptr<VkFormat>

            new(pNext : nativeint, flags : VkImageCreateFlags, usage : VkImageUsageFlags, width : uint32, height : uint32, layerCount : uint32, viewFormatCount : uint32, pViewFormats : nativeptr<VkFormat>) =
                {
                    sType = 1000108002u
                    pNext = pNext
                    flags = flags
                    usage = usage
                    width = width
                    height = height
                    layerCount = layerCount
                    viewFormatCount = viewFormatCount
                    pViewFormats = pViewFormats
                }

            new(flags : VkImageCreateFlags, usage : VkImageUsageFlags, width : uint32, height : uint32, layerCount : uint32, viewFormatCount : uint32, pViewFormats : nativeptr<VkFormat>) =
                VkFramebufferAttachmentImageInfo(Unchecked.defaultof<nativeint>, flags, usage, width, height, layerCount, viewFormatCount, pViewFormats)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkImageCreateFlags> && x.usage = Unchecked.defaultof<VkImageUsageFlags> && x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32> && x.layerCount = Unchecked.defaultof<uint32> && x.viewFormatCount = Unchecked.defaultof<uint32> && x.pViewFormats = Unchecked.defaultof<nativeptr<VkFormat>>

            static member Empty =
                VkFramebufferAttachmentImageInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageCreateFlags>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkFormat>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "usage = %A" x.usage
                    sprintf "width = %A" x.width
                    sprintf "height = %A" x.height
                    sprintf "layerCount = %A" x.layerCount
                    sprintf "viewFormatCount = %A" x.viewFormatCount
                    sprintf "pViewFormats = %A" x.pViewFormats
                ] |> sprintf "VkFramebufferAttachmentImageInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkFramebufferAttachmentsCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public attachmentImageInfoCount : uint32
            val mutable public pAttachmentImageInfos : nativeptr<VkFramebufferAttachmentImageInfo>

            new(pNext : nativeint, attachmentImageInfoCount : uint32, pAttachmentImageInfos : nativeptr<VkFramebufferAttachmentImageInfo>) =
                {
                    sType = 1000108001u
                    pNext = pNext
                    attachmentImageInfoCount = attachmentImageInfoCount
                    pAttachmentImageInfos = pAttachmentImageInfos
                }

            new(attachmentImageInfoCount : uint32, pAttachmentImageInfos : nativeptr<VkFramebufferAttachmentImageInfo>) =
                VkFramebufferAttachmentsCreateInfo(Unchecked.defaultof<nativeint>, attachmentImageInfoCount, pAttachmentImageInfos)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.attachmentImageInfoCount = Unchecked.defaultof<uint32> && x.pAttachmentImageInfos = Unchecked.defaultof<nativeptr<VkFramebufferAttachmentImageInfo>>

            static member Empty =
                VkFramebufferAttachmentsCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkFramebufferAttachmentImageInfo>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "attachmentImageInfoCount = %A" x.attachmentImageInfoCount
                    sprintf "pAttachmentImageInfos = %A" x.pAttachmentImageInfos
                ] |> sprintf "VkFramebufferAttachmentsCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageFormatListCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public viewFormatCount : uint32
            val mutable public pViewFormats : nativeptr<VkFormat>

            new(pNext : nativeint, viewFormatCount : uint32, pViewFormats : nativeptr<VkFormat>) =
                {
                    sType = 1000147000u
                    pNext = pNext
                    viewFormatCount = viewFormatCount
                    pViewFormats = pViewFormats
                }

            new(viewFormatCount : uint32, pViewFormats : nativeptr<VkFormat>) =
                VkImageFormatListCreateInfo(Unchecked.defaultof<nativeint>, viewFormatCount, pViewFormats)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.viewFormatCount = Unchecked.defaultof<uint32> && x.pViewFormats = Unchecked.defaultof<nativeptr<VkFormat>>

            static member Empty =
                VkImageFormatListCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkFormat>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "viewFormatCount = %A" x.viewFormatCount
                    sprintf "pViewFormats = %A" x.pViewFormats
                ] |> sprintf "VkImageFormatListCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageStencilUsageCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stencilUsage : VkImageUsageFlags

            new(pNext : nativeint, stencilUsage : VkImageUsageFlags) =
                {
                    sType = 1000246000u
                    pNext = pNext
                    stencilUsage = stencilUsage
                }

            new(stencilUsage : VkImageUsageFlags) =
                VkImageStencilUsageCreateInfo(Unchecked.defaultof<nativeint>, stencilUsage)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stencilUsage = Unchecked.defaultof<VkImageUsageFlags>

            static member Empty =
                VkImageStencilUsageCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageUsageFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "stencilUsage = %A" x.stencilUsage
                ] |> sprintf "VkImageStencilUsageCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryOpaqueCaptureAddressAllocateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public opaqueCaptureAddress : uint64

            new(pNext : nativeint, opaqueCaptureAddress : uint64) =
                {
                    sType = 1000257003u
                    pNext = pNext
                    opaqueCaptureAddress = opaqueCaptureAddress
                }

            new(opaqueCaptureAddress : uint64) =
                VkMemoryOpaqueCaptureAddressAllocateInfo(Unchecked.defaultof<nativeint>, opaqueCaptureAddress)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.opaqueCaptureAddress = Unchecked.defaultof<uint64>

            static member Empty =
                VkMemoryOpaqueCaptureAddressAllocateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "opaqueCaptureAddress = %A" x.opaqueCaptureAddress
                ] |> sprintf "VkMemoryOpaqueCaptureAddressAllocateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevice8BitStorageFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public storageBuffer8BitAccess : VkBool32
            val mutable public uniformAndStorageBuffer8BitAccess : VkBool32
            val mutable public storagePushConstant8 : VkBool32

            new(pNext : nativeint, storageBuffer8BitAccess : VkBool32, uniformAndStorageBuffer8BitAccess : VkBool32, storagePushConstant8 : VkBool32) =
                {
                    sType = 1000177000u
                    pNext = pNext
                    storageBuffer8BitAccess = storageBuffer8BitAccess
                    uniformAndStorageBuffer8BitAccess = uniformAndStorageBuffer8BitAccess
                    storagePushConstant8 = storagePushConstant8
                }

            new(storageBuffer8BitAccess : VkBool32, uniformAndStorageBuffer8BitAccess : VkBool32, storagePushConstant8 : VkBool32) =
                VkPhysicalDevice8BitStorageFeatures(Unchecked.defaultof<nativeint>, storageBuffer8BitAccess, uniformAndStorageBuffer8BitAccess, storagePushConstant8)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.storageBuffer8BitAccess = Unchecked.defaultof<VkBool32> && x.uniformAndStorageBuffer8BitAccess = Unchecked.defaultof<VkBool32> && x.storagePushConstant8 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevice8BitStorageFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "storageBuffer8BitAccess = %A" x.storageBuffer8BitAccess
                    sprintf "uniformAndStorageBuffer8BitAccess = %A" x.uniformAndStorageBuffer8BitAccess
                    sprintf "storagePushConstant8 = %A" x.storagePushConstant8
                ] |> sprintf "VkPhysicalDevice8BitStorageFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceBufferDeviceAddressFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public bufferDeviceAddress : VkBool32
            val mutable public bufferDeviceAddressCaptureReplay : VkBool32
            val mutable public bufferDeviceAddressMultiDevice : VkBool32

            new(pNext : nativeint, bufferDeviceAddress : VkBool32, bufferDeviceAddressCaptureReplay : VkBool32, bufferDeviceAddressMultiDevice : VkBool32) =
                {
                    sType = 1000257000u
                    pNext = pNext
                    bufferDeviceAddress = bufferDeviceAddress
                    bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay
                    bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice
                }

            new(bufferDeviceAddress : VkBool32, bufferDeviceAddressCaptureReplay : VkBool32, bufferDeviceAddressMultiDevice : VkBool32) =
                VkPhysicalDeviceBufferDeviceAddressFeatures(Unchecked.defaultof<nativeint>, bufferDeviceAddress, bufferDeviceAddressCaptureReplay, bufferDeviceAddressMultiDevice)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.bufferDeviceAddress = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddressCaptureReplay = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddressMultiDevice = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceBufferDeviceAddressFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "bufferDeviceAddress = %A" x.bufferDeviceAddress
                    sprintf "bufferDeviceAddressCaptureReplay = %A" x.bufferDeviceAddressCaptureReplay
                    sprintf "bufferDeviceAddressMultiDevice = %A" x.bufferDeviceAddressMultiDevice
                ] |> sprintf "VkPhysicalDeviceBufferDeviceAddressFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDepthStencilResolveProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public supportedDepthResolveModes : VkResolveModeFlags
            val mutable public supportedStencilResolveModes : VkResolveModeFlags
            val mutable public independentResolveNone : VkBool32
            val mutable public independentResolve : VkBool32

            new(pNext : nativeint, supportedDepthResolveModes : VkResolveModeFlags, supportedStencilResolveModes : VkResolveModeFlags, independentResolveNone : VkBool32, independentResolve : VkBool32) =
                {
                    sType = 1000199000u
                    pNext = pNext
                    supportedDepthResolveModes = supportedDepthResolveModes
                    supportedStencilResolveModes = supportedStencilResolveModes
                    independentResolveNone = independentResolveNone
                    independentResolve = independentResolve
                }

            new(supportedDepthResolveModes : VkResolveModeFlags, supportedStencilResolveModes : VkResolveModeFlags, independentResolveNone : VkBool32, independentResolve : VkBool32) =
                VkPhysicalDeviceDepthStencilResolveProperties(Unchecked.defaultof<nativeint>, supportedDepthResolveModes, supportedStencilResolveModes, independentResolveNone, independentResolve)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.supportedDepthResolveModes = Unchecked.defaultof<VkResolveModeFlags> && x.supportedStencilResolveModes = Unchecked.defaultof<VkResolveModeFlags> && x.independentResolveNone = Unchecked.defaultof<VkBool32> && x.independentResolve = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDepthStencilResolveProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "supportedDepthResolveModes = %A" x.supportedDepthResolveModes
                    sprintf "supportedStencilResolveModes = %A" x.supportedStencilResolveModes
                    sprintf "independentResolveNone = %A" x.independentResolveNone
                    sprintf "independentResolve = %A" x.independentResolve
                ] |> sprintf "VkPhysicalDeviceDepthStencilResolveProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDescriptorIndexingFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderInputAttachmentArrayDynamicIndexing : VkBool32
            val mutable public shaderUniformTexelBufferArrayDynamicIndexing : VkBool32
            val mutable public shaderStorageTexelBufferArrayDynamicIndexing : VkBool32
            val mutable public shaderUniformBufferArrayNonUniformIndexing : VkBool32
            val mutable public shaderSampledImageArrayNonUniformIndexing : VkBool32
            val mutable public shaderStorageBufferArrayNonUniformIndexing : VkBool32
            val mutable public shaderStorageImageArrayNonUniformIndexing : VkBool32
            val mutable public shaderInputAttachmentArrayNonUniformIndexing : VkBool32
            val mutable public shaderUniformTexelBufferArrayNonUniformIndexing : VkBool32
            val mutable public shaderStorageTexelBufferArrayNonUniformIndexing : VkBool32
            val mutable public descriptorBindingUniformBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingSampledImageUpdateAfterBind : VkBool32
            val mutable public descriptorBindingStorageImageUpdateAfterBind : VkBool32
            val mutable public descriptorBindingStorageBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingUniformTexelBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingStorageTexelBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingUpdateUnusedWhilePending : VkBool32
            val mutable public descriptorBindingPartiallyBound : VkBool32
            val mutable public descriptorBindingVariableDescriptorCount : VkBool32
            val mutable public runtimeDescriptorArray : VkBool32

            new(pNext : nativeint, shaderInputAttachmentArrayDynamicIndexing : VkBool32, shaderUniformTexelBufferArrayDynamicIndexing : VkBool32, shaderStorageTexelBufferArrayDynamicIndexing : VkBool32, shaderUniformBufferArrayNonUniformIndexing : VkBool32, shaderSampledImageArrayNonUniformIndexing : VkBool32, shaderStorageBufferArrayNonUniformIndexing : VkBool32, shaderStorageImageArrayNonUniformIndexing : VkBool32, shaderInputAttachmentArrayNonUniformIndexing : VkBool32, shaderUniformTexelBufferArrayNonUniformIndexing : VkBool32, shaderStorageTexelBufferArrayNonUniformIndexing : VkBool32, descriptorBindingUniformBufferUpdateAfterBind : VkBool32, descriptorBindingSampledImageUpdateAfterBind : VkBool32, descriptorBindingStorageImageUpdateAfterBind : VkBool32, descriptorBindingStorageBufferUpdateAfterBind : VkBool32, descriptorBindingUniformTexelBufferUpdateAfterBind : VkBool32, descriptorBindingStorageTexelBufferUpdateAfterBind : VkBool32, descriptorBindingUpdateUnusedWhilePending : VkBool32, descriptorBindingPartiallyBound : VkBool32, descriptorBindingVariableDescriptorCount : VkBool32, runtimeDescriptorArray : VkBool32) =
                {
                    sType = 1000161001u
                    pNext = pNext
                    shaderInputAttachmentArrayDynamicIndexing = shaderInputAttachmentArrayDynamicIndexing
                    shaderUniformTexelBufferArrayDynamicIndexing = shaderUniformTexelBufferArrayDynamicIndexing
                    shaderStorageTexelBufferArrayDynamicIndexing = shaderStorageTexelBufferArrayDynamicIndexing
                    shaderUniformBufferArrayNonUniformIndexing = shaderUniformBufferArrayNonUniformIndexing
                    shaderSampledImageArrayNonUniformIndexing = shaderSampledImageArrayNonUniformIndexing
                    shaderStorageBufferArrayNonUniformIndexing = shaderStorageBufferArrayNonUniformIndexing
                    shaderStorageImageArrayNonUniformIndexing = shaderStorageImageArrayNonUniformIndexing
                    shaderInputAttachmentArrayNonUniformIndexing = shaderInputAttachmentArrayNonUniformIndexing
                    shaderUniformTexelBufferArrayNonUniformIndexing = shaderUniformTexelBufferArrayNonUniformIndexing
                    shaderStorageTexelBufferArrayNonUniformIndexing = shaderStorageTexelBufferArrayNonUniformIndexing
                    descriptorBindingUniformBufferUpdateAfterBind = descriptorBindingUniformBufferUpdateAfterBind
                    descriptorBindingSampledImageUpdateAfterBind = descriptorBindingSampledImageUpdateAfterBind
                    descriptorBindingStorageImageUpdateAfterBind = descriptorBindingStorageImageUpdateAfterBind
                    descriptorBindingStorageBufferUpdateAfterBind = descriptorBindingStorageBufferUpdateAfterBind
                    descriptorBindingUniformTexelBufferUpdateAfterBind = descriptorBindingUniformTexelBufferUpdateAfterBind
                    descriptorBindingStorageTexelBufferUpdateAfterBind = descriptorBindingStorageTexelBufferUpdateAfterBind
                    descriptorBindingUpdateUnusedWhilePending = descriptorBindingUpdateUnusedWhilePending
                    descriptorBindingPartiallyBound = descriptorBindingPartiallyBound
                    descriptorBindingVariableDescriptorCount = descriptorBindingVariableDescriptorCount
                    runtimeDescriptorArray = runtimeDescriptorArray
                }

            new(shaderInputAttachmentArrayDynamicIndexing : VkBool32, shaderUniformTexelBufferArrayDynamicIndexing : VkBool32, shaderStorageTexelBufferArrayDynamicIndexing : VkBool32, shaderUniformBufferArrayNonUniformIndexing : VkBool32, shaderSampledImageArrayNonUniformIndexing : VkBool32, shaderStorageBufferArrayNonUniformIndexing : VkBool32, shaderStorageImageArrayNonUniformIndexing : VkBool32, shaderInputAttachmentArrayNonUniformIndexing : VkBool32, shaderUniformTexelBufferArrayNonUniformIndexing : VkBool32, shaderStorageTexelBufferArrayNonUniformIndexing : VkBool32, descriptorBindingUniformBufferUpdateAfterBind : VkBool32, descriptorBindingSampledImageUpdateAfterBind : VkBool32, descriptorBindingStorageImageUpdateAfterBind : VkBool32, descriptorBindingStorageBufferUpdateAfterBind : VkBool32, descriptorBindingUniformTexelBufferUpdateAfterBind : VkBool32, descriptorBindingStorageTexelBufferUpdateAfterBind : VkBool32, descriptorBindingUpdateUnusedWhilePending : VkBool32, descriptorBindingPartiallyBound : VkBool32, descriptorBindingVariableDescriptorCount : VkBool32, runtimeDescriptorArray : VkBool32) =
                VkPhysicalDeviceDescriptorIndexingFeatures(Unchecked.defaultof<nativeint>, shaderInputAttachmentArrayDynamicIndexing, shaderUniformTexelBufferArrayDynamicIndexing, shaderStorageTexelBufferArrayDynamicIndexing, shaderUniformBufferArrayNonUniformIndexing, shaderSampledImageArrayNonUniformIndexing, shaderStorageBufferArrayNonUniformIndexing, shaderStorageImageArrayNonUniformIndexing, shaderInputAttachmentArrayNonUniformIndexing, shaderUniformTexelBufferArrayNonUniformIndexing, shaderStorageTexelBufferArrayNonUniformIndexing, descriptorBindingUniformBufferUpdateAfterBind, descriptorBindingSampledImageUpdateAfterBind, descriptorBindingStorageImageUpdateAfterBind, descriptorBindingStorageBufferUpdateAfterBind, descriptorBindingUniformTexelBufferUpdateAfterBind, descriptorBindingStorageTexelBufferUpdateAfterBind, descriptorBindingUpdateUnusedWhilePending, descriptorBindingPartiallyBound, descriptorBindingVariableDescriptorCount, runtimeDescriptorArray)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderInputAttachmentArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderUniformTexelBufferArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageTexelBufferArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderUniformBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderSampledImageArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageImageArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderInputAttachmentArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderUniformTexelBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageTexelBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.descriptorBindingUniformBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingSampledImageUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingStorageImageUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingStorageBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingUniformTexelBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingStorageTexelBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingUpdateUnusedWhilePending = Unchecked.defaultof<VkBool32> && x.descriptorBindingPartiallyBound = Unchecked.defaultof<VkBool32> && x.descriptorBindingVariableDescriptorCount = Unchecked.defaultof<VkBool32> && x.runtimeDescriptorArray = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDescriptorIndexingFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderInputAttachmentArrayDynamicIndexing = %A" x.shaderInputAttachmentArrayDynamicIndexing
                    sprintf "shaderUniformTexelBufferArrayDynamicIndexing = %A" x.shaderUniformTexelBufferArrayDynamicIndexing
                    sprintf "shaderStorageTexelBufferArrayDynamicIndexing = %A" x.shaderStorageTexelBufferArrayDynamicIndexing
                    sprintf "shaderUniformBufferArrayNonUniformIndexing = %A" x.shaderUniformBufferArrayNonUniformIndexing
                    sprintf "shaderSampledImageArrayNonUniformIndexing = %A" x.shaderSampledImageArrayNonUniformIndexing
                    sprintf "shaderStorageBufferArrayNonUniformIndexing = %A" x.shaderStorageBufferArrayNonUniformIndexing
                    sprintf "shaderStorageImageArrayNonUniformIndexing = %A" x.shaderStorageImageArrayNonUniformIndexing
                    sprintf "shaderInputAttachmentArrayNonUniformIndexing = %A" x.shaderInputAttachmentArrayNonUniformIndexing
                    sprintf "shaderUniformTexelBufferArrayNonUniformIndexing = %A" x.shaderUniformTexelBufferArrayNonUniformIndexing
                    sprintf "shaderStorageTexelBufferArrayNonUniformIndexing = %A" x.shaderStorageTexelBufferArrayNonUniformIndexing
                    sprintf "descriptorBindingUniformBufferUpdateAfterBind = %A" x.descriptorBindingUniformBufferUpdateAfterBind
                    sprintf "descriptorBindingSampledImageUpdateAfterBind = %A" x.descriptorBindingSampledImageUpdateAfterBind
                    sprintf "descriptorBindingStorageImageUpdateAfterBind = %A" x.descriptorBindingStorageImageUpdateAfterBind
                    sprintf "descriptorBindingStorageBufferUpdateAfterBind = %A" x.descriptorBindingStorageBufferUpdateAfterBind
                    sprintf "descriptorBindingUniformTexelBufferUpdateAfterBind = %A" x.descriptorBindingUniformTexelBufferUpdateAfterBind
                    sprintf "descriptorBindingStorageTexelBufferUpdateAfterBind = %A" x.descriptorBindingStorageTexelBufferUpdateAfterBind
                    sprintf "descriptorBindingUpdateUnusedWhilePending = %A" x.descriptorBindingUpdateUnusedWhilePending
                    sprintf "descriptorBindingPartiallyBound = %A" x.descriptorBindingPartiallyBound
                    sprintf "descriptorBindingVariableDescriptorCount = %A" x.descriptorBindingVariableDescriptorCount
                    sprintf "runtimeDescriptorArray = %A" x.runtimeDescriptorArray
                ] |> sprintf "VkPhysicalDeviceDescriptorIndexingFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDescriptorIndexingProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxUpdateAfterBindDescriptorsInAllPools : uint32
            val mutable public shaderUniformBufferArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderSampledImageArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderStorageBufferArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderStorageImageArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderInputAttachmentArrayNonUniformIndexingNative : VkBool32
            val mutable public robustBufferAccessUpdateAfterBind : VkBool32
            val mutable public quadDivergentImplicitLod : VkBool32
            val mutable public maxPerStageDescriptorUpdateAfterBindSamplers : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindUniformBuffers : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindStorageBuffers : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindSampledImages : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindStorageImages : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindInputAttachments : uint32
            val mutable public maxPerStageUpdateAfterBindResources : uint32
            val mutable public maxDescriptorSetUpdateAfterBindSamplers : uint32
            val mutable public maxDescriptorSetUpdateAfterBindUniformBuffers : uint32
            val mutable public maxDescriptorSetUpdateAfterBindUniformBuffersDynamic : uint32
            val mutable public maxDescriptorSetUpdateAfterBindStorageBuffers : uint32
            val mutable public maxDescriptorSetUpdateAfterBindStorageBuffersDynamic : uint32
            val mutable public maxDescriptorSetUpdateAfterBindSampledImages : uint32
            val mutable public maxDescriptorSetUpdateAfterBindStorageImages : uint32
            val mutable public maxDescriptorSetUpdateAfterBindInputAttachments : uint32

            new(pNext : nativeint, maxUpdateAfterBindDescriptorsInAllPools : uint32, shaderUniformBufferArrayNonUniformIndexingNative : VkBool32, shaderSampledImageArrayNonUniformIndexingNative : VkBool32, shaderStorageBufferArrayNonUniformIndexingNative : VkBool32, shaderStorageImageArrayNonUniformIndexingNative : VkBool32, shaderInputAttachmentArrayNonUniformIndexingNative : VkBool32, robustBufferAccessUpdateAfterBind : VkBool32, quadDivergentImplicitLod : VkBool32, maxPerStageDescriptorUpdateAfterBindSamplers : uint32, maxPerStageDescriptorUpdateAfterBindUniformBuffers : uint32, maxPerStageDescriptorUpdateAfterBindStorageBuffers : uint32, maxPerStageDescriptorUpdateAfterBindSampledImages : uint32, maxPerStageDescriptorUpdateAfterBindStorageImages : uint32, maxPerStageDescriptorUpdateAfterBindInputAttachments : uint32, maxPerStageUpdateAfterBindResources : uint32, maxDescriptorSetUpdateAfterBindSamplers : uint32, maxDescriptorSetUpdateAfterBindUniformBuffers : uint32, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic : uint32, maxDescriptorSetUpdateAfterBindStorageBuffers : uint32, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic : uint32, maxDescriptorSetUpdateAfterBindSampledImages : uint32, maxDescriptorSetUpdateAfterBindStorageImages : uint32, maxDescriptorSetUpdateAfterBindInputAttachments : uint32) =
                {
                    sType = 1000161002u
                    pNext = pNext
                    maxUpdateAfterBindDescriptorsInAllPools = maxUpdateAfterBindDescriptorsInAllPools
                    shaderUniformBufferArrayNonUniformIndexingNative = shaderUniformBufferArrayNonUniformIndexingNative
                    shaderSampledImageArrayNonUniformIndexingNative = shaderSampledImageArrayNonUniformIndexingNative
                    shaderStorageBufferArrayNonUniformIndexingNative = shaderStorageBufferArrayNonUniformIndexingNative
                    shaderStorageImageArrayNonUniformIndexingNative = shaderStorageImageArrayNonUniformIndexingNative
                    shaderInputAttachmentArrayNonUniformIndexingNative = shaderInputAttachmentArrayNonUniformIndexingNative
                    robustBufferAccessUpdateAfterBind = robustBufferAccessUpdateAfterBind
                    quadDivergentImplicitLod = quadDivergentImplicitLod
                    maxPerStageDescriptorUpdateAfterBindSamplers = maxPerStageDescriptorUpdateAfterBindSamplers
                    maxPerStageDescriptorUpdateAfterBindUniformBuffers = maxPerStageDescriptorUpdateAfterBindUniformBuffers
                    maxPerStageDescriptorUpdateAfterBindStorageBuffers = maxPerStageDescriptorUpdateAfterBindStorageBuffers
                    maxPerStageDescriptorUpdateAfterBindSampledImages = maxPerStageDescriptorUpdateAfterBindSampledImages
                    maxPerStageDescriptorUpdateAfterBindStorageImages = maxPerStageDescriptorUpdateAfterBindStorageImages
                    maxPerStageDescriptorUpdateAfterBindInputAttachments = maxPerStageDescriptorUpdateAfterBindInputAttachments
                    maxPerStageUpdateAfterBindResources = maxPerStageUpdateAfterBindResources
                    maxDescriptorSetUpdateAfterBindSamplers = maxDescriptorSetUpdateAfterBindSamplers
                    maxDescriptorSetUpdateAfterBindUniformBuffers = maxDescriptorSetUpdateAfterBindUniformBuffers
                    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
                    maxDescriptorSetUpdateAfterBindStorageBuffers = maxDescriptorSetUpdateAfterBindStorageBuffers
                    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
                    maxDescriptorSetUpdateAfterBindSampledImages = maxDescriptorSetUpdateAfterBindSampledImages
                    maxDescriptorSetUpdateAfterBindStorageImages = maxDescriptorSetUpdateAfterBindStorageImages
                    maxDescriptorSetUpdateAfterBindInputAttachments = maxDescriptorSetUpdateAfterBindInputAttachments
                }

            new(maxUpdateAfterBindDescriptorsInAllPools : uint32, shaderUniformBufferArrayNonUniformIndexingNative : VkBool32, shaderSampledImageArrayNonUniformIndexingNative : VkBool32, shaderStorageBufferArrayNonUniformIndexingNative : VkBool32, shaderStorageImageArrayNonUniformIndexingNative : VkBool32, shaderInputAttachmentArrayNonUniformIndexingNative : VkBool32, robustBufferAccessUpdateAfterBind : VkBool32, quadDivergentImplicitLod : VkBool32, maxPerStageDescriptorUpdateAfterBindSamplers : uint32, maxPerStageDescriptorUpdateAfterBindUniformBuffers : uint32, maxPerStageDescriptorUpdateAfterBindStorageBuffers : uint32, maxPerStageDescriptorUpdateAfterBindSampledImages : uint32, maxPerStageDescriptorUpdateAfterBindStorageImages : uint32, maxPerStageDescriptorUpdateAfterBindInputAttachments : uint32, maxPerStageUpdateAfterBindResources : uint32, maxDescriptorSetUpdateAfterBindSamplers : uint32, maxDescriptorSetUpdateAfterBindUniformBuffers : uint32, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic : uint32, maxDescriptorSetUpdateAfterBindStorageBuffers : uint32, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic : uint32, maxDescriptorSetUpdateAfterBindSampledImages : uint32, maxDescriptorSetUpdateAfterBindStorageImages : uint32, maxDescriptorSetUpdateAfterBindInputAttachments : uint32) =
                VkPhysicalDeviceDescriptorIndexingProperties(Unchecked.defaultof<nativeint>, maxUpdateAfterBindDescriptorsInAllPools, shaderUniformBufferArrayNonUniformIndexingNative, shaderSampledImageArrayNonUniformIndexingNative, shaderStorageBufferArrayNonUniformIndexingNative, shaderStorageImageArrayNonUniformIndexingNative, shaderInputAttachmentArrayNonUniformIndexingNative, robustBufferAccessUpdateAfterBind, quadDivergentImplicitLod, maxPerStageDescriptorUpdateAfterBindSamplers, maxPerStageDescriptorUpdateAfterBindUniformBuffers, maxPerStageDescriptorUpdateAfterBindStorageBuffers, maxPerStageDescriptorUpdateAfterBindSampledImages, maxPerStageDescriptorUpdateAfterBindStorageImages, maxPerStageDescriptorUpdateAfterBindInputAttachments, maxPerStageUpdateAfterBindResources, maxDescriptorSetUpdateAfterBindSamplers, maxDescriptorSetUpdateAfterBindUniformBuffers, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, maxDescriptorSetUpdateAfterBindStorageBuffers, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, maxDescriptorSetUpdateAfterBindSampledImages, maxDescriptorSetUpdateAfterBindStorageImages, maxDescriptorSetUpdateAfterBindInputAttachments)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxUpdateAfterBindDescriptorsInAllPools = Unchecked.defaultof<uint32> && x.shaderUniformBufferArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderSampledImageArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderStorageBufferArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderStorageImageArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderInputAttachmentArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.robustBufferAccessUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.quadDivergentImplicitLod = Unchecked.defaultof<VkBool32> && x.maxPerStageDescriptorUpdateAfterBindSamplers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindUniformBuffers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindStorageBuffers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindSampledImages = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindStorageImages = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindInputAttachments = Unchecked.defaultof<uint32> && x.maxPerStageUpdateAfterBindResources = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindSamplers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindUniformBuffers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindStorageBuffers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindSampledImages = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindStorageImages = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindInputAttachments = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceDescriptorIndexingProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxUpdateAfterBindDescriptorsInAllPools = %A" x.maxUpdateAfterBindDescriptorsInAllPools
                    sprintf "shaderUniformBufferArrayNonUniformIndexingNative = %A" x.shaderUniformBufferArrayNonUniformIndexingNative
                    sprintf "shaderSampledImageArrayNonUniformIndexingNative = %A" x.shaderSampledImageArrayNonUniformIndexingNative
                    sprintf "shaderStorageBufferArrayNonUniformIndexingNative = %A" x.shaderStorageBufferArrayNonUniformIndexingNative
                    sprintf "shaderStorageImageArrayNonUniformIndexingNative = %A" x.shaderStorageImageArrayNonUniformIndexingNative
                    sprintf "shaderInputAttachmentArrayNonUniformIndexingNative = %A" x.shaderInputAttachmentArrayNonUniformIndexingNative
                    sprintf "robustBufferAccessUpdateAfterBind = %A" x.robustBufferAccessUpdateAfterBind
                    sprintf "quadDivergentImplicitLod = %A" x.quadDivergentImplicitLod
                    sprintf "maxPerStageDescriptorUpdateAfterBindSamplers = %A" x.maxPerStageDescriptorUpdateAfterBindSamplers
                    sprintf "maxPerStageDescriptorUpdateAfterBindUniformBuffers = %A" x.maxPerStageDescriptorUpdateAfterBindUniformBuffers
                    sprintf "maxPerStageDescriptorUpdateAfterBindStorageBuffers = %A" x.maxPerStageDescriptorUpdateAfterBindStorageBuffers
                    sprintf "maxPerStageDescriptorUpdateAfterBindSampledImages = %A" x.maxPerStageDescriptorUpdateAfterBindSampledImages
                    sprintf "maxPerStageDescriptorUpdateAfterBindStorageImages = %A" x.maxPerStageDescriptorUpdateAfterBindStorageImages
                    sprintf "maxPerStageDescriptorUpdateAfterBindInputAttachments = %A" x.maxPerStageDescriptorUpdateAfterBindInputAttachments
                    sprintf "maxPerStageUpdateAfterBindResources = %A" x.maxPerStageUpdateAfterBindResources
                    sprintf "maxDescriptorSetUpdateAfterBindSamplers = %A" x.maxDescriptorSetUpdateAfterBindSamplers
                    sprintf "maxDescriptorSetUpdateAfterBindUniformBuffers = %A" x.maxDescriptorSetUpdateAfterBindUniformBuffers
                    sprintf "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = %A" x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
                    sprintf "maxDescriptorSetUpdateAfterBindStorageBuffers = %A" x.maxDescriptorSetUpdateAfterBindStorageBuffers
                    sprintf "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = %A" x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
                    sprintf "maxDescriptorSetUpdateAfterBindSampledImages = %A" x.maxDescriptorSetUpdateAfterBindSampledImages
                    sprintf "maxDescriptorSetUpdateAfterBindStorageImages = %A" x.maxDescriptorSetUpdateAfterBindStorageImages
                    sprintf "maxDescriptorSetUpdateAfterBindInputAttachments = %A" x.maxDescriptorSetUpdateAfterBindInputAttachments
                ] |> sprintf "VkPhysicalDeviceDescriptorIndexingProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDriverProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public driverID : VkDriverId
            val mutable public driverName : String256
            val mutable public driverInfo : String256
            val mutable public conformanceVersion : VkConformanceVersion

            new(pNext : nativeint, driverID : VkDriverId, driverName : String256, driverInfo : String256, conformanceVersion : VkConformanceVersion) =
                {
                    sType = 1000196000u
                    pNext = pNext
                    driverID = driverID
                    driverName = driverName
                    driverInfo = driverInfo
                    conformanceVersion = conformanceVersion
                }

            new(driverID : VkDriverId, driverName : String256, driverInfo : String256, conformanceVersion : VkConformanceVersion) =
                VkPhysicalDeviceDriverProperties(Unchecked.defaultof<nativeint>, driverID, driverName, driverInfo, conformanceVersion)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.driverID = Unchecked.defaultof<VkDriverId> && x.driverName = Unchecked.defaultof<String256> && x.driverInfo = Unchecked.defaultof<String256> && x.conformanceVersion = Unchecked.defaultof<VkConformanceVersion>

            static member Empty =
                VkPhysicalDeviceDriverProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDriverId>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<VkConformanceVersion>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "driverID = %A" x.driverID
                    sprintf "driverName = %A" x.driverName
                    sprintf "driverInfo = %A" x.driverInfo
                    sprintf "conformanceVersion = %A" x.conformanceVersion
                ] |> sprintf "VkPhysicalDeviceDriverProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFloatControlsProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public denormBehaviorIndependence : VkShaderFloatControlsIndependence
            val mutable public roundingModeIndependence : VkShaderFloatControlsIndependence
            val mutable public shaderSignedZeroInfNanPreserveFloat16 : VkBool32
            val mutable public shaderSignedZeroInfNanPreserveFloat32 : VkBool32
            val mutable public shaderSignedZeroInfNanPreserveFloat64 : VkBool32
            val mutable public shaderDenormPreserveFloat16 : VkBool32
            val mutable public shaderDenormPreserveFloat32 : VkBool32
            val mutable public shaderDenormPreserveFloat64 : VkBool32
            val mutable public shaderDenormFlushToZeroFloat16 : VkBool32
            val mutable public shaderDenormFlushToZeroFloat32 : VkBool32
            val mutable public shaderDenormFlushToZeroFloat64 : VkBool32
            val mutable public shaderRoundingModeRTEFloat16 : VkBool32
            val mutable public shaderRoundingModeRTEFloat32 : VkBool32
            val mutable public shaderRoundingModeRTEFloat64 : VkBool32
            val mutable public shaderRoundingModeRTZFloat16 : VkBool32
            val mutable public shaderRoundingModeRTZFloat32 : VkBool32
            val mutable public shaderRoundingModeRTZFloat64 : VkBool32

            new(pNext : nativeint, denormBehaviorIndependence : VkShaderFloatControlsIndependence, roundingModeIndependence : VkShaderFloatControlsIndependence, shaderSignedZeroInfNanPreserveFloat16 : VkBool32, shaderSignedZeroInfNanPreserveFloat32 : VkBool32, shaderSignedZeroInfNanPreserveFloat64 : VkBool32, shaderDenormPreserveFloat16 : VkBool32, shaderDenormPreserveFloat32 : VkBool32, shaderDenormPreserveFloat64 : VkBool32, shaderDenormFlushToZeroFloat16 : VkBool32, shaderDenormFlushToZeroFloat32 : VkBool32, shaderDenormFlushToZeroFloat64 : VkBool32, shaderRoundingModeRTEFloat16 : VkBool32, shaderRoundingModeRTEFloat32 : VkBool32, shaderRoundingModeRTEFloat64 : VkBool32, shaderRoundingModeRTZFloat16 : VkBool32, shaderRoundingModeRTZFloat32 : VkBool32, shaderRoundingModeRTZFloat64 : VkBool32) =
                {
                    sType = 1000197000u
                    pNext = pNext
                    denormBehaviorIndependence = denormBehaviorIndependence
                    roundingModeIndependence = roundingModeIndependence
                    shaderSignedZeroInfNanPreserveFloat16 = shaderSignedZeroInfNanPreserveFloat16
                    shaderSignedZeroInfNanPreserveFloat32 = shaderSignedZeroInfNanPreserveFloat32
                    shaderSignedZeroInfNanPreserveFloat64 = shaderSignedZeroInfNanPreserveFloat64
                    shaderDenormPreserveFloat16 = shaderDenormPreserveFloat16
                    shaderDenormPreserveFloat32 = shaderDenormPreserveFloat32
                    shaderDenormPreserveFloat64 = shaderDenormPreserveFloat64
                    shaderDenormFlushToZeroFloat16 = shaderDenormFlushToZeroFloat16
                    shaderDenormFlushToZeroFloat32 = shaderDenormFlushToZeroFloat32
                    shaderDenormFlushToZeroFloat64 = shaderDenormFlushToZeroFloat64
                    shaderRoundingModeRTEFloat16 = shaderRoundingModeRTEFloat16
                    shaderRoundingModeRTEFloat32 = shaderRoundingModeRTEFloat32
                    shaderRoundingModeRTEFloat64 = shaderRoundingModeRTEFloat64
                    shaderRoundingModeRTZFloat16 = shaderRoundingModeRTZFloat16
                    shaderRoundingModeRTZFloat32 = shaderRoundingModeRTZFloat32
                    shaderRoundingModeRTZFloat64 = shaderRoundingModeRTZFloat64
                }

            new(denormBehaviorIndependence : VkShaderFloatControlsIndependence, roundingModeIndependence : VkShaderFloatControlsIndependence, shaderSignedZeroInfNanPreserveFloat16 : VkBool32, shaderSignedZeroInfNanPreserveFloat32 : VkBool32, shaderSignedZeroInfNanPreserveFloat64 : VkBool32, shaderDenormPreserveFloat16 : VkBool32, shaderDenormPreserveFloat32 : VkBool32, shaderDenormPreserveFloat64 : VkBool32, shaderDenormFlushToZeroFloat16 : VkBool32, shaderDenormFlushToZeroFloat32 : VkBool32, shaderDenormFlushToZeroFloat64 : VkBool32, shaderRoundingModeRTEFloat16 : VkBool32, shaderRoundingModeRTEFloat32 : VkBool32, shaderRoundingModeRTEFloat64 : VkBool32, shaderRoundingModeRTZFloat16 : VkBool32, shaderRoundingModeRTZFloat32 : VkBool32, shaderRoundingModeRTZFloat64 : VkBool32) =
                VkPhysicalDeviceFloatControlsProperties(Unchecked.defaultof<nativeint>, denormBehaviorIndependence, roundingModeIndependence, shaderSignedZeroInfNanPreserveFloat16, shaderSignedZeroInfNanPreserveFloat32, shaderSignedZeroInfNanPreserveFloat64, shaderDenormPreserveFloat16, shaderDenormPreserveFloat32, shaderDenormPreserveFloat64, shaderDenormFlushToZeroFloat16, shaderDenormFlushToZeroFloat32, shaderDenormFlushToZeroFloat64, shaderRoundingModeRTEFloat16, shaderRoundingModeRTEFloat32, shaderRoundingModeRTEFloat64, shaderRoundingModeRTZFloat16, shaderRoundingModeRTZFloat32, shaderRoundingModeRTZFloat64)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.denormBehaviorIndependence = Unchecked.defaultof<VkShaderFloatControlsIndependence> && x.roundingModeIndependence = Unchecked.defaultof<VkShaderFloatControlsIndependence> && x.shaderSignedZeroInfNanPreserveFloat16 = Unchecked.defaultof<VkBool32> && x.shaderSignedZeroInfNanPreserveFloat32 = Unchecked.defaultof<VkBool32> && x.shaderSignedZeroInfNanPreserveFloat64 = Unchecked.defaultof<VkBool32> && x.shaderDenormPreserveFloat16 = Unchecked.defaultof<VkBool32> && x.shaderDenormPreserveFloat32 = Unchecked.defaultof<VkBool32> && x.shaderDenormPreserveFloat64 = Unchecked.defaultof<VkBool32> && x.shaderDenormFlushToZeroFloat16 = Unchecked.defaultof<VkBool32> && x.shaderDenormFlushToZeroFloat32 = Unchecked.defaultof<VkBool32> && x.shaderDenormFlushToZeroFloat64 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTEFloat16 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTEFloat32 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTEFloat64 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTZFloat16 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTZFloat32 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTZFloat64 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceFloatControlsProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderFloatControlsIndependence>, Unchecked.defaultof<VkShaderFloatControlsIndependence>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "denormBehaviorIndependence = %A" x.denormBehaviorIndependence
                    sprintf "roundingModeIndependence = %A" x.roundingModeIndependence
                    sprintf "shaderSignedZeroInfNanPreserveFloat16 = %A" x.shaderSignedZeroInfNanPreserveFloat16
                    sprintf "shaderSignedZeroInfNanPreserveFloat32 = %A" x.shaderSignedZeroInfNanPreserveFloat32
                    sprintf "shaderSignedZeroInfNanPreserveFloat64 = %A" x.shaderSignedZeroInfNanPreserveFloat64
                    sprintf "shaderDenormPreserveFloat16 = %A" x.shaderDenormPreserveFloat16
                    sprintf "shaderDenormPreserveFloat32 = %A" x.shaderDenormPreserveFloat32
                    sprintf "shaderDenormPreserveFloat64 = %A" x.shaderDenormPreserveFloat64
                    sprintf "shaderDenormFlushToZeroFloat16 = %A" x.shaderDenormFlushToZeroFloat16
                    sprintf "shaderDenormFlushToZeroFloat32 = %A" x.shaderDenormFlushToZeroFloat32
                    sprintf "shaderDenormFlushToZeroFloat64 = %A" x.shaderDenormFlushToZeroFloat64
                    sprintf "shaderRoundingModeRTEFloat16 = %A" x.shaderRoundingModeRTEFloat16
                    sprintf "shaderRoundingModeRTEFloat32 = %A" x.shaderRoundingModeRTEFloat32
                    sprintf "shaderRoundingModeRTEFloat64 = %A" x.shaderRoundingModeRTEFloat64
                    sprintf "shaderRoundingModeRTZFloat16 = %A" x.shaderRoundingModeRTZFloat16
                    sprintf "shaderRoundingModeRTZFloat32 = %A" x.shaderRoundingModeRTZFloat32
                    sprintf "shaderRoundingModeRTZFloat64 = %A" x.shaderRoundingModeRTZFloat64
                ] |> sprintf "VkPhysicalDeviceFloatControlsProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceHostQueryResetFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public hostQueryReset : VkBool32

            new(pNext : nativeint, hostQueryReset : VkBool32) =
                {
                    sType = 1000261000u
                    pNext = pNext
                    hostQueryReset = hostQueryReset
                }

            new(hostQueryReset : VkBool32) =
                VkPhysicalDeviceHostQueryResetFeatures(Unchecked.defaultof<nativeint>, hostQueryReset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.hostQueryReset = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceHostQueryResetFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "hostQueryReset = %A" x.hostQueryReset
                ] |> sprintf "VkPhysicalDeviceHostQueryResetFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceImagelessFramebufferFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imagelessFramebuffer : VkBool32

            new(pNext : nativeint, imagelessFramebuffer : VkBool32) =
                {
                    sType = 1000108000u
                    pNext = pNext
                    imagelessFramebuffer = imagelessFramebuffer
                }

            new(imagelessFramebuffer : VkBool32) =
                VkPhysicalDeviceImagelessFramebufferFeatures(Unchecked.defaultof<nativeint>, imagelessFramebuffer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imagelessFramebuffer = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceImagelessFramebufferFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "imagelessFramebuffer = %A" x.imagelessFramebuffer
                ] |> sprintf "VkPhysicalDeviceImagelessFramebufferFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSamplerFilterMinmaxProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public filterMinmaxSingleComponentFormats : VkBool32
            val mutable public filterMinmaxImageComponentMapping : VkBool32

            new(pNext : nativeint, filterMinmaxSingleComponentFormats : VkBool32, filterMinmaxImageComponentMapping : VkBool32) =
                {
                    sType = 1000130000u
                    pNext = pNext
                    filterMinmaxSingleComponentFormats = filterMinmaxSingleComponentFormats
                    filterMinmaxImageComponentMapping = filterMinmaxImageComponentMapping
                }

            new(filterMinmaxSingleComponentFormats : VkBool32, filterMinmaxImageComponentMapping : VkBool32) =
                VkPhysicalDeviceSamplerFilterMinmaxProperties(Unchecked.defaultof<nativeint>, filterMinmaxSingleComponentFormats, filterMinmaxImageComponentMapping)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.filterMinmaxSingleComponentFormats = Unchecked.defaultof<VkBool32> && x.filterMinmaxImageComponentMapping = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSamplerFilterMinmaxProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "filterMinmaxSingleComponentFormats = %A" x.filterMinmaxSingleComponentFormats
                    sprintf "filterMinmaxImageComponentMapping = %A" x.filterMinmaxImageComponentMapping
                ] |> sprintf "VkPhysicalDeviceSamplerFilterMinmaxProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceScalarBlockLayoutFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public scalarBlockLayout : VkBool32

            new(pNext : nativeint, scalarBlockLayout : VkBool32) =
                {
                    sType = 1000221000u
                    pNext = pNext
                    scalarBlockLayout = scalarBlockLayout
                }

            new(scalarBlockLayout : VkBool32) =
                VkPhysicalDeviceScalarBlockLayoutFeatures(Unchecked.defaultof<nativeint>, scalarBlockLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.scalarBlockLayout = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceScalarBlockLayoutFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "scalarBlockLayout = %A" x.scalarBlockLayout
                ] |> sprintf "VkPhysicalDeviceScalarBlockLayoutFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public separateDepthStencilLayouts : VkBool32

            new(pNext : nativeint, separateDepthStencilLayouts : VkBool32) =
                {
                    sType = 1000241000u
                    pNext = pNext
                    separateDepthStencilLayouts = separateDepthStencilLayouts
                }

            new(separateDepthStencilLayouts : VkBool32) =
                VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(Unchecked.defaultof<nativeint>, separateDepthStencilLayouts)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.separateDepthStencilLayouts = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "separateDepthStencilLayouts = %A" x.separateDepthStencilLayouts
                ] |> sprintf "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderAtomicInt64Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderBufferInt64Atomics : VkBool32
            val mutable public shaderSharedInt64Atomics : VkBool32

            new(pNext : nativeint, shaderBufferInt64Atomics : VkBool32, shaderSharedInt64Atomics : VkBool32) =
                {
                    sType = 1000180000u
                    pNext = pNext
                    shaderBufferInt64Atomics = shaderBufferInt64Atomics
                    shaderSharedInt64Atomics = shaderSharedInt64Atomics
                }

            new(shaderBufferInt64Atomics : VkBool32, shaderSharedInt64Atomics : VkBool32) =
                VkPhysicalDeviceShaderAtomicInt64Features(Unchecked.defaultof<nativeint>, shaderBufferInt64Atomics, shaderSharedInt64Atomics)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderBufferInt64Atomics = Unchecked.defaultof<VkBool32> && x.shaderSharedInt64Atomics = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderAtomicInt64Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderBufferInt64Atomics = %A" x.shaderBufferInt64Atomics
                    sprintf "shaderSharedInt64Atomics = %A" x.shaderSharedInt64Atomics
                ] |> sprintf "VkPhysicalDeviceShaderAtomicInt64Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderFloat16Int8Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderFloat16 : VkBool32
            val mutable public shaderInt8 : VkBool32

            new(pNext : nativeint, shaderFloat16 : VkBool32, shaderInt8 : VkBool32) =
                {
                    sType = 1000082000u
                    pNext = pNext
                    shaderFloat16 = shaderFloat16
                    shaderInt8 = shaderInt8
                }

            new(shaderFloat16 : VkBool32, shaderInt8 : VkBool32) =
                VkPhysicalDeviceShaderFloat16Int8Features(Unchecked.defaultof<nativeint>, shaderFloat16, shaderInt8)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderFloat16 = Unchecked.defaultof<VkBool32> && x.shaderInt8 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderFloat16Int8Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderFloat16 = %A" x.shaderFloat16
                    sprintf "shaderInt8 = %A" x.shaderInt8
                ] |> sprintf "VkPhysicalDeviceShaderFloat16Int8Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderSubgroupExtendedTypes : VkBool32

            new(pNext : nativeint, shaderSubgroupExtendedTypes : VkBool32) =
                {
                    sType = 1000175000u
                    pNext = pNext
                    shaderSubgroupExtendedTypes = shaderSubgroupExtendedTypes
                }

            new(shaderSubgroupExtendedTypes : VkBool32) =
                VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(Unchecked.defaultof<nativeint>, shaderSubgroupExtendedTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderSubgroupExtendedTypes = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderSubgroupExtendedTypes = %A" x.shaderSubgroupExtendedTypes
                ] |> sprintf "VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceTimelineSemaphoreFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public timelineSemaphore : VkBool32

            new(pNext : nativeint, timelineSemaphore : VkBool32) =
                {
                    sType = 1000207000u
                    pNext = pNext
                    timelineSemaphore = timelineSemaphore
                }

            new(timelineSemaphore : VkBool32) =
                VkPhysicalDeviceTimelineSemaphoreFeatures(Unchecked.defaultof<nativeint>, timelineSemaphore)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.timelineSemaphore = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceTimelineSemaphoreFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "timelineSemaphore = %A" x.timelineSemaphore
                ] |> sprintf "VkPhysicalDeviceTimelineSemaphoreFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceTimelineSemaphoreProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxTimelineSemaphoreValueDifference : uint64

            new(pNext : nativeint, maxTimelineSemaphoreValueDifference : uint64) =
                {
                    sType = 1000207001u
                    pNext = pNext
                    maxTimelineSemaphoreValueDifference = maxTimelineSemaphoreValueDifference
                }

            new(maxTimelineSemaphoreValueDifference : uint64) =
                VkPhysicalDeviceTimelineSemaphoreProperties(Unchecked.defaultof<nativeint>, maxTimelineSemaphoreValueDifference)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxTimelineSemaphoreValueDifference = Unchecked.defaultof<uint64>

            static member Empty =
                VkPhysicalDeviceTimelineSemaphoreProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxTimelineSemaphoreValueDifference = %A" x.maxTimelineSemaphoreValueDifference
                ] |> sprintf "VkPhysicalDeviceTimelineSemaphoreProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceUniformBufferStandardLayoutFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public uniformBufferStandardLayout : VkBool32

            new(pNext : nativeint, uniformBufferStandardLayout : VkBool32) =
                {
                    sType = 1000253000u
                    pNext = pNext
                    uniformBufferStandardLayout = uniformBufferStandardLayout
                }

            new(uniformBufferStandardLayout : VkBool32) =
                VkPhysicalDeviceUniformBufferStandardLayoutFeatures(Unchecked.defaultof<nativeint>, uniformBufferStandardLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.uniformBufferStandardLayout = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceUniformBufferStandardLayoutFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "uniformBufferStandardLayout = %A" x.uniformBufferStandardLayout
                ] |> sprintf "VkPhysicalDeviceUniformBufferStandardLayoutFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan11Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public storageBuffer16BitAccess : VkBool32
            val mutable public uniformAndStorageBuffer16BitAccess : VkBool32
            val mutable public storagePushConstant16 : VkBool32
            val mutable public storageInputOutput16 : VkBool32
            val mutable public multiview : VkBool32
            val mutable public multiviewGeometryShader : VkBool32
            val mutable public multiviewTessellationShader : VkBool32
            val mutable public variablePointersStorageBuffer : VkBool32
            val mutable public variablePointers : VkBool32
            val mutable public protectedMemory : VkBool32
            val mutable public samplerYcbcrConversion : VkBool32
            val mutable public shaderDrawParameters : VkBool32

            new(pNext : nativeint, storageBuffer16BitAccess : VkBool32, uniformAndStorageBuffer16BitAccess : VkBool32, storagePushConstant16 : VkBool32, storageInputOutput16 : VkBool32, multiview : VkBool32, multiviewGeometryShader : VkBool32, multiviewTessellationShader : VkBool32, variablePointersStorageBuffer : VkBool32, variablePointers : VkBool32, protectedMemory : VkBool32, samplerYcbcrConversion : VkBool32, shaderDrawParameters : VkBool32) =
                {
                    sType = 49u
                    pNext = pNext
                    storageBuffer16BitAccess = storageBuffer16BitAccess
                    uniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess
                    storagePushConstant16 = storagePushConstant16
                    storageInputOutput16 = storageInputOutput16
                    multiview = multiview
                    multiviewGeometryShader = multiviewGeometryShader
                    multiviewTessellationShader = multiviewTessellationShader
                    variablePointersStorageBuffer = variablePointersStorageBuffer
                    variablePointers = variablePointers
                    protectedMemory = protectedMemory
                    samplerYcbcrConversion = samplerYcbcrConversion
                    shaderDrawParameters = shaderDrawParameters
                }

            new(storageBuffer16BitAccess : VkBool32, uniformAndStorageBuffer16BitAccess : VkBool32, storagePushConstant16 : VkBool32, storageInputOutput16 : VkBool32, multiview : VkBool32, multiviewGeometryShader : VkBool32, multiviewTessellationShader : VkBool32, variablePointersStorageBuffer : VkBool32, variablePointers : VkBool32, protectedMemory : VkBool32, samplerYcbcrConversion : VkBool32, shaderDrawParameters : VkBool32) =
                VkPhysicalDeviceVulkan11Features(Unchecked.defaultof<nativeint>, storageBuffer16BitAccess, uniformAndStorageBuffer16BitAccess, storagePushConstant16, storageInputOutput16, multiview, multiviewGeometryShader, multiviewTessellationShader, variablePointersStorageBuffer, variablePointers, protectedMemory, samplerYcbcrConversion, shaderDrawParameters)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.storageBuffer16BitAccess = Unchecked.defaultof<VkBool32> && x.uniformAndStorageBuffer16BitAccess = Unchecked.defaultof<VkBool32> && x.storagePushConstant16 = Unchecked.defaultof<VkBool32> && x.storageInputOutput16 = Unchecked.defaultof<VkBool32> && x.multiview = Unchecked.defaultof<VkBool32> && x.multiviewGeometryShader = Unchecked.defaultof<VkBool32> && x.multiviewTessellationShader = Unchecked.defaultof<VkBool32> && x.variablePointersStorageBuffer = Unchecked.defaultof<VkBool32> && x.variablePointers = Unchecked.defaultof<VkBool32> && x.protectedMemory = Unchecked.defaultof<VkBool32> && x.samplerYcbcrConversion = Unchecked.defaultof<VkBool32> && x.shaderDrawParameters = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVulkan11Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "storageBuffer16BitAccess = %A" x.storageBuffer16BitAccess
                    sprintf "uniformAndStorageBuffer16BitAccess = %A" x.uniformAndStorageBuffer16BitAccess
                    sprintf "storagePushConstant16 = %A" x.storagePushConstant16
                    sprintf "storageInputOutput16 = %A" x.storageInputOutput16
                    sprintf "multiview = %A" x.multiview
                    sprintf "multiviewGeometryShader = %A" x.multiviewGeometryShader
                    sprintf "multiviewTessellationShader = %A" x.multiviewTessellationShader
                    sprintf "variablePointersStorageBuffer = %A" x.variablePointersStorageBuffer
                    sprintf "variablePointers = %A" x.variablePointers
                    sprintf "protectedMemory = %A" x.protectedMemory
                    sprintf "samplerYcbcrConversion = %A" x.samplerYcbcrConversion
                    sprintf "shaderDrawParameters = %A" x.shaderDrawParameters
                ] |> sprintf "VkPhysicalDeviceVulkan11Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan11Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceUUID : Guid
            val mutable public driverUUID : Guid
            val mutable public deviceLUID : byte_8
            val mutable public deviceNodeMask : uint32
            val mutable public deviceLUIDValid : VkBool32
            val mutable public subgroupSize : uint32
            val mutable public subgroupSupportedStages : VkShaderStageFlags
            val mutable public subgroupSupportedOperations : VkSubgroupFeatureFlags
            val mutable public subgroupQuadOperationsInAllStages : VkBool32
            val mutable public pointClippingBehavior : VkPointClippingBehavior
            val mutable public maxMultiviewViewCount : uint32
            val mutable public maxMultiviewInstanceIndex : uint32
            val mutable public protectedNoFault : VkBool32
            val mutable public maxPerSetDescriptors : uint32
            val mutable public maxMemoryAllocationSize : VkDeviceSize

            new(pNext : nativeint, deviceUUID : Guid, driverUUID : Guid, deviceLUID : byte_8, deviceNodeMask : uint32, deviceLUIDValid : VkBool32, subgroupSize : uint32, subgroupSupportedStages : VkShaderStageFlags, subgroupSupportedOperations : VkSubgroupFeatureFlags, subgroupQuadOperationsInAllStages : VkBool32, pointClippingBehavior : VkPointClippingBehavior, maxMultiviewViewCount : uint32, maxMultiviewInstanceIndex : uint32, protectedNoFault : VkBool32, maxPerSetDescriptors : uint32, maxMemoryAllocationSize : VkDeviceSize) =
                {
                    sType = 50u
                    pNext = pNext
                    deviceUUID = deviceUUID
                    driverUUID = driverUUID
                    deviceLUID = deviceLUID
                    deviceNodeMask = deviceNodeMask
                    deviceLUIDValid = deviceLUIDValid
                    subgroupSize = subgroupSize
                    subgroupSupportedStages = subgroupSupportedStages
                    subgroupSupportedOperations = subgroupSupportedOperations
                    subgroupQuadOperationsInAllStages = subgroupQuadOperationsInAllStages
                    pointClippingBehavior = pointClippingBehavior
                    maxMultiviewViewCount = maxMultiviewViewCount
                    maxMultiviewInstanceIndex = maxMultiviewInstanceIndex
                    protectedNoFault = protectedNoFault
                    maxPerSetDescriptors = maxPerSetDescriptors
                    maxMemoryAllocationSize = maxMemoryAllocationSize
                }

            new(deviceUUID : Guid, driverUUID : Guid, deviceLUID : byte_8, deviceNodeMask : uint32, deviceLUIDValid : VkBool32, subgroupSize : uint32, subgroupSupportedStages : VkShaderStageFlags, subgroupSupportedOperations : VkSubgroupFeatureFlags, subgroupQuadOperationsInAllStages : VkBool32, pointClippingBehavior : VkPointClippingBehavior, maxMultiviewViewCount : uint32, maxMultiviewInstanceIndex : uint32, protectedNoFault : VkBool32, maxPerSetDescriptors : uint32, maxMemoryAllocationSize : VkDeviceSize) =
                VkPhysicalDeviceVulkan11Properties(Unchecked.defaultof<nativeint>, deviceUUID, driverUUID, deviceLUID, deviceNodeMask, deviceLUIDValid, subgroupSize, subgroupSupportedStages, subgroupSupportedOperations, subgroupQuadOperationsInAllStages, pointClippingBehavior, maxMultiviewViewCount, maxMultiviewInstanceIndex, protectedNoFault, maxPerSetDescriptors, maxMemoryAllocationSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceUUID = Unchecked.defaultof<Guid> && x.driverUUID = Unchecked.defaultof<Guid> && x.deviceLUID = Unchecked.defaultof<byte_8> && x.deviceNodeMask = Unchecked.defaultof<uint32> && x.deviceLUIDValid = Unchecked.defaultof<VkBool32> && x.subgroupSize = Unchecked.defaultof<uint32> && x.subgroupSupportedStages = Unchecked.defaultof<VkShaderStageFlags> && x.subgroupSupportedOperations = Unchecked.defaultof<VkSubgroupFeatureFlags> && x.subgroupQuadOperationsInAllStages = Unchecked.defaultof<VkBool32> && x.pointClippingBehavior = Unchecked.defaultof<VkPointClippingBehavior> && x.maxMultiviewViewCount = Unchecked.defaultof<uint32> && x.maxMultiviewInstanceIndex = Unchecked.defaultof<uint32> && x.protectedNoFault = Unchecked.defaultof<VkBool32> && x.maxPerSetDescriptors = Unchecked.defaultof<uint32> && x.maxMemoryAllocationSize = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkPhysicalDeviceVulkan11Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Guid>, Unchecked.defaultof<Guid>, Unchecked.defaultof<byte_8>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkSubgroupFeatureFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkPointClippingBehavior>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceUUID = %A" x.deviceUUID
                    sprintf "driverUUID = %A" x.driverUUID
                    sprintf "deviceLUID = %A" x.deviceLUID
                    sprintf "deviceNodeMask = %A" x.deviceNodeMask
                    sprintf "deviceLUIDValid = %A" x.deviceLUIDValid
                    sprintf "subgroupSize = %A" x.subgroupSize
                    sprintf "subgroupSupportedStages = %A" x.subgroupSupportedStages
                    sprintf "subgroupSupportedOperations = %A" x.subgroupSupportedOperations
                    sprintf "subgroupQuadOperationsInAllStages = %A" x.subgroupQuadOperationsInAllStages
                    sprintf "pointClippingBehavior = %A" x.pointClippingBehavior
                    sprintf "maxMultiviewViewCount = %A" x.maxMultiviewViewCount
                    sprintf "maxMultiviewInstanceIndex = %A" x.maxMultiviewInstanceIndex
                    sprintf "protectedNoFault = %A" x.protectedNoFault
                    sprintf "maxPerSetDescriptors = %A" x.maxPerSetDescriptors
                    sprintf "maxMemoryAllocationSize = %A" x.maxMemoryAllocationSize
                ] |> sprintf "VkPhysicalDeviceVulkan11Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan12Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public samplerMirrorClampToEdge : VkBool32
            val mutable public drawIndirectCount : VkBool32
            val mutable public storageBuffer8BitAccess : VkBool32
            val mutable public uniformAndStorageBuffer8BitAccess : VkBool32
            val mutable public storagePushConstant8 : VkBool32
            val mutable public shaderBufferInt64Atomics : VkBool32
            val mutable public shaderSharedInt64Atomics : VkBool32
            val mutable public shaderFloat16 : VkBool32
            val mutable public shaderInt8 : VkBool32
            val mutable public descriptorIndexing : VkBool32
            val mutable public shaderInputAttachmentArrayDynamicIndexing : VkBool32
            val mutable public shaderUniformTexelBufferArrayDynamicIndexing : VkBool32
            val mutable public shaderStorageTexelBufferArrayDynamicIndexing : VkBool32
            val mutable public shaderUniformBufferArrayNonUniformIndexing : VkBool32
            val mutable public shaderSampledImageArrayNonUniformIndexing : VkBool32
            val mutable public shaderStorageBufferArrayNonUniformIndexing : VkBool32
            val mutable public shaderStorageImageArrayNonUniformIndexing : VkBool32
            val mutable public shaderInputAttachmentArrayNonUniformIndexing : VkBool32
            val mutable public shaderUniformTexelBufferArrayNonUniformIndexing : VkBool32
            val mutable public shaderStorageTexelBufferArrayNonUniformIndexing : VkBool32
            val mutable public descriptorBindingUniformBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingSampledImageUpdateAfterBind : VkBool32
            val mutable public descriptorBindingStorageImageUpdateAfterBind : VkBool32
            val mutable public descriptorBindingStorageBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingUniformTexelBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingStorageTexelBufferUpdateAfterBind : VkBool32
            val mutable public descriptorBindingUpdateUnusedWhilePending : VkBool32
            val mutable public descriptorBindingPartiallyBound : VkBool32
            val mutable public descriptorBindingVariableDescriptorCount : VkBool32
            val mutable public runtimeDescriptorArray : VkBool32
            val mutable public samplerFilterMinmax : VkBool32
            val mutable public scalarBlockLayout : VkBool32
            val mutable public imagelessFramebuffer : VkBool32
            val mutable public uniformBufferStandardLayout : VkBool32
            val mutable public shaderSubgroupExtendedTypes : VkBool32
            val mutable public separateDepthStencilLayouts : VkBool32
            val mutable public hostQueryReset : VkBool32
            val mutable public timelineSemaphore : VkBool32
            val mutable public bufferDeviceAddress : VkBool32
            val mutable public bufferDeviceAddressCaptureReplay : VkBool32
            val mutable public bufferDeviceAddressMultiDevice : VkBool32
            val mutable public vulkanMemoryModel : VkBool32
            val mutable public vulkanMemoryModelDeviceScope : VkBool32
            val mutable public vulkanMemoryModelAvailabilityVisibilityChains : VkBool32
            val mutable public shaderOutputViewportIndex : VkBool32
            val mutable public shaderOutputLayer : VkBool32
            val mutable public subgroupBroadcastDynamicId : VkBool32

            new(pNext : nativeint, samplerMirrorClampToEdge : VkBool32, drawIndirectCount : VkBool32, storageBuffer8BitAccess : VkBool32, uniformAndStorageBuffer8BitAccess : VkBool32, storagePushConstant8 : VkBool32, shaderBufferInt64Atomics : VkBool32, shaderSharedInt64Atomics : VkBool32, shaderFloat16 : VkBool32, shaderInt8 : VkBool32, descriptorIndexing : VkBool32, shaderInputAttachmentArrayDynamicIndexing : VkBool32, shaderUniformTexelBufferArrayDynamicIndexing : VkBool32, shaderStorageTexelBufferArrayDynamicIndexing : VkBool32, shaderUniformBufferArrayNonUniformIndexing : VkBool32, shaderSampledImageArrayNonUniformIndexing : VkBool32, shaderStorageBufferArrayNonUniformIndexing : VkBool32, shaderStorageImageArrayNonUniformIndexing : VkBool32, shaderInputAttachmentArrayNonUniformIndexing : VkBool32, shaderUniformTexelBufferArrayNonUniformIndexing : VkBool32, shaderStorageTexelBufferArrayNonUniformIndexing : VkBool32, descriptorBindingUniformBufferUpdateAfterBind : VkBool32, descriptorBindingSampledImageUpdateAfterBind : VkBool32, descriptorBindingStorageImageUpdateAfterBind : VkBool32, descriptorBindingStorageBufferUpdateAfterBind : VkBool32, descriptorBindingUniformTexelBufferUpdateAfterBind : VkBool32, descriptorBindingStorageTexelBufferUpdateAfterBind : VkBool32, descriptorBindingUpdateUnusedWhilePending : VkBool32, descriptorBindingPartiallyBound : VkBool32, descriptorBindingVariableDescriptorCount : VkBool32, runtimeDescriptorArray : VkBool32, samplerFilterMinmax : VkBool32, scalarBlockLayout : VkBool32, imagelessFramebuffer : VkBool32, uniformBufferStandardLayout : VkBool32, shaderSubgroupExtendedTypes : VkBool32, separateDepthStencilLayouts : VkBool32, hostQueryReset : VkBool32, timelineSemaphore : VkBool32, bufferDeviceAddress : VkBool32, bufferDeviceAddressCaptureReplay : VkBool32, bufferDeviceAddressMultiDevice : VkBool32, vulkanMemoryModel : VkBool32, vulkanMemoryModelDeviceScope : VkBool32, vulkanMemoryModelAvailabilityVisibilityChains : VkBool32, shaderOutputViewportIndex : VkBool32, shaderOutputLayer : VkBool32, subgroupBroadcastDynamicId : VkBool32) =
                {
                    sType = 51u
                    pNext = pNext
                    samplerMirrorClampToEdge = samplerMirrorClampToEdge
                    drawIndirectCount = drawIndirectCount
                    storageBuffer8BitAccess = storageBuffer8BitAccess
                    uniformAndStorageBuffer8BitAccess = uniformAndStorageBuffer8BitAccess
                    storagePushConstant8 = storagePushConstant8
                    shaderBufferInt64Atomics = shaderBufferInt64Atomics
                    shaderSharedInt64Atomics = shaderSharedInt64Atomics
                    shaderFloat16 = shaderFloat16
                    shaderInt8 = shaderInt8
                    descriptorIndexing = descriptorIndexing
                    shaderInputAttachmentArrayDynamicIndexing = shaderInputAttachmentArrayDynamicIndexing
                    shaderUniformTexelBufferArrayDynamicIndexing = shaderUniformTexelBufferArrayDynamicIndexing
                    shaderStorageTexelBufferArrayDynamicIndexing = shaderStorageTexelBufferArrayDynamicIndexing
                    shaderUniformBufferArrayNonUniformIndexing = shaderUniformBufferArrayNonUniformIndexing
                    shaderSampledImageArrayNonUniformIndexing = shaderSampledImageArrayNonUniformIndexing
                    shaderStorageBufferArrayNonUniformIndexing = shaderStorageBufferArrayNonUniformIndexing
                    shaderStorageImageArrayNonUniformIndexing = shaderStorageImageArrayNonUniformIndexing
                    shaderInputAttachmentArrayNonUniformIndexing = shaderInputAttachmentArrayNonUniformIndexing
                    shaderUniformTexelBufferArrayNonUniformIndexing = shaderUniformTexelBufferArrayNonUniformIndexing
                    shaderStorageTexelBufferArrayNonUniformIndexing = shaderStorageTexelBufferArrayNonUniformIndexing
                    descriptorBindingUniformBufferUpdateAfterBind = descriptorBindingUniformBufferUpdateAfterBind
                    descriptorBindingSampledImageUpdateAfterBind = descriptorBindingSampledImageUpdateAfterBind
                    descriptorBindingStorageImageUpdateAfterBind = descriptorBindingStorageImageUpdateAfterBind
                    descriptorBindingStorageBufferUpdateAfterBind = descriptorBindingStorageBufferUpdateAfterBind
                    descriptorBindingUniformTexelBufferUpdateAfterBind = descriptorBindingUniformTexelBufferUpdateAfterBind
                    descriptorBindingStorageTexelBufferUpdateAfterBind = descriptorBindingStorageTexelBufferUpdateAfterBind
                    descriptorBindingUpdateUnusedWhilePending = descriptorBindingUpdateUnusedWhilePending
                    descriptorBindingPartiallyBound = descriptorBindingPartiallyBound
                    descriptorBindingVariableDescriptorCount = descriptorBindingVariableDescriptorCount
                    runtimeDescriptorArray = runtimeDescriptorArray
                    samplerFilterMinmax = samplerFilterMinmax
                    scalarBlockLayout = scalarBlockLayout
                    imagelessFramebuffer = imagelessFramebuffer
                    uniformBufferStandardLayout = uniformBufferStandardLayout
                    shaderSubgroupExtendedTypes = shaderSubgroupExtendedTypes
                    separateDepthStencilLayouts = separateDepthStencilLayouts
                    hostQueryReset = hostQueryReset
                    timelineSemaphore = timelineSemaphore
                    bufferDeviceAddress = bufferDeviceAddress
                    bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay
                    bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice
                    vulkanMemoryModel = vulkanMemoryModel
                    vulkanMemoryModelDeviceScope = vulkanMemoryModelDeviceScope
                    vulkanMemoryModelAvailabilityVisibilityChains = vulkanMemoryModelAvailabilityVisibilityChains
                    shaderOutputViewportIndex = shaderOutputViewportIndex
                    shaderOutputLayer = shaderOutputLayer
                    subgroupBroadcastDynamicId = subgroupBroadcastDynamicId
                }

            new(samplerMirrorClampToEdge : VkBool32, drawIndirectCount : VkBool32, storageBuffer8BitAccess : VkBool32, uniformAndStorageBuffer8BitAccess : VkBool32, storagePushConstant8 : VkBool32, shaderBufferInt64Atomics : VkBool32, shaderSharedInt64Atomics : VkBool32, shaderFloat16 : VkBool32, shaderInt8 : VkBool32, descriptorIndexing : VkBool32, shaderInputAttachmentArrayDynamicIndexing : VkBool32, shaderUniformTexelBufferArrayDynamicIndexing : VkBool32, shaderStorageTexelBufferArrayDynamicIndexing : VkBool32, shaderUniformBufferArrayNonUniformIndexing : VkBool32, shaderSampledImageArrayNonUniformIndexing : VkBool32, shaderStorageBufferArrayNonUniformIndexing : VkBool32, shaderStorageImageArrayNonUniformIndexing : VkBool32, shaderInputAttachmentArrayNonUniformIndexing : VkBool32, shaderUniformTexelBufferArrayNonUniformIndexing : VkBool32, shaderStorageTexelBufferArrayNonUniformIndexing : VkBool32, descriptorBindingUniformBufferUpdateAfterBind : VkBool32, descriptorBindingSampledImageUpdateAfterBind : VkBool32, descriptorBindingStorageImageUpdateAfterBind : VkBool32, descriptorBindingStorageBufferUpdateAfterBind : VkBool32, descriptorBindingUniformTexelBufferUpdateAfterBind : VkBool32, descriptorBindingStorageTexelBufferUpdateAfterBind : VkBool32, descriptorBindingUpdateUnusedWhilePending : VkBool32, descriptorBindingPartiallyBound : VkBool32, descriptorBindingVariableDescriptorCount : VkBool32, runtimeDescriptorArray : VkBool32, samplerFilterMinmax : VkBool32, scalarBlockLayout : VkBool32, imagelessFramebuffer : VkBool32, uniformBufferStandardLayout : VkBool32, shaderSubgroupExtendedTypes : VkBool32, separateDepthStencilLayouts : VkBool32, hostQueryReset : VkBool32, timelineSemaphore : VkBool32, bufferDeviceAddress : VkBool32, bufferDeviceAddressCaptureReplay : VkBool32, bufferDeviceAddressMultiDevice : VkBool32, vulkanMemoryModel : VkBool32, vulkanMemoryModelDeviceScope : VkBool32, vulkanMemoryModelAvailabilityVisibilityChains : VkBool32, shaderOutputViewportIndex : VkBool32, shaderOutputLayer : VkBool32, subgroupBroadcastDynamicId : VkBool32) =
                VkPhysicalDeviceVulkan12Features(Unchecked.defaultof<nativeint>, samplerMirrorClampToEdge, drawIndirectCount, storageBuffer8BitAccess, uniformAndStorageBuffer8BitAccess, storagePushConstant8, shaderBufferInt64Atomics, shaderSharedInt64Atomics, shaderFloat16, shaderInt8, descriptorIndexing, shaderInputAttachmentArrayDynamicIndexing, shaderUniformTexelBufferArrayDynamicIndexing, shaderStorageTexelBufferArrayDynamicIndexing, shaderUniformBufferArrayNonUniformIndexing, shaderSampledImageArrayNonUniformIndexing, shaderStorageBufferArrayNonUniformIndexing, shaderStorageImageArrayNonUniformIndexing, shaderInputAttachmentArrayNonUniformIndexing, shaderUniformTexelBufferArrayNonUniformIndexing, shaderStorageTexelBufferArrayNonUniformIndexing, descriptorBindingUniformBufferUpdateAfterBind, descriptorBindingSampledImageUpdateAfterBind, descriptorBindingStorageImageUpdateAfterBind, descriptorBindingStorageBufferUpdateAfterBind, descriptorBindingUniformTexelBufferUpdateAfterBind, descriptorBindingStorageTexelBufferUpdateAfterBind, descriptorBindingUpdateUnusedWhilePending, descriptorBindingPartiallyBound, descriptorBindingVariableDescriptorCount, runtimeDescriptorArray, samplerFilterMinmax, scalarBlockLayout, imagelessFramebuffer, uniformBufferStandardLayout, shaderSubgroupExtendedTypes, separateDepthStencilLayouts, hostQueryReset, timelineSemaphore, bufferDeviceAddress, bufferDeviceAddressCaptureReplay, bufferDeviceAddressMultiDevice, vulkanMemoryModel, vulkanMemoryModelDeviceScope, vulkanMemoryModelAvailabilityVisibilityChains, shaderOutputViewportIndex, shaderOutputLayer, subgroupBroadcastDynamicId)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.samplerMirrorClampToEdge = Unchecked.defaultof<VkBool32> && x.drawIndirectCount = Unchecked.defaultof<VkBool32> && x.storageBuffer8BitAccess = Unchecked.defaultof<VkBool32> && x.uniformAndStorageBuffer8BitAccess = Unchecked.defaultof<VkBool32> && x.storagePushConstant8 = Unchecked.defaultof<VkBool32> && x.shaderBufferInt64Atomics = Unchecked.defaultof<VkBool32> && x.shaderSharedInt64Atomics = Unchecked.defaultof<VkBool32> && x.shaderFloat16 = Unchecked.defaultof<VkBool32> && x.shaderInt8 = Unchecked.defaultof<VkBool32> && x.descriptorIndexing = Unchecked.defaultof<VkBool32> && x.shaderInputAttachmentArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderUniformTexelBufferArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageTexelBufferArrayDynamicIndexing = Unchecked.defaultof<VkBool32> && x.shaderUniformBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderSampledImageArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageImageArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderInputAttachmentArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderUniformTexelBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.shaderStorageTexelBufferArrayNonUniformIndexing = Unchecked.defaultof<VkBool32> && x.descriptorBindingUniformBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingSampledImageUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingStorageImageUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingStorageBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingUniformTexelBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingStorageTexelBufferUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.descriptorBindingUpdateUnusedWhilePending = Unchecked.defaultof<VkBool32> && x.descriptorBindingPartiallyBound = Unchecked.defaultof<VkBool32> && x.descriptorBindingVariableDescriptorCount = Unchecked.defaultof<VkBool32> && x.runtimeDescriptorArray = Unchecked.defaultof<VkBool32> && x.samplerFilterMinmax = Unchecked.defaultof<VkBool32> && x.scalarBlockLayout = Unchecked.defaultof<VkBool32> && x.imagelessFramebuffer = Unchecked.defaultof<VkBool32> && x.uniformBufferStandardLayout = Unchecked.defaultof<VkBool32> && x.shaderSubgroupExtendedTypes = Unchecked.defaultof<VkBool32> && x.separateDepthStencilLayouts = Unchecked.defaultof<VkBool32> && x.hostQueryReset = Unchecked.defaultof<VkBool32> && x.timelineSemaphore = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddress = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddressCaptureReplay = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddressMultiDevice = Unchecked.defaultof<VkBool32> && x.vulkanMemoryModel = Unchecked.defaultof<VkBool32> && x.vulkanMemoryModelDeviceScope = Unchecked.defaultof<VkBool32> && x.vulkanMemoryModelAvailabilityVisibilityChains = Unchecked.defaultof<VkBool32> && x.shaderOutputViewportIndex = Unchecked.defaultof<VkBool32> && x.shaderOutputLayer = Unchecked.defaultof<VkBool32> && x.subgroupBroadcastDynamicId = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVulkan12Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "samplerMirrorClampToEdge = %A" x.samplerMirrorClampToEdge
                    sprintf "drawIndirectCount = %A" x.drawIndirectCount
                    sprintf "storageBuffer8BitAccess = %A" x.storageBuffer8BitAccess
                    sprintf "uniformAndStorageBuffer8BitAccess = %A" x.uniformAndStorageBuffer8BitAccess
                    sprintf "storagePushConstant8 = %A" x.storagePushConstant8
                    sprintf "shaderBufferInt64Atomics = %A" x.shaderBufferInt64Atomics
                    sprintf "shaderSharedInt64Atomics = %A" x.shaderSharedInt64Atomics
                    sprintf "shaderFloat16 = %A" x.shaderFloat16
                    sprintf "shaderInt8 = %A" x.shaderInt8
                    sprintf "descriptorIndexing = %A" x.descriptorIndexing
                    sprintf "shaderInputAttachmentArrayDynamicIndexing = %A" x.shaderInputAttachmentArrayDynamicIndexing
                    sprintf "shaderUniformTexelBufferArrayDynamicIndexing = %A" x.shaderUniformTexelBufferArrayDynamicIndexing
                    sprintf "shaderStorageTexelBufferArrayDynamicIndexing = %A" x.shaderStorageTexelBufferArrayDynamicIndexing
                    sprintf "shaderUniformBufferArrayNonUniformIndexing = %A" x.shaderUniformBufferArrayNonUniformIndexing
                    sprintf "shaderSampledImageArrayNonUniformIndexing = %A" x.shaderSampledImageArrayNonUniformIndexing
                    sprintf "shaderStorageBufferArrayNonUniformIndexing = %A" x.shaderStorageBufferArrayNonUniformIndexing
                    sprintf "shaderStorageImageArrayNonUniformIndexing = %A" x.shaderStorageImageArrayNonUniformIndexing
                    sprintf "shaderInputAttachmentArrayNonUniformIndexing = %A" x.shaderInputAttachmentArrayNonUniformIndexing
                    sprintf "shaderUniformTexelBufferArrayNonUniformIndexing = %A" x.shaderUniformTexelBufferArrayNonUniformIndexing
                    sprintf "shaderStorageTexelBufferArrayNonUniformIndexing = %A" x.shaderStorageTexelBufferArrayNonUniformIndexing
                    sprintf "descriptorBindingUniformBufferUpdateAfterBind = %A" x.descriptorBindingUniformBufferUpdateAfterBind
                    sprintf "descriptorBindingSampledImageUpdateAfterBind = %A" x.descriptorBindingSampledImageUpdateAfterBind
                    sprintf "descriptorBindingStorageImageUpdateAfterBind = %A" x.descriptorBindingStorageImageUpdateAfterBind
                    sprintf "descriptorBindingStorageBufferUpdateAfterBind = %A" x.descriptorBindingStorageBufferUpdateAfterBind
                    sprintf "descriptorBindingUniformTexelBufferUpdateAfterBind = %A" x.descriptorBindingUniformTexelBufferUpdateAfterBind
                    sprintf "descriptorBindingStorageTexelBufferUpdateAfterBind = %A" x.descriptorBindingStorageTexelBufferUpdateAfterBind
                    sprintf "descriptorBindingUpdateUnusedWhilePending = %A" x.descriptorBindingUpdateUnusedWhilePending
                    sprintf "descriptorBindingPartiallyBound = %A" x.descriptorBindingPartiallyBound
                    sprintf "descriptorBindingVariableDescriptorCount = %A" x.descriptorBindingVariableDescriptorCount
                    sprintf "runtimeDescriptorArray = %A" x.runtimeDescriptorArray
                    sprintf "samplerFilterMinmax = %A" x.samplerFilterMinmax
                    sprintf "scalarBlockLayout = %A" x.scalarBlockLayout
                    sprintf "imagelessFramebuffer = %A" x.imagelessFramebuffer
                    sprintf "uniformBufferStandardLayout = %A" x.uniformBufferStandardLayout
                    sprintf "shaderSubgroupExtendedTypes = %A" x.shaderSubgroupExtendedTypes
                    sprintf "separateDepthStencilLayouts = %A" x.separateDepthStencilLayouts
                    sprintf "hostQueryReset = %A" x.hostQueryReset
                    sprintf "timelineSemaphore = %A" x.timelineSemaphore
                    sprintf "bufferDeviceAddress = %A" x.bufferDeviceAddress
                    sprintf "bufferDeviceAddressCaptureReplay = %A" x.bufferDeviceAddressCaptureReplay
                    sprintf "bufferDeviceAddressMultiDevice = %A" x.bufferDeviceAddressMultiDevice
                    sprintf "vulkanMemoryModel = %A" x.vulkanMemoryModel
                    sprintf "vulkanMemoryModelDeviceScope = %A" x.vulkanMemoryModelDeviceScope
                    sprintf "vulkanMemoryModelAvailabilityVisibilityChains = %A" x.vulkanMemoryModelAvailabilityVisibilityChains
                    sprintf "shaderOutputViewportIndex = %A" x.shaderOutputViewportIndex
                    sprintf "shaderOutputLayer = %A" x.shaderOutputLayer
                    sprintf "subgroupBroadcastDynamicId = %A" x.subgroupBroadcastDynamicId
                ] |> sprintf "VkPhysicalDeviceVulkan12Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan12Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public driverID : VkDriverId
            val mutable public driverName : String256
            val mutable public driverInfo : String256
            val mutable public conformanceVersion : VkConformanceVersion
            val mutable public denormBehaviorIndependence : VkShaderFloatControlsIndependence
            val mutable public roundingModeIndependence : VkShaderFloatControlsIndependence
            val mutable public shaderSignedZeroInfNanPreserveFloat16 : VkBool32
            val mutable public shaderSignedZeroInfNanPreserveFloat32 : VkBool32
            val mutable public shaderSignedZeroInfNanPreserveFloat64 : VkBool32
            val mutable public shaderDenormPreserveFloat16 : VkBool32
            val mutable public shaderDenormPreserveFloat32 : VkBool32
            val mutable public shaderDenormPreserveFloat64 : VkBool32
            val mutable public shaderDenormFlushToZeroFloat16 : VkBool32
            val mutable public shaderDenormFlushToZeroFloat32 : VkBool32
            val mutable public shaderDenormFlushToZeroFloat64 : VkBool32
            val mutable public shaderRoundingModeRTEFloat16 : VkBool32
            val mutable public shaderRoundingModeRTEFloat32 : VkBool32
            val mutable public shaderRoundingModeRTEFloat64 : VkBool32
            val mutable public shaderRoundingModeRTZFloat16 : VkBool32
            val mutable public shaderRoundingModeRTZFloat32 : VkBool32
            val mutable public shaderRoundingModeRTZFloat64 : VkBool32
            val mutable public maxUpdateAfterBindDescriptorsInAllPools : uint32
            val mutable public shaderUniformBufferArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderSampledImageArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderStorageBufferArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderStorageImageArrayNonUniformIndexingNative : VkBool32
            val mutable public shaderInputAttachmentArrayNonUniformIndexingNative : VkBool32
            val mutable public robustBufferAccessUpdateAfterBind : VkBool32
            val mutable public quadDivergentImplicitLod : VkBool32
            val mutable public maxPerStageDescriptorUpdateAfterBindSamplers : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindUniformBuffers : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindStorageBuffers : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindSampledImages : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindStorageImages : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindInputAttachments : uint32
            val mutable public maxPerStageUpdateAfterBindResources : uint32
            val mutable public maxDescriptorSetUpdateAfterBindSamplers : uint32
            val mutable public maxDescriptorSetUpdateAfterBindUniformBuffers : uint32
            val mutable public maxDescriptorSetUpdateAfterBindUniformBuffersDynamic : uint32
            val mutable public maxDescriptorSetUpdateAfterBindStorageBuffers : uint32
            val mutable public maxDescriptorSetUpdateAfterBindStorageBuffersDynamic : uint32
            val mutable public maxDescriptorSetUpdateAfterBindSampledImages : uint32
            val mutable public maxDescriptorSetUpdateAfterBindStorageImages : uint32
            val mutable public maxDescriptorSetUpdateAfterBindInputAttachments : uint32
            val mutable public supportedDepthResolveModes : VkResolveModeFlags
            val mutable public supportedStencilResolveModes : VkResolveModeFlags
            val mutable public independentResolveNone : VkBool32
            val mutable public independentResolve : VkBool32
            val mutable public filterMinmaxSingleComponentFormats : VkBool32
            val mutable public filterMinmaxImageComponentMapping : VkBool32
            val mutable public maxTimelineSemaphoreValueDifference : uint64
            val mutable public framebufferIntegerColorSampleCounts : VkSampleCountFlags

            new(pNext : nativeint, driverID : VkDriverId, driverName : String256, driverInfo : String256, conformanceVersion : VkConformanceVersion, denormBehaviorIndependence : VkShaderFloatControlsIndependence, roundingModeIndependence : VkShaderFloatControlsIndependence, shaderSignedZeroInfNanPreserveFloat16 : VkBool32, shaderSignedZeroInfNanPreserveFloat32 : VkBool32, shaderSignedZeroInfNanPreserveFloat64 : VkBool32, shaderDenormPreserveFloat16 : VkBool32, shaderDenormPreserveFloat32 : VkBool32, shaderDenormPreserveFloat64 : VkBool32, shaderDenormFlushToZeroFloat16 : VkBool32, shaderDenormFlushToZeroFloat32 : VkBool32, shaderDenormFlushToZeroFloat64 : VkBool32, shaderRoundingModeRTEFloat16 : VkBool32, shaderRoundingModeRTEFloat32 : VkBool32, shaderRoundingModeRTEFloat64 : VkBool32, shaderRoundingModeRTZFloat16 : VkBool32, shaderRoundingModeRTZFloat32 : VkBool32, shaderRoundingModeRTZFloat64 : VkBool32, maxUpdateAfterBindDescriptorsInAllPools : uint32, shaderUniformBufferArrayNonUniformIndexingNative : VkBool32, shaderSampledImageArrayNonUniformIndexingNative : VkBool32, shaderStorageBufferArrayNonUniformIndexingNative : VkBool32, shaderStorageImageArrayNonUniformIndexingNative : VkBool32, shaderInputAttachmentArrayNonUniformIndexingNative : VkBool32, robustBufferAccessUpdateAfterBind : VkBool32, quadDivergentImplicitLod : VkBool32, maxPerStageDescriptorUpdateAfterBindSamplers : uint32, maxPerStageDescriptorUpdateAfterBindUniformBuffers : uint32, maxPerStageDescriptorUpdateAfterBindStorageBuffers : uint32, maxPerStageDescriptorUpdateAfterBindSampledImages : uint32, maxPerStageDescriptorUpdateAfterBindStorageImages : uint32, maxPerStageDescriptorUpdateAfterBindInputAttachments : uint32, maxPerStageUpdateAfterBindResources : uint32, maxDescriptorSetUpdateAfterBindSamplers : uint32, maxDescriptorSetUpdateAfterBindUniformBuffers : uint32, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic : uint32, maxDescriptorSetUpdateAfterBindStorageBuffers : uint32, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic : uint32, maxDescriptorSetUpdateAfterBindSampledImages : uint32, maxDescriptorSetUpdateAfterBindStorageImages : uint32, maxDescriptorSetUpdateAfterBindInputAttachments : uint32, supportedDepthResolveModes : VkResolveModeFlags, supportedStencilResolveModes : VkResolveModeFlags, independentResolveNone : VkBool32, independentResolve : VkBool32, filterMinmaxSingleComponentFormats : VkBool32, filterMinmaxImageComponentMapping : VkBool32, maxTimelineSemaphoreValueDifference : uint64, framebufferIntegerColorSampleCounts : VkSampleCountFlags) =
                {
                    sType = 52u
                    pNext = pNext
                    driverID = driverID
                    driverName = driverName
                    driverInfo = driverInfo
                    conformanceVersion = conformanceVersion
                    denormBehaviorIndependence = denormBehaviorIndependence
                    roundingModeIndependence = roundingModeIndependence
                    shaderSignedZeroInfNanPreserveFloat16 = shaderSignedZeroInfNanPreserveFloat16
                    shaderSignedZeroInfNanPreserveFloat32 = shaderSignedZeroInfNanPreserveFloat32
                    shaderSignedZeroInfNanPreserveFloat64 = shaderSignedZeroInfNanPreserveFloat64
                    shaderDenormPreserveFloat16 = shaderDenormPreserveFloat16
                    shaderDenormPreserveFloat32 = shaderDenormPreserveFloat32
                    shaderDenormPreserveFloat64 = shaderDenormPreserveFloat64
                    shaderDenormFlushToZeroFloat16 = shaderDenormFlushToZeroFloat16
                    shaderDenormFlushToZeroFloat32 = shaderDenormFlushToZeroFloat32
                    shaderDenormFlushToZeroFloat64 = shaderDenormFlushToZeroFloat64
                    shaderRoundingModeRTEFloat16 = shaderRoundingModeRTEFloat16
                    shaderRoundingModeRTEFloat32 = shaderRoundingModeRTEFloat32
                    shaderRoundingModeRTEFloat64 = shaderRoundingModeRTEFloat64
                    shaderRoundingModeRTZFloat16 = shaderRoundingModeRTZFloat16
                    shaderRoundingModeRTZFloat32 = shaderRoundingModeRTZFloat32
                    shaderRoundingModeRTZFloat64 = shaderRoundingModeRTZFloat64
                    maxUpdateAfterBindDescriptorsInAllPools = maxUpdateAfterBindDescriptorsInAllPools
                    shaderUniformBufferArrayNonUniformIndexingNative = shaderUniformBufferArrayNonUniformIndexingNative
                    shaderSampledImageArrayNonUniformIndexingNative = shaderSampledImageArrayNonUniformIndexingNative
                    shaderStorageBufferArrayNonUniformIndexingNative = shaderStorageBufferArrayNonUniformIndexingNative
                    shaderStorageImageArrayNonUniformIndexingNative = shaderStorageImageArrayNonUniformIndexingNative
                    shaderInputAttachmentArrayNonUniformIndexingNative = shaderInputAttachmentArrayNonUniformIndexingNative
                    robustBufferAccessUpdateAfterBind = robustBufferAccessUpdateAfterBind
                    quadDivergentImplicitLod = quadDivergentImplicitLod
                    maxPerStageDescriptorUpdateAfterBindSamplers = maxPerStageDescriptorUpdateAfterBindSamplers
                    maxPerStageDescriptorUpdateAfterBindUniformBuffers = maxPerStageDescriptorUpdateAfterBindUniformBuffers
                    maxPerStageDescriptorUpdateAfterBindStorageBuffers = maxPerStageDescriptorUpdateAfterBindStorageBuffers
                    maxPerStageDescriptorUpdateAfterBindSampledImages = maxPerStageDescriptorUpdateAfterBindSampledImages
                    maxPerStageDescriptorUpdateAfterBindStorageImages = maxPerStageDescriptorUpdateAfterBindStorageImages
                    maxPerStageDescriptorUpdateAfterBindInputAttachments = maxPerStageDescriptorUpdateAfterBindInputAttachments
                    maxPerStageUpdateAfterBindResources = maxPerStageUpdateAfterBindResources
                    maxDescriptorSetUpdateAfterBindSamplers = maxDescriptorSetUpdateAfterBindSamplers
                    maxDescriptorSetUpdateAfterBindUniformBuffers = maxDescriptorSetUpdateAfterBindUniformBuffers
                    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
                    maxDescriptorSetUpdateAfterBindStorageBuffers = maxDescriptorSetUpdateAfterBindStorageBuffers
                    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
                    maxDescriptorSetUpdateAfterBindSampledImages = maxDescriptorSetUpdateAfterBindSampledImages
                    maxDescriptorSetUpdateAfterBindStorageImages = maxDescriptorSetUpdateAfterBindStorageImages
                    maxDescriptorSetUpdateAfterBindInputAttachments = maxDescriptorSetUpdateAfterBindInputAttachments
                    supportedDepthResolveModes = supportedDepthResolveModes
                    supportedStencilResolveModes = supportedStencilResolveModes
                    independentResolveNone = independentResolveNone
                    independentResolve = independentResolve
                    filterMinmaxSingleComponentFormats = filterMinmaxSingleComponentFormats
                    filterMinmaxImageComponentMapping = filterMinmaxImageComponentMapping
                    maxTimelineSemaphoreValueDifference = maxTimelineSemaphoreValueDifference
                    framebufferIntegerColorSampleCounts = framebufferIntegerColorSampleCounts
                }

            new(driverID : VkDriverId, driverName : String256, driverInfo : String256, conformanceVersion : VkConformanceVersion, denormBehaviorIndependence : VkShaderFloatControlsIndependence, roundingModeIndependence : VkShaderFloatControlsIndependence, shaderSignedZeroInfNanPreserveFloat16 : VkBool32, shaderSignedZeroInfNanPreserveFloat32 : VkBool32, shaderSignedZeroInfNanPreserveFloat64 : VkBool32, shaderDenormPreserveFloat16 : VkBool32, shaderDenormPreserveFloat32 : VkBool32, shaderDenormPreserveFloat64 : VkBool32, shaderDenormFlushToZeroFloat16 : VkBool32, shaderDenormFlushToZeroFloat32 : VkBool32, shaderDenormFlushToZeroFloat64 : VkBool32, shaderRoundingModeRTEFloat16 : VkBool32, shaderRoundingModeRTEFloat32 : VkBool32, shaderRoundingModeRTEFloat64 : VkBool32, shaderRoundingModeRTZFloat16 : VkBool32, shaderRoundingModeRTZFloat32 : VkBool32, shaderRoundingModeRTZFloat64 : VkBool32, maxUpdateAfterBindDescriptorsInAllPools : uint32, shaderUniformBufferArrayNonUniformIndexingNative : VkBool32, shaderSampledImageArrayNonUniformIndexingNative : VkBool32, shaderStorageBufferArrayNonUniformIndexingNative : VkBool32, shaderStorageImageArrayNonUniformIndexingNative : VkBool32, shaderInputAttachmentArrayNonUniformIndexingNative : VkBool32, robustBufferAccessUpdateAfterBind : VkBool32, quadDivergentImplicitLod : VkBool32, maxPerStageDescriptorUpdateAfterBindSamplers : uint32, maxPerStageDescriptorUpdateAfterBindUniformBuffers : uint32, maxPerStageDescriptorUpdateAfterBindStorageBuffers : uint32, maxPerStageDescriptorUpdateAfterBindSampledImages : uint32, maxPerStageDescriptorUpdateAfterBindStorageImages : uint32, maxPerStageDescriptorUpdateAfterBindInputAttachments : uint32, maxPerStageUpdateAfterBindResources : uint32, maxDescriptorSetUpdateAfterBindSamplers : uint32, maxDescriptorSetUpdateAfterBindUniformBuffers : uint32, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic : uint32, maxDescriptorSetUpdateAfterBindStorageBuffers : uint32, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic : uint32, maxDescriptorSetUpdateAfterBindSampledImages : uint32, maxDescriptorSetUpdateAfterBindStorageImages : uint32, maxDescriptorSetUpdateAfterBindInputAttachments : uint32, supportedDepthResolveModes : VkResolveModeFlags, supportedStencilResolveModes : VkResolveModeFlags, independentResolveNone : VkBool32, independentResolve : VkBool32, filterMinmaxSingleComponentFormats : VkBool32, filterMinmaxImageComponentMapping : VkBool32, maxTimelineSemaphoreValueDifference : uint64, framebufferIntegerColorSampleCounts : VkSampleCountFlags) =
                VkPhysicalDeviceVulkan12Properties(Unchecked.defaultof<nativeint>, driverID, driverName, driverInfo, conformanceVersion, denormBehaviorIndependence, roundingModeIndependence, shaderSignedZeroInfNanPreserveFloat16, shaderSignedZeroInfNanPreserveFloat32, shaderSignedZeroInfNanPreserveFloat64, shaderDenormPreserveFloat16, shaderDenormPreserveFloat32, shaderDenormPreserveFloat64, shaderDenormFlushToZeroFloat16, shaderDenormFlushToZeroFloat32, shaderDenormFlushToZeroFloat64, shaderRoundingModeRTEFloat16, shaderRoundingModeRTEFloat32, shaderRoundingModeRTEFloat64, shaderRoundingModeRTZFloat16, shaderRoundingModeRTZFloat32, shaderRoundingModeRTZFloat64, maxUpdateAfterBindDescriptorsInAllPools, shaderUniformBufferArrayNonUniformIndexingNative, shaderSampledImageArrayNonUniformIndexingNative, shaderStorageBufferArrayNonUniformIndexingNative, shaderStorageImageArrayNonUniformIndexingNative, shaderInputAttachmentArrayNonUniformIndexingNative, robustBufferAccessUpdateAfterBind, quadDivergentImplicitLod, maxPerStageDescriptorUpdateAfterBindSamplers, maxPerStageDescriptorUpdateAfterBindUniformBuffers, maxPerStageDescriptorUpdateAfterBindStorageBuffers, maxPerStageDescriptorUpdateAfterBindSampledImages, maxPerStageDescriptorUpdateAfterBindStorageImages, maxPerStageDescriptorUpdateAfterBindInputAttachments, maxPerStageUpdateAfterBindResources, maxDescriptorSetUpdateAfterBindSamplers, maxDescriptorSetUpdateAfterBindUniformBuffers, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, maxDescriptorSetUpdateAfterBindStorageBuffers, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, maxDescriptorSetUpdateAfterBindSampledImages, maxDescriptorSetUpdateAfterBindStorageImages, maxDescriptorSetUpdateAfterBindInputAttachments, supportedDepthResolveModes, supportedStencilResolveModes, independentResolveNone, independentResolve, filterMinmaxSingleComponentFormats, filterMinmaxImageComponentMapping, maxTimelineSemaphoreValueDifference, framebufferIntegerColorSampleCounts)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.driverID = Unchecked.defaultof<VkDriverId> && x.driverName = Unchecked.defaultof<String256> && x.driverInfo = Unchecked.defaultof<String256> && x.conformanceVersion = Unchecked.defaultof<VkConformanceVersion> && x.denormBehaviorIndependence = Unchecked.defaultof<VkShaderFloatControlsIndependence> && x.roundingModeIndependence = Unchecked.defaultof<VkShaderFloatControlsIndependence> && x.shaderSignedZeroInfNanPreserveFloat16 = Unchecked.defaultof<VkBool32> && x.shaderSignedZeroInfNanPreserveFloat32 = Unchecked.defaultof<VkBool32> && x.shaderSignedZeroInfNanPreserveFloat64 = Unchecked.defaultof<VkBool32> && x.shaderDenormPreserveFloat16 = Unchecked.defaultof<VkBool32> && x.shaderDenormPreserveFloat32 = Unchecked.defaultof<VkBool32> && x.shaderDenormPreserveFloat64 = Unchecked.defaultof<VkBool32> && x.shaderDenormFlushToZeroFloat16 = Unchecked.defaultof<VkBool32> && x.shaderDenormFlushToZeroFloat32 = Unchecked.defaultof<VkBool32> && x.shaderDenormFlushToZeroFloat64 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTEFloat16 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTEFloat32 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTEFloat64 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTZFloat16 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTZFloat32 = Unchecked.defaultof<VkBool32> && x.shaderRoundingModeRTZFloat64 = Unchecked.defaultof<VkBool32> && x.maxUpdateAfterBindDescriptorsInAllPools = Unchecked.defaultof<uint32> && x.shaderUniformBufferArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderSampledImageArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderStorageBufferArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderStorageImageArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.shaderInputAttachmentArrayNonUniformIndexingNative = Unchecked.defaultof<VkBool32> && x.robustBufferAccessUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.quadDivergentImplicitLod = Unchecked.defaultof<VkBool32> && x.maxPerStageDescriptorUpdateAfterBindSamplers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindUniformBuffers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindStorageBuffers = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindSampledImages = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindStorageImages = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindInputAttachments = Unchecked.defaultof<uint32> && x.maxPerStageUpdateAfterBindResources = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindSamplers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindUniformBuffers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindStorageBuffers = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindSampledImages = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindStorageImages = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindInputAttachments = Unchecked.defaultof<uint32> && x.supportedDepthResolveModes = Unchecked.defaultof<VkResolveModeFlags> && x.supportedStencilResolveModes = Unchecked.defaultof<VkResolveModeFlags> && x.independentResolveNone = Unchecked.defaultof<VkBool32> && x.independentResolve = Unchecked.defaultof<VkBool32> && x.filterMinmaxSingleComponentFormats = Unchecked.defaultof<VkBool32> && x.filterMinmaxImageComponentMapping = Unchecked.defaultof<VkBool32> && x.maxTimelineSemaphoreValueDifference = Unchecked.defaultof<uint64> && x.framebufferIntegerColorSampleCounts = Unchecked.defaultof<VkSampleCountFlags>

            static member Empty =
                VkPhysicalDeviceVulkan12Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDriverId>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<VkConformanceVersion>, Unchecked.defaultof<VkShaderFloatControlsIndependence>, Unchecked.defaultof<VkShaderFloatControlsIndependence>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkSampleCountFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "driverID = %A" x.driverID
                    sprintf "driverName = %A" x.driverName
                    sprintf "driverInfo = %A" x.driverInfo
                    sprintf "conformanceVersion = %A" x.conformanceVersion
                    sprintf "denormBehaviorIndependence = %A" x.denormBehaviorIndependence
                    sprintf "roundingModeIndependence = %A" x.roundingModeIndependence
                    sprintf "shaderSignedZeroInfNanPreserveFloat16 = %A" x.shaderSignedZeroInfNanPreserveFloat16
                    sprintf "shaderSignedZeroInfNanPreserveFloat32 = %A" x.shaderSignedZeroInfNanPreserveFloat32
                    sprintf "shaderSignedZeroInfNanPreserveFloat64 = %A" x.shaderSignedZeroInfNanPreserveFloat64
                    sprintf "shaderDenormPreserveFloat16 = %A" x.shaderDenormPreserveFloat16
                    sprintf "shaderDenormPreserveFloat32 = %A" x.shaderDenormPreserveFloat32
                    sprintf "shaderDenormPreserveFloat64 = %A" x.shaderDenormPreserveFloat64
                    sprintf "shaderDenormFlushToZeroFloat16 = %A" x.shaderDenormFlushToZeroFloat16
                    sprintf "shaderDenormFlushToZeroFloat32 = %A" x.shaderDenormFlushToZeroFloat32
                    sprintf "shaderDenormFlushToZeroFloat64 = %A" x.shaderDenormFlushToZeroFloat64
                    sprintf "shaderRoundingModeRTEFloat16 = %A" x.shaderRoundingModeRTEFloat16
                    sprintf "shaderRoundingModeRTEFloat32 = %A" x.shaderRoundingModeRTEFloat32
                    sprintf "shaderRoundingModeRTEFloat64 = %A" x.shaderRoundingModeRTEFloat64
                    sprintf "shaderRoundingModeRTZFloat16 = %A" x.shaderRoundingModeRTZFloat16
                    sprintf "shaderRoundingModeRTZFloat32 = %A" x.shaderRoundingModeRTZFloat32
                    sprintf "shaderRoundingModeRTZFloat64 = %A" x.shaderRoundingModeRTZFloat64
                    sprintf "maxUpdateAfterBindDescriptorsInAllPools = %A" x.maxUpdateAfterBindDescriptorsInAllPools
                    sprintf "shaderUniformBufferArrayNonUniformIndexingNative = %A" x.shaderUniformBufferArrayNonUniformIndexingNative
                    sprintf "shaderSampledImageArrayNonUniformIndexingNative = %A" x.shaderSampledImageArrayNonUniformIndexingNative
                    sprintf "shaderStorageBufferArrayNonUniformIndexingNative = %A" x.shaderStorageBufferArrayNonUniformIndexingNative
                    sprintf "shaderStorageImageArrayNonUniformIndexingNative = %A" x.shaderStorageImageArrayNonUniformIndexingNative
                    sprintf "shaderInputAttachmentArrayNonUniformIndexingNative = %A" x.shaderInputAttachmentArrayNonUniformIndexingNative
                    sprintf "robustBufferAccessUpdateAfterBind = %A" x.robustBufferAccessUpdateAfterBind
                    sprintf "quadDivergentImplicitLod = %A" x.quadDivergentImplicitLod
                    sprintf "maxPerStageDescriptorUpdateAfterBindSamplers = %A" x.maxPerStageDescriptorUpdateAfterBindSamplers
                    sprintf "maxPerStageDescriptorUpdateAfterBindUniformBuffers = %A" x.maxPerStageDescriptorUpdateAfterBindUniformBuffers
                    sprintf "maxPerStageDescriptorUpdateAfterBindStorageBuffers = %A" x.maxPerStageDescriptorUpdateAfterBindStorageBuffers
                    sprintf "maxPerStageDescriptorUpdateAfterBindSampledImages = %A" x.maxPerStageDescriptorUpdateAfterBindSampledImages
                    sprintf "maxPerStageDescriptorUpdateAfterBindStorageImages = %A" x.maxPerStageDescriptorUpdateAfterBindStorageImages
                    sprintf "maxPerStageDescriptorUpdateAfterBindInputAttachments = %A" x.maxPerStageDescriptorUpdateAfterBindInputAttachments
                    sprintf "maxPerStageUpdateAfterBindResources = %A" x.maxPerStageUpdateAfterBindResources
                    sprintf "maxDescriptorSetUpdateAfterBindSamplers = %A" x.maxDescriptorSetUpdateAfterBindSamplers
                    sprintf "maxDescriptorSetUpdateAfterBindUniformBuffers = %A" x.maxDescriptorSetUpdateAfterBindUniformBuffers
                    sprintf "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = %A" x.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
                    sprintf "maxDescriptorSetUpdateAfterBindStorageBuffers = %A" x.maxDescriptorSetUpdateAfterBindStorageBuffers
                    sprintf "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = %A" x.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
                    sprintf "maxDescriptorSetUpdateAfterBindSampledImages = %A" x.maxDescriptorSetUpdateAfterBindSampledImages
                    sprintf "maxDescriptorSetUpdateAfterBindStorageImages = %A" x.maxDescriptorSetUpdateAfterBindStorageImages
                    sprintf "maxDescriptorSetUpdateAfterBindInputAttachments = %A" x.maxDescriptorSetUpdateAfterBindInputAttachments
                    sprintf "supportedDepthResolveModes = %A" x.supportedDepthResolveModes
                    sprintf "supportedStencilResolveModes = %A" x.supportedStencilResolveModes
                    sprintf "independentResolveNone = %A" x.independentResolveNone
                    sprintf "independentResolve = %A" x.independentResolve
                    sprintf "filterMinmaxSingleComponentFormats = %A" x.filterMinmaxSingleComponentFormats
                    sprintf "filterMinmaxImageComponentMapping = %A" x.filterMinmaxImageComponentMapping
                    sprintf "maxTimelineSemaphoreValueDifference = %A" x.maxTimelineSemaphoreValueDifference
                    sprintf "framebufferIntegerColorSampleCounts = %A" x.framebufferIntegerColorSampleCounts
                ] |> sprintf "VkPhysicalDeviceVulkan12Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkanMemoryModelFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vulkanMemoryModel : VkBool32
            val mutable public vulkanMemoryModelDeviceScope : VkBool32
            val mutable public vulkanMemoryModelAvailabilityVisibilityChains : VkBool32

            new(pNext : nativeint, vulkanMemoryModel : VkBool32, vulkanMemoryModelDeviceScope : VkBool32, vulkanMemoryModelAvailabilityVisibilityChains : VkBool32) =
                {
                    sType = 1000211000u
                    pNext = pNext
                    vulkanMemoryModel = vulkanMemoryModel
                    vulkanMemoryModelDeviceScope = vulkanMemoryModelDeviceScope
                    vulkanMemoryModelAvailabilityVisibilityChains = vulkanMemoryModelAvailabilityVisibilityChains
                }

            new(vulkanMemoryModel : VkBool32, vulkanMemoryModelDeviceScope : VkBool32, vulkanMemoryModelAvailabilityVisibilityChains : VkBool32) =
                VkPhysicalDeviceVulkanMemoryModelFeatures(Unchecked.defaultof<nativeint>, vulkanMemoryModel, vulkanMemoryModelDeviceScope, vulkanMemoryModelAvailabilityVisibilityChains)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vulkanMemoryModel = Unchecked.defaultof<VkBool32> && x.vulkanMemoryModelDeviceScope = Unchecked.defaultof<VkBool32> && x.vulkanMemoryModelAvailabilityVisibilityChains = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVulkanMemoryModelFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "vulkanMemoryModel = %A" x.vulkanMemoryModel
                    sprintf "vulkanMemoryModelDeviceScope = %A" x.vulkanMemoryModelDeviceScope
                    sprintf "vulkanMemoryModelAvailabilityVisibilityChains = %A" x.vulkanMemoryModelAvailabilityVisibilityChains
                ] |> sprintf "VkPhysicalDeviceVulkanMemoryModelFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassAttachmentBeginInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public attachmentCount : uint32
            val mutable public pAttachments : nativeptr<VkImageView>

            new(pNext : nativeint, attachmentCount : uint32, pAttachments : nativeptr<VkImageView>) =
                {
                    sType = 1000108003u
                    pNext = pNext
                    attachmentCount = attachmentCount
                    pAttachments = pAttachments
                }

            new(attachmentCount : uint32, pAttachments : nativeptr<VkImageView>) =
                VkRenderPassAttachmentBeginInfo(Unchecked.defaultof<nativeint>, attachmentCount, pAttachments)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.attachmentCount = Unchecked.defaultof<uint32> && x.pAttachments = Unchecked.defaultof<nativeptr<VkImageView>>

            static member Empty =
                VkRenderPassAttachmentBeginInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageView>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "attachmentCount = %A" x.attachmentCount
                    sprintf "pAttachments = %A" x.pAttachments
                ] |> sprintf "VkRenderPassAttachmentBeginInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassDescription2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkSubpassDescriptionFlags
            val mutable public pipelineBindPoint : VkPipelineBindPoint
            val mutable public viewMask : uint32
            val mutable public inputAttachmentCount : uint32
            val mutable public pInputAttachments : nativeptr<VkAttachmentReference2>
            val mutable public colorAttachmentCount : uint32
            val mutable public pColorAttachments : nativeptr<VkAttachmentReference2>
            val mutable public pResolveAttachments : nativeptr<VkAttachmentReference2>
            val mutable public pDepthStencilAttachment : nativeptr<VkAttachmentReference2>
            val mutable public preserveAttachmentCount : uint32
            val mutable public pPreserveAttachments : nativeptr<uint32>

            new(pNext : nativeint, flags : VkSubpassDescriptionFlags, pipelineBindPoint : VkPipelineBindPoint, viewMask : uint32, inputAttachmentCount : uint32, pInputAttachments : nativeptr<VkAttachmentReference2>, colorAttachmentCount : uint32, pColorAttachments : nativeptr<VkAttachmentReference2>, pResolveAttachments : nativeptr<VkAttachmentReference2>, pDepthStencilAttachment : nativeptr<VkAttachmentReference2>, preserveAttachmentCount : uint32, pPreserveAttachments : nativeptr<uint32>) =
                {
                    sType = 1000109002u
                    pNext = pNext
                    flags = flags
                    pipelineBindPoint = pipelineBindPoint
                    viewMask = viewMask
                    inputAttachmentCount = inputAttachmentCount
                    pInputAttachments = pInputAttachments
                    colorAttachmentCount = colorAttachmentCount
                    pColorAttachments = pColorAttachments
                    pResolveAttachments = pResolveAttachments
                    pDepthStencilAttachment = pDepthStencilAttachment
                    preserveAttachmentCount = preserveAttachmentCount
                    pPreserveAttachments = pPreserveAttachments
                }

            new(flags : VkSubpassDescriptionFlags, pipelineBindPoint : VkPipelineBindPoint, viewMask : uint32, inputAttachmentCount : uint32, pInputAttachments : nativeptr<VkAttachmentReference2>, colorAttachmentCount : uint32, pColorAttachments : nativeptr<VkAttachmentReference2>, pResolveAttachments : nativeptr<VkAttachmentReference2>, pDepthStencilAttachment : nativeptr<VkAttachmentReference2>, preserveAttachmentCount : uint32, pPreserveAttachments : nativeptr<uint32>) =
                VkSubpassDescription2(Unchecked.defaultof<nativeint>, flags, pipelineBindPoint, viewMask, inputAttachmentCount, pInputAttachments, colorAttachmentCount, pColorAttachments, pResolveAttachments, pDepthStencilAttachment, preserveAttachmentCount, pPreserveAttachments)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkSubpassDescriptionFlags> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.viewMask = Unchecked.defaultof<uint32> && x.inputAttachmentCount = Unchecked.defaultof<uint32> && x.pInputAttachments = Unchecked.defaultof<nativeptr<VkAttachmentReference2>> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachments = Unchecked.defaultof<nativeptr<VkAttachmentReference2>> && x.pResolveAttachments = Unchecked.defaultof<nativeptr<VkAttachmentReference2>> && x.pDepthStencilAttachment = Unchecked.defaultof<nativeptr<VkAttachmentReference2>> && x.preserveAttachmentCount = Unchecked.defaultof<uint32> && x.pPreserveAttachments = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkSubpassDescription2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSubpassDescriptionFlags>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentReference2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentReference2>>, Unchecked.defaultof<nativeptr<VkAttachmentReference2>>, Unchecked.defaultof<nativeptr<VkAttachmentReference2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                    sprintf "viewMask = %A" x.viewMask
                    sprintf "inputAttachmentCount = %A" x.inputAttachmentCount
                    sprintf "pInputAttachments = %A" x.pInputAttachments
                    sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                    sprintf "pColorAttachments = %A" x.pColorAttachments
                    sprintf "pResolveAttachments = %A" x.pResolveAttachments
                    sprintf "pDepthStencilAttachment = %A" x.pDepthStencilAttachment
                    sprintf "preserveAttachmentCount = %A" x.preserveAttachmentCount
                    sprintf "pPreserveAttachments = %A" x.pPreserveAttachments
                ] |> sprintf "VkSubpassDescription2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassDependency2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcSubpass : uint32
            val mutable public dstSubpass : uint32
            val mutable public srcStageMask : VkPipelineStageFlags
            val mutable public dstStageMask : VkPipelineStageFlags
            val mutable public srcAccessMask : VkAccessFlags
            val mutable public dstAccessMask : VkAccessFlags
            val mutable public dependencyFlags : VkDependencyFlags
            val mutable public viewOffset : int

            new(pNext : nativeint, srcSubpass : uint32, dstSubpass : uint32, srcStageMask : VkPipelineStageFlags, dstStageMask : VkPipelineStageFlags, srcAccessMask : VkAccessFlags, dstAccessMask : VkAccessFlags, dependencyFlags : VkDependencyFlags, viewOffset : int) =
                {
                    sType = 1000109003u
                    pNext = pNext
                    srcSubpass = srcSubpass
                    dstSubpass = dstSubpass
                    srcStageMask = srcStageMask
                    dstStageMask = dstStageMask
                    srcAccessMask = srcAccessMask
                    dstAccessMask = dstAccessMask
                    dependencyFlags = dependencyFlags
                    viewOffset = viewOffset
                }

            new(srcSubpass : uint32, dstSubpass : uint32, srcStageMask : VkPipelineStageFlags, dstStageMask : VkPipelineStageFlags, srcAccessMask : VkAccessFlags, dstAccessMask : VkAccessFlags, dependencyFlags : VkDependencyFlags, viewOffset : int) =
                VkSubpassDependency2(Unchecked.defaultof<nativeint>, srcSubpass, dstSubpass, srcStageMask, dstStageMask, srcAccessMask, dstAccessMask, dependencyFlags, viewOffset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcSubpass = Unchecked.defaultof<uint32> && x.dstSubpass = Unchecked.defaultof<uint32> && x.srcStageMask = Unchecked.defaultof<VkPipelineStageFlags> && x.dstStageMask = Unchecked.defaultof<VkPipelineStageFlags> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags> && x.dependencyFlags = Unchecked.defaultof<VkDependencyFlags> && x.viewOffset = Unchecked.defaultof<int>

            static member Empty =
                VkSubpassDependency2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPipelineStageFlags>, Unchecked.defaultof<VkPipelineStageFlags>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkAccessFlags>, Unchecked.defaultof<VkDependencyFlags>, Unchecked.defaultof<int>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcSubpass = %A" x.srcSubpass
                    sprintf "dstSubpass = %A" x.dstSubpass
                    sprintf "srcStageMask = %A" x.srcStageMask
                    sprintf "dstStageMask = %A" x.dstStageMask
                    sprintf "srcAccessMask = %A" x.srcAccessMask
                    sprintf "dstAccessMask = %A" x.dstAccessMask
                    sprintf "dependencyFlags = %A" x.dependencyFlags
                    sprintf "viewOffset = %A" x.viewOffset
                ] |> sprintf "VkSubpassDependency2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassCreateInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkRenderPassCreateFlags
            val mutable public attachmentCount : uint32
            val mutable public pAttachments : nativeptr<VkAttachmentDescription2>
            val mutable public subpassCount : uint32
            val mutable public pSubpasses : nativeptr<VkSubpassDescription2>
            val mutable public dependencyCount : uint32
            val mutable public pDependencies : nativeptr<VkSubpassDependency2>
            val mutable public correlatedViewMaskCount : uint32
            val mutable public pCorrelatedViewMasks : nativeptr<uint32>

            new(pNext : nativeint, flags : VkRenderPassCreateFlags, attachmentCount : uint32, pAttachments : nativeptr<VkAttachmentDescription2>, subpassCount : uint32, pSubpasses : nativeptr<VkSubpassDescription2>, dependencyCount : uint32, pDependencies : nativeptr<VkSubpassDependency2>, correlatedViewMaskCount : uint32, pCorrelatedViewMasks : nativeptr<uint32>) =
                {
                    sType = 1000109004u
                    pNext = pNext
                    flags = flags
                    attachmentCount = attachmentCount
                    pAttachments = pAttachments
                    subpassCount = subpassCount
                    pSubpasses = pSubpasses
                    dependencyCount = dependencyCount
                    pDependencies = pDependencies
                    correlatedViewMaskCount = correlatedViewMaskCount
                    pCorrelatedViewMasks = pCorrelatedViewMasks
                }

            new(flags : VkRenderPassCreateFlags, attachmentCount : uint32, pAttachments : nativeptr<VkAttachmentDescription2>, subpassCount : uint32, pSubpasses : nativeptr<VkSubpassDescription2>, dependencyCount : uint32, pDependencies : nativeptr<VkSubpassDependency2>, correlatedViewMaskCount : uint32, pCorrelatedViewMasks : nativeptr<uint32>) =
                VkRenderPassCreateInfo2(Unchecked.defaultof<nativeint>, flags, attachmentCount, pAttachments, subpassCount, pSubpasses, dependencyCount, pDependencies, correlatedViewMaskCount, pCorrelatedViewMasks)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkRenderPassCreateFlags> && x.attachmentCount = Unchecked.defaultof<uint32> && x.pAttachments = Unchecked.defaultof<nativeptr<VkAttachmentDescription2>> && x.subpassCount = Unchecked.defaultof<uint32> && x.pSubpasses = Unchecked.defaultof<nativeptr<VkSubpassDescription2>> && x.dependencyCount = Unchecked.defaultof<uint32> && x.pDependencies = Unchecked.defaultof<nativeptr<VkSubpassDependency2>> && x.correlatedViewMaskCount = Unchecked.defaultof<uint32> && x.pCorrelatedViewMasks = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkRenderPassCreateInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderPassCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentDescription2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSubpassDescription2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSubpassDependency2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "attachmentCount = %A" x.attachmentCount
                    sprintf "pAttachments = %A" x.pAttachments
                    sprintf "subpassCount = %A" x.subpassCount
                    sprintf "pSubpasses = %A" x.pSubpasses
                    sprintf "dependencyCount = %A" x.dependencyCount
                    sprintf "pDependencies = %A" x.pDependencies
                    sprintf "correlatedViewMaskCount = %A" x.correlatedViewMaskCount
                    sprintf "pCorrelatedViewMasks = %A" x.pCorrelatedViewMasks
                ] |> sprintf "VkRenderPassCreateInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSamplerReductionModeCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public reductionMode : VkSamplerReductionMode

            new(pNext : nativeint, reductionMode : VkSamplerReductionMode) =
                {
                    sType = 1000130001u
                    pNext = pNext
                    reductionMode = reductionMode
                }

            new(reductionMode : VkSamplerReductionMode) =
                VkSamplerReductionModeCreateInfo(Unchecked.defaultof<nativeint>, reductionMode)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.reductionMode = Unchecked.defaultof<VkSamplerReductionMode>

            static member Empty =
                VkSamplerReductionModeCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSamplerReductionMode>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "reductionMode = %A" x.reductionMode
                ] |> sprintf "VkSamplerReductionModeCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSemaphoreSignalInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphore : VkSemaphore
            val mutable public value : uint64

            new(pNext : nativeint, semaphore : VkSemaphore, value : uint64) =
                {
                    sType = 1000207005u
                    pNext = pNext
                    semaphore = semaphore
                    value = value
                }

            new(semaphore : VkSemaphore, value : uint64) =
                VkSemaphoreSignalInfo(Unchecked.defaultof<nativeint>, semaphore, value)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.value = Unchecked.defaultof<uint64>

            static member Empty =
                VkSemaphoreSignalInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphore = %A" x.semaphore
                    sprintf "value = %A" x.value
                ] |> sprintf "VkSemaphoreSignalInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSemaphoreTypeCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphoreType : VkSemaphoreType
            val mutable public initialValue : uint64

            new(pNext : nativeint, semaphoreType : VkSemaphoreType, initialValue : uint64) =
                {
                    sType = 1000207002u
                    pNext = pNext
                    semaphoreType = semaphoreType
                    initialValue = initialValue
                }

            new(semaphoreType : VkSemaphoreType, initialValue : uint64) =
                VkSemaphoreTypeCreateInfo(Unchecked.defaultof<nativeint>, semaphoreType, initialValue)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphoreType = Unchecked.defaultof<VkSemaphoreType> && x.initialValue = Unchecked.defaultof<uint64>

            static member Empty =
                VkSemaphoreTypeCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphoreType>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphoreType = %A" x.semaphoreType
                    sprintf "initialValue = %A" x.initialValue
                ] |> sprintf "VkSemaphoreTypeCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSemaphoreWaitInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkSemaphoreWaitFlags
            val mutable public semaphoreCount : uint32
            val mutable public pSemaphores : nativeptr<VkSemaphore>
            val mutable public pValues : nativeptr<uint64>

            new(pNext : nativeint, flags : VkSemaphoreWaitFlags, semaphoreCount : uint32, pSemaphores : nativeptr<VkSemaphore>, pValues : nativeptr<uint64>) =
                {
                    sType = 1000207004u
                    pNext = pNext
                    flags = flags
                    semaphoreCount = semaphoreCount
                    pSemaphores = pSemaphores
                    pValues = pValues
                }

            new(flags : VkSemaphoreWaitFlags, semaphoreCount : uint32, pSemaphores : nativeptr<VkSemaphore>, pValues : nativeptr<uint64>) =
                VkSemaphoreWaitInfo(Unchecked.defaultof<nativeint>, flags, semaphoreCount, pSemaphores, pValues)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkSemaphoreWaitFlags> && x.semaphoreCount = Unchecked.defaultof<uint32> && x.pSemaphores = Unchecked.defaultof<nativeptr<VkSemaphore>> && x.pValues = Unchecked.defaultof<nativeptr<uint64>>

            static member Empty =
                VkSemaphoreWaitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphoreWaitFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphore>>, Unchecked.defaultof<nativeptr<uint64>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "semaphoreCount = %A" x.semaphoreCount
                    sprintf "pSemaphores = %A" x.pSemaphores
                    sprintf "pValues = %A" x.pValues
                ] |> sprintf "VkSemaphoreWaitInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassBeginInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public contents : VkSubpassContents

            new(pNext : nativeint, contents : VkSubpassContents) =
                {
                    sType = 1000109005u
                    pNext = pNext
                    contents = contents
                }

            new(contents : VkSubpassContents) =
                VkSubpassBeginInfo(Unchecked.defaultof<nativeint>, contents)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.contents = Unchecked.defaultof<VkSubpassContents>

            static member Empty =
                VkSubpassBeginInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSubpassContents>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "contents = %A" x.contents
                ] |> sprintf "VkSubpassBeginInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassDescriptionDepthStencilResolve =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public depthResolveMode : VkResolveModeFlags
            val mutable public stencilResolveMode : VkResolveModeFlags
            val mutable public pDepthStencilResolveAttachment : nativeptr<VkAttachmentReference2>

            new(pNext : nativeint, depthResolveMode : VkResolveModeFlags, stencilResolveMode : VkResolveModeFlags, pDepthStencilResolveAttachment : nativeptr<VkAttachmentReference2>) =
                {
                    sType = 1000199001u
                    pNext = pNext
                    depthResolveMode = depthResolveMode
                    stencilResolveMode = stencilResolveMode
                    pDepthStencilResolveAttachment = pDepthStencilResolveAttachment
                }

            new(depthResolveMode : VkResolveModeFlags, stencilResolveMode : VkResolveModeFlags, pDepthStencilResolveAttachment : nativeptr<VkAttachmentReference2>) =
                VkSubpassDescriptionDepthStencilResolve(Unchecked.defaultof<nativeint>, depthResolveMode, stencilResolveMode, pDepthStencilResolveAttachment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.depthResolveMode = Unchecked.defaultof<VkResolveModeFlags> && x.stencilResolveMode = Unchecked.defaultof<VkResolveModeFlags> && x.pDepthStencilResolveAttachment = Unchecked.defaultof<nativeptr<VkAttachmentReference2>>

            static member Empty =
                VkSubpassDescriptionDepthStencilResolve(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<nativeptr<VkAttachmentReference2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "depthResolveMode = %A" x.depthResolveMode
                    sprintf "stencilResolveMode = %A" x.stencilResolveMode
                    sprintf "pDepthStencilResolveAttachment = %A" x.pDepthStencilResolveAttachment
                ] |> sprintf "VkSubpassDescriptionDepthStencilResolve { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassEndInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint

            new(pNext : nativeint) =
                {
                    sType = 1000109006u
                    pNext = pNext
                }

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint>

            static member Empty =
                VkSubpassEndInfo(Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                ] |> sprintf "VkSubpassEndInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkTimelineSemaphoreSubmitInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public waitSemaphoreValueCount : uint32
            val mutable public pWaitSemaphoreValues : nativeptr<uint64>
            val mutable public signalSemaphoreValueCount : uint32
            val mutable public pSignalSemaphoreValues : nativeptr<uint64>

            new(pNext : nativeint, waitSemaphoreValueCount : uint32, pWaitSemaphoreValues : nativeptr<uint64>, signalSemaphoreValueCount : uint32, pSignalSemaphoreValues : nativeptr<uint64>) =
                {
                    sType = 1000207003u
                    pNext = pNext
                    waitSemaphoreValueCount = waitSemaphoreValueCount
                    pWaitSemaphoreValues = pWaitSemaphoreValues
                    signalSemaphoreValueCount = signalSemaphoreValueCount
                    pSignalSemaphoreValues = pSignalSemaphoreValues
                }

            new(waitSemaphoreValueCount : uint32, pWaitSemaphoreValues : nativeptr<uint64>, signalSemaphoreValueCount : uint32, pSignalSemaphoreValues : nativeptr<uint64>) =
                VkTimelineSemaphoreSubmitInfo(Unchecked.defaultof<nativeint>, waitSemaphoreValueCount, pWaitSemaphoreValues, signalSemaphoreValueCount, pSignalSemaphoreValues)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.waitSemaphoreValueCount = Unchecked.defaultof<uint32> && x.pWaitSemaphoreValues = Unchecked.defaultof<nativeptr<uint64>> && x.signalSemaphoreValueCount = Unchecked.defaultof<uint32> && x.pSignalSemaphoreValues = Unchecked.defaultof<nativeptr<uint64>>

            static member Empty =
                VkTimelineSemaphoreSubmitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint64>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint64>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "waitSemaphoreValueCount = %A" x.waitSemaphoreValueCount
                    sprintf "pWaitSemaphoreValues = %A" x.pWaitSemaphoreValues
                    sprintf "signalSemaphoreValueCount = %A" x.signalSemaphoreValueCount
                    sprintf "pSignalSemaphoreValues = %A" x.pSignalSemaphoreValues
                ] |> sprintf "VkTimelineSemaphoreSubmitInfo { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkBufferCreateFlags with
              static member inline DeviceAddressCaptureReplayBit = unbox<VkBufferCreateFlags> 0x00000010
         type VkBufferUsageFlags with
              static member inline ShaderDeviceAddressBit = unbox<VkBufferUsageFlags> 0x00020000
         type VkDescriptorPoolCreateFlags with
              static member inline UpdateAfterBindBit = unbox<VkDescriptorPoolCreateFlags> 0x00000002
         type VkDescriptorSetLayoutCreateFlags with
              static member inline UpdateAfterBindPoolBit = unbox<VkDescriptorSetLayoutCreateFlags> 0x00000002
         type VkFormatFeatureFlags with
              /// Format can be used with min/max reduction filtering
              static member inline SampledImageFilterMinmaxBit = unbox<VkFormatFeatureFlags> 0x00010000
         type VkFramebufferCreateFlags with
              static member inline ImagelessBit = unbox<VkFramebufferCreateFlags> 0x00000001
         type VkImageLayout with
              static member inline DepthAttachmentOptimal = unbox<VkImageLayout> 1000241000
              static member inline DepthReadOnlyOptimal = unbox<VkImageLayout> 1000241001
              static member inline StencilAttachmentOptimal = unbox<VkImageLayout> 1000241002
              static member inline StencilReadOnlyOptimal = unbox<VkImageLayout> 1000241003
         type VkMemoryAllocateFlags with
              static member inline DeviceAddressBit = unbox<VkMemoryAllocateFlags> 0x00000002
              static member inline DeviceAddressCaptureReplayBit = unbox<VkMemoryAllocateFlags> 0x00000004
         type VkResult with
              static member inline ErrorFragmentation = unbox<VkResult> -1000161000
              static member inline ErrorInvalidOpaqueCaptureAddress = unbox<VkResult> -1000257000
         type VkSamplerAddressMode with
              /// No need to add an extnumber attribute, since this uses a core enum value
              static member inline MirrorClampToEdge = unbox<VkSamplerAddressMode> 4

    module VkRaw =
        open VkRaw

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32 maxDrawCount, uint32 stride)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32 firstQuery, uint32 queryCount)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64* pValue)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkWaitSemaphores(VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, uint64 timeout)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkSignalSemaphore(VkDevice device, VkSemaphoreSignalInfo* pSignalInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, VkBufferDeviceAddressInfo* pInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern uint64 vkGetBufferOpaqueCaptureAddress(VkDevice device, VkBufferDeviceAddressInfo* pInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern uint64 vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)



module Vulkan13 =
    open Vulkan11
    open Vulkan12


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPrivateDataSlot =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkPrivateDataSlot(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<Flags>]
    type VkPipelineCreationFeedbackFlags =
        | All = 7
        | None = 0
        | ValidBit = 0x00000001
        | ApplicationPipelineCacheHitBit = 0x00000002
        | BasePipelineAccelerationBit = 0x00000004

    [<Flags>]
    type VkToolPurposeFlags =
        | All = 31
        | None = 0
        | ValidationBit = 0x00000001
        | ProfilingBit = 0x00000002
        | TracingBit = 0x00000004
        | AdditionalFeaturesBit = 0x00000008
        | ModifyingFeaturesBit = 0x00000010

    [<Flags>]
    type VkPrivateDataSlotCreateFlags =
        | All = 0
        | None = 0

    [<Flags>]
    type VkPipelineStageFlags2 =
        | All = 131071
        | PipelineStage2None = 0
        | PipelineStage2TopOfPipeBit = 0x00000001
        | PipelineStage2DrawIndirectBit = 0x00000002
        | PipelineStage2VertexInputBit = 0x00000004
        | PipelineStage2VertexShaderBit = 0x00000008
        | PipelineStage2TessellationControlShaderBit = 0x00000010
        | PipelineStage2TessellationEvaluationShaderBit = 0x00000020
        | PipelineStage2GeometryShaderBit = 0x00000040
        | PipelineStage2FragmentShaderBit = 0x00000080
        | PipelineStage2EarlyFragmentTestsBit = 0x00000100
        | PipelineStage2LateFragmentTestsBit = 0x00000200
        | PipelineStage2ColorAttachmentOutputBit = 0x00000400
        | PipelineStage2ComputeShaderBit = 0x00000800
        | PipelineStage2AllTransferBit = 0x00001000
        | PipelineStage2TransferBit = 0x00001000
        | PipelineStage2BottomOfPipeBit = 0x00002000
        | PipelineStage2HostBit = 0x00004000
        | PipelineStage2AllGraphicsBit = 0x00008000
        | PipelineStage2AllCommandsBit = 0x00010000
        | PipelineStage2CopyBit = 0x00000001
        | PipelineStage2ResolveBit = 0x00000002
        | PipelineStage2BlitBit = 0x00000004
        | PipelineStage2ClearBit = 0x00000008
        | PipelineStage2IndexInputBit = 0x00000010
        | PipelineStage2VertexAttributeInputBit = 0x00000020
        | PipelineStage2PreRasterizationShadersBit = 0x00000040

    [<Flags>]
    type VkAccessFlags2 =
        | All = 131071
        | Access2None = 0
        | Access2IndirectCommandReadBit = 0x00000001
        | Access2IndexReadBit = 0x00000002
        | Access2VertexAttributeReadBit = 0x00000004
        | Access2UniformReadBit = 0x00000008
        | Access2InputAttachmentReadBit = 0x00000010
        | Access2ShaderReadBit = 0x00000020
        | Access2ShaderWriteBit = 0x00000040
        | Access2ColorAttachmentReadBit = 0x00000080
        | Access2ColorAttachmentWriteBit = 0x00000100
        | Access2DepthStencilAttachmentReadBit = 0x00000200
        | Access2DepthStencilAttachmentWriteBit = 0x00000400
        | Access2TransferReadBit = 0x00000800
        | Access2TransferWriteBit = 0x00001000
        | Access2HostReadBit = 0x00002000
        | Access2HostWriteBit = 0x00004000
        | Access2MemoryReadBit = 0x00008000
        | Access2MemoryWriteBit = 0x00010000
        | Access2ShaderSampledReadBit = 0x00000001
        | Access2ShaderStorageReadBit = 0x00000002
        | Access2ShaderStorageWriteBit = 0x00000004

    [<Flags>]
    type VkSubmitFlags =
        | All = 1
        | None = 0
        | ProtectedBit = 0x00000001

    [<Flags>]
    type VkRenderingFlags =
        | All = 7
        | None = 0
        | ContentsSecondaryCommandBuffersBit = 0x00000001
        | SuspendingBit = 0x00000002
        | ResumingBit = 0x00000004

    [<Flags>]
    type VkFormatFeatureFlags2 =
        | All = -2130706433
        | None = 0
        | FormatFeature2SampledImageBit = 0x00000001
        | FormatFeature2StorageImageBit = 0x00000002
        | FormatFeature2StorageImageAtomicBit = 0x00000004
        | FormatFeature2UniformTexelBufferBit = 0x00000008
        | FormatFeature2StorageTexelBufferBit = 0x00000010
        | FormatFeature2StorageTexelBufferAtomicBit = 0x00000020
        | FormatFeature2VertexBufferBit = 0x00000040
        | FormatFeature2ColorAttachmentBit = 0x00000080
        | FormatFeature2ColorAttachmentBlendBit = 0x00000100
        | FormatFeature2DepthStencilAttachmentBit = 0x00000200
        | FormatFeature2BlitSrcBit = 0x00000400
        | FormatFeature2BlitDstBit = 0x00000800
        | FormatFeature2SampledImageFilterLinearBit = 0x00001000
        | FormatFeature2SampledImageFilterCubicBit = 0x00002000
        | FormatFeature2TransferSrcBit = 0x00004000
        | FormatFeature2TransferDstBit = 0x00008000
        | FormatFeature2SampledImageFilterMinmaxBit = 0x00010000
        | FormatFeature2MidpointChromaSamplesBit = 0x00020000
        | FormatFeature2SampledImageYcbcrConversionLinearFilterBit = 0x00040000
        | FormatFeature2SampledImageYcbcrConversionSeparateReconstructionFilterBit = 0x00080000
        | FormatFeature2SampledImageYcbcrConversionChromaReconstructionExplicitBit = 0x00100000
        | FormatFeature2SampledImageYcbcrConversionChromaReconstructionExplicitForceableBit = 0x00200000
        | FormatFeature2DisjointBit = 0x00400000
        | FormatFeature2CositedChromaSamplesBit = 0x00800000
        | FormatFeature2StorageReadWithoutFormatBit = 0x80000000
        | FormatFeature2StorageWriteWithoutFormatBit = 0x00000001
        | FormatFeature2SampledImageDepthComparisonBit = 0x00000002


    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageBlit2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcSubresource : VkImageSubresourceLayers
            val mutable public srcOffsets : VkOffset3D_2
            val mutable public dstSubresource : VkImageSubresourceLayers
            val mutable public dstOffsets : VkOffset3D_2

            new(pNext : nativeint, srcSubresource : VkImageSubresourceLayers, srcOffsets : VkOffset3D_2, dstSubresource : VkImageSubresourceLayers, dstOffsets : VkOffset3D_2) =
                {
                    sType = 1000337008u
                    pNext = pNext
                    srcSubresource = srcSubresource
                    srcOffsets = srcOffsets
                    dstSubresource = dstSubresource
                    dstOffsets = dstOffsets
                }

            new(srcSubresource : VkImageSubresourceLayers, srcOffsets : VkOffset3D_2, dstSubresource : VkImageSubresourceLayers, dstOffsets : VkOffset3D_2) =
                VkImageBlit2(Unchecked.defaultof<nativeint>, srcSubresource, srcOffsets, dstSubresource, dstOffsets)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.srcOffsets = Unchecked.defaultof<VkOffset3D_2> && x.dstSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.dstOffsets = Unchecked.defaultof<VkOffset3D_2>

            static member Empty =
                VkImageBlit2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D_2>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D_2>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcSubresource = %A" x.srcSubresource
                    sprintf "srcOffsets = %A" x.srcOffsets
                    sprintf "dstSubresource = %A" x.dstSubresource
                    sprintf "dstOffsets = %A" x.dstOffsets
                ] |> sprintf "VkImageBlit2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBlitImageInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcImage : VkImage
            val mutable public srcImageLayout : VkImageLayout
            val mutable public dstImage : VkImage
            val mutable public dstImageLayout : VkImageLayout
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkImageBlit2>
            val mutable public filter : VkFilter

            new(pNext : nativeint, srcImage : VkImage, srcImageLayout : VkImageLayout, dstImage : VkImage, dstImageLayout : VkImageLayout, regionCount : uint32, pRegions : nativeptr<VkImageBlit2>, filter : VkFilter) =
                {
                    sType = 1000337004u
                    pNext = pNext
                    srcImage = srcImage
                    srcImageLayout = srcImageLayout
                    dstImage = dstImage
                    dstImageLayout = dstImageLayout
                    regionCount = regionCount
                    pRegions = pRegions
                    filter = filter
                }

            new(srcImage : VkImage, srcImageLayout : VkImageLayout, dstImage : VkImage, dstImageLayout : VkImageLayout, regionCount : uint32, pRegions : nativeptr<VkImageBlit2>, filter : VkFilter) =
                VkBlitImageInfo2(Unchecked.defaultof<nativeint>, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcImage = Unchecked.defaultof<VkImage> && x.srcImageLayout = Unchecked.defaultof<VkImageLayout> && x.dstImage = Unchecked.defaultof<VkImage> && x.dstImageLayout = Unchecked.defaultof<VkImageLayout> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkImageBlit2>> && x.filter = Unchecked.defaultof<VkFilter>

            static member Empty =
                VkBlitImageInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageBlit2>>, Unchecked.defaultof<VkFilter>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcImage = %A" x.srcImage
                    sprintf "srcImageLayout = %A" x.srcImageLayout
                    sprintf "dstImage = %A" x.dstImage
                    sprintf "dstImageLayout = %A" x.dstImageLayout
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                    sprintf "filter = %A" x.filter
                ] |> sprintf "VkBlitImageInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferCopy2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcOffset : VkDeviceSize
            val mutable public dstOffset : VkDeviceSize
            val mutable public size : VkDeviceSize

            new(pNext : nativeint, srcOffset : VkDeviceSize, dstOffset : VkDeviceSize, size : VkDeviceSize) =
                {
                    sType = 1000337006u
                    pNext = pNext
                    srcOffset = srcOffset
                    dstOffset = dstOffset
                    size = size
                }

            new(srcOffset : VkDeviceSize, dstOffset : VkDeviceSize, size : VkDeviceSize) =
                VkBufferCopy2(Unchecked.defaultof<nativeint>, srcOffset, dstOffset, size)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcOffset = Unchecked.defaultof<VkDeviceSize> && x.dstOffset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkBufferCopy2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcOffset = %A" x.srcOffset
                    sprintf "dstOffset = %A" x.dstOffset
                    sprintf "size = %A" x.size
                ] |> sprintf "VkBufferCopy2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferImageCopy2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public bufferOffset : VkDeviceSize
            val mutable public bufferRowLength : uint32
            val mutable public bufferImageHeight : uint32
            val mutable public imageSubresource : VkImageSubresourceLayers
            val mutable public imageOffset : VkOffset3D
            val mutable public imageExtent : VkExtent3D

            new(pNext : nativeint, bufferOffset : VkDeviceSize, bufferRowLength : uint32, bufferImageHeight : uint32, imageSubresource : VkImageSubresourceLayers, imageOffset : VkOffset3D, imageExtent : VkExtent3D) =
                {
                    sType = 1000337009u
                    pNext = pNext
                    bufferOffset = bufferOffset
                    bufferRowLength = bufferRowLength
                    bufferImageHeight = bufferImageHeight
                    imageSubresource = imageSubresource
                    imageOffset = imageOffset
                    imageExtent = imageExtent
                }

            new(bufferOffset : VkDeviceSize, bufferRowLength : uint32, bufferImageHeight : uint32, imageSubresource : VkImageSubresourceLayers, imageOffset : VkOffset3D, imageExtent : VkExtent3D) =
                VkBufferImageCopy2(Unchecked.defaultof<nativeint>, bufferOffset, bufferRowLength, bufferImageHeight, imageSubresource, imageOffset, imageExtent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.bufferOffset = Unchecked.defaultof<VkDeviceSize> && x.bufferRowLength = Unchecked.defaultof<uint32> && x.bufferImageHeight = Unchecked.defaultof<uint32> && x.imageSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.imageOffset = Unchecked.defaultof<VkOffset3D> && x.imageExtent = Unchecked.defaultof<VkExtent3D>

            static member Empty =
                VkBufferImageCopy2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "bufferOffset = %A" x.bufferOffset
                    sprintf "bufferRowLength = %A" x.bufferRowLength
                    sprintf "bufferImageHeight = %A" x.bufferImageHeight
                    sprintf "imageSubresource = %A" x.imageSubresource
                    sprintf "imageOffset = %A" x.imageOffset
                    sprintf "imageExtent = %A" x.imageExtent
                ] |> sprintf "VkBufferImageCopy2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferMemoryBarrier2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcStageMask : VkPipelineStageFlags2
            val mutable public srcAccessMask : VkAccessFlags2
            val mutable public dstStageMask : VkPipelineStageFlags2
            val mutable public dstAccessMask : VkAccessFlags2
            val mutable public srcQueueFamilyIndex : uint32
            val mutable public dstQueueFamilyIndex : uint32
            val mutable public buffer : VkBuffer
            val mutable public offset : VkDeviceSize
            val mutable public size : VkDeviceSize

            new(pNext : nativeint, srcStageMask : VkPipelineStageFlags2, srcAccessMask : VkAccessFlags2, dstStageMask : VkPipelineStageFlags2, dstAccessMask : VkAccessFlags2, srcQueueFamilyIndex : uint32, dstQueueFamilyIndex : uint32, buffer : VkBuffer, offset : VkDeviceSize, size : VkDeviceSize) =
                {
                    sType = 1000314001u
                    pNext = pNext
                    srcStageMask = srcStageMask
                    srcAccessMask = srcAccessMask
                    dstStageMask = dstStageMask
                    dstAccessMask = dstAccessMask
                    srcQueueFamilyIndex = srcQueueFamilyIndex
                    dstQueueFamilyIndex = dstQueueFamilyIndex
                    buffer = buffer
                    offset = offset
                    size = size
                }

            new(srcStageMask : VkPipelineStageFlags2, srcAccessMask : VkAccessFlags2, dstStageMask : VkPipelineStageFlags2, dstAccessMask : VkAccessFlags2, srcQueueFamilyIndex : uint32, dstQueueFamilyIndex : uint32, buffer : VkBuffer, offset : VkDeviceSize, size : VkDeviceSize) =
                VkBufferMemoryBarrier2(Unchecked.defaultof<nativeint>, srcStageMask, srcAccessMask, dstStageMask, dstAccessMask, srcQueueFamilyIndex, dstQueueFamilyIndex, buffer, offset, size)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcStageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags2> && x.dstStageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags2> && x.srcQueueFamilyIndex = Unchecked.defaultof<uint32> && x.dstQueueFamilyIndex = Unchecked.defaultof<uint32> && x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkBufferMemoryBarrier2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<VkAccessFlags2>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<VkAccessFlags2>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcStageMask = %A" x.srcStageMask
                    sprintf "srcAccessMask = %A" x.srcAccessMask
                    sprintf "dstStageMask = %A" x.dstStageMask
                    sprintf "dstAccessMask = %A" x.dstAccessMask
                    sprintf "srcQueueFamilyIndex = %A" x.srcQueueFamilyIndex
                    sprintf "dstQueueFamilyIndex = %A" x.dstQueueFamilyIndex
                    sprintf "buffer = %A" x.buffer
                    sprintf "offset = %A" x.offset
                    sprintf "size = %A" x.size
                ] |> sprintf "VkBufferMemoryBarrier2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCommandBufferInheritanceRenderingInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkRenderingFlags
            val mutable public viewMask : uint32
            val mutable public colorAttachmentCount : uint32
            val mutable public pColorAttachmentFormats : nativeptr<VkFormat>
            val mutable public depthAttachmentFormat : VkFormat
            val mutable public stencilAttachmentFormat : VkFormat
            val mutable public rasterizationSamples : VkSampleCountFlags

            new(pNext : nativeint, flags : VkRenderingFlags, viewMask : uint32, colorAttachmentCount : uint32, pColorAttachmentFormats : nativeptr<VkFormat>, depthAttachmentFormat : VkFormat, stencilAttachmentFormat : VkFormat, rasterizationSamples : VkSampleCountFlags) =
                {
                    sType = 1000044004u
                    pNext = pNext
                    flags = flags
                    viewMask = viewMask
                    colorAttachmentCount = colorAttachmentCount
                    pColorAttachmentFormats = pColorAttachmentFormats
                    depthAttachmentFormat = depthAttachmentFormat
                    stencilAttachmentFormat = stencilAttachmentFormat
                    rasterizationSamples = rasterizationSamples
                }

            new(flags : VkRenderingFlags, viewMask : uint32, colorAttachmentCount : uint32, pColorAttachmentFormats : nativeptr<VkFormat>, depthAttachmentFormat : VkFormat, stencilAttachmentFormat : VkFormat, rasterizationSamples : VkSampleCountFlags) =
                VkCommandBufferInheritanceRenderingInfo(Unchecked.defaultof<nativeint>, flags, viewMask, colorAttachmentCount, pColorAttachmentFormats, depthAttachmentFormat, stencilAttachmentFormat, rasterizationSamples)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkRenderingFlags> && x.viewMask = Unchecked.defaultof<uint32> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachmentFormats = Unchecked.defaultof<nativeptr<VkFormat>> && x.depthAttachmentFormat = Unchecked.defaultof<VkFormat> && x.stencilAttachmentFormat = Unchecked.defaultof<VkFormat> && x.rasterizationSamples = Unchecked.defaultof<VkSampleCountFlags>

            static member Empty =
                VkCommandBufferInheritanceRenderingInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderingFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkFormat>>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkSampleCountFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "viewMask = %A" x.viewMask
                    sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                    sprintf "pColorAttachmentFormats = %A" x.pColorAttachmentFormats
                    sprintf "depthAttachmentFormat = %A" x.depthAttachmentFormat
                    sprintf "stencilAttachmentFormat = %A" x.stencilAttachmentFormat
                    sprintf "rasterizationSamples = %A" x.rasterizationSamples
                ] |> sprintf "VkCommandBufferInheritanceRenderingInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCommandBufferSubmitInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public commandBuffer : VkCommandBuffer
            val mutable public deviceMask : uint32

            new(pNext : nativeint, commandBuffer : VkCommandBuffer, deviceMask : uint32) =
                {
                    sType = 1000314006u
                    pNext = pNext
                    commandBuffer = commandBuffer
                    deviceMask = deviceMask
                }

            new(commandBuffer : VkCommandBuffer, deviceMask : uint32) =
                VkCommandBufferSubmitInfo(Unchecked.defaultof<nativeint>, commandBuffer, deviceMask)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.commandBuffer = Unchecked.defaultof<VkCommandBuffer> && x.deviceMask = Unchecked.defaultof<uint32>

            static member Empty =
                VkCommandBufferSubmitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCommandBuffer>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "commandBuffer = %A" x.commandBuffer
                    sprintf "deviceMask = %A" x.deviceMask
                ] |> sprintf "VkCommandBufferSubmitInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyBufferInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcBuffer : VkBuffer
            val mutable public dstBuffer : VkBuffer
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkBufferCopy2>

            new(pNext : nativeint, srcBuffer : VkBuffer, dstBuffer : VkBuffer, regionCount : uint32, pRegions : nativeptr<VkBufferCopy2>) =
                {
                    sType = 1000337000u
                    pNext = pNext
                    srcBuffer = srcBuffer
                    dstBuffer = dstBuffer
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(srcBuffer : VkBuffer, dstBuffer : VkBuffer, regionCount : uint32, pRegions : nativeptr<VkBufferCopy2>) =
                VkCopyBufferInfo2(Unchecked.defaultof<nativeint>, srcBuffer, dstBuffer, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcBuffer = Unchecked.defaultof<VkBuffer> && x.dstBuffer = Unchecked.defaultof<VkBuffer> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkBufferCopy2>>

            static member Empty =
                VkCopyBufferInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBufferCopy2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcBuffer = %A" x.srcBuffer
                    sprintf "dstBuffer = %A" x.dstBuffer
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkCopyBufferInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyBufferToImageInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcBuffer : VkBuffer
            val mutable public dstImage : VkImage
            val mutable public dstImageLayout : VkImageLayout
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkBufferImageCopy2>

            new(pNext : nativeint, srcBuffer : VkBuffer, dstImage : VkImage, dstImageLayout : VkImageLayout, regionCount : uint32, pRegions : nativeptr<VkBufferImageCopy2>) =
                {
                    sType = 1000337002u
                    pNext = pNext
                    srcBuffer = srcBuffer
                    dstImage = dstImage
                    dstImageLayout = dstImageLayout
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(srcBuffer : VkBuffer, dstImage : VkImage, dstImageLayout : VkImageLayout, regionCount : uint32, pRegions : nativeptr<VkBufferImageCopy2>) =
                VkCopyBufferToImageInfo2(Unchecked.defaultof<nativeint>, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcBuffer = Unchecked.defaultof<VkBuffer> && x.dstImage = Unchecked.defaultof<VkImage> && x.dstImageLayout = Unchecked.defaultof<VkImageLayout> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkBufferImageCopy2>>

            static member Empty =
                VkCopyBufferToImageInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBufferImageCopy2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcBuffer = %A" x.srcBuffer
                    sprintf "dstImage = %A" x.dstImage
                    sprintf "dstImageLayout = %A" x.dstImageLayout
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkCopyBufferToImageInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageCopy2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcSubresource : VkImageSubresourceLayers
            val mutable public srcOffset : VkOffset3D
            val mutable public dstSubresource : VkImageSubresourceLayers
            val mutable public dstOffset : VkOffset3D
            val mutable public extent : VkExtent3D

            new(pNext : nativeint, srcSubresource : VkImageSubresourceLayers, srcOffset : VkOffset3D, dstSubresource : VkImageSubresourceLayers, dstOffset : VkOffset3D, extent : VkExtent3D) =
                {
                    sType = 1000337007u
                    pNext = pNext
                    srcSubresource = srcSubresource
                    srcOffset = srcOffset
                    dstSubresource = dstSubresource
                    dstOffset = dstOffset
                    extent = extent
                }

            new(srcSubresource : VkImageSubresourceLayers, srcOffset : VkOffset3D, dstSubresource : VkImageSubresourceLayers, dstOffset : VkOffset3D, extent : VkExtent3D) =
                VkImageCopy2(Unchecked.defaultof<nativeint>, srcSubresource, srcOffset, dstSubresource, dstOffset, extent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.srcOffset = Unchecked.defaultof<VkOffset3D> && x.dstSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.dstOffset = Unchecked.defaultof<VkOffset3D> && x.extent = Unchecked.defaultof<VkExtent3D>

            static member Empty =
                VkImageCopy2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcSubresource = %A" x.srcSubresource
                    sprintf "srcOffset = %A" x.srcOffset
                    sprintf "dstSubresource = %A" x.dstSubresource
                    sprintf "dstOffset = %A" x.dstOffset
                    sprintf "extent = %A" x.extent
                ] |> sprintf "VkImageCopy2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyImageInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcImage : VkImage
            val mutable public srcImageLayout : VkImageLayout
            val mutable public dstImage : VkImage
            val mutable public dstImageLayout : VkImageLayout
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkImageCopy2>

            new(pNext : nativeint, srcImage : VkImage, srcImageLayout : VkImageLayout, dstImage : VkImage, dstImageLayout : VkImageLayout, regionCount : uint32, pRegions : nativeptr<VkImageCopy2>) =
                {
                    sType = 1000337001u
                    pNext = pNext
                    srcImage = srcImage
                    srcImageLayout = srcImageLayout
                    dstImage = dstImage
                    dstImageLayout = dstImageLayout
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(srcImage : VkImage, srcImageLayout : VkImageLayout, dstImage : VkImage, dstImageLayout : VkImageLayout, regionCount : uint32, pRegions : nativeptr<VkImageCopy2>) =
                VkCopyImageInfo2(Unchecked.defaultof<nativeint>, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcImage = Unchecked.defaultof<VkImage> && x.srcImageLayout = Unchecked.defaultof<VkImageLayout> && x.dstImage = Unchecked.defaultof<VkImage> && x.dstImageLayout = Unchecked.defaultof<VkImageLayout> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkImageCopy2>>

            static member Empty =
                VkCopyImageInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageCopy2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcImage = %A" x.srcImage
                    sprintf "srcImageLayout = %A" x.srcImageLayout
                    sprintf "dstImage = %A" x.dstImage
                    sprintf "dstImageLayout = %A" x.dstImageLayout
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkCopyImageInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyImageToBufferInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcImage : VkImage
            val mutable public srcImageLayout : VkImageLayout
            val mutable public dstBuffer : VkBuffer
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkBufferImageCopy2>

            new(pNext : nativeint, srcImage : VkImage, srcImageLayout : VkImageLayout, dstBuffer : VkBuffer, regionCount : uint32, pRegions : nativeptr<VkBufferImageCopy2>) =
                {
                    sType = 1000337003u
                    pNext = pNext
                    srcImage = srcImage
                    srcImageLayout = srcImageLayout
                    dstBuffer = dstBuffer
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(srcImage : VkImage, srcImageLayout : VkImageLayout, dstBuffer : VkBuffer, regionCount : uint32, pRegions : nativeptr<VkBufferImageCopy2>) =
                VkCopyImageToBufferInfo2(Unchecked.defaultof<nativeint>, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcImage = Unchecked.defaultof<VkImage> && x.srcImageLayout = Unchecked.defaultof<VkImageLayout> && x.dstBuffer = Unchecked.defaultof<VkBuffer> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkBufferImageCopy2>>

            static member Empty =
                VkCopyImageToBufferInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBufferImageCopy2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcImage = %A" x.srcImage
                    sprintf "srcImageLayout = %A" x.srcImageLayout
                    sprintf "dstBuffer = %A" x.dstBuffer
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkCopyImageToBufferInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryBarrier2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcStageMask : VkPipelineStageFlags2
            val mutable public srcAccessMask : VkAccessFlags2
            val mutable public dstStageMask : VkPipelineStageFlags2
            val mutable public dstAccessMask : VkAccessFlags2

            new(pNext : nativeint, srcStageMask : VkPipelineStageFlags2, srcAccessMask : VkAccessFlags2, dstStageMask : VkPipelineStageFlags2, dstAccessMask : VkAccessFlags2) =
                {
                    sType = 1000314000u
                    pNext = pNext
                    srcStageMask = srcStageMask
                    srcAccessMask = srcAccessMask
                    dstStageMask = dstStageMask
                    dstAccessMask = dstAccessMask
                }

            new(srcStageMask : VkPipelineStageFlags2, srcAccessMask : VkAccessFlags2, dstStageMask : VkPipelineStageFlags2, dstAccessMask : VkAccessFlags2) =
                VkMemoryBarrier2(Unchecked.defaultof<nativeint>, srcStageMask, srcAccessMask, dstStageMask, dstAccessMask)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcStageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags2> && x.dstStageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags2>

            static member Empty =
                VkMemoryBarrier2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<VkAccessFlags2>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<VkAccessFlags2>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcStageMask = %A" x.srcStageMask
                    sprintf "srcAccessMask = %A" x.srcAccessMask
                    sprintf "dstStageMask = %A" x.dstStageMask
                    sprintf "dstAccessMask = %A" x.dstAccessMask
                ] |> sprintf "VkMemoryBarrier2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageMemoryBarrier2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcStageMask : VkPipelineStageFlags2
            val mutable public srcAccessMask : VkAccessFlags2
            val mutable public dstStageMask : VkPipelineStageFlags2
            val mutable public dstAccessMask : VkAccessFlags2
            val mutable public oldLayout : VkImageLayout
            val mutable public newLayout : VkImageLayout
            val mutable public srcQueueFamilyIndex : uint32
            val mutable public dstQueueFamilyIndex : uint32
            val mutable public image : VkImage
            val mutable public subresourceRange : VkImageSubresourceRange

            new(pNext : nativeint, srcStageMask : VkPipelineStageFlags2, srcAccessMask : VkAccessFlags2, dstStageMask : VkPipelineStageFlags2, dstAccessMask : VkAccessFlags2, oldLayout : VkImageLayout, newLayout : VkImageLayout, srcQueueFamilyIndex : uint32, dstQueueFamilyIndex : uint32, image : VkImage, subresourceRange : VkImageSubresourceRange) =
                {
                    sType = 1000314002u
                    pNext = pNext
                    srcStageMask = srcStageMask
                    srcAccessMask = srcAccessMask
                    dstStageMask = dstStageMask
                    dstAccessMask = dstAccessMask
                    oldLayout = oldLayout
                    newLayout = newLayout
                    srcQueueFamilyIndex = srcQueueFamilyIndex
                    dstQueueFamilyIndex = dstQueueFamilyIndex
                    image = image
                    subresourceRange = subresourceRange
                }

            new(srcStageMask : VkPipelineStageFlags2, srcAccessMask : VkAccessFlags2, dstStageMask : VkPipelineStageFlags2, dstAccessMask : VkAccessFlags2, oldLayout : VkImageLayout, newLayout : VkImageLayout, srcQueueFamilyIndex : uint32, dstQueueFamilyIndex : uint32, image : VkImage, subresourceRange : VkImageSubresourceRange) =
                VkImageMemoryBarrier2(Unchecked.defaultof<nativeint>, srcStageMask, srcAccessMask, dstStageMask, dstAccessMask, oldLayout, newLayout, srcQueueFamilyIndex, dstQueueFamilyIndex, image, subresourceRange)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcStageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.srcAccessMask = Unchecked.defaultof<VkAccessFlags2> && x.dstStageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.dstAccessMask = Unchecked.defaultof<VkAccessFlags2> && x.oldLayout = Unchecked.defaultof<VkImageLayout> && x.newLayout = Unchecked.defaultof<VkImageLayout> && x.srcQueueFamilyIndex = Unchecked.defaultof<uint32> && x.dstQueueFamilyIndex = Unchecked.defaultof<uint32> && x.image = Unchecked.defaultof<VkImage> && x.subresourceRange = Unchecked.defaultof<VkImageSubresourceRange>

            static member Empty =
                VkImageMemoryBarrier2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<VkAccessFlags2>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<VkAccessFlags2>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageSubresourceRange>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcStageMask = %A" x.srcStageMask
                    sprintf "srcAccessMask = %A" x.srcAccessMask
                    sprintf "dstStageMask = %A" x.dstStageMask
                    sprintf "dstAccessMask = %A" x.dstAccessMask
                    sprintf "oldLayout = %A" x.oldLayout
                    sprintf "newLayout = %A" x.newLayout
                    sprintf "srcQueueFamilyIndex = %A" x.srcQueueFamilyIndex
                    sprintf "dstQueueFamilyIndex = %A" x.dstQueueFamilyIndex
                    sprintf "image = %A" x.image
                    sprintf "subresourceRange = %A" x.subresourceRange
                ] |> sprintf "VkImageMemoryBarrier2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDependencyInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public dependencyFlags : VkDependencyFlags
            val mutable public memoryBarrierCount : uint32
            val mutable public pMemoryBarriers : nativeptr<VkMemoryBarrier2>
            val mutable public bufferMemoryBarrierCount : uint32
            val mutable public pBufferMemoryBarriers : nativeptr<VkBufferMemoryBarrier2>
            val mutable public imageMemoryBarrierCount : uint32
            val mutable public pImageMemoryBarriers : nativeptr<VkImageMemoryBarrier2>

            new(pNext : nativeint, dependencyFlags : VkDependencyFlags, memoryBarrierCount : uint32, pMemoryBarriers : nativeptr<VkMemoryBarrier2>, bufferMemoryBarrierCount : uint32, pBufferMemoryBarriers : nativeptr<VkBufferMemoryBarrier2>, imageMemoryBarrierCount : uint32, pImageMemoryBarriers : nativeptr<VkImageMemoryBarrier2>) =
                {
                    sType = 1000314003u
                    pNext = pNext
                    dependencyFlags = dependencyFlags
                    memoryBarrierCount = memoryBarrierCount
                    pMemoryBarriers = pMemoryBarriers
                    bufferMemoryBarrierCount = bufferMemoryBarrierCount
                    pBufferMemoryBarriers = pBufferMemoryBarriers
                    imageMemoryBarrierCount = imageMemoryBarrierCount
                    pImageMemoryBarriers = pImageMemoryBarriers
                }

            new(dependencyFlags : VkDependencyFlags, memoryBarrierCount : uint32, pMemoryBarriers : nativeptr<VkMemoryBarrier2>, bufferMemoryBarrierCount : uint32, pBufferMemoryBarriers : nativeptr<VkBufferMemoryBarrier2>, imageMemoryBarrierCount : uint32, pImageMemoryBarriers : nativeptr<VkImageMemoryBarrier2>) =
                VkDependencyInfo(Unchecked.defaultof<nativeint>, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.dependencyFlags = Unchecked.defaultof<VkDependencyFlags> && x.memoryBarrierCount = Unchecked.defaultof<uint32> && x.pMemoryBarriers = Unchecked.defaultof<nativeptr<VkMemoryBarrier2>> && x.bufferMemoryBarrierCount = Unchecked.defaultof<uint32> && x.pBufferMemoryBarriers = Unchecked.defaultof<nativeptr<VkBufferMemoryBarrier2>> && x.imageMemoryBarrierCount = Unchecked.defaultof<uint32> && x.pImageMemoryBarriers = Unchecked.defaultof<nativeptr<VkImageMemoryBarrier2>>

            static member Empty =
                VkDependencyInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDependencyFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkMemoryBarrier2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBufferMemoryBarrier2>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageMemoryBarrier2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "dependencyFlags = %A" x.dependencyFlags
                    sprintf "memoryBarrierCount = %A" x.memoryBarrierCount
                    sprintf "pMemoryBarriers = %A" x.pMemoryBarriers
                    sprintf "bufferMemoryBarrierCount = %A" x.bufferMemoryBarrierCount
                    sprintf "pBufferMemoryBarriers = %A" x.pBufferMemoryBarriers
                    sprintf "imageMemoryBarrierCount = %A" x.imageMemoryBarrierCount
                    sprintf "pImageMemoryBarriers = %A" x.pImageMemoryBarriers
                ] |> sprintf "VkDependencyInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorPoolInlineUniformBlockCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxInlineUniformBlockBindings : uint32

            new(pNext : nativeint, maxInlineUniformBlockBindings : uint32) =
                {
                    sType = 1000138003u
                    pNext = pNext
                    maxInlineUniformBlockBindings = maxInlineUniformBlockBindings
                }

            new(maxInlineUniformBlockBindings : uint32) =
                VkDescriptorPoolInlineUniformBlockCreateInfo(Unchecked.defaultof<nativeint>, maxInlineUniformBlockBindings)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxInlineUniformBlockBindings = Unchecked.defaultof<uint32>

            static member Empty =
                VkDescriptorPoolInlineUniformBlockCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxInlineUniformBlockBindings = %A" x.maxInlineUniformBlockBindings
                ] |> sprintf "VkDescriptorPoolInlineUniformBlockCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceBufferMemoryRequirements =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pCreateInfo : nativeptr<VkBufferCreateInfo>

            new(pNext : nativeint, pCreateInfo : nativeptr<VkBufferCreateInfo>) =
                {
                    sType = 1000413002u
                    pNext = pNext
                    pCreateInfo = pCreateInfo
                }

            new(pCreateInfo : nativeptr<VkBufferCreateInfo>) =
                VkDeviceBufferMemoryRequirements(Unchecked.defaultof<nativeint>, pCreateInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pCreateInfo = Unchecked.defaultof<nativeptr<VkBufferCreateInfo>>

            static member Empty =
                VkDeviceBufferMemoryRequirements(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkBufferCreateInfo>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pCreateInfo = %A" x.pCreateInfo
                ] |> sprintf "VkDeviceBufferMemoryRequirements { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceImageMemoryRequirements =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pCreateInfo : nativeptr<VkImageCreateInfo>
            val mutable public planeAspect : VkImageAspectFlags

            new(pNext : nativeint, pCreateInfo : nativeptr<VkImageCreateInfo>, planeAspect : VkImageAspectFlags) =
                {
                    sType = 1000413003u
                    pNext = pNext
                    pCreateInfo = pCreateInfo
                    planeAspect = planeAspect
                }

            new(pCreateInfo : nativeptr<VkImageCreateInfo>, planeAspect : VkImageAspectFlags) =
                VkDeviceImageMemoryRequirements(Unchecked.defaultof<nativeint>, pCreateInfo, planeAspect)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pCreateInfo = Unchecked.defaultof<nativeptr<VkImageCreateInfo>> && x.planeAspect = Unchecked.defaultof<VkImageAspectFlags>

            static member Empty =
                VkDeviceImageMemoryRequirements(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkImageCreateInfo>>, Unchecked.defaultof<VkImageAspectFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pCreateInfo = %A" x.pCreateInfo
                    sprintf "planeAspect = %A" x.planeAspect
                ] |> sprintf "VkDeviceImageMemoryRequirements { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDevicePrivateDataCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public privateDataSlotRequestCount : uint32

            new(pNext : nativeint, privateDataSlotRequestCount : uint32) =
                {
                    sType = 1000295001u
                    pNext = pNext
                    privateDataSlotRequestCount = privateDataSlotRequestCount
                }

            new(privateDataSlotRequestCount : uint32) =
                VkDevicePrivateDataCreateInfo(Unchecked.defaultof<nativeint>, privateDataSlotRequestCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.privateDataSlotRequestCount = Unchecked.defaultof<uint32>

            static member Empty =
                VkDevicePrivateDataCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "privateDataSlotRequestCount = %A" x.privateDataSlotRequestCount
                ] |> sprintf "VkDevicePrivateDataCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkFormatProperties3 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public linearTilingFeatures : VkFormatFeatureFlags2
            val mutable public optimalTilingFeatures : VkFormatFeatureFlags2
            val mutable public bufferFeatures : VkFormatFeatureFlags2

            new(pNext : nativeint, linearTilingFeatures : VkFormatFeatureFlags2, optimalTilingFeatures : VkFormatFeatureFlags2, bufferFeatures : VkFormatFeatureFlags2) =
                {
                    sType = 1000360000u
                    pNext = pNext
                    linearTilingFeatures = linearTilingFeatures
                    optimalTilingFeatures = optimalTilingFeatures
                    bufferFeatures = bufferFeatures
                }

            new(linearTilingFeatures : VkFormatFeatureFlags2, optimalTilingFeatures : VkFormatFeatureFlags2, bufferFeatures : VkFormatFeatureFlags2) =
                VkFormatProperties3(Unchecked.defaultof<nativeint>, linearTilingFeatures, optimalTilingFeatures, bufferFeatures)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.linearTilingFeatures = Unchecked.defaultof<VkFormatFeatureFlags2> && x.optimalTilingFeatures = Unchecked.defaultof<VkFormatFeatureFlags2> && x.bufferFeatures = Unchecked.defaultof<VkFormatFeatureFlags2>

            static member Empty =
                VkFormatProperties3(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormatFeatureFlags2>, Unchecked.defaultof<VkFormatFeatureFlags2>, Unchecked.defaultof<VkFormatFeatureFlags2>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "linearTilingFeatures = %A" x.linearTilingFeatures
                    sprintf "optimalTilingFeatures = %A" x.optimalTilingFeatures
                    sprintf "bufferFeatures = %A" x.bufferFeatures
                ] |> sprintf "VkFormatProperties3 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageResolve2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcSubresource : VkImageSubresourceLayers
            val mutable public srcOffset : VkOffset3D
            val mutable public dstSubresource : VkImageSubresourceLayers
            val mutable public dstOffset : VkOffset3D
            val mutable public extent : VkExtent3D

            new(pNext : nativeint, srcSubresource : VkImageSubresourceLayers, srcOffset : VkOffset3D, dstSubresource : VkImageSubresourceLayers, dstOffset : VkOffset3D, extent : VkExtent3D) =
                {
                    sType = 1000337010u
                    pNext = pNext
                    srcSubresource = srcSubresource
                    srcOffset = srcOffset
                    dstSubresource = dstSubresource
                    dstOffset = dstOffset
                    extent = extent
                }

            new(srcSubresource : VkImageSubresourceLayers, srcOffset : VkOffset3D, dstSubresource : VkImageSubresourceLayers, dstOffset : VkOffset3D, extent : VkExtent3D) =
                VkImageResolve2(Unchecked.defaultof<nativeint>, srcSubresource, srcOffset, dstSubresource, dstOffset, extent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.srcOffset = Unchecked.defaultof<VkOffset3D> && x.dstSubresource = Unchecked.defaultof<VkImageSubresourceLayers> && x.dstOffset = Unchecked.defaultof<VkOffset3D> && x.extent = Unchecked.defaultof<VkExtent3D>

            static member Empty =
                VkImageResolve2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkImageSubresourceLayers>, Unchecked.defaultof<VkOffset3D>, Unchecked.defaultof<VkExtent3D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcSubresource = %A" x.srcSubresource
                    sprintf "srcOffset = %A" x.srcOffset
                    sprintf "dstSubresource = %A" x.dstSubresource
                    sprintf "dstOffset = %A" x.dstOffset
                    sprintf "extent = %A" x.extent
                ] |> sprintf "VkImageResolve2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDynamicRenderingFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public dynamicRendering : VkBool32

            new(pNext : nativeint, dynamicRendering : VkBool32) =
                {
                    sType = 1000044003u
                    pNext = pNext
                    dynamicRendering = dynamicRendering
                }

            new(dynamicRendering : VkBool32) =
                VkPhysicalDeviceDynamicRenderingFeatures(Unchecked.defaultof<nativeint>, dynamicRendering)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.dynamicRendering = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDynamicRenderingFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "dynamicRendering = %A" x.dynamicRendering
                ] |> sprintf "VkPhysicalDeviceDynamicRenderingFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceImageRobustnessFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public robustImageAccess : VkBool32

            new(pNext : nativeint, robustImageAccess : VkBool32) =
                {
                    sType = 1000335000u
                    pNext = pNext
                    robustImageAccess = robustImageAccess
                }

            new(robustImageAccess : VkBool32) =
                VkPhysicalDeviceImageRobustnessFeatures(Unchecked.defaultof<nativeint>, robustImageAccess)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.robustImageAccess = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceImageRobustnessFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "robustImageAccess = %A" x.robustImageAccess
                ] |> sprintf "VkPhysicalDeviceImageRobustnessFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceInlineUniformBlockFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public inlineUniformBlock : VkBool32
            val mutable public descriptorBindingInlineUniformBlockUpdateAfterBind : VkBool32

            new(pNext : nativeint, inlineUniformBlock : VkBool32, descriptorBindingInlineUniformBlockUpdateAfterBind : VkBool32) =
                {
                    sType = 1000138000u
                    pNext = pNext
                    inlineUniformBlock = inlineUniformBlock
                    descriptorBindingInlineUniformBlockUpdateAfterBind = descriptorBindingInlineUniformBlockUpdateAfterBind
                }

            new(inlineUniformBlock : VkBool32, descriptorBindingInlineUniformBlockUpdateAfterBind : VkBool32) =
                VkPhysicalDeviceInlineUniformBlockFeatures(Unchecked.defaultof<nativeint>, inlineUniformBlock, descriptorBindingInlineUniformBlockUpdateAfterBind)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.inlineUniformBlock = Unchecked.defaultof<VkBool32> && x.descriptorBindingInlineUniformBlockUpdateAfterBind = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceInlineUniformBlockFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "inlineUniformBlock = %A" x.inlineUniformBlock
                    sprintf "descriptorBindingInlineUniformBlockUpdateAfterBind = %A" x.descriptorBindingInlineUniformBlockUpdateAfterBind
                ] |> sprintf "VkPhysicalDeviceInlineUniformBlockFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceInlineUniformBlockProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxInlineUniformBlockSize : uint32
            val mutable public maxPerStageDescriptorInlineUniformBlocks : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks : uint32
            val mutable public maxDescriptorSetInlineUniformBlocks : uint32
            val mutable public maxDescriptorSetUpdateAfterBindInlineUniformBlocks : uint32

            new(pNext : nativeint, maxInlineUniformBlockSize : uint32, maxPerStageDescriptorInlineUniformBlocks : uint32, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks : uint32, maxDescriptorSetInlineUniformBlocks : uint32, maxDescriptorSetUpdateAfterBindInlineUniformBlocks : uint32) =
                {
                    sType = 1000138001u
                    pNext = pNext
                    maxInlineUniformBlockSize = maxInlineUniformBlockSize
                    maxPerStageDescriptorInlineUniformBlocks = maxPerStageDescriptorInlineUniformBlocks
                    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
                    maxDescriptorSetInlineUniformBlocks = maxDescriptorSetInlineUniformBlocks
                    maxDescriptorSetUpdateAfterBindInlineUniformBlocks = maxDescriptorSetUpdateAfterBindInlineUniformBlocks
                }

            new(maxInlineUniformBlockSize : uint32, maxPerStageDescriptorInlineUniformBlocks : uint32, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks : uint32, maxDescriptorSetInlineUniformBlocks : uint32, maxDescriptorSetUpdateAfterBindInlineUniformBlocks : uint32) =
                VkPhysicalDeviceInlineUniformBlockProperties(Unchecked.defaultof<nativeint>, maxInlineUniformBlockSize, maxPerStageDescriptorInlineUniformBlocks, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, maxDescriptorSetInlineUniformBlocks, maxDescriptorSetUpdateAfterBindInlineUniformBlocks)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxInlineUniformBlockSize = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxDescriptorSetInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceInlineUniformBlockProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxInlineUniformBlockSize = %A" x.maxInlineUniformBlockSize
                    sprintf "maxPerStageDescriptorInlineUniformBlocks = %A" x.maxPerStageDescriptorInlineUniformBlocks
                    sprintf "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = %A" x.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
                    sprintf "maxDescriptorSetInlineUniformBlocks = %A" x.maxDescriptorSetInlineUniformBlocks
                    sprintf "maxDescriptorSetUpdateAfterBindInlineUniformBlocks = %A" x.maxDescriptorSetUpdateAfterBindInlineUniformBlocks
                ] |> sprintf "VkPhysicalDeviceInlineUniformBlockProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMaintenance4Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maintenance4 : VkBool32

            new(pNext : nativeint, maintenance4 : VkBool32) =
                {
                    sType = 1000413000u
                    pNext = pNext
                    maintenance4 = maintenance4
                }

            new(maintenance4 : VkBool32) =
                VkPhysicalDeviceMaintenance4Features(Unchecked.defaultof<nativeint>, maintenance4)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maintenance4 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMaintenance4Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maintenance4 = %A" x.maintenance4
                ] |> sprintf "VkPhysicalDeviceMaintenance4Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMaintenance4Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxBufferSize : VkDeviceSize

            new(pNext : nativeint, maxBufferSize : VkDeviceSize) =
                {
                    sType = 1000413001u
                    pNext = pNext
                    maxBufferSize = maxBufferSize
                }

            new(maxBufferSize : VkDeviceSize) =
                VkPhysicalDeviceMaintenance4Properties(Unchecked.defaultof<nativeint>, maxBufferSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxBufferSize = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkPhysicalDeviceMaintenance4Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxBufferSize = %A" x.maxBufferSize
                ] |> sprintf "VkPhysicalDeviceMaintenance4Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePipelineCreationCacheControlFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipelineCreationCacheControl : VkBool32

            new(pNext : nativeint, pipelineCreationCacheControl : VkBool32) =
                {
                    sType = 1000297000u
                    pNext = pNext
                    pipelineCreationCacheControl = pipelineCreationCacheControl
                }

            new(pipelineCreationCacheControl : VkBool32) =
                VkPhysicalDevicePipelineCreationCacheControlFeatures(Unchecked.defaultof<nativeint>, pipelineCreationCacheControl)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipelineCreationCacheControl = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePipelineCreationCacheControlFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipelineCreationCacheControl = %A" x.pipelineCreationCacheControl
                ] |> sprintf "VkPhysicalDevicePipelineCreationCacheControlFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePrivateDataFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public privateData : VkBool32

            new(pNext : nativeint, privateData : VkBool32) =
                {
                    sType = 1000295000u
                    pNext = pNext
                    privateData = privateData
                }

            new(privateData : VkBool32) =
                VkPhysicalDevicePrivateDataFeatures(Unchecked.defaultof<nativeint>, privateData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.privateData = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePrivateDataFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "privateData = %A" x.privateData
                ] |> sprintf "VkPhysicalDevicePrivateDataFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderDemoteToHelperInvocation : VkBool32

            new(pNext : nativeint, shaderDemoteToHelperInvocation : VkBool32) =
                {
                    sType = 1000276000u
                    pNext = pNext
                    shaderDemoteToHelperInvocation = shaderDemoteToHelperInvocation
                }

            new(shaderDemoteToHelperInvocation : VkBool32) =
                VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(Unchecked.defaultof<nativeint>, shaderDemoteToHelperInvocation)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderDemoteToHelperInvocation = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderDemoteToHelperInvocation = %A" x.shaderDemoteToHelperInvocation
                ] |> sprintf "VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderIntegerDotProductFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderIntegerDotProduct : VkBool32

            new(pNext : nativeint, shaderIntegerDotProduct : VkBool32) =
                {
                    sType = 1000280000u
                    pNext = pNext
                    shaderIntegerDotProduct = shaderIntegerDotProduct
                }

            new(shaderIntegerDotProduct : VkBool32) =
                VkPhysicalDeviceShaderIntegerDotProductFeatures(Unchecked.defaultof<nativeint>, shaderIntegerDotProduct)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderIntegerDotProduct = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderIntegerDotProductFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderIntegerDotProduct = %A" x.shaderIntegerDotProduct
                ] |> sprintf "VkPhysicalDeviceShaderIntegerDotProductFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderIntegerDotProductProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public integerDotProduct8BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct8BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct8BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct4x8BitPackedUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct4x8BitPackedSignedAccelerated : VkBool32
            val mutable public integerDotProduct4x8BitPackedMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct16BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct16BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct16BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct32BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct32BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct32BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct64BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct64BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct64BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating8BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating8BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating16BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating16BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating32BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating32BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating64BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating64BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated : VkBool32

            new(pNext : nativeint, integerDotProduct8BitUnsignedAccelerated : VkBool32, integerDotProduct8BitSignedAccelerated : VkBool32, integerDotProduct8BitMixedSignednessAccelerated : VkBool32, integerDotProduct4x8BitPackedUnsignedAccelerated : VkBool32, integerDotProduct4x8BitPackedSignedAccelerated : VkBool32, integerDotProduct4x8BitPackedMixedSignednessAccelerated : VkBool32, integerDotProduct16BitUnsignedAccelerated : VkBool32, integerDotProduct16BitSignedAccelerated : VkBool32, integerDotProduct16BitMixedSignednessAccelerated : VkBool32, integerDotProduct32BitUnsignedAccelerated : VkBool32, integerDotProduct32BitSignedAccelerated : VkBool32, integerDotProduct32BitMixedSignednessAccelerated : VkBool32, integerDotProduct64BitUnsignedAccelerated : VkBool32, integerDotProduct64BitSignedAccelerated : VkBool32, integerDotProduct64BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating8BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating16BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating32BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating64BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated : VkBool32) =
                {
                    sType = 1000280001u
                    pNext = pNext
                    integerDotProduct8BitUnsignedAccelerated = integerDotProduct8BitUnsignedAccelerated
                    integerDotProduct8BitSignedAccelerated = integerDotProduct8BitSignedAccelerated
                    integerDotProduct8BitMixedSignednessAccelerated = integerDotProduct8BitMixedSignednessAccelerated
                    integerDotProduct4x8BitPackedUnsignedAccelerated = integerDotProduct4x8BitPackedUnsignedAccelerated
                    integerDotProduct4x8BitPackedSignedAccelerated = integerDotProduct4x8BitPackedSignedAccelerated
                    integerDotProduct4x8BitPackedMixedSignednessAccelerated = integerDotProduct4x8BitPackedMixedSignednessAccelerated
                    integerDotProduct16BitUnsignedAccelerated = integerDotProduct16BitUnsignedAccelerated
                    integerDotProduct16BitSignedAccelerated = integerDotProduct16BitSignedAccelerated
                    integerDotProduct16BitMixedSignednessAccelerated = integerDotProduct16BitMixedSignednessAccelerated
                    integerDotProduct32BitUnsignedAccelerated = integerDotProduct32BitUnsignedAccelerated
                    integerDotProduct32BitSignedAccelerated = integerDotProduct32BitSignedAccelerated
                    integerDotProduct32BitMixedSignednessAccelerated = integerDotProduct32BitMixedSignednessAccelerated
                    integerDotProduct64BitUnsignedAccelerated = integerDotProduct64BitUnsignedAccelerated
                    integerDotProduct64BitSignedAccelerated = integerDotProduct64BitSignedAccelerated
                    integerDotProduct64BitMixedSignednessAccelerated = integerDotProduct64BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = integerDotProductAccumulatingSaturating8BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating8BitSignedAccelerated = integerDotProductAccumulatingSaturating8BitSignedAccelerated
                    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated
                    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated
                    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = integerDotProductAccumulatingSaturating16BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating16BitSignedAccelerated = integerDotProductAccumulatingSaturating16BitSignedAccelerated
                    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = integerDotProductAccumulatingSaturating32BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating32BitSignedAccelerated = integerDotProductAccumulatingSaturating32BitSignedAccelerated
                    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = integerDotProductAccumulatingSaturating64BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating64BitSignedAccelerated = integerDotProductAccumulatingSaturating64BitSignedAccelerated
                    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated
                }

            new(integerDotProduct8BitUnsignedAccelerated : VkBool32, integerDotProduct8BitSignedAccelerated : VkBool32, integerDotProduct8BitMixedSignednessAccelerated : VkBool32, integerDotProduct4x8BitPackedUnsignedAccelerated : VkBool32, integerDotProduct4x8BitPackedSignedAccelerated : VkBool32, integerDotProduct4x8BitPackedMixedSignednessAccelerated : VkBool32, integerDotProduct16BitUnsignedAccelerated : VkBool32, integerDotProduct16BitSignedAccelerated : VkBool32, integerDotProduct16BitMixedSignednessAccelerated : VkBool32, integerDotProduct32BitUnsignedAccelerated : VkBool32, integerDotProduct32BitSignedAccelerated : VkBool32, integerDotProduct32BitMixedSignednessAccelerated : VkBool32, integerDotProduct64BitUnsignedAccelerated : VkBool32, integerDotProduct64BitSignedAccelerated : VkBool32, integerDotProduct64BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating8BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating16BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating32BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating64BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated : VkBool32) =
                VkPhysicalDeviceShaderIntegerDotProductProperties(Unchecked.defaultof<nativeint>, integerDotProduct8BitUnsignedAccelerated, integerDotProduct8BitSignedAccelerated, integerDotProduct8BitMixedSignednessAccelerated, integerDotProduct4x8BitPackedUnsignedAccelerated, integerDotProduct4x8BitPackedSignedAccelerated, integerDotProduct4x8BitPackedMixedSignednessAccelerated, integerDotProduct16BitUnsignedAccelerated, integerDotProduct16BitSignedAccelerated, integerDotProduct16BitMixedSignednessAccelerated, integerDotProduct32BitUnsignedAccelerated, integerDotProduct32BitSignedAccelerated, integerDotProduct32BitMixedSignednessAccelerated, integerDotProduct64BitUnsignedAccelerated, integerDotProduct64BitSignedAccelerated, integerDotProduct64BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, integerDotProductAccumulatingSaturating8BitSignedAccelerated, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, integerDotProductAccumulatingSaturating16BitSignedAccelerated, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, integerDotProductAccumulatingSaturating32BitSignedAccelerated, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, integerDotProductAccumulatingSaturating64BitSignedAccelerated, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.integerDotProduct8BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct8BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct8BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct4x8BitPackedUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct4x8BitPackedSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct4x8BitPackedMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct16BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct16BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct16BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct32BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct32BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct32BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct64BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct64BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct64BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating8BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating16BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating32BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating64BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderIntegerDotProductProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "integerDotProduct8BitUnsignedAccelerated = %A" x.integerDotProduct8BitUnsignedAccelerated
                    sprintf "integerDotProduct8BitSignedAccelerated = %A" x.integerDotProduct8BitSignedAccelerated
                    sprintf "integerDotProduct8BitMixedSignednessAccelerated = %A" x.integerDotProduct8BitMixedSignednessAccelerated
                    sprintf "integerDotProduct4x8BitPackedUnsignedAccelerated = %A" x.integerDotProduct4x8BitPackedUnsignedAccelerated
                    sprintf "integerDotProduct4x8BitPackedSignedAccelerated = %A" x.integerDotProduct4x8BitPackedSignedAccelerated
                    sprintf "integerDotProduct4x8BitPackedMixedSignednessAccelerated = %A" x.integerDotProduct4x8BitPackedMixedSignednessAccelerated
                    sprintf "integerDotProduct16BitUnsignedAccelerated = %A" x.integerDotProduct16BitUnsignedAccelerated
                    sprintf "integerDotProduct16BitSignedAccelerated = %A" x.integerDotProduct16BitSignedAccelerated
                    sprintf "integerDotProduct16BitMixedSignednessAccelerated = %A" x.integerDotProduct16BitMixedSignednessAccelerated
                    sprintf "integerDotProduct32BitUnsignedAccelerated = %A" x.integerDotProduct32BitUnsignedAccelerated
                    sprintf "integerDotProduct32BitSignedAccelerated = %A" x.integerDotProduct32BitSignedAccelerated
                    sprintf "integerDotProduct32BitMixedSignednessAccelerated = %A" x.integerDotProduct32BitMixedSignednessAccelerated
                    sprintf "integerDotProduct64BitUnsignedAccelerated = %A" x.integerDotProduct64BitUnsignedAccelerated
                    sprintf "integerDotProduct64BitSignedAccelerated = %A" x.integerDotProduct64BitSignedAccelerated
                    sprintf "integerDotProduct64BitMixedSignednessAccelerated = %A" x.integerDotProduct64BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating8BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating8BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating16BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating16BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating32BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating32BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating64BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating64BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated
                ] |> sprintf "VkPhysicalDeviceShaderIntegerDotProductProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderTerminateInvocationFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderTerminateInvocation : VkBool32

            new(pNext : nativeint, shaderTerminateInvocation : VkBool32) =
                {
                    sType = 1000215000u
                    pNext = pNext
                    shaderTerminateInvocation = shaderTerminateInvocation
                }

            new(shaderTerminateInvocation : VkBool32) =
                VkPhysicalDeviceShaderTerminateInvocationFeatures(Unchecked.defaultof<nativeint>, shaderTerminateInvocation)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderTerminateInvocation = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderTerminateInvocationFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderTerminateInvocation = %A" x.shaderTerminateInvocation
                ] |> sprintf "VkPhysicalDeviceShaderTerminateInvocationFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSubgroupSizeControlFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public subgroupSizeControl : VkBool32
            val mutable public computeFullSubgroups : VkBool32

            new(pNext : nativeint, subgroupSizeControl : VkBool32, computeFullSubgroups : VkBool32) =
                {
                    sType = 1000225002u
                    pNext = pNext
                    subgroupSizeControl = subgroupSizeControl
                    computeFullSubgroups = computeFullSubgroups
                }

            new(subgroupSizeControl : VkBool32, computeFullSubgroups : VkBool32) =
                VkPhysicalDeviceSubgroupSizeControlFeatures(Unchecked.defaultof<nativeint>, subgroupSizeControl, computeFullSubgroups)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.subgroupSizeControl = Unchecked.defaultof<VkBool32> && x.computeFullSubgroups = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSubgroupSizeControlFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "subgroupSizeControl = %A" x.subgroupSizeControl
                    sprintf "computeFullSubgroups = %A" x.computeFullSubgroups
                ] |> sprintf "VkPhysicalDeviceSubgroupSizeControlFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSubgroupSizeControlProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public minSubgroupSize : uint32
            val mutable public maxSubgroupSize : uint32
            val mutable public maxComputeWorkgroupSubgroups : uint32
            val mutable public requiredSubgroupSizeStages : VkShaderStageFlags

            new(pNext : nativeint, minSubgroupSize : uint32, maxSubgroupSize : uint32, maxComputeWorkgroupSubgroups : uint32, requiredSubgroupSizeStages : VkShaderStageFlags) =
                {
                    sType = 1000225000u
                    pNext = pNext
                    minSubgroupSize = minSubgroupSize
                    maxSubgroupSize = maxSubgroupSize
                    maxComputeWorkgroupSubgroups = maxComputeWorkgroupSubgroups
                    requiredSubgroupSizeStages = requiredSubgroupSizeStages
                }

            new(minSubgroupSize : uint32, maxSubgroupSize : uint32, maxComputeWorkgroupSubgroups : uint32, requiredSubgroupSizeStages : VkShaderStageFlags) =
                VkPhysicalDeviceSubgroupSizeControlProperties(Unchecked.defaultof<nativeint>, minSubgroupSize, maxSubgroupSize, maxComputeWorkgroupSubgroups, requiredSubgroupSizeStages)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.minSubgroupSize = Unchecked.defaultof<uint32> && x.maxSubgroupSize = Unchecked.defaultof<uint32> && x.maxComputeWorkgroupSubgroups = Unchecked.defaultof<uint32> && x.requiredSubgroupSizeStages = Unchecked.defaultof<VkShaderStageFlags>

            static member Empty =
                VkPhysicalDeviceSubgroupSizeControlProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkShaderStageFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "minSubgroupSize = %A" x.minSubgroupSize
                    sprintf "maxSubgroupSize = %A" x.maxSubgroupSize
                    sprintf "maxComputeWorkgroupSubgroups = %A" x.maxComputeWorkgroupSubgroups
                    sprintf "requiredSubgroupSizeStages = %A" x.requiredSubgroupSizeStages
                ] |> sprintf "VkPhysicalDeviceSubgroupSizeControlProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSynchronization2Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public synchronization2 : VkBool32

            new(pNext : nativeint, synchronization2 : VkBool32) =
                {
                    sType = 1000314007u
                    pNext = pNext
                    synchronization2 = synchronization2
                }

            new(synchronization2 : VkBool32) =
                VkPhysicalDeviceSynchronization2Features(Unchecked.defaultof<nativeint>, synchronization2)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.synchronization2 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSynchronization2Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "synchronization2 = %A" x.synchronization2
                ] |> sprintf "VkPhysicalDeviceSynchronization2Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceTexelBufferAlignmentProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public storageTexelBufferOffsetAlignmentBytes : VkDeviceSize
            val mutable public storageTexelBufferOffsetSingleTexelAlignment : VkBool32
            val mutable public uniformTexelBufferOffsetAlignmentBytes : VkDeviceSize
            val mutable public uniformTexelBufferOffsetSingleTexelAlignment : VkBool32

            new(pNext : nativeint, storageTexelBufferOffsetAlignmentBytes : VkDeviceSize, storageTexelBufferOffsetSingleTexelAlignment : VkBool32, uniformTexelBufferOffsetAlignmentBytes : VkDeviceSize, uniformTexelBufferOffsetSingleTexelAlignment : VkBool32) =
                {
                    sType = 1000281001u
                    pNext = pNext
                    storageTexelBufferOffsetAlignmentBytes = storageTexelBufferOffsetAlignmentBytes
                    storageTexelBufferOffsetSingleTexelAlignment = storageTexelBufferOffsetSingleTexelAlignment
                    uniformTexelBufferOffsetAlignmentBytes = uniformTexelBufferOffsetAlignmentBytes
                    uniformTexelBufferOffsetSingleTexelAlignment = uniformTexelBufferOffsetSingleTexelAlignment
                }

            new(storageTexelBufferOffsetAlignmentBytes : VkDeviceSize, storageTexelBufferOffsetSingleTexelAlignment : VkBool32, uniformTexelBufferOffsetAlignmentBytes : VkDeviceSize, uniformTexelBufferOffsetSingleTexelAlignment : VkBool32) =
                VkPhysicalDeviceTexelBufferAlignmentProperties(Unchecked.defaultof<nativeint>, storageTexelBufferOffsetAlignmentBytes, storageTexelBufferOffsetSingleTexelAlignment, uniformTexelBufferOffsetAlignmentBytes, uniformTexelBufferOffsetSingleTexelAlignment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.storageTexelBufferOffsetAlignmentBytes = Unchecked.defaultof<VkDeviceSize> && x.storageTexelBufferOffsetSingleTexelAlignment = Unchecked.defaultof<VkBool32> && x.uniformTexelBufferOffsetAlignmentBytes = Unchecked.defaultof<VkDeviceSize> && x.uniformTexelBufferOffsetSingleTexelAlignment = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceTexelBufferAlignmentProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "storageTexelBufferOffsetAlignmentBytes = %A" x.storageTexelBufferOffsetAlignmentBytes
                    sprintf "storageTexelBufferOffsetSingleTexelAlignment = %A" x.storageTexelBufferOffsetSingleTexelAlignment
                    sprintf "uniformTexelBufferOffsetAlignmentBytes = %A" x.uniformTexelBufferOffsetAlignmentBytes
                    sprintf "uniformTexelBufferOffsetSingleTexelAlignment = %A" x.uniformTexelBufferOffsetSingleTexelAlignment
                ] |> sprintf "VkPhysicalDeviceTexelBufferAlignmentProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceTextureCompressionASTCHDRFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public textureCompressionASTC_HDR : VkBool32

            new(pNext : nativeint, textureCompressionASTC_HDR : VkBool32) =
                {
                    sType = 1000066000u
                    pNext = pNext
                    textureCompressionASTC_HDR = textureCompressionASTC_HDR
                }

            new(textureCompressionASTC_HDR : VkBool32) =
                VkPhysicalDeviceTextureCompressionASTCHDRFeatures(Unchecked.defaultof<nativeint>, textureCompressionASTC_HDR)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.textureCompressionASTC_HDR = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceTextureCompressionASTCHDRFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "textureCompressionASTC_HDR = %A" x.textureCompressionASTC_HDR
                ] |> sprintf "VkPhysicalDeviceTextureCompressionASTCHDRFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceToolProperties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public name : String256
            val mutable public version : String256
            val mutable public purposes : VkToolPurposeFlags
            val mutable public description : String256
            val mutable public layer : String256

            new(pNext : nativeint, name : String256, version : String256, purposes : VkToolPurposeFlags, description : String256, layer : String256) =
                {
                    sType = 1000245000u
                    pNext = pNext
                    name = name
                    version = version
                    purposes = purposes
                    description = description
                    layer = layer
                }

            new(name : String256, version : String256, purposes : VkToolPurposeFlags, description : String256, layer : String256) =
                VkPhysicalDeviceToolProperties(Unchecked.defaultof<nativeint>, name, version, purposes, description, layer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.name = Unchecked.defaultof<String256> && x.version = Unchecked.defaultof<String256> && x.purposes = Unchecked.defaultof<VkToolPurposeFlags> && x.description = Unchecked.defaultof<String256> && x.layer = Unchecked.defaultof<String256>

            static member Empty =
                VkPhysicalDeviceToolProperties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<VkToolPurposeFlags>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "name = %A" x.name
                    sprintf "version = %A" x.version
                    sprintf "purposes = %A" x.purposes
                    sprintf "description = %A" x.description
                    sprintf "layer = %A" x.layer
                ] |> sprintf "VkPhysicalDeviceToolProperties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan13Features =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public robustImageAccess : VkBool32
            val mutable public inlineUniformBlock : VkBool32
            val mutable public descriptorBindingInlineUniformBlockUpdateAfterBind : VkBool32
            val mutable public pipelineCreationCacheControl : VkBool32
            val mutable public privateData : VkBool32
            val mutable public shaderDemoteToHelperInvocation : VkBool32
            val mutable public shaderTerminateInvocation : VkBool32
            val mutable public subgroupSizeControl : VkBool32
            val mutable public computeFullSubgroups : VkBool32
            val mutable public synchronization2 : VkBool32
            val mutable public textureCompressionASTC_HDR : VkBool32
            val mutable public shaderZeroInitializeWorkgroupMemory : VkBool32
            val mutable public dynamicRendering : VkBool32
            val mutable public shaderIntegerDotProduct : VkBool32
            val mutable public maintenance4 : VkBool32

            new(pNext : nativeint, robustImageAccess : VkBool32, inlineUniformBlock : VkBool32, descriptorBindingInlineUniformBlockUpdateAfterBind : VkBool32, pipelineCreationCacheControl : VkBool32, privateData : VkBool32, shaderDemoteToHelperInvocation : VkBool32, shaderTerminateInvocation : VkBool32, subgroupSizeControl : VkBool32, computeFullSubgroups : VkBool32, synchronization2 : VkBool32, textureCompressionASTC_HDR : VkBool32, shaderZeroInitializeWorkgroupMemory : VkBool32, dynamicRendering : VkBool32, shaderIntegerDotProduct : VkBool32, maintenance4 : VkBool32) =
                {
                    sType = 53u
                    pNext = pNext
                    robustImageAccess = robustImageAccess
                    inlineUniformBlock = inlineUniformBlock
                    descriptorBindingInlineUniformBlockUpdateAfterBind = descriptorBindingInlineUniformBlockUpdateAfterBind
                    pipelineCreationCacheControl = pipelineCreationCacheControl
                    privateData = privateData
                    shaderDemoteToHelperInvocation = shaderDemoteToHelperInvocation
                    shaderTerminateInvocation = shaderTerminateInvocation
                    subgroupSizeControl = subgroupSizeControl
                    computeFullSubgroups = computeFullSubgroups
                    synchronization2 = synchronization2
                    textureCompressionASTC_HDR = textureCompressionASTC_HDR
                    shaderZeroInitializeWorkgroupMemory = shaderZeroInitializeWorkgroupMemory
                    dynamicRendering = dynamicRendering
                    shaderIntegerDotProduct = shaderIntegerDotProduct
                    maintenance4 = maintenance4
                }

            new(robustImageAccess : VkBool32, inlineUniformBlock : VkBool32, descriptorBindingInlineUniformBlockUpdateAfterBind : VkBool32, pipelineCreationCacheControl : VkBool32, privateData : VkBool32, shaderDemoteToHelperInvocation : VkBool32, shaderTerminateInvocation : VkBool32, subgroupSizeControl : VkBool32, computeFullSubgroups : VkBool32, synchronization2 : VkBool32, textureCompressionASTC_HDR : VkBool32, shaderZeroInitializeWorkgroupMemory : VkBool32, dynamicRendering : VkBool32, shaderIntegerDotProduct : VkBool32, maintenance4 : VkBool32) =
                VkPhysicalDeviceVulkan13Features(Unchecked.defaultof<nativeint>, robustImageAccess, inlineUniformBlock, descriptorBindingInlineUniformBlockUpdateAfterBind, pipelineCreationCacheControl, privateData, shaderDemoteToHelperInvocation, shaderTerminateInvocation, subgroupSizeControl, computeFullSubgroups, synchronization2, textureCompressionASTC_HDR, shaderZeroInitializeWorkgroupMemory, dynamicRendering, shaderIntegerDotProduct, maintenance4)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.robustImageAccess = Unchecked.defaultof<VkBool32> && x.inlineUniformBlock = Unchecked.defaultof<VkBool32> && x.descriptorBindingInlineUniformBlockUpdateAfterBind = Unchecked.defaultof<VkBool32> && x.pipelineCreationCacheControl = Unchecked.defaultof<VkBool32> && x.privateData = Unchecked.defaultof<VkBool32> && x.shaderDemoteToHelperInvocation = Unchecked.defaultof<VkBool32> && x.shaderTerminateInvocation = Unchecked.defaultof<VkBool32> && x.subgroupSizeControl = Unchecked.defaultof<VkBool32> && x.computeFullSubgroups = Unchecked.defaultof<VkBool32> && x.synchronization2 = Unchecked.defaultof<VkBool32> && x.textureCompressionASTC_HDR = Unchecked.defaultof<VkBool32> && x.shaderZeroInitializeWorkgroupMemory = Unchecked.defaultof<VkBool32> && x.dynamicRendering = Unchecked.defaultof<VkBool32> && x.shaderIntegerDotProduct = Unchecked.defaultof<VkBool32> && x.maintenance4 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVulkan13Features(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "robustImageAccess = %A" x.robustImageAccess
                    sprintf "inlineUniformBlock = %A" x.inlineUniformBlock
                    sprintf "descriptorBindingInlineUniformBlockUpdateAfterBind = %A" x.descriptorBindingInlineUniformBlockUpdateAfterBind
                    sprintf "pipelineCreationCacheControl = %A" x.pipelineCreationCacheControl
                    sprintf "privateData = %A" x.privateData
                    sprintf "shaderDemoteToHelperInvocation = %A" x.shaderDemoteToHelperInvocation
                    sprintf "shaderTerminateInvocation = %A" x.shaderTerminateInvocation
                    sprintf "subgroupSizeControl = %A" x.subgroupSizeControl
                    sprintf "computeFullSubgroups = %A" x.computeFullSubgroups
                    sprintf "synchronization2 = %A" x.synchronization2
                    sprintf "textureCompressionASTC_HDR = %A" x.textureCompressionASTC_HDR
                    sprintf "shaderZeroInitializeWorkgroupMemory = %A" x.shaderZeroInitializeWorkgroupMemory
                    sprintf "dynamicRendering = %A" x.dynamicRendering
                    sprintf "shaderIntegerDotProduct = %A" x.shaderIntegerDotProduct
                    sprintf "maintenance4 = %A" x.maintenance4
                ] |> sprintf "VkPhysicalDeviceVulkan13Features { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVulkan13Properties =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public minSubgroupSize : uint32
            val mutable public maxSubgroupSize : uint32
            val mutable public maxComputeWorkgroupSubgroups : uint32
            val mutable public requiredSubgroupSizeStages : VkShaderStageFlags
            val mutable public maxInlineUniformBlockSize : uint32
            val mutable public maxPerStageDescriptorInlineUniformBlocks : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks : uint32
            val mutable public maxDescriptorSetInlineUniformBlocks : uint32
            val mutable public maxDescriptorSetUpdateAfterBindInlineUniformBlocks : uint32
            val mutable public maxInlineUniformTotalSize : uint32
            val mutable public integerDotProduct8BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct8BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct8BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct4x8BitPackedUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct4x8BitPackedSignedAccelerated : VkBool32
            val mutable public integerDotProduct4x8BitPackedMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct16BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct16BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct16BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct32BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct32BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct32BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProduct64BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProduct64BitSignedAccelerated : VkBool32
            val mutable public integerDotProduct64BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating8BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating8BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating16BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating16BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating32BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating32BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating64BitUnsignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating64BitSignedAccelerated : VkBool32
            val mutable public integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated : VkBool32
            val mutable public storageTexelBufferOffsetAlignmentBytes : VkDeviceSize
            val mutable public storageTexelBufferOffsetSingleTexelAlignment : VkBool32
            val mutable public uniformTexelBufferOffsetAlignmentBytes : VkDeviceSize
            val mutable public uniformTexelBufferOffsetSingleTexelAlignment : VkBool32
            val mutable public maxBufferSize : VkDeviceSize

            new(pNext : nativeint, minSubgroupSize : uint32, maxSubgroupSize : uint32, maxComputeWorkgroupSubgroups : uint32, requiredSubgroupSizeStages : VkShaderStageFlags, maxInlineUniformBlockSize : uint32, maxPerStageDescriptorInlineUniformBlocks : uint32, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks : uint32, maxDescriptorSetInlineUniformBlocks : uint32, maxDescriptorSetUpdateAfterBindInlineUniformBlocks : uint32, maxInlineUniformTotalSize : uint32, integerDotProduct8BitUnsignedAccelerated : VkBool32, integerDotProduct8BitSignedAccelerated : VkBool32, integerDotProduct8BitMixedSignednessAccelerated : VkBool32, integerDotProduct4x8BitPackedUnsignedAccelerated : VkBool32, integerDotProduct4x8BitPackedSignedAccelerated : VkBool32, integerDotProduct4x8BitPackedMixedSignednessAccelerated : VkBool32, integerDotProduct16BitUnsignedAccelerated : VkBool32, integerDotProduct16BitSignedAccelerated : VkBool32, integerDotProduct16BitMixedSignednessAccelerated : VkBool32, integerDotProduct32BitUnsignedAccelerated : VkBool32, integerDotProduct32BitSignedAccelerated : VkBool32, integerDotProduct32BitMixedSignednessAccelerated : VkBool32, integerDotProduct64BitUnsignedAccelerated : VkBool32, integerDotProduct64BitSignedAccelerated : VkBool32, integerDotProduct64BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating8BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating16BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating32BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating64BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated : VkBool32, storageTexelBufferOffsetAlignmentBytes : VkDeviceSize, storageTexelBufferOffsetSingleTexelAlignment : VkBool32, uniformTexelBufferOffsetAlignmentBytes : VkDeviceSize, uniformTexelBufferOffsetSingleTexelAlignment : VkBool32, maxBufferSize : VkDeviceSize) =
                {
                    sType = 54u
                    pNext = pNext
                    minSubgroupSize = minSubgroupSize
                    maxSubgroupSize = maxSubgroupSize
                    maxComputeWorkgroupSubgroups = maxComputeWorkgroupSubgroups
                    requiredSubgroupSizeStages = requiredSubgroupSizeStages
                    maxInlineUniformBlockSize = maxInlineUniformBlockSize
                    maxPerStageDescriptorInlineUniformBlocks = maxPerStageDescriptorInlineUniformBlocks
                    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
                    maxDescriptorSetInlineUniformBlocks = maxDescriptorSetInlineUniformBlocks
                    maxDescriptorSetUpdateAfterBindInlineUniformBlocks = maxDescriptorSetUpdateAfterBindInlineUniformBlocks
                    maxInlineUniformTotalSize = maxInlineUniformTotalSize
                    integerDotProduct8BitUnsignedAccelerated = integerDotProduct8BitUnsignedAccelerated
                    integerDotProduct8BitSignedAccelerated = integerDotProduct8BitSignedAccelerated
                    integerDotProduct8BitMixedSignednessAccelerated = integerDotProduct8BitMixedSignednessAccelerated
                    integerDotProduct4x8BitPackedUnsignedAccelerated = integerDotProduct4x8BitPackedUnsignedAccelerated
                    integerDotProduct4x8BitPackedSignedAccelerated = integerDotProduct4x8BitPackedSignedAccelerated
                    integerDotProduct4x8BitPackedMixedSignednessAccelerated = integerDotProduct4x8BitPackedMixedSignednessAccelerated
                    integerDotProduct16BitUnsignedAccelerated = integerDotProduct16BitUnsignedAccelerated
                    integerDotProduct16BitSignedAccelerated = integerDotProduct16BitSignedAccelerated
                    integerDotProduct16BitMixedSignednessAccelerated = integerDotProduct16BitMixedSignednessAccelerated
                    integerDotProduct32BitUnsignedAccelerated = integerDotProduct32BitUnsignedAccelerated
                    integerDotProduct32BitSignedAccelerated = integerDotProduct32BitSignedAccelerated
                    integerDotProduct32BitMixedSignednessAccelerated = integerDotProduct32BitMixedSignednessAccelerated
                    integerDotProduct64BitUnsignedAccelerated = integerDotProduct64BitUnsignedAccelerated
                    integerDotProduct64BitSignedAccelerated = integerDotProduct64BitSignedAccelerated
                    integerDotProduct64BitMixedSignednessAccelerated = integerDotProduct64BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = integerDotProductAccumulatingSaturating8BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating8BitSignedAccelerated = integerDotProductAccumulatingSaturating8BitSignedAccelerated
                    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated
                    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated
                    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = integerDotProductAccumulatingSaturating16BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating16BitSignedAccelerated = integerDotProductAccumulatingSaturating16BitSignedAccelerated
                    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = integerDotProductAccumulatingSaturating32BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating32BitSignedAccelerated = integerDotProductAccumulatingSaturating32BitSignedAccelerated
                    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated
                    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = integerDotProductAccumulatingSaturating64BitUnsignedAccelerated
                    integerDotProductAccumulatingSaturating64BitSignedAccelerated = integerDotProductAccumulatingSaturating64BitSignedAccelerated
                    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated
                    storageTexelBufferOffsetAlignmentBytes = storageTexelBufferOffsetAlignmentBytes
                    storageTexelBufferOffsetSingleTexelAlignment = storageTexelBufferOffsetSingleTexelAlignment
                    uniformTexelBufferOffsetAlignmentBytes = uniformTexelBufferOffsetAlignmentBytes
                    uniformTexelBufferOffsetSingleTexelAlignment = uniformTexelBufferOffsetSingleTexelAlignment
                    maxBufferSize = maxBufferSize
                }

            new(minSubgroupSize : uint32, maxSubgroupSize : uint32, maxComputeWorkgroupSubgroups : uint32, requiredSubgroupSizeStages : VkShaderStageFlags, maxInlineUniformBlockSize : uint32, maxPerStageDescriptorInlineUniformBlocks : uint32, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks : uint32, maxDescriptorSetInlineUniformBlocks : uint32, maxDescriptorSetUpdateAfterBindInlineUniformBlocks : uint32, maxInlineUniformTotalSize : uint32, integerDotProduct8BitUnsignedAccelerated : VkBool32, integerDotProduct8BitSignedAccelerated : VkBool32, integerDotProduct8BitMixedSignednessAccelerated : VkBool32, integerDotProduct4x8BitPackedUnsignedAccelerated : VkBool32, integerDotProduct4x8BitPackedSignedAccelerated : VkBool32, integerDotProduct4x8BitPackedMixedSignednessAccelerated : VkBool32, integerDotProduct16BitUnsignedAccelerated : VkBool32, integerDotProduct16BitSignedAccelerated : VkBool32, integerDotProduct16BitMixedSignednessAccelerated : VkBool32, integerDotProduct32BitUnsignedAccelerated : VkBool32, integerDotProduct32BitSignedAccelerated : VkBool32, integerDotProduct32BitMixedSignednessAccelerated : VkBool32, integerDotProduct64BitUnsignedAccelerated : VkBool32, integerDotProduct64BitSignedAccelerated : VkBool32, integerDotProduct64BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating8BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating16BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating32BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated : VkBool32, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating64BitSignedAccelerated : VkBool32, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated : VkBool32, storageTexelBufferOffsetAlignmentBytes : VkDeviceSize, storageTexelBufferOffsetSingleTexelAlignment : VkBool32, uniformTexelBufferOffsetAlignmentBytes : VkDeviceSize, uniformTexelBufferOffsetSingleTexelAlignment : VkBool32, maxBufferSize : VkDeviceSize) =
                VkPhysicalDeviceVulkan13Properties(Unchecked.defaultof<nativeint>, minSubgroupSize, maxSubgroupSize, maxComputeWorkgroupSubgroups, requiredSubgroupSizeStages, maxInlineUniformBlockSize, maxPerStageDescriptorInlineUniformBlocks, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, maxDescriptorSetInlineUniformBlocks, maxDescriptorSetUpdateAfterBindInlineUniformBlocks, maxInlineUniformTotalSize, integerDotProduct8BitUnsignedAccelerated, integerDotProduct8BitSignedAccelerated, integerDotProduct8BitMixedSignednessAccelerated, integerDotProduct4x8BitPackedUnsignedAccelerated, integerDotProduct4x8BitPackedSignedAccelerated, integerDotProduct4x8BitPackedMixedSignednessAccelerated, integerDotProduct16BitUnsignedAccelerated, integerDotProduct16BitSignedAccelerated, integerDotProduct16BitMixedSignednessAccelerated, integerDotProduct32BitUnsignedAccelerated, integerDotProduct32BitSignedAccelerated, integerDotProduct32BitMixedSignednessAccelerated, integerDotProduct64BitUnsignedAccelerated, integerDotProduct64BitSignedAccelerated, integerDotProduct64BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, integerDotProductAccumulatingSaturating8BitSignedAccelerated, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, integerDotProductAccumulatingSaturating16BitSignedAccelerated, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, integerDotProductAccumulatingSaturating32BitSignedAccelerated, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, integerDotProductAccumulatingSaturating64BitSignedAccelerated, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated, storageTexelBufferOffsetAlignmentBytes, storageTexelBufferOffsetSingleTexelAlignment, uniformTexelBufferOffsetAlignmentBytes, uniformTexelBufferOffsetSingleTexelAlignment, maxBufferSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.minSubgroupSize = Unchecked.defaultof<uint32> && x.maxSubgroupSize = Unchecked.defaultof<uint32> && x.maxComputeWorkgroupSubgroups = Unchecked.defaultof<uint32> && x.requiredSubgroupSizeStages = Unchecked.defaultof<VkShaderStageFlags> && x.maxInlineUniformBlockSize = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxDescriptorSetInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = Unchecked.defaultof<uint32> && x.maxInlineUniformTotalSize = Unchecked.defaultof<uint32> && x.integerDotProduct8BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct8BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct8BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct4x8BitPackedUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct4x8BitPackedSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct4x8BitPackedMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct16BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct16BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct16BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct32BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct32BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct32BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct64BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct64BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProduct64BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating8BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating16BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating32BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating64BitSignedAccelerated = Unchecked.defaultof<VkBool32> && x.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = Unchecked.defaultof<VkBool32> && x.storageTexelBufferOffsetAlignmentBytes = Unchecked.defaultof<VkDeviceSize> && x.storageTexelBufferOffsetSingleTexelAlignment = Unchecked.defaultof<VkBool32> && x.uniformTexelBufferOffsetAlignmentBytes = Unchecked.defaultof<VkDeviceSize> && x.uniformTexelBufferOffsetSingleTexelAlignment = Unchecked.defaultof<VkBool32> && x.maxBufferSize = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkPhysicalDeviceVulkan13Properties(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "minSubgroupSize = %A" x.minSubgroupSize
                    sprintf "maxSubgroupSize = %A" x.maxSubgroupSize
                    sprintf "maxComputeWorkgroupSubgroups = %A" x.maxComputeWorkgroupSubgroups
                    sprintf "requiredSubgroupSizeStages = %A" x.requiredSubgroupSizeStages
                    sprintf "maxInlineUniformBlockSize = %A" x.maxInlineUniformBlockSize
                    sprintf "maxPerStageDescriptorInlineUniformBlocks = %A" x.maxPerStageDescriptorInlineUniformBlocks
                    sprintf "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = %A" x.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
                    sprintf "maxDescriptorSetInlineUniformBlocks = %A" x.maxDescriptorSetInlineUniformBlocks
                    sprintf "maxDescriptorSetUpdateAfterBindInlineUniformBlocks = %A" x.maxDescriptorSetUpdateAfterBindInlineUniformBlocks
                    sprintf "maxInlineUniformTotalSize = %A" x.maxInlineUniformTotalSize
                    sprintf "integerDotProduct8BitUnsignedAccelerated = %A" x.integerDotProduct8BitUnsignedAccelerated
                    sprintf "integerDotProduct8BitSignedAccelerated = %A" x.integerDotProduct8BitSignedAccelerated
                    sprintf "integerDotProduct8BitMixedSignednessAccelerated = %A" x.integerDotProduct8BitMixedSignednessAccelerated
                    sprintf "integerDotProduct4x8BitPackedUnsignedAccelerated = %A" x.integerDotProduct4x8BitPackedUnsignedAccelerated
                    sprintf "integerDotProduct4x8BitPackedSignedAccelerated = %A" x.integerDotProduct4x8BitPackedSignedAccelerated
                    sprintf "integerDotProduct4x8BitPackedMixedSignednessAccelerated = %A" x.integerDotProduct4x8BitPackedMixedSignednessAccelerated
                    sprintf "integerDotProduct16BitUnsignedAccelerated = %A" x.integerDotProduct16BitUnsignedAccelerated
                    sprintf "integerDotProduct16BitSignedAccelerated = %A" x.integerDotProduct16BitSignedAccelerated
                    sprintf "integerDotProduct16BitMixedSignednessAccelerated = %A" x.integerDotProduct16BitMixedSignednessAccelerated
                    sprintf "integerDotProduct32BitUnsignedAccelerated = %A" x.integerDotProduct32BitUnsignedAccelerated
                    sprintf "integerDotProduct32BitSignedAccelerated = %A" x.integerDotProduct32BitSignedAccelerated
                    sprintf "integerDotProduct32BitMixedSignednessAccelerated = %A" x.integerDotProduct32BitMixedSignednessAccelerated
                    sprintf "integerDotProduct64BitUnsignedAccelerated = %A" x.integerDotProduct64BitUnsignedAccelerated
                    sprintf "integerDotProduct64BitSignedAccelerated = %A" x.integerDotProduct64BitSignedAccelerated
                    sprintf "integerDotProduct64BitMixedSignednessAccelerated = %A" x.integerDotProduct64BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating8BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating8BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating16BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating16BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating32BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating32BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated
                    sprintf "integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = %A" x.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating64BitSignedAccelerated = %A" x.integerDotProductAccumulatingSaturating64BitSignedAccelerated
                    sprintf "integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = %A" x.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated
                    sprintf "storageTexelBufferOffsetAlignmentBytes = %A" x.storageTexelBufferOffsetAlignmentBytes
                    sprintf "storageTexelBufferOffsetSingleTexelAlignment = %A" x.storageTexelBufferOffsetSingleTexelAlignment
                    sprintf "uniformTexelBufferOffsetAlignmentBytes = %A" x.uniformTexelBufferOffsetAlignmentBytes
                    sprintf "uniformTexelBufferOffsetSingleTexelAlignment = %A" x.uniformTexelBufferOffsetSingleTexelAlignment
                    sprintf "maxBufferSize = %A" x.maxBufferSize
                ] |> sprintf "VkPhysicalDeviceVulkan13Properties { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderZeroInitializeWorkgroupMemory : VkBool32

            new(pNext : nativeint, shaderZeroInitializeWorkgroupMemory : VkBool32) =
                {
                    sType = 1000325000u
                    pNext = pNext
                    shaderZeroInitializeWorkgroupMemory = shaderZeroInitializeWorkgroupMemory
                }

            new(shaderZeroInitializeWorkgroupMemory : VkBool32) =
                VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(Unchecked.defaultof<nativeint>, shaderZeroInitializeWorkgroupMemory)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderZeroInitializeWorkgroupMemory = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderZeroInitializeWorkgroupMemory = %A" x.shaderZeroInitializeWorkgroupMemory
                ] |> sprintf "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineCreationFeedback =
        struct
            val mutable public flags : VkPipelineCreationFeedbackFlags
            val mutable public duration : uint64

            new(flags : VkPipelineCreationFeedbackFlags, duration : uint64) =
                {
                    flags = flags
                    duration = duration
                }

            member x.IsEmpty =
                x.flags = Unchecked.defaultof<VkPipelineCreationFeedbackFlags> && x.duration = Unchecked.defaultof<uint64>

            static member Empty =
                VkPipelineCreationFeedback(Unchecked.defaultof<VkPipelineCreationFeedbackFlags>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "flags = %A" x.flags
                    sprintf "duration = %A" x.duration
                ] |> sprintf "VkPipelineCreationFeedback { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineCreationFeedbackCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pPipelineCreationFeedback : nativeptr<VkPipelineCreationFeedback>
            val mutable public pipelineStageCreationFeedbackCount : uint32
            val mutable public pPipelineStageCreationFeedbacks : nativeptr<VkPipelineCreationFeedback>

            new(pNext : nativeint, pPipelineCreationFeedback : nativeptr<VkPipelineCreationFeedback>, pipelineStageCreationFeedbackCount : uint32, pPipelineStageCreationFeedbacks : nativeptr<VkPipelineCreationFeedback>) =
                {
                    sType = 1000192000u
                    pNext = pNext
                    pPipelineCreationFeedback = pPipelineCreationFeedback
                    pipelineStageCreationFeedbackCount = pipelineStageCreationFeedbackCount
                    pPipelineStageCreationFeedbacks = pPipelineStageCreationFeedbacks
                }

            new(pPipelineCreationFeedback : nativeptr<VkPipelineCreationFeedback>, pipelineStageCreationFeedbackCount : uint32, pPipelineStageCreationFeedbacks : nativeptr<VkPipelineCreationFeedback>) =
                VkPipelineCreationFeedbackCreateInfo(Unchecked.defaultof<nativeint>, pPipelineCreationFeedback, pipelineStageCreationFeedbackCount, pPipelineStageCreationFeedbacks)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pPipelineCreationFeedback = Unchecked.defaultof<nativeptr<VkPipelineCreationFeedback>> && x.pipelineStageCreationFeedbackCount = Unchecked.defaultof<uint32> && x.pPipelineStageCreationFeedbacks = Unchecked.defaultof<nativeptr<VkPipelineCreationFeedback>>

            static member Empty =
                VkPipelineCreationFeedbackCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkPipelineCreationFeedback>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineCreationFeedback>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pPipelineCreationFeedback = %A" x.pPipelineCreationFeedback
                    sprintf "pipelineStageCreationFeedbackCount = %A" x.pipelineStageCreationFeedbackCount
                    sprintf "pPipelineStageCreationFeedbacks = %A" x.pPipelineStageCreationFeedbacks
                ] |> sprintf "VkPipelineCreationFeedbackCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineRenderingCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public viewMask : uint32
            val mutable public colorAttachmentCount : uint32
            val mutable public pColorAttachmentFormats : nativeptr<VkFormat>
            val mutable public depthAttachmentFormat : VkFormat
            val mutable public stencilAttachmentFormat : VkFormat

            new(pNext : nativeint, viewMask : uint32, colorAttachmentCount : uint32, pColorAttachmentFormats : nativeptr<VkFormat>, depthAttachmentFormat : VkFormat, stencilAttachmentFormat : VkFormat) =
                {
                    sType = 1000044002u
                    pNext = pNext
                    viewMask = viewMask
                    colorAttachmentCount = colorAttachmentCount
                    pColorAttachmentFormats = pColorAttachmentFormats
                    depthAttachmentFormat = depthAttachmentFormat
                    stencilAttachmentFormat = stencilAttachmentFormat
                }

            new(viewMask : uint32, colorAttachmentCount : uint32, pColorAttachmentFormats : nativeptr<VkFormat>, depthAttachmentFormat : VkFormat, stencilAttachmentFormat : VkFormat) =
                VkPipelineRenderingCreateInfo(Unchecked.defaultof<nativeint>, viewMask, colorAttachmentCount, pColorAttachmentFormats, depthAttachmentFormat, stencilAttachmentFormat)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.viewMask = Unchecked.defaultof<uint32> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachmentFormats = Unchecked.defaultof<nativeptr<VkFormat>> && x.depthAttachmentFormat = Unchecked.defaultof<VkFormat> && x.stencilAttachmentFormat = Unchecked.defaultof<VkFormat>

            static member Empty =
                VkPipelineRenderingCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkFormat>>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkFormat>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "viewMask = %A" x.viewMask
                    sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                    sprintf "pColorAttachmentFormats = %A" x.pColorAttachmentFormats
                    sprintf "depthAttachmentFormat = %A" x.depthAttachmentFormat
                    sprintf "stencilAttachmentFormat = %A" x.stencilAttachmentFormat
                ] |> sprintf "VkPipelineRenderingCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineShaderStageRequiredSubgroupSizeCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public requiredSubgroupSize : uint32

            new(pNext : nativeint, requiredSubgroupSize : uint32) =
                {
                    sType = 1000225001u
                    pNext = pNext
                    requiredSubgroupSize = requiredSubgroupSize
                }

            new(requiredSubgroupSize : uint32) =
                VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(Unchecked.defaultof<nativeint>, requiredSubgroupSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.requiredSubgroupSize = Unchecked.defaultof<uint32>

            static member Empty =
                VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "requiredSubgroupSize = %A" x.requiredSubgroupSize
                ] |> sprintf "VkPipelineShaderStageRequiredSubgroupSizeCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPrivateDataSlotCreateInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPrivateDataSlotCreateFlags

            new(pNext : nativeint, flags : VkPrivateDataSlotCreateFlags) =
                {
                    sType = 1000295002u
                    pNext = pNext
                    flags = flags
                }

            new(flags : VkPrivateDataSlotCreateFlags) =
                VkPrivateDataSlotCreateInfo(Unchecked.defaultof<nativeint>, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPrivateDataSlotCreateFlags>

            static member Empty =
                VkPrivateDataSlotCreateInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPrivateDataSlotCreateFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkPrivateDataSlotCreateInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderingAttachmentInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageView : VkImageView
            val mutable public imageLayout : VkImageLayout
            val mutable public resolveMode : VkResolveModeFlags
            val mutable public resolveImageView : VkImageView
            val mutable public resolveImageLayout : VkImageLayout
            val mutable public loadOp : VkAttachmentLoadOp
            val mutable public storeOp : VkAttachmentStoreOp
            val mutable public clearValue : VkClearValue

            new(pNext : nativeint, imageView : VkImageView, imageLayout : VkImageLayout, resolveMode : VkResolveModeFlags, resolveImageView : VkImageView, resolveImageLayout : VkImageLayout, loadOp : VkAttachmentLoadOp, storeOp : VkAttachmentStoreOp, clearValue : VkClearValue) =
                {
                    sType = 1000044001u
                    pNext = pNext
                    imageView = imageView
                    imageLayout = imageLayout
                    resolveMode = resolveMode
                    resolveImageView = resolveImageView
                    resolveImageLayout = resolveImageLayout
                    loadOp = loadOp
                    storeOp = storeOp
                    clearValue = clearValue
                }

            new(imageView : VkImageView, imageLayout : VkImageLayout, resolveMode : VkResolveModeFlags, resolveImageView : VkImageView, resolveImageLayout : VkImageLayout, loadOp : VkAttachmentLoadOp, storeOp : VkAttachmentStoreOp, clearValue : VkClearValue) =
                VkRenderingAttachmentInfo(Unchecked.defaultof<nativeint>, imageView, imageLayout, resolveMode, resolveImageView, resolveImageLayout, loadOp, storeOp, clearValue)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageView = Unchecked.defaultof<VkImageView> && x.imageLayout = Unchecked.defaultof<VkImageLayout> && x.resolveMode = Unchecked.defaultof<VkResolveModeFlags> && x.resolveImageView = Unchecked.defaultof<VkImageView> && x.resolveImageLayout = Unchecked.defaultof<VkImageLayout> && x.loadOp = Unchecked.defaultof<VkAttachmentLoadOp> && x.storeOp = Unchecked.defaultof<VkAttachmentStoreOp> && x.clearValue = Unchecked.defaultof<VkClearValue>

            static member Empty =
                VkRenderingAttachmentInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkResolveModeFlags>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkAttachmentLoadOp>, Unchecked.defaultof<VkAttachmentStoreOp>, Unchecked.defaultof<VkClearValue>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageView = %A" x.imageView
                    sprintf "imageLayout = %A" x.imageLayout
                    sprintf "resolveMode = %A" x.resolveMode
                    sprintf "resolveImageView = %A" x.resolveImageView
                    sprintf "resolveImageLayout = %A" x.resolveImageLayout
                    sprintf "loadOp = %A" x.loadOp
                    sprintf "storeOp = %A" x.storeOp
                    sprintf "clearValue = %A" x.clearValue
                ] |> sprintf "VkRenderingAttachmentInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderingInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkRenderingFlags
            val mutable public renderArea : VkRect2D
            val mutable public layerCount : uint32
            val mutable public viewMask : uint32
            val mutable public colorAttachmentCount : uint32
            val mutable public pColorAttachments : nativeptr<VkRenderingAttachmentInfo>
            val mutable public pDepthAttachment : nativeptr<VkRenderingAttachmentInfo>
            val mutable public pStencilAttachment : nativeptr<VkRenderingAttachmentInfo>

            new(pNext : nativeint, flags : VkRenderingFlags, renderArea : VkRect2D, layerCount : uint32, viewMask : uint32, colorAttachmentCount : uint32, pColorAttachments : nativeptr<VkRenderingAttachmentInfo>, pDepthAttachment : nativeptr<VkRenderingAttachmentInfo>, pStencilAttachment : nativeptr<VkRenderingAttachmentInfo>) =
                {
                    sType = 1000044000u
                    pNext = pNext
                    flags = flags
                    renderArea = renderArea
                    layerCount = layerCount
                    viewMask = viewMask
                    colorAttachmentCount = colorAttachmentCount
                    pColorAttachments = pColorAttachments
                    pDepthAttachment = pDepthAttachment
                    pStencilAttachment = pStencilAttachment
                }

            new(flags : VkRenderingFlags, renderArea : VkRect2D, layerCount : uint32, viewMask : uint32, colorAttachmentCount : uint32, pColorAttachments : nativeptr<VkRenderingAttachmentInfo>, pDepthAttachment : nativeptr<VkRenderingAttachmentInfo>, pStencilAttachment : nativeptr<VkRenderingAttachmentInfo>) =
                VkRenderingInfo(Unchecked.defaultof<nativeint>, flags, renderArea, layerCount, viewMask, colorAttachmentCount, pColorAttachments, pDepthAttachment, pStencilAttachment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkRenderingFlags> && x.renderArea = Unchecked.defaultof<VkRect2D> && x.layerCount = Unchecked.defaultof<uint32> && x.viewMask = Unchecked.defaultof<uint32> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachments = Unchecked.defaultof<nativeptr<VkRenderingAttachmentInfo>> && x.pDepthAttachment = Unchecked.defaultof<nativeptr<VkRenderingAttachmentInfo>> && x.pStencilAttachment = Unchecked.defaultof<nativeptr<VkRenderingAttachmentInfo>>

            static member Empty =
                VkRenderingInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderingFlags>, Unchecked.defaultof<VkRect2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRenderingAttachmentInfo>>, Unchecked.defaultof<nativeptr<VkRenderingAttachmentInfo>>, Unchecked.defaultof<nativeptr<VkRenderingAttachmentInfo>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "renderArea = %A" x.renderArea
                    sprintf "layerCount = %A" x.layerCount
                    sprintf "viewMask = %A" x.viewMask
                    sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                    sprintf "pColorAttachments = %A" x.pColorAttachments
                    sprintf "pDepthAttachment = %A" x.pDepthAttachment
                    sprintf "pStencilAttachment = %A" x.pStencilAttachment
                ] |> sprintf "VkRenderingInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkResolveImageInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcImage : VkImage
            val mutable public srcImageLayout : VkImageLayout
            val mutable public dstImage : VkImage
            val mutable public dstImageLayout : VkImageLayout
            val mutable public regionCount : uint32
            val mutable public pRegions : nativeptr<VkImageResolve2>

            new(pNext : nativeint, srcImage : VkImage, srcImageLayout : VkImageLayout, dstImage : VkImage, dstImageLayout : VkImageLayout, regionCount : uint32, pRegions : nativeptr<VkImageResolve2>) =
                {
                    sType = 1000337005u
                    pNext = pNext
                    srcImage = srcImage
                    srcImageLayout = srcImageLayout
                    dstImage = dstImage
                    dstImageLayout = dstImageLayout
                    regionCount = regionCount
                    pRegions = pRegions
                }

            new(srcImage : VkImage, srcImageLayout : VkImageLayout, dstImage : VkImage, dstImageLayout : VkImageLayout, regionCount : uint32, pRegions : nativeptr<VkImageResolve2>) =
                VkResolveImageInfo2(Unchecked.defaultof<nativeint>, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcImage = Unchecked.defaultof<VkImage> && x.srcImageLayout = Unchecked.defaultof<VkImageLayout> && x.dstImage = Unchecked.defaultof<VkImage> && x.dstImageLayout = Unchecked.defaultof<VkImageLayout> && x.regionCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkImageResolve2>>

            static member Empty =
                VkResolveImageInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageResolve2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcImage = %A" x.srcImage
                    sprintf "srcImageLayout = %A" x.srcImageLayout
                    sprintf "dstImage = %A" x.dstImage
                    sprintf "dstImageLayout = %A" x.dstImageLayout
                    sprintf "regionCount = %A" x.regionCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkResolveImageInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSemaphoreSubmitInfo =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphore : VkSemaphore
            val mutable public value : uint64
            val mutable public stageMask : VkPipelineStageFlags2
            val mutable public deviceIndex : uint32

            new(pNext : nativeint, semaphore : VkSemaphore, value : uint64, stageMask : VkPipelineStageFlags2, deviceIndex : uint32) =
                {
                    sType = 1000314005u
                    pNext = pNext
                    semaphore = semaphore
                    value = value
                    stageMask = stageMask
                    deviceIndex = deviceIndex
                }

            new(semaphore : VkSemaphore, value : uint64, stageMask : VkPipelineStageFlags2, deviceIndex : uint32) =
                VkSemaphoreSubmitInfo(Unchecked.defaultof<nativeint>, semaphore, value, stageMask, deviceIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.value = Unchecked.defaultof<uint64> && x.stageMask = Unchecked.defaultof<VkPipelineStageFlags2> && x.deviceIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkSemaphoreSubmitInfo(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphore = %A" x.semaphore
                    sprintf "value = %A" x.value
                    sprintf "stageMask = %A" x.stageMask
                    sprintf "deviceIndex = %A" x.deviceIndex
                ] |> sprintf "VkSemaphoreSubmitInfo { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubmitInfo2 =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkSubmitFlags
            val mutable public waitSemaphoreInfoCount : uint32
            val mutable public pWaitSemaphoreInfos : nativeptr<VkSemaphoreSubmitInfo>
            val mutable public commandBufferInfoCount : uint32
            val mutable public pCommandBufferInfos : nativeptr<VkCommandBufferSubmitInfo>
            val mutable public signalSemaphoreInfoCount : uint32
            val mutable public pSignalSemaphoreInfos : nativeptr<VkSemaphoreSubmitInfo>

            new(pNext : nativeint, flags : VkSubmitFlags, waitSemaphoreInfoCount : uint32, pWaitSemaphoreInfos : nativeptr<VkSemaphoreSubmitInfo>, commandBufferInfoCount : uint32, pCommandBufferInfos : nativeptr<VkCommandBufferSubmitInfo>, signalSemaphoreInfoCount : uint32, pSignalSemaphoreInfos : nativeptr<VkSemaphoreSubmitInfo>) =
                {
                    sType = 1000314004u
                    pNext = pNext
                    flags = flags
                    waitSemaphoreInfoCount = waitSemaphoreInfoCount
                    pWaitSemaphoreInfos = pWaitSemaphoreInfos
                    commandBufferInfoCount = commandBufferInfoCount
                    pCommandBufferInfos = pCommandBufferInfos
                    signalSemaphoreInfoCount = signalSemaphoreInfoCount
                    pSignalSemaphoreInfos = pSignalSemaphoreInfos
                }

            new(flags : VkSubmitFlags, waitSemaphoreInfoCount : uint32, pWaitSemaphoreInfos : nativeptr<VkSemaphoreSubmitInfo>, commandBufferInfoCount : uint32, pCommandBufferInfos : nativeptr<VkCommandBufferSubmitInfo>, signalSemaphoreInfoCount : uint32, pSignalSemaphoreInfos : nativeptr<VkSemaphoreSubmitInfo>) =
                VkSubmitInfo2(Unchecked.defaultof<nativeint>, flags, waitSemaphoreInfoCount, pWaitSemaphoreInfos, commandBufferInfoCount, pCommandBufferInfos, signalSemaphoreInfoCount, pSignalSemaphoreInfos)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkSubmitFlags> && x.waitSemaphoreInfoCount = Unchecked.defaultof<uint32> && x.pWaitSemaphoreInfos = Unchecked.defaultof<nativeptr<VkSemaphoreSubmitInfo>> && x.commandBufferInfoCount = Unchecked.defaultof<uint32> && x.pCommandBufferInfos = Unchecked.defaultof<nativeptr<VkCommandBufferSubmitInfo>> && x.signalSemaphoreInfoCount = Unchecked.defaultof<uint32> && x.pSignalSemaphoreInfos = Unchecked.defaultof<nativeptr<VkSemaphoreSubmitInfo>>

            static member Empty =
                VkSubmitInfo2(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSubmitFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphoreSubmitInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkCommandBufferSubmitInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphoreSubmitInfo>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "waitSemaphoreInfoCount = %A" x.waitSemaphoreInfoCount
                    sprintf "pWaitSemaphoreInfos = %A" x.pWaitSemaphoreInfos
                    sprintf "commandBufferInfoCount = %A" x.commandBufferInfoCount
                    sprintf "pCommandBufferInfos = %A" x.pCommandBufferInfos
                    sprintf "signalSemaphoreInfoCount = %A" x.signalSemaphoreInfoCount
                    sprintf "pSignalSemaphoreInfos = %A" x.pSignalSemaphoreInfos
                ] |> sprintf "VkSubmitInfo2 { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkWriteDescriptorSetInlineUniformBlock =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public dataSize : uint32
            val mutable public pData : nativeint

            new(pNext : nativeint, dataSize : uint32, pData : nativeint) =
                {
                    sType = 1000138002u
                    pNext = pNext
                    dataSize = dataSize
                    pData = pData
                }

            new(dataSize : uint32, pData : nativeint) =
                VkWriteDescriptorSetInlineUniformBlock(Unchecked.defaultof<nativeint>, dataSize, pData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.dataSize = Unchecked.defaultof<uint32> && x.pData = Unchecked.defaultof<nativeint>

            static member Empty =
                VkWriteDescriptorSetInlineUniformBlock(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "dataSize = %A" x.dataSize
                    sprintf "pData = %A" x.pData
                ] |> sprintf "VkWriteDescriptorSetInlineUniformBlock { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags with
              static member inline None = unbox<VkAccessFlags> 0
         type VkAttachmentStoreOp with
              static member inline None = unbox<VkAttachmentStoreOp> 1000301000
         type VkDescriptorType with
              static member inline InlineUniformBlock = unbox<VkDescriptorType> 1000138000
         type VkDynamicState with
              static member inline CullMode = unbox<VkDynamicState> 1000267000
              static member inline FrontFace = unbox<VkDynamicState> 1000267001
              static member inline PrimitiveTopology = unbox<VkDynamicState> 1000267002
              static member inline ViewportWithCount = unbox<VkDynamicState> 1000267003
              static member inline ScissorWithCount = unbox<VkDynamicState> 1000267004
              static member inline VertexInputBindingStride = unbox<VkDynamicState> 1000267005
              static member inline DepthTestEnable = unbox<VkDynamicState> 1000267006
              static member inline DepthWriteEnable = unbox<VkDynamicState> 1000267007
              static member inline DepthCompareOp = unbox<VkDynamicState> 1000267008
              static member inline DepthBoundsTestEnable = unbox<VkDynamicState> 1000267009
              static member inline StencilTestEnable = unbox<VkDynamicState> 1000267010
              static member inline StencilOp = unbox<VkDynamicState> 1000267011
              static member inline RasterizerDiscardEnable = unbox<VkDynamicState> 1000377001
              static member inline DepthBiasEnable = unbox<VkDynamicState> 1000377002
              static member inline PrimitiveRestartEnable = unbox<VkDynamicState> 1000377004
         type VkEventCreateFlags with
              static member inline DeviceOnlyBit = unbox<VkEventCreateFlags> 0x00000001
         type VkFormat with
              static member inline G8B8r82plane444Unorm = unbox<VkFormat> 1000330000
              static member inline G10x6B10x6r10x62plane444Unorm3pack16 = unbox<VkFormat> 1000330001
              static member inline G12x4B12x4r12x42plane444Unorm3pack16 = unbox<VkFormat> 1000330002
              static member inline G16B16r162plane444Unorm = unbox<VkFormat> 1000330003
              static member inline A4r4g4b4UnormPack16 = unbox<VkFormat> 1000340000
              static member inline A4b4g4r4UnormPack16 = unbox<VkFormat> 1000340001
              static member inline Astc44SfloatBlock = unbox<VkFormat> 1000066000
              static member inline Astc54SfloatBlock = unbox<VkFormat> 1000066001
              static member inline Astc55SfloatBlock = unbox<VkFormat> 1000066002
              static member inline Astc65SfloatBlock = unbox<VkFormat> 1000066003
              static member inline Astc66SfloatBlock = unbox<VkFormat> 1000066004
              static member inline Astc85SfloatBlock = unbox<VkFormat> 1000066005
              static member inline Astc86SfloatBlock = unbox<VkFormat> 1000066006
              static member inline Astc88SfloatBlock = unbox<VkFormat> 1000066007
              static member inline Astc105SfloatBlock = unbox<VkFormat> 1000066008
              static member inline Astc106SfloatBlock = unbox<VkFormat> 1000066009
              static member inline Astc108SfloatBlock = unbox<VkFormat> 1000066010
              static member inline Astc1010SfloatBlock = unbox<VkFormat> 1000066011
              static member inline Astc1210SfloatBlock = unbox<VkFormat> 1000066012
              static member inline Astc1212SfloatBlock = unbox<VkFormat> 1000066013
         type VkImageAspectFlags with
              static member inline None = unbox<VkImageAspectFlags> 0
         type VkImageLayout with
              static member inline ReadOnlyOptimal = unbox<VkImageLayout> 1000314000
              static member inline AttachmentOptimal = unbox<VkImageLayout> 1000314001
         type VkObjectType with
              static member inline PrivateDataSlot = unbox<VkObjectType> 1000295000
         type VkPipelineCacheCreateFlags with
              static member inline ExternallySynchronizedBit = unbox<VkPipelineCacheCreateFlags> 0x00000001
         type VkPipelineCreateFlags with
              static member inline FailOnPipelineCompileRequiredBit = unbox<VkPipelineCreateFlags> 0x00000100
              static member inline EarlyReturnOnFailureBit = unbox<VkPipelineCreateFlags> 0x00000200
         type VkPipelineShaderStageCreateFlags with
              static member inline AllowVaryingSubgroupSizeBit = unbox<VkPipelineShaderStageCreateFlags> 0x00000001
              static member inline RequireFullSubgroupsBit = unbox<VkPipelineShaderStageCreateFlags> 0x00000002
         type VkPipelineStageFlags with
              static member inline None = unbox<VkPipelineStageFlags> 0
         type VkResult with
              static member inline PipelineCompileRequired = unbox<VkResult> 1000297000

    module VkRaw =
        open VkRaw

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkCreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* pAllocator)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64 objectHandle, VkPrivateDataSlot privateDataSlot, uint64 data)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64 objectHandle, VkPrivateDataSlot privateDataSlot, uint64* pData)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkDependencyInfo* pDependencyInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32 eventCount, VkEvent* pEvents, VkDependencyInfo* pDependencyInfos)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32 query)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern VkResult vkQueueSubmit2(VkQueue queue, uint32 submitCount, VkSubmitInfo2* pSubmits, VkFence fence)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdCopyImage2(VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdBlitImage2(VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdResolveImage2(VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdBeginRendering(VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdEndRendering(VkCommandBuffer commandBuffer)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32 viewportCount, VkViewport* pViewports)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32 scissorCount, VkRect2D* pScissors)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32 firstBinding, uint32 bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDeviceBufferMemoryRequirements(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDeviceImageMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)

        [<DllImport(lib); SuppressUnmanagedCodeSecurity>]
        extern void vkGetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, uint32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)



module AMDBufferMarker =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_buffer_marker"
    let Number = 180


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdWriteBufferMarkerAMDDel = delegate of VkCommandBuffer * VkPipelineStageFlags * VkBuffer * VkDeviceSize * uint32 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading AMDBufferMarker")
            static let s_vkCmdWriteBufferMarkerAMDDel = VkRaw.vkImportInstanceDelegate<VkCmdWriteBufferMarkerAMDDel> "vkCmdWriteBufferMarkerAMD"
            static do Report.End(3) |> ignore
            static member vkCmdWriteBufferMarkerAMD = s_vkCmdWriteBufferMarkerAMDDel
        let vkCmdWriteBufferMarkerAMD(commandBuffer : VkCommandBuffer, pipelineStage : VkPipelineStageFlags, dstBuffer : VkBuffer, dstOffset : VkDeviceSize, marker : uint32) = Loader<unit>.vkCmdWriteBufferMarkerAMD.Invoke(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker)

module AMDDeviceCoherentMemory =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_device_coherent_memory"
    let Number = 230


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceCoherentMemoryFeaturesAMD =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceCoherentMemory : VkBool32

            new(pNext : nativeint, deviceCoherentMemory : VkBool32) =
                {
                    sType = 1000229000u
                    pNext = pNext
                    deviceCoherentMemory = deviceCoherentMemory
                }

            new(deviceCoherentMemory : VkBool32) =
                VkPhysicalDeviceCoherentMemoryFeaturesAMD(Unchecked.defaultof<nativeint>, deviceCoherentMemory)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceCoherentMemory = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceCoherentMemoryFeaturesAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceCoherentMemory = %A" x.deviceCoherentMemory
                ] |> sprintf "VkPhysicalDeviceCoherentMemoryFeaturesAMD { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkMemoryPropertyFlags with
              static member inline DeviceCoherentBitAmd = unbox<VkMemoryPropertyFlags> 0x00000040
              static member inline DeviceUncachedBitAmd = unbox<VkMemoryPropertyFlags> 0x00000080


module KHRGetPhysicalDeviceProperties2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_get_physical_device_properties2"
    let Number = 60


    type VkFormatProperties2KHR = VkFormatProperties2

    type VkImageFormatProperties2KHR = VkImageFormatProperties2

    type VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2

    type VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2

    type VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2

    type VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2

    type VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2

    type VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2

    type VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceFeatures2KHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceFeatures2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceProperties2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceFormatProperties2KHRDel = delegate of VkPhysicalDevice * VkFormat * nativeptr<VkFormatProperties2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceImageFormatProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceImageFormatInfo2> * nativeptr<VkImageFormatProperties2> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceQueueFamilyProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkQueueFamilyProperties2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceMemoryProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceMemoryProperties2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceSparseImageFormatProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceSparseImageFormatInfo2> * nativeptr<uint32> * nativeptr<VkSparseImageFormatProperties2> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRGetPhysicalDeviceProperties2")
            static let s_vkGetPhysicalDeviceFeatures2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceFeatures2KHRDel> "vkGetPhysicalDeviceFeatures2KHR"
            static let s_vkGetPhysicalDeviceProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceProperties2KHRDel> "vkGetPhysicalDeviceProperties2KHR"
            static let s_vkGetPhysicalDeviceFormatProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceFormatProperties2KHRDel> "vkGetPhysicalDeviceFormatProperties2KHR"
            static let s_vkGetPhysicalDeviceImageFormatProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceImageFormatProperties2KHRDel> "vkGetPhysicalDeviceImageFormatProperties2KHR"
            static let s_vkGetPhysicalDeviceQueueFamilyProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceQueueFamilyProperties2KHRDel> "vkGetPhysicalDeviceQueueFamilyProperties2KHR"
            static let s_vkGetPhysicalDeviceMemoryProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceMemoryProperties2KHRDel> "vkGetPhysicalDeviceMemoryProperties2KHR"
            static let s_vkGetPhysicalDeviceSparseImageFormatProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSparseImageFormatProperties2KHRDel> "vkGetPhysicalDeviceSparseImageFormatProperties2KHR"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceFeatures2KHR = s_vkGetPhysicalDeviceFeatures2KHRDel
            static member vkGetPhysicalDeviceProperties2KHR = s_vkGetPhysicalDeviceProperties2KHRDel
            static member vkGetPhysicalDeviceFormatProperties2KHR = s_vkGetPhysicalDeviceFormatProperties2KHRDel
            static member vkGetPhysicalDeviceImageFormatProperties2KHR = s_vkGetPhysicalDeviceImageFormatProperties2KHRDel
            static member vkGetPhysicalDeviceQueueFamilyProperties2KHR = s_vkGetPhysicalDeviceQueueFamilyProperties2KHRDel
            static member vkGetPhysicalDeviceMemoryProperties2KHR = s_vkGetPhysicalDeviceMemoryProperties2KHRDel
            static member vkGetPhysicalDeviceSparseImageFormatProperties2KHR = s_vkGetPhysicalDeviceSparseImageFormatProperties2KHRDel
        let vkGetPhysicalDeviceFeatures2KHR(physicalDevice : VkPhysicalDevice, pFeatures : nativeptr<VkPhysicalDeviceFeatures2>) = Loader<unit>.vkGetPhysicalDeviceFeatures2KHR.Invoke(physicalDevice, pFeatures)
        let vkGetPhysicalDeviceProperties2KHR(physicalDevice : VkPhysicalDevice, pProperties : nativeptr<VkPhysicalDeviceProperties2>) = Loader<unit>.vkGetPhysicalDeviceProperties2KHR.Invoke(physicalDevice, pProperties)
        let vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice : VkPhysicalDevice, format : VkFormat, pFormatProperties : nativeptr<VkFormatProperties2>) = Loader<unit>.vkGetPhysicalDeviceFormatProperties2KHR.Invoke(physicalDevice, format, pFormatProperties)
        let vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice : VkPhysicalDevice, pImageFormatInfo : nativeptr<VkPhysicalDeviceImageFormatInfo2>, pImageFormatProperties : nativeptr<VkImageFormatProperties2>) = Loader<unit>.vkGetPhysicalDeviceImageFormatProperties2KHR.Invoke(physicalDevice, pImageFormatInfo, pImageFormatProperties)
        let vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice : VkPhysicalDevice, pQueueFamilyPropertyCount : nativeptr<uint32>, pQueueFamilyProperties : nativeptr<VkQueueFamilyProperties2>) = Loader<unit>.vkGetPhysicalDeviceQueueFamilyProperties2KHR.Invoke(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties)
        let vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice : VkPhysicalDevice, pMemoryProperties : nativeptr<VkPhysicalDeviceMemoryProperties2>) = Loader<unit>.vkGetPhysicalDeviceMemoryProperties2KHR.Invoke(physicalDevice, pMemoryProperties)
        let vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice : VkPhysicalDevice, pFormatInfo : nativeptr<VkPhysicalDeviceSparseImageFormatInfo2>, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkSparseImageFormatProperties2>) = Loader<unit>.vkGetPhysicalDeviceSparseImageFormatProperties2KHR.Invoke(physicalDevice, pFormatInfo, pPropertyCount, pProperties)

module KHRSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_surface"
    let Number = 1



    [<StructLayout(LayoutKind.Sequential)>]
    type VkSurfaceKHR =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkSurfaceKHR(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<Flags>]
    type VkSurfaceTransformFlagsKHR =
        | All = 511
        | None = 0
        | IdentityBit = 0x00000001
        | Rotate90Bit = 0x00000002
        | Rotate180Bit = 0x00000004
        | Rotate270Bit = 0x00000008
        | HorizontalMirrorBit = 0x00000010
        | HorizontalMirrorRotate90Bit = 0x00000020
        | HorizontalMirrorRotate180Bit = 0x00000040
        | HorizontalMirrorRotate270Bit = 0x00000080
        | InheritBit = 0x00000100

    type VkPresentModeKHR =
        | Immediate = 0
        | Mailbox = 1
        | Fifo = 2
        | FifoRelaxed = 3

    type VkColorSpaceKHR =
        | SrgbNonlinear = 0

    [<Flags>]
    type VkCompositeAlphaFlagsKHR =
        | All = 15
        | None = 0
        | OpaqueBit = 0x00000001
        | PreMultipliedBit = 0x00000002
        | PostMultipliedBit = 0x00000004
        | InheritBit = 0x00000008


    [<StructLayout(LayoutKind.Sequential)>]
    type VkSurfaceCapabilitiesKHR =
        struct
            val mutable public minImageCount : uint32
            val mutable public maxImageCount : uint32
            val mutable public currentExtent : VkExtent2D
            val mutable public minImageExtent : VkExtent2D
            val mutable public maxImageExtent : VkExtent2D
            val mutable public maxImageArrayLayers : uint32
            val mutable public supportedTransforms : VkSurfaceTransformFlagsKHR
            val mutable public currentTransform : VkSurfaceTransformFlagsKHR
            val mutable public supportedCompositeAlpha : VkCompositeAlphaFlagsKHR
            val mutable public supportedUsageFlags : VkImageUsageFlags

            new(minImageCount : uint32, maxImageCount : uint32, currentExtent : VkExtent2D, minImageExtent : VkExtent2D, maxImageExtent : VkExtent2D, maxImageArrayLayers : uint32, supportedTransforms : VkSurfaceTransformFlagsKHR, currentTransform : VkSurfaceTransformFlagsKHR, supportedCompositeAlpha : VkCompositeAlphaFlagsKHR, supportedUsageFlags : VkImageUsageFlags) =
                {
                    minImageCount = minImageCount
                    maxImageCount = maxImageCount
                    currentExtent = currentExtent
                    minImageExtent = minImageExtent
                    maxImageExtent = maxImageExtent
                    maxImageArrayLayers = maxImageArrayLayers
                    supportedTransforms = supportedTransforms
                    currentTransform = currentTransform
                    supportedCompositeAlpha = supportedCompositeAlpha
                    supportedUsageFlags = supportedUsageFlags
                }

            member x.IsEmpty =
                x.minImageCount = Unchecked.defaultof<uint32> && x.maxImageCount = Unchecked.defaultof<uint32> && x.currentExtent = Unchecked.defaultof<VkExtent2D> && x.minImageExtent = Unchecked.defaultof<VkExtent2D> && x.maxImageExtent = Unchecked.defaultof<VkExtent2D> && x.maxImageArrayLayers = Unchecked.defaultof<uint32> && x.supportedTransforms = Unchecked.defaultof<VkSurfaceTransformFlagsKHR> && x.currentTransform = Unchecked.defaultof<VkSurfaceTransformFlagsKHR> && x.supportedCompositeAlpha = Unchecked.defaultof<VkCompositeAlphaFlagsKHR> && x.supportedUsageFlags = Unchecked.defaultof<VkImageUsageFlags>

            static member Empty =
                VkSurfaceCapabilitiesKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<VkCompositeAlphaFlagsKHR>, Unchecked.defaultof<VkImageUsageFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "minImageCount = %A" x.minImageCount
                    sprintf "maxImageCount = %A" x.maxImageCount
                    sprintf "currentExtent = %A" x.currentExtent
                    sprintf "minImageExtent = %A" x.minImageExtent
                    sprintf "maxImageExtent = %A" x.maxImageExtent
                    sprintf "maxImageArrayLayers = %A" x.maxImageArrayLayers
                    sprintf "supportedTransforms = %A" x.supportedTransforms
                    sprintf "currentTransform = %A" x.currentTransform
                    sprintf "supportedCompositeAlpha = %A" x.supportedCompositeAlpha
                    sprintf "supportedUsageFlags = %A" x.supportedUsageFlags
                ] |> sprintf "VkSurfaceCapabilitiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSurfaceFormatKHR =
        struct
            val mutable public format : VkFormat
            val mutable public colorSpace : VkColorSpaceKHR

            new(format : VkFormat, colorSpace : VkColorSpaceKHR) =
                {
                    format = format
                    colorSpace = colorSpace
                }

            member x.IsEmpty =
                x.format = Unchecked.defaultof<VkFormat> && x.colorSpace = Unchecked.defaultof<VkColorSpaceKHR>

            static member Empty =
                VkSurfaceFormatKHR(Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkColorSpaceKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "format = %A" x.format
                    sprintf "colorSpace = %A" x.colorSpace
                ] |> sprintf "VkSurfaceFormatKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkObjectType with
              static member inline SurfaceKhr = unbox<VkObjectType> 1000000000
         type VkResult with
              static member inline ErrorSurfaceLostKhr = unbox<VkResult> -1000000000
              static member inline ErrorNativeWindowInUseKhr = unbox<VkResult> -1000000001

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroySurfaceKHRDel = delegate of VkInstance * VkSurfaceKHR * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceSurfaceSupportKHRDel = delegate of VkPhysicalDevice * uint32 * VkSurfaceKHR * nativeptr<VkBool32> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceSurfaceCapabilitiesKHRDel = delegate of VkPhysicalDevice * VkSurfaceKHR * nativeptr<VkSurfaceCapabilitiesKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceSurfaceFormatsKHRDel = delegate of VkPhysicalDevice * VkSurfaceKHR * nativeptr<uint32> * nativeptr<VkSurfaceFormatKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceSurfacePresentModesKHRDel = delegate of VkPhysicalDevice * VkSurfaceKHR * nativeptr<uint32> * nativeptr<VkPresentModeKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRSurface")
            static let s_vkDestroySurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroySurfaceKHRDel> "vkDestroySurfaceKHR"
            static let s_vkGetPhysicalDeviceSurfaceSupportKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfaceSupportKHRDel> "vkGetPhysicalDeviceSurfaceSupportKHR"
            static let s_vkGetPhysicalDeviceSurfaceCapabilitiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfaceCapabilitiesKHRDel> "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"
            static let s_vkGetPhysicalDeviceSurfaceFormatsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfaceFormatsKHRDel> "vkGetPhysicalDeviceSurfaceFormatsKHR"
            static let s_vkGetPhysicalDeviceSurfacePresentModesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfacePresentModesKHRDel> "vkGetPhysicalDeviceSurfacePresentModesKHR"
            static do Report.End(3) |> ignore
            static member vkDestroySurfaceKHR = s_vkDestroySurfaceKHRDel
            static member vkGetPhysicalDeviceSurfaceSupportKHR = s_vkGetPhysicalDeviceSurfaceSupportKHRDel
            static member vkGetPhysicalDeviceSurfaceCapabilitiesKHR = s_vkGetPhysicalDeviceSurfaceCapabilitiesKHRDel
            static member vkGetPhysicalDeviceSurfaceFormatsKHR = s_vkGetPhysicalDeviceSurfaceFormatsKHRDel
            static member vkGetPhysicalDeviceSurfacePresentModesKHR = s_vkGetPhysicalDeviceSurfacePresentModesKHRDel
        let vkDestroySurfaceKHR(instance : VkInstance, surface : VkSurfaceKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroySurfaceKHR.Invoke(instance, surface, pAllocator)
        let vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, surface : VkSurfaceKHR, pSupported : nativeptr<VkBool32>) = Loader<unit>.vkGetPhysicalDeviceSurfaceSupportKHR.Invoke(physicalDevice, queueFamilyIndex, surface, pSupported)
        let vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice : VkPhysicalDevice, surface : VkSurfaceKHR, pSurfaceCapabilities : nativeptr<VkSurfaceCapabilitiesKHR>) = Loader<unit>.vkGetPhysicalDeviceSurfaceCapabilitiesKHR.Invoke(physicalDevice, surface, pSurfaceCapabilities)
        let vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice : VkPhysicalDevice, surface : VkSurfaceKHR, pSurfaceFormatCount : nativeptr<uint32>, pSurfaceFormats : nativeptr<VkSurfaceFormatKHR>) = Loader<unit>.vkGetPhysicalDeviceSurfaceFormatsKHR.Invoke(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats)
        let vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice : VkPhysicalDevice, surface : VkSurfaceKHR, pPresentModeCount : nativeptr<uint32>, pPresentModes : nativeptr<VkPresentModeKHR>) = Loader<unit>.vkGetPhysicalDeviceSurfacePresentModesKHR.Invoke(physicalDevice, surface, pPresentModeCount, pPresentModes)

module KHRGetSurfaceCapabilities2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_KHR_get_surface_capabilities2"
    let Number = 120

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSurfaceInfo2KHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public surface : VkSurfaceKHR

            new(pNext : nativeint, surface : VkSurfaceKHR) =
                {
                    sType = 1000119000u
                    pNext = pNext
                    surface = surface
                }

            new(surface : VkSurfaceKHR) =
                VkPhysicalDeviceSurfaceInfo2KHR(Unchecked.defaultof<nativeint>, surface)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.surface = Unchecked.defaultof<VkSurfaceKHR>

            static member Empty =
                VkPhysicalDeviceSurfaceInfo2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSurfaceKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "surface = %A" x.surface
                ] |> sprintf "VkPhysicalDeviceSurfaceInfo2KHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSurfaceCapabilities2KHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public surfaceCapabilities : VkSurfaceCapabilitiesKHR

            new(pNext : nativeint, surfaceCapabilities : VkSurfaceCapabilitiesKHR) =
                {
                    sType = 1000119001u
                    pNext = pNext
                    surfaceCapabilities = surfaceCapabilities
                }

            new(surfaceCapabilities : VkSurfaceCapabilitiesKHR) =
                VkSurfaceCapabilities2KHR(Unchecked.defaultof<nativeint>, surfaceCapabilities)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.surfaceCapabilities = Unchecked.defaultof<VkSurfaceCapabilitiesKHR>

            static member Empty =
                VkSurfaceCapabilities2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSurfaceCapabilitiesKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "surfaceCapabilities = %A" x.surfaceCapabilities
                ] |> sprintf "VkSurfaceCapabilities2KHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSurfaceFormat2KHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public surfaceFormat : VkSurfaceFormatKHR

            new(pNext : nativeint, surfaceFormat : VkSurfaceFormatKHR) =
                {
                    sType = 1000119002u
                    pNext = pNext
                    surfaceFormat = surfaceFormat
                }

            new(surfaceFormat : VkSurfaceFormatKHR) =
                VkSurfaceFormat2KHR(Unchecked.defaultof<nativeint>, surfaceFormat)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.surfaceFormat = Unchecked.defaultof<VkSurfaceFormatKHR>

            static member Empty =
                VkSurfaceFormat2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSurfaceFormatKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "surfaceFormat = %A" x.surfaceFormat
                ] |> sprintf "VkSurfaceFormat2KHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceSurfaceCapabilities2KHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceSurfaceInfo2KHR> * nativeptr<VkSurfaceCapabilities2KHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceSurfaceFormats2KHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceSurfaceInfo2KHR> * nativeptr<uint32> * nativeptr<VkSurfaceFormat2KHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRGetSurfaceCapabilities2")
            static let s_vkGetPhysicalDeviceSurfaceCapabilities2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfaceCapabilities2KHRDel> "vkGetPhysicalDeviceSurfaceCapabilities2KHR"
            static let s_vkGetPhysicalDeviceSurfaceFormats2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfaceFormats2KHRDel> "vkGetPhysicalDeviceSurfaceFormats2KHR"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceSurfaceCapabilities2KHR = s_vkGetPhysicalDeviceSurfaceCapabilities2KHRDel
            static member vkGetPhysicalDeviceSurfaceFormats2KHR = s_vkGetPhysicalDeviceSurfaceFormats2KHRDel
        let vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice : VkPhysicalDevice, pSurfaceInfo : nativeptr<VkPhysicalDeviceSurfaceInfo2KHR>, pSurfaceCapabilities : nativeptr<VkSurfaceCapabilities2KHR>) = Loader<unit>.vkGetPhysicalDeviceSurfaceCapabilities2KHR.Invoke(physicalDevice, pSurfaceInfo, pSurfaceCapabilities)
        let vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice : VkPhysicalDevice, pSurfaceInfo : nativeptr<VkPhysicalDeviceSurfaceInfo2KHR>, pSurfaceFormatCount : nativeptr<uint32>, pSurfaceFormats : nativeptr<VkSurfaceFormat2KHR>) = Loader<unit>.vkGetPhysicalDeviceSurfaceFormats2KHR.Invoke(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats)

module KHRSwapchain =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_KHR_swapchain"
    let Number = 2

    let Required = [ KHRSurface.Name ]



    [<StructLayout(LayoutKind.Sequential)>]
    type VkSwapchainKHR =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkSwapchainKHR(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<Flags>]
    type VkSwapchainCreateFlagsKHR =
        | All = 0
        | None = 0


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPresentInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public waitSemaphoreCount : uint32
            val mutable public pWaitSemaphores : nativeptr<VkSemaphore>
            val mutable public swapchainCount : uint32
            val mutable public pSwapchains : nativeptr<VkSwapchainKHR>
            val mutable public pImageIndices : nativeptr<uint32>
            val mutable public pResults : nativeptr<VkResult>

            new(pNext : nativeint, waitSemaphoreCount : uint32, pWaitSemaphores : nativeptr<VkSemaphore>, swapchainCount : uint32, pSwapchains : nativeptr<VkSwapchainKHR>, pImageIndices : nativeptr<uint32>, pResults : nativeptr<VkResult>) =
                {
                    sType = 1000001001u
                    pNext = pNext
                    waitSemaphoreCount = waitSemaphoreCount
                    pWaitSemaphores = pWaitSemaphores
                    swapchainCount = swapchainCount
                    pSwapchains = pSwapchains
                    pImageIndices = pImageIndices
                    pResults = pResults
                }

            new(waitSemaphoreCount : uint32, pWaitSemaphores : nativeptr<VkSemaphore>, swapchainCount : uint32, pSwapchains : nativeptr<VkSwapchainKHR>, pImageIndices : nativeptr<uint32>, pResults : nativeptr<VkResult>) =
                VkPresentInfoKHR(Unchecked.defaultof<nativeint>, waitSemaphoreCount, pWaitSemaphores, swapchainCount, pSwapchains, pImageIndices, pResults)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.waitSemaphoreCount = Unchecked.defaultof<uint32> && x.pWaitSemaphores = Unchecked.defaultof<nativeptr<VkSemaphore>> && x.swapchainCount = Unchecked.defaultof<uint32> && x.pSwapchains = Unchecked.defaultof<nativeptr<VkSwapchainKHR>> && x.pImageIndices = Unchecked.defaultof<nativeptr<uint32>> && x.pResults = Unchecked.defaultof<nativeptr<VkResult>>

            static member Empty =
                VkPresentInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSemaphore>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSwapchainKHR>>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<nativeptr<VkResult>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "waitSemaphoreCount = %A" x.waitSemaphoreCount
                    sprintf "pWaitSemaphores = %A" x.pWaitSemaphores
                    sprintf "swapchainCount = %A" x.swapchainCount
                    sprintf "pSwapchains = %A" x.pSwapchains
                    sprintf "pImageIndices = %A" x.pImageIndices
                    sprintf "pResults = %A" x.pResults
                ] |> sprintf "VkPresentInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSwapchainCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkSwapchainCreateFlagsKHR
            val mutable public surface : VkSurfaceKHR
            val mutable public minImageCount : uint32
            val mutable public imageFormat : VkFormat
            val mutable public imageColorSpace : VkColorSpaceKHR
            val mutable public imageExtent : VkExtent2D
            val mutable public imageArrayLayers : uint32
            val mutable public imageUsage : VkImageUsageFlags
            val mutable public imageSharingMode : VkSharingMode
            val mutable public queueFamilyIndexCount : uint32
            val mutable public pQueueFamilyIndices : nativeptr<uint32>
            val mutable public preTransform : VkSurfaceTransformFlagsKHR
            val mutable public compositeAlpha : VkCompositeAlphaFlagsKHR
            val mutable public presentMode : VkPresentModeKHR
            val mutable public clipped : VkBool32
            val mutable public oldSwapchain : VkSwapchainKHR

            new(pNext : nativeint, flags : VkSwapchainCreateFlagsKHR, surface : VkSurfaceKHR, minImageCount : uint32, imageFormat : VkFormat, imageColorSpace : VkColorSpaceKHR, imageExtent : VkExtent2D, imageArrayLayers : uint32, imageUsage : VkImageUsageFlags, imageSharingMode : VkSharingMode, queueFamilyIndexCount : uint32, pQueueFamilyIndices : nativeptr<uint32>, preTransform : VkSurfaceTransformFlagsKHR, compositeAlpha : VkCompositeAlphaFlagsKHR, presentMode : VkPresentModeKHR, clipped : VkBool32, oldSwapchain : VkSwapchainKHR) =
                {
                    sType = 1000001000u
                    pNext = pNext
                    flags = flags
                    surface = surface
                    minImageCount = minImageCount
                    imageFormat = imageFormat
                    imageColorSpace = imageColorSpace
                    imageExtent = imageExtent
                    imageArrayLayers = imageArrayLayers
                    imageUsage = imageUsage
                    imageSharingMode = imageSharingMode
                    queueFamilyIndexCount = queueFamilyIndexCount
                    pQueueFamilyIndices = pQueueFamilyIndices
                    preTransform = preTransform
                    compositeAlpha = compositeAlpha
                    presentMode = presentMode
                    clipped = clipped
                    oldSwapchain = oldSwapchain
                }

            new(flags : VkSwapchainCreateFlagsKHR, surface : VkSurfaceKHR, minImageCount : uint32, imageFormat : VkFormat, imageColorSpace : VkColorSpaceKHR, imageExtent : VkExtent2D, imageArrayLayers : uint32, imageUsage : VkImageUsageFlags, imageSharingMode : VkSharingMode, queueFamilyIndexCount : uint32, pQueueFamilyIndices : nativeptr<uint32>, preTransform : VkSurfaceTransformFlagsKHR, compositeAlpha : VkCompositeAlphaFlagsKHR, presentMode : VkPresentModeKHR, clipped : VkBool32, oldSwapchain : VkSwapchainKHR) =
                VkSwapchainCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, surface, minImageCount, imageFormat, imageColorSpace, imageExtent, imageArrayLayers, imageUsage, imageSharingMode, queueFamilyIndexCount, pQueueFamilyIndices, preTransform, compositeAlpha, presentMode, clipped, oldSwapchain)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkSwapchainCreateFlagsKHR> && x.surface = Unchecked.defaultof<VkSurfaceKHR> && x.minImageCount = Unchecked.defaultof<uint32> && x.imageFormat = Unchecked.defaultof<VkFormat> && x.imageColorSpace = Unchecked.defaultof<VkColorSpaceKHR> && x.imageExtent = Unchecked.defaultof<VkExtent2D> && x.imageArrayLayers = Unchecked.defaultof<uint32> && x.imageUsage = Unchecked.defaultof<VkImageUsageFlags> && x.imageSharingMode = Unchecked.defaultof<VkSharingMode> && x.queueFamilyIndexCount = Unchecked.defaultof<uint32> && x.pQueueFamilyIndices = Unchecked.defaultof<nativeptr<uint32>> && x.preTransform = Unchecked.defaultof<VkSurfaceTransformFlagsKHR> && x.compositeAlpha = Unchecked.defaultof<VkCompositeAlphaFlagsKHR> && x.presentMode = Unchecked.defaultof<VkPresentModeKHR> && x.clipped = Unchecked.defaultof<VkBool32> && x.oldSwapchain = Unchecked.defaultof<VkSwapchainKHR>

            static member Empty =
                VkSwapchainCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSwapchainCreateFlagsKHR>, Unchecked.defaultof<VkSurfaceKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkColorSpaceKHR>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<VkSharingMode>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<VkCompositeAlphaFlagsKHR>, Unchecked.defaultof<VkPresentModeKHR>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkSwapchainKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "surface = %A" x.surface
                    sprintf "minImageCount = %A" x.minImageCount
                    sprintf "imageFormat = %A" x.imageFormat
                    sprintf "imageColorSpace = %A" x.imageColorSpace
                    sprintf "imageExtent = %A" x.imageExtent
                    sprintf "imageArrayLayers = %A" x.imageArrayLayers
                    sprintf "imageUsage = %A" x.imageUsage
                    sprintf "imageSharingMode = %A" x.imageSharingMode
                    sprintf "queueFamilyIndexCount = %A" x.queueFamilyIndexCount
                    sprintf "pQueueFamilyIndices = %A" x.pQueueFamilyIndices
                    sprintf "preTransform = %A" x.preTransform
                    sprintf "compositeAlpha = %A" x.compositeAlpha
                    sprintf "presentMode = %A" x.presentMode
                    sprintf "clipped = %A" x.clipped
                    sprintf "oldSwapchain = %A" x.oldSwapchain
                ] |> sprintf "VkSwapchainCreateInfoKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkImageLayout with
              static member inline PresentSrcKhr = unbox<VkImageLayout> 1000001002
         type VkObjectType with
              static member inline SwapchainKhr = unbox<VkObjectType> 1000001000
         type VkResult with
              static member inline SuboptimalKhr = unbox<VkResult> 1000001003
              static member inline ErrorOutOfDateKhr = unbox<VkResult> -1000001004

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateSwapchainKHRDel = delegate of VkDevice * nativeptr<VkSwapchainCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSwapchainKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroySwapchainKHRDel = delegate of VkDevice * VkSwapchainKHR * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetSwapchainImagesKHRDel = delegate of VkDevice * VkSwapchainKHR * nativeptr<uint32> * nativeptr<VkImage> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkAcquireNextImageKHRDel = delegate of VkDevice * VkSwapchainKHR * uint64 * VkSemaphore * VkFence * nativeptr<uint32> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkQueuePresentKHRDel = delegate of VkQueue * nativeptr<VkPresentInfoKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRSwapchain")
            static let s_vkCreateSwapchainKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateSwapchainKHRDel> "vkCreateSwapchainKHR"
            static let s_vkDestroySwapchainKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroySwapchainKHRDel> "vkDestroySwapchainKHR"
            static let s_vkGetSwapchainImagesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetSwapchainImagesKHRDel> "vkGetSwapchainImagesKHR"
            static let s_vkAcquireNextImageKHRDel = VkRaw.vkImportInstanceDelegate<VkAcquireNextImageKHRDel> "vkAcquireNextImageKHR"
            static let s_vkQueuePresentKHRDel = VkRaw.vkImportInstanceDelegate<VkQueuePresentKHRDel> "vkQueuePresentKHR"
            static do Report.End(3) |> ignore
            static member vkCreateSwapchainKHR = s_vkCreateSwapchainKHRDel
            static member vkDestroySwapchainKHR = s_vkDestroySwapchainKHRDel
            static member vkGetSwapchainImagesKHR = s_vkGetSwapchainImagesKHRDel
            static member vkAcquireNextImageKHR = s_vkAcquireNextImageKHRDel
            static member vkQueuePresentKHR = s_vkQueuePresentKHRDel
        let vkCreateSwapchainKHR(device : VkDevice, pCreateInfo : nativeptr<VkSwapchainCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSwapchain : nativeptr<VkSwapchainKHR>) = Loader<unit>.vkCreateSwapchainKHR.Invoke(device, pCreateInfo, pAllocator, pSwapchain)
        let vkDestroySwapchainKHR(device : VkDevice, swapchain : VkSwapchainKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroySwapchainKHR.Invoke(device, swapchain, pAllocator)
        let vkGetSwapchainImagesKHR(device : VkDevice, swapchain : VkSwapchainKHR, pSwapchainImageCount : nativeptr<uint32>, pSwapchainImages : nativeptr<VkImage>) = Loader<unit>.vkGetSwapchainImagesKHR.Invoke(device, swapchain, pSwapchainImageCount, pSwapchainImages)
        let vkAcquireNextImageKHR(device : VkDevice, swapchain : VkSwapchainKHR, timeout : uint64, semaphore : VkSemaphore, fence : VkFence, pImageIndex : nativeptr<uint32>) = Loader<unit>.vkAcquireNextImageKHR.Invoke(device, swapchain, timeout, semaphore, fence, pImageIndex)
        let vkQueuePresentKHR(queue : VkQueue, pPresentInfo : nativeptr<VkPresentInfoKHR>) = Loader<unit>.vkQueuePresentKHR.Invoke(queue, pPresentInfo)

    module Vulkan11 =
        [<Flags>]
        type VkDeviceGroupPresentModeFlagsKHR =
            | All = 15
            | None = 0
            /// Present from local memory
            | LocalBit = 0x00000001
            /// Present from remote memory
            | RemoteBit = 0x00000002
            /// Present sum of local and/or remote memory
            | SumBit = 0x00000004
            /// Each physical device presents from local memory
            | LocalMultiDeviceBit = 0x00000008


        [<StructLayout(LayoutKind.Sequential)>]
        type VkAcquireNextImageInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public swapchain : VkSwapchainKHR
                val mutable public timeout : uint64
                val mutable public semaphore : VkSemaphore
                val mutable public fence : VkFence
                val mutable public deviceMask : uint32

                new(pNext : nativeint, swapchain : VkSwapchainKHR, timeout : uint64, semaphore : VkSemaphore, fence : VkFence, deviceMask : uint32) =
                    {
                        sType = 1000060010u
                        pNext = pNext
                        swapchain = swapchain
                        timeout = timeout
                        semaphore = semaphore
                        fence = fence
                        deviceMask = deviceMask
                    }

                new(swapchain : VkSwapchainKHR, timeout : uint64, semaphore : VkSemaphore, fence : VkFence, deviceMask : uint32) =
                    VkAcquireNextImageInfoKHR(Unchecked.defaultof<nativeint>, swapchain, timeout, semaphore, fence, deviceMask)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.swapchain = Unchecked.defaultof<VkSwapchainKHR> && x.timeout = Unchecked.defaultof<uint64> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.fence = Unchecked.defaultof<VkFence> && x.deviceMask = Unchecked.defaultof<uint32>

                static member Empty =
                    VkAcquireNextImageInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSwapchainKHR>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<VkFence>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "swapchain = %A" x.swapchain
                        sprintf "timeout = %A" x.timeout
                        sprintf "semaphore = %A" x.semaphore
                        sprintf "fence = %A" x.fence
                        sprintf "deviceMask = %A" x.deviceMask
                    ] |> sprintf "VkAcquireNextImageInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkBindImageMemorySwapchainInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public swapchain : VkSwapchainKHR
                val mutable public imageIndex : uint32

                new(pNext : nativeint, swapchain : VkSwapchainKHR, imageIndex : uint32) =
                    {
                        sType = 1000060009u
                        pNext = pNext
                        swapchain = swapchain
                        imageIndex = imageIndex
                    }

                new(swapchain : VkSwapchainKHR, imageIndex : uint32) =
                    VkBindImageMemorySwapchainInfoKHR(Unchecked.defaultof<nativeint>, swapchain, imageIndex)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.swapchain = Unchecked.defaultof<VkSwapchainKHR> && x.imageIndex = Unchecked.defaultof<uint32>

                static member Empty =
                    VkBindImageMemorySwapchainInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSwapchainKHR>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "swapchain = %A" x.swapchain
                        sprintf "imageIndex = %A" x.imageIndex
                    ] |> sprintf "VkBindImageMemorySwapchainInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceGroupPresentCapabilitiesKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public presentMask : uint32_32
                val mutable public modes : VkDeviceGroupPresentModeFlagsKHR

                new(pNext : nativeint, presentMask : uint32_32, modes : VkDeviceGroupPresentModeFlagsKHR) =
                    {
                        sType = 1000060007u
                        pNext = pNext
                        presentMask = presentMask
                        modes = modes
                    }

                new(presentMask : uint32_32, modes : VkDeviceGroupPresentModeFlagsKHR) =
                    VkDeviceGroupPresentCapabilitiesKHR(Unchecked.defaultof<nativeint>, presentMask, modes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.presentMask = Unchecked.defaultof<uint32_32> && x.modes = Unchecked.defaultof<VkDeviceGroupPresentModeFlagsKHR>

                static member Empty =
                    VkDeviceGroupPresentCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32_32>, Unchecked.defaultof<VkDeviceGroupPresentModeFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "presentMask = %A" x.presentMask
                        sprintf "modes = %A" x.modes
                    ] |> sprintf "VkDeviceGroupPresentCapabilitiesKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceGroupPresentInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public swapchainCount : uint32
                val mutable public pDeviceMasks : nativeptr<uint32>
                val mutable public mode : VkDeviceGroupPresentModeFlagsKHR

                new(pNext : nativeint, swapchainCount : uint32, pDeviceMasks : nativeptr<uint32>, mode : VkDeviceGroupPresentModeFlagsKHR) =
                    {
                        sType = 1000060011u
                        pNext = pNext
                        swapchainCount = swapchainCount
                        pDeviceMasks = pDeviceMasks
                        mode = mode
                    }

                new(swapchainCount : uint32, pDeviceMasks : nativeptr<uint32>, mode : VkDeviceGroupPresentModeFlagsKHR) =
                    VkDeviceGroupPresentInfoKHR(Unchecked.defaultof<nativeint>, swapchainCount, pDeviceMasks, mode)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.swapchainCount = Unchecked.defaultof<uint32> && x.pDeviceMasks = Unchecked.defaultof<nativeptr<uint32>> && x.mode = Unchecked.defaultof<VkDeviceGroupPresentModeFlagsKHR>

                static member Empty =
                    VkDeviceGroupPresentInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<VkDeviceGroupPresentModeFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "swapchainCount = %A" x.swapchainCount
                        sprintf "pDeviceMasks = %A" x.pDeviceMasks
                        sprintf "mode = %A" x.mode
                    ] |> sprintf "VkDeviceGroupPresentInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDeviceGroupSwapchainCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public modes : VkDeviceGroupPresentModeFlagsKHR

                new(pNext : nativeint, modes : VkDeviceGroupPresentModeFlagsKHR) =
                    {
                        sType = 1000060012u
                        pNext = pNext
                        modes = modes
                    }

                new(modes : VkDeviceGroupPresentModeFlagsKHR) =
                    VkDeviceGroupSwapchainCreateInfoKHR(Unchecked.defaultof<nativeint>, modes)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.modes = Unchecked.defaultof<VkDeviceGroupPresentModeFlagsKHR>

                static member Empty =
                    VkDeviceGroupSwapchainCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceGroupPresentModeFlagsKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "modes = %A" x.modes
                    ] |> sprintf "VkDeviceGroupSwapchainCreateInfoKHR { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkImageSwapchainCreateInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public swapchain : VkSwapchainKHR

                new(pNext : nativeint, swapchain : VkSwapchainKHR) =
                    {
                        sType = 1000060008u
                        pNext = pNext
                        swapchain = swapchain
                    }

                new(swapchain : VkSwapchainKHR) =
                    VkImageSwapchainCreateInfoKHR(Unchecked.defaultof<nativeint>, swapchain)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.swapchain = Unchecked.defaultof<VkSwapchainKHR>

                static member Empty =
                    VkImageSwapchainCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSwapchainKHR>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "swapchain = %A" x.swapchain
                    ] |> sprintf "VkImageSwapchainCreateInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkSwapchainCreateFlagsKHR with
                  /// Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
                  static member inline SplitInstanceBindRegionsBit = unbox<VkSwapchainCreateFlagsKHR> 0x00000001
                  /// Swapchain is protected
                  static member inline ProtectedBit = unbox<VkSwapchainCreateFlagsKHR> 0x00000002

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceGroupPresentCapabilitiesKHRDel = delegate of VkDevice * nativeptr<VkDeviceGroupPresentCapabilitiesKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceGroupSurfacePresentModesKHRDel = delegate of VkDevice * VkSurfaceKHR * nativeptr<VkDeviceGroupPresentModeFlagsKHR> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetPhysicalDevicePresentRectanglesKHRDel = delegate of VkPhysicalDevice * VkSurfaceKHR * nativeptr<uint32> * nativeptr<VkRect2D> -> VkResult
            [<SuppressUnmanagedCodeSecurity>]
            type VkAcquireNextImage2KHRDel = delegate of VkDevice * nativeptr<VkAcquireNextImageInfoKHR> * nativeptr<uint32> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'d> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRSwapchain")
                static let s_vkGetDeviceGroupPresentCapabilitiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceGroupPresentCapabilitiesKHRDel> "vkGetDeviceGroupPresentCapabilitiesKHR"
                static let s_vkGetDeviceGroupSurfacePresentModesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceGroupSurfacePresentModesKHRDel> "vkGetDeviceGroupSurfacePresentModesKHR"
                static let s_vkGetPhysicalDevicePresentRectanglesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDevicePresentRectanglesKHRDel> "vkGetPhysicalDevicePresentRectanglesKHR"
                static let s_vkAcquireNextImage2KHRDel = VkRaw.vkImportInstanceDelegate<VkAcquireNextImage2KHRDel> "vkAcquireNextImage2KHR"
                static do Report.End(3) |> ignore
                static member vkGetDeviceGroupPresentCapabilitiesKHR = s_vkGetDeviceGroupPresentCapabilitiesKHRDel
                static member vkGetDeviceGroupSurfacePresentModesKHR = s_vkGetDeviceGroupSurfacePresentModesKHRDel
                static member vkGetPhysicalDevicePresentRectanglesKHR = s_vkGetPhysicalDevicePresentRectanglesKHRDel
                static member vkAcquireNextImage2KHR = s_vkAcquireNextImage2KHRDel
            let vkGetDeviceGroupPresentCapabilitiesKHR(device : VkDevice, pDeviceGroupPresentCapabilities : nativeptr<VkDeviceGroupPresentCapabilitiesKHR>) = Loader<unit>.vkGetDeviceGroupPresentCapabilitiesKHR.Invoke(device, pDeviceGroupPresentCapabilities)
            let vkGetDeviceGroupSurfacePresentModesKHR(device : VkDevice, surface : VkSurfaceKHR, pModes : nativeptr<VkDeviceGroupPresentModeFlagsKHR>) = Loader<unit>.vkGetDeviceGroupSurfacePresentModesKHR.Invoke(device, surface, pModes)
            let vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice : VkPhysicalDevice, surface : VkSurfaceKHR, pRectCount : nativeptr<uint32>, pRects : nativeptr<VkRect2D>) = Loader<unit>.vkGetPhysicalDevicePresentRectanglesKHR.Invoke(physicalDevice, surface, pRectCount, pRects)
            let vkAcquireNextImage2KHR(device : VkDevice, pAcquireInfo : nativeptr<VkAcquireNextImageInfoKHR>, pImageIndex : nativeptr<uint32>) = Loader<unit>.vkAcquireNextImage2KHR.Invoke(device, pAcquireInfo, pImageIndex)

module AMDDisplayNativeHdr =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRGetSurfaceCapabilities2
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_AMD_display_native_hdr"
    let Number = 214

    let Required = [ KHRGetPhysicalDeviceProperties2.Name; KHRGetSurfaceCapabilities2.Name; KHRSwapchain.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayNativeHdrSurfaceCapabilitiesAMD =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public localDimmingSupport : VkBool32

            new(pNext : nativeint, localDimmingSupport : VkBool32) =
                {
                    sType = 1000213000u
                    pNext = pNext
                    localDimmingSupport = localDimmingSupport
                }

            new(localDimmingSupport : VkBool32) =
                VkDisplayNativeHdrSurfaceCapabilitiesAMD(Unchecked.defaultof<nativeint>, localDimmingSupport)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.localDimmingSupport = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkDisplayNativeHdrSurfaceCapabilitiesAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "localDimmingSupport = %A" x.localDimmingSupport
                ] |> sprintf "VkDisplayNativeHdrSurfaceCapabilitiesAMD { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSwapchainDisplayNativeHdrCreateInfoAMD =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public localDimmingEnable : VkBool32

            new(pNext : nativeint, localDimmingEnable : VkBool32) =
                {
                    sType = 1000213001u
                    pNext = pNext
                    localDimmingEnable = localDimmingEnable
                }

            new(localDimmingEnable : VkBool32) =
                VkSwapchainDisplayNativeHdrCreateInfoAMD(Unchecked.defaultof<nativeint>, localDimmingEnable)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.localDimmingEnable = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkSwapchainDisplayNativeHdrCreateInfoAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "localDimmingEnable = %A" x.localDimmingEnable
                ] |> sprintf "VkSwapchainDisplayNativeHdrCreateInfoAMD { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkColorSpaceKHR with
              static member inline DisplayNativeAmd = unbox<VkColorSpaceKHR> 1000213000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkSetLocalDimmingAMDDel = delegate of VkDevice * VkSwapchainKHR * VkBool32 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading AMDDisplayNativeHdr")
            static let s_vkSetLocalDimmingAMDDel = VkRaw.vkImportInstanceDelegate<VkSetLocalDimmingAMDDel> "vkSetLocalDimmingAMD"
            static do Report.End(3) |> ignore
            static member vkSetLocalDimmingAMD = s_vkSetLocalDimmingAMDDel
        let vkSetLocalDimmingAMD(device : VkDevice, swapChain : VkSwapchainKHR, localDimmingEnable : VkBool32) = Loader<unit>.vkSetLocalDimmingAMD.Invoke(device, swapChain, localDimmingEnable)

module AMDDrawIndirectCount =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_draw_indirect_count"
    let Number = 34


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDrawIndirectCountAMDDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDrawIndexedIndirectCountAMDDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading AMDDrawIndirectCount")
            static let s_vkCmdDrawIndirectCountAMDDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawIndirectCountAMDDel> "vkCmdDrawIndirectCountAMD"
            static let s_vkCmdDrawIndexedIndirectCountAMDDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawIndexedIndirectCountAMDDel> "vkCmdDrawIndexedIndirectCountAMD"
            static do Report.End(3) |> ignore
            static member vkCmdDrawIndirectCountAMD = s_vkCmdDrawIndirectCountAMDDel
            static member vkCmdDrawIndexedIndirectCountAMD = s_vkCmdDrawIndexedIndirectCountAMDDel
        let vkCmdDrawIndirectCountAMD(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, countBuffer : VkBuffer, countBufferOffset : VkDeviceSize, maxDrawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawIndirectCountAMD.Invoke(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
        let vkCmdDrawIndexedIndirectCountAMD(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, countBuffer : VkBuffer, countBufferOffset : VkDeviceSize, maxDrawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawIndexedIndirectCountAMD.Invoke(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)

module AMDGcnShader =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_gcn_shader"
    let Number = 26


module AMDGpuShaderHalfFloat =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_gpu_shader_half_float"
    let Number = 37


module AMDGpuShaderInt16 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_gpu_shader_int16"
    let Number = 133


module AMDMemoryOverallocationBehavior =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_memory_overallocation_behavior"
    let Number = 190


    type VkMemoryOverallocationBehaviorAMD =
        | Default = 0
        | Allowed = 1
        | Disallowed = 2


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceMemoryOverallocationCreateInfoAMD =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public overallocationBehavior : VkMemoryOverallocationBehaviorAMD

            new(pNext : nativeint, overallocationBehavior : VkMemoryOverallocationBehaviorAMD) =
                {
                    sType = 1000189000u
                    pNext = pNext
                    overallocationBehavior = overallocationBehavior
                }

            new(overallocationBehavior : VkMemoryOverallocationBehaviorAMD) =
                VkDeviceMemoryOverallocationCreateInfoAMD(Unchecked.defaultof<nativeint>, overallocationBehavior)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.overallocationBehavior = Unchecked.defaultof<VkMemoryOverallocationBehaviorAMD>

            static member Empty =
                VkDeviceMemoryOverallocationCreateInfoAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMemoryOverallocationBehaviorAMD>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "overallocationBehavior = %A" x.overallocationBehavior
                ] |> sprintf "VkDeviceMemoryOverallocationCreateInfoAMD { %s }"
        end



module AMDMixedAttachmentSamples =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_mixed_attachment_samples"
    let Number = 137


module AMDNegativeViewportHeight =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_negative_viewport_height"
    let Number = 36


module AMDPipelineCompilerControl =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_pipeline_compiler_control"
    let Number = 184


    [<Flags>]
    type VkPipelineCompilerControlFlagsAMD =
        | All = 0
        | None = 0


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineCompilerControlCreateInfoAMD =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public compilerControlFlags : VkPipelineCompilerControlFlagsAMD

            new(pNext : nativeint, compilerControlFlags : VkPipelineCompilerControlFlagsAMD) =
                {
                    sType = 1000183000u
                    pNext = pNext
                    compilerControlFlags = compilerControlFlags
                }

            new(compilerControlFlags : VkPipelineCompilerControlFlagsAMD) =
                VkPipelineCompilerControlCreateInfoAMD(Unchecked.defaultof<nativeint>, compilerControlFlags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.compilerControlFlags = Unchecked.defaultof<VkPipelineCompilerControlFlagsAMD>

            static member Empty =
                VkPipelineCompilerControlCreateInfoAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCompilerControlFlagsAMD>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "compilerControlFlags = %A" x.compilerControlFlags
                ] |> sprintf "VkPipelineCompilerControlCreateInfoAMD { %s }"
        end



module AMDRasterizationOrder =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_rasterization_order"
    let Number = 19


    type VkRasterizationOrderAMD =
        | Strict = 0
        | Relaxed = 1


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineRasterizationStateRasterizationOrderAMD =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public rasterizationOrder : VkRasterizationOrderAMD

            new(pNext : nativeint, rasterizationOrder : VkRasterizationOrderAMD) =
                {
                    sType = 1000018000u
                    pNext = pNext
                    rasterizationOrder = rasterizationOrder
                }

            new(rasterizationOrder : VkRasterizationOrderAMD) =
                VkPipelineRasterizationStateRasterizationOrderAMD(Unchecked.defaultof<nativeint>, rasterizationOrder)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.rasterizationOrder = Unchecked.defaultof<VkRasterizationOrderAMD>

            static member Empty =
                VkPipelineRasterizationStateRasterizationOrderAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRasterizationOrderAMD>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "rasterizationOrder = %A" x.rasterizationOrder
                ] |> sprintf "VkPipelineRasterizationStateRasterizationOrderAMD { %s }"
        end



module AMDShaderBallot =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_shader_ballot"
    let Number = 38


module AMDShaderCoreProperties =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_AMD_shader_core_properties"
    let Number = 186

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderCorePropertiesAMD =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderEngineCount : uint32
            val mutable public shaderArraysPerEngineCount : uint32
            val mutable public computeUnitsPerShaderArray : uint32
            val mutable public simdPerComputeUnit : uint32
            val mutable public wavefrontsPerSimd : uint32
            val mutable public wavefrontSize : uint32
            val mutable public sgprsPerSimd : uint32
            val mutable public minSgprAllocation : uint32
            val mutable public maxSgprAllocation : uint32
            val mutable public sgprAllocationGranularity : uint32
            val mutable public vgprsPerSimd : uint32
            val mutable public minVgprAllocation : uint32
            val mutable public maxVgprAllocation : uint32
            val mutable public vgprAllocationGranularity : uint32

            new(pNext : nativeint, shaderEngineCount : uint32, shaderArraysPerEngineCount : uint32, computeUnitsPerShaderArray : uint32, simdPerComputeUnit : uint32, wavefrontsPerSimd : uint32, wavefrontSize : uint32, sgprsPerSimd : uint32, minSgprAllocation : uint32, maxSgprAllocation : uint32, sgprAllocationGranularity : uint32, vgprsPerSimd : uint32, minVgprAllocation : uint32, maxVgprAllocation : uint32, vgprAllocationGranularity : uint32) =
                {
                    sType = 1000185000u
                    pNext = pNext
                    shaderEngineCount = shaderEngineCount
                    shaderArraysPerEngineCount = shaderArraysPerEngineCount
                    computeUnitsPerShaderArray = computeUnitsPerShaderArray
                    simdPerComputeUnit = simdPerComputeUnit
                    wavefrontsPerSimd = wavefrontsPerSimd
                    wavefrontSize = wavefrontSize
                    sgprsPerSimd = sgprsPerSimd
                    minSgprAllocation = minSgprAllocation
                    maxSgprAllocation = maxSgprAllocation
                    sgprAllocationGranularity = sgprAllocationGranularity
                    vgprsPerSimd = vgprsPerSimd
                    minVgprAllocation = minVgprAllocation
                    maxVgprAllocation = maxVgprAllocation
                    vgprAllocationGranularity = vgprAllocationGranularity
                }

            new(shaderEngineCount : uint32, shaderArraysPerEngineCount : uint32, computeUnitsPerShaderArray : uint32, simdPerComputeUnit : uint32, wavefrontsPerSimd : uint32, wavefrontSize : uint32, sgprsPerSimd : uint32, minSgprAllocation : uint32, maxSgprAllocation : uint32, sgprAllocationGranularity : uint32, vgprsPerSimd : uint32, minVgprAllocation : uint32, maxVgprAllocation : uint32, vgprAllocationGranularity : uint32) =
                VkPhysicalDeviceShaderCorePropertiesAMD(Unchecked.defaultof<nativeint>, shaderEngineCount, shaderArraysPerEngineCount, computeUnitsPerShaderArray, simdPerComputeUnit, wavefrontsPerSimd, wavefrontSize, sgprsPerSimd, minSgprAllocation, maxSgprAllocation, sgprAllocationGranularity, vgprsPerSimd, minVgprAllocation, maxVgprAllocation, vgprAllocationGranularity)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderEngineCount = Unchecked.defaultof<uint32> && x.shaderArraysPerEngineCount = Unchecked.defaultof<uint32> && x.computeUnitsPerShaderArray = Unchecked.defaultof<uint32> && x.simdPerComputeUnit = Unchecked.defaultof<uint32> && x.wavefrontsPerSimd = Unchecked.defaultof<uint32> && x.wavefrontSize = Unchecked.defaultof<uint32> && x.sgprsPerSimd = Unchecked.defaultof<uint32> && x.minSgprAllocation = Unchecked.defaultof<uint32> && x.maxSgprAllocation = Unchecked.defaultof<uint32> && x.sgprAllocationGranularity = Unchecked.defaultof<uint32> && x.vgprsPerSimd = Unchecked.defaultof<uint32> && x.minVgprAllocation = Unchecked.defaultof<uint32> && x.maxVgprAllocation = Unchecked.defaultof<uint32> && x.vgprAllocationGranularity = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceShaderCorePropertiesAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderEngineCount = %A" x.shaderEngineCount
                    sprintf "shaderArraysPerEngineCount = %A" x.shaderArraysPerEngineCount
                    sprintf "computeUnitsPerShaderArray = %A" x.computeUnitsPerShaderArray
                    sprintf "simdPerComputeUnit = %A" x.simdPerComputeUnit
                    sprintf "wavefrontsPerSimd = %A" x.wavefrontsPerSimd
                    sprintf "wavefrontSize = %A" x.wavefrontSize
                    sprintf "sgprsPerSimd = %A" x.sgprsPerSimd
                    sprintf "minSgprAllocation = %A" x.minSgprAllocation
                    sprintf "maxSgprAllocation = %A" x.maxSgprAllocation
                    sprintf "sgprAllocationGranularity = %A" x.sgprAllocationGranularity
                    sprintf "vgprsPerSimd = %A" x.vgprsPerSimd
                    sprintf "minVgprAllocation = %A" x.minVgprAllocation
                    sprintf "maxVgprAllocation = %A" x.maxVgprAllocation
                    sprintf "vgprAllocationGranularity = %A" x.vgprAllocationGranularity
                ] |> sprintf "VkPhysicalDeviceShaderCorePropertiesAMD { %s }"
        end



module AMDShaderCoreProperties2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open AMDShaderCoreProperties
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_AMD_shader_core_properties2"
    let Number = 228

    let Required = [ AMDShaderCoreProperties.Name ]


    [<Flags>]
    type VkShaderCorePropertiesFlagsAMD =
        | All = 0
        | None = 0


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderCoreProperties2AMD =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderCoreFeatures : VkShaderCorePropertiesFlagsAMD
            val mutable public activeComputeUnitCount : uint32

            new(pNext : nativeint, shaderCoreFeatures : VkShaderCorePropertiesFlagsAMD, activeComputeUnitCount : uint32) =
                {
                    sType = 1000227000u
                    pNext = pNext
                    shaderCoreFeatures = shaderCoreFeatures
                    activeComputeUnitCount = activeComputeUnitCount
                }

            new(shaderCoreFeatures : VkShaderCorePropertiesFlagsAMD, activeComputeUnitCount : uint32) =
                VkPhysicalDeviceShaderCoreProperties2AMD(Unchecked.defaultof<nativeint>, shaderCoreFeatures, activeComputeUnitCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderCoreFeatures = Unchecked.defaultof<VkShaderCorePropertiesFlagsAMD> && x.activeComputeUnitCount = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceShaderCoreProperties2AMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderCorePropertiesFlagsAMD>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderCoreFeatures = %A" x.shaderCoreFeatures
                    sprintf "activeComputeUnitCount = %A" x.activeComputeUnitCount
                ] |> sprintf "VkPhysicalDeviceShaderCoreProperties2AMD { %s }"
        end



module AMDShaderEarlyAndLateFragmentTests =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_shader_early_and_late_fragment_tests"
    let Number = 322


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderEarlyAndLateFragmentTests : VkBool32

            new(pNext : nativeint, shaderEarlyAndLateFragmentTests : VkBool32) =
                {
                    sType = 1000321000u
                    pNext = pNext
                    shaderEarlyAndLateFragmentTests = shaderEarlyAndLateFragmentTests
                }

            new(shaderEarlyAndLateFragmentTests : VkBool32) =
                VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(Unchecked.defaultof<nativeint>, shaderEarlyAndLateFragmentTests)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderEarlyAndLateFragmentTests = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderEarlyAndLateFragmentTests = %A" x.shaderEarlyAndLateFragmentTests
                ] |> sprintf "VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD { %s }"
        end



module AMDShaderExplicitVertexParameter =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_shader_explicit_vertex_parameter"
    let Number = 22


module AMDShaderFragmentMask =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_shader_fragment_mask"
    let Number = 138


module AMDShaderImageLoadStoreLod =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_shader_image_load_store_lod"
    let Number = 47


module AMDShaderInfo =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_shader_info"
    let Number = 43


    type VkShaderInfoTypeAMD =
        | Statistics = 0
        | Binary = 1
        | Disassembly = 2


    [<StructLayout(LayoutKind.Sequential)>]
    type VkShaderResourceUsageAMD =
        struct
            val mutable public numUsedVgprs : uint32
            val mutable public numUsedSgprs : uint32
            val mutable public ldsSizePerLocalWorkGroup : uint32
            val mutable public ldsUsageSizeInBytes : uint64
            val mutable public scratchMemUsageInBytes : uint64

            new(numUsedVgprs : uint32, numUsedSgprs : uint32, ldsSizePerLocalWorkGroup : uint32, ldsUsageSizeInBytes : uint64, scratchMemUsageInBytes : uint64) =
                {
                    numUsedVgprs = numUsedVgprs
                    numUsedSgprs = numUsedSgprs
                    ldsSizePerLocalWorkGroup = ldsSizePerLocalWorkGroup
                    ldsUsageSizeInBytes = ldsUsageSizeInBytes
                    scratchMemUsageInBytes = scratchMemUsageInBytes
                }

            member x.IsEmpty =
                x.numUsedVgprs = Unchecked.defaultof<uint32> && x.numUsedSgprs = Unchecked.defaultof<uint32> && x.ldsSizePerLocalWorkGroup = Unchecked.defaultof<uint32> && x.ldsUsageSizeInBytes = Unchecked.defaultof<uint64> && x.scratchMemUsageInBytes = Unchecked.defaultof<uint64>

            static member Empty =
                VkShaderResourceUsageAMD(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "numUsedVgprs = %A" x.numUsedVgprs
                    sprintf "numUsedSgprs = %A" x.numUsedSgprs
                    sprintf "ldsSizePerLocalWorkGroup = %A" x.ldsSizePerLocalWorkGroup
                    sprintf "ldsUsageSizeInBytes = %A" x.ldsUsageSizeInBytes
                    sprintf "scratchMemUsageInBytes = %A" x.scratchMemUsageInBytes
                ] |> sprintf "VkShaderResourceUsageAMD { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkShaderStatisticsInfoAMD =
        struct
            val mutable public shaderStageMask : VkShaderStageFlags
            val mutable public resourceUsage : VkShaderResourceUsageAMD
            val mutable public numPhysicalVgprs : uint32
            val mutable public numPhysicalSgprs : uint32
            val mutable public numAvailableVgprs : uint32
            val mutable public numAvailableSgprs : uint32
            val mutable public computeWorkGroupSize : V3ui

            new(shaderStageMask : VkShaderStageFlags, resourceUsage : VkShaderResourceUsageAMD, numPhysicalVgprs : uint32, numPhysicalSgprs : uint32, numAvailableVgprs : uint32, numAvailableSgprs : uint32, computeWorkGroupSize : V3ui) =
                {
                    shaderStageMask = shaderStageMask
                    resourceUsage = resourceUsage
                    numPhysicalVgprs = numPhysicalVgprs
                    numPhysicalSgprs = numPhysicalSgprs
                    numAvailableVgprs = numAvailableVgprs
                    numAvailableSgprs = numAvailableSgprs
                    computeWorkGroupSize = computeWorkGroupSize
                }

            member x.IsEmpty =
                x.shaderStageMask = Unchecked.defaultof<VkShaderStageFlags> && x.resourceUsage = Unchecked.defaultof<VkShaderResourceUsageAMD> && x.numPhysicalVgprs = Unchecked.defaultof<uint32> && x.numPhysicalSgprs = Unchecked.defaultof<uint32> && x.numAvailableVgprs = Unchecked.defaultof<uint32> && x.numAvailableSgprs = Unchecked.defaultof<uint32> && x.computeWorkGroupSize = Unchecked.defaultof<V3ui>

            static member Empty =
                VkShaderStatisticsInfoAMD(Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<VkShaderResourceUsageAMD>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "shaderStageMask = %A" x.shaderStageMask
                    sprintf "resourceUsage = %A" x.resourceUsage
                    sprintf "numPhysicalVgprs = %A" x.numPhysicalVgprs
                    sprintf "numPhysicalSgprs = %A" x.numPhysicalSgprs
                    sprintf "numAvailableVgprs = %A" x.numAvailableVgprs
                    sprintf "numAvailableSgprs = %A" x.numAvailableSgprs
                    sprintf "computeWorkGroupSize = %A" x.computeWorkGroupSize
                ] |> sprintf "VkShaderStatisticsInfoAMD { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetShaderInfoAMDDel = delegate of VkDevice * VkPipeline * VkShaderStageFlags * VkShaderInfoTypeAMD * nativeptr<uint64> * nativeint -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading AMDShaderInfo")
            static let s_vkGetShaderInfoAMDDel = VkRaw.vkImportInstanceDelegate<VkGetShaderInfoAMDDel> "vkGetShaderInfoAMD"
            static do Report.End(3) |> ignore
            static member vkGetShaderInfoAMD = s_vkGetShaderInfoAMDDel
        let vkGetShaderInfoAMD(device : VkDevice, pipeline : VkPipeline, shaderStage : VkShaderStageFlags, infoType : VkShaderInfoTypeAMD, pInfoSize : nativeptr<uint64>, pInfo : nativeint) = Loader<unit>.vkGetShaderInfoAMD.Invoke(device, pipeline, shaderStage, infoType, pInfoSize, pInfo)

module AMDShaderTrinaryMinmax =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_AMD_shader_trinary_minmax"
    let Number = 21


module AMDTextureGatherBiasLod =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_AMD_texture_gather_bias_lod"
    let Number = 42

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkTextureLODGatherFormatPropertiesAMD =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public supportsTextureGatherLODBiasAMD : VkBool32

            new(pNext : nativeint, supportsTextureGatherLODBiasAMD : VkBool32) =
                {
                    sType = 1000041000u
                    pNext = pNext
                    supportsTextureGatherLODBiasAMD = supportsTextureGatherLODBiasAMD
                }

            new(supportsTextureGatherLODBiasAMD : VkBool32) =
                VkTextureLODGatherFormatPropertiesAMD(Unchecked.defaultof<nativeint>, supportsTextureGatherLODBiasAMD)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.supportsTextureGatherLODBiasAMD = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkTextureLODGatherFormatPropertiesAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "supportsTextureGatherLODBiasAMD = %A" x.supportsTextureGatherLODBiasAMD
                ] |> sprintf "VkTextureLODGatherFormatPropertiesAMD { %s }"
        end



module KHRExternalMemoryCapabilities =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_external_memory_capabilities"
    let Number = 72

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags
    type VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags

    type VkExternalBufferPropertiesKHR = VkExternalBufferProperties

    type VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties

    type VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties

    type VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo

    type VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo

    type VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties


    [<AutoOpen>]
    module EnumExtensions =
         type VkExternalMemoryFeatureFlags with
              static member inline DedicatedOnlyBitKhr = unbox<VkExternalMemoryFeatureFlags> 0x00000001
              static member inline ExportableBitKhr = unbox<VkExternalMemoryFeatureFlags> 0x00000002
              static member inline ImportableBitKhr = unbox<VkExternalMemoryFeatureFlags> 0x00000004
         type VkExternalMemoryHandleTypeFlags with
              static member inline OpaqueFdBitKhr = unbox<VkExternalMemoryHandleTypeFlags> 0x00000001
              static member inline OpaqueWin32BitKhr = unbox<VkExternalMemoryHandleTypeFlags> 0x00000002
              static member inline OpaqueWin32KmtBitKhr = unbox<VkExternalMemoryHandleTypeFlags> 0x00000004
              static member inline D3d11TextureBitKhr = unbox<VkExternalMemoryHandleTypeFlags> 0x00000008
              static member inline D3d11TextureKmtBitKhr = unbox<VkExternalMemoryHandleTypeFlags> 0x00000010
              static member inline D3d12HeapBitKhr = unbox<VkExternalMemoryHandleTypeFlags> 0x00000020
              static member inline D3d12ResourceBitKhr = unbox<VkExternalMemoryHandleTypeFlags> 0x00000040

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceExternalBufferPropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceExternalBufferInfo> * nativeptr<VkExternalBufferProperties> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRExternalMemoryCapabilities")
            static let s_vkGetPhysicalDeviceExternalBufferPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceExternalBufferPropertiesKHRDel> "vkGetPhysicalDeviceExternalBufferPropertiesKHR"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceExternalBufferPropertiesKHR = s_vkGetPhysicalDeviceExternalBufferPropertiesKHRDel
        let vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice : VkPhysicalDevice, pExternalBufferInfo : nativeptr<VkPhysicalDeviceExternalBufferInfo>, pExternalBufferProperties : nativeptr<VkExternalBufferProperties>) = Loader<unit>.vkGetPhysicalDeviceExternalBufferPropertiesKHR.Invoke(physicalDevice, pExternalBufferInfo, pExternalBufferProperties)

module KHRExternalMemory =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalMemoryCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_external_memory"
    let Number = 73

    let Required = [ KHRExternalMemoryCapabilities.Name ]


    type VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo

    type VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo

    type VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkResult with
              static member inline ErrorInvalidExternalHandleKhr = unbox<VkResult> 1000072003


module EXTQueueFamilyForeign =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalMemory
    open KHRExternalMemoryCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_queue_family_foreign"
    let Number = 127

    let Required = [ KHRExternalMemory.Name ]


module KHRGetMemoryRequirements2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_get_memory_requirements2"
    let Number = 147


    type VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2

    type VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2

    type VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2

    type VkMemoryRequirements2KHR = VkMemoryRequirements2

    type VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetImageMemoryRequirements2KHRDel = delegate of VkDevice * nativeptr<VkImageMemoryRequirementsInfo2> * nativeptr<VkMemoryRequirements2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetBufferMemoryRequirements2KHRDel = delegate of VkDevice * nativeptr<VkBufferMemoryRequirementsInfo2> * nativeptr<VkMemoryRequirements2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetImageSparseMemoryRequirements2KHRDel = delegate of VkDevice * nativeptr<VkImageSparseMemoryRequirementsInfo2> * nativeptr<uint32> * nativeptr<VkSparseImageMemoryRequirements2> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRGetMemoryRequirements2")
            static let s_vkGetImageMemoryRequirements2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetImageMemoryRequirements2KHRDel> "vkGetImageMemoryRequirements2KHR"
            static let s_vkGetBufferMemoryRequirements2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetBufferMemoryRequirements2KHRDel> "vkGetBufferMemoryRequirements2KHR"
            static let s_vkGetImageSparseMemoryRequirements2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetImageSparseMemoryRequirements2KHRDel> "vkGetImageSparseMemoryRequirements2KHR"
            static do Report.End(3) |> ignore
            static member vkGetImageMemoryRequirements2KHR = s_vkGetImageMemoryRequirements2KHRDel
            static member vkGetBufferMemoryRequirements2KHR = s_vkGetBufferMemoryRequirements2KHRDel
            static member vkGetImageSparseMemoryRequirements2KHR = s_vkGetImageSparseMemoryRequirements2KHRDel
        let vkGetImageMemoryRequirements2KHR(device : VkDevice, pInfo : nativeptr<VkImageMemoryRequirementsInfo2>, pMemoryRequirements : nativeptr<VkMemoryRequirements2>) = Loader<unit>.vkGetImageMemoryRequirements2KHR.Invoke(device, pInfo, pMemoryRequirements)
        let vkGetBufferMemoryRequirements2KHR(device : VkDevice, pInfo : nativeptr<VkBufferMemoryRequirementsInfo2>, pMemoryRequirements : nativeptr<VkMemoryRequirements2>) = Loader<unit>.vkGetBufferMemoryRequirements2KHR.Invoke(device, pInfo, pMemoryRequirements)
        let vkGetImageSparseMemoryRequirements2KHR(device : VkDevice, pInfo : nativeptr<VkImageSparseMemoryRequirementsInfo2>, pSparseMemoryRequirementCount : nativeptr<uint32>, pSparseMemoryRequirements : nativeptr<VkSparseImageMemoryRequirements2>) = Loader<unit>.vkGetImageSparseMemoryRequirements2KHR.Invoke(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements)

module KHRDedicatedAllocation =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetMemoryRequirements2
    let Name = "VK_KHR_dedicated_allocation"
    let Number = 128

    let Required = [ KHRGetMemoryRequirements2.Name ]


    type VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo

    type VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements



module KHRBindMemory2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_bind_memory2"
    let Number = 158


    type VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo

    type VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkImageCreateFlags with
              static member inline AliasBitKhr = unbox<VkImageCreateFlags> 0x00000400

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkBindBufferMemory2KHRDel = delegate of VkDevice * uint32 * nativeptr<VkBindBufferMemoryInfo> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkBindImageMemory2KHRDel = delegate of VkDevice * uint32 * nativeptr<VkBindImageMemoryInfo> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRBindMemory2")
            static let s_vkBindBufferMemory2KHRDel = VkRaw.vkImportInstanceDelegate<VkBindBufferMemory2KHRDel> "vkBindBufferMemory2KHR"
            static let s_vkBindImageMemory2KHRDel = VkRaw.vkImportInstanceDelegate<VkBindImageMemory2KHRDel> "vkBindImageMemory2KHR"
            static do Report.End(3) |> ignore
            static member vkBindBufferMemory2KHR = s_vkBindBufferMemory2KHRDel
            static member vkBindImageMemory2KHR = s_vkBindImageMemory2KHRDel
        let vkBindBufferMemory2KHR(device : VkDevice, bindInfoCount : uint32, pBindInfos : nativeptr<VkBindBufferMemoryInfo>) = Loader<unit>.vkBindBufferMemory2KHR.Invoke(device, bindInfoCount, pBindInfos)
        let vkBindImageMemory2KHR(device : VkDevice, bindInfoCount : uint32, pBindInfos : nativeptr<VkBindImageMemoryInfo>) = Loader<unit>.vkBindImageMemory2KHR.Invoke(device, bindInfoCount, pBindInfos)

module KHRMaintenance1 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_maintenance1"
    let Number = 70


    type VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags

    [<AutoOpen>]
    module EnumExtensions =
         type VkFormatFeatureFlags with
              static member inline TransferSrcBitKhr = unbox<VkFormatFeatureFlags> 0x00004000
              static member inline TransferDstBitKhr = unbox<VkFormatFeatureFlags> 0x00008000
         type VkImageCreateFlags with
              static member inline D2dArrayCompatibleBitKhr = unbox<VkImageCreateFlags> 0x00000020
         type VkResult with
              static member inline ErrorOutOfPoolMemoryKhr = unbox<VkResult> 1000069000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkTrimCommandPoolKHRDel = delegate of VkDevice * VkCommandPool * VkCommandPoolTrimFlags -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRMaintenance1")
            static let s_vkTrimCommandPoolKHRDel = VkRaw.vkImportInstanceDelegate<VkTrimCommandPoolKHRDel> "vkTrimCommandPoolKHR"
            static do Report.End(3) |> ignore
            static member vkTrimCommandPoolKHR = s_vkTrimCommandPoolKHRDel
        let vkTrimCommandPoolKHR(device : VkDevice, commandPool : VkCommandPool, flags : VkCommandPoolTrimFlags) = Loader<unit>.vkTrimCommandPoolKHR.Invoke(device, commandPool, flags)

module EXTDebugReport =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_debug_report"
    let Number = 12


    type PFN_vkDebugReportCallbackEXT = nativeint


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDebugReportCallbackEXT =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkDebugReportCallbackEXT(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<Flags>]
    type VkDebugReportFlagsEXT =
        | All = 31
        | None = 0
        | InformationBit = 0x00000001
        | WarningBit = 0x00000002
        | PerformanceWarningBit = 0x00000004
        | ErrorBit = 0x00000008
        | DebugBit = 0x00000010

    type VkDebugReportObjectTypeEXT =
        | Unknown = 0
        | Instance = 1
        | PhysicalDevice = 2
        | Device = 3
        | Queue = 4
        | Semaphore = 5
        | CommandBuffer = 6
        | Fence = 7
        | DeviceMemory = 8
        | Buffer = 9
        | Image = 10
        | Event = 11
        | QueryPool = 12
        | BufferView = 13
        | ImageView = 14
        | ShaderModule = 15
        | PipelineCache = 16
        | PipelineLayout = 17
        | RenderPass = 18
        | Pipeline = 19
        | DescriptorSetLayout = 20
        | Sampler = 21
        | DescriptorPool = 22
        | DescriptorSet = 23
        | Framebuffer = 24
        | CommandPool = 25
        | Surface = 26
        | Swapchain = 27
        | DebugReportCallback = 28
        | Display = 29
        | DisplayMode = 30
        | ValidationCache = 33


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDebugReportCallbackCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDebugReportFlagsEXT
            val mutable public pfnCallback : PFN_vkDebugReportCallbackEXT
            val mutable public pUserData : nativeint

            new(pNext : nativeint, flags : VkDebugReportFlagsEXT, pfnCallback : PFN_vkDebugReportCallbackEXT, pUserData : nativeint) =
                {
                    sType = 1000011000u
                    pNext = pNext
                    flags = flags
                    pfnCallback = pfnCallback
                    pUserData = pUserData
                }

            new(flags : VkDebugReportFlagsEXT, pfnCallback : PFN_vkDebugReportCallbackEXT, pUserData : nativeint) =
                VkDebugReportCallbackCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, pfnCallback, pUserData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDebugReportFlagsEXT> && x.pfnCallback = Unchecked.defaultof<PFN_vkDebugReportCallbackEXT> && x.pUserData = Unchecked.defaultof<nativeint>

            static member Empty =
                VkDebugReportCallbackCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDebugReportFlagsEXT>, Unchecked.defaultof<PFN_vkDebugReportCallbackEXT>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "pfnCallback = %A" x.pfnCallback
                    sprintf "pUserData = %A" x.pUserData
                ] |> sprintf "VkDebugReportCallbackCreateInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkObjectType with
              static member inline DebugReportCallbackExt = unbox<VkObjectType> 1000011000
         type VkResult with
              static member inline ErrorValidationFailedExt = unbox<VkResult> -1000011001

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateDebugReportCallbackEXTDel = delegate of VkInstance * nativeptr<VkDebugReportCallbackCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkDebugReportCallbackEXT> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyDebugReportCallbackEXTDel = delegate of VkInstance * VkDebugReportCallbackEXT * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkDebugReportMessageEXTDel = delegate of VkInstance * VkDebugReportFlagsEXT * VkDebugReportObjectTypeEXT * uint64 * uint64 * int * cstr * cstr -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTDebugReport")
            static let s_vkCreateDebugReportCallbackEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateDebugReportCallbackEXTDel> "vkCreateDebugReportCallbackEXT"
            static let s_vkDestroyDebugReportCallbackEXTDel = VkRaw.vkImportInstanceDelegate<VkDestroyDebugReportCallbackEXTDel> "vkDestroyDebugReportCallbackEXT"
            static let s_vkDebugReportMessageEXTDel = VkRaw.vkImportInstanceDelegate<VkDebugReportMessageEXTDel> "vkDebugReportMessageEXT"
            static do Report.End(3) |> ignore
            static member vkCreateDebugReportCallbackEXT = s_vkCreateDebugReportCallbackEXTDel
            static member vkDestroyDebugReportCallbackEXT = s_vkDestroyDebugReportCallbackEXTDel
            static member vkDebugReportMessageEXT = s_vkDebugReportMessageEXTDel
        let vkCreateDebugReportCallbackEXT(instance : VkInstance, pCreateInfo : nativeptr<VkDebugReportCallbackCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pCallback : nativeptr<VkDebugReportCallbackEXT>) = Loader<unit>.vkCreateDebugReportCallbackEXT.Invoke(instance, pCreateInfo, pAllocator, pCallback)
        let vkDestroyDebugReportCallbackEXT(instance : VkInstance, callback : VkDebugReportCallbackEXT, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyDebugReportCallbackEXT.Invoke(instance, callback, pAllocator)
        let vkDebugReportMessageEXT(instance : VkInstance, flags : VkDebugReportFlagsEXT, objectType : VkDebugReportObjectTypeEXT, _object : uint64, location : uint64, messageCode : int, pLayerPrefix : cstr, pMessage : cstr) = Loader<unit>.vkDebugReportMessageEXT.Invoke(instance, flags, objectType, _object, location, messageCode, pLayerPrefix, pMessage)

    module Vulkan11 =
        [<AutoOpen>]
        module EnumExtensions =
             type VkDebugReportObjectTypeEXT with
                  static member inline SamplerYcbcrConversion = unbox<VkDebugReportObjectTypeEXT> 1000156000
                  static member inline DescriptorUpdateTemplate = unbox<VkDebugReportObjectTypeEXT> 1000085000


module KHRSamplerYcbcrConversion =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open KHRBindMemory2
    open KHRGetMemoryRequirements2
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance1
    let Name = "VK_KHR_sampler_ycbcr_conversion"
    let Number = 157

    let Required = [ KHRBindMemory2.Name; KHRGetMemoryRequirements2.Name; KHRGetPhysicalDeviceProperties2.Name; KHRMaintenance1.Name ]


    type VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion
    type VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion
    type VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange
    type VkChromaLocationKHR = VkChromaLocation

    type VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo

    type VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo

    type VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures

    type VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo

    type VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties

    type VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkChromaLocation with
              static member inline CositedEvenKhr = unbox<VkChromaLocation> 0
              static member inline MidpointKhr = unbox<VkChromaLocation> 1
         type VkDebugReportObjectTypeEXT with
              static member inline SamplerYcbcrConversionKhr = unbox<VkDebugReportObjectTypeEXT> 1000156000
         type VkFormat with
              static member inline G8b8g8r8422UnormKhr = unbox<VkFormat> 1000156000
              static member inline B8g8r8g8422UnormKhr = unbox<VkFormat> 1000156001
              static member inline G8B8R83plane420UnormKhr = unbox<VkFormat> 1000156002
              static member inline G8B8r82plane420UnormKhr = unbox<VkFormat> 1000156003
              static member inline G8B8R83plane422UnormKhr = unbox<VkFormat> 1000156004
              static member inline G8B8r82plane422UnormKhr = unbox<VkFormat> 1000156005
              static member inline G8B8R83plane444UnormKhr = unbox<VkFormat> 1000156006
              static member inline R10x6UnormPack16Khr = unbox<VkFormat> 1000156007
              static member inline R10x6g10x6Unorm2pack16Khr = unbox<VkFormat> 1000156008
              static member inline R10x6g10x6b10x6a10x6Unorm4pack16Khr = unbox<VkFormat> 1000156009
              static member inline G10x6b10x6g10x6r10x6422Unorm4pack16Khr = unbox<VkFormat> 1000156010
              static member inline B10x6g10x6r10x6g10x6422Unorm4pack16Khr = unbox<VkFormat> 1000156011
              static member inline G10x6B10x6R10x63plane420Unorm3pack16Khr = unbox<VkFormat> 1000156012
              static member inline G10x6B10x6r10x62plane420Unorm3pack16Khr = unbox<VkFormat> 1000156013
              static member inline G10x6B10x6R10x63plane422Unorm3pack16Khr = unbox<VkFormat> 1000156014
              static member inline G10x6B10x6r10x62plane422Unorm3pack16Khr = unbox<VkFormat> 1000156015
              static member inline G10x6B10x6R10x63plane444Unorm3pack16Khr = unbox<VkFormat> 1000156016
              static member inline R12x4UnormPack16Khr = unbox<VkFormat> 1000156017
              static member inline R12x4g12x4Unorm2pack16Khr = unbox<VkFormat> 1000156018
              static member inline R12x4g12x4b12x4a12x4Unorm4pack16Khr = unbox<VkFormat> 1000156019
              static member inline G12x4b12x4g12x4r12x4422Unorm4pack16Khr = unbox<VkFormat> 1000156020
              static member inline B12x4g12x4r12x4g12x4422Unorm4pack16Khr = unbox<VkFormat> 1000156021
              static member inline G12x4B12x4R12x43plane420Unorm3pack16Khr = unbox<VkFormat> 1000156022
              static member inline G12x4B12x4r12x42plane420Unorm3pack16Khr = unbox<VkFormat> 1000156023
              static member inline G12x4B12x4R12x43plane422Unorm3pack16Khr = unbox<VkFormat> 1000156024
              static member inline G12x4B12x4r12x42plane422Unorm3pack16Khr = unbox<VkFormat> 1000156025
              static member inline G12x4B12x4R12x43plane444Unorm3pack16Khr = unbox<VkFormat> 1000156026
              static member inline G16b16g16r16422UnormKhr = unbox<VkFormat> 1000156027
              static member inline B16g16r16g16422UnormKhr = unbox<VkFormat> 1000156028
              static member inline G16B16R163plane420UnormKhr = unbox<VkFormat> 1000156029
              static member inline G16B16r162plane420UnormKhr = unbox<VkFormat> 1000156030
              static member inline G16B16R163plane422UnormKhr = unbox<VkFormat> 1000156031
              static member inline G16B16r162plane422UnormKhr = unbox<VkFormat> 1000156032
              static member inline G16B16R163plane444UnormKhr = unbox<VkFormat> 1000156033
         type VkFormatFeatureFlags with
              static member inline MidpointChromaSamplesBitKhr = unbox<VkFormatFeatureFlags> 0x00020000
              static member inline SampledImageYcbcrConversionLinearFilterBitKhr = unbox<VkFormatFeatureFlags> 0x00040000
              static member inline SampledImageYcbcrConversionSeparateReconstructionFilterBitKhr = unbox<VkFormatFeatureFlags> 0x00080000
              static member inline SampledImageYcbcrConversionChromaReconstructionExplicitBitKhr = unbox<VkFormatFeatureFlags> 0x00100000
              static member inline SampledImageYcbcrConversionChromaReconstructionExplicitForceableBitKhr = unbox<VkFormatFeatureFlags> 0x00200000
              static member inline DisjointBitKhr = unbox<VkFormatFeatureFlags> 0x00400000
              static member inline CositedChromaSamplesBitKhr = unbox<VkFormatFeatureFlags> 0x00800000
         type VkImageAspectFlags with
              static member inline Plane0BitKhr = unbox<VkImageAspectFlags> 0x00000010
              static member inline Plane1BitKhr = unbox<VkImageAspectFlags> 0x00000020
              static member inline Plane2BitKhr = unbox<VkImageAspectFlags> 0x00000040
         type VkImageCreateFlags with
              static member inline DisjointBitKhr = unbox<VkImageCreateFlags> 0x00000200
         type VkObjectType with
              static member inline SamplerYcbcrConversionKhr = unbox<VkObjectType> 1000156000
         type VkSamplerYcbcrModelConversion with
              static member inline RgbIdentityKhr = unbox<VkSamplerYcbcrModelConversion> 0
              static member inline YcbcrIdentityKhr = unbox<VkSamplerYcbcrModelConversion> 1
              static member inline Ycbcr709Khr = unbox<VkSamplerYcbcrModelConversion> 2
              static member inline Ycbcr601Khr = unbox<VkSamplerYcbcrModelConversion> 3
              static member inline Ycbcr2020Khr = unbox<VkSamplerYcbcrModelConversion> 4
         type VkSamplerYcbcrRange with
              static member inline ItuFullKhr = unbox<VkSamplerYcbcrRange> 0
              static member inline ItuNarrowKhr = unbox<VkSamplerYcbcrRange> 1

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateSamplerYcbcrConversionKHRDel = delegate of VkDevice * nativeptr<VkSamplerYcbcrConversionCreateInfo> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSamplerYcbcrConversion> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroySamplerYcbcrConversionKHRDel = delegate of VkDevice * VkSamplerYcbcrConversion * nativeptr<VkAllocationCallbacks> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRSamplerYcbcrConversion")
            static let s_vkCreateSamplerYcbcrConversionKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateSamplerYcbcrConversionKHRDel> "vkCreateSamplerYcbcrConversionKHR"
            static let s_vkDestroySamplerYcbcrConversionKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroySamplerYcbcrConversionKHRDel> "vkDestroySamplerYcbcrConversionKHR"
            static do Report.End(3) |> ignore
            static member vkCreateSamplerYcbcrConversionKHR = s_vkCreateSamplerYcbcrConversionKHRDel
            static member vkDestroySamplerYcbcrConversionKHR = s_vkDestroySamplerYcbcrConversionKHRDel
        let vkCreateSamplerYcbcrConversionKHR(device : VkDevice, pCreateInfo : nativeptr<VkSamplerYcbcrConversionCreateInfo>, pAllocator : nativeptr<VkAllocationCallbacks>, pYcbcrConversion : nativeptr<VkSamplerYcbcrConversion>) = Loader<unit>.vkCreateSamplerYcbcrConversionKHR.Invoke(device, pCreateInfo, pAllocator, pYcbcrConversion)
        let vkDestroySamplerYcbcrConversionKHR(device : VkDevice, ycbcrConversion : VkSamplerYcbcrConversion, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroySamplerYcbcrConversionKHR.Invoke(device, ycbcrConversion, pAllocator)

    module EXTDebugReport =
        [<AutoOpen>]
        module EnumExtensions =
             type VkDebugReportObjectTypeEXT with
                  static member inline SamplerYcbcrConversion = unbox<VkDebugReportObjectTypeEXT> 1000156000


module KHRFormatFeatureFlags2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_format_feature_flags2"
    let Number = 361

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkFormatFeatureFlags2KHR = VkFormatFeatureFlags2

    type VkFormatProperties3KHR = VkFormatProperties3



module ANDROIDExternalMemoryAndroidHardwareBuffer =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open EXTQueueFamilyForeign
    open KHRBindMemory2
    open KHRDedicatedAllocation
    open KHRExternalMemory
    open KHRExternalMemoryCapabilities
    open KHRGetMemoryRequirements2
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance1
    open KHRSamplerYcbcrConversion
    let Name = "VK_ANDROID_external_memory_android_hardware_buffer"
    let Number = 130

    let Required = [ EXTQueueFamilyForeign.Name; KHRDedicatedAllocation.Name; KHRExternalMemory.Name; KHRSamplerYcbcrConversion.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkAndroidHardwareBufferFormatPropertiesANDROID =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public format : VkFormat
            val mutable public externalFormat : uint64
            val mutable public formatFeatures : VkFormatFeatureFlags
            val mutable public samplerYcbcrConversionComponents : VkComponentMapping
            val mutable public suggestedYcbcrModel : VkSamplerYcbcrModelConversion
            val mutable public suggestedYcbcrRange : VkSamplerYcbcrRange
            val mutable public suggestedXChromaOffset : VkChromaLocation
            val mutable public suggestedYChromaOffset : VkChromaLocation

            new(pNext : nativeint, format : VkFormat, externalFormat : uint64, formatFeatures : VkFormatFeatureFlags, samplerYcbcrConversionComponents : VkComponentMapping, suggestedYcbcrModel : VkSamplerYcbcrModelConversion, suggestedYcbcrRange : VkSamplerYcbcrRange, suggestedXChromaOffset : VkChromaLocation, suggestedYChromaOffset : VkChromaLocation) =
                {
                    sType = 1000129002u
                    pNext = pNext
                    format = format
                    externalFormat = externalFormat
                    formatFeatures = formatFeatures
                    samplerYcbcrConversionComponents = samplerYcbcrConversionComponents
                    suggestedYcbcrModel = suggestedYcbcrModel
                    suggestedYcbcrRange = suggestedYcbcrRange
                    suggestedXChromaOffset = suggestedXChromaOffset
                    suggestedYChromaOffset = suggestedYChromaOffset
                }

            new(format : VkFormat, externalFormat : uint64, formatFeatures : VkFormatFeatureFlags, samplerYcbcrConversionComponents : VkComponentMapping, suggestedYcbcrModel : VkSamplerYcbcrModelConversion, suggestedYcbcrRange : VkSamplerYcbcrRange, suggestedXChromaOffset : VkChromaLocation, suggestedYChromaOffset : VkChromaLocation) =
                VkAndroidHardwareBufferFormatPropertiesANDROID(Unchecked.defaultof<nativeint>, format, externalFormat, formatFeatures, samplerYcbcrConversionComponents, suggestedYcbcrModel, suggestedYcbcrRange, suggestedXChromaOffset, suggestedYChromaOffset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x.externalFormat = Unchecked.defaultof<uint64> && x.formatFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.samplerYcbcrConversionComponents = Unchecked.defaultof<VkComponentMapping> && x.suggestedYcbcrModel = Unchecked.defaultof<VkSamplerYcbcrModelConversion> && x.suggestedYcbcrRange = Unchecked.defaultof<VkSamplerYcbcrRange> && x.suggestedXChromaOffset = Unchecked.defaultof<VkChromaLocation> && x.suggestedYChromaOffset = Unchecked.defaultof<VkChromaLocation>

            static member Empty =
                VkAndroidHardwareBufferFormatPropertiesANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<VkSamplerYcbcrModelConversion>, Unchecked.defaultof<VkSamplerYcbcrRange>, Unchecked.defaultof<VkChromaLocation>, Unchecked.defaultof<VkChromaLocation>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "format = %A" x.format
                    sprintf "externalFormat = %A" x.externalFormat
                    sprintf "formatFeatures = %A" x.formatFeatures
                    sprintf "samplerYcbcrConversionComponents = %A" x.samplerYcbcrConversionComponents
                    sprintf "suggestedYcbcrModel = %A" x.suggestedYcbcrModel
                    sprintf "suggestedYcbcrRange = %A" x.suggestedYcbcrRange
                    sprintf "suggestedXChromaOffset = %A" x.suggestedXChromaOffset
                    sprintf "suggestedYChromaOffset = %A" x.suggestedYChromaOffset
                ] |> sprintf "VkAndroidHardwareBufferFormatPropertiesANDROID { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAndroidHardwareBufferPropertiesANDROID =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public allocationSize : VkDeviceSize
            val mutable public memoryTypeBits : uint32

            new(pNext : nativeint, allocationSize : VkDeviceSize, memoryTypeBits : uint32) =
                {
                    sType = 1000129001u
                    pNext = pNext
                    allocationSize = allocationSize
                    memoryTypeBits = memoryTypeBits
                }

            new(allocationSize : VkDeviceSize, memoryTypeBits : uint32) =
                VkAndroidHardwareBufferPropertiesANDROID(Unchecked.defaultof<nativeint>, allocationSize, memoryTypeBits)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.allocationSize = Unchecked.defaultof<VkDeviceSize> && x.memoryTypeBits = Unchecked.defaultof<uint32>

            static member Empty =
                VkAndroidHardwareBufferPropertiesANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "allocationSize = %A" x.allocationSize
                    sprintf "memoryTypeBits = %A" x.memoryTypeBits
                ] |> sprintf "VkAndroidHardwareBufferPropertiesANDROID { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAndroidHardwareBufferUsageANDROID =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public androidHardwareBufferUsage : uint64

            new(pNext : nativeint, androidHardwareBufferUsage : uint64) =
                {
                    sType = 1000129000u
                    pNext = pNext
                    androidHardwareBufferUsage = androidHardwareBufferUsage
                }

            new(androidHardwareBufferUsage : uint64) =
                VkAndroidHardwareBufferUsageANDROID(Unchecked.defaultof<nativeint>, androidHardwareBufferUsage)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.androidHardwareBufferUsage = Unchecked.defaultof<uint64>

            static member Empty =
                VkAndroidHardwareBufferUsageANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "androidHardwareBufferUsage = %A" x.androidHardwareBufferUsage
                ] |> sprintf "VkAndroidHardwareBufferUsageANDROID { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalFormatANDROID =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public externalFormat : uint64

            new(pNext : nativeint, externalFormat : uint64) =
                {
                    sType = 1000129005u
                    pNext = pNext
                    externalFormat = externalFormat
                }

            new(externalFormat : uint64) =
                VkExternalFormatANDROID(Unchecked.defaultof<nativeint>, externalFormat)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.externalFormat = Unchecked.defaultof<uint64>

            static member Empty =
                VkExternalFormatANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "externalFormat = %A" x.externalFormat
                ] |> sprintf "VkExternalFormatANDROID { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportAndroidHardwareBufferInfoANDROID =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public buffer : nativeptr<nativeint>

            new(pNext : nativeint, buffer : nativeptr<nativeint>) =
                {
                    sType = 1000129003u
                    pNext = pNext
                    buffer = buffer
                }

            new(buffer : nativeptr<nativeint>) =
                VkImportAndroidHardwareBufferInfoANDROID(Unchecked.defaultof<nativeint>, buffer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkImportAndroidHardwareBufferInfoANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "buffer = %A" x.buffer
                ] |> sprintf "VkImportAndroidHardwareBufferInfoANDROID { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryGetAndroidHardwareBufferInfoANDROID =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memory : VkDeviceMemory

            new(pNext : nativeint, memory : VkDeviceMemory) =
                {
                    sType = 1000129004u
                    pNext = pNext
                    memory = memory
                }

            new(memory : VkDeviceMemory) =
                VkMemoryGetAndroidHardwareBufferInfoANDROID(Unchecked.defaultof<nativeint>, memory)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory>

            static member Empty =
                VkMemoryGetAndroidHardwareBufferInfoANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memory = %A" x.memory
                ] |> sprintf "VkMemoryGetAndroidHardwareBufferInfoANDROID { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkExternalMemoryHandleTypeFlags with
              static member inline AndroidHardwareBufferBitAndroid = unbox<VkExternalMemoryHandleTypeFlags> 0x00000400

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetAndroidHardwareBufferPropertiesANDROIDDel = delegate of VkDevice * nativeptr<nativeint> * nativeptr<VkAndroidHardwareBufferPropertiesANDROID> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetMemoryAndroidHardwareBufferANDROIDDel = delegate of VkDevice * nativeptr<VkMemoryGetAndroidHardwareBufferInfoANDROID> * nativeptr<nativeptr<nativeint>> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading ANDROIDExternalMemoryAndroidHardwareBuffer")
            static let s_vkGetAndroidHardwareBufferPropertiesANDROIDDel = VkRaw.vkImportInstanceDelegate<VkGetAndroidHardwareBufferPropertiesANDROIDDel> "vkGetAndroidHardwareBufferPropertiesANDROID"
            static let s_vkGetMemoryAndroidHardwareBufferANDROIDDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryAndroidHardwareBufferANDROIDDel> "vkGetMemoryAndroidHardwareBufferANDROID"
            static do Report.End(3) |> ignore
            static member vkGetAndroidHardwareBufferPropertiesANDROID = s_vkGetAndroidHardwareBufferPropertiesANDROIDDel
            static member vkGetMemoryAndroidHardwareBufferANDROID = s_vkGetMemoryAndroidHardwareBufferANDROIDDel
        let vkGetAndroidHardwareBufferPropertiesANDROID(device : VkDevice, buffer : nativeptr<nativeint>, pProperties : nativeptr<VkAndroidHardwareBufferPropertiesANDROID>) = Loader<unit>.vkGetAndroidHardwareBufferPropertiesANDROID.Invoke(device, buffer, pProperties)
        let vkGetMemoryAndroidHardwareBufferANDROID(device : VkDevice, pInfo : nativeptr<VkMemoryGetAndroidHardwareBufferInfoANDROID>, pBuffer : nativeptr<nativeptr<nativeint>>) = Loader<unit>.vkGetMemoryAndroidHardwareBufferANDROID.Invoke(device, pInfo, pBuffer)

    module KHRFormatFeatureFlags2 =
        [<StructLayout(LayoutKind.Sequential)>]
        type VkAndroidHardwareBufferFormatProperties2ANDROID =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public format : VkFormat
                val mutable public externalFormat : uint64
                val mutable public formatFeatures : VkFormatFeatureFlags2
                val mutable public samplerYcbcrConversionComponents : VkComponentMapping
                val mutable public suggestedYcbcrModel : VkSamplerYcbcrModelConversion
                val mutable public suggestedYcbcrRange : VkSamplerYcbcrRange
                val mutable public suggestedXChromaOffset : VkChromaLocation
                val mutable public suggestedYChromaOffset : VkChromaLocation

                new(pNext : nativeint, format : VkFormat, externalFormat : uint64, formatFeatures : VkFormatFeatureFlags2, samplerYcbcrConversionComponents : VkComponentMapping, suggestedYcbcrModel : VkSamplerYcbcrModelConversion, suggestedYcbcrRange : VkSamplerYcbcrRange, suggestedXChromaOffset : VkChromaLocation, suggestedYChromaOffset : VkChromaLocation) =
                    {
                        sType = 1000129006u
                        pNext = pNext
                        format = format
                        externalFormat = externalFormat
                        formatFeatures = formatFeatures
                        samplerYcbcrConversionComponents = samplerYcbcrConversionComponents
                        suggestedYcbcrModel = suggestedYcbcrModel
                        suggestedYcbcrRange = suggestedYcbcrRange
                        suggestedXChromaOffset = suggestedXChromaOffset
                        suggestedYChromaOffset = suggestedYChromaOffset
                    }

                new(format : VkFormat, externalFormat : uint64, formatFeatures : VkFormatFeatureFlags2, samplerYcbcrConversionComponents : VkComponentMapping, suggestedYcbcrModel : VkSamplerYcbcrModelConversion, suggestedYcbcrRange : VkSamplerYcbcrRange, suggestedXChromaOffset : VkChromaLocation, suggestedYChromaOffset : VkChromaLocation) =
                    VkAndroidHardwareBufferFormatProperties2ANDROID(Unchecked.defaultof<nativeint>, format, externalFormat, formatFeatures, samplerYcbcrConversionComponents, suggestedYcbcrModel, suggestedYcbcrRange, suggestedXChromaOffset, suggestedYChromaOffset)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x.externalFormat = Unchecked.defaultof<uint64> && x.formatFeatures = Unchecked.defaultof<VkFormatFeatureFlags2> && x.samplerYcbcrConversionComponents = Unchecked.defaultof<VkComponentMapping> && x.suggestedYcbcrModel = Unchecked.defaultof<VkSamplerYcbcrModelConversion> && x.suggestedYcbcrRange = Unchecked.defaultof<VkSamplerYcbcrRange> && x.suggestedXChromaOffset = Unchecked.defaultof<VkChromaLocation> && x.suggestedYChromaOffset = Unchecked.defaultof<VkChromaLocation>

                static member Empty =
                    VkAndroidHardwareBufferFormatProperties2ANDROID(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkFormatFeatureFlags2>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<VkSamplerYcbcrModelConversion>, Unchecked.defaultof<VkSamplerYcbcrRange>, Unchecked.defaultof<VkChromaLocation>, Unchecked.defaultof<VkChromaLocation>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "format = %A" x.format
                        sprintf "externalFormat = %A" x.externalFormat
                        sprintf "formatFeatures = %A" x.formatFeatures
                        sprintf "samplerYcbcrConversionComponents = %A" x.samplerYcbcrConversionComponents
                        sprintf "suggestedYcbcrModel = %A" x.suggestedYcbcrModel
                        sprintf "suggestedYcbcrRange = %A" x.suggestedYcbcrRange
                        sprintf "suggestedXChromaOffset = %A" x.suggestedXChromaOffset
                        sprintf "suggestedYChromaOffset = %A" x.suggestedYChromaOffset
                    ] |> sprintf "VkAndroidHardwareBufferFormatProperties2ANDROID { %s }"
            end



module ARMRasterizationOrderAttachmentAccess =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_ARM_rasterization_order_attachment_access"
    let Number = 343

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]



    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public rasterizationOrderColorAttachmentAccess : VkBool32
            val mutable public rasterizationOrderDepthAttachmentAccess : VkBool32
            val mutable public rasterizationOrderStencilAttachmentAccess : VkBool32

            new(pNext : nativeint, rasterizationOrderColorAttachmentAccess : VkBool32, rasterizationOrderDepthAttachmentAccess : VkBool32, rasterizationOrderStencilAttachmentAccess : VkBool32) =
                {
                    sType = 1000342000u
                    pNext = pNext
                    rasterizationOrderColorAttachmentAccess = rasterizationOrderColorAttachmentAccess
                    rasterizationOrderDepthAttachmentAccess = rasterizationOrderDepthAttachmentAccess
                    rasterizationOrderStencilAttachmentAccess = rasterizationOrderStencilAttachmentAccess
                }

            new(rasterizationOrderColorAttachmentAccess : VkBool32, rasterizationOrderDepthAttachmentAccess : VkBool32, rasterizationOrderStencilAttachmentAccess : VkBool32) =
                VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(Unchecked.defaultof<nativeint>, rasterizationOrderColorAttachmentAccess, rasterizationOrderDepthAttachmentAccess, rasterizationOrderStencilAttachmentAccess)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.rasterizationOrderColorAttachmentAccess = Unchecked.defaultof<VkBool32> && x.rasterizationOrderDepthAttachmentAccess = Unchecked.defaultof<VkBool32> && x.rasterizationOrderStencilAttachmentAccess = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "rasterizationOrderColorAttachmentAccess = %A" x.rasterizationOrderColorAttachmentAccess
                    sprintf "rasterizationOrderDepthAttachmentAccess = %A" x.rasterizationOrderDepthAttachmentAccess
                    sprintf "rasterizationOrderStencilAttachmentAccess = %A" x.rasterizationOrderStencilAttachmentAccess
                ] |> sprintf "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkPipelineColorBlendStateCreateFlags with
              static member inline RasterizationOrderAttachmentAccessBitArm = unbox<VkPipelineColorBlendStateCreateFlags> 0x00000001
         type VkPipelineDepthStencilStateCreateFlags with
              static member inline RasterizationOrderAttachmentDepthAccessBitArm = unbox<VkPipelineDepthStencilStateCreateFlags> 0x00000001
              static member inline RasterizationOrderAttachmentStencilAccessBitArm = unbox<VkPipelineDepthStencilStateCreateFlags> 0x00000002
         type VkSubpassDescriptionFlags with
              static member inline RasterizationOrderAttachmentColorAccessBitArm = unbox<VkSubpassDescriptionFlags> 0x00000010
              static member inline RasterizationOrderAttachmentDepthAccessBitArm = unbox<VkSubpassDescriptionFlags> 0x00000020
              static member inline RasterizationOrderAttachmentStencilAccessBitArm = unbox<VkSubpassDescriptionFlags> 0x00000040


module EXT4444Formats =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_4444_formats"
    let Number = 341

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevice4444FormatsFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public formatA4R4G4B4 : VkBool32
            val mutable public formatA4B4G4R4 : VkBool32

            new(pNext : nativeint, formatA4R4G4B4 : VkBool32, formatA4B4G4R4 : VkBool32) =
                {
                    sType = 1000340000u
                    pNext = pNext
                    formatA4R4G4B4 = formatA4R4G4B4
                    formatA4B4G4R4 = formatA4B4G4R4
                }

            new(formatA4R4G4B4 : VkBool32, formatA4B4G4R4 : VkBool32) =
                VkPhysicalDevice4444FormatsFeaturesEXT(Unchecked.defaultof<nativeint>, formatA4R4G4B4, formatA4B4G4R4)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.formatA4R4G4B4 = Unchecked.defaultof<VkBool32> && x.formatA4B4G4R4 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevice4444FormatsFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "formatA4R4G4B4 = %A" x.formatA4R4G4B4
                    sprintf "formatA4B4G4R4 = %A" x.formatA4B4G4R4
                ] |> sprintf "VkPhysicalDevice4444FormatsFeaturesEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkFormat with
              static member inline A4r4g4b4UnormPack16Ext = unbox<VkFormat> 1000340000
              static member inline A4b4g4r4UnormPack16Ext = unbox<VkFormat> 1000340001


module KHRDisplay =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_KHR_display"
    let Number = 3

    let Required = [ KHRSurface.Name ]



    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayKHR =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkDisplayKHR(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayModeKHR =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkDisplayModeKHR(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<Flags>]
    type VkDisplayPlaneAlphaFlagsKHR =
        | All = 15
        | None = 0
        | OpaqueBit = 0x00000001
        | GlobalBit = 0x00000002
        | PerPixelBit = 0x00000004
        | PerPixelPremultipliedBit = 0x00000008

    type VkSurfaceTransformFlagsKHR = KHRSurface.VkSurfaceTransformFlagsKHR

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayModeParametersKHR =
        struct
            val mutable public visibleRegion : VkExtent2D
            val mutable public refreshRate : uint32

            new(visibleRegion : VkExtent2D, refreshRate : uint32) =
                {
                    visibleRegion = visibleRegion
                    refreshRate = refreshRate
                }

            member x.IsEmpty =
                x.visibleRegion = Unchecked.defaultof<VkExtent2D> && x.refreshRate = Unchecked.defaultof<uint32>

            static member Empty =
                VkDisplayModeParametersKHR(Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "visibleRegion = %A" x.visibleRegion
                    sprintf "refreshRate = %A" x.refreshRate
                ] |> sprintf "VkDisplayModeParametersKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayModeCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDisplayModeCreateFlagsKHR
            val mutable public parameters : VkDisplayModeParametersKHR

            new(pNext : nativeint, flags : VkDisplayModeCreateFlagsKHR, parameters : VkDisplayModeParametersKHR) =
                {
                    sType = 1000002000u
                    pNext = pNext
                    flags = flags
                    parameters = parameters
                }

            new(flags : VkDisplayModeCreateFlagsKHR, parameters : VkDisplayModeParametersKHR) =
                VkDisplayModeCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, parameters)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDisplayModeCreateFlagsKHR> && x.parameters = Unchecked.defaultof<VkDisplayModeParametersKHR>

            static member Empty =
                VkDisplayModeCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplayModeCreateFlagsKHR>, Unchecked.defaultof<VkDisplayModeParametersKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "parameters = %A" x.parameters
                ] |> sprintf "VkDisplayModeCreateInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayModePropertiesKHR =
        struct
            val mutable public displayMode : VkDisplayModeKHR
            val mutable public parameters : VkDisplayModeParametersKHR

            new(displayMode : VkDisplayModeKHR, parameters : VkDisplayModeParametersKHR) =
                {
                    displayMode = displayMode
                    parameters = parameters
                }

            member x.IsEmpty =
                x.displayMode = Unchecked.defaultof<VkDisplayModeKHR> && x.parameters = Unchecked.defaultof<VkDisplayModeParametersKHR>

            static member Empty =
                VkDisplayModePropertiesKHR(Unchecked.defaultof<VkDisplayModeKHR>, Unchecked.defaultof<VkDisplayModeParametersKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "displayMode = %A" x.displayMode
                    sprintf "parameters = %A" x.parameters
                ] |> sprintf "VkDisplayModePropertiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayPlaneCapabilitiesKHR =
        struct
            val mutable public supportedAlpha : VkDisplayPlaneAlphaFlagsKHR
            val mutable public minSrcPosition : VkOffset2D
            val mutable public maxSrcPosition : VkOffset2D
            val mutable public minSrcExtent : VkExtent2D
            val mutable public maxSrcExtent : VkExtent2D
            val mutable public minDstPosition : VkOffset2D
            val mutable public maxDstPosition : VkOffset2D
            val mutable public minDstExtent : VkExtent2D
            val mutable public maxDstExtent : VkExtent2D

            new(supportedAlpha : VkDisplayPlaneAlphaFlagsKHR, minSrcPosition : VkOffset2D, maxSrcPosition : VkOffset2D, minSrcExtent : VkExtent2D, maxSrcExtent : VkExtent2D, minDstPosition : VkOffset2D, maxDstPosition : VkOffset2D, minDstExtent : VkExtent2D, maxDstExtent : VkExtent2D) =
                {
                    supportedAlpha = supportedAlpha
                    minSrcPosition = minSrcPosition
                    maxSrcPosition = maxSrcPosition
                    minSrcExtent = minSrcExtent
                    maxSrcExtent = maxSrcExtent
                    minDstPosition = minDstPosition
                    maxDstPosition = maxDstPosition
                    minDstExtent = minDstExtent
                    maxDstExtent = maxDstExtent
                }

            member x.IsEmpty =
                x.supportedAlpha = Unchecked.defaultof<VkDisplayPlaneAlphaFlagsKHR> && x.minSrcPosition = Unchecked.defaultof<VkOffset2D> && x.maxSrcPosition = Unchecked.defaultof<VkOffset2D> && x.minSrcExtent = Unchecked.defaultof<VkExtent2D> && x.maxSrcExtent = Unchecked.defaultof<VkExtent2D> && x.minDstPosition = Unchecked.defaultof<VkOffset2D> && x.maxDstPosition = Unchecked.defaultof<VkOffset2D> && x.minDstExtent = Unchecked.defaultof<VkExtent2D> && x.maxDstExtent = Unchecked.defaultof<VkExtent2D>

            static member Empty =
                VkDisplayPlaneCapabilitiesKHR(Unchecked.defaultof<VkDisplayPlaneAlphaFlagsKHR>, Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "supportedAlpha = %A" x.supportedAlpha
                    sprintf "minSrcPosition = %A" x.minSrcPosition
                    sprintf "maxSrcPosition = %A" x.maxSrcPosition
                    sprintf "minSrcExtent = %A" x.minSrcExtent
                    sprintf "maxSrcExtent = %A" x.maxSrcExtent
                    sprintf "minDstPosition = %A" x.minDstPosition
                    sprintf "maxDstPosition = %A" x.maxDstPosition
                    sprintf "minDstExtent = %A" x.minDstExtent
                    sprintf "maxDstExtent = %A" x.maxDstExtent
                ] |> sprintf "VkDisplayPlaneCapabilitiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayPlanePropertiesKHR =
        struct
            val mutable public currentDisplay : VkDisplayKHR
            val mutable public currentStackIndex : uint32

            new(currentDisplay : VkDisplayKHR, currentStackIndex : uint32) =
                {
                    currentDisplay = currentDisplay
                    currentStackIndex = currentStackIndex
                }

            member x.IsEmpty =
                x.currentDisplay = Unchecked.defaultof<VkDisplayKHR> && x.currentStackIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkDisplayPlanePropertiesKHR(Unchecked.defaultof<VkDisplayKHR>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "currentDisplay = %A" x.currentDisplay
                    sprintf "currentStackIndex = %A" x.currentStackIndex
                ] |> sprintf "VkDisplayPlanePropertiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayPropertiesKHR =
        struct
            val mutable public display : VkDisplayKHR
            val mutable public displayName : cstr
            val mutable public physicalDimensions : VkExtent2D
            val mutable public physicalResolution : VkExtent2D
            val mutable public supportedTransforms : VkSurfaceTransformFlagsKHR
            val mutable public planeReorderPossible : VkBool32
            val mutable public persistentContent : VkBool32

            new(display : VkDisplayKHR, displayName : cstr, physicalDimensions : VkExtent2D, physicalResolution : VkExtent2D, supportedTransforms : VkSurfaceTransformFlagsKHR, planeReorderPossible : VkBool32, persistentContent : VkBool32) =
                {
                    display = display
                    displayName = displayName
                    physicalDimensions = physicalDimensions
                    physicalResolution = physicalResolution
                    supportedTransforms = supportedTransforms
                    planeReorderPossible = planeReorderPossible
                    persistentContent = persistentContent
                }

            member x.IsEmpty =
                x.display = Unchecked.defaultof<VkDisplayKHR> && x.displayName = Unchecked.defaultof<cstr> && x.physicalDimensions = Unchecked.defaultof<VkExtent2D> && x.physicalResolution = Unchecked.defaultof<VkExtent2D> && x.supportedTransforms = Unchecked.defaultof<VkSurfaceTransformFlagsKHR> && x.planeReorderPossible = Unchecked.defaultof<VkBool32> && x.persistentContent = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkDisplayPropertiesKHR(Unchecked.defaultof<VkDisplayKHR>, Unchecked.defaultof<cstr>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "display = %A" x.display
                    sprintf "displayName = %A" x.displayName
                    sprintf "physicalDimensions = %A" x.physicalDimensions
                    sprintf "physicalResolution = %A" x.physicalResolution
                    sprintf "supportedTransforms = %A" x.supportedTransforms
                    sprintf "planeReorderPossible = %A" x.planeReorderPossible
                    sprintf "persistentContent = %A" x.persistentContent
                ] |> sprintf "VkDisplayPropertiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplaySurfaceCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDisplaySurfaceCreateFlagsKHR
            val mutable public displayMode : VkDisplayModeKHR
            val mutable public planeIndex : uint32
            val mutable public planeStackIndex : uint32
            val mutable public transform : VkSurfaceTransformFlagsKHR
            val mutable public globalAlpha : float32
            val mutable public alphaMode : VkDisplayPlaneAlphaFlagsKHR
            val mutable public imageExtent : VkExtent2D

            new(pNext : nativeint, flags : VkDisplaySurfaceCreateFlagsKHR, displayMode : VkDisplayModeKHR, planeIndex : uint32, planeStackIndex : uint32, transform : VkSurfaceTransformFlagsKHR, globalAlpha : float32, alphaMode : VkDisplayPlaneAlphaFlagsKHR, imageExtent : VkExtent2D) =
                {
                    sType = 1000002001u
                    pNext = pNext
                    flags = flags
                    displayMode = displayMode
                    planeIndex = planeIndex
                    planeStackIndex = planeStackIndex
                    transform = transform
                    globalAlpha = globalAlpha
                    alphaMode = alphaMode
                    imageExtent = imageExtent
                }

            new(flags : VkDisplaySurfaceCreateFlagsKHR, displayMode : VkDisplayModeKHR, planeIndex : uint32, planeStackIndex : uint32, transform : VkSurfaceTransformFlagsKHR, globalAlpha : float32, alphaMode : VkDisplayPlaneAlphaFlagsKHR, imageExtent : VkExtent2D) =
                VkDisplaySurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, displayMode, planeIndex, planeStackIndex, transform, globalAlpha, alphaMode, imageExtent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDisplaySurfaceCreateFlagsKHR> && x.displayMode = Unchecked.defaultof<VkDisplayModeKHR> && x.planeIndex = Unchecked.defaultof<uint32> && x.planeStackIndex = Unchecked.defaultof<uint32> && x.transform = Unchecked.defaultof<VkSurfaceTransformFlagsKHR> && x.globalAlpha = Unchecked.defaultof<float32> && x.alphaMode = Unchecked.defaultof<VkDisplayPlaneAlphaFlagsKHR> && x.imageExtent = Unchecked.defaultof<VkExtent2D>

            static member Empty =
                VkDisplaySurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplaySurfaceCreateFlagsKHR>, Unchecked.defaultof<VkDisplayModeKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<float32>, Unchecked.defaultof<VkDisplayPlaneAlphaFlagsKHR>, Unchecked.defaultof<VkExtent2D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "displayMode = %A" x.displayMode
                    sprintf "planeIndex = %A" x.planeIndex
                    sprintf "planeStackIndex = %A" x.planeStackIndex
                    sprintf "transform = %A" x.transform
                    sprintf "globalAlpha = %A" x.globalAlpha
                    sprintf "alphaMode = %A" x.alphaMode
                    sprintf "imageExtent = %A" x.imageExtent
                ] |> sprintf "VkDisplaySurfaceCreateInfoKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkObjectType with
              static member inline DisplayKhr = unbox<VkObjectType> 1000002000
              static member inline DisplayModeKhr = unbox<VkObjectType> 1000002001

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceDisplayPropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkDisplayPropertiesKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceDisplayPlanePropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkDisplayPlanePropertiesKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDisplayPlaneSupportedDisplaysKHRDel = delegate of VkPhysicalDevice * uint32 * nativeptr<uint32> * nativeptr<VkDisplayKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDisplayModePropertiesKHRDel = delegate of VkPhysicalDevice * VkDisplayKHR * nativeptr<uint32> * nativeptr<VkDisplayModePropertiesKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateDisplayModeKHRDel = delegate of VkPhysicalDevice * VkDisplayKHR * nativeptr<VkDisplayModeCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkDisplayModeKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDisplayPlaneCapabilitiesKHRDel = delegate of VkPhysicalDevice * VkDisplayModeKHR * uint32 * nativeptr<VkDisplayPlaneCapabilitiesKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateDisplayPlaneSurfaceKHRDel = delegate of VkInstance * nativeptr<VkDisplaySurfaceCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRDisplay")
            static let s_vkGetPhysicalDeviceDisplayPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceDisplayPropertiesKHRDel> "vkGetPhysicalDeviceDisplayPropertiesKHR"
            static let s_vkGetPhysicalDeviceDisplayPlanePropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceDisplayPlanePropertiesKHRDel> "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"
            static let s_vkGetDisplayPlaneSupportedDisplaysKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDisplayPlaneSupportedDisplaysKHRDel> "vkGetDisplayPlaneSupportedDisplaysKHR"
            static let s_vkGetDisplayModePropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDisplayModePropertiesKHRDel> "vkGetDisplayModePropertiesKHR"
            static let s_vkCreateDisplayModeKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateDisplayModeKHRDel> "vkCreateDisplayModeKHR"
            static let s_vkGetDisplayPlaneCapabilitiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDisplayPlaneCapabilitiesKHRDel> "vkGetDisplayPlaneCapabilitiesKHR"
            static let s_vkCreateDisplayPlaneSurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateDisplayPlaneSurfaceKHRDel> "vkCreateDisplayPlaneSurfaceKHR"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceDisplayPropertiesKHR = s_vkGetPhysicalDeviceDisplayPropertiesKHRDel
            static member vkGetPhysicalDeviceDisplayPlanePropertiesKHR = s_vkGetPhysicalDeviceDisplayPlanePropertiesKHRDel
            static member vkGetDisplayPlaneSupportedDisplaysKHR = s_vkGetDisplayPlaneSupportedDisplaysKHRDel
            static member vkGetDisplayModePropertiesKHR = s_vkGetDisplayModePropertiesKHRDel
            static member vkCreateDisplayModeKHR = s_vkCreateDisplayModeKHRDel
            static member vkGetDisplayPlaneCapabilitiesKHR = s_vkGetDisplayPlaneCapabilitiesKHRDel
            static member vkCreateDisplayPlaneSurfaceKHR = s_vkCreateDisplayPlaneSurfaceKHRDel
        let vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkDisplayPropertiesKHR>) = Loader<unit>.vkGetPhysicalDeviceDisplayPropertiesKHR.Invoke(physicalDevice, pPropertyCount, pProperties)
        let vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkDisplayPlanePropertiesKHR>) = Loader<unit>.vkGetPhysicalDeviceDisplayPlanePropertiesKHR.Invoke(physicalDevice, pPropertyCount, pProperties)
        let vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice : VkPhysicalDevice, planeIndex : uint32, pDisplayCount : nativeptr<uint32>, pDisplays : nativeptr<VkDisplayKHR>) = Loader<unit>.vkGetDisplayPlaneSupportedDisplaysKHR.Invoke(physicalDevice, planeIndex, pDisplayCount, pDisplays)
        let vkGetDisplayModePropertiesKHR(physicalDevice : VkPhysicalDevice, display : VkDisplayKHR, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkDisplayModePropertiesKHR>) = Loader<unit>.vkGetDisplayModePropertiesKHR.Invoke(physicalDevice, display, pPropertyCount, pProperties)
        let vkCreateDisplayModeKHR(physicalDevice : VkPhysicalDevice, display : VkDisplayKHR, pCreateInfo : nativeptr<VkDisplayModeCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pMode : nativeptr<VkDisplayModeKHR>) = Loader<unit>.vkCreateDisplayModeKHR.Invoke(physicalDevice, display, pCreateInfo, pAllocator, pMode)
        let vkGetDisplayPlaneCapabilitiesKHR(physicalDevice : VkPhysicalDevice, mode : VkDisplayModeKHR, planeIndex : uint32, pCapabilities : nativeptr<VkDisplayPlaneCapabilitiesKHR>) = Loader<unit>.vkGetDisplayPlaneCapabilitiesKHR.Invoke(physicalDevice, mode, planeIndex, pCapabilities)
        let vkCreateDisplayPlaneSurfaceKHR(instance : VkInstance, pCreateInfo : nativeptr<VkDisplaySurfaceCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateDisplayPlaneSurfaceKHR.Invoke(instance, pCreateInfo, pAllocator, pSurface)

module EXTDirectModeDisplay =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRDisplay
    open KHRSurface
    let Name = "VK_EXT_direct_mode_display"
    let Number = 89

    let Required = [ KHRDisplay.Name ]


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkReleaseDisplayEXTDel = delegate of VkPhysicalDevice * VkDisplayKHR -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTDirectModeDisplay")
            static let s_vkReleaseDisplayEXTDel = VkRaw.vkImportInstanceDelegate<VkReleaseDisplayEXTDel> "vkReleaseDisplayEXT"
            static do Report.End(3) |> ignore
            static member vkReleaseDisplayEXT = s_vkReleaseDisplayEXTDel
        let vkReleaseDisplayEXT(physicalDevice : VkPhysicalDevice, display : VkDisplayKHR) = Loader<unit>.vkReleaseDisplayEXT.Invoke(physicalDevice, display)

module EXTAcquireDrmDisplay =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDirectModeDisplay
    open KHRDisplay
    open KHRSurface
    let Name = "VK_EXT_acquire_drm_display"
    let Number = 286

    let Required = [ EXTDirectModeDisplay.Name ]


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkAcquireDrmDisplayEXTDel = delegate of VkPhysicalDevice * int * VkDisplayKHR -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDrmDisplayEXTDel = delegate of VkPhysicalDevice * int * uint32 * nativeptr<VkDisplayKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTAcquireDrmDisplay")
            static let s_vkAcquireDrmDisplayEXTDel = VkRaw.vkImportInstanceDelegate<VkAcquireDrmDisplayEXTDel> "vkAcquireDrmDisplayEXT"
            static let s_vkGetDrmDisplayEXTDel = VkRaw.vkImportInstanceDelegate<VkGetDrmDisplayEXTDel> "vkGetDrmDisplayEXT"
            static do Report.End(3) |> ignore
            static member vkAcquireDrmDisplayEXT = s_vkAcquireDrmDisplayEXTDel
            static member vkGetDrmDisplayEXT = s_vkGetDrmDisplayEXTDel
        let vkAcquireDrmDisplayEXT(physicalDevice : VkPhysicalDevice, drmFd : int, display : VkDisplayKHR) = Loader<unit>.vkAcquireDrmDisplayEXT.Invoke(physicalDevice, drmFd, display)
        let vkGetDrmDisplayEXT(physicalDevice : VkPhysicalDevice, drmFd : int, connectorId : uint32, display : nativeptr<VkDisplayKHR>) = Loader<unit>.vkGetDrmDisplayEXT.Invoke(physicalDevice, drmFd, connectorId, display)

module EXTAcquireXlibDisplay =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDirectModeDisplay
    open KHRDisplay
    open KHRSurface
    let Name = "VK_EXT_acquire_xlib_display"
    let Number = 90

    let Required = [ EXTDirectModeDisplay.Name ]


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkAcquireXlibDisplayEXTDel = delegate of VkPhysicalDevice * nativeptr<nativeint> * VkDisplayKHR -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetRandROutputDisplayEXTDel = delegate of VkPhysicalDevice * nativeptr<nativeint> * nativeint * nativeptr<VkDisplayKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTAcquireXlibDisplay")
            static let s_vkAcquireXlibDisplayEXTDel = VkRaw.vkImportInstanceDelegate<VkAcquireXlibDisplayEXTDel> "vkAcquireXlibDisplayEXT"
            static let s_vkGetRandROutputDisplayEXTDel = VkRaw.vkImportInstanceDelegate<VkGetRandROutputDisplayEXTDel> "vkGetRandROutputDisplayEXT"
            static do Report.End(3) |> ignore
            static member vkAcquireXlibDisplayEXT = s_vkAcquireXlibDisplayEXTDel
            static member vkGetRandROutputDisplayEXT = s_vkGetRandROutputDisplayEXTDel
        let vkAcquireXlibDisplayEXT(physicalDevice : VkPhysicalDevice, dpy : nativeptr<nativeint>, display : VkDisplayKHR) = Loader<unit>.vkAcquireXlibDisplayEXT.Invoke(physicalDevice, dpy, display)
        let vkGetRandROutputDisplayEXT(physicalDevice : VkPhysicalDevice, dpy : nativeptr<nativeint>, rrOutput : nativeint, pDisplay : nativeptr<VkDisplayKHR>) = Loader<unit>.vkGetRandROutputDisplayEXT.Invoke(physicalDevice, dpy, rrOutput, pDisplay)

module EXTAstcDecodeMode =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_astc_decode_mode"
    let Number = 68

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageViewASTCDecodeModeEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public decodeMode : VkFormat

            new(pNext : nativeint, decodeMode : VkFormat) =
                {
                    sType = 1000067000u
                    pNext = pNext
                    decodeMode = decodeMode
                }

            new(decodeMode : VkFormat) =
                VkImageViewASTCDecodeModeEXT(Unchecked.defaultof<nativeint>, decodeMode)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.decodeMode = Unchecked.defaultof<VkFormat>

            static member Empty =
                VkImageViewASTCDecodeModeEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "decodeMode = %A" x.decodeMode
                ] |> sprintf "VkImageViewASTCDecodeModeEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceASTCDecodeFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public decodeModeSharedExponent : VkBool32

            new(pNext : nativeint, decodeModeSharedExponent : VkBool32) =
                {
                    sType = 1000067001u
                    pNext = pNext
                    decodeModeSharedExponent = decodeModeSharedExponent
                }

            new(decodeModeSharedExponent : VkBool32) =
                VkPhysicalDeviceASTCDecodeFeaturesEXT(Unchecked.defaultof<nativeint>, decodeModeSharedExponent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.decodeModeSharedExponent = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceASTCDecodeFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "decodeModeSharedExponent = %A" x.decodeModeSharedExponent
                ] |> sprintf "VkPhysicalDeviceASTCDecodeFeaturesEXT { %s }"
        end



module EXTBlendOperationAdvanced =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_blend_operation_advanced"
    let Number = 149

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkBlendOverlapEXT =
        | Uncorrelated = 0
        | Disjoint = 1
        | Conjoint = 2


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public advancedBlendCoherentOperations : VkBool32

            new(pNext : nativeint, advancedBlendCoherentOperations : VkBool32) =
                {
                    sType = 1000148000u
                    pNext = pNext
                    advancedBlendCoherentOperations = advancedBlendCoherentOperations
                }

            new(advancedBlendCoherentOperations : VkBool32) =
                VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(Unchecked.defaultof<nativeint>, advancedBlendCoherentOperations)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.advancedBlendCoherentOperations = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "advancedBlendCoherentOperations = %A" x.advancedBlendCoherentOperations
                ] |> sprintf "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public advancedBlendMaxColorAttachments : uint32
            val mutable public advancedBlendIndependentBlend : VkBool32
            val mutable public advancedBlendNonPremultipliedSrcColor : VkBool32
            val mutable public advancedBlendNonPremultipliedDstColor : VkBool32
            val mutable public advancedBlendCorrelatedOverlap : VkBool32
            val mutable public advancedBlendAllOperations : VkBool32

            new(pNext : nativeint, advancedBlendMaxColorAttachments : uint32, advancedBlendIndependentBlend : VkBool32, advancedBlendNonPremultipliedSrcColor : VkBool32, advancedBlendNonPremultipliedDstColor : VkBool32, advancedBlendCorrelatedOverlap : VkBool32, advancedBlendAllOperations : VkBool32) =
                {
                    sType = 1000148001u
                    pNext = pNext
                    advancedBlendMaxColorAttachments = advancedBlendMaxColorAttachments
                    advancedBlendIndependentBlend = advancedBlendIndependentBlend
                    advancedBlendNonPremultipliedSrcColor = advancedBlendNonPremultipliedSrcColor
                    advancedBlendNonPremultipliedDstColor = advancedBlendNonPremultipliedDstColor
                    advancedBlendCorrelatedOverlap = advancedBlendCorrelatedOverlap
                    advancedBlendAllOperations = advancedBlendAllOperations
                }

            new(advancedBlendMaxColorAttachments : uint32, advancedBlendIndependentBlend : VkBool32, advancedBlendNonPremultipliedSrcColor : VkBool32, advancedBlendNonPremultipliedDstColor : VkBool32, advancedBlendCorrelatedOverlap : VkBool32, advancedBlendAllOperations : VkBool32) =
                VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(Unchecked.defaultof<nativeint>, advancedBlendMaxColorAttachments, advancedBlendIndependentBlend, advancedBlendNonPremultipliedSrcColor, advancedBlendNonPremultipliedDstColor, advancedBlendCorrelatedOverlap, advancedBlendAllOperations)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.advancedBlendMaxColorAttachments = Unchecked.defaultof<uint32> && x.advancedBlendIndependentBlend = Unchecked.defaultof<VkBool32> && x.advancedBlendNonPremultipliedSrcColor = Unchecked.defaultof<VkBool32> && x.advancedBlendNonPremultipliedDstColor = Unchecked.defaultof<VkBool32> && x.advancedBlendCorrelatedOverlap = Unchecked.defaultof<VkBool32> && x.advancedBlendAllOperations = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "advancedBlendMaxColorAttachments = %A" x.advancedBlendMaxColorAttachments
                    sprintf "advancedBlendIndependentBlend = %A" x.advancedBlendIndependentBlend
                    sprintf "advancedBlendNonPremultipliedSrcColor = %A" x.advancedBlendNonPremultipliedSrcColor
                    sprintf "advancedBlendNonPremultipliedDstColor = %A" x.advancedBlendNonPremultipliedDstColor
                    sprintf "advancedBlendCorrelatedOverlap = %A" x.advancedBlendCorrelatedOverlap
                    sprintf "advancedBlendAllOperations = %A" x.advancedBlendAllOperations
                ] |> sprintf "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineColorBlendAdvancedStateCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcPremultiplied : VkBool32
            val mutable public dstPremultiplied : VkBool32
            val mutable public blendOverlap : VkBlendOverlapEXT

            new(pNext : nativeint, srcPremultiplied : VkBool32, dstPremultiplied : VkBool32, blendOverlap : VkBlendOverlapEXT) =
                {
                    sType = 1000148002u
                    pNext = pNext
                    srcPremultiplied = srcPremultiplied
                    dstPremultiplied = dstPremultiplied
                    blendOverlap = blendOverlap
                }

            new(srcPremultiplied : VkBool32, dstPremultiplied : VkBool32, blendOverlap : VkBlendOverlapEXT) =
                VkPipelineColorBlendAdvancedStateCreateInfoEXT(Unchecked.defaultof<nativeint>, srcPremultiplied, dstPremultiplied, blendOverlap)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcPremultiplied = Unchecked.defaultof<VkBool32> && x.dstPremultiplied = Unchecked.defaultof<VkBool32> && x.blendOverlap = Unchecked.defaultof<VkBlendOverlapEXT>

            static member Empty =
                VkPipelineColorBlendAdvancedStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBlendOverlapEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcPremultiplied = %A" x.srcPremultiplied
                    sprintf "dstPremultiplied = %A" x.dstPremultiplied
                    sprintf "blendOverlap = %A" x.blendOverlap
                ] |> sprintf "VkPipelineColorBlendAdvancedStateCreateInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags with
              static member inline ColorAttachmentReadNoncoherentBitExt = unbox<VkAccessFlags> 0x00080000
         type VkBlendOp with
              static member inline ZeroExt = unbox<VkBlendOp> 1000148000
              static member inline SrcExt = unbox<VkBlendOp> 1000148001
              static member inline DstExt = unbox<VkBlendOp> 1000148002
              static member inline SrcOverExt = unbox<VkBlendOp> 1000148003
              static member inline DstOverExt = unbox<VkBlendOp> 1000148004
              static member inline SrcInExt = unbox<VkBlendOp> 1000148005
              static member inline DstInExt = unbox<VkBlendOp> 1000148006
              static member inline SrcOutExt = unbox<VkBlendOp> 1000148007
              static member inline DstOutExt = unbox<VkBlendOp> 1000148008
              static member inline SrcAtopExt = unbox<VkBlendOp> 1000148009
              static member inline DstAtopExt = unbox<VkBlendOp> 1000148010
              static member inline XorExt = unbox<VkBlendOp> 1000148011
              static member inline MultiplyExt = unbox<VkBlendOp> 1000148012
              static member inline ScreenExt = unbox<VkBlendOp> 1000148013
              static member inline OverlayExt = unbox<VkBlendOp> 1000148014
              static member inline DarkenExt = unbox<VkBlendOp> 1000148015
              static member inline LightenExt = unbox<VkBlendOp> 1000148016
              static member inline ColordodgeExt = unbox<VkBlendOp> 1000148017
              static member inline ColorburnExt = unbox<VkBlendOp> 1000148018
              static member inline HardlightExt = unbox<VkBlendOp> 1000148019
              static member inline SoftlightExt = unbox<VkBlendOp> 1000148020
              static member inline DifferenceExt = unbox<VkBlendOp> 1000148021
              static member inline ExclusionExt = unbox<VkBlendOp> 1000148022
              static member inline InvertExt = unbox<VkBlendOp> 1000148023
              static member inline InvertRgbExt = unbox<VkBlendOp> 1000148024
              static member inline LineardodgeExt = unbox<VkBlendOp> 1000148025
              static member inline LinearburnExt = unbox<VkBlendOp> 1000148026
              static member inline VividlightExt = unbox<VkBlendOp> 1000148027
              static member inline LinearlightExt = unbox<VkBlendOp> 1000148028
              static member inline PinlightExt = unbox<VkBlendOp> 1000148029
              static member inline HardmixExt = unbox<VkBlendOp> 1000148030
              static member inline HslHueExt = unbox<VkBlendOp> 1000148031
              static member inline HslSaturationExt = unbox<VkBlendOp> 1000148032
              static member inline HslColorExt = unbox<VkBlendOp> 1000148033
              static member inline HslLuminosityExt = unbox<VkBlendOp> 1000148034
              static member inline PlusExt = unbox<VkBlendOp> 1000148035
              static member inline PlusClampedExt = unbox<VkBlendOp> 1000148036
              static member inline PlusClampedAlphaExt = unbox<VkBlendOp> 1000148037
              static member inline PlusDarkerExt = unbox<VkBlendOp> 1000148038
              static member inline MinusExt = unbox<VkBlendOp> 1000148039
              static member inline MinusClampedExt = unbox<VkBlendOp> 1000148040
              static member inline ContrastExt = unbox<VkBlendOp> 1000148041
              static member inline InvertOvgExt = unbox<VkBlendOp> 1000148042
              static member inline RedExt = unbox<VkBlendOp> 1000148043
              static member inline GreenExt = unbox<VkBlendOp> 1000148044
              static member inline BlueExt = unbox<VkBlendOp> 1000148045


module EXTCustomBorderColor =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_custom_border_color"
    let Number = 288


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceCustomBorderColorFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public customBorderColors : VkBool32
            val mutable public customBorderColorWithoutFormat : VkBool32

            new(pNext : nativeint, customBorderColors : VkBool32, customBorderColorWithoutFormat : VkBool32) =
                {
                    sType = 1000287002u
                    pNext = pNext
                    customBorderColors = customBorderColors
                    customBorderColorWithoutFormat = customBorderColorWithoutFormat
                }

            new(customBorderColors : VkBool32, customBorderColorWithoutFormat : VkBool32) =
                VkPhysicalDeviceCustomBorderColorFeaturesEXT(Unchecked.defaultof<nativeint>, customBorderColors, customBorderColorWithoutFormat)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.customBorderColors = Unchecked.defaultof<VkBool32> && x.customBorderColorWithoutFormat = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceCustomBorderColorFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "customBorderColors = %A" x.customBorderColors
                    sprintf "customBorderColorWithoutFormat = %A" x.customBorderColorWithoutFormat
                ] |> sprintf "VkPhysicalDeviceCustomBorderColorFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceCustomBorderColorPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxCustomBorderColorSamplers : uint32

            new(pNext : nativeint, maxCustomBorderColorSamplers : uint32) =
                {
                    sType = 1000287001u
                    pNext = pNext
                    maxCustomBorderColorSamplers = maxCustomBorderColorSamplers
                }

            new(maxCustomBorderColorSamplers : uint32) =
                VkPhysicalDeviceCustomBorderColorPropertiesEXT(Unchecked.defaultof<nativeint>, maxCustomBorderColorSamplers)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxCustomBorderColorSamplers = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceCustomBorderColorPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxCustomBorderColorSamplers = %A" x.maxCustomBorderColorSamplers
                ] |> sprintf "VkPhysicalDeviceCustomBorderColorPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSamplerCustomBorderColorCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public customBorderColor : VkClearColorValue
            val mutable public format : VkFormat

            new(pNext : nativeint, customBorderColor : VkClearColorValue, format : VkFormat) =
                {
                    sType = 1000287000u
                    pNext = pNext
                    customBorderColor = customBorderColor
                    format = format
                }

            new(customBorderColor : VkClearColorValue, format : VkFormat) =
                VkSamplerCustomBorderColorCreateInfoEXT(Unchecked.defaultof<nativeint>, customBorderColor, format)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.customBorderColor = Unchecked.defaultof<VkClearColorValue> && x.format = Unchecked.defaultof<VkFormat>

            static member Empty =
                VkSamplerCustomBorderColorCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkClearColorValue>, Unchecked.defaultof<VkFormat>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "customBorderColor = %A" x.customBorderColor
                    sprintf "format = %A" x.format
                ] |> sprintf "VkSamplerCustomBorderColorCreateInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkBorderColor with
              static member inline FloatCustomExt = unbox<VkBorderColor> 1000287003
              static member inline IntCustomExt = unbox<VkBorderColor> 1000287004


module EXTBorderColorSwizzle =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTCustomBorderColor
    let Name = "VK_EXT_border_color_swizzle"
    let Number = 412

    let Required = [ EXTCustomBorderColor.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceBorderColorSwizzleFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public borderColorSwizzle : VkBool32
            val mutable public borderColorSwizzleFromImage : VkBool32

            new(pNext : nativeint, borderColorSwizzle : VkBool32, borderColorSwizzleFromImage : VkBool32) =
                {
                    sType = 1000411000u
                    pNext = pNext
                    borderColorSwizzle = borderColorSwizzle
                    borderColorSwizzleFromImage = borderColorSwizzleFromImage
                }

            new(borderColorSwizzle : VkBool32, borderColorSwizzleFromImage : VkBool32) =
                VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(Unchecked.defaultof<nativeint>, borderColorSwizzle, borderColorSwizzleFromImage)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.borderColorSwizzle = Unchecked.defaultof<VkBool32> && x.borderColorSwizzleFromImage = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "borderColorSwizzle = %A" x.borderColorSwizzle
                    sprintf "borderColorSwizzleFromImage = %A" x.borderColorSwizzleFromImage
                ] |> sprintf "VkPhysicalDeviceBorderColorSwizzleFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSamplerBorderColorComponentMappingCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public components : VkComponentMapping
            val mutable public srgb : VkBool32

            new(pNext : nativeint, components : VkComponentMapping, srgb : VkBool32) =
                {
                    sType = 1000411001u
                    pNext = pNext
                    components = components
                    srgb = srgb
                }

            new(components : VkComponentMapping, srgb : VkBool32) =
                VkSamplerBorderColorComponentMappingCreateInfoEXT(Unchecked.defaultof<nativeint>, components, srgb)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.components = Unchecked.defaultof<VkComponentMapping> && x.srgb = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkSamplerBorderColorComponentMappingCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "components = %A" x.components
                    sprintf "srgb = %A" x.srgb
                ] |> sprintf "VkSamplerBorderColorComponentMappingCreateInfoEXT { %s }"
        end



module EXTBufferDeviceAddress =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_buffer_device_address"
    let Number = 245

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferDeviceAddressCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceAddress : VkDeviceAddress

            new(pNext : nativeint, deviceAddress : VkDeviceAddress) =
                {
                    sType = 1000244002u
                    pNext = pNext
                    deviceAddress = deviceAddress
                }

            new(deviceAddress : VkDeviceAddress) =
                VkBufferDeviceAddressCreateInfoEXT(Unchecked.defaultof<nativeint>, deviceAddress)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceAddress = Unchecked.defaultof<VkDeviceAddress>

            static member Empty =
                VkBufferDeviceAddressCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceAddress>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceAddress = %A" x.deviceAddress
                ] |> sprintf "VkBufferDeviceAddressCreateInfoEXT { %s }"
        end

    type VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceBufferDeviceAddressFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public bufferDeviceAddress : VkBool32
            val mutable public bufferDeviceAddressCaptureReplay : VkBool32
            val mutable public bufferDeviceAddressMultiDevice : VkBool32

            new(pNext : nativeint, bufferDeviceAddress : VkBool32, bufferDeviceAddressCaptureReplay : VkBool32, bufferDeviceAddressMultiDevice : VkBool32) =
                {
                    sType = 1000244000u
                    pNext = pNext
                    bufferDeviceAddress = bufferDeviceAddress
                    bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay
                    bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice
                }

            new(bufferDeviceAddress : VkBool32, bufferDeviceAddressCaptureReplay : VkBool32, bufferDeviceAddressMultiDevice : VkBool32) =
                VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(Unchecked.defaultof<nativeint>, bufferDeviceAddress, bufferDeviceAddressCaptureReplay, bufferDeviceAddressMultiDevice)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.bufferDeviceAddress = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddressCaptureReplay = Unchecked.defaultof<VkBool32> && x.bufferDeviceAddressMultiDevice = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "bufferDeviceAddress = %A" x.bufferDeviceAddress
                    sprintf "bufferDeviceAddressCaptureReplay = %A" x.bufferDeviceAddressCaptureReplay
                    sprintf "bufferDeviceAddressMultiDevice = %A" x.bufferDeviceAddressMultiDevice
                ] |> sprintf "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT { %s }"
        end

    type VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT


    [<AutoOpen>]
    module EnumExtensions =
         type VkBufferCreateFlags with
              static member inline DeviceAddressCaptureReplayBitExt = unbox<VkBufferCreateFlags> 0x00000010
         type VkBufferUsageFlags with
              static member inline ShaderDeviceAddressBitExt = unbox<VkBufferUsageFlags> 0x00020000
         type VkResult with
              static member inline ErrorInvalidDeviceAddressExt = unbox<VkResult> 1000257000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetBufferDeviceAddressEXTDel = delegate of VkDevice * nativeptr<VkBufferDeviceAddressInfo> -> VkDeviceAddress

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTBufferDeviceAddress")
            static let s_vkGetBufferDeviceAddressEXTDel = VkRaw.vkImportInstanceDelegate<VkGetBufferDeviceAddressEXTDel> "vkGetBufferDeviceAddressEXT"
            static do Report.End(3) |> ignore
            static member vkGetBufferDeviceAddressEXT = s_vkGetBufferDeviceAddressEXTDel
        let vkGetBufferDeviceAddressEXT(device : VkDevice, pInfo : nativeptr<VkBufferDeviceAddressInfo>) = Loader<unit>.vkGetBufferDeviceAddressEXT.Invoke(device, pInfo)

module EXTCalibratedTimestamps =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_calibrated_timestamps"
    let Number = 185

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkTimeDomainEXT =
        | Device = 0
        | ClockMonotonic = 1
        | ClockMonotonicRaw = 2
        | QueryPerformanceCounter = 3


    [<StructLayout(LayoutKind.Sequential)>]
    type VkCalibratedTimestampInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public timeDomain : VkTimeDomainEXT

            new(pNext : nativeint, timeDomain : VkTimeDomainEXT) =
                {
                    sType = 1000184000u
                    pNext = pNext
                    timeDomain = timeDomain
                }

            new(timeDomain : VkTimeDomainEXT) =
                VkCalibratedTimestampInfoEXT(Unchecked.defaultof<nativeint>, timeDomain)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.timeDomain = Unchecked.defaultof<VkTimeDomainEXT>

            static member Empty =
                VkCalibratedTimestampInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkTimeDomainEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "timeDomain = %A" x.timeDomain
                ] |> sprintf "VkCalibratedTimestampInfoEXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceCalibrateableTimeDomainsEXTDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkTimeDomainEXT> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetCalibratedTimestampsEXTDel = delegate of VkDevice * uint32 * nativeptr<VkCalibratedTimestampInfoEXT> * nativeptr<uint64> * nativeptr<uint64> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTCalibratedTimestamps")
            static let s_vkGetPhysicalDeviceCalibrateableTimeDomainsEXTDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceCalibrateableTimeDomainsEXTDel> "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"
            static let s_vkGetCalibratedTimestampsEXTDel = VkRaw.vkImportInstanceDelegate<VkGetCalibratedTimestampsEXTDel> "vkGetCalibratedTimestampsEXT"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = s_vkGetPhysicalDeviceCalibrateableTimeDomainsEXTDel
            static member vkGetCalibratedTimestampsEXT = s_vkGetCalibratedTimestampsEXTDel
        let vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice : VkPhysicalDevice, pTimeDomainCount : nativeptr<uint32>, pTimeDomains : nativeptr<VkTimeDomainEXT>) = Loader<unit>.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT.Invoke(physicalDevice, pTimeDomainCount, pTimeDomains)
        let vkGetCalibratedTimestampsEXT(device : VkDevice, timestampCount : uint32, pTimestampInfos : nativeptr<VkCalibratedTimestampInfoEXT>, pTimestamps : nativeptr<uint64>, pMaxDeviation : nativeptr<uint64>) = Loader<unit>.vkGetCalibratedTimestampsEXT.Invoke(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation)

module EXTColorWriteEnable =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_color_write_enable"
    let Number = 382

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceColorWriteEnableFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public colorWriteEnable : VkBool32

            new(pNext : nativeint, colorWriteEnable : VkBool32) =
                {
                    sType = 1000381000u
                    pNext = pNext
                    colorWriteEnable = colorWriteEnable
                }

            new(colorWriteEnable : VkBool32) =
                VkPhysicalDeviceColorWriteEnableFeaturesEXT(Unchecked.defaultof<nativeint>, colorWriteEnable)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.colorWriteEnable = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceColorWriteEnableFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "colorWriteEnable = %A" x.colorWriteEnable
                ] |> sprintf "VkPhysicalDeviceColorWriteEnableFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineColorWriteCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public attachmentCount : uint32
            val mutable public pColorWriteEnables : nativeptr<VkBool32>

            new(pNext : nativeint, attachmentCount : uint32, pColorWriteEnables : nativeptr<VkBool32>) =
                {
                    sType = 1000381001u
                    pNext = pNext
                    attachmentCount = attachmentCount
                    pColorWriteEnables = pColorWriteEnables
                }

            new(attachmentCount : uint32, pColorWriteEnables : nativeptr<VkBool32>) =
                VkPipelineColorWriteCreateInfoEXT(Unchecked.defaultof<nativeint>, attachmentCount, pColorWriteEnables)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.attachmentCount = Unchecked.defaultof<uint32> && x.pColorWriteEnables = Unchecked.defaultof<nativeptr<VkBool32>>

            static member Empty =
                VkPipelineColorWriteCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkBool32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "attachmentCount = %A" x.attachmentCount
                    sprintf "pColorWriteEnables = %A" x.pColorWriteEnables
                ] |> sprintf "VkPipelineColorWriteCreateInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkDynamicState with
              static member inline ColorWriteEnableExt = unbox<VkDynamicState> 1000381000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetColorWriteEnableEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkBool32> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTColorWriteEnable")
            static let s_vkCmdSetColorWriteEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetColorWriteEnableEXTDel> "vkCmdSetColorWriteEnableEXT"
            static do Report.End(3) |> ignore
            static member vkCmdSetColorWriteEnableEXT = s_vkCmdSetColorWriteEnableEXTDel
        let vkCmdSetColorWriteEnableEXT(commandBuffer : VkCommandBuffer, attachmentCount : uint32, pColorWriteEnables : nativeptr<VkBool32>) = Loader<unit>.vkCmdSetColorWriteEnableEXT.Invoke(commandBuffer, attachmentCount, pColorWriteEnables)

module EXTConditionalRendering =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_conditional_rendering"
    let Number = 82


    [<Flags>]
    type VkConditionalRenderingFlagsEXT =
        | All = 1
        | None = 0
        | InvertedBit = 0x00000001


    [<StructLayout(LayoutKind.Sequential)>]
    type VkCommandBufferInheritanceConditionalRenderingInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public conditionalRenderingEnable : VkBool32

            new(pNext : nativeint, conditionalRenderingEnable : VkBool32) =
                {
                    sType = 1000081000u
                    pNext = pNext
                    conditionalRenderingEnable = conditionalRenderingEnable
                }

            new(conditionalRenderingEnable : VkBool32) =
                VkCommandBufferInheritanceConditionalRenderingInfoEXT(Unchecked.defaultof<nativeint>, conditionalRenderingEnable)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.conditionalRenderingEnable = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkCommandBufferInheritanceConditionalRenderingInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "conditionalRenderingEnable = %A" x.conditionalRenderingEnable
                ] |> sprintf "VkCommandBufferInheritanceConditionalRenderingInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkConditionalRenderingBeginInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public buffer : VkBuffer
            val mutable public offset : VkDeviceSize
            val mutable public flags : VkConditionalRenderingFlagsEXT

            new(pNext : nativeint, buffer : VkBuffer, offset : VkDeviceSize, flags : VkConditionalRenderingFlagsEXT) =
                {
                    sType = 1000081002u
                    pNext = pNext
                    buffer = buffer
                    offset = offset
                    flags = flags
                }

            new(buffer : VkBuffer, offset : VkDeviceSize, flags : VkConditionalRenderingFlagsEXT) =
                VkConditionalRenderingBeginInfoEXT(Unchecked.defaultof<nativeint>, buffer, offset, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.flags = Unchecked.defaultof<VkConditionalRenderingFlagsEXT>

            static member Empty =
                VkConditionalRenderingBeginInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkConditionalRenderingFlagsEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "buffer = %A" x.buffer
                    sprintf "offset = %A" x.offset
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkConditionalRenderingBeginInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceConditionalRenderingFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public conditionalRendering : VkBool32
            val mutable public inheritedConditionalRendering : VkBool32

            new(pNext : nativeint, conditionalRendering : VkBool32, inheritedConditionalRendering : VkBool32) =
                {
                    sType = 1000081001u
                    pNext = pNext
                    conditionalRendering = conditionalRendering
                    inheritedConditionalRendering = inheritedConditionalRendering
                }

            new(conditionalRendering : VkBool32, inheritedConditionalRendering : VkBool32) =
                VkPhysicalDeviceConditionalRenderingFeaturesEXT(Unchecked.defaultof<nativeint>, conditionalRendering, inheritedConditionalRendering)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.conditionalRendering = Unchecked.defaultof<VkBool32> && x.inheritedConditionalRendering = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceConditionalRenderingFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "conditionalRendering = %A" x.conditionalRendering
                    sprintf "inheritedConditionalRendering = %A" x.inheritedConditionalRendering
                ] |> sprintf "VkPhysicalDeviceConditionalRenderingFeaturesEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags with
              /// read access flag for reading conditional rendering predicate
              static member inline ConditionalRenderingReadBitExt = unbox<VkAccessFlags> 0x00100000
         type VkBufferUsageFlags with
              /// Specifies the buffer can be used as predicate in conditional rendering
              static member inline ConditionalRenderingBitExt = unbox<VkBufferUsageFlags> 0x00000200
         type VkPipelineStageFlags with
              /// A pipeline stage for conditional rendering predicate fetch
              static member inline ConditionalRenderingBitExt = unbox<VkPipelineStageFlags> 0x00040000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBeginConditionalRenderingEXTDel = delegate of VkCommandBuffer * nativeptr<VkConditionalRenderingBeginInfoEXT> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdEndConditionalRenderingEXTDel = delegate of VkCommandBuffer -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTConditionalRendering")
            static let s_vkCmdBeginConditionalRenderingEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginConditionalRenderingEXTDel> "vkCmdBeginConditionalRenderingEXT"
            static let s_vkCmdEndConditionalRenderingEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdEndConditionalRenderingEXTDel> "vkCmdEndConditionalRenderingEXT"
            static do Report.End(3) |> ignore
            static member vkCmdBeginConditionalRenderingEXT = s_vkCmdBeginConditionalRenderingEXTDel
            static member vkCmdEndConditionalRenderingEXT = s_vkCmdEndConditionalRenderingEXTDel
        let vkCmdBeginConditionalRenderingEXT(commandBuffer : VkCommandBuffer, pConditionalRenderingBegin : nativeptr<VkConditionalRenderingBeginInfoEXT>) = Loader<unit>.vkCmdBeginConditionalRenderingEXT.Invoke(commandBuffer, pConditionalRenderingBegin)
        let vkCmdEndConditionalRenderingEXT(commandBuffer : VkCommandBuffer) = Loader<unit>.vkCmdEndConditionalRenderingEXT.Invoke(commandBuffer)

module EXTConservativeRasterization =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_conservative_rasterization"
    let Number = 102

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkConservativeRasterizationModeEXT =
        | Disabled = 0
        | Overestimate = 1
        | Underestimate = 2


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceConservativeRasterizationPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public primitiveOverestimationSize : float32
            val mutable public maxExtraPrimitiveOverestimationSize : float32
            val mutable public extraPrimitiveOverestimationSizeGranularity : float32
            val mutable public primitiveUnderestimation : VkBool32
            val mutable public conservativePointAndLineRasterization : VkBool32
            val mutable public degenerateTrianglesRasterized : VkBool32
            val mutable public degenerateLinesRasterized : VkBool32
            val mutable public fullyCoveredFragmentShaderInputVariable : VkBool32
            val mutable public conservativeRasterizationPostDepthCoverage : VkBool32

            new(pNext : nativeint, primitiveOverestimationSize : float32, maxExtraPrimitiveOverestimationSize : float32, extraPrimitiveOverestimationSizeGranularity : float32, primitiveUnderestimation : VkBool32, conservativePointAndLineRasterization : VkBool32, degenerateTrianglesRasterized : VkBool32, degenerateLinesRasterized : VkBool32, fullyCoveredFragmentShaderInputVariable : VkBool32, conservativeRasterizationPostDepthCoverage : VkBool32) =
                {
                    sType = 1000101000u
                    pNext = pNext
                    primitiveOverestimationSize = primitiveOverestimationSize
                    maxExtraPrimitiveOverestimationSize = maxExtraPrimitiveOverestimationSize
                    extraPrimitiveOverestimationSizeGranularity = extraPrimitiveOverestimationSizeGranularity
                    primitiveUnderestimation = primitiveUnderestimation
                    conservativePointAndLineRasterization = conservativePointAndLineRasterization
                    degenerateTrianglesRasterized = degenerateTrianglesRasterized
                    degenerateLinesRasterized = degenerateLinesRasterized
                    fullyCoveredFragmentShaderInputVariable = fullyCoveredFragmentShaderInputVariable
                    conservativeRasterizationPostDepthCoverage = conservativeRasterizationPostDepthCoverage
                }

            new(primitiveOverestimationSize : float32, maxExtraPrimitiveOverestimationSize : float32, extraPrimitiveOverestimationSizeGranularity : float32, primitiveUnderestimation : VkBool32, conservativePointAndLineRasterization : VkBool32, degenerateTrianglesRasterized : VkBool32, degenerateLinesRasterized : VkBool32, fullyCoveredFragmentShaderInputVariable : VkBool32, conservativeRasterizationPostDepthCoverage : VkBool32) =
                VkPhysicalDeviceConservativeRasterizationPropertiesEXT(Unchecked.defaultof<nativeint>, primitiveOverestimationSize, maxExtraPrimitiveOverestimationSize, extraPrimitiveOverestimationSizeGranularity, primitiveUnderestimation, conservativePointAndLineRasterization, degenerateTrianglesRasterized, degenerateLinesRasterized, fullyCoveredFragmentShaderInputVariable, conservativeRasterizationPostDepthCoverage)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.primitiveOverestimationSize = Unchecked.defaultof<float32> && x.maxExtraPrimitiveOverestimationSize = Unchecked.defaultof<float32> && x.extraPrimitiveOverestimationSizeGranularity = Unchecked.defaultof<float32> && x.primitiveUnderestimation = Unchecked.defaultof<VkBool32> && x.conservativePointAndLineRasterization = Unchecked.defaultof<VkBool32> && x.degenerateTrianglesRasterized = Unchecked.defaultof<VkBool32> && x.degenerateLinesRasterized = Unchecked.defaultof<VkBool32> && x.fullyCoveredFragmentShaderInputVariable = Unchecked.defaultof<VkBool32> && x.conservativeRasterizationPostDepthCoverage = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceConservativeRasterizationPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "primitiveOverestimationSize = %A" x.primitiveOverestimationSize
                    sprintf "maxExtraPrimitiveOverestimationSize = %A" x.maxExtraPrimitiveOverestimationSize
                    sprintf "extraPrimitiveOverestimationSizeGranularity = %A" x.extraPrimitiveOverestimationSizeGranularity
                    sprintf "primitiveUnderestimation = %A" x.primitiveUnderestimation
                    sprintf "conservativePointAndLineRasterization = %A" x.conservativePointAndLineRasterization
                    sprintf "degenerateTrianglesRasterized = %A" x.degenerateTrianglesRasterized
                    sprintf "degenerateLinesRasterized = %A" x.degenerateLinesRasterized
                    sprintf "fullyCoveredFragmentShaderInputVariable = %A" x.fullyCoveredFragmentShaderInputVariable
                    sprintf "conservativeRasterizationPostDepthCoverage = %A" x.conservativeRasterizationPostDepthCoverage
                ] |> sprintf "VkPhysicalDeviceConservativeRasterizationPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineRasterizationConservativeStateCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPipelineRasterizationConservativeStateCreateFlagsEXT
            val mutable public conservativeRasterizationMode : VkConservativeRasterizationModeEXT
            val mutable public extraPrimitiveOverestimationSize : float32

            new(pNext : nativeint, flags : VkPipelineRasterizationConservativeStateCreateFlagsEXT, conservativeRasterizationMode : VkConservativeRasterizationModeEXT, extraPrimitiveOverestimationSize : float32) =
                {
                    sType = 1000101001u
                    pNext = pNext
                    flags = flags
                    conservativeRasterizationMode = conservativeRasterizationMode
                    extraPrimitiveOverestimationSize = extraPrimitiveOverestimationSize
                }

            new(flags : VkPipelineRasterizationConservativeStateCreateFlagsEXT, conservativeRasterizationMode : VkConservativeRasterizationModeEXT, extraPrimitiveOverestimationSize : float32) =
                VkPipelineRasterizationConservativeStateCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, conservativeRasterizationMode, extraPrimitiveOverestimationSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineRasterizationConservativeStateCreateFlagsEXT> && x.conservativeRasterizationMode = Unchecked.defaultof<VkConservativeRasterizationModeEXT> && x.extraPrimitiveOverestimationSize = Unchecked.defaultof<float32>

            static member Empty =
                VkPipelineRasterizationConservativeStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineRasterizationConservativeStateCreateFlagsEXT>, Unchecked.defaultof<VkConservativeRasterizationModeEXT>, Unchecked.defaultof<float32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "conservativeRasterizationMode = %A" x.conservativeRasterizationMode
                    sprintf "extraPrimitiveOverestimationSize = %A" x.extraPrimitiveOverestimationSize
                ] |> sprintf "VkPipelineRasterizationConservativeStateCreateInfoEXT { %s }"
        end



module EXTDebugMarker =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    let Name = "VK_EXT_debug_marker"
    let Number = 23

    let Required = [ EXTDebugReport.Name ]


    type VkDebugReportObjectTypeEXT = EXTDebugReport.VkDebugReportObjectTypeEXT

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDebugMarkerMarkerInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pMarkerName : cstr
            val mutable public color : V4f

            new(pNext : nativeint, pMarkerName : cstr, color : V4f) =
                {
                    sType = 1000022002u
                    pNext = pNext
                    pMarkerName = pMarkerName
                    color = color
                }

            new(pMarkerName : cstr, color : V4f) =
                VkDebugMarkerMarkerInfoEXT(Unchecked.defaultof<nativeint>, pMarkerName, color)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pMarkerName = Unchecked.defaultof<cstr> && x.color = Unchecked.defaultof<V4f>

            static member Empty =
                VkDebugMarkerMarkerInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>, Unchecked.defaultof<V4f>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pMarkerName = %A" x.pMarkerName
                    sprintf "color = %A" x.color
                ] |> sprintf "VkDebugMarkerMarkerInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDebugMarkerObjectNameInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public objectType : VkDebugReportObjectTypeEXT
            val mutable public _object : uint64
            val mutable public pObjectName : cstr

            new(pNext : nativeint, objectType : VkDebugReportObjectTypeEXT, _object : uint64, pObjectName : cstr) =
                {
                    sType = 1000022000u
                    pNext = pNext
                    objectType = objectType
                    _object = _object
                    pObjectName = pObjectName
                }

            new(objectType : VkDebugReportObjectTypeEXT, _object : uint64, pObjectName : cstr) =
                VkDebugMarkerObjectNameInfoEXT(Unchecked.defaultof<nativeint>, objectType, _object, pObjectName)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.objectType = Unchecked.defaultof<VkDebugReportObjectTypeEXT> && x._object = Unchecked.defaultof<uint64> && x.pObjectName = Unchecked.defaultof<cstr>

            static member Empty =
                VkDebugMarkerObjectNameInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDebugReportObjectTypeEXT>, Unchecked.defaultof<uint64>, Unchecked.defaultof<cstr>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "objectType = %A" x.objectType
                    sprintf "_object = %A" x._object
                    sprintf "pObjectName = %A" x.pObjectName
                ] |> sprintf "VkDebugMarkerObjectNameInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDebugMarkerObjectTagInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public objectType : VkDebugReportObjectTypeEXT
            val mutable public _object : uint64
            val mutable public tagName : uint64
            val mutable public tagSize : uint64
            val mutable public pTag : nativeint

            new(pNext : nativeint, objectType : VkDebugReportObjectTypeEXT, _object : uint64, tagName : uint64, tagSize : uint64, pTag : nativeint) =
                {
                    sType = 1000022001u
                    pNext = pNext
                    objectType = objectType
                    _object = _object
                    tagName = tagName
                    tagSize = tagSize
                    pTag = pTag
                }

            new(objectType : VkDebugReportObjectTypeEXT, _object : uint64, tagName : uint64, tagSize : uint64, pTag : nativeint) =
                VkDebugMarkerObjectTagInfoEXT(Unchecked.defaultof<nativeint>, objectType, _object, tagName, tagSize, pTag)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.objectType = Unchecked.defaultof<VkDebugReportObjectTypeEXT> && x._object = Unchecked.defaultof<uint64> && x.tagName = Unchecked.defaultof<uint64> && x.tagSize = Unchecked.defaultof<uint64> && x.pTag = Unchecked.defaultof<nativeint>

            static member Empty =
                VkDebugMarkerObjectTagInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDebugReportObjectTypeEXT>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "objectType = %A" x.objectType
                    sprintf "_object = %A" x._object
                    sprintf "tagName = %A" x.tagName
                    sprintf "tagSize = %A" x.tagSize
                    sprintf "pTag = %A" x.pTag
                ] |> sprintf "VkDebugMarkerObjectTagInfoEXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkDebugMarkerSetObjectTagEXTDel = delegate of VkDevice * nativeptr<VkDebugMarkerObjectTagInfoEXT> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDebugMarkerSetObjectNameEXTDel = delegate of VkDevice * nativeptr<VkDebugMarkerObjectNameInfoEXT> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDebugMarkerBeginEXTDel = delegate of VkCommandBuffer * nativeptr<VkDebugMarkerMarkerInfoEXT> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDebugMarkerEndEXTDel = delegate of VkCommandBuffer -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDebugMarkerInsertEXTDel = delegate of VkCommandBuffer * nativeptr<VkDebugMarkerMarkerInfoEXT> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTDebugMarker")
            static let s_vkDebugMarkerSetObjectTagEXTDel = VkRaw.vkImportInstanceDelegate<VkDebugMarkerSetObjectTagEXTDel> "vkDebugMarkerSetObjectTagEXT"
            static let s_vkDebugMarkerSetObjectNameEXTDel = VkRaw.vkImportInstanceDelegate<VkDebugMarkerSetObjectNameEXTDel> "vkDebugMarkerSetObjectNameEXT"
            static let s_vkCmdDebugMarkerBeginEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDebugMarkerBeginEXTDel> "vkCmdDebugMarkerBeginEXT"
            static let s_vkCmdDebugMarkerEndEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDebugMarkerEndEXTDel> "vkCmdDebugMarkerEndEXT"
            static let s_vkCmdDebugMarkerInsertEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDebugMarkerInsertEXTDel> "vkCmdDebugMarkerInsertEXT"
            static do Report.End(3) |> ignore
            static member vkDebugMarkerSetObjectTagEXT = s_vkDebugMarkerSetObjectTagEXTDel
            static member vkDebugMarkerSetObjectNameEXT = s_vkDebugMarkerSetObjectNameEXTDel
            static member vkCmdDebugMarkerBeginEXT = s_vkCmdDebugMarkerBeginEXTDel
            static member vkCmdDebugMarkerEndEXT = s_vkCmdDebugMarkerEndEXTDel
            static member vkCmdDebugMarkerInsertEXT = s_vkCmdDebugMarkerInsertEXTDel
        let vkDebugMarkerSetObjectTagEXT(device : VkDevice, pTagInfo : nativeptr<VkDebugMarkerObjectTagInfoEXT>) = Loader<unit>.vkDebugMarkerSetObjectTagEXT.Invoke(device, pTagInfo)
        let vkDebugMarkerSetObjectNameEXT(device : VkDevice, pNameInfo : nativeptr<VkDebugMarkerObjectNameInfoEXT>) = Loader<unit>.vkDebugMarkerSetObjectNameEXT.Invoke(device, pNameInfo)
        let vkCmdDebugMarkerBeginEXT(commandBuffer : VkCommandBuffer, pMarkerInfo : nativeptr<VkDebugMarkerMarkerInfoEXT>) = Loader<unit>.vkCmdDebugMarkerBeginEXT.Invoke(commandBuffer, pMarkerInfo)
        let vkCmdDebugMarkerEndEXT(commandBuffer : VkCommandBuffer) = Loader<unit>.vkCmdDebugMarkerEndEXT.Invoke(commandBuffer)
        let vkCmdDebugMarkerInsertEXT(commandBuffer : VkCommandBuffer, pMarkerInfo : nativeptr<VkDebugMarkerMarkerInfoEXT>) = Loader<unit>.vkCmdDebugMarkerInsertEXT.Invoke(commandBuffer, pMarkerInfo)

module EXTDebugUtils =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_debug_utils"
    let Number = 129


    type PFN_vkDebugUtilsMessengerCallbackEXT = nativeint


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDebugUtilsMessengerEXT =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkDebugUtilsMessengerEXT(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<Flags>]
    type VkDebugUtilsMessageSeverityFlagsEXT =
        | All = 4369
        | None = 0
        | VerboseBit = 0x00000001
        | InfoBit = 0x00000010
        | WarningBit = 0x00000100
        | ErrorBit = 0x00001000

    [<Flags>]
    type VkDebugUtilsMessageTypeFlagsEXT =
        | All = 7
        | None = 0
        | GeneralBit = 0x00000001
        | ValidationBit = 0x00000002
        | PerformanceBit = 0x00000004


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDebugUtilsLabelEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pLabelName : cstr
            val mutable public color : V4f

            new(pNext : nativeint, pLabelName : cstr, color : V4f) =
                {
                    sType = 1000128002u
                    pNext = pNext
                    pLabelName = pLabelName
                    color = color
                }

            new(pLabelName : cstr, color : V4f) =
                VkDebugUtilsLabelEXT(Unchecked.defaultof<nativeint>, pLabelName, color)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pLabelName = Unchecked.defaultof<cstr> && x.color = Unchecked.defaultof<V4f>

            static member Empty =
                VkDebugUtilsLabelEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>, Unchecked.defaultof<V4f>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pLabelName = %A" x.pLabelName
                    sprintf "color = %A" x.color
                ] |> sprintf "VkDebugUtilsLabelEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDebugUtilsObjectNameInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public objectType : VkObjectType
            val mutable public objectHandle : uint64
            val mutable public pObjectName : cstr

            new(pNext : nativeint, objectType : VkObjectType, objectHandle : uint64, pObjectName : cstr) =
                {
                    sType = 1000128000u
                    pNext = pNext
                    objectType = objectType
                    objectHandle = objectHandle
                    pObjectName = pObjectName
                }

            new(objectType : VkObjectType, objectHandle : uint64, pObjectName : cstr) =
                VkDebugUtilsObjectNameInfoEXT(Unchecked.defaultof<nativeint>, objectType, objectHandle, pObjectName)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.objectType = Unchecked.defaultof<VkObjectType> && x.objectHandle = Unchecked.defaultof<uint64> && x.pObjectName = Unchecked.defaultof<cstr>

            static member Empty =
                VkDebugUtilsObjectNameInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkObjectType>, Unchecked.defaultof<uint64>, Unchecked.defaultof<cstr>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "objectType = %A" x.objectType
                    sprintf "objectHandle = %A" x.objectHandle
                    sprintf "pObjectName = %A" x.pObjectName
                ] |> sprintf "VkDebugUtilsObjectNameInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDebugUtilsMessengerCallbackDataEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDebugUtilsMessengerCallbackDataFlagsEXT
            val mutable public pMessageIdName : cstr
            val mutable public messageIdNumber : int
            val mutable public pMessage : cstr
            val mutable public queueLabelCount : uint32
            val mutable public pQueueLabels : nativeptr<VkDebugUtilsLabelEXT>
            val mutable public cmdBufLabelCount : uint32
            val mutable public pCmdBufLabels : nativeptr<VkDebugUtilsLabelEXT>
            val mutable public objectCount : uint32
            val mutable public pObjects : nativeptr<VkDebugUtilsObjectNameInfoEXT>

            new(pNext : nativeint, flags : VkDebugUtilsMessengerCallbackDataFlagsEXT, pMessageIdName : cstr, messageIdNumber : int, pMessage : cstr, queueLabelCount : uint32, pQueueLabels : nativeptr<VkDebugUtilsLabelEXT>, cmdBufLabelCount : uint32, pCmdBufLabels : nativeptr<VkDebugUtilsLabelEXT>, objectCount : uint32, pObjects : nativeptr<VkDebugUtilsObjectNameInfoEXT>) =
                {
                    sType = 1000128003u
                    pNext = pNext
                    flags = flags
                    pMessageIdName = pMessageIdName
                    messageIdNumber = messageIdNumber
                    pMessage = pMessage
                    queueLabelCount = queueLabelCount
                    pQueueLabels = pQueueLabels
                    cmdBufLabelCount = cmdBufLabelCount
                    pCmdBufLabels = pCmdBufLabels
                    objectCount = objectCount
                    pObjects = pObjects
                }

            new(flags : VkDebugUtilsMessengerCallbackDataFlagsEXT, pMessageIdName : cstr, messageIdNumber : int, pMessage : cstr, queueLabelCount : uint32, pQueueLabels : nativeptr<VkDebugUtilsLabelEXT>, cmdBufLabelCount : uint32, pCmdBufLabels : nativeptr<VkDebugUtilsLabelEXT>, objectCount : uint32, pObjects : nativeptr<VkDebugUtilsObjectNameInfoEXT>) =
                VkDebugUtilsMessengerCallbackDataEXT(Unchecked.defaultof<nativeint>, flags, pMessageIdName, messageIdNumber, pMessage, queueLabelCount, pQueueLabels, cmdBufLabelCount, pCmdBufLabels, objectCount, pObjects)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDebugUtilsMessengerCallbackDataFlagsEXT> && x.pMessageIdName = Unchecked.defaultof<cstr> && x.messageIdNumber = Unchecked.defaultof<int> && x.pMessage = Unchecked.defaultof<cstr> && x.queueLabelCount = Unchecked.defaultof<uint32> && x.pQueueLabels = Unchecked.defaultof<nativeptr<VkDebugUtilsLabelEXT>> && x.cmdBufLabelCount = Unchecked.defaultof<uint32> && x.pCmdBufLabels = Unchecked.defaultof<nativeptr<VkDebugUtilsLabelEXT>> && x.objectCount = Unchecked.defaultof<uint32> && x.pObjects = Unchecked.defaultof<nativeptr<VkDebugUtilsObjectNameInfoEXT>>

            static member Empty =
                VkDebugUtilsMessengerCallbackDataEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDebugUtilsMessengerCallbackDataFlagsEXT>, Unchecked.defaultof<cstr>, Unchecked.defaultof<int>, Unchecked.defaultof<cstr>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDebugUtilsLabelEXT>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDebugUtilsLabelEXT>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDebugUtilsObjectNameInfoEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "pMessageIdName = %A" x.pMessageIdName
                    sprintf "messageIdNumber = %A" x.messageIdNumber
                    sprintf "pMessage = %A" x.pMessage
                    sprintf "queueLabelCount = %A" x.queueLabelCount
                    sprintf "pQueueLabels = %A" x.pQueueLabels
                    sprintf "cmdBufLabelCount = %A" x.cmdBufLabelCount
                    sprintf "pCmdBufLabels = %A" x.pCmdBufLabels
                    sprintf "objectCount = %A" x.objectCount
                    sprintf "pObjects = %A" x.pObjects
                ] |> sprintf "VkDebugUtilsMessengerCallbackDataEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDebugUtilsMessengerCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDebugUtilsMessengerCreateFlagsEXT
            val mutable public messageSeverity : VkDebugUtilsMessageSeverityFlagsEXT
            val mutable public messageType : VkDebugUtilsMessageTypeFlagsEXT
            val mutable public pfnUserCallback : PFN_vkDebugUtilsMessengerCallbackEXT
            val mutable public pUserData : nativeint

            new(pNext : nativeint, flags : VkDebugUtilsMessengerCreateFlagsEXT, messageSeverity : VkDebugUtilsMessageSeverityFlagsEXT, messageType : VkDebugUtilsMessageTypeFlagsEXT, pfnUserCallback : PFN_vkDebugUtilsMessengerCallbackEXT, pUserData : nativeint) =
                {
                    sType = 1000128004u
                    pNext = pNext
                    flags = flags
                    messageSeverity = messageSeverity
                    messageType = messageType
                    pfnUserCallback = pfnUserCallback
                    pUserData = pUserData
                }

            new(flags : VkDebugUtilsMessengerCreateFlagsEXT, messageSeverity : VkDebugUtilsMessageSeverityFlagsEXT, messageType : VkDebugUtilsMessageTypeFlagsEXT, pfnUserCallback : PFN_vkDebugUtilsMessengerCallbackEXT, pUserData : nativeint) =
                VkDebugUtilsMessengerCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, messageSeverity, messageType, pfnUserCallback, pUserData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDebugUtilsMessengerCreateFlagsEXT> && x.messageSeverity = Unchecked.defaultof<VkDebugUtilsMessageSeverityFlagsEXT> && x.messageType = Unchecked.defaultof<VkDebugUtilsMessageTypeFlagsEXT> && x.pfnUserCallback = Unchecked.defaultof<PFN_vkDebugUtilsMessengerCallbackEXT> && x.pUserData = Unchecked.defaultof<nativeint>

            static member Empty =
                VkDebugUtilsMessengerCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDebugUtilsMessengerCreateFlagsEXT>, Unchecked.defaultof<VkDebugUtilsMessageSeverityFlagsEXT>, Unchecked.defaultof<VkDebugUtilsMessageTypeFlagsEXT>, Unchecked.defaultof<PFN_vkDebugUtilsMessengerCallbackEXT>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "messageSeverity = %A" x.messageSeverity
                    sprintf "messageType = %A" x.messageType
                    sprintf "pfnUserCallback = %A" x.pfnUserCallback
                    sprintf "pUserData = %A" x.pUserData
                ] |> sprintf "VkDebugUtilsMessengerCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDebugUtilsObjectTagInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public objectType : VkObjectType
            val mutable public objectHandle : uint64
            val mutable public tagName : uint64
            val mutable public tagSize : uint64
            val mutable public pTag : nativeint

            new(pNext : nativeint, objectType : VkObjectType, objectHandle : uint64, tagName : uint64, tagSize : uint64, pTag : nativeint) =
                {
                    sType = 1000128001u
                    pNext = pNext
                    objectType = objectType
                    objectHandle = objectHandle
                    tagName = tagName
                    tagSize = tagSize
                    pTag = pTag
                }

            new(objectType : VkObjectType, objectHandle : uint64, tagName : uint64, tagSize : uint64, pTag : nativeint) =
                VkDebugUtilsObjectTagInfoEXT(Unchecked.defaultof<nativeint>, objectType, objectHandle, tagName, tagSize, pTag)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.objectType = Unchecked.defaultof<VkObjectType> && x.objectHandle = Unchecked.defaultof<uint64> && x.tagName = Unchecked.defaultof<uint64> && x.tagSize = Unchecked.defaultof<uint64> && x.pTag = Unchecked.defaultof<nativeint>

            static member Empty =
                VkDebugUtilsObjectTagInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkObjectType>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "objectType = %A" x.objectType
                    sprintf "objectHandle = %A" x.objectHandle
                    sprintf "tagName = %A" x.tagName
                    sprintf "tagSize = %A" x.tagSize
                    sprintf "pTag = %A" x.pTag
                ] |> sprintf "VkDebugUtilsObjectTagInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkObjectType with
              static member inline DebugUtilsMessengerExt = unbox<VkObjectType> 1000128000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkSetDebugUtilsObjectNameEXTDel = delegate of VkDevice * nativeptr<VkDebugUtilsObjectNameInfoEXT> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkSetDebugUtilsObjectTagEXTDel = delegate of VkDevice * nativeptr<VkDebugUtilsObjectTagInfoEXT> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkQueueBeginDebugUtilsLabelEXTDel = delegate of VkQueue * nativeptr<VkDebugUtilsLabelEXT> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkQueueEndDebugUtilsLabelEXTDel = delegate of VkQueue -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkQueueInsertDebugUtilsLabelEXTDel = delegate of VkQueue * nativeptr<VkDebugUtilsLabelEXT> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBeginDebugUtilsLabelEXTDel = delegate of VkCommandBuffer * nativeptr<VkDebugUtilsLabelEXT> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdEndDebugUtilsLabelEXTDel = delegate of VkCommandBuffer -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdInsertDebugUtilsLabelEXTDel = delegate of VkCommandBuffer * nativeptr<VkDebugUtilsLabelEXT> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateDebugUtilsMessengerEXTDel = delegate of VkInstance * nativeptr<VkDebugUtilsMessengerCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkDebugUtilsMessengerEXT> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyDebugUtilsMessengerEXTDel = delegate of VkInstance * VkDebugUtilsMessengerEXT * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkSubmitDebugUtilsMessageEXTDel = delegate of VkInstance * VkDebugUtilsMessageSeverityFlagsEXT * VkDebugUtilsMessageTypeFlagsEXT * nativeptr<VkDebugUtilsMessengerCallbackDataEXT> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTDebugUtils")
            static let s_vkSetDebugUtilsObjectNameEXTDel = VkRaw.vkImportInstanceDelegate<VkSetDebugUtilsObjectNameEXTDel> "vkSetDebugUtilsObjectNameEXT"
            static let s_vkSetDebugUtilsObjectTagEXTDel = VkRaw.vkImportInstanceDelegate<VkSetDebugUtilsObjectTagEXTDel> "vkSetDebugUtilsObjectTagEXT"
            static let s_vkQueueBeginDebugUtilsLabelEXTDel = VkRaw.vkImportInstanceDelegate<VkQueueBeginDebugUtilsLabelEXTDel> "vkQueueBeginDebugUtilsLabelEXT"
            static let s_vkQueueEndDebugUtilsLabelEXTDel = VkRaw.vkImportInstanceDelegate<VkQueueEndDebugUtilsLabelEXTDel> "vkQueueEndDebugUtilsLabelEXT"
            static let s_vkQueueInsertDebugUtilsLabelEXTDel = VkRaw.vkImportInstanceDelegate<VkQueueInsertDebugUtilsLabelEXTDel> "vkQueueInsertDebugUtilsLabelEXT"
            static let s_vkCmdBeginDebugUtilsLabelEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginDebugUtilsLabelEXTDel> "vkCmdBeginDebugUtilsLabelEXT"
            static let s_vkCmdEndDebugUtilsLabelEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdEndDebugUtilsLabelEXTDel> "vkCmdEndDebugUtilsLabelEXT"
            static let s_vkCmdInsertDebugUtilsLabelEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdInsertDebugUtilsLabelEXTDel> "vkCmdInsertDebugUtilsLabelEXT"
            static let s_vkCreateDebugUtilsMessengerEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateDebugUtilsMessengerEXTDel> "vkCreateDebugUtilsMessengerEXT"
            static let s_vkDestroyDebugUtilsMessengerEXTDel = VkRaw.vkImportInstanceDelegate<VkDestroyDebugUtilsMessengerEXTDel> "vkDestroyDebugUtilsMessengerEXT"
            static let s_vkSubmitDebugUtilsMessageEXTDel = VkRaw.vkImportInstanceDelegate<VkSubmitDebugUtilsMessageEXTDel> "vkSubmitDebugUtilsMessageEXT"
            static do Report.End(3) |> ignore
            static member vkSetDebugUtilsObjectNameEXT = s_vkSetDebugUtilsObjectNameEXTDel
            static member vkSetDebugUtilsObjectTagEXT = s_vkSetDebugUtilsObjectTagEXTDel
            static member vkQueueBeginDebugUtilsLabelEXT = s_vkQueueBeginDebugUtilsLabelEXTDel
            static member vkQueueEndDebugUtilsLabelEXT = s_vkQueueEndDebugUtilsLabelEXTDel
            static member vkQueueInsertDebugUtilsLabelEXT = s_vkQueueInsertDebugUtilsLabelEXTDel
            static member vkCmdBeginDebugUtilsLabelEXT = s_vkCmdBeginDebugUtilsLabelEXTDel
            static member vkCmdEndDebugUtilsLabelEXT = s_vkCmdEndDebugUtilsLabelEXTDel
            static member vkCmdInsertDebugUtilsLabelEXT = s_vkCmdInsertDebugUtilsLabelEXTDel
            static member vkCreateDebugUtilsMessengerEXT = s_vkCreateDebugUtilsMessengerEXTDel
            static member vkDestroyDebugUtilsMessengerEXT = s_vkDestroyDebugUtilsMessengerEXTDel
            static member vkSubmitDebugUtilsMessageEXT = s_vkSubmitDebugUtilsMessageEXTDel
        let vkSetDebugUtilsObjectNameEXT(device : VkDevice, pNameInfo : nativeptr<VkDebugUtilsObjectNameInfoEXT>) = Loader<unit>.vkSetDebugUtilsObjectNameEXT.Invoke(device, pNameInfo)
        let vkSetDebugUtilsObjectTagEXT(device : VkDevice, pTagInfo : nativeptr<VkDebugUtilsObjectTagInfoEXT>) = Loader<unit>.vkSetDebugUtilsObjectTagEXT.Invoke(device, pTagInfo)
        let vkQueueBeginDebugUtilsLabelEXT(queue : VkQueue, pLabelInfo : nativeptr<VkDebugUtilsLabelEXT>) = Loader<unit>.vkQueueBeginDebugUtilsLabelEXT.Invoke(queue, pLabelInfo)
        let vkQueueEndDebugUtilsLabelEXT(queue : VkQueue) = Loader<unit>.vkQueueEndDebugUtilsLabelEXT.Invoke(queue)
        let vkQueueInsertDebugUtilsLabelEXT(queue : VkQueue, pLabelInfo : nativeptr<VkDebugUtilsLabelEXT>) = Loader<unit>.vkQueueInsertDebugUtilsLabelEXT.Invoke(queue, pLabelInfo)
        let vkCmdBeginDebugUtilsLabelEXT(commandBuffer : VkCommandBuffer, pLabelInfo : nativeptr<VkDebugUtilsLabelEXT>) = Loader<unit>.vkCmdBeginDebugUtilsLabelEXT.Invoke(commandBuffer, pLabelInfo)
        let vkCmdEndDebugUtilsLabelEXT(commandBuffer : VkCommandBuffer) = Loader<unit>.vkCmdEndDebugUtilsLabelEXT.Invoke(commandBuffer)
        let vkCmdInsertDebugUtilsLabelEXT(commandBuffer : VkCommandBuffer, pLabelInfo : nativeptr<VkDebugUtilsLabelEXT>) = Loader<unit>.vkCmdInsertDebugUtilsLabelEXT.Invoke(commandBuffer, pLabelInfo)
        let vkCreateDebugUtilsMessengerEXT(instance : VkInstance, pCreateInfo : nativeptr<VkDebugUtilsMessengerCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pMessenger : nativeptr<VkDebugUtilsMessengerEXT>) = Loader<unit>.vkCreateDebugUtilsMessengerEXT.Invoke(instance, pCreateInfo, pAllocator, pMessenger)
        let vkDestroyDebugUtilsMessengerEXT(instance : VkInstance, messenger : VkDebugUtilsMessengerEXT, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyDebugUtilsMessengerEXT.Invoke(instance, messenger, pAllocator)
        let vkSubmitDebugUtilsMessageEXT(instance : VkInstance, messageSeverity : VkDebugUtilsMessageSeverityFlagsEXT, messageTypes : VkDebugUtilsMessageTypeFlagsEXT, pCallbackData : nativeptr<VkDebugUtilsMessengerCallbackDataEXT>) = Loader<unit>.vkSubmitDebugUtilsMessageEXT.Invoke(instance, messageSeverity, messageTypes, pCallbackData)

module EXTDepthClipControl =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_depth_clip_control"
    let Number = 356

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDepthClipControlFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public depthClipControl : VkBool32

            new(pNext : nativeint, depthClipControl : VkBool32) =
                {
                    sType = 1000355000u
                    pNext = pNext
                    depthClipControl = depthClipControl
                }

            new(depthClipControl : VkBool32) =
                VkPhysicalDeviceDepthClipControlFeaturesEXT(Unchecked.defaultof<nativeint>, depthClipControl)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.depthClipControl = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDepthClipControlFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "depthClipControl = %A" x.depthClipControl
                ] |> sprintf "VkPhysicalDeviceDepthClipControlFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineViewportDepthClipControlCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public negativeOneToOne : VkBool32

            new(pNext : nativeint, negativeOneToOne : VkBool32) =
                {
                    sType = 1000355001u
                    pNext = pNext
                    negativeOneToOne = negativeOneToOne
                }

            new(negativeOneToOne : VkBool32) =
                VkPipelineViewportDepthClipControlCreateInfoEXT(Unchecked.defaultof<nativeint>, negativeOneToOne)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.negativeOneToOne = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPipelineViewportDepthClipControlCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "negativeOneToOne = %A" x.negativeOneToOne
                ] |> sprintf "VkPipelineViewportDepthClipControlCreateInfoEXT { %s }"
        end



module EXTDepthClipEnable =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_depth_clip_enable"
    let Number = 103


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDepthClipEnableFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public depthClipEnable : VkBool32

            new(pNext : nativeint, depthClipEnable : VkBool32) =
                {
                    sType = 1000102000u
                    pNext = pNext
                    depthClipEnable = depthClipEnable
                }

            new(depthClipEnable : VkBool32) =
                VkPhysicalDeviceDepthClipEnableFeaturesEXT(Unchecked.defaultof<nativeint>, depthClipEnable)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.depthClipEnable = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDepthClipEnableFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "depthClipEnable = %A" x.depthClipEnable
                ] |> sprintf "VkPhysicalDeviceDepthClipEnableFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineRasterizationDepthClipStateCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPipelineRasterizationDepthClipStateCreateFlagsEXT
            val mutable public depthClipEnable : VkBool32

            new(pNext : nativeint, flags : VkPipelineRasterizationDepthClipStateCreateFlagsEXT, depthClipEnable : VkBool32) =
                {
                    sType = 1000102001u
                    pNext = pNext
                    flags = flags
                    depthClipEnable = depthClipEnable
                }

            new(flags : VkPipelineRasterizationDepthClipStateCreateFlagsEXT, depthClipEnable : VkBool32) =
                VkPipelineRasterizationDepthClipStateCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, depthClipEnable)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineRasterizationDepthClipStateCreateFlagsEXT> && x.depthClipEnable = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPipelineRasterizationDepthClipStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineRasterizationDepthClipStateCreateFlagsEXT>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "depthClipEnable = %A" x.depthClipEnable
                ] |> sprintf "VkPipelineRasterizationDepthClipStateCreateInfoEXT { %s }"
        end



module EXTDepthRangeUnrestricted =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_depth_range_unrestricted"
    let Number = 14


module KHRMaintenance3 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_maintenance3"
    let Number = 169

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport

    type VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDescriptorSetLayoutSupportKHRDel = delegate of VkDevice * nativeptr<VkDescriptorSetLayoutCreateInfo> * nativeptr<VkDescriptorSetLayoutSupport> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRMaintenance3")
            static let s_vkGetDescriptorSetLayoutSupportKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDescriptorSetLayoutSupportKHRDel> "vkGetDescriptorSetLayoutSupportKHR"
            static do Report.End(3) |> ignore
            static member vkGetDescriptorSetLayoutSupportKHR = s_vkGetDescriptorSetLayoutSupportKHRDel
        let vkGetDescriptorSetLayoutSupportKHR(device : VkDevice, pCreateInfo : nativeptr<VkDescriptorSetLayoutCreateInfo>, pSupport : nativeptr<VkDescriptorSetLayoutSupport>) = Loader<unit>.vkGetDescriptorSetLayoutSupportKHR.Invoke(device, pCreateInfo, pSupport)

module EXTDescriptorIndexing =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance3
    let Name = "VK_EXT_descriptor_indexing"
    let Number = 162

    let Required = [ KHRGetPhysicalDeviceProperties2.Name; KHRMaintenance3.Name ]


    type VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags

    type VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = VkDescriptorSetLayoutBindingFlagsCreateInfo

    type VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = VkDescriptorSetVariableDescriptorCountAllocateInfo

    type VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = VkDescriptorSetVariableDescriptorCountLayoutSupport

    type VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures

    type VkPhysicalDeviceDescriptorIndexingPropertiesEXT = VkPhysicalDeviceDescriptorIndexingProperties


    [<AutoOpen>]
    module EnumExtensions =
         type VkDescriptorBindingFlags with
              static member inline UpdateAfterBindBitExt = unbox<VkDescriptorBindingFlags> 0x00000001
              static member inline UpdateUnusedWhilePendingBitExt = unbox<VkDescriptorBindingFlags> 0x00000002
              static member inline PartiallyBoundBitExt = unbox<VkDescriptorBindingFlags> 0x00000004
              static member inline VariableDescriptorCountBitExt = unbox<VkDescriptorBindingFlags> 0x00000008
         type VkDescriptorPoolCreateFlags with
              static member inline UpdateAfterBindBitExt = unbox<VkDescriptorPoolCreateFlags> 0x00000002
         type VkDescriptorSetLayoutCreateFlags with
              static member inline UpdateAfterBindPoolBitExt = unbox<VkDescriptorSetLayoutCreateFlags> 0x00000002
         type VkResult with
              static member inline ErrorFragmentationExt = unbox<VkResult> 1000161000


module EXTDeviceMemoryReport =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_device_memory_report"
    let Number = 285

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type PFN_vkDeviceMemoryReportCallbackEXT = nativeint

    type VkDeviceMemoryReportEventTypeEXT =
        | Allocate = 0
        | Free = 1
        | Import = 2
        | Unimport = 3
        | AllocationFailed = 4


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceDeviceMemoryReportCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDeviceMemoryReportFlagsEXT
            val mutable public pfnUserCallback : PFN_vkDeviceMemoryReportCallbackEXT
            val mutable public pUserData : nativeint

            new(pNext : nativeint, flags : VkDeviceMemoryReportFlagsEXT, pfnUserCallback : PFN_vkDeviceMemoryReportCallbackEXT, pUserData : nativeint) =
                {
                    sType = 1000284001u
                    pNext = pNext
                    flags = flags
                    pfnUserCallback = pfnUserCallback
                    pUserData = pUserData
                }

            new(flags : VkDeviceMemoryReportFlagsEXT, pfnUserCallback : PFN_vkDeviceMemoryReportCallbackEXT, pUserData : nativeint) =
                VkDeviceDeviceMemoryReportCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, pfnUserCallback, pUserData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceMemoryReportFlagsEXT> && x.pfnUserCallback = Unchecked.defaultof<PFN_vkDeviceMemoryReportCallbackEXT> && x.pUserData = Unchecked.defaultof<nativeint>

            static member Empty =
                VkDeviceDeviceMemoryReportCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemoryReportFlagsEXT>, Unchecked.defaultof<PFN_vkDeviceMemoryReportCallbackEXT>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "pfnUserCallback = %A" x.pfnUserCallback
                    sprintf "pUserData = %A" x.pUserData
                ] |> sprintf "VkDeviceDeviceMemoryReportCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceMemoryReportCallbackDataEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDeviceMemoryReportFlagsEXT
            val mutable public _type : VkDeviceMemoryReportEventTypeEXT
            val mutable public memoryObjectId : uint64
            val mutable public size : VkDeviceSize
            val mutable public objectType : VkObjectType
            val mutable public objectHandle : uint64
            val mutable public heapIndex : uint32

            new(pNext : nativeint, flags : VkDeviceMemoryReportFlagsEXT, _type : VkDeviceMemoryReportEventTypeEXT, memoryObjectId : uint64, size : VkDeviceSize, objectType : VkObjectType, objectHandle : uint64, heapIndex : uint32) =
                {
                    sType = 1000284002u
                    pNext = pNext
                    flags = flags
                    _type = _type
                    memoryObjectId = memoryObjectId
                    size = size
                    objectType = objectType
                    objectHandle = objectHandle
                    heapIndex = heapIndex
                }

            new(flags : VkDeviceMemoryReportFlagsEXT, _type : VkDeviceMemoryReportEventTypeEXT, memoryObjectId : uint64, size : VkDeviceSize, objectType : VkObjectType, objectHandle : uint64, heapIndex : uint32) =
                VkDeviceMemoryReportCallbackDataEXT(Unchecked.defaultof<nativeint>, flags, _type, memoryObjectId, size, objectType, objectHandle, heapIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceMemoryReportFlagsEXT> && x._type = Unchecked.defaultof<VkDeviceMemoryReportEventTypeEXT> && x.memoryObjectId = Unchecked.defaultof<uint64> && x.size = Unchecked.defaultof<VkDeviceSize> && x.objectType = Unchecked.defaultof<VkObjectType> && x.objectHandle = Unchecked.defaultof<uint64> && x.heapIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkDeviceMemoryReportCallbackDataEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemoryReportFlagsEXT>, Unchecked.defaultof<VkDeviceMemoryReportEventTypeEXT>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkObjectType>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "_type = %A" x._type
                    sprintf "memoryObjectId = %A" x.memoryObjectId
                    sprintf "size = %A" x.size
                    sprintf "objectType = %A" x.objectType
                    sprintf "objectHandle = %A" x.objectHandle
                    sprintf "heapIndex = %A" x.heapIndex
                ] |> sprintf "VkDeviceMemoryReportCallbackDataEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDeviceMemoryReportFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceMemoryReport : VkBool32

            new(pNext : nativeint, deviceMemoryReport : VkBool32) =
                {
                    sType = 1000284000u
                    pNext = pNext
                    deviceMemoryReport = deviceMemoryReport
                }

            new(deviceMemoryReport : VkBool32) =
                VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(Unchecked.defaultof<nativeint>, deviceMemoryReport)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceMemoryReport = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceMemoryReport = %A" x.deviceMemoryReport
                ] |> sprintf "VkPhysicalDeviceDeviceMemoryReportFeaturesEXT { %s }"
        end



module EXTDirectfbSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_EXT_directfb_surface"
    let Number = 347

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDirectFBSurfaceCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDirectFBSurfaceCreateFlagsEXT
            val mutable public dfb : nativeptr<nativeint>
            val mutable public surface : nativeptr<nativeint>

            new(pNext : nativeint, flags : VkDirectFBSurfaceCreateFlagsEXT, dfb : nativeptr<nativeint>, surface : nativeptr<nativeint>) =
                {
                    sType = 1000346000u
                    pNext = pNext
                    flags = flags
                    dfb = dfb
                    surface = surface
                }

            new(flags : VkDirectFBSurfaceCreateFlagsEXT, dfb : nativeptr<nativeint>, surface : nativeptr<nativeint>) =
                VkDirectFBSurfaceCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, dfb, surface)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDirectFBSurfaceCreateFlagsEXT> && x.dfb = Unchecked.defaultof<nativeptr<nativeint>> && x.surface = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkDirectFBSurfaceCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDirectFBSurfaceCreateFlagsEXT>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "dfb = %A" x.dfb
                    sprintf "surface = %A" x.surface
                ] |> sprintf "VkDirectFBSurfaceCreateInfoEXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateDirectFBSurfaceEXTDel = delegate of VkInstance * nativeptr<VkDirectFBSurfaceCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceDirectFBPresentationSupportEXTDel = delegate of VkPhysicalDevice * uint32 * nativeptr<nativeint> -> VkBool32

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTDirectfbSurface")
            static let s_vkCreateDirectFBSurfaceEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateDirectFBSurfaceEXTDel> "vkCreateDirectFBSurfaceEXT"
            static let s_vkGetPhysicalDeviceDirectFBPresentationSupportEXTDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceDirectFBPresentationSupportEXTDel> "vkGetPhysicalDeviceDirectFBPresentationSupportEXT"
            static do Report.End(3) |> ignore
            static member vkCreateDirectFBSurfaceEXT = s_vkCreateDirectFBSurfaceEXTDel
            static member vkGetPhysicalDeviceDirectFBPresentationSupportEXT = s_vkGetPhysicalDeviceDirectFBPresentationSupportEXTDel
        let vkCreateDirectFBSurfaceEXT(instance : VkInstance, pCreateInfo : nativeptr<VkDirectFBSurfaceCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateDirectFBSurfaceEXT.Invoke(instance, pCreateInfo, pAllocator, pSurface)
        let vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, dfb : nativeptr<nativeint>) = Loader<unit>.vkGetPhysicalDeviceDirectFBPresentationSupportEXT.Invoke(physicalDevice, queueFamilyIndex, dfb)

module EXTDiscardRectangles =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_discard_rectangles"
    let Number = 100

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkDiscardRectangleModeEXT =
        | Inclusive = 0
        | Exclusive = 1


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDiscardRectanglePropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxDiscardRectangles : uint32

            new(pNext : nativeint, maxDiscardRectangles : uint32) =
                {
                    sType = 1000099000u
                    pNext = pNext
                    maxDiscardRectangles = maxDiscardRectangles
                }

            new(maxDiscardRectangles : uint32) =
                VkPhysicalDeviceDiscardRectanglePropertiesEXT(Unchecked.defaultof<nativeint>, maxDiscardRectangles)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxDiscardRectangles = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceDiscardRectanglePropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxDiscardRectangles = %A" x.maxDiscardRectangles
                ] |> sprintf "VkPhysicalDeviceDiscardRectanglePropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineDiscardRectangleStateCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPipelineDiscardRectangleStateCreateFlagsEXT
            val mutable public discardRectangleMode : VkDiscardRectangleModeEXT
            val mutable public discardRectangleCount : uint32
            val mutable public pDiscardRectangles : nativeptr<VkRect2D>

            new(pNext : nativeint, flags : VkPipelineDiscardRectangleStateCreateFlagsEXT, discardRectangleMode : VkDiscardRectangleModeEXT, discardRectangleCount : uint32, pDiscardRectangles : nativeptr<VkRect2D>) =
                {
                    sType = 1000099001u
                    pNext = pNext
                    flags = flags
                    discardRectangleMode = discardRectangleMode
                    discardRectangleCount = discardRectangleCount
                    pDiscardRectangles = pDiscardRectangles
                }

            new(flags : VkPipelineDiscardRectangleStateCreateFlagsEXT, discardRectangleMode : VkDiscardRectangleModeEXT, discardRectangleCount : uint32, pDiscardRectangles : nativeptr<VkRect2D>) =
                VkPipelineDiscardRectangleStateCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, discardRectangleMode, discardRectangleCount, pDiscardRectangles)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineDiscardRectangleStateCreateFlagsEXT> && x.discardRectangleMode = Unchecked.defaultof<VkDiscardRectangleModeEXT> && x.discardRectangleCount = Unchecked.defaultof<uint32> && x.pDiscardRectangles = Unchecked.defaultof<nativeptr<VkRect2D>>

            static member Empty =
                VkPipelineDiscardRectangleStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineDiscardRectangleStateCreateFlagsEXT>, Unchecked.defaultof<VkDiscardRectangleModeEXT>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRect2D>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "discardRectangleMode = %A" x.discardRectangleMode
                    sprintf "discardRectangleCount = %A" x.discardRectangleCount
                    sprintf "pDiscardRectangles = %A" x.pDiscardRectangles
                ] |> sprintf "VkPipelineDiscardRectangleStateCreateInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkDynamicState with
              static member inline DiscardRectangleExt = unbox<VkDynamicState> 1000099000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetDiscardRectangleEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkRect2D> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTDiscardRectangles")
            static let s_vkCmdSetDiscardRectangleEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDiscardRectangleEXTDel> "vkCmdSetDiscardRectangleEXT"
            static do Report.End(3) |> ignore
            static member vkCmdSetDiscardRectangleEXT = s_vkCmdSetDiscardRectangleEXTDel
        let vkCmdSetDiscardRectangleEXT(commandBuffer : VkCommandBuffer, firstDiscardRectangle : uint32, discardRectangleCount : uint32, pDiscardRectangles : nativeptr<VkRect2D>) = Loader<unit>.vkCmdSetDiscardRectangleEXT.Invoke(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles)

module EXTDisplaySurfaceCounter =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRDisplay
    open KHRSurface
    let Name = "VK_EXT_display_surface_counter"
    let Number = 91

    let Required = [ KHRDisplay.Name ]


    [<Flags>]
    type VkSurfaceCounterFlagsEXT =
        | All = 1
        | None = 0
        | VblankBit = 0x00000001


    [<StructLayout(LayoutKind.Sequential)>]
    type VkSurfaceCapabilities2EXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public minImageCount : uint32
            val mutable public maxImageCount : uint32
            val mutable public currentExtent : VkExtent2D
            val mutable public minImageExtent : VkExtent2D
            val mutable public maxImageExtent : VkExtent2D
            val mutable public maxImageArrayLayers : uint32
            val mutable public supportedTransforms : VkSurfaceTransformFlagsKHR
            val mutable public currentTransform : VkSurfaceTransformFlagsKHR
            val mutable public supportedCompositeAlpha : VkCompositeAlphaFlagsKHR
            val mutable public supportedUsageFlags : VkImageUsageFlags
            val mutable public supportedSurfaceCounters : VkSurfaceCounterFlagsEXT

            new(pNext : nativeint, minImageCount : uint32, maxImageCount : uint32, currentExtent : VkExtent2D, minImageExtent : VkExtent2D, maxImageExtent : VkExtent2D, maxImageArrayLayers : uint32, supportedTransforms : VkSurfaceTransformFlagsKHR, currentTransform : VkSurfaceTransformFlagsKHR, supportedCompositeAlpha : VkCompositeAlphaFlagsKHR, supportedUsageFlags : VkImageUsageFlags, supportedSurfaceCounters : VkSurfaceCounterFlagsEXT) =
                {
                    sType = 1000090000u
                    pNext = pNext
                    minImageCount = minImageCount
                    maxImageCount = maxImageCount
                    currentExtent = currentExtent
                    minImageExtent = minImageExtent
                    maxImageExtent = maxImageExtent
                    maxImageArrayLayers = maxImageArrayLayers
                    supportedTransforms = supportedTransforms
                    currentTransform = currentTransform
                    supportedCompositeAlpha = supportedCompositeAlpha
                    supportedUsageFlags = supportedUsageFlags
                    supportedSurfaceCounters = supportedSurfaceCounters
                }

            new(minImageCount : uint32, maxImageCount : uint32, currentExtent : VkExtent2D, minImageExtent : VkExtent2D, maxImageExtent : VkExtent2D, maxImageArrayLayers : uint32, supportedTransforms : VkSurfaceTransformFlagsKHR, currentTransform : VkSurfaceTransformFlagsKHR, supportedCompositeAlpha : VkCompositeAlphaFlagsKHR, supportedUsageFlags : VkImageUsageFlags, supportedSurfaceCounters : VkSurfaceCounterFlagsEXT) =
                VkSurfaceCapabilities2EXT(Unchecked.defaultof<nativeint>, minImageCount, maxImageCount, currentExtent, minImageExtent, maxImageExtent, maxImageArrayLayers, supportedTransforms, currentTransform, supportedCompositeAlpha, supportedUsageFlags, supportedSurfaceCounters)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.minImageCount = Unchecked.defaultof<uint32> && x.maxImageCount = Unchecked.defaultof<uint32> && x.currentExtent = Unchecked.defaultof<VkExtent2D> && x.minImageExtent = Unchecked.defaultof<VkExtent2D> && x.maxImageExtent = Unchecked.defaultof<VkExtent2D> && x.maxImageArrayLayers = Unchecked.defaultof<uint32> && x.supportedTransforms = Unchecked.defaultof<VkSurfaceTransformFlagsKHR> && x.currentTransform = Unchecked.defaultof<VkSurfaceTransformFlagsKHR> && x.supportedCompositeAlpha = Unchecked.defaultof<VkCompositeAlphaFlagsKHR> && x.supportedUsageFlags = Unchecked.defaultof<VkImageUsageFlags> && x.supportedSurfaceCounters = Unchecked.defaultof<VkSurfaceCounterFlagsEXT>

            static member Empty =
                VkSurfaceCapabilities2EXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<VkCompositeAlphaFlagsKHR>, Unchecked.defaultof<VkImageUsageFlags>, Unchecked.defaultof<VkSurfaceCounterFlagsEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "minImageCount = %A" x.minImageCount
                    sprintf "maxImageCount = %A" x.maxImageCount
                    sprintf "currentExtent = %A" x.currentExtent
                    sprintf "minImageExtent = %A" x.minImageExtent
                    sprintf "maxImageExtent = %A" x.maxImageExtent
                    sprintf "maxImageArrayLayers = %A" x.maxImageArrayLayers
                    sprintf "supportedTransforms = %A" x.supportedTransforms
                    sprintf "currentTransform = %A" x.currentTransform
                    sprintf "supportedCompositeAlpha = %A" x.supportedCompositeAlpha
                    sprintf "supportedUsageFlags = %A" x.supportedUsageFlags
                    sprintf "supportedSurfaceCounters = %A" x.supportedSurfaceCounters
                ] |> sprintf "VkSurfaceCapabilities2EXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceSurfaceCapabilities2EXTDel = delegate of VkPhysicalDevice * VkSurfaceKHR * nativeptr<VkSurfaceCapabilities2EXT> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTDisplaySurfaceCounter")
            static let s_vkGetPhysicalDeviceSurfaceCapabilities2EXTDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfaceCapabilities2EXTDel> "vkGetPhysicalDeviceSurfaceCapabilities2EXT"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceSurfaceCapabilities2EXT = s_vkGetPhysicalDeviceSurfaceCapabilities2EXTDel
        let vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice : VkPhysicalDevice, surface : VkSurfaceKHR, pSurfaceCapabilities : nativeptr<VkSurfaceCapabilities2EXT>) = Loader<unit>.vkGetPhysicalDeviceSurfaceCapabilities2EXT.Invoke(physicalDevice, surface, pSurfaceCapabilities)

module EXTDisplayControl =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDisplaySurfaceCounter
    open KHRDisplay
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_EXT_display_control"
    let Number = 92

    let Required = [ EXTDisplaySurfaceCounter.Name; KHRSwapchain.Name ]


    type VkDisplayPowerStateEXT =
        | Off = 0
        | Suspend = 1
        | On = 2

    type VkDeviceEventTypeEXT =
        | DisplayHotplug = 0

    type VkDisplayEventTypeEXT =
        | FirstPixelOut = 0


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceEventInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceEvent : VkDeviceEventTypeEXT

            new(pNext : nativeint, deviceEvent : VkDeviceEventTypeEXT) =
                {
                    sType = 1000091001u
                    pNext = pNext
                    deviceEvent = deviceEvent
                }

            new(deviceEvent : VkDeviceEventTypeEXT) =
                VkDeviceEventInfoEXT(Unchecked.defaultof<nativeint>, deviceEvent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceEvent = Unchecked.defaultof<VkDeviceEventTypeEXT>

            static member Empty =
                VkDeviceEventInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceEventTypeEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceEvent = %A" x.deviceEvent
                ] |> sprintf "VkDeviceEventInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayEventInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public displayEvent : VkDisplayEventTypeEXT

            new(pNext : nativeint, displayEvent : VkDisplayEventTypeEXT) =
                {
                    sType = 1000091002u
                    pNext = pNext
                    displayEvent = displayEvent
                }

            new(displayEvent : VkDisplayEventTypeEXT) =
                VkDisplayEventInfoEXT(Unchecked.defaultof<nativeint>, displayEvent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.displayEvent = Unchecked.defaultof<VkDisplayEventTypeEXT>

            static member Empty =
                VkDisplayEventInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplayEventTypeEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "displayEvent = %A" x.displayEvent
                ] |> sprintf "VkDisplayEventInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayPowerInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public powerState : VkDisplayPowerStateEXT

            new(pNext : nativeint, powerState : VkDisplayPowerStateEXT) =
                {
                    sType = 1000091000u
                    pNext = pNext
                    powerState = powerState
                }

            new(powerState : VkDisplayPowerStateEXT) =
                VkDisplayPowerInfoEXT(Unchecked.defaultof<nativeint>, powerState)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.powerState = Unchecked.defaultof<VkDisplayPowerStateEXT>

            static member Empty =
                VkDisplayPowerInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplayPowerStateEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "powerState = %A" x.powerState
                ] |> sprintf "VkDisplayPowerInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSwapchainCounterCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public surfaceCounters : VkSurfaceCounterFlagsEXT

            new(pNext : nativeint, surfaceCounters : VkSurfaceCounterFlagsEXT) =
                {
                    sType = 1000091003u
                    pNext = pNext
                    surfaceCounters = surfaceCounters
                }

            new(surfaceCounters : VkSurfaceCounterFlagsEXT) =
                VkSwapchainCounterCreateInfoEXT(Unchecked.defaultof<nativeint>, surfaceCounters)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.surfaceCounters = Unchecked.defaultof<VkSurfaceCounterFlagsEXT>

            static member Empty =
                VkSwapchainCounterCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSurfaceCounterFlagsEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "surfaceCounters = %A" x.surfaceCounters
                ] |> sprintf "VkSwapchainCounterCreateInfoEXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkDisplayPowerControlEXTDel = delegate of VkDevice * VkDisplayKHR * nativeptr<VkDisplayPowerInfoEXT> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkRegisterDeviceEventEXTDel = delegate of VkDevice * nativeptr<VkDeviceEventInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkFence> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkRegisterDisplayEventEXTDel = delegate of VkDevice * VkDisplayKHR * nativeptr<VkDisplayEventInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkFence> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetSwapchainCounterEXTDel = delegate of VkDevice * VkSwapchainKHR * VkSurfaceCounterFlagsEXT * nativeptr<uint64> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTDisplayControl")
            static let s_vkDisplayPowerControlEXTDel = VkRaw.vkImportInstanceDelegate<VkDisplayPowerControlEXTDel> "vkDisplayPowerControlEXT"
            static let s_vkRegisterDeviceEventEXTDel = VkRaw.vkImportInstanceDelegate<VkRegisterDeviceEventEXTDel> "vkRegisterDeviceEventEXT"
            static let s_vkRegisterDisplayEventEXTDel = VkRaw.vkImportInstanceDelegate<VkRegisterDisplayEventEXTDel> "vkRegisterDisplayEventEXT"
            static let s_vkGetSwapchainCounterEXTDel = VkRaw.vkImportInstanceDelegate<VkGetSwapchainCounterEXTDel> "vkGetSwapchainCounterEXT"
            static do Report.End(3) |> ignore
            static member vkDisplayPowerControlEXT = s_vkDisplayPowerControlEXTDel
            static member vkRegisterDeviceEventEXT = s_vkRegisterDeviceEventEXTDel
            static member vkRegisterDisplayEventEXT = s_vkRegisterDisplayEventEXTDel
            static member vkGetSwapchainCounterEXT = s_vkGetSwapchainCounterEXTDel
        let vkDisplayPowerControlEXT(device : VkDevice, display : VkDisplayKHR, pDisplayPowerInfo : nativeptr<VkDisplayPowerInfoEXT>) = Loader<unit>.vkDisplayPowerControlEXT.Invoke(device, display, pDisplayPowerInfo)
        let vkRegisterDeviceEventEXT(device : VkDevice, pDeviceEventInfo : nativeptr<VkDeviceEventInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pFence : nativeptr<VkFence>) = Loader<unit>.vkRegisterDeviceEventEXT.Invoke(device, pDeviceEventInfo, pAllocator, pFence)
        let vkRegisterDisplayEventEXT(device : VkDevice, display : VkDisplayKHR, pDisplayEventInfo : nativeptr<VkDisplayEventInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pFence : nativeptr<VkFence>) = Loader<unit>.vkRegisterDisplayEventEXT.Invoke(device, display, pDisplayEventInfo, pAllocator, pFence)
        let vkGetSwapchainCounterEXT(device : VkDevice, swapchain : VkSwapchainKHR, counter : VkSurfaceCounterFlagsEXT, pCounterValue : nativeptr<uint64>) = Loader<unit>.vkGetSwapchainCounterEXT.Invoke(device, swapchain, counter, pCounterValue)

module EXTExtendedDynamicState =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_extended_dynamic_state"
    let Number = 268

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExtendedDynamicStateFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public extendedDynamicState : VkBool32

            new(pNext : nativeint, extendedDynamicState : VkBool32) =
                {
                    sType = 1000267000u
                    pNext = pNext
                    extendedDynamicState = extendedDynamicState
                }

            new(extendedDynamicState : VkBool32) =
                VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(Unchecked.defaultof<nativeint>, extendedDynamicState)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.extendedDynamicState = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "extendedDynamicState = %A" x.extendedDynamicState
                ] |> sprintf "VkPhysicalDeviceExtendedDynamicStateFeaturesEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkDynamicState with
              static member inline CullModeExt = unbox<VkDynamicState> 1000267000
              static member inline FrontFaceExt = unbox<VkDynamicState> 1000267001
              static member inline PrimitiveTopologyExt = unbox<VkDynamicState> 1000267002
              static member inline ViewportWithCountExt = unbox<VkDynamicState> 1000267003
              static member inline ScissorWithCountExt = unbox<VkDynamicState> 1000267004
              static member inline VertexInputBindingStrideExt = unbox<VkDynamicState> 1000267005
              static member inline DepthTestEnableExt = unbox<VkDynamicState> 1000267006
              static member inline DepthWriteEnableExt = unbox<VkDynamicState> 1000267007
              static member inline DepthCompareOpExt = unbox<VkDynamicState> 1000267008
              static member inline DepthBoundsTestEnableExt = unbox<VkDynamicState> 1000267009
              static member inline StencilTestEnableExt = unbox<VkDynamicState> 1000267010
              static member inline StencilOpExt = unbox<VkDynamicState> 1000267011

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetCullModeEXTDel = delegate of VkCommandBuffer * VkCullModeFlags -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetFrontFaceEXTDel = delegate of VkCommandBuffer * VkFrontFace -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetPrimitiveTopologyEXTDel = delegate of VkCommandBuffer * VkPrimitiveTopology -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetViewportWithCountEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkViewport> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetScissorWithCountEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkRect2D> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBindVertexBuffers2EXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkBuffer> * nativeptr<VkDeviceSize> * nativeptr<VkDeviceSize> * nativeptr<VkDeviceSize> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetDepthTestEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetDepthWriteEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetDepthCompareOpEXTDel = delegate of VkCommandBuffer * VkCompareOp -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetDepthBoundsTestEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetStencilTestEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetStencilOpEXTDel = delegate of VkCommandBuffer * VkStencilFaceFlags * VkStencilOp * VkStencilOp * VkStencilOp * VkCompareOp -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState")
            static let s_vkCmdSetCullModeEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetCullModeEXTDel> "vkCmdSetCullModeEXT"
            static let s_vkCmdSetFrontFaceEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetFrontFaceEXTDel> "vkCmdSetFrontFaceEXT"
            static let s_vkCmdSetPrimitiveTopologyEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPrimitiveTopologyEXTDel> "vkCmdSetPrimitiveTopologyEXT"
            static let s_vkCmdSetViewportWithCountEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetViewportWithCountEXTDel> "vkCmdSetViewportWithCountEXT"
            static let s_vkCmdSetScissorWithCountEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetScissorWithCountEXTDel> "vkCmdSetScissorWithCountEXT"
            static let s_vkCmdBindVertexBuffers2EXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBindVertexBuffers2EXTDel> "vkCmdBindVertexBuffers2EXT"
            static let s_vkCmdSetDepthTestEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthTestEnableEXTDel> "vkCmdSetDepthTestEnableEXT"
            static let s_vkCmdSetDepthWriteEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthWriteEnableEXTDel> "vkCmdSetDepthWriteEnableEXT"
            static let s_vkCmdSetDepthCompareOpEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthCompareOpEXTDel> "vkCmdSetDepthCompareOpEXT"
            static let s_vkCmdSetDepthBoundsTestEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthBoundsTestEnableEXTDel> "vkCmdSetDepthBoundsTestEnableEXT"
            static let s_vkCmdSetStencilTestEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetStencilTestEnableEXTDel> "vkCmdSetStencilTestEnableEXT"
            static let s_vkCmdSetStencilOpEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetStencilOpEXTDel> "vkCmdSetStencilOpEXT"
            static do Report.End(3) |> ignore
            static member vkCmdSetCullModeEXT = s_vkCmdSetCullModeEXTDel
            static member vkCmdSetFrontFaceEXT = s_vkCmdSetFrontFaceEXTDel
            static member vkCmdSetPrimitiveTopologyEXT = s_vkCmdSetPrimitiveTopologyEXTDel
            static member vkCmdSetViewportWithCountEXT = s_vkCmdSetViewportWithCountEXTDel
            static member vkCmdSetScissorWithCountEXT = s_vkCmdSetScissorWithCountEXTDel
            static member vkCmdBindVertexBuffers2EXT = s_vkCmdBindVertexBuffers2EXTDel
            static member vkCmdSetDepthTestEnableEXT = s_vkCmdSetDepthTestEnableEXTDel
            static member vkCmdSetDepthWriteEnableEXT = s_vkCmdSetDepthWriteEnableEXTDel
            static member vkCmdSetDepthCompareOpEXT = s_vkCmdSetDepthCompareOpEXTDel
            static member vkCmdSetDepthBoundsTestEnableEXT = s_vkCmdSetDepthBoundsTestEnableEXTDel
            static member vkCmdSetStencilTestEnableEXT = s_vkCmdSetStencilTestEnableEXTDel
            static member vkCmdSetStencilOpEXT = s_vkCmdSetStencilOpEXTDel
        let vkCmdSetCullModeEXT(commandBuffer : VkCommandBuffer, cullMode : VkCullModeFlags) = Loader<unit>.vkCmdSetCullModeEXT.Invoke(commandBuffer, cullMode)
        let vkCmdSetFrontFaceEXT(commandBuffer : VkCommandBuffer, frontFace : VkFrontFace) = Loader<unit>.vkCmdSetFrontFaceEXT.Invoke(commandBuffer, frontFace)
        let vkCmdSetPrimitiveTopologyEXT(commandBuffer : VkCommandBuffer, primitiveTopology : VkPrimitiveTopology) = Loader<unit>.vkCmdSetPrimitiveTopologyEXT.Invoke(commandBuffer, primitiveTopology)
        let vkCmdSetViewportWithCountEXT(commandBuffer : VkCommandBuffer, viewportCount : uint32, pViewports : nativeptr<VkViewport>) = Loader<unit>.vkCmdSetViewportWithCountEXT.Invoke(commandBuffer, viewportCount, pViewports)
        let vkCmdSetScissorWithCountEXT(commandBuffer : VkCommandBuffer, scissorCount : uint32, pScissors : nativeptr<VkRect2D>) = Loader<unit>.vkCmdSetScissorWithCountEXT.Invoke(commandBuffer, scissorCount, pScissors)
        let vkCmdBindVertexBuffers2EXT(commandBuffer : VkCommandBuffer, firstBinding : uint32, bindingCount : uint32, pBuffers : nativeptr<VkBuffer>, pOffsets : nativeptr<VkDeviceSize>, pSizes : nativeptr<VkDeviceSize>, pStrides : nativeptr<VkDeviceSize>) = Loader<unit>.vkCmdBindVertexBuffers2EXT.Invoke(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides)
        let vkCmdSetDepthTestEnableEXT(commandBuffer : VkCommandBuffer, depthTestEnable : VkBool32) = Loader<unit>.vkCmdSetDepthTestEnableEXT.Invoke(commandBuffer, depthTestEnable)
        let vkCmdSetDepthWriteEnableEXT(commandBuffer : VkCommandBuffer, depthWriteEnable : VkBool32) = Loader<unit>.vkCmdSetDepthWriteEnableEXT.Invoke(commandBuffer, depthWriteEnable)
        let vkCmdSetDepthCompareOpEXT(commandBuffer : VkCommandBuffer, depthCompareOp : VkCompareOp) = Loader<unit>.vkCmdSetDepthCompareOpEXT.Invoke(commandBuffer, depthCompareOp)
        let vkCmdSetDepthBoundsTestEnableEXT(commandBuffer : VkCommandBuffer, depthBoundsTestEnable : VkBool32) = Loader<unit>.vkCmdSetDepthBoundsTestEnableEXT.Invoke(commandBuffer, depthBoundsTestEnable)
        let vkCmdSetStencilTestEnableEXT(commandBuffer : VkCommandBuffer, stencilTestEnable : VkBool32) = Loader<unit>.vkCmdSetStencilTestEnableEXT.Invoke(commandBuffer, stencilTestEnable)
        let vkCmdSetStencilOpEXT(commandBuffer : VkCommandBuffer, faceMask : VkStencilFaceFlags, failOp : VkStencilOp, passOp : VkStencilOp, depthFailOp : VkStencilOp, compareOp : VkCompareOp) = Loader<unit>.vkCmdSetStencilOpEXT.Invoke(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp)

module EXTExtendedDynamicState2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_extended_dynamic_state2"
    let Number = 378

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExtendedDynamicState2FeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public extendedDynamicState2 : VkBool32
            val mutable public extendedDynamicState2LogicOp : VkBool32
            val mutable public extendedDynamicState2PatchControlPoints : VkBool32

            new(pNext : nativeint, extendedDynamicState2 : VkBool32, extendedDynamicState2LogicOp : VkBool32, extendedDynamicState2PatchControlPoints : VkBool32) =
                {
                    sType = 1000377000u
                    pNext = pNext
                    extendedDynamicState2 = extendedDynamicState2
                    extendedDynamicState2LogicOp = extendedDynamicState2LogicOp
                    extendedDynamicState2PatchControlPoints = extendedDynamicState2PatchControlPoints
                }

            new(extendedDynamicState2 : VkBool32, extendedDynamicState2LogicOp : VkBool32, extendedDynamicState2PatchControlPoints : VkBool32) =
                VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(Unchecked.defaultof<nativeint>, extendedDynamicState2, extendedDynamicState2LogicOp, extendedDynamicState2PatchControlPoints)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.extendedDynamicState2 = Unchecked.defaultof<VkBool32> && x.extendedDynamicState2LogicOp = Unchecked.defaultof<VkBool32> && x.extendedDynamicState2PatchControlPoints = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "extendedDynamicState2 = %A" x.extendedDynamicState2
                    sprintf "extendedDynamicState2LogicOp = %A" x.extendedDynamicState2LogicOp
                    sprintf "extendedDynamicState2PatchControlPoints = %A" x.extendedDynamicState2PatchControlPoints
                ] |> sprintf "VkPhysicalDeviceExtendedDynamicState2FeaturesEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkDynamicState with
              /// Not promoted to 1.3
              static member inline PatchControlPointsExt = unbox<VkDynamicState> 1000377000
              static member inline RasterizerDiscardEnableExt = unbox<VkDynamicState> 1000377001
              static member inline DepthBiasEnableExt = unbox<VkDynamicState> 1000377002
              /// Not promoted to 1.3
              static member inline LogicOpExt = unbox<VkDynamicState> 1000377003
              static member inline PrimitiveRestartEnableExt = unbox<VkDynamicState> 1000377004

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetPatchControlPointsEXTDel = delegate of VkCommandBuffer * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetRasterizerDiscardEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetDepthBiasEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetLogicOpEXTDel = delegate of VkCommandBuffer * VkLogicOp -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetPrimitiveRestartEnableEXTDel = delegate of VkCommandBuffer * VkBool32 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTExtendedDynamicState2")
            static let s_vkCmdSetPatchControlPointsEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPatchControlPointsEXTDel> "vkCmdSetPatchControlPointsEXT"
            static let s_vkCmdSetRasterizerDiscardEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetRasterizerDiscardEnableEXTDel> "vkCmdSetRasterizerDiscardEnableEXT"
            static let s_vkCmdSetDepthBiasEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDepthBiasEnableEXTDel> "vkCmdSetDepthBiasEnableEXT"
            static let s_vkCmdSetLogicOpEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetLogicOpEXTDel> "vkCmdSetLogicOpEXT"
            static let s_vkCmdSetPrimitiveRestartEnableEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPrimitiveRestartEnableEXTDel> "vkCmdSetPrimitiveRestartEnableEXT"
            static do Report.End(3) |> ignore
            static member vkCmdSetPatchControlPointsEXT = s_vkCmdSetPatchControlPointsEXTDel
            static member vkCmdSetRasterizerDiscardEnableEXT = s_vkCmdSetRasterizerDiscardEnableEXTDel
            static member vkCmdSetDepthBiasEnableEXT = s_vkCmdSetDepthBiasEnableEXTDel
            static member vkCmdSetLogicOpEXT = s_vkCmdSetLogicOpEXTDel
            static member vkCmdSetPrimitiveRestartEnableEXT = s_vkCmdSetPrimitiveRestartEnableEXTDel
        let vkCmdSetPatchControlPointsEXT(commandBuffer : VkCommandBuffer, patchControlPoints : uint32) = Loader<unit>.vkCmdSetPatchControlPointsEXT.Invoke(commandBuffer, patchControlPoints)
        let vkCmdSetRasterizerDiscardEnableEXT(commandBuffer : VkCommandBuffer, rasterizerDiscardEnable : VkBool32) = Loader<unit>.vkCmdSetRasterizerDiscardEnableEXT.Invoke(commandBuffer, rasterizerDiscardEnable)
        let vkCmdSetDepthBiasEnableEXT(commandBuffer : VkCommandBuffer, depthBiasEnable : VkBool32) = Loader<unit>.vkCmdSetDepthBiasEnableEXT.Invoke(commandBuffer, depthBiasEnable)
        let vkCmdSetLogicOpEXT(commandBuffer : VkCommandBuffer, logicOp : VkLogicOp) = Loader<unit>.vkCmdSetLogicOpEXT.Invoke(commandBuffer, logicOp)
        let vkCmdSetPrimitiveRestartEnableEXT(commandBuffer : VkCommandBuffer, primitiveRestartEnable : VkBool32) = Loader<unit>.vkCmdSetPrimitiveRestartEnableEXT.Invoke(commandBuffer, primitiveRestartEnable)

module KHRExternalMemoryFd =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalMemory
    open KHRExternalMemoryCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_external_memory_fd"
    let Number = 75

    let Required = [ KHRExternalMemory.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportMemoryFdInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleType : VkExternalMemoryHandleTypeFlags
            val mutable public fd : int

            new(pNext : nativeint, handleType : VkExternalMemoryHandleTypeFlags, fd : int) =
                {
                    sType = 1000074000u
                    pNext = pNext
                    handleType = handleType
                    fd = fd
                }

            new(handleType : VkExternalMemoryHandleTypeFlags, fd : int) =
                VkImportMemoryFdInfoKHR(Unchecked.defaultof<nativeint>, handleType, fd)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags> && x.fd = Unchecked.defaultof<int>

            static member Empty =
                VkImportMemoryFdInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>, Unchecked.defaultof<int>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleType = %A" x.handleType
                    sprintf "fd = %A" x.fd
                ] |> sprintf "VkImportMemoryFdInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryFdPropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryTypeBits : uint32

            new(pNext : nativeint, memoryTypeBits : uint32) =
                {
                    sType = 1000074001u
                    pNext = pNext
                    memoryTypeBits = memoryTypeBits
                }

            new(memoryTypeBits : uint32) =
                VkMemoryFdPropertiesKHR(Unchecked.defaultof<nativeint>, memoryTypeBits)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryTypeBits = Unchecked.defaultof<uint32>

            static member Empty =
                VkMemoryFdPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryTypeBits = %A" x.memoryTypeBits
                ] |> sprintf "VkMemoryFdPropertiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryGetFdInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memory : VkDeviceMemory
            val mutable public handleType : VkExternalMemoryHandleTypeFlags

            new(pNext : nativeint, memory : VkDeviceMemory, handleType : VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000074002u
                    pNext = pNext
                    memory = memory
                    handleType = handleType
                }

            new(memory : VkDeviceMemory, handleType : VkExternalMemoryHandleTypeFlags) =
                VkMemoryGetFdInfoKHR(Unchecked.defaultof<nativeint>, memory, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkMemoryGetFdInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memory = %A" x.memory
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkMemoryGetFdInfoKHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetMemoryFdKHRDel = delegate of VkDevice * nativeptr<VkMemoryGetFdInfoKHR> * nativeptr<int> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetMemoryFdPropertiesKHRDel = delegate of VkDevice * VkExternalMemoryHandleTypeFlags * int * nativeptr<VkMemoryFdPropertiesKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRExternalMemoryFd")
            static let s_vkGetMemoryFdKHRDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryFdKHRDel> "vkGetMemoryFdKHR"
            static let s_vkGetMemoryFdPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryFdPropertiesKHRDel> "vkGetMemoryFdPropertiesKHR"
            static do Report.End(3) |> ignore
            static member vkGetMemoryFdKHR = s_vkGetMemoryFdKHRDel
            static member vkGetMemoryFdPropertiesKHR = s_vkGetMemoryFdPropertiesKHRDel
        let vkGetMemoryFdKHR(device : VkDevice, pGetFdInfo : nativeptr<VkMemoryGetFdInfoKHR>, pFd : nativeptr<int>) = Loader<unit>.vkGetMemoryFdKHR.Invoke(device, pGetFdInfo, pFd)
        let vkGetMemoryFdPropertiesKHR(device : VkDevice, handleType : VkExternalMemoryHandleTypeFlags, fd : int, pMemoryFdProperties : nativeptr<VkMemoryFdPropertiesKHR>) = Loader<unit>.vkGetMemoryFdPropertiesKHR.Invoke(device, handleType, fd, pMemoryFdProperties)

module EXTExternalMemoryDmaBuf =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalMemory
    open KHRExternalMemoryCapabilities
    open KHRExternalMemoryFd
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_external_memory_dma_buf"
    let Number = 126

    let Required = [ KHRExternalMemoryFd.Name ]


    [<AutoOpen>]
    module EnumExtensions =
         type VkExternalMemoryHandleTypeFlags with
              static member inline DmaBufBitExt = unbox<VkExternalMemoryHandleTypeFlags> 0x00000200


module EXTExternalMemoryHost =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalMemory
    open KHRExternalMemoryCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_external_memory_host"
    let Number = 179

    let Required = [ KHRExternalMemory.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportMemoryHostPointerInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleType : VkExternalMemoryHandleTypeFlags
            val mutable public pHostPointer : nativeint

            new(pNext : nativeint, handleType : VkExternalMemoryHandleTypeFlags, pHostPointer : nativeint) =
                {
                    sType = 1000178000u
                    pNext = pNext
                    handleType = handleType
                    pHostPointer = pHostPointer
                }

            new(handleType : VkExternalMemoryHandleTypeFlags, pHostPointer : nativeint) =
                VkImportMemoryHostPointerInfoEXT(Unchecked.defaultof<nativeint>, handleType, pHostPointer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags> && x.pHostPointer = Unchecked.defaultof<nativeint>

            static member Empty =
                VkImportMemoryHostPointerInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleType = %A" x.handleType
                    sprintf "pHostPointer = %A" x.pHostPointer
                ] |> sprintf "VkImportMemoryHostPointerInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryHostPointerPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryTypeBits : uint32

            new(pNext : nativeint, memoryTypeBits : uint32) =
                {
                    sType = 1000178001u
                    pNext = pNext
                    memoryTypeBits = memoryTypeBits
                }

            new(memoryTypeBits : uint32) =
                VkMemoryHostPointerPropertiesEXT(Unchecked.defaultof<nativeint>, memoryTypeBits)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryTypeBits = Unchecked.defaultof<uint32>

            static member Empty =
                VkMemoryHostPointerPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryTypeBits = %A" x.memoryTypeBits
                ] |> sprintf "VkMemoryHostPointerPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExternalMemoryHostPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public minImportedHostPointerAlignment : VkDeviceSize

            new(pNext : nativeint, minImportedHostPointerAlignment : VkDeviceSize) =
                {
                    sType = 1000178002u
                    pNext = pNext
                    minImportedHostPointerAlignment = minImportedHostPointerAlignment
                }

            new(minImportedHostPointerAlignment : VkDeviceSize) =
                VkPhysicalDeviceExternalMemoryHostPropertiesEXT(Unchecked.defaultof<nativeint>, minImportedHostPointerAlignment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.minImportedHostPointerAlignment = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkPhysicalDeviceExternalMemoryHostPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "minImportedHostPointerAlignment = %A" x.minImportedHostPointerAlignment
                ] |> sprintf "VkPhysicalDeviceExternalMemoryHostPropertiesEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkExternalMemoryHandleTypeFlags with
              static member inline HostAllocationBitExt = unbox<VkExternalMemoryHandleTypeFlags> 0x00000080
              static member inline HostMappedForeignMemoryBitExt = unbox<VkExternalMemoryHandleTypeFlags> 0x00000100

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetMemoryHostPointerPropertiesEXTDel = delegate of VkDevice * VkExternalMemoryHandleTypeFlags * nativeint * nativeptr<VkMemoryHostPointerPropertiesEXT> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTExternalMemoryHost")
            static let s_vkGetMemoryHostPointerPropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryHostPointerPropertiesEXTDel> "vkGetMemoryHostPointerPropertiesEXT"
            static do Report.End(3) |> ignore
            static member vkGetMemoryHostPointerPropertiesEXT = s_vkGetMemoryHostPointerPropertiesEXTDel
        let vkGetMemoryHostPointerPropertiesEXT(device : VkDevice, handleType : VkExternalMemoryHandleTypeFlags, pHostPointer : nativeint, pMemoryHostPointerProperties : nativeptr<VkMemoryHostPointerPropertiesEXT>) = Loader<unit>.vkGetMemoryHostPointerPropertiesEXT.Invoke(device, handleType, pHostPointer, pMemoryHostPointerProperties)

module EXTFilterCubic =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_filter_cubic"
    let Number = 171


    [<StructLayout(LayoutKind.Sequential)>]
    type VkFilterCubicImageViewImageFormatPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public filterCubic : VkBool32
            val mutable public filterCubicMinmax : VkBool32

            new(pNext : nativeint, filterCubic : VkBool32, filterCubicMinmax : VkBool32) =
                {
                    sType = 1000170001u
                    pNext = pNext
                    filterCubic = filterCubic
                    filterCubicMinmax = filterCubicMinmax
                }

            new(filterCubic : VkBool32, filterCubicMinmax : VkBool32) =
                VkFilterCubicImageViewImageFormatPropertiesEXT(Unchecked.defaultof<nativeint>, filterCubic, filterCubicMinmax)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.filterCubic = Unchecked.defaultof<VkBool32> && x.filterCubicMinmax = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkFilterCubicImageViewImageFormatPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "filterCubic = %A" x.filterCubic
                    sprintf "filterCubicMinmax = %A" x.filterCubicMinmax
                ] |> sprintf "VkFilterCubicImageViewImageFormatPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceImageViewImageFormatInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageViewType : VkImageViewType

            new(pNext : nativeint, imageViewType : VkImageViewType) =
                {
                    sType = 1000170000u
                    pNext = pNext
                    imageViewType = imageViewType
                }

            new(imageViewType : VkImageViewType) =
                VkPhysicalDeviceImageViewImageFormatInfoEXT(Unchecked.defaultof<nativeint>, imageViewType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageViewType = Unchecked.defaultof<VkImageViewType>

            static member Empty =
                VkPhysicalDeviceImageViewImageFormatInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageViewType>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageViewType = %A" x.imageViewType
                ] |> sprintf "VkPhysicalDeviceImageViewImageFormatInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkFilter with
              static member inline CubicExt = unbox<VkFilter> 1000015000
         type VkFormatFeatureFlags with
              static member inline SampledImageFilterCubicBitExt = unbox<VkFormatFeatureFlags> 0x00002000


module EXTFragmentDensityMap =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_fragment_density_map"
    let Number = 219

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentDensityMapFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fragmentDensityMap : VkBool32
            val mutable public fragmentDensityMapDynamic : VkBool32
            val mutable public fragmentDensityMapNonSubsampledImages : VkBool32

            new(pNext : nativeint, fragmentDensityMap : VkBool32, fragmentDensityMapDynamic : VkBool32, fragmentDensityMapNonSubsampledImages : VkBool32) =
                {
                    sType = 1000218000u
                    pNext = pNext
                    fragmentDensityMap = fragmentDensityMap
                    fragmentDensityMapDynamic = fragmentDensityMapDynamic
                    fragmentDensityMapNonSubsampledImages = fragmentDensityMapNonSubsampledImages
                }

            new(fragmentDensityMap : VkBool32, fragmentDensityMapDynamic : VkBool32, fragmentDensityMapNonSubsampledImages : VkBool32) =
                VkPhysicalDeviceFragmentDensityMapFeaturesEXT(Unchecked.defaultof<nativeint>, fragmentDensityMap, fragmentDensityMapDynamic, fragmentDensityMapNonSubsampledImages)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fragmentDensityMap = Unchecked.defaultof<VkBool32> && x.fragmentDensityMapDynamic = Unchecked.defaultof<VkBool32> && x.fragmentDensityMapNonSubsampledImages = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceFragmentDensityMapFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fragmentDensityMap = %A" x.fragmentDensityMap
                    sprintf "fragmentDensityMapDynamic = %A" x.fragmentDensityMapDynamic
                    sprintf "fragmentDensityMapNonSubsampledImages = %A" x.fragmentDensityMapNonSubsampledImages
                ] |> sprintf "VkPhysicalDeviceFragmentDensityMapFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentDensityMapPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public minFragmentDensityTexelSize : VkExtent2D
            val mutable public maxFragmentDensityTexelSize : VkExtent2D
            val mutable public fragmentDensityInvocations : VkBool32

            new(pNext : nativeint, minFragmentDensityTexelSize : VkExtent2D, maxFragmentDensityTexelSize : VkExtent2D, fragmentDensityInvocations : VkBool32) =
                {
                    sType = 1000218001u
                    pNext = pNext
                    minFragmentDensityTexelSize = minFragmentDensityTexelSize
                    maxFragmentDensityTexelSize = maxFragmentDensityTexelSize
                    fragmentDensityInvocations = fragmentDensityInvocations
                }

            new(minFragmentDensityTexelSize : VkExtent2D, maxFragmentDensityTexelSize : VkExtent2D, fragmentDensityInvocations : VkBool32) =
                VkPhysicalDeviceFragmentDensityMapPropertiesEXT(Unchecked.defaultof<nativeint>, minFragmentDensityTexelSize, maxFragmentDensityTexelSize, fragmentDensityInvocations)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.minFragmentDensityTexelSize = Unchecked.defaultof<VkExtent2D> && x.maxFragmentDensityTexelSize = Unchecked.defaultof<VkExtent2D> && x.fragmentDensityInvocations = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceFragmentDensityMapPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "minFragmentDensityTexelSize = %A" x.minFragmentDensityTexelSize
                    sprintf "maxFragmentDensityTexelSize = %A" x.maxFragmentDensityTexelSize
                    sprintf "fragmentDensityInvocations = %A" x.fragmentDensityInvocations
                ] |> sprintf "VkPhysicalDeviceFragmentDensityMapPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassFragmentDensityMapCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fragmentDensityMapAttachment : VkAttachmentReference

            new(pNext : nativeint, fragmentDensityMapAttachment : VkAttachmentReference) =
                {
                    sType = 1000218002u
                    pNext = pNext
                    fragmentDensityMapAttachment = fragmentDensityMapAttachment
                }

            new(fragmentDensityMapAttachment : VkAttachmentReference) =
                VkRenderPassFragmentDensityMapCreateInfoEXT(Unchecked.defaultof<nativeint>, fragmentDensityMapAttachment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fragmentDensityMapAttachment = Unchecked.defaultof<VkAttachmentReference>

            static member Empty =
                VkRenderPassFragmentDensityMapCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAttachmentReference>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fragmentDensityMapAttachment = %A" x.fragmentDensityMapAttachment
                ] |> sprintf "VkRenderPassFragmentDensityMapCreateInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags with
              static member inline FragmentDensityMapReadBitExt = unbox<VkAccessFlags> 0x01000000
         type VkFormatFeatureFlags with
              static member inline FragmentDensityMapBitExt = unbox<VkFormatFeatureFlags> 0x01000000
         type VkImageCreateFlags with
              static member inline SubsampledBitExt = unbox<VkImageCreateFlags> 0x00004000
         type VkImageLayout with
              static member inline FragmentDensityMapOptimalExt = unbox<VkImageLayout> 1000218000
         type VkImageUsageFlags with
              static member inline FragmentDensityMapBitExt = unbox<VkImageUsageFlags> 0x00000200
         type VkImageViewCreateFlags with
              static member inline FragmentDensityMapDynamicBitExt = unbox<VkImageViewCreateFlags> 0x00000001
         type VkPipelineStageFlags with
              static member inline FragmentDensityProcessBitExt = unbox<VkPipelineStageFlags> 0x00800000
         type VkSamplerCreateFlags with
              static member inline SubsampledBitExt = unbox<VkSamplerCreateFlags> 0x00000001
              static member inline SubsampledCoarseReconstructionBitExt = unbox<VkSamplerCreateFlags> 0x00000002


    module KHRFormatFeatureFlags2 =
        [<AutoOpen>]
        module EnumExtensions =
             type VkFormatFeatureFlags2 with
                  static member inline FormatFeature2FragmentDensityMapBitExt = unbox<VkFormatFeatureFlags2> 0x01000000


module EXTFragmentDensityMap2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTFragmentDensityMap
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_fragment_density_map2"
    let Number = 333

    let Required = [ EXTFragmentDensityMap.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentDensityMap2FeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fragmentDensityMapDeferred : VkBool32

            new(pNext : nativeint, fragmentDensityMapDeferred : VkBool32) =
                {
                    sType = 1000332000u
                    pNext = pNext
                    fragmentDensityMapDeferred = fragmentDensityMapDeferred
                }

            new(fragmentDensityMapDeferred : VkBool32) =
                VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(Unchecked.defaultof<nativeint>, fragmentDensityMapDeferred)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fragmentDensityMapDeferred = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fragmentDensityMapDeferred = %A" x.fragmentDensityMapDeferred
                ] |> sprintf "VkPhysicalDeviceFragmentDensityMap2FeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentDensityMap2PropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public subsampledLoads : VkBool32
            val mutable public subsampledCoarseReconstructionEarlyAccess : VkBool32
            val mutable public maxSubsampledArrayLayers : uint32
            val mutable public maxDescriptorSetSubsampledSamplers : uint32

            new(pNext : nativeint, subsampledLoads : VkBool32, subsampledCoarseReconstructionEarlyAccess : VkBool32, maxSubsampledArrayLayers : uint32, maxDescriptorSetSubsampledSamplers : uint32) =
                {
                    sType = 1000332001u
                    pNext = pNext
                    subsampledLoads = subsampledLoads
                    subsampledCoarseReconstructionEarlyAccess = subsampledCoarseReconstructionEarlyAccess
                    maxSubsampledArrayLayers = maxSubsampledArrayLayers
                    maxDescriptorSetSubsampledSamplers = maxDescriptorSetSubsampledSamplers
                }

            new(subsampledLoads : VkBool32, subsampledCoarseReconstructionEarlyAccess : VkBool32, maxSubsampledArrayLayers : uint32, maxDescriptorSetSubsampledSamplers : uint32) =
                VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(Unchecked.defaultof<nativeint>, subsampledLoads, subsampledCoarseReconstructionEarlyAccess, maxSubsampledArrayLayers, maxDescriptorSetSubsampledSamplers)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.subsampledLoads = Unchecked.defaultof<VkBool32> && x.subsampledCoarseReconstructionEarlyAccess = Unchecked.defaultof<VkBool32> && x.maxSubsampledArrayLayers = Unchecked.defaultof<uint32> && x.maxDescriptorSetSubsampledSamplers = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "subsampledLoads = %A" x.subsampledLoads
                    sprintf "subsampledCoarseReconstructionEarlyAccess = %A" x.subsampledCoarseReconstructionEarlyAccess
                    sprintf "maxSubsampledArrayLayers = %A" x.maxSubsampledArrayLayers
                    sprintf "maxDescriptorSetSubsampledSamplers = %A" x.maxDescriptorSetSubsampledSamplers
                ] |> sprintf "VkPhysicalDeviceFragmentDensityMap2PropertiesEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkImageViewCreateFlags with
              static member inline FragmentDensityMapDeferredBitExt = unbox<VkImageViewCreateFlags> 0x00000002


module EXTFragmentShaderInterlock =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_fragment_shader_interlock"
    let Number = 252

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fragmentShaderSampleInterlock : VkBool32
            val mutable public fragmentShaderPixelInterlock : VkBool32
            val mutable public fragmentShaderShadingRateInterlock : VkBool32

            new(pNext : nativeint, fragmentShaderSampleInterlock : VkBool32, fragmentShaderPixelInterlock : VkBool32, fragmentShaderShadingRateInterlock : VkBool32) =
                {
                    sType = 1000251000u
                    pNext = pNext
                    fragmentShaderSampleInterlock = fragmentShaderSampleInterlock
                    fragmentShaderPixelInterlock = fragmentShaderPixelInterlock
                    fragmentShaderShadingRateInterlock = fragmentShaderShadingRateInterlock
                }

            new(fragmentShaderSampleInterlock : VkBool32, fragmentShaderPixelInterlock : VkBool32, fragmentShaderShadingRateInterlock : VkBool32) =
                VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(Unchecked.defaultof<nativeint>, fragmentShaderSampleInterlock, fragmentShaderPixelInterlock, fragmentShaderShadingRateInterlock)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fragmentShaderSampleInterlock = Unchecked.defaultof<VkBool32> && x.fragmentShaderPixelInterlock = Unchecked.defaultof<VkBool32> && x.fragmentShaderShadingRateInterlock = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fragmentShaderSampleInterlock = %A" x.fragmentShaderSampleInterlock
                    sprintf "fragmentShaderPixelInterlock = %A" x.fragmentShaderPixelInterlock
                    sprintf "fragmentShaderShadingRateInterlock = %A" x.fragmentShaderShadingRateInterlock
                ] |> sprintf "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT { %s }"
        end



module KHRWin32Surface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_KHR_win32_surface"
    let Number = 10

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkWin32SurfaceCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkWin32SurfaceCreateFlagsKHR
            val mutable public hinstance : nativeint
            val mutable public hwnd : nativeint

            new(pNext : nativeint, flags : VkWin32SurfaceCreateFlagsKHR, hinstance : nativeint, hwnd : nativeint) =
                {
                    sType = 1000009000u
                    pNext = pNext
                    flags = flags
                    hinstance = hinstance
                    hwnd = hwnd
                }

            new(flags : VkWin32SurfaceCreateFlagsKHR, hinstance : nativeint, hwnd : nativeint) =
                VkWin32SurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, hinstance, hwnd)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkWin32SurfaceCreateFlagsKHR> && x.hinstance = Unchecked.defaultof<nativeint> && x.hwnd = Unchecked.defaultof<nativeint>

            static member Empty =
                VkWin32SurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkWin32SurfaceCreateFlagsKHR>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "hinstance = %A" x.hinstance
                    sprintf "hwnd = %A" x.hwnd
                ] |> sprintf "VkWin32SurfaceCreateInfoKHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateWin32SurfaceKHRDel = delegate of VkInstance * nativeptr<VkWin32SurfaceCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceWin32PresentationSupportKHRDel = delegate of VkPhysicalDevice * uint32 -> VkBool32

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRWin32Surface")
            static let s_vkCreateWin32SurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateWin32SurfaceKHRDel> "vkCreateWin32SurfaceKHR"
            static let s_vkGetPhysicalDeviceWin32PresentationSupportKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceWin32PresentationSupportKHRDel> "vkGetPhysicalDeviceWin32PresentationSupportKHR"
            static do Report.End(3) |> ignore
            static member vkCreateWin32SurfaceKHR = s_vkCreateWin32SurfaceKHRDel
            static member vkGetPhysicalDeviceWin32PresentationSupportKHR = s_vkGetPhysicalDeviceWin32PresentationSupportKHRDel
        let vkCreateWin32SurfaceKHR(instance : VkInstance, pCreateInfo : nativeptr<VkWin32SurfaceCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateWin32SurfaceKHR.Invoke(instance, pCreateInfo, pAllocator, pSurface)
        let vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32) = Loader<unit>.vkGetPhysicalDeviceWin32PresentationSupportKHR.Invoke(physicalDevice, queueFamilyIndex)

module KHRDeviceGroupCreation =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_device_group_creation"
    let Number = 71


    type VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo

    type VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties


    [<AutoOpen>]
    module EnumExtensions =
         type VkMemoryHeapFlags with
              static member inline MultiInstanceBitKhr = unbox<VkMemoryHeapFlags> 0x00000002

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkEnumeratePhysicalDeviceGroupsKHRDel = delegate of VkInstance * nativeptr<uint32> * nativeptr<VkPhysicalDeviceGroupProperties> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRDeviceGroupCreation")
            static let s_vkEnumeratePhysicalDeviceGroupsKHRDel = VkRaw.vkImportInstanceDelegate<VkEnumeratePhysicalDeviceGroupsKHRDel> "vkEnumeratePhysicalDeviceGroupsKHR"
            static do Report.End(3) |> ignore
            static member vkEnumeratePhysicalDeviceGroupsKHR = s_vkEnumeratePhysicalDeviceGroupsKHRDel
        let vkEnumeratePhysicalDeviceGroupsKHR(instance : VkInstance, pPhysicalDeviceGroupCount : nativeptr<uint32>, pPhysicalDeviceGroupProperties : nativeptr<VkPhysicalDeviceGroupProperties>) = Loader<unit>.vkEnumeratePhysicalDeviceGroupsKHR.Invoke(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties)

module KHRDeviceGroup =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRDeviceGroupCreation
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_KHR_device_group"
    let Number = 61

    let Required = [ KHRDeviceGroupCreation.Name ]


    type VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags
    type VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags

    type VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo

    type VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo

    type VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo

    type VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo

    type VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkDependencyFlags with
              static member inline DeviceGroupBitKhr = unbox<VkDependencyFlags> 0x00000004
         type VkMemoryAllocateFlags with
              static member inline DeviceMaskBitKhr = unbox<VkMemoryAllocateFlags> 0x00000001
         type VkPeerMemoryFeatureFlags with
              static member inline CopySrcBitKhr = unbox<VkPeerMemoryFeatureFlags> 0x00000001
              static member inline CopyDstBitKhr = unbox<VkPeerMemoryFeatureFlags> 0x00000002
              static member inline GenericSrcBitKhr = unbox<VkPeerMemoryFeatureFlags> 0x00000004
              static member inline GenericDstBitKhr = unbox<VkPeerMemoryFeatureFlags> 0x00000008
         type VkPipelineCreateFlags with
              static member inline ViewIndexFromDeviceIndexBitKhr = unbox<VkPipelineCreateFlags> 0x00000008
              static member inline DispatchBaseKhr = unbox<VkPipelineCreateFlags> 0x00000010

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDeviceGroupPeerMemoryFeaturesKHRDel = delegate of VkDevice * uint32 * uint32 * uint32 * nativeptr<VkPeerMemoryFeatureFlags> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetDeviceMaskKHRDel = delegate of VkCommandBuffer * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDispatchBaseKHRDel = delegate of VkCommandBuffer * uint32 * uint32 * uint32 * uint32 * uint32 * uint32 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRDeviceGroup")
            static let s_vkGetDeviceGroupPeerMemoryFeaturesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceGroupPeerMemoryFeaturesKHRDel> "vkGetDeviceGroupPeerMemoryFeaturesKHR"
            static let s_vkCmdSetDeviceMaskKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdSetDeviceMaskKHRDel> "vkCmdSetDeviceMaskKHR"
            static let s_vkCmdDispatchBaseKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdDispatchBaseKHRDel> "vkCmdDispatchBaseKHR"
            static do Report.End(3) |> ignore
            static member vkGetDeviceGroupPeerMemoryFeaturesKHR = s_vkGetDeviceGroupPeerMemoryFeaturesKHRDel
            static member vkCmdSetDeviceMaskKHR = s_vkCmdSetDeviceMaskKHRDel
            static member vkCmdDispatchBaseKHR = s_vkCmdDispatchBaseKHRDel
        let vkGetDeviceGroupPeerMemoryFeaturesKHR(device : VkDevice, heapIndex : uint32, localDeviceIndex : uint32, remoteDeviceIndex : uint32, pPeerMemoryFeatures : nativeptr<VkPeerMemoryFeatureFlags>) = Loader<unit>.vkGetDeviceGroupPeerMemoryFeaturesKHR.Invoke(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures)
        let vkCmdSetDeviceMaskKHR(commandBuffer : VkCommandBuffer, deviceMask : uint32) = Loader<unit>.vkCmdSetDeviceMaskKHR.Invoke(commandBuffer, deviceMask)
        let vkCmdDispatchBaseKHR(commandBuffer : VkCommandBuffer, baseGroupX : uint32, baseGroupY : uint32, baseGroupZ : uint32, groupCountX : uint32, groupCountY : uint32, groupCountZ : uint32) = Loader<unit>.vkCmdDispatchBaseKHR.Invoke(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)

    module KHRBindMemory2 =
        type VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo

        type VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo


        [<AutoOpen>]
        module EnumExtensions =
             type VkImageCreateFlags with
                  static member inline SplitInstanceBindRegionsBitKhr = unbox<VkImageCreateFlags> 0x00000040


    module KHRSurface =
        type VkDeviceGroupPresentModeFlagsKHR = KHRSwapchain.Vulkan11.VkDeviceGroupPresentModeFlagsKHR

        type VkDeviceGroupPresentCapabilitiesKHR = KHRSwapchain.Vulkan11.VkDeviceGroupPresentCapabilitiesKHR


        module VkRaw =
            let vkGetDeviceGroupPresentCapabilitiesKHR = KHRSwapchain.Vulkan11.VkRaw.vkGetDeviceGroupPresentCapabilitiesKHR
            let vkGetDeviceGroupSurfacePresentModesKHR = KHRSwapchain.Vulkan11.VkRaw.vkGetDeviceGroupSurfacePresentModesKHR
            let vkGetPhysicalDevicePresentRectanglesKHR = KHRSwapchain.Vulkan11.VkRaw.vkGetPhysicalDevicePresentRectanglesKHR

    module KHRSwapchain =
        type VkAcquireNextImageInfoKHR = KHRSwapchain.Vulkan11.VkAcquireNextImageInfoKHR

        type VkBindImageMemorySwapchainInfoKHR = KHRSwapchain.Vulkan11.VkBindImageMemorySwapchainInfoKHR

        type VkDeviceGroupPresentInfoKHR = KHRSwapchain.Vulkan11.VkDeviceGroupPresentInfoKHR

        type VkDeviceGroupSwapchainCreateInfoKHR = KHRSwapchain.Vulkan11.VkDeviceGroupSwapchainCreateInfoKHR

        type VkImageSwapchainCreateInfoKHR = KHRSwapchain.Vulkan11.VkImageSwapchainCreateInfoKHR


        [<AutoOpen>]
        module EnumExtensions =
             type VkSwapchainCreateFlagsKHR with
                  /// Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
                  static member inline SplitInstanceBindRegionsBit = unbox<VkSwapchainCreateFlagsKHR> 0x00000001

        module VkRaw =
            let vkAcquireNextImage2KHR = KHRSwapchain.Vulkan11.VkRaw.vkAcquireNextImage2KHR

module EXTFullScreenExclusive =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRGetSurfaceCapabilities2
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_EXT_full_screen_exclusive"
    let Number = 256

    let Required = [ KHRGetPhysicalDeviceProperties2.Name; KHRGetSurfaceCapabilities2.Name; KHRSurface.Name; KHRSwapchain.Name ]


    type VkFullScreenExclusiveEXT =
        | Default = 0
        | Allowed = 1
        | Disallowed = 2
        | ApplicationControlled = 3


    [<StructLayout(LayoutKind.Sequential)>]
    type VkSurfaceCapabilitiesFullScreenExclusiveEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fullScreenExclusiveSupported : VkBool32

            new(pNext : nativeint, fullScreenExclusiveSupported : VkBool32) =
                {
                    sType = 1000255002u
                    pNext = pNext
                    fullScreenExclusiveSupported = fullScreenExclusiveSupported
                }

            new(fullScreenExclusiveSupported : VkBool32) =
                VkSurfaceCapabilitiesFullScreenExclusiveEXT(Unchecked.defaultof<nativeint>, fullScreenExclusiveSupported)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fullScreenExclusiveSupported = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkSurfaceCapabilitiesFullScreenExclusiveEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fullScreenExclusiveSupported = %A" x.fullScreenExclusiveSupported
                ] |> sprintf "VkSurfaceCapabilitiesFullScreenExclusiveEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSurfaceFullScreenExclusiveInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fullScreenExclusive : VkFullScreenExclusiveEXT

            new(pNext : nativeint, fullScreenExclusive : VkFullScreenExclusiveEXT) =
                {
                    sType = 1000255000u
                    pNext = pNext
                    fullScreenExclusive = fullScreenExclusive
                }

            new(fullScreenExclusive : VkFullScreenExclusiveEXT) =
                VkSurfaceFullScreenExclusiveInfoEXT(Unchecked.defaultof<nativeint>, fullScreenExclusive)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fullScreenExclusive = Unchecked.defaultof<VkFullScreenExclusiveEXT>

            static member Empty =
                VkSurfaceFullScreenExclusiveInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFullScreenExclusiveEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fullScreenExclusive = %A" x.fullScreenExclusive
                ] |> sprintf "VkSurfaceFullScreenExclusiveInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkResult with
              static member inline ErrorFullScreenExclusiveModeLostExt = unbox<VkResult> -1000255000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceSurfacePresentModes2EXTDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceSurfaceInfo2KHR> * nativeptr<uint32> * nativeptr<VkPresentModeKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkAcquireFullScreenExclusiveModeEXTDel = delegate of VkDevice * VkSwapchainKHR -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkReleaseFullScreenExclusiveModeEXTDel = delegate of VkDevice * VkSwapchainKHR -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTFullScreenExclusive")
            static let s_vkGetPhysicalDeviceSurfacePresentModes2EXTDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSurfacePresentModes2EXTDel> "vkGetPhysicalDeviceSurfacePresentModes2EXT"
            static let s_vkAcquireFullScreenExclusiveModeEXTDel = VkRaw.vkImportInstanceDelegate<VkAcquireFullScreenExclusiveModeEXTDel> "vkAcquireFullScreenExclusiveModeEXT"
            static let s_vkReleaseFullScreenExclusiveModeEXTDel = VkRaw.vkImportInstanceDelegate<VkReleaseFullScreenExclusiveModeEXTDel> "vkReleaseFullScreenExclusiveModeEXT"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceSurfacePresentModes2EXT = s_vkGetPhysicalDeviceSurfacePresentModes2EXTDel
            static member vkAcquireFullScreenExclusiveModeEXT = s_vkAcquireFullScreenExclusiveModeEXTDel
            static member vkReleaseFullScreenExclusiveModeEXT = s_vkReleaseFullScreenExclusiveModeEXTDel
        let vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice : VkPhysicalDevice, pSurfaceInfo : nativeptr<VkPhysicalDeviceSurfaceInfo2KHR>, pPresentModeCount : nativeptr<uint32>, pPresentModes : nativeptr<VkPresentModeKHR>) = Loader<unit>.vkGetPhysicalDeviceSurfacePresentModes2EXT.Invoke(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes)
        let vkAcquireFullScreenExclusiveModeEXT(device : VkDevice, swapchain : VkSwapchainKHR) = Loader<unit>.vkAcquireFullScreenExclusiveModeEXT.Invoke(device, swapchain)
        let vkReleaseFullScreenExclusiveModeEXT(device : VkDevice, swapchain : VkSwapchainKHR) = Loader<unit>.vkReleaseFullScreenExclusiveModeEXT.Invoke(device, swapchain)

    module KHRWin32Surface =
        [<StructLayout(LayoutKind.Sequential)>]
        type VkSurfaceFullScreenExclusiveWin32InfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public hmonitor : nativeint

                new(pNext : nativeint, hmonitor : nativeint) =
                    {
                        sType = 1000255001u
                        pNext = pNext
                        hmonitor = hmonitor
                    }

                new(hmonitor : nativeint) =
                    VkSurfaceFullScreenExclusiveWin32InfoEXT(Unchecked.defaultof<nativeint>, hmonitor)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.hmonitor = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkSurfaceFullScreenExclusiveWin32InfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "hmonitor = %A" x.hmonitor
                    ] |> sprintf "VkSurfaceFullScreenExclusiveWin32InfoEXT { %s }"
            end



    module KHRDeviceGroup =
        type VkDeviceGroupPresentModeFlagsKHR = KHRSwapchain.Vulkan11.VkDeviceGroupPresentModeFlagsKHR

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetDeviceGroupSurfacePresentModes2EXTDel = delegate of VkDevice * nativeptr<VkPhysicalDeviceSurfaceInfo2KHR> * nativeptr<VkDeviceGroupPresentModeFlagsKHR> -> VkResult

            [<AbstractClass; Sealed>]
            type private Loader<'d> private() =
                static do Report.Begin(3, "[Vulkan] loading EXTFullScreenExclusive -> KHRDeviceGroup")
                static let s_vkGetDeviceGroupSurfacePresentModes2EXTDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceGroupSurfacePresentModes2EXTDel> "vkGetDeviceGroupSurfacePresentModes2EXT"
                static do Report.End(3) |> ignore
                static member vkGetDeviceGroupSurfacePresentModes2EXT = s_vkGetDeviceGroupSurfacePresentModes2EXTDel
            let vkGetDeviceGroupSurfacePresentModes2EXT(device : VkDevice, pSurfaceInfo : nativeptr<VkPhysicalDeviceSurfaceInfo2KHR>, pModes : nativeptr<VkDeviceGroupPresentModeFlagsKHR>) = Loader<unit>.vkGetDeviceGroupSurfacePresentModes2EXT.Invoke(device, pSurfaceInfo, pModes)

    module Vulkan11 =
        type VkDeviceGroupPresentModeFlagsKHR = KHRSwapchain.Vulkan11.VkDeviceGroupPresentModeFlagsKHR

        module VkRaw =
            let vkGetDeviceGroupSurfacePresentModes2EXT = KHRDeviceGroup.VkRaw.vkGetDeviceGroupSurfacePresentModes2EXT

module EXTGlobalPriority =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_global_priority"
    let Number = 175


    type VkQueueGlobalPriorityEXT = VkQueueGlobalPriorityKHR

    type VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfoKHR


    [<AutoOpen>]
    module EnumExtensions =
         type VkResult with
              static member inline ErrorNotPermittedExt = unbox<VkResult> 1000174001


module EXTGlobalPriorityQuery =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTGlobalPriority
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_global_priority_query"
    let Number = 389

    let Required = [ EXTGlobalPriority.Name; KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT = VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR

    type VkQueueFamilyGlobalPriorityPropertiesEXT = VkQueueFamilyGlobalPriorityPropertiesKHR



module KHRPipelineLibrary =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_pipeline_library"
    let Number = 291


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineLibraryCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public libraryCount : uint32
            val mutable public pLibraries : nativeptr<VkPipeline>

            new(pNext : nativeint, libraryCount : uint32, pLibraries : nativeptr<VkPipeline>) =
                {
                    sType = 1000290000u
                    pNext = pNext
                    libraryCount = libraryCount
                    pLibraries = pLibraries
                }

            new(libraryCount : uint32, pLibraries : nativeptr<VkPipeline>) =
                VkPipelineLibraryCreateInfoKHR(Unchecked.defaultof<nativeint>, libraryCount, pLibraries)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.libraryCount = Unchecked.defaultof<uint32> && x.pLibraries = Unchecked.defaultof<nativeptr<VkPipeline>>

            static member Empty =
                VkPipelineLibraryCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipeline>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "libraryCount = %A" x.libraryCount
                    sprintf "pLibraries = %A" x.pLibraries
                ] |> sprintf "VkPipelineLibraryCreateInfoKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkPipelineCreateFlags with
              static member inline LibraryBitKhr = unbox<VkPipelineCreateFlags> 0x00000800


module EXTGraphicsPipelineLibrary =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRPipelineLibrary
    let Name = "VK_EXT_graphics_pipeline_library"
    let Number = 321

    let Required = [ KHRGetPhysicalDeviceProperties2.Name; KHRPipelineLibrary.Name ]


    [<Flags>]
    type VkGraphicsPipelineLibraryFlagsEXT =
        | All = 15
        | None = 0
        | VertexInputInterfaceBit = 0x00000001
        | PreRasterizationShadersBit = 0x00000002
        | FragmentShaderBit = 0x00000004
        | FragmentOutputInterfaceBit = 0x00000008


    [<StructLayout(LayoutKind.Sequential)>]
    type VkGraphicsPipelineLibraryCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkGraphicsPipelineLibraryFlagsEXT

            new(pNext : nativeint, flags : VkGraphicsPipelineLibraryFlagsEXT) =
                {
                    sType = 1000320002u
                    pNext = pNext
                    flags = flags
                }

            new(flags : VkGraphicsPipelineLibraryFlagsEXT) =
                VkGraphicsPipelineLibraryCreateInfoEXT(Unchecked.defaultof<nativeint>, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkGraphicsPipelineLibraryFlagsEXT>

            static member Empty =
                VkGraphicsPipelineLibraryCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkGraphicsPipelineLibraryFlagsEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkGraphicsPipelineLibraryCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public graphicsPipelineLibrary : VkBool32

            new(pNext : nativeint, graphicsPipelineLibrary : VkBool32) =
                {
                    sType = 1000320000u
                    pNext = pNext
                    graphicsPipelineLibrary = graphicsPipelineLibrary
                }

            new(graphicsPipelineLibrary : VkBool32) =
                VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(Unchecked.defaultof<nativeint>, graphicsPipelineLibrary)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.graphicsPipelineLibrary = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "graphicsPipelineLibrary = %A" x.graphicsPipelineLibrary
                ] |> sprintf "VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public graphicsPipelineLibraryFastLinking : VkBool32
            val mutable public graphicsPipelineLibraryIndependentInterpolationDecoration : VkBool32

            new(pNext : nativeint, graphicsPipelineLibraryFastLinking : VkBool32, graphicsPipelineLibraryIndependentInterpolationDecoration : VkBool32) =
                {
                    sType = 1000320001u
                    pNext = pNext
                    graphicsPipelineLibraryFastLinking = graphicsPipelineLibraryFastLinking
                    graphicsPipelineLibraryIndependentInterpolationDecoration = graphicsPipelineLibraryIndependentInterpolationDecoration
                }

            new(graphicsPipelineLibraryFastLinking : VkBool32, graphicsPipelineLibraryIndependentInterpolationDecoration : VkBool32) =
                VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(Unchecked.defaultof<nativeint>, graphicsPipelineLibraryFastLinking, graphicsPipelineLibraryIndependentInterpolationDecoration)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.graphicsPipelineLibraryFastLinking = Unchecked.defaultof<VkBool32> && x.graphicsPipelineLibraryIndependentInterpolationDecoration = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "graphicsPipelineLibraryFastLinking = %A" x.graphicsPipelineLibraryFastLinking
                    sprintf "graphicsPipelineLibraryIndependentInterpolationDecoration = %A" x.graphicsPipelineLibraryIndependentInterpolationDecoration
                ] |> sprintf "VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkPipelineCreateFlags with
              static member inline RetainLinkTimeOptimizationInfoBitExt = unbox<VkPipelineCreateFlags> 0x00800000
              static member inline LinkTimeOptimizationBitExt = unbox<VkPipelineCreateFlags> 0x00000400
         type VkPipelineLayoutCreateFlags with
              static member inline IndependentSetsBitExt = unbox<VkPipelineLayoutCreateFlags> 0x00000002


module EXTHdrMetadata =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_EXT_hdr_metadata"
    let Number = 106

    let Required = [ KHRSwapchain.Name ]


    /// Chromaticity coordinate
    [<StructLayout(LayoutKind.Sequential)>]
    type VkXYColorEXT =
        struct
            val mutable public x : float32
            val mutable public y : float32

            new(x : float32, y : float32) =
                {
                    x = x
                    y = y
                }

            member x.IsEmpty =
                x.x = Unchecked.defaultof<float32> && x.y = Unchecked.defaultof<float32>

            static member Empty =
                VkXYColorEXT(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "x = %A" x.x
                    sprintf "y = %A" x.y
                ] |> sprintf "VkXYColorEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkHdrMetadataEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public displayPrimaryRed : VkXYColorEXT
            val mutable public displayPrimaryGreen : VkXYColorEXT
            val mutable public displayPrimaryBlue : VkXYColorEXT
            val mutable public whitePoint : VkXYColorEXT
            val mutable public maxLuminance : float32
            val mutable public minLuminance : float32
            val mutable public maxContentLightLevel : float32
            val mutable public maxFrameAverageLightLevel : float32

            new(pNext : nativeint, displayPrimaryRed : VkXYColorEXT, displayPrimaryGreen : VkXYColorEXT, displayPrimaryBlue : VkXYColorEXT, whitePoint : VkXYColorEXT, maxLuminance : float32, minLuminance : float32, maxContentLightLevel : float32, maxFrameAverageLightLevel : float32) =
                {
                    sType = 1000105000u
                    pNext = pNext
                    displayPrimaryRed = displayPrimaryRed
                    displayPrimaryGreen = displayPrimaryGreen
                    displayPrimaryBlue = displayPrimaryBlue
                    whitePoint = whitePoint
                    maxLuminance = maxLuminance
                    minLuminance = minLuminance
                    maxContentLightLevel = maxContentLightLevel
                    maxFrameAverageLightLevel = maxFrameAverageLightLevel
                }

            new(displayPrimaryRed : VkXYColorEXT, displayPrimaryGreen : VkXYColorEXT, displayPrimaryBlue : VkXYColorEXT, whitePoint : VkXYColorEXT, maxLuminance : float32, minLuminance : float32, maxContentLightLevel : float32, maxFrameAverageLightLevel : float32) =
                VkHdrMetadataEXT(Unchecked.defaultof<nativeint>, displayPrimaryRed, displayPrimaryGreen, displayPrimaryBlue, whitePoint, maxLuminance, minLuminance, maxContentLightLevel, maxFrameAverageLightLevel)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.displayPrimaryRed = Unchecked.defaultof<VkXYColorEXT> && x.displayPrimaryGreen = Unchecked.defaultof<VkXYColorEXT> && x.displayPrimaryBlue = Unchecked.defaultof<VkXYColorEXT> && x.whitePoint = Unchecked.defaultof<VkXYColorEXT> && x.maxLuminance = Unchecked.defaultof<float32> && x.minLuminance = Unchecked.defaultof<float32> && x.maxContentLightLevel = Unchecked.defaultof<float32> && x.maxFrameAverageLightLevel = Unchecked.defaultof<float32>

            static member Empty =
                VkHdrMetadataEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkXYColorEXT>, Unchecked.defaultof<VkXYColorEXT>, Unchecked.defaultof<VkXYColorEXT>, Unchecked.defaultof<VkXYColorEXT>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "displayPrimaryRed = %A" x.displayPrimaryRed
                    sprintf "displayPrimaryGreen = %A" x.displayPrimaryGreen
                    sprintf "displayPrimaryBlue = %A" x.displayPrimaryBlue
                    sprintf "whitePoint = %A" x.whitePoint
                    sprintf "maxLuminance = %A" x.maxLuminance
                    sprintf "minLuminance = %A" x.minLuminance
                    sprintf "maxContentLightLevel = %A" x.maxContentLightLevel
                    sprintf "maxFrameAverageLightLevel = %A" x.maxFrameAverageLightLevel
                ] |> sprintf "VkHdrMetadataEXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkSetHdrMetadataEXTDel = delegate of VkDevice * uint32 * nativeptr<VkSwapchainKHR> * nativeptr<VkHdrMetadataEXT> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTHdrMetadata")
            static let s_vkSetHdrMetadataEXTDel = VkRaw.vkImportInstanceDelegate<VkSetHdrMetadataEXTDel> "vkSetHdrMetadataEXT"
            static do Report.End(3) |> ignore
            static member vkSetHdrMetadataEXT = s_vkSetHdrMetadataEXTDel
        let vkSetHdrMetadataEXT(device : VkDevice, swapchainCount : uint32, pSwapchains : nativeptr<VkSwapchainKHR>, pMetadata : nativeptr<VkHdrMetadataEXT>) = Loader<unit>.vkSetHdrMetadataEXT.Invoke(device, swapchainCount, pSwapchains, pMetadata)

module EXTHeadlessSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_EXT_headless_surface"
    let Number = 257

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkHeadlessSurfaceCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkHeadlessSurfaceCreateFlagsEXT

            new(pNext : nativeint, flags : VkHeadlessSurfaceCreateFlagsEXT) =
                {
                    sType = 1000256000u
                    pNext = pNext
                    flags = flags
                }

            new(flags : VkHeadlessSurfaceCreateFlagsEXT) =
                VkHeadlessSurfaceCreateInfoEXT(Unchecked.defaultof<nativeint>, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkHeadlessSurfaceCreateFlagsEXT>

            static member Empty =
                VkHeadlessSurfaceCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkHeadlessSurfaceCreateFlagsEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkHeadlessSurfaceCreateInfoEXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateHeadlessSurfaceEXTDel = delegate of VkInstance * nativeptr<VkHeadlessSurfaceCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTHeadlessSurface")
            static let s_vkCreateHeadlessSurfaceEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateHeadlessSurfaceEXTDel> "vkCreateHeadlessSurfaceEXT"
            static do Report.End(3) |> ignore
            static member vkCreateHeadlessSurfaceEXT = s_vkCreateHeadlessSurfaceEXTDel
        let vkCreateHeadlessSurfaceEXT(instance : VkInstance, pCreateInfo : nativeptr<VkHeadlessSurfaceCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateHeadlessSurfaceEXT.Invoke(instance, pCreateInfo, pAllocator, pSurface)

module EXTHostQueryReset =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_host_query_reset"
    let Number = 262

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkResetQueryPoolEXTDel = delegate of VkDevice * VkQueryPool * uint32 * uint32 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTHostQueryReset")
            static let s_vkResetQueryPoolEXTDel = VkRaw.vkImportInstanceDelegate<VkResetQueryPoolEXTDel> "vkResetQueryPoolEXT"
            static do Report.End(3) |> ignore
            static member vkResetQueryPoolEXT = s_vkResetQueryPoolEXTDel
        let vkResetQueryPoolEXT(device : VkDevice, queryPool : VkQueryPool, firstQuery : uint32, queryCount : uint32) = Loader<unit>.vkResetQueryPoolEXT.Invoke(device, queryPool, firstQuery, queryCount)

module EXTImage2dViewOf3d =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance1
    let Name = "VK_EXT_image_2d_view_of_3d"
    let Number = 394

    let Required = [ KHRGetPhysicalDeviceProperties2.Name; KHRMaintenance1.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceImage2DViewOf3DFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image2DViewOf3D : VkBool32
            val mutable public sampler2DViewOf3D : VkBool32

            new(pNext : nativeint, image2DViewOf3D : VkBool32, sampler2DViewOf3D : VkBool32) =
                {
                    sType = 1000393000u
                    pNext = pNext
                    image2DViewOf3D = image2DViewOf3D
                    sampler2DViewOf3D = sampler2DViewOf3D
                }

            new(image2DViewOf3D : VkBool32, sampler2DViewOf3D : VkBool32) =
                VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(Unchecked.defaultof<nativeint>, image2DViewOf3D, sampler2DViewOf3D)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image2DViewOf3D = Unchecked.defaultof<VkBool32> && x.sampler2DViewOf3D = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "image2DViewOf3D = %A" x.image2DViewOf3D
                    sprintf "sampler2DViewOf3D = %A" x.sampler2DViewOf3D
                ] |> sprintf "VkPhysicalDeviceImage2DViewOf3DFeaturesEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkImageCreateFlags with
              /// Image is created with a layout where individual slices are capable of being used as 2D images
              static member inline D2dViewCompatibleBitExt = unbox<VkImageCreateFlags> 0x00020000


module EXTImageCompressionControl =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_image_compression_control"
    let Number = 339


    [<Flags>]
    type VkImageCompressionFlagsEXT =
        | All = 7
        | Default = 0
        | FixedRateDefault = 0x00000001
        | FixedRateExplicit = 0x00000002
        | Disabled = 0x00000004

    [<Flags>]
    type VkImageCompressionFixedRateFlagsEXT =
        | All = 16777215
        | None = 0
        | D1bpcBit = 0x00000001
        | D2bpcBit = 0x00000002
        | D3bpcBit = 0x00000004
        | D4bpcBit = 0x00000008
        | D5bpcBit = 0x00000010
        | D6bpcBit = 0x00000020
        | D7bpcBit = 0x00000040
        | D8bpcBit = 0x00000080
        | D9bpcBit = 0x00000100
        | D10bpcBit = 0x00000200
        | D11bpcBit = 0x00000400
        | D12bpcBit = 0x00000800
        | D13bpcBit = 0x00001000
        | D14bpcBit = 0x00002000
        | D15bpcBit = 0x00004000
        | D16bpcBit = 0x00008000
        | D17bpcBit = 0x00010000
        | D18bpcBit = 0x00020000
        | D19bpcBit = 0x00040000
        | D20bpcBit = 0x00080000
        | D21bpcBit = 0x00100000
        | D22bpcBit = 0x00200000
        | D23bpcBit = 0x00400000
        | D24bpcBit = 0x00800000


    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageCompressionControlEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkImageCompressionFlagsEXT
            val mutable public compressionControlPlaneCount : uint32
            val mutable public pFixedRateFlags : nativeptr<VkImageCompressionFixedRateFlagsEXT>

            new(pNext : nativeint, flags : VkImageCompressionFlagsEXT, compressionControlPlaneCount : uint32, pFixedRateFlags : nativeptr<VkImageCompressionFixedRateFlagsEXT>) =
                {
                    sType = 1000338001u
                    pNext = pNext
                    flags = flags
                    compressionControlPlaneCount = compressionControlPlaneCount
                    pFixedRateFlags = pFixedRateFlags
                }

            new(flags : VkImageCompressionFlagsEXT, compressionControlPlaneCount : uint32, pFixedRateFlags : nativeptr<VkImageCompressionFixedRateFlagsEXT>) =
                VkImageCompressionControlEXT(Unchecked.defaultof<nativeint>, flags, compressionControlPlaneCount, pFixedRateFlags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkImageCompressionFlagsEXT> && x.compressionControlPlaneCount = Unchecked.defaultof<uint32> && x.pFixedRateFlags = Unchecked.defaultof<nativeptr<VkImageCompressionFixedRateFlagsEXT>>

            static member Empty =
                VkImageCompressionControlEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageCompressionFlagsEXT>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageCompressionFixedRateFlagsEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "compressionControlPlaneCount = %A" x.compressionControlPlaneCount
                    sprintf "pFixedRateFlags = %A" x.pFixedRateFlags
                ] |> sprintf "VkImageCompressionControlEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageCompressionPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageCompressionFlags : VkImageCompressionFlagsEXT
            val mutable public imageCompressionFixedRateFlags : VkImageCompressionFixedRateFlagsEXT

            new(pNext : nativeint, imageCompressionFlags : VkImageCompressionFlagsEXT, imageCompressionFixedRateFlags : VkImageCompressionFixedRateFlagsEXT) =
                {
                    sType = 1000338004u
                    pNext = pNext
                    imageCompressionFlags = imageCompressionFlags
                    imageCompressionFixedRateFlags = imageCompressionFixedRateFlags
                }

            new(imageCompressionFlags : VkImageCompressionFlagsEXT, imageCompressionFixedRateFlags : VkImageCompressionFixedRateFlagsEXT) =
                VkImageCompressionPropertiesEXT(Unchecked.defaultof<nativeint>, imageCompressionFlags, imageCompressionFixedRateFlags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageCompressionFlags = Unchecked.defaultof<VkImageCompressionFlagsEXT> && x.imageCompressionFixedRateFlags = Unchecked.defaultof<VkImageCompressionFixedRateFlagsEXT>

            static member Empty =
                VkImageCompressionPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageCompressionFlagsEXT>, Unchecked.defaultof<VkImageCompressionFixedRateFlagsEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageCompressionFlags = %A" x.imageCompressionFlags
                    sprintf "imageCompressionFixedRateFlags = %A" x.imageCompressionFixedRateFlags
                ] |> sprintf "VkImageCompressionPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageSubresource2EXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageSubresource : VkImageSubresource

            new(pNext : nativeint, imageSubresource : VkImageSubresource) =
                {
                    sType = 1000338003u
                    pNext = pNext
                    imageSubresource = imageSubresource
                }

            new(imageSubresource : VkImageSubresource) =
                VkImageSubresource2EXT(Unchecked.defaultof<nativeint>, imageSubresource)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageSubresource = Unchecked.defaultof<VkImageSubresource>

            static member Empty =
                VkImageSubresource2EXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageSubresource>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageSubresource = %A" x.imageSubresource
                ] |> sprintf "VkImageSubresource2EXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceImageCompressionControlFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageCompressionControl : VkBool32

            new(pNext : nativeint, imageCompressionControl : VkBool32) =
                {
                    sType = 1000338000u
                    pNext = pNext
                    imageCompressionControl = imageCompressionControl
                }

            new(imageCompressionControl : VkBool32) =
                VkPhysicalDeviceImageCompressionControlFeaturesEXT(Unchecked.defaultof<nativeint>, imageCompressionControl)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageCompressionControl = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceImageCompressionControlFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageCompressionControl = %A" x.imageCompressionControl
                ] |> sprintf "VkPhysicalDeviceImageCompressionControlFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubresourceLayout2EXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public subresourceLayout : VkSubresourceLayout

            new(pNext : nativeint, subresourceLayout : VkSubresourceLayout) =
                {
                    sType = 1000338002u
                    pNext = pNext
                    subresourceLayout = subresourceLayout
                }

            new(subresourceLayout : VkSubresourceLayout) =
                VkSubresourceLayout2EXT(Unchecked.defaultof<nativeint>, subresourceLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.subresourceLayout = Unchecked.defaultof<VkSubresourceLayout>

            static member Empty =
                VkSubresourceLayout2EXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSubresourceLayout>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "subresourceLayout = %A" x.subresourceLayout
                ] |> sprintf "VkSubresourceLayout2EXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkResult with
              static member inline ErrorCompressionExhaustedExt = unbox<VkResult> -1000338000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetImageSubresourceLayout2EXTDel = delegate of VkDevice * VkImage * nativeptr<VkImageSubresource2EXT> * nativeptr<VkSubresourceLayout2EXT> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTImageCompressionControl")
            static let s_vkGetImageSubresourceLayout2EXTDel = VkRaw.vkImportInstanceDelegate<VkGetImageSubresourceLayout2EXTDel> "vkGetImageSubresourceLayout2EXT"
            static do Report.End(3) |> ignore
            static member vkGetImageSubresourceLayout2EXT = s_vkGetImageSubresourceLayout2EXTDel
        let vkGetImageSubresourceLayout2EXT(device : VkDevice, image : VkImage, pSubresource : nativeptr<VkImageSubresource2EXT>, pLayout : nativeptr<VkSubresourceLayout2EXT>) = Loader<unit>.vkGetImageSubresourceLayout2EXT.Invoke(device, image, pSubresource, pLayout)

module EXTImageCompressionControlSwapchain =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTImageCompressionControl
    let Name = "VK_EXT_image_compression_control_swapchain"
    let Number = 438

    let Required = [ EXTImageCompressionControl.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageCompressionControlSwapchain : VkBool32

            new(pNext : nativeint, imageCompressionControlSwapchain : VkBool32) =
                {
                    sType = 1000437000u
                    pNext = pNext
                    imageCompressionControlSwapchain = imageCompressionControlSwapchain
                }

            new(imageCompressionControlSwapchain : VkBool32) =
                VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(Unchecked.defaultof<nativeint>, imageCompressionControlSwapchain)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageCompressionControlSwapchain = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageCompressionControlSwapchain = %A" x.imageCompressionControlSwapchain
                ] |> sprintf "VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT { %s }"
        end



module KHRImageFormatList =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_image_format_list"
    let Number = 148


    type VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo



module EXTImageDrmFormatModifier =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open KHRBindMemory2
    open KHRGetMemoryRequirements2
    open KHRGetPhysicalDeviceProperties2
    open KHRImageFormatList
    open KHRMaintenance1
    open KHRSamplerYcbcrConversion
    let Name = "VK_EXT_image_drm_format_modifier"
    let Number = 159

    let Required = [ KHRBindMemory2.Name; KHRGetPhysicalDeviceProperties2.Name; KHRImageFormatList.Name; KHRSamplerYcbcrConversion.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDrmFormatModifierPropertiesEXT =
        struct
            val mutable public drmFormatModifier : uint64
            val mutable public drmFormatModifierPlaneCount : uint32
            val mutable public drmFormatModifierTilingFeatures : VkFormatFeatureFlags

            new(drmFormatModifier : uint64, drmFormatModifierPlaneCount : uint32, drmFormatModifierTilingFeatures : VkFormatFeatureFlags) =
                {
                    drmFormatModifier = drmFormatModifier
                    drmFormatModifierPlaneCount = drmFormatModifierPlaneCount
                    drmFormatModifierTilingFeatures = drmFormatModifierTilingFeatures
                }

            member x.IsEmpty =
                x.drmFormatModifier = Unchecked.defaultof<uint64> && x.drmFormatModifierPlaneCount = Unchecked.defaultof<uint32> && x.drmFormatModifierTilingFeatures = Unchecked.defaultof<VkFormatFeatureFlags>

            static member Empty =
                VkDrmFormatModifierPropertiesEXT(Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkFormatFeatureFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "drmFormatModifier = %A" x.drmFormatModifier
                    sprintf "drmFormatModifierPlaneCount = %A" x.drmFormatModifierPlaneCount
                    sprintf "drmFormatModifierTilingFeatures = %A" x.drmFormatModifierTilingFeatures
                ] |> sprintf "VkDrmFormatModifierPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDrmFormatModifierPropertiesListEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public drmFormatModifierCount : uint32
            val mutable public pDrmFormatModifierProperties : nativeptr<VkDrmFormatModifierPropertiesEXT>

            new(pNext : nativeint, drmFormatModifierCount : uint32, pDrmFormatModifierProperties : nativeptr<VkDrmFormatModifierPropertiesEXT>) =
                {
                    sType = 1000158000u
                    pNext = pNext
                    drmFormatModifierCount = drmFormatModifierCount
                    pDrmFormatModifierProperties = pDrmFormatModifierProperties
                }

            new(drmFormatModifierCount : uint32, pDrmFormatModifierProperties : nativeptr<VkDrmFormatModifierPropertiesEXT>) =
                VkDrmFormatModifierPropertiesListEXT(Unchecked.defaultof<nativeint>, drmFormatModifierCount, pDrmFormatModifierProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.drmFormatModifierCount = Unchecked.defaultof<uint32> && x.pDrmFormatModifierProperties = Unchecked.defaultof<nativeptr<VkDrmFormatModifierPropertiesEXT>>

            static member Empty =
                VkDrmFormatModifierPropertiesListEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDrmFormatModifierPropertiesEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "drmFormatModifierCount = %A" x.drmFormatModifierCount
                    sprintf "pDrmFormatModifierProperties = %A" x.pDrmFormatModifierProperties
                ] |> sprintf "VkDrmFormatModifierPropertiesListEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageDrmFormatModifierExplicitCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public drmFormatModifier : uint64
            val mutable public drmFormatModifierPlaneCount : uint32
            val mutable public pPlaneLayouts : nativeptr<VkSubresourceLayout>

            new(pNext : nativeint, drmFormatModifier : uint64, drmFormatModifierPlaneCount : uint32, pPlaneLayouts : nativeptr<VkSubresourceLayout>) =
                {
                    sType = 1000158004u
                    pNext = pNext
                    drmFormatModifier = drmFormatModifier
                    drmFormatModifierPlaneCount = drmFormatModifierPlaneCount
                    pPlaneLayouts = pPlaneLayouts
                }

            new(drmFormatModifier : uint64, drmFormatModifierPlaneCount : uint32, pPlaneLayouts : nativeptr<VkSubresourceLayout>) =
                VkImageDrmFormatModifierExplicitCreateInfoEXT(Unchecked.defaultof<nativeint>, drmFormatModifier, drmFormatModifierPlaneCount, pPlaneLayouts)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.drmFormatModifier = Unchecked.defaultof<uint64> && x.drmFormatModifierPlaneCount = Unchecked.defaultof<uint32> && x.pPlaneLayouts = Unchecked.defaultof<nativeptr<VkSubresourceLayout>>

            static member Empty =
                VkImageDrmFormatModifierExplicitCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSubresourceLayout>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "drmFormatModifier = %A" x.drmFormatModifier
                    sprintf "drmFormatModifierPlaneCount = %A" x.drmFormatModifierPlaneCount
                    sprintf "pPlaneLayouts = %A" x.pPlaneLayouts
                ] |> sprintf "VkImageDrmFormatModifierExplicitCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageDrmFormatModifierListCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public drmFormatModifierCount : uint32
            val mutable public pDrmFormatModifiers : nativeptr<uint64>

            new(pNext : nativeint, drmFormatModifierCount : uint32, pDrmFormatModifiers : nativeptr<uint64>) =
                {
                    sType = 1000158003u
                    pNext = pNext
                    drmFormatModifierCount = drmFormatModifierCount
                    pDrmFormatModifiers = pDrmFormatModifiers
                }

            new(drmFormatModifierCount : uint32, pDrmFormatModifiers : nativeptr<uint64>) =
                VkImageDrmFormatModifierListCreateInfoEXT(Unchecked.defaultof<nativeint>, drmFormatModifierCount, pDrmFormatModifiers)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.drmFormatModifierCount = Unchecked.defaultof<uint32> && x.pDrmFormatModifiers = Unchecked.defaultof<nativeptr<uint64>>

            static member Empty =
                VkImageDrmFormatModifierListCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint64>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "drmFormatModifierCount = %A" x.drmFormatModifierCount
                    sprintf "pDrmFormatModifiers = %A" x.pDrmFormatModifiers
                ] |> sprintf "VkImageDrmFormatModifierListCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageDrmFormatModifierPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public drmFormatModifier : uint64

            new(pNext : nativeint, drmFormatModifier : uint64) =
                {
                    sType = 1000158005u
                    pNext = pNext
                    drmFormatModifier = drmFormatModifier
                }

            new(drmFormatModifier : uint64) =
                VkImageDrmFormatModifierPropertiesEXT(Unchecked.defaultof<nativeint>, drmFormatModifier)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.drmFormatModifier = Unchecked.defaultof<uint64>

            static member Empty =
                VkImageDrmFormatModifierPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "drmFormatModifier = %A" x.drmFormatModifier
                ] |> sprintf "VkImageDrmFormatModifierPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceImageDrmFormatModifierInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public drmFormatModifier : uint64
            val mutable public sharingMode : VkSharingMode
            val mutable public queueFamilyIndexCount : uint32
            val mutable public pQueueFamilyIndices : nativeptr<uint32>

            new(pNext : nativeint, drmFormatModifier : uint64, sharingMode : VkSharingMode, queueFamilyIndexCount : uint32, pQueueFamilyIndices : nativeptr<uint32>) =
                {
                    sType = 1000158002u
                    pNext = pNext
                    drmFormatModifier = drmFormatModifier
                    sharingMode = sharingMode
                    queueFamilyIndexCount = queueFamilyIndexCount
                    pQueueFamilyIndices = pQueueFamilyIndices
                }

            new(drmFormatModifier : uint64, sharingMode : VkSharingMode, queueFamilyIndexCount : uint32, pQueueFamilyIndices : nativeptr<uint32>) =
                VkPhysicalDeviceImageDrmFormatModifierInfoEXT(Unchecked.defaultof<nativeint>, drmFormatModifier, sharingMode, queueFamilyIndexCount, pQueueFamilyIndices)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.drmFormatModifier = Unchecked.defaultof<uint64> && x.sharingMode = Unchecked.defaultof<VkSharingMode> && x.queueFamilyIndexCount = Unchecked.defaultof<uint32> && x.pQueueFamilyIndices = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkPhysicalDeviceImageDrmFormatModifierInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkSharingMode>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "drmFormatModifier = %A" x.drmFormatModifier
                    sprintf "sharingMode = %A" x.sharingMode
                    sprintf "queueFamilyIndexCount = %A" x.queueFamilyIndexCount
                    sprintf "pQueueFamilyIndices = %A" x.pQueueFamilyIndices
                ] |> sprintf "VkPhysicalDeviceImageDrmFormatModifierInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkImageAspectFlags with
              static member inline MemoryPlane0BitExt = unbox<VkImageAspectFlags> 0x00000080
              static member inline MemoryPlane1BitExt = unbox<VkImageAspectFlags> 0x00000100
              static member inline MemoryPlane2BitExt = unbox<VkImageAspectFlags> 0x00000200
              static member inline MemoryPlane3BitExt = unbox<VkImageAspectFlags> 0x00000400
         type VkImageTiling with
              static member inline DrmFormatModifierExt = unbox<VkImageTiling> 1000158000
         type VkResult with
              static member inline ErrorInvalidDrmFormatModifierPlaneLayoutExt = unbox<VkResult> -1000158000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetImageDrmFormatModifierPropertiesEXTDel = delegate of VkDevice * VkImage * nativeptr<VkImageDrmFormatModifierPropertiesEXT> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTImageDrmFormatModifier")
            static let s_vkGetImageDrmFormatModifierPropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkGetImageDrmFormatModifierPropertiesEXTDel> "vkGetImageDrmFormatModifierPropertiesEXT"
            static do Report.End(3) |> ignore
            static member vkGetImageDrmFormatModifierPropertiesEXT = s_vkGetImageDrmFormatModifierPropertiesEXTDel
        let vkGetImageDrmFormatModifierPropertiesEXT(device : VkDevice, image : VkImage, pProperties : nativeptr<VkImageDrmFormatModifierPropertiesEXT>) = Loader<unit>.vkGetImageDrmFormatModifierPropertiesEXT.Invoke(device, image, pProperties)

    module KHRFormatFeatureFlags2 =
        [<StructLayout(LayoutKind.Sequential)>]
        type VkDrmFormatModifierProperties2EXT =
            struct
                val mutable public drmFormatModifier : uint64
                val mutable public drmFormatModifierPlaneCount : uint32
                val mutable public drmFormatModifierTilingFeatures : VkFormatFeatureFlags2

                new(drmFormatModifier : uint64, drmFormatModifierPlaneCount : uint32, drmFormatModifierTilingFeatures : VkFormatFeatureFlags2) =
                    {
                        drmFormatModifier = drmFormatModifier
                        drmFormatModifierPlaneCount = drmFormatModifierPlaneCount
                        drmFormatModifierTilingFeatures = drmFormatModifierTilingFeatures
                    }

                member x.IsEmpty =
                    x.drmFormatModifier = Unchecked.defaultof<uint64> && x.drmFormatModifierPlaneCount = Unchecked.defaultof<uint32> && x.drmFormatModifierTilingFeatures = Unchecked.defaultof<VkFormatFeatureFlags2>

                static member Empty =
                    VkDrmFormatModifierProperties2EXT(Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkFormatFeatureFlags2>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "drmFormatModifier = %A" x.drmFormatModifier
                        sprintf "drmFormatModifierPlaneCount = %A" x.drmFormatModifierPlaneCount
                        sprintf "drmFormatModifierTilingFeatures = %A" x.drmFormatModifierTilingFeatures
                    ] |> sprintf "VkDrmFormatModifierProperties2EXT { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkDrmFormatModifierPropertiesList2EXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public drmFormatModifierCount : uint32
                val mutable public pDrmFormatModifierProperties : nativeptr<VkDrmFormatModifierProperties2EXT>

                new(pNext : nativeint, drmFormatModifierCount : uint32, pDrmFormatModifierProperties : nativeptr<VkDrmFormatModifierProperties2EXT>) =
                    {
                        sType = 1000158006u
                        pNext = pNext
                        drmFormatModifierCount = drmFormatModifierCount
                        pDrmFormatModifierProperties = pDrmFormatModifierProperties
                    }

                new(drmFormatModifierCount : uint32, pDrmFormatModifierProperties : nativeptr<VkDrmFormatModifierProperties2EXT>) =
                    VkDrmFormatModifierPropertiesList2EXT(Unchecked.defaultof<nativeint>, drmFormatModifierCount, pDrmFormatModifierProperties)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.drmFormatModifierCount = Unchecked.defaultof<uint32> && x.pDrmFormatModifierProperties = Unchecked.defaultof<nativeptr<VkDrmFormatModifierProperties2EXT>>

                static member Empty =
                    VkDrmFormatModifierPropertiesList2EXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDrmFormatModifierProperties2EXT>>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "drmFormatModifierCount = %A" x.drmFormatModifierCount
                        sprintf "pDrmFormatModifierProperties = %A" x.pDrmFormatModifierProperties
                    ] |> sprintf "VkDrmFormatModifierPropertiesList2EXT { %s }"
            end



module EXTImageRobustness =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_image_robustness"
    let Number = 336

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures



module EXTImageViewMinLod =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_image_view_min_lod"
    let Number = 392

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageViewMinLodCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public minLod : float32

            new(pNext : nativeint, minLod : float32) =
                {
                    sType = 1000391001u
                    pNext = pNext
                    minLod = minLod
                }

            new(minLod : float32) =
                VkImageViewMinLodCreateInfoEXT(Unchecked.defaultof<nativeint>, minLod)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.minLod = Unchecked.defaultof<float32>

            static member Empty =
                VkImageViewMinLodCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<float32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "minLod = %A" x.minLod
                ] |> sprintf "VkImageViewMinLodCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceImageViewMinLodFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public minLod : VkBool32

            new(pNext : nativeint, minLod : VkBool32) =
                {
                    sType = 1000391000u
                    pNext = pNext
                    minLod = minLod
                }

            new(minLod : VkBool32) =
                VkPhysicalDeviceImageViewMinLodFeaturesEXT(Unchecked.defaultof<nativeint>, minLod)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.minLod = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceImageViewMinLodFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "minLod = %A" x.minLod
                ] |> sprintf "VkPhysicalDeviceImageViewMinLodFeaturesEXT { %s }"
        end



module EXTIndexTypeUint8 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_index_type_uint8"
    let Number = 266


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceIndexTypeUint8FeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public indexTypeUint8 : VkBool32

            new(pNext : nativeint, indexTypeUint8 : VkBool32) =
                {
                    sType = 1000265000u
                    pNext = pNext
                    indexTypeUint8 = indexTypeUint8
                }

            new(indexTypeUint8 : VkBool32) =
                VkPhysicalDeviceIndexTypeUint8FeaturesEXT(Unchecked.defaultof<nativeint>, indexTypeUint8)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.indexTypeUint8 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceIndexTypeUint8FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "indexTypeUint8 = %A" x.indexTypeUint8
                ] |> sprintf "VkPhysicalDeviceIndexTypeUint8FeaturesEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkIndexType with
              static member inline Uint8Ext = unbox<VkIndexType> 1000265000


module EXTInlineUniformBlock =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance1
    let Name = "VK_EXT_inline_uniform_block"
    let Number = 139

    let Required = [ KHRGetPhysicalDeviceProperties2.Name; KHRMaintenance1.Name ]


    type VkDescriptorPoolInlineUniformBlockCreateInfoEXT = VkDescriptorPoolInlineUniformBlockCreateInfo

    type VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures

    type VkPhysicalDeviceInlineUniformBlockPropertiesEXT = VkPhysicalDeviceInlineUniformBlockProperties

    type VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock


    [<AutoOpen>]
    module EnumExtensions =
         type VkDescriptorType with
              static member inline InlineUniformBlockExt = unbox<VkDescriptorType> 1000138000


module EXTLineRasterization =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_line_rasterization"
    let Number = 260

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkLineRasterizationModeEXT =
        | Default = 0
        | Rectangular = 1
        | Bresenham = 2
        | RectangularSmooth = 3


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceLineRasterizationFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public rectangularLines : VkBool32
            val mutable public bresenhamLines : VkBool32
            val mutable public smoothLines : VkBool32
            val mutable public stippledRectangularLines : VkBool32
            val mutable public stippledBresenhamLines : VkBool32
            val mutable public stippledSmoothLines : VkBool32

            new(pNext : nativeint, rectangularLines : VkBool32, bresenhamLines : VkBool32, smoothLines : VkBool32, stippledRectangularLines : VkBool32, stippledBresenhamLines : VkBool32, stippledSmoothLines : VkBool32) =
                {
                    sType = 1000259000u
                    pNext = pNext
                    rectangularLines = rectangularLines
                    bresenhamLines = bresenhamLines
                    smoothLines = smoothLines
                    stippledRectangularLines = stippledRectangularLines
                    stippledBresenhamLines = stippledBresenhamLines
                    stippledSmoothLines = stippledSmoothLines
                }

            new(rectangularLines : VkBool32, bresenhamLines : VkBool32, smoothLines : VkBool32, stippledRectangularLines : VkBool32, stippledBresenhamLines : VkBool32, stippledSmoothLines : VkBool32) =
                VkPhysicalDeviceLineRasterizationFeaturesEXT(Unchecked.defaultof<nativeint>, rectangularLines, bresenhamLines, smoothLines, stippledRectangularLines, stippledBresenhamLines, stippledSmoothLines)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.rectangularLines = Unchecked.defaultof<VkBool32> && x.bresenhamLines = Unchecked.defaultof<VkBool32> && x.smoothLines = Unchecked.defaultof<VkBool32> && x.stippledRectangularLines = Unchecked.defaultof<VkBool32> && x.stippledBresenhamLines = Unchecked.defaultof<VkBool32> && x.stippledSmoothLines = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceLineRasterizationFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "rectangularLines = %A" x.rectangularLines
                    sprintf "bresenhamLines = %A" x.bresenhamLines
                    sprintf "smoothLines = %A" x.smoothLines
                    sprintf "stippledRectangularLines = %A" x.stippledRectangularLines
                    sprintf "stippledBresenhamLines = %A" x.stippledBresenhamLines
                    sprintf "stippledSmoothLines = %A" x.stippledSmoothLines
                ] |> sprintf "VkPhysicalDeviceLineRasterizationFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceLineRasterizationPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public lineSubPixelPrecisionBits : uint32

            new(pNext : nativeint, lineSubPixelPrecisionBits : uint32) =
                {
                    sType = 1000259002u
                    pNext = pNext
                    lineSubPixelPrecisionBits = lineSubPixelPrecisionBits
                }

            new(lineSubPixelPrecisionBits : uint32) =
                VkPhysicalDeviceLineRasterizationPropertiesEXT(Unchecked.defaultof<nativeint>, lineSubPixelPrecisionBits)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.lineSubPixelPrecisionBits = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceLineRasterizationPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "lineSubPixelPrecisionBits = %A" x.lineSubPixelPrecisionBits
                ] |> sprintf "VkPhysicalDeviceLineRasterizationPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineRasterizationLineStateCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public lineRasterizationMode : VkLineRasterizationModeEXT
            val mutable public stippledLineEnable : VkBool32
            val mutable public lineStippleFactor : uint32
            val mutable public lineStipplePattern : uint16

            new(pNext : nativeint, lineRasterizationMode : VkLineRasterizationModeEXT, stippledLineEnable : VkBool32, lineStippleFactor : uint32, lineStipplePattern : uint16) =
                {
                    sType = 1000259001u
                    pNext = pNext
                    lineRasterizationMode = lineRasterizationMode
                    stippledLineEnable = stippledLineEnable
                    lineStippleFactor = lineStippleFactor
                    lineStipplePattern = lineStipplePattern
                }

            new(lineRasterizationMode : VkLineRasterizationModeEXT, stippledLineEnable : VkBool32, lineStippleFactor : uint32, lineStipplePattern : uint16) =
                VkPipelineRasterizationLineStateCreateInfoEXT(Unchecked.defaultof<nativeint>, lineRasterizationMode, stippledLineEnable, lineStippleFactor, lineStipplePattern)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.lineRasterizationMode = Unchecked.defaultof<VkLineRasterizationModeEXT> && x.stippledLineEnable = Unchecked.defaultof<VkBool32> && x.lineStippleFactor = Unchecked.defaultof<uint32> && x.lineStipplePattern = Unchecked.defaultof<uint16>

            static member Empty =
                VkPipelineRasterizationLineStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkLineRasterizationModeEXT>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint16>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "lineRasterizationMode = %A" x.lineRasterizationMode
                    sprintf "stippledLineEnable = %A" x.stippledLineEnable
                    sprintf "lineStippleFactor = %A" x.lineStippleFactor
                    sprintf "lineStipplePattern = %A" x.lineStipplePattern
                ] |> sprintf "VkPipelineRasterizationLineStateCreateInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkDynamicState with
              static member inline LineStippleExt = unbox<VkDynamicState> 1000259000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetLineStippleEXTDel = delegate of VkCommandBuffer * uint32 * uint16 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTLineRasterization")
            static let s_vkCmdSetLineStippleEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetLineStippleEXTDel> "vkCmdSetLineStippleEXT"
            static do Report.End(3) |> ignore
            static member vkCmdSetLineStippleEXT = s_vkCmdSetLineStippleEXTDel
        let vkCmdSetLineStippleEXT(commandBuffer : VkCommandBuffer, lineStippleFactor : uint32, lineStipplePattern : uint16) = Loader<unit>.vkCmdSetLineStippleEXT.Invoke(commandBuffer, lineStippleFactor, lineStipplePattern)

module EXTLoadStoreOpNone =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_load_store_op_none"
    let Number = 401


    [<AutoOpen>]
    module EnumExtensions =
         type VkAttachmentLoadOp with
              static member inline NoneExt = unbox<VkAttachmentLoadOp> 1000400000
         type VkAttachmentStoreOp with
              static member inline NoneExt = unbox<VkAttachmentStoreOp> 1000301000


module EXTMemoryBudget =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_memory_budget"
    let Number = 238

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMemoryBudgetPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public heapBudget : VkDeviceSize_16
            val mutable public heapUsage : VkDeviceSize_16

            new(pNext : nativeint, heapBudget : VkDeviceSize_16, heapUsage : VkDeviceSize_16) =
                {
                    sType = 1000237000u
                    pNext = pNext
                    heapBudget = heapBudget
                    heapUsage = heapUsage
                }

            new(heapBudget : VkDeviceSize_16, heapUsage : VkDeviceSize_16) =
                VkPhysicalDeviceMemoryBudgetPropertiesEXT(Unchecked.defaultof<nativeint>, heapBudget, heapUsage)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.heapBudget = Unchecked.defaultof<VkDeviceSize_16> && x.heapUsage = Unchecked.defaultof<VkDeviceSize_16>

            static member Empty =
                VkPhysicalDeviceMemoryBudgetPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize_16>, Unchecked.defaultof<VkDeviceSize_16>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "heapBudget = %A" x.heapBudget
                    sprintf "heapUsage = %A" x.heapUsage
                ] |> sprintf "VkPhysicalDeviceMemoryBudgetPropertiesEXT { %s }"
        end



module EXTMemoryPriority =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_memory_priority"
    let Number = 239

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryPriorityAllocateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public priority : float32

            new(pNext : nativeint, priority : float32) =
                {
                    sType = 1000238001u
                    pNext = pNext
                    priority = priority
                }

            new(priority : float32) =
                VkMemoryPriorityAllocateInfoEXT(Unchecked.defaultof<nativeint>, priority)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.priority = Unchecked.defaultof<float32>

            static member Empty =
                VkMemoryPriorityAllocateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<float32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "priority = %A" x.priority
                ] |> sprintf "VkMemoryPriorityAllocateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMemoryPriorityFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryPriority : VkBool32

            new(pNext : nativeint, memoryPriority : VkBool32) =
                {
                    sType = 1000238000u
                    pNext = pNext
                    memoryPriority = memoryPriority
                }

            new(memoryPriority : VkBool32) =
                VkPhysicalDeviceMemoryPriorityFeaturesEXT(Unchecked.defaultof<nativeint>, memoryPriority)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryPriority = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMemoryPriorityFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryPriority = %A" x.memoryPriority
                ] |> sprintf "VkPhysicalDeviceMemoryPriorityFeaturesEXT { %s }"
        end



module EXTMetalObjects =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_metal_objects"
    let Number = 312


    [<Flags>]
    type VkExportMetalObjectTypeFlagsEXT =
        | All = 63
        | None = 0
        | MetalDeviceBit = 0x00000001
        | MetalCommandQueueBit = 0x00000002
        | MetalBufferBit = 0x00000004
        | MetalTextureBit = 0x00000008
        | MetalIosurfaceBit = 0x00000010
        | MetalSharedEventBit = 0x00000020


    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMetalBufferInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memory : VkDeviceMemory
            val mutable public mtlBuffer : nativeint

            new(pNext : nativeint, memory : VkDeviceMemory, mtlBuffer : nativeint) =
                {
                    sType = 1000311004u
                    pNext = pNext
                    memory = memory
                    mtlBuffer = mtlBuffer
                }

            new(memory : VkDeviceMemory, mtlBuffer : nativeint) =
                VkExportMetalBufferInfoEXT(Unchecked.defaultof<nativeint>, memory, mtlBuffer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.mtlBuffer = Unchecked.defaultof<nativeint>

            static member Empty =
                VkExportMetalBufferInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memory = %A" x.memory
                    sprintf "mtlBuffer = %A" x.mtlBuffer
                ] |> sprintf "VkExportMetalBufferInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMetalCommandQueueInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public queue : VkQueue
            val mutable public mtlCommandQueue : nativeint

            new(pNext : nativeint, queue : VkQueue, mtlCommandQueue : nativeint) =
                {
                    sType = 1000311003u
                    pNext = pNext
                    queue = queue
                    mtlCommandQueue = mtlCommandQueue
                }

            new(queue : VkQueue, mtlCommandQueue : nativeint) =
                VkExportMetalCommandQueueInfoEXT(Unchecked.defaultof<nativeint>, queue, mtlCommandQueue)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.queue = Unchecked.defaultof<VkQueue> && x.mtlCommandQueue = Unchecked.defaultof<nativeint>

            static member Empty =
                VkExportMetalCommandQueueInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkQueue>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "queue = %A" x.queue
                    sprintf "mtlCommandQueue = %A" x.mtlCommandQueue
                ] |> sprintf "VkExportMetalCommandQueueInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMetalDeviceInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public mtlDevice : nativeint

            new(pNext : nativeint, mtlDevice : nativeint) =
                {
                    sType = 1000311002u
                    pNext = pNext
                    mtlDevice = mtlDevice
                }

            new(mtlDevice : nativeint) =
                VkExportMetalDeviceInfoEXT(Unchecked.defaultof<nativeint>, mtlDevice)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.mtlDevice = Unchecked.defaultof<nativeint>

            static member Empty =
                VkExportMetalDeviceInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "mtlDevice = %A" x.mtlDevice
                ] |> sprintf "VkExportMetalDeviceInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMetalIOSurfaceInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image : VkImage
            val mutable public ioSurface : nativeint

            new(pNext : nativeint, image : VkImage, ioSurface : nativeint) =
                {
                    sType = 1000311008u
                    pNext = pNext
                    image = image
                    ioSurface = ioSurface
                }

            new(image : VkImage, ioSurface : nativeint) =
                VkExportMetalIOSurfaceInfoEXT(Unchecked.defaultof<nativeint>, image, ioSurface)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage> && x.ioSurface = Unchecked.defaultof<nativeint>

            static member Empty =
                VkExportMetalIOSurfaceInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "image = %A" x.image
                    sprintf "ioSurface = %A" x.ioSurface
                ] |> sprintf "VkExportMetalIOSurfaceInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMetalObjectCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public exportObjectType : VkExportMetalObjectTypeFlagsEXT

            new(pNext : nativeint, exportObjectType : VkExportMetalObjectTypeFlagsEXT) =
                {
                    sType = 1000311000u
                    pNext = pNext
                    exportObjectType = exportObjectType
                }

            new(exportObjectType : VkExportMetalObjectTypeFlagsEXT) =
                VkExportMetalObjectCreateInfoEXT(Unchecked.defaultof<nativeint>, exportObjectType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.exportObjectType = Unchecked.defaultof<VkExportMetalObjectTypeFlagsEXT>

            static member Empty =
                VkExportMetalObjectCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExportMetalObjectTypeFlagsEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "exportObjectType = %A" x.exportObjectType
                ] |> sprintf "VkExportMetalObjectCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMetalObjectsInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint

            new(pNext : nativeint) =
                {
                    sType = 1000311001u
                    pNext = pNext
                }

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint>

            static member Empty =
                VkExportMetalObjectsInfoEXT(Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                ] |> sprintf "VkExportMetalObjectsInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMetalSharedEventInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphore : VkSemaphore
            val mutable public event : VkEvent
            val mutable public mtlSharedEvent : nativeint

            new(pNext : nativeint, semaphore : VkSemaphore, event : VkEvent, mtlSharedEvent : nativeint) =
                {
                    sType = 1000311010u
                    pNext = pNext
                    semaphore = semaphore
                    event = event
                    mtlSharedEvent = mtlSharedEvent
                }

            new(semaphore : VkSemaphore, event : VkEvent, mtlSharedEvent : nativeint) =
                VkExportMetalSharedEventInfoEXT(Unchecked.defaultof<nativeint>, semaphore, event, mtlSharedEvent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.event = Unchecked.defaultof<VkEvent> && x.mtlSharedEvent = Unchecked.defaultof<nativeint>

            static member Empty =
                VkExportMetalSharedEventInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<VkEvent>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphore = %A" x.semaphore
                    sprintf "event = %A" x.event
                    sprintf "mtlSharedEvent = %A" x.mtlSharedEvent
                ] |> sprintf "VkExportMetalSharedEventInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMetalTextureInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image : VkImage
            val mutable public imageView : VkImageView
            val mutable public bufferView : VkBufferView
            val mutable public plane : VkImageAspectFlags
            val mutable public mtlTexture : nativeint

            new(pNext : nativeint, image : VkImage, imageView : VkImageView, bufferView : VkBufferView, plane : VkImageAspectFlags, mtlTexture : nativeint) =
                {
                    sType = 1000311006u
                    pNext = pNext
                    image = image
                    imageView = imageView
                    bufferView = bufferView
                    plane = plane
                    mtlTexture = mtlTexture
                }

            new(image : VkImage, imageView : VkImageView, bufferView : VkBufferView, plane : VkImageAspectFlags, mtlTexture : nativeint) =
                VkExportMetalTextureInfoEXT(Unchecked.defaultof<nativeint>, image, imageView, bufferView, plane, mtlTexture)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage> && x.imageView = Unchecked.defaultof<VkImageView> && x.bufferView = Unchecked.defaultof<VkBufferView> && x.plane = Unchecked.defaultof<VkImageAspectFlags> && x.mtlTexture = Unchecked.defaultof<nativeint>

            static member Empty =
                VkExportMetalTextureInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkBufferView>, Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "image = %A" x.image
                    sprintf "imageView = %A" x.imageView
                    sprintf "bufferView = %A" x.bufferView
                    sprintf "plane = %A" x.plane
                    sprintf "mtlTexture = %A" x.mtlTexture
                ] |> sprintf "VkExportMetalTextureInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportMetalBufferInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public mtlBuffer : nativeint

            new(pNext : nativeint, mtlBuffer : nativeint) =
                {
                    sType = 1000311005u
                    pNext = pNext
                    mtlBuffer = mtlBuffer
                }

            new(mtlBuffer : nativeint) =
                VkImportMetalBufferInfoEXT(Unchecked.defaultof<nativeint>, mtlBuffer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.mtlBuffer = Unchecked.defaultof<nativeint>

            static member Empty =
                VkImportMetalBufferInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "mtlBuffer = %A" x.mtlBuffer
                ] |> sprintf "VkImportMetalBufferInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportMetalIOSurfaceInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public ioSurface : nativeint

            new(pNext : nativeint, ioSurface : nativeint) =
                {
                    sType = 1000311009u
                    pNext = pNext
                    ioSurface = ioSurface
                }

            new(ioSurface : nativeint) =
                VkImportMetalIOSurfaceInfoEXT(Unchecked.defaultof<nativeint>, ioSurface)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.ioSurface = Unchecked.defaultof<nativeint>

            static member Empty =
                VkImportMetalIOSurfaceInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "ioSurface = %A" x.ioSurface
                ] |> sprintf "VkImportMetalIOSurfaceInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportMetalSharedEventInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public mtlSharedEvent : nativeint

            new(pNext : nativeint, mtlSharedEvent : nativeint) =
                {
                    sType = 1000311011u
                    pNext = pNext
                    mtlSharedEvent = mtlSharedEvent
                }

            new(mtlSharedEvent : nativeint) =
                VkImportMetalSharedEventInfoEXT(Unchecked.defaultof<nativeint>, mtlSharedEvent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.mtlSharedEvent = Unchecked.defaultof<nativeint>

            static member Empty =
                VkImportMetalSharedEventInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "mtlSharedEvent = %A" x.mtlSharedEvent
                ] |> sprintf "VkImportMetalSharedEventInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportMetalTextureInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public plane : VkImageAspectFlags
            val mutable public mtlTexture : nativeint

            new(pNext : nativeint, plane : VkImageAspectFlags, mtlTexture : nativeint) =
                {
                    sType = 1000311007u
                    pNext = pNext
                    plane = plane
                    mtlTexture = mtlTexture
                }

            new(plane : VkImageAspectFlags, mtlTexture : nativeint) =
                VkImportMetalTextureInfoEXT(Unchecked.defaultof<nativeint>, plane, mtlTexture)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.plane = Unchecked.defaultof<VkImageAspectFlags> && x.mtlTexture = Unchecked.defaultof<nativeint>

            static member Empty =
                VkImportMetalTextureInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageAspectFlags>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "plane = %A" x.plane
                    sprintf "mtlTexture = %A" x.mtlTexture
                ] |> sprintf "VkImportMetalTextureInfoEXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkExportMetalObjectsEXTDel = delegate of VkDevice * nativeptr<VkExportMetalObjectsInfoEXT> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTMetalObjects")
            static let s_vkExportMetalObjectsEXTDel = VkRaw.vkImportInstanceDelegate<VkExportMetalObjectsEXTDel> "vkExportMetalObjectsEXT"
            static do Report.End(3) |> ignore
            static member vkExportMetalObjectsEXT = s_vkExportMetalObjectsEXTDel
        let vkExportMetalObjectsEXT(device : VkDevice, pMetalObjectsInfo : nativeptr<VkExportMetalObjectsInfoEXT>) = Loader<unit>.vkExportMetalObjectsEXT.Invoke(device, pMetalObjectsInfo)

module EXTMetalSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_EXT_metal_surface"
    let Number = 218

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkMetalSurfaceCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkMetalSurfaceCreateFlagsEXT
            val mutable public pLayer : nativeptr<nativeint>

            new(pNext : nativeint, flags : VkMetalSurfaceCreateFlagsEXT, pLayer : nativeptr<nativeint>) =
                {
                    sType = 1000217000u
                    pNext = pNext
                    flags = flags
                    pLayer = pLayer
                }

            new(flags : VkMetalSurfaceCreateFlagsEXT, pLayer : nativeptr<nativeint>) =
                VkMetalSurfaceCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, pLayer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkMetalSurfaceCreateFlagsEXT> && x.pLayer = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkMetalSurfaceCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMetalSurfaceCreateFlagsEXT>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "pLayer = %A" x.pLayer
                ] |> sprintf "VkMetalSurfaceCreateInfoEXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateMetalSurfaceEXTDel = delegate of VkInstance * nativeptr<VkMetalSurfaceCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTMetalSurface")
            static let s_vkCreateMetalSurfaceEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateMetalSurfaceEXTDel> "vkCreateMetalSurfaceEXT"
            static do Report.End(3) |> ignore
            static member vkCreateMetalSurfaceEXT = s_vkCreateMetalSurfaceEXTDel
        let vkCreateMetalSurfaceEXT(instance : VkInstance, pCreateInfo : nativeptr<VkMetalSurfaceCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateMetalSurfaceEXT.Invoke(instance, pCreateInfo, pAllocator, pSurface)

module EXTMultiDraw =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_multi_draw"
    let Number = 393


    [<StructLayout(LayoutKind.Sequential)>]
    type VkMultiDrawIndexedInfoEXT =
        struct
            val mutable public firstIndex : uint32
            val mutable public indexCount : uint32
            val mutable public vertexOffset : int

            new(firstIndex : uint32, indexCount : uint32, vertexOffset : int) =
                {
                    firstIndex = firstIndex
                    indexCount = indexCount
                    vertexOffset = vertexOffset
                }

            member x.IsEmpty =
                x.firstIndex = Unchecked.defaultof<uint32> && x.indexCount = Unchecked.defaultof<uint32> && x.vertexOffset = Unchecked.defaultof<int>

            static member Empty =
                VkMultiDrawIndexedInfoEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<int>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "firstIndex = %A" x.firstIndex
                    sprintf "indexCount = %A" x.indexCount
                    sprintf "vertexOffset = %A" x.vertexOffset
                ] |> sprintf "VkMultiDrawIndexedInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMultiDrawInfoEXT =
        struct
            val mutable public firstVertex : uint32
            val mutable public vertexCount : uint32

            new(firstVertex : uint32, vertexCount : uint32) =
                {
                    firstVertex = firstVertex
                    vertexCount = vertexCount
                }

            member x.IsEmpty =
                x.firstVertex = Unchecked.defaultof<uint32> && x.vertexCount = Unchecked.defaultof<uint32>

            static member Empty =
                VkMultiDrawInfoEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "firstVertex = %A" x.firstVertex
                    sprintf "vertexCount = %A" x.vertexCount
                ] |> sprintf "VkMultiDrawInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMultiDrawFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public multiDraw : VkBool32

            new(pNext : nativeint, multiDraw : VkBool32) =
                {
                    sType = 1000392000u
                    pNext = pNext
                    multiDraw = multiDraw
                }

            new(multiDraw : VkBool32) =
                VkPhysicalDeviceMultiDrawFeaturesEXT(Unchecked.defaultof<nativeint>, multiDraw)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.multiDraw = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMultiDrawFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "multiDraw = %A" x.multiDraw
                ] |> sprintf "VkPhysicalDeviceMultiDrawFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMultiDrawPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxMultiDrawCount : uint32

            new(pNext : nativeint, maxMultiDrawCount : uint32) =
                {
                    sType = 1000392001u
                    pNext = pNext
                    maxMultiDrawCount = maxMultiDrawCount
                }

            new(maxMultiDrawCount : uint32) =
                VkPhysicalDeviceMultiDrawPropertiesEXT(Unchecked.defaultof<nativeint>, maxMultiDrawCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxMultiDrawCount = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceMultiDrawPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxMultiDrawCount = %A" x.maxMultiDrawCount
                ] |> sprintf "VkPhysicalDeviceMultiDrawPropertiesEXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDrawMultiEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkMultiDrawInfoEXT> * uint32 * uint32 * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDrawMultiIndexedEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkMultiDrawIndexedInfoEXT> * uint32 * uint32 * uint32 * nativeptr<int> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTMultiDraw")
            static let s_vkCmdDrawMultiEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMultiEXTDel> "vkCmdDrawMultiEXT"
            static let s_vkCmdDrawMultiIndexedEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMultiIndexedEXTDel> "vkCmdDrawMultiIndexedEXT"
            static do Report.End(3) |> ignore
            static member vkCmdDrawMultiEXT = s_vkCmdDrawMultiEXTDel
            static member vkCmdDrawMultiIndexedEXT = s_vkCmdDrawMultiIndexedEXTDel
        let vkCmdDrawMultiEXT(commandBuffer : VkCommandBuffer, drawCount : uint32, pVertexInfo : nativeptr<VkMultiDrawInfoEXT>, instanceCount : uint32, firstInstance : uint32, stride : uint32) = Loader<unit>.vkCmdDrawMultiEXT.Invoke(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride)
        let vkCmdDrawMultiIndexedEXT(commandBuffer : VkCommandBuffer, drawCount : uint32, pIndexInfo : nativeptr<VkMultiDrawIndexedInfoEXT>, instanceCount : uint32, firstInstance : uint32, stride : uint32, pVertexOffset : nativeptr<int>) = Loader<unit>.vkCmdDrawMultiIndexedEXT.Invoke(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset)

module KHRMaintenance2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_maintenance2"
    let Number = 118


    type VkPointClippingBehaviorKHR = VkPointClippingBehavior
    type VkTessellationDomainOriginKHR = VkTessellationDomainOrigin

    type VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo

    type VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference

    type VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties

    type VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo

    type VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkImageCreateFlags with
              static member inline BlockTexelViewCompatibleBitKhr = unbox<VkImageCreateFlags> 0x00000080
              static member inline ExtendedUsageBitKhr = unbox<VkImageCreateFlags> 0x00000100
         type VkImageLayout with
              static member inline DepthReadOnlyStencilAttachmentOptimalKhr = unbox<VkImageLayout> 1000117000
              static member inline DepthAttachmentStencilReadOnlyOptimalKhr = unbox<VkImageLayout> 1000117001
         type VkPointClippingBehavior with
              static member inline AllClipPlanesKhr = unbox<VkPointClippingBehavior> 0
              static member inline UserClipPlanesOnlyKhr = unbox<VkPointClippingBehavior> 1
         type VkTessellationDomainOrigin with
              static member inline UpperLeftKhr = unbox<VkTessellationDomainOrigin> 0
              static member inline LowerLeftKhr = unbox<VkTessellationDomainOrigin> 1


module KHRMultiview =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_multiview"
    let Number = 54

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures

    type VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties

    type VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkDependencyFlags with
              static member inline ViewLocalBitKhr = unbox<VkDependencyFlags> 0x00000002


module KHRCreateRenderpass2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance2
    open KHRMultiview
    let Name = "VK_KHR_create_renderpass2"
    let Number = 110

    let Required = [ KHRMaintenance2.Name; KHRMultiview.Name ]


    type VkAttachmentDescription2KHR = VkAttachmentDescription2

    type VkAttachmentReference2KHR = VkAttachmentReference2

    type VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2

    type VkSubpassBeginInfoKHR = VkSubpassBeginInfo

    type VkSubpassDependency2KHR = VkSubpassDependency2

    type VkSubpassDescription2KHR = VkSubpassDescription2

    type VkSubpassEndInfoKHR = VkSubpassEndInfo


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateRenderPass2KHRDel = delegate of VkDevice * nativeptr<VkRenderPassCreateInfo2> * nativeptr<VkAllocationCallbacks> * nativeptr<VkRenderPass> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBeginRenderPass2KHRDel = delegate of VkCommandBuffer * nativeptr<VkRenderPassBeginInfo> * nativeptr<VkSubpassBeginInfo> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdNextSubpass2KHRDel = delegate of VkCommandBuffer * nativeptr<VkSubpassBeginInfo> * nativeptr<VkSubpassEndInfo> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdEndRenderPass2KHRDel = delegate of VkCommandBuffer * nativeptr<VkSubpassEndInfo> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRCreateRenderpass2")
            static let s_vkCreateRenderPass2KHRDel = VkRaw.vkImportInstanceDelegate<VkCreateRenderPass2KHRDel> "vkCreateRenderPass2KHR"
            static let s_vkCmdBeginRenderPass2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginRenderPass2KHRDel> "vkCmdBeginRenderPass2KHR"
            static let s_vkCmdNextSubpass2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdNextSubpass2KHRDel> "vkCmdNextSubpass2KHR"
            static let s_vkCmdEndRenderPass2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdEndRenderPass2KHRDel> "vkCmdEndRenderPass2KHR"
            static do Report.End(3) |> ignore
            static member vkCreateRenderPass2KHR = s_vkCreateRenderPass2KHRDel
            static member vkCmdBeginRenderPass2KHR = s_vkCmdBeginRenderPass2KHRDel
            static member vkCmdNextSubpass2KHR = s_vkCmdNextSubpass2KHRDel
            static member vkCmdEndRenderPass2KHR = s_vkCmdEndRenderPass2KHRDel
        let vkCreateRenderPass2KHR(device : VkDevice, pCreateInfo : nativeptr<VkRenderPassCreateInfo2>, pAllocator : nativeptr<VkAllocationCallbacks>, pRenderPass : nativeptr<VkRenderPass>) = Loader<unit>.vkCreateRenderPass2KHR.Invoke(device, pCreateInfo, pAllocator, pRenderPass)
        let vkCmdBeginRenderPass2KHR(commandBuffer : VkCommandBuffer, pRenderPassBegin : nativeptr<VkRenderPassBeginInfo>, pSubpassBeginInfo : nativeptr<VkSubpassBeginInfo>) = Loader<unit>.vkCmdBeginRenderPass2KHR.Invoke(commandBuffer, pRenderPassBegin, pSubpassBeginInfo)
        let vkCmdNextSubpass2KHR(commandBuffer : VkCommandBuffer, pSubpassBeginInfo : nativeptr<VkSubpassBeginInfo>, pSubpassEndInfo : nativeptr<VkSubpassEndInfo>) = Loader<unit>.vkCmdNextSubpass2KHR.Invoke(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo)
        let vkCmdEndRenderPass2KHR(commandBuffer : VkCommandBuffer, pSubpassEndInfo : nativeptr<VkSubpassEndInfo>) = Loader<unit>.vkCmdEndRenderPass2KHR.Invoke(commandBuffer, pSubpassEndInfo)

module KHRDepthStencilResolve =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRCreateRenderpass2
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance2
    open KHRMultiview
    let Name = "VK_KHR_depth_stencil_resolve"
    let Number = 200

    let Required = [ KHRCreateRenderpass2.Name ]


    type VkResolveModeFlagsKHR = VkResolveModeFlags

    type VkPhysicalDeviceDepthStencilResolvePropertiesKHR = VkPhysicalDeviceDepthStencilResolveProperties

    type VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve


    [<AutoOpen>]
    module EnumExtensions =
         type VkResolveModeFlags with
              static member inline NoneKhr = unbox<VkResolveModeFlags> 0
              static member inline SampleZeroBitKhr = unbox<VkResolveModeFlags> 0x00000001
              static member inline AverageBitKhr = unbox<VkResolveModeFlags> 0x00000002
              static member inline MinBitKhr = unbox<VkResolveModeFlags> 0x00000004
              static member inline MaxBitKhr = unbox<VkResolveModeFlags> 0x00000008


module EXTMultisampledRenderToSingleSampled =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRCreateRenderpass2
    open KHRDepthStencilResolve
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance2
    open KHRMultiview
    let Name = "VK_EXT_multisampled_render_to_single_sampled"
    let Number = 377

    let Required = [ KHRCreateRenderpass2.Name; KHRDepthStencilResolve.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkMultisampledRenderToSingleSampledInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public multisampledRenderToSingleSampledEnable : VkBool32
            val mutable public rasterizationSamples : VkSampleCountFlags

            new(pNext : nativeint, multisampledRenderToSingleSampledEnable : VkBool32, rasterizationSamples : VkSampleCountFlags) =
                {
                    sType = 1000376002u
                    pNext = pNext
                    multisampledRenderToSingleSampledEnable = multisampledRenderToSingleSampledEnable
                    rasterizationSamples = rasterizationSamples
                }

            new(multisampledRenderToSingleSampledEnable : VkBool32, rasterizationSamples : VkSampleCountFlags) =
                VkMultisampledRenderToSingleSampledInfoEXT(Unchecked.defaultof<nativeint>, multisampledRenderToSingleSampledEnable, rasterizationSamples)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.multisampledRenderToSingleSampledEnable = Unchecked.defaultof<VkBool32> && x.rasterizationSamples = Unchecked.defaultof<VkSampleCountFlags>

            static member Empty =
                VkMultisampledRenderToSingleSampledInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkSampleCountFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "multisampledRenderToSingleSampledEnable = %A" x.multisampledRenderToSingleSampledEnable
                    sprintf "rasterizationSamples = %A" x.rasterizationSamples
                ] |> sprintf "VkMultisampledRenderToSingleSampledInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public multisampledRenderToSingleSampled : VkBool32

            new(pNext : nativeint, multisampledRenderToSingleSampled : VkBool32) =
                {
                    sType = 1000376000u
                    pNext = pNext
                    multisampledRenderToSingleSampled = multisampledRenderToSingleSampled
                }

            new(multisampledRenderToSingleSampled : VkBool32) =
                VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(Unchecked.defaultof<nativeint>, multisampledRenderToSingleSampled)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.multisampledRenderToSingleSampled = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "multisampledRenderToSingleSampled = %A" x.multisampledRenderToSingleSampled
                ] |> sprintf "VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassResolvePerformanceQueryEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public optimal : VkBool32

            new(pNext : nativeint, optimal : VkBool32) =
                {
                    sType = 1000376001u
                    pNext = pNext
                    optimal = optimal
                }

            new(optimal : VkBool32) =
                VkSubpassResolvePerformanceQueryEXT(Unchecked.defaultof<nativeint>, optimal)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.optimal = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkSubpassResolvePerformanceQueryEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "optimal = %A" x.optimal
                ] |> sprintf "VkSubpassResolvePerformanceQueryEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkImageCreateFlags with
              static member inline MultisampledRenderToSingleSampledBitExt = unbox<VkImageCreateFlags> 0x00040000


module EXTNonSeamlessCubeMap =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_non_seamless_cube_map"
    let Number = 423


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public nonSeamlessCubeMap : VkBool32

            new(pNext : nativeint, nonSeamlessCubeMap : VkBool32) =
                {
                    sType = 1000422000u
                    pNext = pNext
                    nonSeamlessCubeMap = nonSeamlessCubeMap
                }

            new(nonSeamlessCubeMap : VkBool32) =
                VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(Unchecked.defaultof<nativeint>, nonSeamlessCubeMap)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.nonSeamlessCubeMap = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "nonSeamlessCubeMap = %A" x.nonSeamlessCubeMap
                ] |> sprintf "VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkSamplerCreateFlags with
              static member inline NonSeamlessCubeMapBitExt = unbox<VkSamplerCreateFlags> 0x00000004


module EXTPageableDeviceLocalMemory =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTMemoryPriority
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_pageable_device_local_memory"
    let Number = 413

    let Required = [ EXTMemoryPriority.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pageableDeviceLocalMemory : VkBool32

            new(pNext : nativeint, pageableDeviceLocalMemory : VkBool32) =
                {
                    sType = 1000412000u
                    pNext = pNext
                    pageableDeviceLocalMemory = pageableDeviceLocalMemory
                }

            new(pageableDeviceLocalMemory : VkBool32) =
                VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(Unchecked.defaultof<nativeint>, pageableDeviceLocalMemory)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pageableDeviceLocalMemory = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pageableDeviceLocalMemory = %A" x.pageableDeviceLocalMemory
                ] |> sprintf "VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkSetDeviceMemoryPriorityEXTDel = delegate of VkDevice * VkDeviceMemory * float32 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTPageableDeviceLocalMemory")
            static let s_vkSetDeviceMemoryPriorityEXTDel = VkRaw.vkImportInstanceDelegate<VkSetDeviceMemoryPriorityEXTDel> "vkSetDeviceMemoryPriorityEXT"
            static do Report.End(3) |> ignore
            static member vkSetDeviceMemoryPriorityEXT = s_vkSetDeviceMemoryPriorityEXTDel
        let vkSetDeviceMemoryPriorityEXT(device : VkDevice, memory : VkDeviceMemory, priority : float32) = Loader<unit>.vkSetDeviceMemoryPriorityEXT.Invoke(device, memory, priority)

module EXTPciBusInfo =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_pci_bus_info"
    let Number = 213

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePCIBusInfoPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pciDomain : uint32
            val mutable public pciBus : uint32
            val mutable public pciDevice : uint32
            val mutable public pciFunction : uint32

            new(pNext : nativeint, pciDomain : uint32, pciBus : uint32, pciDevice : uint32, pciFunction : uint32) =
                {
                    sType = 1000212000u
                    pNext = pNext
                    pciDomain = pciDomain
                    pciBus = pciBus
                    pciDevice = pciDevice
                    pciFunction = pciFunction
                }

            new(pciDomain : uint32, pciBus : uint32, pciDevice : uint32, pciFunction : uint32) =
                VkPhysicalDevicePCIBusInfoPropertiesEXT(Unchecked.defaultof<nativeint>, pciDomain, pciBus, pciDevice, pciFunction)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pciDomain = Unchecked.defaultof<uint32> && x.pciBus = Unchecked.defaultof<uint32> && x.pciDevice = Unchecked.defaultof<uint32> && x.pciFunction = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDevicePCIBusInfoPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pciDomain = %A" x.pciDomain
                    sprintf "pciBus = %A" x.pciBus
                    sprintf "pciDevice = %A" x.pciDevice
                    sprintf "pciFunction = %A" x.pciFunction
                ] |> sprintf "VkPhysicalDevicePCIBusInfoPropertiesEXT { %s }"
        end



module EXTPhysicalDeviceDrm =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_physical_device_drm"
    let Number = 354

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDrmPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public hasPrimary : VkBool32
            val mutable public hasRender : VkBool32
            val mutable public primaryMajor : int64
            val mutable public primaryMinor : int64
            val mutable public renderMajor : int64
            val mutable public renderMinor : int64

            new(pNext : nativeint, hasPrimary : VkBool32, hasRender : VkBool32, primaryMajor : int64, primaryMinor : int64, renderMajor : int64, renderMinor : int64) =
                {
                    sType = 1000353000u
                    pNext = pNext
                    hasPrimary = hasPrimary
                    hasRender = hasRender
                    primaryMajor = primaryMajor
                    primaryMinor = primaryMinor
                    renderMajor = renderMajor
                    renderMinor = renderMinor
                }

            new(hasPrimary : VkBool32, hasRender : VkBool32, primaryMajor : int64, primaryMinor : int64, renderMajor : int64, renderMinor : int64) =
                VkPhysicalDeviceDrmPropertiesEXT(Unchecked.defaultof<nativeint>, hasPrimary, hasRender, primaryMajor, primaryMinor, renderMajor, renderMinor)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.hasPrimary = Unchecked.defaultof<VkBool32> && x.hasRender = Unchecked.defaultof<VkBool32> && x.primaryMajor = Unchecked.defaultof<int64> && x.primaryMinor = Unchecked.defaultof<int64> && x.renderMajor = Unchecked.defaultof<int64> && x.renderMinor = Unchecked.defaultof<int64>

            static member Empty =
                VkPhysicalDeviceDrmPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<int64>, Unchecked.defaultof<int64>, Unchecked.defaultof<int64>, Unchecked.defaultof<int64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "hasPrimary = %A" x.hasPrimary
                    sprintf "hasRender = %A" x.hasRender
                    sprintf "primaryMajor = %A" x.primaryMajor
                    sprintf "primaryMinor = %A" x.primaryMinor
                    sprintf "renderMajor = %A" x.renderMajor
                    sprintf "renderMinor = %A" x.renderMinor
                ] |> sprintf "VkPhysicalDeviceDrmPropertiesEXT { %s }"
        end



module EXTPipelineCreationCacheControl =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_pipeline_creation_cache_control"
    let Number = 298



    type VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = VkPhysicalDevicePipelineCreationCacheControlFeatures


    [<AutoOpen>]
    module EnumExtensions =
         type VkPipelineCacheCreateFlags with
              static member inline ExternallySynchronizedBitExt = unbox<VkPipelineCacheCreateFlags> 0x00000001
         type VkPipelineCreateFlags with
              static member inline FailOnPipelineCompileRequiredBitExt = unbox<VkPipelineCreateFlags> 0x00000100
              static member inline EarlyReturnOnFailureBitExt = unbox<VkPipelineCreateFlags> 0x00000200
         type VkResult with
              static member inline PipelineCompileRequiredExt = unbox<VkResult> 1000297000
              static member inline ErrorPipelineCompileRequiredExt = unbox<VkResult> 1000297000


module EXTPipelineCreationFeedback =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_pipeline_creation_feedback"
    let Number = 193


    type VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlags

    type VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo

    type VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback



module EXTPipelineProperties =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_pipeline_properties"
    let Number = 373

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePipelinePropertiesFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipelinePropertiesIdentifier : VkBool32

            new(pNext : nativeint, pipelinePropertiesIdentifier : VkBool32) =
                {
                    sType = 1000372001u
                    pNext = pNext
                    pipelinePropertiesIdentifier = pipelinePropertiesIdentifier
                }

            new(pipelinePropertiesIdentifier : VkBool32) =
                VkPhysicalDevicePipelinePropertiesFeaturesEXT(Unchecked.defaultof<nativeint>, pipelinePropertiesIdentifier)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipelinePropertiesIdentifier = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePipelinePropertiesFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipelinePropertiesIdentifier = %A" x.pipelinePropertiesIdentifier
                ] |> sprintf "VkPhysicalDevicePipelinePropertiesFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipeline : VkPipeline

            new(pNext : nativeint, pipeline : VkPipeline) =
                {
                    sType = 1000269001u
                    pNext = pNext
                    pipeline = pipeline
                }

            new(pipeline : VkPipeline) =
                VkPipelineInfoKHR(Unchecked.defaultof<nativeint>, pipeline)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipeline = Unchecked.defaultof<VkPipeline>

            static member Empty =
                VkPipelineInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipeline>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipeline = %A" x.pipeline
                ] |> sprintf "VkPipelineInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelinePropertiesIdentifierEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipelineIdentifier : Guid

            new(pNext : nativeint, pipelineIdentifier : Guid) =
                {
                    sType = 1000372000u
                    pNext = pNext
                    pipelineIdentifier = pipelineIdentifier
                }

            new(pipelineIdentifier : Guid) =
                VkPipelinePropertiesIdentifierEXT(Unchecked.defaultof<nativeint>, pipelineIdentifier)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipelineIdentifier = Unchecked.defaultof<Guid>

            static member Empty =
                VkPipelinePropertiesIdentifierEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Guid>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipelineIdentifier = %A" x.pipelineIdentifier
                ] |> sprintf "VkPipelinePropertiesIdentifierEXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPipelinePropertiesEXTDel = delegate of VkDevice * nativeptr<VkPipelineInfoKHR> * nativeptr<VkBaseOutStructure> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTPipelineProperties")
            static let s_vkGetPipelinePropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkGetPipelinePropertiesEXTDel> "vkGetPipelinePropertiesEXT"
            static do Report.End(3) |> ignore
            static member vkGetPipelinePropertiesEXT = s_vkGetPipelinePropertiesEXTDel
        let vkGetPipelinePropertiesEXT(device : VkDevice, pPipelineInfo : nativeptr<VkPipelineInfoKHR>, pPipelineProperties : nativeptr<VkBaseOutStructure>) = Loader<unit>.vkGetPipelinePropertiesEXT.Invoke(device, pPipelineInfo, pPipelineProperties)

module EXTPipelineRobustness =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_pipeline_robustness"
    let Number = 69

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPipelineRobustnessBufferBehaviorEXT =
        | DeviceDefault = 0
        | Disabled = 1
        | RobustBufferAccess = 2
        | RobustBufferAccess2 = 3

    type VkPipelineRobustnessImageBehaviorEXT =
        | DeviceDefault = 0
        | Disabled = 1
        | RobustImageAccess = 2
        | RobustImageAccess2 = 3


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePipelineRobustnessFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipelineRobustness : VkBool32

            new(pNext : nativeint, pipelineRobustness : VkBool32) =
                {
                    sType = 1000068001u
                    pNext = pNext
                    pipelineRobustness = pipelineRobustness
                }

            new(pipelineRobustness : VkBool32) =
                VkPhysicalDevicePipelineRobustnessFeaturesEXT(Unchecked.defaultof<nativeint>, pipelineRobustness)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipelineRobustness = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePipelineRobustnessFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipelineRobustness = %A" x.pipelineRobustness
                ] |> sprintf "VkPhysicalDevicePipelineRobustnessFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePipelineRobustnessPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public defaultRobustnessStorageBuffers : VkPipelineRobustnessBufferBehaviorEXT
            val mutable public defaultRobustnessUniformBuffers : VkPipelineRobustnessBufferBehaviorEXT
            val mutable public defaultRobustnessVertexInputs : VkPipelineRobustnessBufferBehaviorEXT
            val mutable public defaultRobustnessImages : VkPipelineRobustnessImageBehaviorEXT

            new(pNext : nativeint, defaultRobustnessStorageBuffers : VkPipelineRobustnessBufferBehaviorEXT, defaultRobustnessUniformBuffers : VkPipelineRobustnessBufferBehaviorEXT, defaultRobustnessVertexInputs : VkPipelineRobustnessBufferBehaviorEXT, defaultRobustnessImages : VkPipelineRobustnessImageBehaviorEXT) =
                {
                    sType = 1000068002u
                    pNext = pNext
                    defaultRobustnessStorageBuffers = defaultRobustnessStorageBuffers
                    defaultRobustnessUniformBuffers = defaultRobustnessUniformBuffers
                    defaultRobustnessVertexInputs = defaultRobustnessVertexInputs
                    defaultRobustnessImages = defaultRobustnessImages
                }

            new(defaultRobustnessStorageBuffers : VkPipelineRobustnessBufferBehaviorEXT, defaultRobustnessUniformBuffers : VkPipelineRobustnessBufferBehaviorEXT, defaultRobustnessVertexInputs : VkPipelineRobustnessBufferBehaviorEXT, defaultRobustnessImages : VkPipelineRobustnessImageBehaviorEXT) =
                VkPhysicalDevicePipelineRobustnessPropertiesEXT(Unchecked.defaultof<nativeint>, defaultRobustnessStorageBuffers, defaultRobustnessUniformBuffers, defaultRobustnessVertexInputs, defaultRobustnessImages)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.defaultRobustnessStorageBuffers = Unchecked.defaultof<VkPipelineRobustnessBufferBehaviorEXT> && x.defaultRobustnessUniformBuffers = Unchecked.defaultof<VkPipelineRobustnessBufferBehaviorEXT> && x.defaultRobustnessVertexInputs = Unchecked.defaultof<VkPipelineRobustnessBufferBehaviorEXT> && x.defaultRobustnessImages = Unchecked.defaultof<VkPipelineRobustnessImageBehaviorEXT>

            static member Empty =
                VkPhysicalDevicePipelineRobustnessPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineRobustnessBufferBehaviorEXT>, Unchecked.defaultof<VkPipelineRobustnessBufferBehaviorEXT>, Unchecked.defaultof<VkPipelineRobustnessBufferBehaviorEXT>, Unchecked.defaultof<VkPipelineRobustnessImageBehaviorEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "defaultRobustnessStorageBuffers = %A" x.defaultRobustnessStorageBuffers
                    sprintf "defaultRobustnessUniformBuffers = %A" x.defaultRobustnessUniformBuffers
                    sprintf "defaultRobustnessVertexInputs = %A" x.defaultRobustnessVertexInputs
                    sprintf "defaultRobustnessImages = %A" x.defaultRobustnessImages
                ] |> sprintf "VkPhysicalDevicePipelineRobustnessPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineRobustnessCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public storageBuffers : VkPipelineRobustnessBufferBehaviorEXT
            val mutable public uniformBuffers : VkPipelineRobustnessBufferBehaviorEXT
            val mutable public vertexInputs : VkPipelineRobustnessBufferBehaviorEXT
            val mutable public images : VkPipelineRobustnessImageBehaviorEXT

            new(pNext : nativeint, storageBuffers : VkPipelineRobustnessBufferBehaviorEXT, uniformBuffers : VkPipelineRobustnessBufferBehaviorEXT, vertexInputs : VkPipelineRobustnessBufferBehaviorEXT, images : VkPipelineRobustnessImageBehaviorEXT) =
                {
                    sType = 1000068000u
                    pNext = pNext
                    storageBuffers = storageBuffers
                    uniformBuffers = uniformBuffers
                    vertexInputs = vertexInputs
                    images = images
                }

            new(storageBuffers : VkPipelineRobustnessBufferBehaviorEXT, uniformBuffers : VkPipelineRobustnessBufferBehaviorEXT, vertexInputs : VkPipelineRobustnessBufferBehaviorEXT, images : VkPipelineRobustnessImageBehaviorEXT) =
                VkPipelineRobustnessCreateInfoEXT(Unchecked.defaultof<nativeint>, storageBuffers, uniformBuffers, vertexInputs, images)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.storageBuffers = Unchecked.defaultof<VkPipelineRobustnessBufferBehaviorEXT> && x.uniformBuffers = Unchecked.defaultof<VkPipelineRobustnessBufferBehaviorEXT> && x.vertexInputs = Unchecked.defaultof<VkPipelineRobustnessBufferBehaviorEXT> && x.images = Unchecked.defaultof<VkPipelineRobustnessImageBehaviorEXT>

            static member Empty =
                VkPipelineRobustnessCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineRobustnessBufferBehaviorEXT>, Unchecked.defaultof<VkPipelineRobustnessBufferBehaviorEXT>, Unchecked.defaultof<VkPipelineRobustnessBufferBehaviorEXT>, Unchecked.defaultof<VkPipelineRobustnessImageBehaviorEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "storageBuffers = %A" x.storageBuffers
                    sprintf "uniformBuffers = %A" x.uniformBuffers
                    sprintf "vertexInputs = %A" x.vertexInputs
                    sprintf "images = %A" x.images
                ] |> sprintf "VkPipelineRobustnessCreateInfoEXT { %s }"
        end



module EXTPostDepthCoverage =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_post_depth_coverage"
    let Number = 156


module EXTPrimitiveTopologyListRestart =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_primitive_topology_list_restart"
    let Number = 357


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public primitiveTopologyListRestart : VkBool32
            val mutable public primitiveTopologyPatchListRestart : VkBool32

            new(pNext : nativeint, primitiveTopologyListRestart : VkBool32, primitiveTopologyPatchListRestart : VkBool32) =
                {
                    sType = 1000356000u
                    pNext = pNext
                    primitiveTopologyListRestart = primitiveTopologyListRestart
                    primitiveTopologyPatchListRestart = primitiveTopologyPatchListRestart
                }

            new(primitiveTopologyListRestart : VkBool32, primitiveTopologyPatchListRestart : VkBool32) =
                VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(Unchecked.defaultof<nativeint>, primitiveTopologyListRestart, primitiveTopologyPatchListRestart)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.primitiveTopologyListRestart = Unchecked.defaultof<VkBool32> && x.primitiveTopologyPatchListRestart = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "primitiveTopologyListRestart = %A" x.primitiveTopologyListRestart
                    sprintf "primitiveTopologyPatchListRestart = %A" x.primitiveTopologyPatchListRestart
                ] |> sprintf "VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT { %s }"
        end



module EXTTransformFeedback =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_transform_feedback"
    let Number = 29

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceTransformFeedbackFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public transformFeedback : VkBool32
            val mutable public geometryStreams : VkBool32

            new(pNext : nativeint, transformFeedback : VkBool32, geometryStreams : VkBool32) =
                {
                    sType = 1000028000u
                    pNext = pNext
                    transformFeedback = transformFeedback
                    geometryStreams = geometryStreams
                }

            new(transformFeedback : VkBool32, geometryStreams : VkBool32) =
                VkPhysicalDeviceTransformFeedbackFeaturesEXT(Unchecked.defaultof<nativeint>, transformFeedback, geometryStreams)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.transformFeedback = Unchecked.defaultof<VkBool32> && x.geometryStreams = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceTransformFeedbackFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "transformFeedback = %A" x.transformFeedback
                    sprintf "geometryStreams = %A" x.geometryStreams
                ] |> sprintf "VkPhysicalDeviceTransformFeedbackFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceTransformFeedbackPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxTransformFeedbackStreams : uint32
            val mutable public maxTransformFeedbackBuffers : uint32
            val mutable public maxTransformFeedbackBufferSize : VkDeviceSize
            val mutable public maxTransformFeedbackStreamDataSize : uint32
            val mutable public maxTransformFeedbackBufferDataSize : uint32
            val mutable public maxTransformFeedbackBufferDataStride : uint32
            val mutable public transformFeedbackQueries : VkBool32
            val mutable public transformFeedbackStreamsLinesTriangles : VkBool32
            val mutable public transformFeedbackRasterizationStreamSelect : VkBool32
            val mutable public transformFeedbackDraw : VkBool32

            new(pNext : nativeint, maxTransformFeedbackStreams : uint32, maxTransformFeedbackBuffers : uint32, maxTransformFeedbackBufferSize : VkDeviceSize, maxTransformFeedbackStreamDataSize : uint32, maxTransformFeedbackBufferDataSize : uint32, maxTransformFeedbackBufferDataStride : uint32, transformFeedbackQueries : VkBool32, transformFeedbackStreamsLinesTriangles : VkBool32, transformFeedbackRasterizationStreamSelect : VkBool32, transformFeedbackDraw : VkBool32) =
                {
                    sType = 1000028001u
                    pNext = pNext
                    maxTransformFeedbackStreams = maxTransformFeedbackStreams
                    maxTransformFeedbackBuffers = maxTransformFeedbackBuffers
                    maxTransformFeedbackBufferSize = maxTransformFeedbackBufferSize
                    maxTransformFeedbackStreamDataSize = maxTransformFeedbackStreamDataSize
                    maxTransformFeedbackBufferDataSize = maxTransformFeedbackBufferDataSize
                    maxTransformFeedbackBufferDataStride = maxTransformFeedbackBufferDataStride
                    transformFeedbackQueries = transformFeedbackQueries
                    transformFeedbackStreamsLinesTriangles = transformFeedbackStreamsLinesTriangles
                    transformFeedbackRasterizationStreamSelect = transformFeedbackRasterizationStreamSelect
                    transformFeedbackDraw = transformFeedbackDraw
                }

            new(maxTransformFeedbackStreams : uint32, maxTransformFeedbackBuffers : uint32, maxTransformFeedbackBufferSize : VkDeviceSize, maxTransformFeedbackStreamDataSize : uint32, maxTransformFeedbackBufferDataSize : uint32, maxTransformFeedbackBufferDataStride : uint32, transformFeedbackQueries : VkBool32, transformFeedbackStreamsLinesTriangles : VkBool32, transformFeedbackRasterizationStreamSelect : VkBool32, transformFeedbackDraw : VkBool32) =
                VkPhysicalDeviceTransformFeedbackPropertiesEXT(Unchecked.defaultof<nativeint>, maxTransformFeedbackStreams, maxTransformFeedbackBuffers, maxTransformFeedbackBufferSize, maxTransformFeedbackStreamDataSize, maxTransformFeedbackBufferDataSize, maxTransformFeedbackBufferDataStride, transformFeedbackQueries, transformFeedbackStreamsLinesTriangles, transformFeedbackRasterizationStreamSelect, transformFeedbackDraw)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxTransformFeedbackStreams = Unchecked.defaultof<uint32> && x.maxTransformFeedbackBuffers = Unchecked.defaultof<uint32> && x.maxTransformFeedbackBufferSize = Unchecked.defaultof<VkDeviceSize> && x.maxTransformFeedbackStreamDataSize = Unchecked.defaultof<uint32> && x.maxTransformFeedbackBufferDataSize = Unchecked.defaultof<uint32> && x.maxTransformFeedbackBufferDataStride = Unchecked.defaultof<uint32> && x.transformFeedbackQueries = Unchecked.defaultof<VkBool32> && x.transformFeedbackStreamsLinesTriangles = Unchecked.defaultof<VkBool32> && x.transformFeedbackRasterizationStreamSelect = Unchecked.defaultof<VkBool32> && x.transformFeedbackDraw = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceTransformFeedbackPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxTransformFeedbackStreams = %A" x.maxTransformFeedbackStreams
                    sprintf "maxTransformFeedbackBuffers = %A" x.maxTransformFeedbackBuffers
                    sprintf "maxTransformFeedbackBufferSize = %A" x.maxTransformFeedbackBufferSize
                    sprintf "maxTransformFeedbackStreamDataSize = %A" x.maxTransformFeedbackStreamDataSize
                    sprintf "maxTransformFeedbackBufferDataSize = %A" x.maxTransformFeedbackBufferDataSize
                    sprintf "maxTransformFeedbackBufferDataStride = %A" x.maxTransformFeedbackBufferDataStride
                    sprintf "transformFeedbackQueries = %A" x.transformFeedbackQueries
                    sprintf "transformFeedbackStreamsLinesTriangles = %A" x.transformFeedbackStreamsLinesTriangles
                    sprintf "transformFeedbackRasterizationStreamSelect = %A" x.transformFeedbackRasterizationStreamSelect
                    sprintf "transformFeedbackDraw = %A" x.transformFeedbackDraw
                ] |> sprintf "VkPhysicalDeviceTransformFeedbackPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineRasterizationStateStreamCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPipelineRasterizationStateStreamCreateFlagsEXT
            val mutable public rasterizationStream : uint32

            new(pNext : nativeint, flags : VkPipelineRasterizationStateStreamCreateFlagsEXT, rasterizationStream : uint32) =
                {
                    sType = 1000028002u
                    pNext = pNext
                    flags = flags
                    rasterizationStream = rasterizationStream
                }

            new(flags : VkPipelineRasterizationStateStreamCreateFlagsEXT, rasterizationStream : uint32) =
                VkPipelineRasterizationStateStreamCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, rasterizationStream)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineRasterizationStateStreamCreateFlagsEXT> && x.rasterizationStream = Unchecked.defaultof<uint32>

            static member Empty =
                VkPipelineRasterizationStateStreamCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineRasterizationStateStreamCreateFlagsEXT>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "rasterizationStream = %A" x.rasterizationStream
                ] |> sprintf "VkPipelineRasterizationStateStreamCreateInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags with
              static member inline TransformFeedbackWriteBitExt = unbox<VkAccessFlags> 0x02000000
              static member inline TransformFeedbackCounterReadBitExt = unbox<VkAccessFlags> 0x04000000
              static member inline TransformFeedbackCounterWriteBitExt = unbox<VkAccessFlags> 0x08000000
         type VkBufferUsageFlags with
              static member inline TransformFeedbackBufferBitExt = unbox<VkBufferUsageFlags> 0x00000800
              static member inline TransformFeedbackCounterBufferBitExt = unbox<VkBufferUsageFlags> 0x00001000
         type VkPipelineStageFlags with
              static member inline TransformFeedbackBitExt = unbox<VkPipelineStageFlags> 0x01000000
         type VkQueryType with
              static member inline TransformFeedbackStreamExt = unbox<VkQueryType> 1000028004

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBindTransformFeedbackBuffersEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkBuffer> * nativeptr<VkDeviceSize> * nativeptr<VkDeviceSize> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBeginTransformFeedbackEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkBuffer> * nativeptr<VkDeviceSize> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdEndTransformFeedbackEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkBuffer> * nativeptr<VkDeviceSize> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBeginQueryIndexedEXTDel = delegate of VkCommandBuffer * VkQueryPool * uint32 * VkQueryControlFlags * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdEndQueryIndexedEXTDel = delegate of VkCommandBuffer * VkQueryPool * uint32 * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDrawIndirectByteCountEXTDel = delegate of VkCommandBuffer * uint32 * uint32 * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTTransformFeedback")
            static let s_vkCmdBindTransformFeedbackBuffersEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBindTransformFeedbackBuffersEXTDel> "vkCmdBindTransformFeedbackBuffersEXT"
            static let s_vkCmdBeginTransformFeedbackEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginTransformFeedbackEXTDel> "vkCmdBeginTransformFeedbackEXT"
            static let s_vkCmdEndTransformFeedbackEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdEndTransformFeedbackEXTDel> "vkCmdEndTransformFeedbackEXT"
            static let s_vkCmdBeginQueryIndexedEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginQueryIndexedEXTDel> "vkCmdBeginQueryIndexedEXT"
            static let s_vkCmdEndQueryIndexedEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdEndQueryIndexedEXTDel> "vkCmdEndQueryIndexedEXT"
            static let s_vkCmdDrawIndirectByteCountEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawIndirectByteCountEXTDel> "vkCmdDrawIndirectByteCountEXT"
            static do Report.End(3) |> ignore
            static member vkCmdBindTransformFeedbackBuffersEXT = s_vkCmdBindTransformFeedbackBuffersEXTDel
            static member vkCmdBeginTransformFeedbackEXT = s_vkCmdBeginTransformFeedbackEXTDel
            static member vkCmdEndTransformFeedbackEXT = s_vkCmdEndTransformFeedbackEXTDel
            static member vkCmdBeginQueryIndexedEXT = s_vkCmdBeginQueryIndexedEXTDel
            static member vkCmdEndQueryIndexedEXT = s_vkCmdEndQueryIndexedEXTDel
            static member vkCmdDrawIndirectByteCountEXT = s_vkCmdDrawIndirectByteCountEXTDel
        let vkCmdBindTransformFeedbackBuffersEXT(commandBuffer : VkCommandBuffer, firstBinding : uint32, bindingCount : uint32, pBuffers : nativeptr<VkBuffer>, pOffsets : nativeptr<VkDeviceSize>, pSizes : nativeptr<VkDeviceSize>) = Loader<unit>.vkCmdBindTransformFeedbackBuffersEXT.Invoke(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes)
        let vkCmdBeginTransformFeedbackEXT(commandBuffer : VkCommandBuffer, firstCounterBuffer : uint32, counterBufferCount : uint32, pCounterBuffers : nativeptr<VkBuffer>, pCounterBufferOffsets : nativeptr<VkDeviceSize>) = Loader<unit>.vkCmdBeginTransformFeedbackEXT.Invoke(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets)
        let vkCmdEndTransformFeedbackEXT(commandBuffer : VkCommandBuffer, firstCounterBuffer : uint32, counterBufferCount : uint32, pCounterBuffers : nativeptr<VkBuffer>, pCounterBufferOffsets : nativeptr<VkDeviceSize>) = Loader<unit>.vkCmdEndTransformFeedbackEXT.Invoke(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets)
        let vkCmdBeginQueryIndexedEXT(commandBuffer : VkCommandBuffer, queryPool : VkQueryPool, query : uint32, flags : VkQueryControlFlags, index : uint32) = Loader<unit>.vkCmdBeginQueryIndexedEXT.Invoke(commandBuffer, queryPool, query, flags, index)
        let vkCmdEndQueryIndexedEXT(commandBuffer : VkCommandBuffer, queryPool : VkQueryPool, query : uint32, index : uint32) = Loader<unit>.vkCmdEndQueryIndexedEXT.Invoke(commandBuffer, queryPool, query, index)
        let vkCmdDrawIndirectByteCountEXT(commandBuffer : VkCommandBuffer, instanceCount : uint32, firstInstance : uint32, counterBuffer : VkBuffer, counterBufferOffset : VkDeviceSize, counterOffset : uint32, vertexStride : uint32) = Loader<unit>.vkCmdDrawIndirectByteCountEXT.Invoke(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride)

module EXTPrimitivesGeneratedQuery =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTTransformFeedback
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_primitives_generated_query"
    let Number = 383

    let Required = [ EXTTransformFeedback.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public primitivesGeneratedQuery : VkBool32
            val mutable public primitivesGeneratedQueryWithRasterizerDiscard : VkBool32
            val mutable public primitivesGeneratedQueryWithNonZeroStreams : VkBool32

            new(pNext : nativeint, primitivesGeneratedQuery : VkBool32, primitivesGeneratedQueryWithRasterizerDiscard : VkBool32, primitivesGeneratedQueryWithNonZeroStreams : VkBool32) =
                {
                    sType = 1000382000u
                    pNext = pNext
                    primitivesGeneratedQuery = primitivesGeneratedQuery
                    primitivesGeneratedQueryWithRasterizerDiscard = primitivesGeneratedQueryWithRasterizerDiscard
                    primitivesGeneratedQueryWithNonZeroStreams = primitivesGeneratedQueryWithNonZeroStreams
                }

            new(primitivesGeneratedQuery : VkBool32, primitivesGeneratedQueryWithRasterizerDiscard : VkBool32, primitivesGeneratedQueryWithNonZeroStreams : VkBool32) =
                VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(Unchecked.defaultof<nativeint>, primitivesGeneratedQuery, primitivesGeneratedQueryWithRasterizerDiscard, primitivesGeneratedQueryWithNonZeroStreams)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.primitivesGeneratedQuery = Unchecked.defaultof<VkBool32> && x.primitivesGeneratedQueryWithRasterizerDiscard = Unchecked.defaultof<VkBool32> && x.primitivesGeneratedQueryWithNonZeroStreams = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "primitivesGeneratedQuery = %A" x.primitivesGeneratedQuery
                    sprintf "primitivesGeneratedQueryWithRasterizerDiscard = %A" x.primitivesGeneratedQueryWithRasterizerDiscard
                    sprintf "primitivesGeneratedQueryWithNonZeroStreams = %A" x.primitivesGeneratedQueryWithNonZeroStreams
                ] |> sprintf "VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkQueryType with
              static member inline PrimitivesGeneratedExt = unbox<VkQueryType> 1000382000


module EXTPrivateData =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_private_data"
    let Number = 296


    type VkPrivateDataSlotEXT = VkPrivateDataSlot
    type VkPrivateDataSlotCreateFlagsEXT = VkPrivateDataSlotCreateFlags

    type VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo

    type VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures

    type VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkObjectType with
              static member inline PrivateDataSlotExt = unbox<VkObjectType> 1000295000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreatePrivateDataSlotEXTDel = delegate of VkDevice * nativeptr<VkPrivateDataSlotCreateInfo> * nativeptr<VkAllocationCallbacks> * nativeptr<VkPrivateDataSlot> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyPrivateDataSlotEXTDel = delegate of VkDevice * VkPrivateDataSlot * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkSetPrivateDataEXTDel = delegate of VkDevice * VkObjectType * uint64 * VkPrivateDataSlot * uint64 -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPrivateDataEXTDel = delegate of VkDevice * VkObjectType * uint64 * VkPrivateDataSlot * nativeptr<uint64> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTPrivateData")
            static let s_vkCreatePrivateDataSlotEXTDel = VkRaw.vkImportInstanceDelegate<VkCreatePrivateDataSlotEXTDel> "vkCreatePrivateDataSlotEXT"
            static let s_vkDestroyPrivateDataSlotEXTDel = VkRaw.vkImportInstanceDelegate<VkDestroyPrivateDataSlotEXTDel> "vkDestroyPrivateDataSlotEXT"
            static let s_vkSetPrivateDataEXTDel = VkRaw.vkImportInstanceDelegate<VkSetPrivateDataEXTDel> "vkSetPrivateDataEXT"
            static let s_vkGetPrivateDataEXTDel = VkRaw.vkImportInstanceDelegate<VkGetPrivateDataEXTDel> "vkGetPrivateDataEXT"
            static do Report.End(3) |> ignore
            static member vkCreatePrivateDataSlotEXT = s_vkCreatePrivateDataSlotEXTDel
            static member vkDestroyPrivateDataSlotEXT = s_vkDestroyPrivateDataSlotEXTDel
            static member vkSetPrivateDataEXT = s_vkSetPrivateDataEXTDel
            static member vkGetPrivateDataEXT = s_vkGetPrivateDataEXTDel
        let vkCreatePrivateDataSlotEXT(device : VkDevice, pCreateInfo : nativeptr<VkPrivateDataSlotCreateInfo>, pAllocator : nativeptr<VkAllocationCallbacks>, pPrivateDataSlot : nativeptr<VkPrivateDataSlot>) = Loader<unit>.vkCreatePrivateDataSlotEXT.Invoke(device, pCreateInfo, pAllocator, pPrivateDataSlot)
        let vkDestroyPrivateDataSlotEXT(device : VkDevice, privateDataSlot : VkPrivateDataSlot, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyPrivateDataSlotEXT.Invoke(device, privateDataSlot, pAllocator)
        let vkSetPrivateDataEXT(device : VkDevice, objectType : VkObjectType, objectHandle : uint64, privateDataSlot : VkPrivateDataSlot, data : uint64) = Loader<unit>.vkSetPrivateDataEXT.Invoke(device, objectType, objectHandle, privateDataSlot, data)
        let vkGetPrivateDataEXT(device : VkDevice, objectType : VkObjectType, objectHandle : uint64, privateDataSlot : VkPrivateDataSlot, pData : nativeptr<uint64>) = Loader<unit>.vkGetPrivateDataEXT.Invoke(device, objectType, objectHandle, privateDataSlot, pData)

module EXTProvokingVertex =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_provoking_vertex"
    let Number = 255

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkProvokingVertexModeEXT =
        | FirstVertex = 0
        | LastVertex = 1


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceProvokingVertexFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public provokingVertexLast : VkBool32
            val mutable public transformFeedbackPreservesProvokingVertex : VkBool32

            new(pNext : nativeint, provokingVertexLast : VkBool32, transformFeedbackPreservesProvokingVertex : VkBool32) =
                {
                    sType = 1000254000u
                    pNext = pNext
                    provokingVertexLast = provokingVertexLast
                    transformFeedbackPreservesProvokingVertex = transformFeedbackPreservesProvokingVertex
                }

            new(provokingVertexLast : VkBool32, transformFeedbackPreservesProvokingVertex : VkBool32) =
                VkPhysicalDeviceProvokingVertexFeaturesEXT(Unchecked.defaultof<nativeint>, provokingVertexLast, transformFeedbackPreservesProvokingVertex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.provokingVertexLast = Unchecked.defaultof<VkBool32> && x.transformFeedbackPreservesProvokingVertex = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceProvokingVertexFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "provokingVertexLast = %A" x.provokingVertexLast
                    sprintf "transformFeedbackPreservesProvokingVertex = %A" x.transformFeedbackPreservesProvokingVertex
                ] |> sprintf "VkPhysicalDeviceProvokingVertexFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceProvokingVertexPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public provokingVertexModePerPipeline : VkBool32
            val mutable public transformFeedbackPreservesTriangleFanProvokingVertex : VkBool32

            new(pNext : nativeint, provokingVertexModePerPipeline : VkBool32, transformFeedbackPreservesTriangleFanProvokingVertex : VkBool32) =
                {
                    sType = 1000254002u
                    pNext = pNext
                    provokingVertexModePerPipeline = provokingVertexModePerPipeline
                    transformFeedbackPreservesTriangleFanProvokingVertex = transformFeedbackPreservesTriangleFanProvokingVertex
                }

            new(provokingVertexModePerPipeline : VkBool32, transformFeedbackPreservesTriangleFanProvokingVertex : VkBool32) =
                VkPhysicalDeviceProvokingVertexPropertiesEXT(Unchecked.defaultof<nativeint>, provokingVertexModePerPipeline, transformFeedbackPreservesTriangleFanProvokingVertex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.provokingVertexModePerPipeline = Unchecked.defaultof<VkBool32> && x.transformFeedbackPreservesTriangleFanProvokingVertex = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceProvokingVertexPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "provokingVertexModePerPipeline = %A" x.provokingVertexModePerPipeline
                    sprintf "transformFeedbackPreservesTriangleFanProvokingVertex = %A" x.transformFeedbackPreservesTriangleFanProvokingVertex
                ] |> sprintf "VkPhysicalDeviceProvokingVertexPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineRasterizationProvokingVertexStateCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public provokingVertexMode : VkProvokingVertexModeEXT

            new(pNext : nativeint, provokingVertexMode : VkProvokingVertexModeEXT) =
                {
                    sType = 1000254001u
                    pNext = pNext
                    provokingVertexMode = provokingVertexMode
                }

            new(provokingVertexMode : VkProvokingVertexModeEXT) =
                VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(Unchecked.defaultof<nativeint>, provokingVertexMode)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.provokingVertexMode = Unchecked.defaultof<VkProvokingVertexModeEXT>

            static member Empty =
                VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkProvokingVertexModeEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "provokingVertexMode = %A" x.provokingVertexMode
                ] |> sprintf "VkPipelineRasterizationProvokingVertexStateCreateInfoEXT { %s }"
        end



module EXTRgba10x6Formats =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open KHRBindMemory2
    open KHRGetMemoryRequirements2
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance1
    open KHRSamplerYcbcrConversion
    let Name = "VK_EXT_rgba10x6_formats"
    let Number = 345

    let Required = [ KHRSamplerYcbcrConversion.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public formatRgba10x6WithoutYCbCrSampler : VkBool32

            new(pNext : nativeint, formatRgba10x6WithoutYCbCrSampler : VkBool32) =
                {
                    sType = 1000344000u
                    pNext = pNext
                    formatRgba10x6WithoutYCbCrSampler = formatRgba10x6WithoutYCbCrSampler
                }

            new(formatRgba10x6WithoutYCbCrSampler : VkBool32) =
                VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(Unchecked.defaultof<nativeint>, formatRgba10x6WithoutYCbCrSampler)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.formatRgba10x6WithoutYCbCrSampler = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "formatRgba10x6WithoutYCbCrSampler = %A" x.formatRgba10x6WithoutYCbCrSampler
                ] |> sprintf "VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT { %s }"
        end



module EXTRobustness2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_robustness2"
    let Number = 287


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceRobustness2FeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public robustBufferAccess2 : VkBool32
            val mutable public robustImageAccess2 : VkBool32
            val mutable public nullDescriptor : VkBool32

            new(pNext : nativeint, robustBufferAccess2 : VkBool32, robustImageAccess2 : VkBool32, nullDescriptor : VkBool32) =
                {
                    sType = 1000286000u
                    pNext = pNext
                    robustBufferAccess2 = robustBufferAccess2
                    robustImageAccess2 = robustImageAccess2
                    nullDescriptor = nullDescriptor
                }

            new(robustBufferAccess2 : VkBool32, robustImageAccess2 : VkBool32, nullDescriptor : VkBool32) =
                VkPhysicalDeviceRobustness2FeaturesEXT(Unchecked.defaultof<nativeint>, robustBufferAccess2, robustImageAccess2, nullDescriptor)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.robustBufferAccess2 = Unchecked.defaultof<VkBool32> && x.robustImageAccess2 = Unchecked.defaultof<VkBool32> && x.nullDescriptor = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceRobustness2FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "robustBufferAccess2 = %A" x.robustBufferAccess2
                    sprintf "robustImageAccess2 = %A" x.robustImageAccess2
                    sprintf "nullDescriptor = %A" x.nullDescriptor
                ] |> sprintf "VkPhysicalDeviceRobustness2FeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceRobustness2PropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public robustStorageBufferAccessSizeAlignment : VkDeviceSize
            val mutable public robustUniformBufferAccessSizeAlignment : VkDeviceSize

            new(pNext : nativeint, robustStorageBufferAccessSizeAlignment : VkDeviceSize, robustUniformBufferAccessSizeAlignment : VkDeviceSize) =
                {
                    sType = 1000286001u
                    pNext = pNext
                    robustStorageBufferAccessSizeAlignment = robustStorageBufferAccessSizeAlignment
                    robustUniformBufferAccessSizeAlignment = robustUniformBufferAccessSizeAlignment
                }

            new(robustStorageBufferAccessSizeAlignment : VkDeviceSize, robustUniformBufferAccessSizeAlignment : VkDeviceSize) =
                VkPhysicalDeviceRobustness2PropertiesEXT(Unchecked.defaultof<nativeint>, robustStorageBufferAccessSizeAlignment, robustUniformBufferAccessSizeAlignment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.robustStorageBufferAccessSizeAlignment = Unchecked.defaultof<VkDeviceSize> && x.robustUniformBufferAccessSizeAlignment = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkPhysicalDeviceRobustness2PropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "robustStorageBufferAccessSizeAlignment = %A" x.robustStorageBufferAccessSizeAlignment
                    sprintf "robustUniformBufferAccessSizeAlignment = %A" x.robustUniformBufferAccessSizeAlignment
                ] |> sprintf "VkPhysicalDeviceRobustness2PropertiesEXT { %s }"
        end



module EXTSampleLocations =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_sample_locations"
    let Number = 144

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkSampleLocationEXT =
        struct
            val mutable public x : float32
            val mutable public y : float32

            new(x : float32, y : float32) =
                {
                    x = x
                    y = y
                }

            member x.IsEmpty =
                x.x = Unchecked.defaultof<float32> && x.y = Unchecked.defaultof<float32>

            static member Empty =
                VkSampleLocationEXT(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "x = %A" x.x
                    sprintf "y = %A" x.y
                ] |> sprintf "VkSampleLocationEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSampleLocationsInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public sampleLocationsPerPixel : VkSampleCountFlags
            val mutable public sampleLocationGridSize : VkExtent2D
            val mutable public sampleLocationsCount : uint32
            val mutable public pSampleLocations : nativeptr<VkSampleLocationEXT>

            new(pNext : nativeint, sampleLocationsPerPixel : VkSampleCountFlags, sampleLocationGridSize : VkExtent2D, sampleLocationsCount : uint32, pSampleLocations : nativeptr<VkSampleLocationEXT>) =
                {
                    sType = 1000143000u
                    pNext = pNext
                    sampleLocationsPerPixel = sampleLocationsPerPixel
                    sampleLocationGridSize = sampleLocationGridSize
                    sampleLocationsCount = sampleLocationsCount
                    pSampleLocations = pSampleLocations
                }

            new(sampleLocationsPerPixel : VkSampleCountFlags, sampleLocationGridSize : VkExtent2D, sampleLocationsCount : uint32, pSampleLocations : nativeptr<VkSampleLocationEXT>) =
                VkSampleLocationsInfoEXT(Unchecked.defaultof<nativeint>, sampleLocationsPerPixel, sampleLocationGridSize, sampleLocationsCount, pSampleLocations)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.sampleLocationsPerPixel = Unchecked.defaultof<VkSampleCountFlags> && x.sampleLocationGridSize = Unchecked.defaultof<VkExtent2D> && x.sampleLocationsCount = Unchecked.defaultof<uint32> && x.pSampleLocations = Unchecked.defaultof<nativeptr<VkSampleLocationEXT>>

            static member Empty =
                VkSampleLocationsInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSampleLocationEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "sampleLocationsPerPixel = %A" x.sampleLocationsPerPixel
                    sprintf "sampleLocationGridSize = %A" x.sampleLocationGridSize
                    sprintf "sampleLocationsCount = %A" x.sampleLocationsCount
                    sprintf "pSampleLocations = %A" x.pSampleLocations
                ] |> sprintf "VkSampleLocationsInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAttachmentSampleLocationsEXT =
        struct
            val mutable public attachmentIndex : uint32
            val mutable public sampleLocationsInfo : VkSampleLocationsInfoEXT

            new(attachmentIndex : uint32, sampleLocationsInfo : VkSampleLocationsInfoEXT) =
                {
                    attachmentIndex = attachmentIndex
                    sampleLocationsInfo = sampleLocationsInfo
                }

            member x.IsEmpty =
                x.attachmentIndex = Unchecked.defaultof<uint32> && x.sampleLocationsInfo = Unchecked.defaultof<VkSampleLocationsInfoEXT>

            static member Empty =
                VkAttachmentSampleLocationsEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleLocationsInfoEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "attachmentIndex = %A" x.attachmentIndex
                    sprintf "sampleLocationsInfo = %A" x.sampleLocationsInfo
                ] |> sprintf "VkAttachmentSampleLocationsEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMultisamplePropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxSampleLocationGridSize : VkExtent2D

            new(pNext : nativeint, maxSampleLocationGridSize : VkExtent2D) =
                {
                    sType = 1000143004u
                    pNext = pNext
                    maxSampleLocationGridSize = maxSampleLocationGridSize
                }

            new(maxSampleLocationGridSize : VkExtent2D) =
                VkMultisamplePropertiesEXT(Unchecked.defaultof<nativeint>, maxSampleLocationGridSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxSampleLocationGridSize = Unchecked.defaultof<VkExtent2D>

            static member Empty =
                VkMultisamplePropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxSampleLocationGridSize = %A" x.maxSampleLocationGridSize
                ] |> sprintf "VkMultisamplePropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSampleLocationsPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public sampleLocationSampleCounts : VkSampleCountFlags
            val mutable public maxSampleLocationGridSize : VkExtent2D
            val mutable public sampleLocationCoordinateRange : V2f
            val mutable public sampleLocationSubPixelBits : uint32
            val mutable public variableSampleLocations : VkBool32

            new(pNext : nativeint, sampleLocationSampleCounts : VkSampleCountFlags, maxSampleLocationGridSize : VkExtent2D, sampleLocationCoordinateRange : V2f, sampleLocationSubPixelBits : uint32, variableSampleLocations : VkBool32) =
                {
                    sType = 1000143003u
                    pNext = pNext
                    sampleLocationSampleCounts = sampleLocationSampleCounts
                    maxSampleLocationGridSize = maxSampleLocationGridSize
                    sampleLocationCoordinateRange = sampleLocationCoordinateRange
                    sampleLocationSubPixelBits = sampleLocationSubPixelBits
                    variableSampleLocations = variableSampleLocations
                }

            new(sampleLocationSampleCounts : VkSampleCountFlags, maxSampleLocationGridSize : VkExtent2D, sampleLocationCoordinateRange : V2f, sampleLocationSubPixelBits : uint32, variableSampleLocations : VkBool32) =
                VkPhysicalDeviceSampleLocationsPropertiesEXT(Unchecked.defaultof<nativeint>, sampleLocationSampleCounts, maxSampleLocationGridSize, sampleLocationCoordinateRange, sampleLocationSubPixelBits, variableSampleLocations)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.sampleLocationSampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.maxSampleLocationGridSize = Unchecked.defaultof<VkExtent2D> && x.sampleLocationCoordinateRange = Unchecked.defaultof<V2f> && x.sampleLocationSubPixelBits = Unchecked.defaultof<uint32> && x.variableSampleLocations = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSampleLocationsPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<V2f>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "sampleLocationSampleCounts = %A" x.sampleLocationSampleCounts
                    sprintf "maxSampleLocationGridSize = %A" x.maxSampleLocationGridSize
                    sprintf "sampleLocationCoordinateRange = %A" x.sampleLocationCoordinateRange
                    sprintf "sampleLocationSubPixelBits = %A" x.sampleLocationSubPixelBits
                    sprintf "variableSampleLocations = %A" x.variableSampleLocations
                ] |> sprintf "VkPhysicalDeviceSampleLocationsPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineSampleLocationsStateCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public sampleLocationsEnable : VkBool32
            val mutable public sampleLocationsInfo : VkSampleLocationsInfoEXT

            new(pNext : nativeint, sampleLocationsEnable : VkBool32, sampleLocationsInfo : VkSampleLocationsInfoEXT) =
                {
                    sType = 1000143002u
                    pNext = pNext
                    sampleLocationsEnable = sampleLocationsEnable
                    sampleLocationsInfo = sampleLocationsInfo
                }

            new(sampleLocationsEnable : VkBool32, sampleLocationsInfo : VkSampleLocationsInfoEXT) =
                VkPipelineSampleLocationsStateCreateInfoEXT(Unchecked.defaultof<nativeint>, sampleLocationsEnable, sampleLocationsInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.sampleLocationsEnable = Unchecked.defaultof<VkBool32> && x.sampleLocationsInfo = Unchecked.defaultof<VkSampleLocationsInfoEXT>

            static member Empty =
                VkPipelineSampleLocationsStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkSampleLocationsInfoEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "sampleLocationsEnable = %A" x.sampleLocationsEnable
                    sprintf "sampleLocationsInfo = %A" x.sampleLocationsInfo
                ] |> sprintf "VkPipelineSampleLocationsStateCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassSampleLocationsEXT =
        struct
            val mutable public subpassIndex : uint32
            val mutable public sampleLocationsInfo : VkSampleLocationsInfoEXT

            new(subpassIndex : uint32, sampleLocationsInfo : VkSampleLocationsInfoEXT) =
                {
                    subpassIndex = subpassIndex
                    sampleLocationsInfo = sampleLocationsInfo
                }

            member x.IsEmpty =
                x.subpassIndex = Unchecked.defaultof<uint32> && x.sampleLocationsInfo = Unchecked.defaultof<VkSampleLocationsInfoEXT>

            static member Empty =
                VkSubpassSampleLocationsEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleLocationsInfoEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "subpassIndex = %A" x.subpassIndex
                    sprintf "sampleLocationsInfo = %A" x.sampleLocationsInfo
                ] |> sprintf "VkSubpassSampleLocationsEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassSampleLocationsBeginInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public attachmentInitialSampleLocationsCount : uint32
            val mutable public pAttachmentInitialSampleLocations : nativeptr<VkAttachmentSampleLocationsEXT>
            val mutable public postSubpassSampleLocationsCount : uint32
            val mutable public pPostSubpassSampleLocations : nativeptr<VkSubpassSampleLocationsEXT>

            new(pNext : nativeint, attachmentInitialSampleLocationsCount : uint32, pAttachmentInitialSampleLocations : nativeptr<VkAttachmentSampleLocationsEXT>, postSubpassSampleLocationsCount : uint32, pPostSubpassSampleLocations : nativeptr<VkSubpassSampleLocationsEXT>) =
                {
                    sType = 1000143001u
                    pNext = pNext
                    attachmentInitialSampleLocationsCount = attachmentInitialSampleLocationsCount
                    pAttachmentInitialSampleLocations = pAttachmentInitialSampleLocations
                    postSubpassSampleLocationsCount = postSubpassSampleLocationsCount
                    pPostSubpassSampleLocations = pPostSubpassSampleLocations
                }

            new(attachmentInitialSampleLocationsCount : uint32, pAttachmentInitialSampleLocations : nativeptr<VkAttachmentSampleLocationsEXT>, postSubpassSampleLocationsCount : uint32, pPostSubpassSampleLocations : nativeptr<VkSubpassSampleLocationsEXT>) =
                VkRenderPassSampleLocationsBeginInfoEXT(Unchecked.defaultof<nativeint>, attachmentInitialSampleLocationsCount, pAttachmentInitialSampleLocations, postSubpassSampleLocationsCount, pPostSubpassSampleLocations)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.attachmentInitialSampleLocationsCount = Unchecked.defaultof<uint32> && x.pAttachmentInitialSampleLocations = Unchecked.defaultof<nativeptr<VkAttachmentSampleLocationsEXT>> && x.postSubpassSampleLocationsCount = Unchecked.defaultof<uint32> && x.pPostSubpassSampleLocations = Unchecked.defaultof<nativeptr<VkSubpassSampleLocationsEXT>>

            static member Empty =
                VkRenderPassSampleLocationsBeginInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAttachmentSampleLocationsEXT>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSubpassSampleLocationsEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "attachmentInitialSampleLocationsCount = %A" x.attachmentInitialSampleLocationsCount
                    sprintf "pAttachmentInitialSampleLocations = %A" x.pAttachmentInitialSampleLocations
                    sprintf "postSubpassSampleLocationsCount = %A" x.postSubpassSampleLocationsCount
                    sprintf "pPostSubpassSampleLocations = %A" x.pPostSubpassSampleLocations
                ] |> sprintf "VkRenderPassSampleLocationsBeginInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkDynamicState with
              static member inline SampleLocationsExt = unbox<VkDynamicState> 1000143000
         type VkImageCreateFlags with
              static member inline SampleLocationsCompatibleDepthBitExt = unbox<VkImageCreateFlags> 0x00001000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetSampleLocationsEXTDel = delegate of VkCommandBuffer * nativeptr<VkSampleLocationsInfoEXT> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceMultisamplePropertiesEXTDel = delegate of VkPhysicalDevice * VkSampleCountFlags * nativeptr<VkMultisamplePropertiesEXT> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTSampleLocations")
            static let s_vkCmdSetSampleLocationsEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetSampleLocationsEXTDel> "vkCmdSetSampleLocationsEXT"
            static let s_vkGetPhysicalDeviceMultisamplePropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceMultisamplePropertiesEXTDel> "vkGetPhysicalDeviceMultisamplePropertiesEXT"
            static do Report.End(3) |> ignore
            static member vkCmdSetSampleLocationsEXT = s_vkCmdSetSampleLocationsEXTDel
            static member vkGetPhysicalDeviceMultisamplePropertiesEXT = s_vkGetPhysicalDeviceMultisamplePropertiesEXTDel
        let vkCmdSetSampleLocationsEXT(commandBuffer : VkCommandBuffer, pSampleLocationsInfo : nativeptr<VkSampleLocationsInfoEXT>) = Loader<unit>.vkCmdSetSampleLocationsEXT.Invoke(commandBuffer, pSampleLocationsInfo)
        let vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice : VkPhysicalDevice, samples : VkSampleCountFlags, pMultisampleProperties : nativeptr<VkMultisamplePropertiesEXT>) = Loader<unit>.vkGetPhysicalDeviceMultisamplePropertiesEXT.Invoke(physicalDevice, samples, pMultisampleProperties)

module EXTSamplerFilterMinmax =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_sampler_filter_minmax"
    let Number = 131

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkSamplerReductionModeEXT = VkSamplerReductionMode

    type VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = VkPhysicalDeviceSamplerFilterMinmaxProperties

    type VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkFormatFeatureFlags with
              static member inline SampledImageFilterMinmaxBitExt = unbox<VkFormatFeatureFlags> 0x00010000
         type VkSamplerReductionMode with
              static member inline WeightedAverageExt = unbox<VkSamplerReductionMode> 0
              static member inline MinExt = unbox<VkSamplerReductionMode> 1
              static member inline MaxExt = unbox<VkSamplerReductionMode> 2


module EXTScalarBlockLayout =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_scalar_block_layout"
    let Number = 222

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures



module EXTSeparateStencilUsage =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_separate_stencil_usage"
    let Number = 247


    type VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo



module EXTShaderAtomicFloat =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_shader_atomic_float"
    let Number = 261

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderAtomicFloatFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderBufferFloat32Atomics : VkBool32
            val mutable public shaderBufferFloat32AtomicAdd : VkBool32
            val mutable public shaderBufferFloat64Atomics : VkBool32
            val mutable public shaderBufferFloat64AtomicAdd : VkBool32
            val mutable public shaderSharedFloat32Atomics : VkBool32
            val mutable public shaderSharedFloat32AtomicAdd : VkBool32
            val mutable public shaderSharedFloat64Atomics : VkBool32
            val mutable public shaderSharedFloat64AtomicAdd : VkBool32
            val mutable public shaderImageFloat32Atomics : VkBool32
            val mutable public shaderImageFloat32AtomicAdd : VkBool32
            val mutable public sparseImageFloat32Atomics : VkBool32
            val mutable public sparseImageFloat32AtomicAdd : VkBool32

            new(pNext : nativeint, shaderBufferFloat32Atomics : VkBool32, shaderBufferFloat32AtomicAdd : VkBool32, shaderBufferFloat64Atomics : VkBool32, shaderBufferFloat64AtomicAdd : VkBool32, shaderSharedFloat32Atomics : VkBool32, shaderSharedFloat32AtomicAdd : VkBool32, shaderSharedFloat64Atomics : VkBool32, shaderSharedFloat64AtomicAdd : VkBool32, shaderImageFloat32Atomics : VkBool32, shaderImageFloat32AtomicAdd : VkBool32, sparseImageFloat32Atomics : VkBool32, sparseImageFloat32AtomicAdd : VkBool32) =
                {
                    sType = 1000260000u
                    pNext = pNext
                    shaderBufferFloat32Atomics = shaderBufferFloat32Atomics
                    shaderBufferFloat32AtomicAdd = shaderBufferFloat32AtomicAdd
                    shaderBufferFloat64Atomics = shaderBufferFloat64Atomics
                    shaderBufferFloat64AtomicAdd = shaderBufferFloat64AtomicAdd
                    shaderSharedFloat32Atomics = shaderSharedFloat32Atomics
                    shaderSharedFloat32AtomicAdd = shaderSharedFloat32AtomicAdd
                    shaderSharedFloat64Atomics = shaderSharedFloat64Atomics
                    shaderSharedFloat64AtomicAdd = shaderSharedFloat64AtomicAdd
                    shaderImageFloat32Atomics = shaderImageFloat32Atomics
                    shaderImageFloat32AtomicAdd = shaderImageFloat32AtomicAdd
                    sparseImageFloat32Atomics = sparseImageFloat32Atomics
                    sparseImageFloat32AtomicAdd = sparseImageFloat32AtomicAdd
                }

            new(shaderBufferFloat32Atomics : VkBool32, shaderBufferFloat32AtomicAdd : VkBool32, shaderBufferFloat64Atomics : VkBool32, shaderBufferFloat64AtomicAdd : VkBool32, shaderSharedFloat32Atomics : VkBool32, shaderSharedFloat32AtomicAdd : VkBool32, shaderSharedFloat64Atomics : VkBool32, shaderSharedFloat64AtomicAdd : VkBool32, shaderImageFloat32Atomics : VkBool32, shaderImageFloat32AtomicAdd : VkBool32, sparseImageFloat32Atomics : VkBool32, sparseImageFloat32AtomicAdd : VkBool32) =
                VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(Unchecked.defaultof<nativeint>, shaderBufferFloat32Atomics, shaderBufferFloat32AtomicAdd, shaderBufferFloat64Atomics, shaderBufferFloat64AtomicAdd, shaderSharedFloat32Atomics, shaderSharedFloat32AtomicAdd, shaderSharedFloat64Atomics, shaderSharedFloat64AtomicAdd, shaderImageFloat32Atomics, shaderImageFloat32AtomicAdd, sparseImageFloat32Atomics, sparseImageFloat32AtomicAdd)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderBufferFloat32Atomics = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat32AtomicAdd = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat64Atomics = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat64AtomicAdd = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat32Atomics = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat32AtomicAdd = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat64Atomics = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat64AtomicAdd = Unchecked.defaultof<VkBool32> && x.shaderImageFloat32Atomics = Unchecked.defaultof<VkBool32> && x.shaderImageFloat32AtomicAdd = Unchecked.defaultof<VkBool32> && x.sparseImageFloat32Atomics = Unchecked.defaultof<VkBool32> && x.sparseImageFloat32AtomicAdd = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderBufferFloat32Atomics = %A" x.shaderBufferFloat32Atomics
                    sprintf "shaderBufferFloat32AtomicAdd = %A" x.shaderBufferFloat32AtomicAdd
                    sprintf "shaderBufferFloat64Atomics = %A" x.shaderBufferFloat64Atomics
                    sprintf "shaderBufferFloat64AtomicAdd = %A" x.shaderBufferFloat64AtomicAdd
                    sprintf "shaderSharedFloat32Atomics = %A" x.shaderSharedFloat32Atomics
                    sprintf "shaderSharedFloat32AtomicAdd = %A" x.shaderSharedFloat32AtomicAdd
                    sprintf "shaderSharedFloat64Atomics = %A" x.shaderSharedFloat64Atomics
                    sprintf "shaderSharedFloat64AtomicAdd = %A" x.shaderSharedFloat64AtomicAdd
                    sprintf "shaderImageFloat32Atomics = %A" x.shaderImageFloat32Atomics
                    sprintf "shaderImageFloat32AtomicAdd = %A" x.shaderImageFloat32AtomicAdd
                    sprintf "sparseImageFloat32Atomics = %A" x.sparseImageFloat32Atomics
                    sprintf "sparseImageFloat32AtomicAdd = %A" x.sparseImageFloat32AtomicAdd
                ] |> sprintf "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT { %s }"
        end



module EXTShaderAtomicFloat2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTShaderAtomicFloat
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_shader_atomic_float2"
    let Number = 274

    let Required = [ EXTShaderAtomicFloat.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderBufferFloat16Atomics : VkBool32
            val mutable public shaderBufferFloat16AtomicAdd : VkBool32
            val mutable public shaderBufferFloat16AtomicMinMax : VkBool32
            val mutable public shaderBufferFloat32AtomicMinMax : VkBool32
            val mutable public shaderBufferFloat64AtomicMinMax : VkBool32
            val mutable public shaderSharedFloat16Atomics : VkBool32
            val mutable public shaderSharedFloat16AtomicAdd : VkBool32
            val mutable public shaderSharedFloat16AtomicMinMax : VkBool32
            val mutable public shaderSharedFloat32AtomicMinMax : VkBool32
            val mutable public shaderSharedFloat64AtomicMinMax : VkBool32
            val mutable public shaderImageFloat32AtomicMinMax : VkBool32
            val mutable public sparseImageFloat32AtomicMinMax : VkBool32

            new(pNext : nativeint, shaderBufferFloat16Atomics : VkBool32, shaderBufferFloat16AtomicAdd : VkBool32, shaderBufferFloat16AtomicMinMax : VkBool32, shaderBufferFloat32AtomicMinMax : VkBool32, shaderBufferFloat64AtomicMinMax : VkBool32, shaderSharedFloat16Atomics : VkBool32, shaderSharedFloat16AtomicAdd : VkBool32, shaderSharedFloat16AtomicMinMax : VkBool32, shaderSharedFloat32AtomicMinMax : VkBool32, shaderSharedFloat64AtomicMinMax : VkBool32, shaderImageFloat32AtomicMinMax : VkBool32, sparseImageFloat32AtomicMinMax : VkBool32) =
                {
                    sType = 1000273000u
                    pNext = pNext
                    shaderBufferFloat16Atomics = shaderBufferFloat16Atomics
                    shaderBufferFloat16AtomicAdd = shaderBufferFloat16AtomicAdd
                    shaderBufferFloat16AtomicMinMax = shaderBufferFloat16AtomicMinMax
                    shaderBufferFloat32AtomicMinMax = shaderBufferFloat32AtomicMinMax
                    shaderBufferFloat64AtomicMinMax = shaderBufferFloat64AtomicMinMax
                    shaderSharedFloat16Atomics = shaderSharedFloat16Atomics
                    shaderSharedFloat16AtomicAdd = shaderSharedFloat16AtomicAdd
                    shaderSharedFloat16AtomicMinMax = shaderSharedFloat16AtomicMinMax
                    shaderSharedFloat32AtomicMinMax = shaderSharedFloat32AtomicMinMax
                    shaderSharedFloat64AtomicMinMax = shaderSharedFloat64AtomicMinMax
                    shaderImageFloat32AtomicMinMax = shaderImageFloat32AtomicMinMax
                    sparseImageFloat32AtomicMinMax = sparseImageFloat32AtomicMinMax
                }

            new(shaderBufferFloat16Atomics : VkBool32, shaderBufferFloat16AtomicAdd : VkBool32, shaderBufferFloat16AtomicMinMax : VkBool32, shaderBufferFloat32AtomicMinMax : VkBool32, shaderBufferFloat64AtomicMinMax : VkBool32, shaderSharedFloat16Atomics : VkBool32, shaderSharedFloat16AtomicAdd : VkBool32, shaderSharedFloat16AtomicMinMax : VkBool32, shaderSharedFloat32AtomicMinMax : VkBool32, shaderSharedFloat64AtomicMinMax : VkBool32, shaderImageFloat32AtomicMinMax : VkBool32, sparseImageFloat32AtomicMinMax : VkBool32) =
                VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(Unchecked.defaultof<nativeint>, shaderBufferFloat16Atomics, shaderBufferFloat16AtomicAdd, shaderBufferFloat16AtomicMinMax, shaderBufferFloat32AtomicMinMax, shaderBufferFloat64AtomicMinMax, shaderSharedFloat16Atomics, shaderSharedFloat16AtomicAdd, shaderSharedFloat16AtomicMinMax, shaderSharedFloat32AtomicMinMax, shaderSharedFloat64AtomicMinMax, shaderImageFloat32AtomicMinMax, sparseImageFloat32AtomicMinMax)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderBufferFloat16Atomics = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat16AtomicAdd = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat16AtomicMinMax = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat32AtomicMinMax = Unchecked.defaultof<VkBool32> && x.shaderBufferFloat64AtomicMinMax = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat16Atomics = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat16AtomicAdd = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat16AtomicMinMax = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat32AtomicMinMax = Unchecked.defaultof<VkBool32> && x.shaderSharedFloat64AtomicMinMax = Unchecked.defaultof<VkBool32> && x.shaderImageFloat32AtomicMinMax = Unchecked.defaultof<VkBool32> && x.sparseImageFloat32AtomicMinMax = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderBufferFloat16Atomics = %A" x.shaderBufferFloat16Atomics
                    sprintf "shaderBufferFloat16AtomicAdd = %A" x.shaderBufferFloat16AtomicAdd
                    sprintf "shaderBufferFloat16AtomicMinMax = %A" x.shaderBufferFloat16AtomicMinMax
                    sprintf "shaderBufferFloat32AtomicMinMax = %A" x.shaderBufferFloat32AtomicMinMax
                    sprintf "shaderBufferFloat64AtomicMinMax = %A" x.shaderBufferFloat64AtomicMinMax
                    sprintf "shaderSharedFloat16Atomics = %A" x.shaderSharedFloat16Atomics
                    sprintf "shaderSharedFloat16AtomicAdd = %A" x.shaderSharedFloat16AtomicAdd
                    sprintf "shaderSharedFloat16AtomicMinMax = %A" x.shaderSharedFloat16AtomicMinMax
                    sprintf "shaderSharedFloat32AtomicMinMax = %A" x.shaderSharedFloat32AtomicMinMax
                    sprintf "shaderSharedFloat64AtomicMinMax = %A" x.shaderSharedFloat64AtomicMinMax
                    sprintf "shaderImageFloat32AtomicMinMax = %A" x.shaderImageFloat32AtomicMinMax
                    sprintf "sparseImageFloat32AtomicMinMax = %A" x.sparseImageFloat32AtomicMinMax
                ] |> sprintf "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT { %s }"
        end



module EXTShaderDemoteToHelperInvocation =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_shader_demote_to_helper_invocation"
    let Number = 277

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures



module EXTShaderImageAtomicInt64 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_shader_image_atomic_int64"
    let Number = 235

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderImageInt64Atomics : VkBool32
            val mutable public sparseImageInt64Atomics : VkBool32

            new(pNext : nativeint, shaderImageInt64Atomics : VkBool32, sparseImageInt64Atomics : VkBool32) =
                {
                    sType = 1000234000u
                    pNext = pNext
                    shaderImageInt64Atomics = shaderImageInt64Atomics
                    sparseImageInt64Atomics = sparseImageInt64Atomics
                }

            new(shaderImageInt64Atomics : VkBool32, sparseImageInt64Atomics : VkBool32) =
                VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(Unchecked.defaultof<nativeint>, shaderImageInt64Atomics, sparseImageInt64Atomics)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderImageInt64Atomics = Unchecked.defaultof<VkBool32> && x.sparseImageInt64Atomics = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderImageInt64Atomics = %A" x.shaderImageInt64Atomics
                    sprintf "sparseImageInt64Atomics = %A" x.sparseImageInt64Atomics
                ] |> sprintf "VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT { %s }"
        end



module EXTShaderModuleIdentifier =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTPipelineCreationCacheControl
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_shader_module_identifier"
    let Number = 463

    let Required = [ EXTPipelineCreationCacheControl.Name; KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderModuleIdentifier : VkBool32

            new(pNext : nativeint, shaderModuleIdentifier : VkBool32) =
                {
                    sType = 1000462000u
                    pNext = pNext
                    shaderModuleIdentifier = shaderModuleIdentifier
                }

            new(shaderModuleIdentifier : VkBool32) =
                VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(Unchecked.defaultof<nativeint>, shaderModuleIdentifier)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderModuleIdentifier = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderModuleIdentifier = %A" x.shaderModuleIdentifier
                ] |> sprintf "VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderModuleIdentifierAlgorithmUUID : Guid

            new(pNext : nativeint, shaderModuleIdentifierAlgorithmUUID : Guid) =
                {
                    sType = 1000462001u
                    pNext = pNext
                    shaderModuleIdentifierAlgorithmUUID = shaderModuleIdentifierAlgorithmUUID
                }

            new(shaderModuleIdentifierAlgorithmUUID : Guid) =
                VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(Unchecked.defaultof<nativeint>, shaderModuleIdentifierAlgorithmUUID)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderModuleIdentifierAlgorithmUUID = Unchecked.defaultof<Guid>

            static member Empty =
                VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<Guid>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderModuleIdentifierAlgorithmUUID = %A" x.shaderModuleIdentifierAlgorithmUUID
                ] |> sprintf "VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineShaderStageModuleIdentifierCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public identifierSize : uint32
            val mutable public pIdentifier : nativeptr<byte>

            new(pNext : nativeint, identifierSize : uint32, pIdentifier : nativeptr<byte>) =
                {
                    sType = 1000462002u
                    pNext = pNext
                    identifierSize = identifierSize
                    pIdentifier = pIdentifier
                }

            new(identifierSize : uint32, pIdentifier : nativeptr<byte>) =
                VkPipelineShaderStageModuleIdentifierCreateInfoEXT(Unchecked.defaultof<nativeint>, identifierSize, pIdentifier)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.identifierSize = Unchecked.defaultof<uint32> && x.pIdentifier = Unchecked.defaultof<nativeptr<byte>>

            static member Empty =
                VkPipelineShaderStageModuleIdentifierCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<byte>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "identifierSize = %A" x.identifierSize
                    sprintf "pIdentifier = %A" x.pIdentifier
                ] |> sprintf "VkPipelineShaderStageModuleIdentifierCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkShaderModuleIdentifierEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public identifierSize : uint32
            val mutable public identifier : byte_32

            new(pNext : nativeint, identifierSize : uint32, identifier : byte_32) =
                {
                    sType = 1000462003u
                    pNext = pNext
                    identifierSize = identifierSize
                    identifier = identifier
                }

            new(identifierSize : uint32, identifier : byte_32) =
                VkShaderModuleIdentifierEXT(Unchecked.defaultof<nativeint>, identifierSize, identifier)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.identifierSize = Unchecked.defaultof<uint32> && x.identifier = Unchecked.defaultof<byte_32>

            static member Empty =
                VkShaderModuleIdentifierEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<byte_32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "identifierSize = %A" x.identifierSize
                    sprintf "identifier = %A" x.identifier
                ] |> sprintf "VkShaderModuleIdentifierEXT { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetShaderModuleIdentifierEXTDel = delegate of VkDevice * VkShaderModule * nativeptr<VkShaderModuleIdentifierEXT> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetShaderModuleCreateInfoIdentifierEXTDel = delegate of VkDevice * nativeptr<VkShaderModuleCreateInfo> * nativeptr<VkShaderModuleIdentifierEXT> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTShaderModuleIdentifier")
            static let s_vkGetShaderModuleIdentifierEXTDel = VkRaw.vkImportInstanceDelegate<VkGetShaderModuleIdentifierEXTDel> "vkGetShaderModuleIdentifierEXT"
            static let s_vkGetShaderModuleCreateInfoIdentifierEXTDel = VkRaw.vkImportInstanceDelegate<VkGetShaderModuleCreateInfoIdentifierEXTDel> "vkGetShaderModuleCreateInfoIdentifierEXT"
            static do Report.End(3) |> ignore
            static member vkGetShaderModuleIdentifierEXT = s_vkGetShaderModuleIdentifierEXTDel
            static member vkGetShaderModuleCreateInfoIdentifierEXT = s_vkGetShaderModuleCreateInfoIdentifierEXTDel
        let vkGetShaderModuleIdentifierEXT(device : VkDevice, shaderModule : VkShaderModule, pIdentifier : nativeptr<VkShaderModuleIdentifierEXT>) = Loader<unit>.vkGetShaderModuleIdentifierEXT.Invoke(device, shaderModule, pIdentifier)
        let vkGetShaderModuleCreateInfoIdentifierEXT(device : VkDevice, pCreateInfo : nativeptr<VkShaderModuleCreateInfo>, pIdentifier : nativeptr<VkShaderModuleIdentifierEXT>) = Loader<unit>.vkGetShaderModuleCreateInfoIdentifierEXT.Invoke(device, pCreateInfo, pIdentifier)

module EXTShaderStencilExport =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_shader_stencil_export"
    let Number = 141


module EXTShaderSubgroupBallot =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_shader_subgroup_ballot"
    let Number = 65


module EXTShaderSubgroupVote =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_shader_subgroup_vote"
    let Number = 66


module EXTShaderViewportIndexLayer =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_shader_viewport_index_layer"
    let Number = 163


module EXTSubgroupSizeControl =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_subgroup_size_control"
    let Number = 226


    type VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = VkPhysicalDeviceSubgroupSizeControlFeatures

    type VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = VkPhysicalDeviceSubgroupSizeControlProperties

    type VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkPipelineShaderStageCreateFlags with
              static member inline AllowVaryingSubgroupSizeBitExt = unbox<VkPipelineShaderStageCreateFlags> 0x00000001
              static member inline RequireFullSubgroupsBitExt = unbox<VkPipelineShaderStageCreateFlags> 0x00000002


module EXTSubpassMergeFeedback =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_subpass_merge_feedback"
    let Number = 459


    type VkSubpassMergeStatusEXT =
        | Merged = 0
        | Disallowed = 1
        | NotMergedSideEffects = 2
        | NotMergedSamplesMismatch = 3
        | NotMergedViewsMismatch = 4
        | NotMergedAliasing = 5
        | NotMergedDependencies = 6
        | NotMergedIncompatibleInputAttachment = 7
        | NotMergedTooManyAttachments = 8
        | NotMergedInsufficientStorage = 9
        | NotMergedDepthStencilCount = 10
        | NotMergedResolveAttachmentReuse = 11
        | NotMergedSingleSubpass = 12
        | NotMergedUnspecified = 13


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public subpassMergeFeedback : VkBool32

            new(pNext : nativeint, subpassMergeFeedback : VkBool32) =
                {
                    sType = 1000458000u
                    pNext = pNext
                    subpassMergeFeedback = subpassMergeFeedback
                }

            new(subpassMergeFeedback : VkBool32) =
                VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(Unchecked.defaultof<nativeint>, subpassMergeFeedback)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.subpassMergeFeedback = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "subpassMergeFeedback = %A" x.subpassMergeFeedback
                ] |> sprintf "VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassCreationControlEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public disallowMerging : VkBool32

            new(pNext : nativeint, disallowMerging : VkBool32) =
                {
                    sType = 1000458001u
                    pNext = pNext
                    disallowMerging = disallowMerging
                }

            new(disallowMerging : VkBool32) =
                VkRenderPassCreationControlEXT(Unchecked.defaultof<nativeint>, disallowMerging)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.disallowMerging = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkRenderPassCreationControlEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "disallowMerging = %A" x.disallowMerging
                ] |> sprintf "VkRenderPassCreationControlEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassCreationFeedbackInfoEXT =
        struct
            val mutable public postMergeSubpassCount : uint32

            new(postMergeSubpassCount : uint32) =
                {
                    postMergeSubpassCount = postMergeSubpassCount
                }

            member x.IsEmpty =
                x.postMergeSubpassCount = Unchecked.defaultof<uint32>

            static member Empty =
                VkRenderPassCreationFeedbackInfoEXT(Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "postMergeSubpassCount = %A" x.postMergeSubpassCount
                ] |> sprintf "VkRenderPassCreationFeedbackInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassCreationFeedbackCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pRenderPassFeedback : nativeptr<VkRenderPassCreationFeedbackInfoEXT>

            new(pNext : nativeint, pRenderPassFeedback : nativeptr<VkRenderPassCreationFeedbackInfoEXT>) =
                {
                    sType = 1000458002u
                    pNext = pNext
                    pRenderPassFeedback = pRenderPassFeedback
                }

            new(pRenderPassFeedback : nativeptr<VkRenderPassCreationFeedbackInfoEXT>) =
                VkRenderPassCreationFeedbackCreateInfoEXT(Unchecked.defaultof<nativeint>, pRenderPassFeedback)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pRenderPassFeedback = Unchecked.defaultof<nativeptr<VkRenderPassCreationFeedbackInfoEXT>>

            static member Empty =
                VkRenderPassCreationFeedbackCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkRenderPassCreationFeedbackInfoEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pRenderPassFeedback = %A" x.pRenderPassFeedback
                ] |> sprintf "VkRenderPassCreationFeedbackCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassSubpassFeedbackInfoEXT =
        struct
            val mutable public subpassMergeStatus : VkSubpassMergeStatusEXT
            val mutable public description : String256
            val mutable public postMergeIndex : uint32

            new(subpassMergeStatus : VkSubpassMergeStatusEXT, description : String256, postMergeIndex : uint32) =
                {
                    subpassMergeStatus = subpassMergeStatus
                    description = description
                    postMergeIndex = postMergeIndex
                }

            member x.IsEmpty =
                x.subpassMergeStatus = Unchecked.defaultof<VkSubpassMergeStatusEXT> && x.description = Unchecked.defaultof<String256> && x.postMergeIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkRenderPassSubpassFeedbackInfoEXT(Unchecked.defaultof<VkSubpassMergeStatusEXT>, Unchecked.defaultof<String256>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "subpassMergeStatus = %A" x.subpassMergeStatus
                    sprintf "description = %A" x.description
                    sprintf "postMergeIndex = %A" x.postMergeIndex
                ] |> sprintf "VkRenderPassSubpassFeedbackInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassSubpassFeedbackCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pSubpassFeedback : nativeptr<VkRenderPassSubpassFeedbackInfoEXT>

            new(pNext : nativeint, pSubpassFeedback : nativeptr<VkRenderPassSubpassFeedbackInfoEXT>) =
                {
                    sType = 1000458003u
                    pNext = pNext
                    pSubpassFeedback = pSubpassFeedback
                }

            new(pSubpassFeedback : nativeptr<VkRenderPassSubpassFeedbackInfoEXT>) =
                VkRenderPassSubpassFeedbackCreateInfoEXT(Unchecked.defaultof<nativeint>, pSubpassFeedback)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pSubpassFeedback = Unchecked.defaultof<nativeptr<VkRenderPassSubpassFeedbackInfoEXT>>

            static member Empty =
                VkRenderPassSubpassFeedbackCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkRenderPassSubpassFeedbackInfoEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pSubpassFeedback = %A" x.pSubpassFeedback
                ] |> sprintf "VkRenderPassSubpassFeedbackCreateInfoEXT { %s }"
        end



module EXTSwapchainColorspace =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_EXT_swapchain_colorspace"
    let Number = 105

    let Required = [ KHRSurface.Name ]


    [<AutoOpen>]
    module EnumExtensions =
         type VkColorSpaceKHR with
              static member inline DisplayP3NonlinearExt = unbox<VkColorSpaceKHR> 1000104001
              static member inline ExtendedSrgbLinearExt = unbox<VkColorSpaceKHR> 1000104002
              static member inline DisplayP3LinearExt = unbox<VkColorSpaceKHR> 1000104003
              static member inline DciP3NonlinearExt = unbox<VkColorSpaceKHR> 1000104004
              static member inline Bt709LinearExt = unbox<VkColorSpaceKHR> 1000104005
              static member inline Bt709NonlinearExt = unbox<VkColorSpaceKHR> 1000104006
              static member inline Bt2020LinearExt = unbox<VkColorSpaceKHR> 1000104007
              static member inline Hdr10St2084Ext = unbox<VkColorSpaceKHR> 1000104008
              static member inline DolbyvisionExt = unbox<VkColorSpaceKHR> 1000104009
              static member inline Hdr10HlgExt = unbox<VkColorSpaceKHR> 1000104010
              static member inline AdobergbLinearExt = unbox<VkColorSpaceKHR> 1000104011
              static member inline AdobergbNonlinearExt = unbox<VkColorSpaceKHR> 1000104012
              static member inline PassThroughExt = unbox<VkColorSpaceKHR> 1000104013
              static member inline ExtendedSrgbNonlinearExt = unbox<VkColorSpaceKHR> 1000104014


module EXTTexelBufferAlignment =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_texel_buffer_alignment"
    let Number = 282

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public texelBufferAlignment : VkBool32

            new(pNext : nativeint, texelBufferAlignment : VkBool32) =
                {
                    sType = 1000281000u
                    pNext = pNext
                    texelBufferAlignment = texelBufferAlignment
                }

            new(texelBufferAlignment : VkBool32) =
                VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(Unchecked.defaultof<nativeint>, texelBufferAlignment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.texelBufferAlignment = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "texelBufferAlignment = %A" x.texelBufferAlignment
                ] |> sprintf "VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT { %s }"
        end

    type VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = VkPhysicalDeviceTexelBufferAlignmentProperties



module EXTTextureCompressionAstcHdr =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_texture_compression_astc_hdr"
    let Number = 67

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = VkPhysicalDeviceTextureCompressionASTCHDRFeatures


    [<AutoOpen>]
    module EnumExtensions =
         type VkFormat with
              static member inline Astc44SfloatBlockExt = unbox<VkFormat> 1000066000
              static member inline Astc54SfloatBlockExt = unbox<VkFormat> 1000066001
              static member inline Astc55SfloatBlockExt = unbox<VkFormat> 1000066002
              static member inline Astc65SfloatBlockExt = unbox<VkFormat> 1000066003
              static member inline Astc66SfloatBlockExt = unbox<VkFormat> 1000066004
              static member inline Astc85SfloatBlockExt = unbox<VkFormat> 1000066005
              static member inline Astc86SfloatBlockExt = unbox<VkFormat> 1000066006
              static member inline Astc88SfloatBlockExt = unbox<VkFormat> 1000066007
              static member inline Astc105SfloatBlockExt = unbox<VkFormat> 1000066008
              static member inline Astc106SfloatBlockExt = unbox<VkFormat> 1000066009
              static member inline Astc108SfloatBlockExt = unbox<VkFormat> 1000066010
              static member inline Astc1010SfloatBlockExt = unbox<VkFormat> 1000066011
              static member inline Astc1210SfloatBlockExt = unbox<VkFormat> 1000066012
              static member inline Astc1212SfloatBlockExt = unbox<VkFormat> 1000066013


module EXTToolingInfo =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_tooling_info"
    let Number = 246


    type VkToolPurposeFlagsEXT = VkToolPurposeFlags

    type VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceToolPropertiesEXTDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkPhysicalDeviceToolProperties> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTToolingInfo")
            static let s_vkGetPhysicalDeviceToolPropertiesEXTDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceToolPropertiesEXTDel> "vkGetPhysicalDeviceToolPropertiesEXT"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceToolPropertiesEXT = s_vkGetPhysicalDeviceToolPropertiesEXTDel
        let vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice : VkPhysicalDevice, pToolCount : nativeptr<uint32>, pToolProperties : nativeptr<VkPhysicalDeviceToolProperties>) = Loader<unit>.vkGetPhysicalDeviceToolPropertiesEXT.Invoke(physicalDevice, pToolCount, pToolProperties)

    module EXTDebugReport =
        [<AutoOpen>]
        module EnumExtensions =
             type VkToolPurposeFlags with
                  static member inline DebugReportingBitExt = unbox<VkToolPurposeFlags> 0x00000020


    module EXTDebugMarker =
        [<AutoOpen>]
        module EnumExtensions =
             type VkToolPurposeFlags with
                  static member inline DebugMarkersBitExt = unbox<VkToolPurposeFlags> 0x00000040


    module EXTDebugUtils =
        [<AutoOpen>]
        module EnumExtensions =
             type VkToolPurposeFlags with
                  static member inline DebugReportingBitExt = unbox<VkToolPurposeFlags> 0x00000020
                  static member inline DebugMarkersBitExt = unbox<VkToolPurposeFlags> 0x00000040


module EXTValidationCache =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_validation_cache"
    let Number = 161



    [<StructLayout(LayoutKind.Sequential)>]
    type VkValidationCacheEXT =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkValidationCacheEXT(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    type VkValidationCacheHeaderVersionEXT =
        | One = 1


    [<StructLayout(LayoutKind.Sequential)>]
    type VkShaderModuleValidationCacheCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public validationCache : VkValidationCacheEXT

            new(pNext : nativeint, validationCache : VkValidationCacheEXT) =
                {
                    sType = 1000160001u
                    pNext = pNext
                    validationCache = validationCache
                }

            new(validationCache : VkValidationCacheEXT) =
                VkShaderModuleValidationCacheCreateInfoEXT(Unchecked.defaultof<nativeint>, validationCache)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.validationCache = Unchecked.defaultof<VkValidationCacheEXT>

            static member Empty =
                VkShaderModuleValidationCacheCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkValidationCacheEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "validationCache = %A" x.validationCache
                ] |> sprintf "VkShaderModuleValidationCacheCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkValidationCacheCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkValidationCacheCreateFlagsEXT
            val mutable public initialDataSize : uint64
            val mutable public pInitialData : nativeint

            new(pNext : nativeint, flags : VkValidationCacheCreateFlagsEXT, initialDataSize : uint64, pInitialData : nativeint) =
                {
                    sType = 1000160000u
                    pNext = pNext
                    flags = flags
                    initialDataSize = initialDataSize
                    pInitialData = pInitialData
                }

            new(flags : VkValidationCacheCreateFlagsEXT, initialDataSize : uint64, pInitialData : nativeint) =
                VkValidationCacheCreateInfoEXT(Unchecked.defaultof<nativeint>, flags, initialDataSize, pInitialData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkValidationCacheCreateFlagsEXT> && x.initialDataSize = Unchecked.defaultof<uint64> && x.pInitialData = Unchecked.defaultof<nativeint>

            static member Empty =
                VkValidationCacheCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkValidationCacheCreateFlagsEXT>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "initialDataSize = %A" x.initialDataSize
                    sprintf "pInitialData = %A" x.pInitialData
                ] |> sprintf "VkValidationCacheCreateInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkObjectType with
              static member inline ValidationCacheExt = unbox<VkObjectType> 1000160000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateValidationCacheEXTDel = delegate of VkDevice * nativeptr<VkValidationCacheCreateInfoEXT> * nativeptr<VkAllocationCallbacks> * nativeptr<VkValidationCacheEXT> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyValidationCacheEXTDel = delegate of VkDevice * VkValidationCacheEXT * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkMergeValidationCachesEXTDel = delegate of VkDevice * VkValidationCacheEXT * uint32 * nativeptr<VkValidationCacheEXT> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetValidationCacheDataEXTDel = delegate of VkDevice * VkValidationCacheEXT * nativeptr<uint64> * nativeint -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTValidationCache")
            static let s_vkCreateValidationCacheEXTDel = VkRaw.vkImportInstanceDelegate<VkCreateValidationCacheEXTDel> "vkCreateValidationCacheEXT"
            static let s_vkDestroyValidationCacheEXTDel = VkRaw.vkImportInstanceDelegate<VkDestroyValidationCacheEXTDel> "vkDestroyValidationCacheEXT"
            static let s_vkMergeValidationCachesEXTDel = VkRaw.vkImportInstanceDelegate<VkMergeValidationCachesEXTDel> "vkMergeValidationCachesEXT"
            static let s_vkGetValidationCacheDataEXTDel = VkRaw.vkImportInstanceDelegate<VkGetValidationCacheDataEXTDel> "vkGetValidationCacheDataEXT"
            static do Report.End(3) |> ignore
            static member vkCreateValidationCacheEXT = s_vkCreateValidationCacheEXTDel
            static member vkDestroyValidationCacheEXT = s_vkDestroyValidationCacheEXTDel
            static member vkMergeValidationCachesEXT = s_vkMergeValidationCachesEXTDel
            static member vkGetValidationCacheDataEXT = s_vkGetValidationCacheDataEXTDel
        let vkCreateValidationCacheEXT(device : VkDevice, pCreateInfo : nativeptr<VkValidationCacheCreateInfoEXT>, pAllocator : nativeptr<VkAllocationCallbacks>, pValidationCache : nativeptr<VkValidationCacheEXT>) = Loader<unit>.vkCreateValidationCacheEXT.Invoke(device, pCreateInfo, pAllocator, pValidationCache)
        let vkDestroyValidationCacheEXT(device : VkDevice, validationCache : VkValidationCacheEXT, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyValidationCacheEXT.Invoke(device, validationCache, pAllocator)
        let vkMergeValidationCachesEXT(device : VkDevice, dstCache : VkValidationCacheEXT, srcCacheCount : uint32, pSrcCaches : nativeptr<VkValidationCacheEXT>) = Loader<unit>.vkMergeValidationCachesEXT.Invoke(device, dstCache, srcCacheCount, pSrcCaches)
        let vkGetValidationCacheDataEXT(device : VkDevice, validationCache : VkValidationCacheEXT, pDataSize : nativeptr<uint64>, pData : nativeint) = Loader<unit>.vkGetValidationCacheDataEXT.Invoke(device, validationCache, pDataSize, pData)

module EXTValidationFeatures =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_validation_features"
    let Number = 248


    type VkValidationFeatureEnableEXT =
        | GpuAssisted = 0
        | GpuAssistedReserveBindingSlot = 1
        | BestPractices = 2
        | DebugPrintf = 3
        | SynchronizationValidation = 4

    type VkValidationFeatureDisableEXT =
        | All = 0
        | Shaders = 1
        | ThreadSafety = 2
        | ApiParameters = 3
        | ObjectLifetimes = 4
        | CoreChecks = 5
        | UniqueHandles = 6
        | ShaderValidationCache = 7


    [<StructLayout(LayoutKind.Sequential)>]
    type VkValidationFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public enabledValidationFeatureCount : uint32
            val mutable public pEnabledValidationFeatures : nativeptr<VkValidationFeatureEnableEXT>
            val mutable public disabledValidationFeatureCount : uint32
            val mutable public pDisabledValidationFeatures : nativeptr<VkValidationFeatureDisableEXT>

            new(pNext : nativeint, enabledValidationFeatureCount : uint32, pEnabledValidationFeatures : nativeptr<VkValidationFeatureEnableEXT>, disabledValidationFeatureCount : uint32, pDisabledValidationFeatures : nativeptr<VkValidationFeatureDisableEXT>) =
                {
                    sType = 1000247000u
                    pNext = pNext
                    enabledValidationFeatureCount = enabledValidationFeatureCount
                    pEnabledValidationFeatures = pEnabledValidationFeatures
                    disabledValidationFeatureCount = disabledValidationFeatureCount
                    pDisabledValidationFeatures = pDisabledValidationFeatures
                }

            new(enabledValidationFeatureCount : uint32, pEnabledValidationFeatures : nativeptr<VkValidationFeatureEnableEXT>, disabledValidationFeatureCount : uint32, pDisabledValidationFeatures : nativeptr<VkValidationFeatureDisableEXT>) =
                VkValidationFeaturesEXT(Unchecked.defaultof<nativeint>, enabledValidationFeatureCount, pEnabledValidationFeatures, disabledValidationFeatureCount, pDisabledValidationFeatures)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.enabledValidationFeatureCount = Unchecked.defaultof<uint32> && x.pEnabledValidationFeatures = Unchecked.defaultof<nativeptr<VkValidationFeatureEnableEXT>> && x.disabledValidationFeatureCount = Unchecked.defaultof<uint32> && x.pDisabledValidationFeatures = Unchecked.defaultof<nativeptr<VkValidationFeatureDisableEXT>>

            static member Empty =
                VkValidationFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkValidationFeatureEnableEXT>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkValidationFeatureDisableEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "enabledValidationFeatureCount = %A" x.enabledValidationFeatureCount
                    sprintf "pEnabledValidationFeatures = %A" x.pEnabledValidationFeatures
                    sprintf "disabledValidationFeatureCount = %A" x.disabledValidationFeatureCount
                    sprintf "pDisabledValidationFeatures = %A" x.pDisabledValidationFeatures
                ] |> sprintf "VkValidationFeaturesEXT { %s }"
        end



module EXTValidationFlags =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_EXT_validation_flags"
    let Number = 62


    type VkValidationCheckEXT =
        | All = 0
        | Shaders = 1


    [<StructLayout(LayoutKind.Sequential)>]
    type VkValidationFlagsEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public disabledValidationCheckCount : uint32
            val mutable public pDisabledValidationChecks : nativeptr<VkValidationCheckEXT>

            new(pNext : nativeint, disabledValidationCheckCount : uint32, pDisabledValidationChecks : nativeptr<VkValidationCheckEXT>) =
                {
                    sType = 1000061000u
                    pNext = pNext
                    disabledValidationCheckCount = disabledValidationCheckCount
                    pDisabledValidationChecks = pDisabledValidationChecks
                }

            new(disabledValidationCheckCount : uint32, pDisabledValidationChecks : nativeptr<VkValidationCheckEXT>) =
                VkValidationFlagsEXT(Unchecked.defaultof<nativeint>, disabledValidationCheckCount, pDisabledValidationChecks)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.disabledValidationCheckCount = Unchecked.defaultof<uint32> && x.pDisabledValidationChecks = Unchecked.defaultof<nativeptr<VkValidationCheckEXT>>

            static member Empty =
                VkValidationFlagsEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkValidationCheckEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "disabledValidationCheckCount = %A" x.disabledValidationCheckCount
                    sprintf "pDisabledValidationChecks = %A" x.pDisabledValidationChecks
                ] |> sprintf "VkValidationFlagsEXT { %s }"
        end



module EXTVertexAttributeDivisor =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_vertex_attribute_divisor"
    let Number = 191

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vertexAttributeInstanceRateDivisor : VkBool32
            val mutable public vertexAttributeInstanceRateZeroDivisor : VkBool32

            new(pNext : nativeint, vertexAttributeInstanceRateDivisor : VkBool32, vertexAttributeInstanceRateZeroDivisor : VkBool32) =
                {
                    sType = 1000190002u
                    pNext = pNext
                    vertexAttributeInstanceRateDivisor = vertexAttributeInstanceRateDivisor
                    vertexAttributeInstanceRateZeroDivisor = vertexAttributeInstanceRateZeroDivisor
                }

            new(vertexAttributeInstanceRateDivisor : VkBool32, vertexAttributeInstanceRateZeroDivisor : VkBool32) =
                VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(Unchecked.defaultof<nativeint>, vertexAttributeInstanceRateDivisor, vertexAttributeInstanceRateZeroDivisor)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vertexAttributeInstanceRateDivisor = Unchecked.defaultof<VkBool32> && x.vertexAttributeInstanceRateZeroDivisor = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "vertexAttributeInstanceRateDivisor = %A" x.vertexAttributeInstanceRateDivisor
                    sprintf "vertexAttributeInstanceRateZeroDivisor = %A" x.vertexAttributeInstanceRateZeroDivisor
                ] |> sprintf "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxVertexAttribDivisor : uint32

            new(pNext : nativeint, maxVertexAttribDivisor : uint32) =
                {
                    sType = 1000190000u
                    pNext = pNext
                    maxVertexAttribDivisor = maxVertexAttribDivisor
                }

            new(maxVertexAttribDivisor : uint32) =
                VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(Unchecked.defaultof<nativeint>, maxVertexAttribDivisor)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxVertexAttribDivisor = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxVertexAttribDivisor = %A" x.maxVertexAttribDivisor
                ] |> sprintf "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVertexInputBindingDivisorDescriptionEXT =
        struct
            val mutable public binding : uint32
            val mutable public divisor : uint32

            new(binding : uint32, divisor : uint32) =
                {
                    binding = binding
                    divisor = divisor
                }

            member x.IsEmpty =
                x.binding = Unchecked.defaultof<uint32> && x.divisor = Unchecked.defaultof<uint32>

            static member Empty =
                VkVertexInputBindingDivisorDescriptionEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "binding = %A" x.binding
                    sprintf "divisor = %A" x.divisor
                ] |> sprintf "VkVertexInputBindingDivisorDescriptionEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineVertexInputDivisorStateCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vertexBindingDivisorCount : uint32
            val mutable public pVertexBindingDivisors : nativeptr<VkVertexInputBindingDivisorDescriptionEXT>

            new(pNext : nativeint, vertexBindingDivisorCount : uint32, pVertexBindingDivisors : nativeptr<VkVertexInputBindingDivisorDescriptionEXT>) =
                {
                    sType = 1000190001u
                    pNext = pNext
                    vertexBindingDivisorCount = vertexBindingDivisorCount
                    pVertexBindingDivisors = pVertexBindingDivisors
                }

            new(vertexBindingDivisorCount : uint32, pVertexBindingDivisors : nativeptr<VkVertexInputBindingDivisorDescriptionEXT>) =
                VkPipelineVertexInputDivisorStateCreateInfoEXT(Unchecked.defaultof<nativeint>, vertexBindingDivisorCount, pVertexBindingDivisors)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vertexBindingDivisorCount = Unchecked.defaultof<uint32> && x.pVertexBindingDivisors = Unchecked.defaultof<nativeptr<VkVertexInputBindingDivisorDescriptionEXT>>

            static member Empty =
                VkPipelineVertexInputDivisorStateCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVertexInputBindingDivisorDescriptionEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "vertexBindingDivisorCount = %A" x.vertexBindingDivisorCount
                    sprintf "pVertexBindingDivisors = %A" x.pVertexBindingDivisors
                ] |> sprintf "VkPipelineVertexInputDivisorStateCreateInfoEXT { %s }"
        end



module EXTVertexInputDynamicState =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_EXT_vertex_input_dynamic_state"
    let Number = 353

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vertexInputDynamicState : VkBool32

            new(pNext : nativeint, vertexInputDynamicState : VkBool32) =
                {
                    sType = 1000352000u
                    pNext = pNext
                    vertexInputDynamicState = vertexInputDynamicState
                }

            new(vertexInputDynamicState : VkBool32) =
                VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(Unchecked.defaultof<nativeint>, vertexInputDynamicState)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vertexInputDynamicState = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "vertexInputDynamicState = %A" x.vertexInputDynamicState
                ] |> sprintf "VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVertexInputAttributeDescription2EXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public location : uint32
            val mutable public binding : uint32
            val mutable public format : VkFormat
            val mutable public offset : uint32

            new(pNext : nativeint, location : uint32, binding : uint32, format : VkFormat, offset : uint32) =
                {
                    sType = 1000352002u
                    pNext = pNext
                    location = location
                    binding = binding
                    format = format
                    offset = offset
                }

            new(location : uint32, binding : uint32, format : VkFormat, offset : uint32) =
                VkVertexInputAttributeDescription2EXT(Unchecked.defaultof<nativeint>, location, binding, format, offset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.location = Unchecked.defaultof<uint32> && x.binding = Unchecked.defaultof<uint32> && x.format = Unchecked.defaultof<VkFormat> && x.offset = Unchecked.defaultof<uint32>

            static member Empty =
                VkVertexInputAttributeDescription2EXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "location = %A" x.location
                    sprintf "binding = %A" x.binding
                    sprintf "format = %A" x.format
                    sprintf "offset = %A" x.offset
                ] |> sprintf "VkVertexInputAttributeDescription2EXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVertexInputBindingDescription2EXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public binding : uint32
            val mutable public stride : uint32
            val mutable public inputRate : VkVertexInputRate
            val mutable public divisor : uint32

            new(pNext : nativeint, binding : uint32, stride : uint32, inputRate : VkVertexInputRate, divisor : uint32) =
                {
                    sType = 1000352001u
                    pNext = pNext
                    binding = binding
                    stride = stride
                    inputRate = inputRate
                    divisor = divisor
                }

            new(binding : uint32, stride : uint32, inputRate : VkVertexInputRate, divisor : uint32) =
                VkVertexInputBindingDescription2EXT(Unchecked.defaultof<nativeint>, binding, stride, inputRate, divisor)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.binding = Unchecked.defaultof<uint32> && x.stride = Unchecked.defaultof<uint32> && x.inputRate = Unchecked.defaultof<VkVertexInputRate> && x.divisor = Unchecked.defaultof<uint32>

            static member Empty =
                VkVertexInputBindingDescription2EXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkVertexInputRate>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "binding = %A" x.binding
                    sprintf "stride = %A" x.stride
                    sprintf "inputRate = %A" x.inputRate
                    sprintf "divisor = %A" x.divisor
                ] |> sprintf "VkVertexInputBindingDescription2EXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkDynamicState with
              static member inline VertexInputExt = unbox<VkDynamicState> 1000352000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetVertexInputEXTDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkVertexInputBindingDescription2EXT> * uint32 * nativeptr<VkVertexInputAttributeDescription2EXT> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading EXTVertexInputDynamicState")
            static let s_vkCmdSetVertexInputEXTDel = VkRaw.vkImportInstanceDelegate<VkCmdSetVertexInputEXTDel> "vkCmdSetVertexInputEXT"
            static do Report.End(3) |> ignore
            static member vkCmdSetVertexInputEXT = s_vkCmdSetVertexInputEXTDel
        let vkCmdSetVertexInputEXT(commandBuffer : VkCommandBuffer, vertexBindingDescriptionCount : uint32, pVertexBindingDescriptions : nativeptr<VkVertexInputBindingDescription2EXT>, vertexAttributeDescriptionCount : uint32, pVertexAttributeDescriptions : nativeptr<VkVertexInputAttributeDescription2EXT>) = Loader<unit>.vkCmdSetVertexInputEXT.Invoke(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions)

module KHRBufferDeviceAddress =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_buffer_device_address"
    let Number = 258

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo

    type VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo

    type VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo

    type VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo

    type VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = VkPhysicalDeviceBufferDeviceAddressFeatures


    [<AutoOpen>]
    module EnumExtensions =
         type VkBufferCreateFlags with
              static member inline DeviceAddressCaptureReplayBitKhr = unbox<VkBufferCreateFlags> 0x00000010
         type VkBufferUsageFlags with
              static member inline ShaderDeviceAddressBitKhr = unbox<VkBufferUsageFlags> 0x00020000
         type VkMemoryAllocateFlags with
              static member inline DeviceAddressBitKhr = unbox<VkMemoryAllocateFlags> 0x00000002
              static member inline DeviceAddressCaptureReplayBitKhr = unbox<VkMemoryAllocateFlags> 0x00000004
         type VkResult with
              static member inline ErrorInvalidOpaqueCaptureAddressKhr = unbox<VkResult> 1000257000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetBufferDeviceAddressKHRDel = delegate of VkDevice * nativeptr<VkBufferDeviceAddressInfo> -> VkDeviceAddress
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetBufferOpaqueCaptureAddressKHRDel = delegate of VkDevice * nativeptr<VkBufferDeviceAddressInfo> -> uint64
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDeviceMemoryOpaqueCaptureAddressKHRDel = delegate of VkDevice * nativeptr<VkDeviceMemoryOpaqueCaptureAddressInfo> -> uint64

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRBufferDeviceAddress")
            static let s_vkGetBufferDeviceAddressKHRDel = VkRaw.vkImportInstanceDelegate<VkGetBufferDeviceAddressKHRDel> "vkGetBufferDeviceAddressKHR"
            static let s_vkGetBufferOpaqueCaptureAddressKHRDel = VkRaw.vkImportInstanceDelegate<VkGetBufferOpaqueCaptureAddressKHRDel> "vkGetBufferOpaqueCaptureAddressKHR"
            static let s_vkGetDeviceMemoryOpaqueCaptureAddressKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceMemoryOpaqueCaptureAddressKHRDel> "vkGetDeviceMemoryOpaqueCaptureAddressKHR"
            static do Report.End(3) |> ignore
            static member vkGetBufferDeviceAddressKHR = s_vkGetBufferDeviceAddressKHRDel
            static member vkGetBufferOpaqueCaptureAddressKHR = s_vkGetBufferOpaqueCaptureAddressKHRDel
            static member vkGetDeviceMemoryOpaqueCaptureAddressKHR = s_vkGetDeviceMemoryOpaqueCaptureAddressKHRDel
        let vkGetBufferDeviceAddressKHR(device : VkDevice, pInfo : nativeptr<VkBufferDeviceAddressInfo>) = Loader<unit>.vkGetBufferDeviceAddressKHR.Invoke(device, pInfo)
        let vkGetBufferOpaqueCaptureAddressKHR(device : VkDevice, pInfo : nativeptr<VkBufferDeviceAddressInfo>) = Loader<unit>.vkGetBufferOpaqueCaptureAddressKHR.Invoke(device, pInfo)
        let vkGetDeviceMemoryOpaqueCaptureAddressKHR(device : VkDevice, pInfo : nativeptr<VkDeviceMemoryOpaqueCaptureAddressInfo>) = Loader<unit>.vkGetDeviceMemoryOpaqueCaptureAddressKHR.Invoke(device, pInfo)

module NVDeviceGeneratedCommands =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRBufferDeviceAddress
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_NV_device_generated_commands"
    let Number = 278

    let Required = [ KHRBufferDeviceAddress.Name ]



    [<StructLayout(LayoutKind.Sequential)>]
    type VkIndirectCommandsLayoutNV =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkIndirectCommandsLayoutNV(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<Flags>]
    type VkIndirectStateFlagsNV =
        | All = 1
        | None = 0
        | FlagFrontfaceBit = 0x00000001

    type VkIndirectCommandsTokenTypeNV =
        | ShaderGroup = 0
        | State = 1
        | IndexBuffer = 2
        | VertexBuffer = 3
        | PushConstant = 4
        | DrawIndexed = 5
        | Draw = 6
        | DrawTasks = 7

    [<Flags>]
    type VkIndirectCommandsLayoutUsageFlagsNV =
        | All = 7
        | None = 0
        | ExplicitPreprocessBit = 0x00000001
        | IndexedSequencesBit = 0x00000002
        | UnorderedSequencesBit = 0x00000004


    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindIndexBufferIndirectCommandNV =
        struct
            val mutable public bufferAddress : VkDeviceAddress
            val mutable public size : uint32
            val mutable public indexType : VkIndexType

            new(bufferAddress : VkDeviceAddress, size : uint32, indexType : VkIndexType) =
                {
                    bufferAddress = bufferAddress
                    size = size
                    indexType = indexType
                }

            member x.IsEmpty =
                x.bufferAddress = Unchecked.defaultof<VkDeviceAddress> && x.size = Unchecked.defaultof<uint32> && x.indexType = Unchecked.defaultof<VkIndexType>

            static member Empty =
                VkBindIndexBufferIndirectCommandNV(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkIndexType>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "bufferAddress = %A" x.bufferAddress
                    sprintf "size = %A" x.size
                    sprintf "indexType = %A" x.indexType
                ] |> sprintf "VkBindIndexBufferIndirectCommandNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindShaderGroupIndirectCommandNV =
        struct
            val mutable public groupIndex : uint32

            new(groupIndex : uint32) =
                {
                    groupIndex = groupIndex
                }

            member x.IsEmpty =
                x.groupIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkBindShaderGroupIndirectCommandNV(Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "groupIndex = %A" x.groupIndex
                ] |> sprintf "VkBindShaderGroupIndirectCommandNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindVertexBufferIndirectCommandNV =
        struct
            val mutable public bufferAddress : VkDeviceAddress
            val mutable public size : uint32
            val mutable public stride : uint32

            new(bufferAddress : VkDeviceAddress, size : uint32, stride : uint32) =
                {
                    bufferAddress = bufferAddress
                    size = size
                    stride = stride
                }

            member x.IsEmpty =
                x.bufferAddress = Unchecked.defaultof<VkDeviceAddress> && x.size = Unchecked.defaultof<uint32> && x.stride = Unchecked.defaultof<uint32>

            static member Empty =
                VkBindVertexBufferIndirectCommandNV(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "bufferAddress = %A" x.bufferAddress
                    sprintf "size = %A" x.size
                    sprintf "stride = %A" x.stride
                ] |> sprintf "VkBindVertexBufferIndirectCommandNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkIndirectCommandsStreamNV =
        struct
            val mutable public buffer : VkBuffer
            val mutable public offset : VkDeviceSize

            new(buffer : VkBuffer, offset : VkDeviceSize) =
                {
                    buffer = buffer
                    offset = offset
                }

            member x.IsEmpty =
                x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkIndirectCommandsStreamNV(Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "buffer = %A" x.buffer
                    sprintf "offset = %A" x.offset
                ] |> sprintf "VkIndirectCommandsStreamNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkGeneratedCommandsInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipelineBindPoint : VkPipelineBindPoint
            val mutable public pipeline : VkPipeline
            val mutable public indirectCommandsLayout : VkIndirectCommandsLayoutNV
            val mutable public streamCount : uint32
            val mutable public pStreams : nativeptr<VkIndirectCommandsStreamNV>
            val mutable public sequencesCount : uint32
            val mutable public preprocessBuffer : VkBuffer
            val mutable public preprocessOffset : VkDeviceSize
            val mutable public preprocessSize : VkDeviceSize
            val mutable public sequencesCountBuffer : VkBuffer
            val mutable public sequencesCountOffset : VkDeviceSize
            val mutable public sequencesIndexBuffer : VkBuffer
            val mutable public sequencesIndexOffset : VkDeviceSize

            new(pNext : nativeint, pipelineBindPoint : VkPipelineBindPoint, pipeline : VkPipeline, indirectCommandsLayout : VkIndirectCommandsLayoutNV, streamCount : uint32, pStreams : nativeptr<VkIndirectCommandsStreamNV>, sequencesCount : uint32, preprocessBuffer : VkBuffer, preprocessOffset : VkDeviceSize, preprocessSize : VkDeviceSize, sequencesCountBuffer : VkBuffer, sequencesCountOffset : VkDeviceSize, sequencesIndexBuffer : VkBuffer, sequencesIndexOffset : VkDeviceSize) =
                {
                    sType = 1000277005u
                    pNext = pNext
                    pipelineBindPoint = pipelineBindPoint
                    pipeline = pipeline
                    indirectCommandsLayout = indirectCommandsLayout
                    streamCount = streamCount
                    pStreams = pStreams
                    sequencesCount = sequencesCount
                    preprocessBuffer = preprocessBuffer
                    preprocessOffset = preprocessOffset
                    preprocessSize = preprocessSize
                    sequencesCountBuffer = sequencesCountBuffer
                    sequencesCountOffset = sequencesCountOffset
                    sequencesIndexBuffer = sequencesIndexBuffer
                    sequencesIndexOffset = sequencesIndexOffset
                }

            new(pipelineBindPoint : VkPipelineBindPoint, pipeline : VkPipeline, indirectCommandsLayout : VkIndirectCommandsLayoutNV, streamCount : uint32, pStreams : nativeptr<VkIndirectCommandsStreamNV>, sequencesCount : uint32, preprocessBuffer : VkBuffer, preprocessOffset : VkDeviceSize, preprocessSize : VkDeviceSize, sequencesCountBuffer : VkBuffer, sequencesCountOffset : VkDeviceSize, sequencesIndexBuffer : VkBuffer, sequencesIndexOffset : VkDeviceSize) =
                VkGeneratedCommandsInfoNV(Unchecked.defaultof<nativeint>, pipelineBindPoint, pipeline, indirectCommandsLayout, streamCount, pStreams, sequencesCount, preprocessBuffer, preprocessOffset, preprocessSize, sequencesCountBuffer, sequencesCountOffset, sequencesIndexBuffer, sequencesIndexOffset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.pipeline = Unchecked.defaultof<VkPipeline> && x.indirectCommandsLayout = Unchecked.defaultof<VkIndirectCommandsLayoutNV> && x.streamCount = Unchecked.defaultof<uint32> && x.pStreams = Unchecked.defaultof<nativeptr<VkIndirectCommandsStreamNV>> && x.sequencesCount = Unchecked.defaultof<uint32> && x.preprocessBuffer = Unchecked.defaultof<VkBuffer> && x.preprocessOffset = Unchecked.defaultof<VkDeviceSize> && x.preprocessSize = Unchecked.defaultof<VkDeviceSize> && x.sequencesCountBuffer = Unchecked.defaultof<VkBuffer> && x.sequencesCountOffset = Unchecked.defaultof<VkDeviceSize> && x.sequencesIndexBuffer = Unchecked.defaultof<VkBuffer> && x.sequencesIndexOffset = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkGeneratedCommandsInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<VkIndirectCommandsLayoutNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkIndirectCommandsStreamNV>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                    sprintf "pipeline = %A" x.pipeline
                    sprintf "indirectCommandsLayout = %A" x.indirectCommandsLayout
                    sprintf "streamCount = %A" x.streamCount
                    sprintf "pStreams = %A" x.pStreams
                    sprintf "sequencesCount = %A" x.sequencesCount
                    sprintf "preprocessBuffer = %A" x.preprocessBuffer
                    sprintf "preprocessOffset = %A" x.preprocessOffset
                    sprintf "preprocessSize = %A" x.preprocessSize
                    sprintf "sequencesCountBuffer = %A" x.sequencesCountBuffer
                    sprintf "sequencesCountOffset = %A" x.sequencesCountOffset
                    sprintf "sequencesIndexBuffer = %A" x.sequencesIndexBuffer
                    sprintf "sequencesIndexOffset = %A" x.sequencesIndexOffset
                ] |> sprintf "VkGeneratedCommandsInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkGeneratedCommandsMemoryRequirementsInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipelineBindPoint : VkPipelineBindPoint
            val mutable public pipeline : VkPipeline
            val mutable public indirectCommandsLayout : VkIndirectCommandsLayoutNV
            val mutable public maxSequencesCount : uint32

            new(pNext : nativeint, pipelineBindPoint : VkPipelineBindPoint, pipeline : VkPipeline, indirectCommandsLayout : VkIndirectCommandsLayoutNV, maxSequencesCount : uint32) =
                {
                    sType = 1000277006u
                    pNext = pNext
                    pipelineBindPoint = pipelineBindPoint
                    pipeline = pipeline
                    indirectCommandsLayout = indirectCommandsLayout
                    maxSequencesCount = maxSequencesCount
                }

            new(pipelineBindPoint : VkPipelineBindPoint, pipeline : VkPipeline, indirectCommandsLayout : VkIndirectCommandsLayoutNV, maxSequencesCount : uint32) =
                VkGeneratedCommandsMemoryRequirementsInfoNV(Unchecked.defaultof<nativeint>, pipelineBindPoint, pipeline, indirectCommandsLayout, maxSequencesCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.pipeline = Unchecked.defaultof<VkPipeline> && x.indirectCommandsLayout = Unchecked.defaultof<VkIndirectCommandsLayoutNV> && x.maxSequencesCount = Unchecked.defaultof<uint32>

            static member Empty =
                VkGeneratedCommandsMemoryRequirementsInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<VkIndirectCommandsLayoutNV>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                    sprintf "pipeline = %A" x.pipeline
                    sprintf "indirectCommandsLayout = %A" x.indirectCommandsLayout
                    sprintf "maxSequencesCount = %A" x.maxSequencesCount
                ] |> sprintf "VkGeneratedCommandsMemoryRequirementsInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkGraphicsShaderGroupCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stageCount : uint32
            val mutable public pStages : nativeptr<VkPipelineShaderStageCreateInfo>
            val mutable public pVertexInputState : nativeptr<VkPipelineVertexInputStateCreateInfo>
            val mutable public pTessellationState : nativeptr<VkPipelineTessellationStateCreateInfo>

            new(pNext : nativeint, stageCount : uint32, pStages : nativeptr<VkPipelineShaderStageCreateInfo>, pVertexInputState : nativeptr<VkPipelineVertexInputStateCreateInfo>, pTessellationState : nativeptr<VkPipelineTessellationStateCreateInfo>) =
                {
                    sType = 1000277001u
                    pNext = pNext
                    stageCount = stageCount
                    pStages = pStages
                    pVertexInputState = pVertexInputState
                    pTessellationState = pTessellationState
                }

            new(stageCount : uint32, pStages : nativeptr<VkPipelineShaderStageCreateInfo>, pVertexInputState : nativeptr<VkPipelineVertexInputStateCreateInfo>, pTessellationState : nativeptr<VkPipelineTessellationStateCreateInfo>) =
                VkGraphicsShaderGroupCreateInfoNV(Unchecked.defaultof<nativeint>, stageCount, pStages, pVertexInputState, pTessellationState)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stageCount = Unchecked.defaultof<uint32> && x.pStages = Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>> && x.pVertexInputState = Unchecked.defaultof<nativeptr<VkPipelineVertexInputStateCreateInfo>> && x.pTessellationState = Unchecked.defaultof<nativeptr<VkPipelineTessellationStateCreateInfo>>

            static member Empty =
                VkGraphicsShaderGroupCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineVertexInputStateCreateInfo>>, Unchecked.defaultof<nativeptr<VkPipelineTessellationStateCreateInfo>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "stageCount = %A" x.stageCount
                    sprintf "pStages = %A" x.pStages
                    sprintf "pVertexInputState = %A" x.pVertexInputState
                    sprintf "pTessellationState = %A" x.pTessellationState
                ] |> sprintf "VkGraphicsShaderGroupCreateInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkGraphicsPipelineShaderGroupsCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public groupCount : uint32
            val mutable public pGroups : nativeptr<VkGraphicsShaderGroupCreateInfoNV>
            val mutable public pipelineCount : uint32
            val mutable public pPipelines : nativeptr<VkPipeline>

            new(pNext : nativeint, groupCount : uint32, pGroups : nativeptr<VkGraphicsShaderGroupCreateInfoNV>, pipelineCount : uint32, pPipelines : nativeptr<VkPipeline>) =
                {
                    sType = 1000277002u
                    pNext = pNext
                    groupCount = groupCount
                    pGroups = pGroups
                    pipelineCount = pipelineCount
                    pPipelines = pPipelines
                }

            new(groupCount : uint32, pGroups : nativeptr<VkGraphicsShaderGroupCreateInfoNV>, pipelineCount : uint32, pPipelines : nativeptr<VkPipeline>) =
                VkGraphicsPipelineShaderGroupsCreateInfoNV(Unchecked.defaultof<nativeint>, groupCount, pGroups, pipelineCount, pPipelines)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.groupCount = Unchecked.defaultof<uint32> && x.pGroups = Unchecked.defaultof<nativeptr<VkGraphicsShaderGroupCreateInfoNV>> && x.pipelineCount = Unchecked.defaultof<uint32> && x.pPipelines = Unchecked.defaultof<nativeptr<VkPipeline>>

            static member Empty =
                VkGraphicsPipelineShaderGroupsCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkGraphicsShaderGroupCreateInfoNV>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipeline>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "groupCount = %A" x.groupCount
                    sprintf "pGroups = %A" x.pGroups
                    sprintf "pipelineCount = %A" x.pipelineCount
                    sprintf "pPipelines = %A" x.pPipelines
                ] |> sprintf "VkGraphicsPipelineShaderGroupsCreateInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkIndirectCommandsLayoutTokenNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public tokenType : VkIndirectCommandsTokenTypeNV
            val mutable public stream : uint32
            val mutable public offset : uint32
            val mutable public vertexBindingUnit : uint32
            val mutable public vertexDynamicStride : VkBool32
            val mutable public pushconstantPipelineLayout : VkPipelineLayout
            val mutable public pushconstantShaderStageFlags : VkShaderStageFlags
            val mutable public pushconstantOffset : uint32
            val mutable public pushconstantSize : uint32
            val mutable public indirectStateFlags : VkIndirectStateFlagsNV
            val mutable public indexTypeCount : uint32
            val mutable public pIndexTypes : nativeptr<VkIndexType>
            val mutable public pIndexTypeValues : nativeptr<uint32>

            new(pNext : nativeint, tokenType : VkIndirectCommandsTokenTypeNV, stream : uint32, offset : uint32, vertexBindingUnit : uint32, vertexDynamicStride : VkBool32, pushconstantPipelineLayout : VkPipelineLayout, pushconstantShaderStageFlags : VkShaderStageFlags, pushconstantOffset : uint32, pushconstantSize : uint32, indirectStateFlags : VkIndirectStateFlagsNV, indexTypeCount : uint32, pIndexTypes : nativeptr<VkIndexType>, pIndexTypeValues : nativeptr<uint32>) =
                {
                    sType = 1000277003u
                    pNext = pNext
                    tokenType = tokenType
                    stream = stream
                    offset = offset
                    vertexBindingUnit = vertexBindingUnit
                    vertexDynamicStride = vertexDynamicStride
                    pushconstantPipelineLayout = pushconstantPipelineLayout
                    pushconstantShaderStageFlags = pushconstantShaderStageFlags
                    pushconstantOffset = pushconstantOffset
                    pushconstantSize = pushconstantSize
                    indirectStateFlags = indirectStateFlags
                    indexTypeCount = indexTypeCount
                    pIndexTypes = pIndexTypes
                    pIndexTypeValues = pIndexTypeValues
                }

            new(tokenType : VkIndirectCommandsTokenTypeNV, stream : uint32, offset : uint32, vertexBindingUnit : uint32, vertexDynamicStride : VkBool32, pushconstantPipelineLayout : VkPipelineLayout, pushconstantShaderStageFlags : VkShaderStageFlags, pushconstantOffset : uint32, pushconstantSize : uint32, indirectStateFlags : VkIndirectStateFlagsNV, indexTypeCount : uint32, pIndexTypes : nativeptr<VkIndexType>, pIndexTypeValues : nativeptr<uint32>) =
                VkIndirectCommandsLayoutTokenNV(Unchecked.defaultof<nativeint>, tokenType, stream, offset, vertexBindingUnit, vertexDynamicStride, pushconstantPipelineLayout, pushconstantShaderStageFlags, pushconstantOffset, pushconstantSize, indirectStateFlags, indexTypeCount, pIndexTypes, pIndexTypeValues)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.tokenType = Unchecked.defaultof<VkIndirectCommandsTokenTypeNV> && x.stream = Unchecked.defaultof<uint32> && x.offset = Unchecked.defaultof<uint32> && x.vertexBindingUnit = Unchecked.defaultof<uint32> && x.vertexDynamicStride = Unchecked.defaultof<VkBool32> && x.pushconstantPipelineLayout = Unchecked.defaultof<VkPipelineLayout> && x.pushconstantShaderStageFlags = Unchecked.defaultof<VkShaderStageFlags> && x.pushconstantOffset = Unchecked.defaultof<uint32> && x.pushconstantSize = Unchecked.defaultof<uint32> && x.indirectStateFlags = Unchecked.defaultof<VkIndirectStateFlagsNV> && x.indexTypeCount = Unchecked.defaultof<uint32> && x.pIndexTypes = Unchecked.defaultof<nativeptr<VkIndexType>> && x.pIndexTypeValues = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkIndirectCommandsLayoutTokenNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkIndirectCommandsTokenTypeNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkIndirectStateFlagsNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkIndexType>>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "tokenType = %A" x.tokenType
                    sprintf "stream = %A" x.stream
                    sprintf "offset = %A" x.offset
                    sprintf "vertexBindingUnit = %A" x.vertexBindingUnit
                    sprintf "vertexDynamicStride = %A" x.vertexDynamicStride
                    sprintf "pushconstantPipelineLayout = %A" x.pushconstantPipelineLayout
                    sprintf "pushconstantShaderStageFlags = %A" x.pushconstantShaderStageFlags
                    sprintf "pushconstantOffset = %A" x.pushconstantOffset
                    sprintf "pushconstantSize = %A" x.pushconstantSize
                    sprintf "indirectStateFlags = %A" x.indirectStateFlags
                    sprintf "indexTypeCount = %A" x.indexTypeCount
                    sprintf "pIndexTypes = %A" x.pIndexTypes
                    sprintf "pIndexTypeValues = %A" x.pIndexTypeValues
                ] |> sprintf "VkIndirectCommandsLayoutTokenNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkIndirectCommandsLayoutCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkIndirectCommandsLayoutUsageFlagsNV
            val mutable public pipelineBindPoint : VkPipelineBindPoint
            val mutable public tokenCount : uint32
            val mutable public pTokens : nativeptr<VkIndirectCommandsLayoutTokenNV>
            val mutable public streamCount : uint32
            val mutable public pStreamStrides : nativeptr<uint32>

            new(pNext : nativeint, flags : VkIndirectCommandsLayoutUsageFlagsNV, pipelineBindPoint : VkPipelineBindPoint, tokenCount : uint32, pTokens : nativeptr<VkIndirectCommandsLayoutTokenNV>, streamCount : uint32, pStreamStrides : nativeptr<uint32>) =
                {
                    sType = 1000277004u
                    pNext = pNext
                    flags = flags
                    pipelineBindPoint = pipelineBindPoint
                    tokenCount = tokenCount
                    pTokens = pTokens
                    streamCount = streamCount
                    pStreamStrides = pStreamStrides
                }

            new(flags : VkIndirectCommandsLayoutUsageFlagsNV, pipelineBindPoint : VkPipelineBindPoint, tokenCount : uint32, pTokens : nativeptr<VkIndirectCommandsLayoutTokenNV>, streamCount : uint32, pStreamStrides : nativeptr<uint32>) =
                VkIndirectCommandsLayoutCreateInfoNV(Unchecked.defaultof<nativeint>, flags, pipelineBindPoint, tokenCount, pTokens, streamCount, pStreamStrides)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkIndirectCommandsLayoutUsageFlagsNV> && x.pipelineBindPoint = Unchecked.defaultof<VkPipelineBindPoint> && x.tokenCount = Unchecked.defaultof<uint32> && x.pTokens = Unchecked.defaultof<nativeptr<VkIndirectCommandsLayoutTokenNV>> && x.streamCount = Unchecked.defaultof<uint32> && x.pStreamStrides = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkIndirectCommandsLayoutCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkIndirectCommandsLayoutUsageFlagsNV>, Unchecked.defaultof<VkPipelineBindPoint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkIndirectCommandsLayoutTokenNV>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "pipelineBindPoint = %A" x.pipelineBindPoint
                    sprintf "tokenCount = %A" x.tokenCount
                    sprintf "pTokens = %A" x.pTokens
                    sprintf "streamCount = %A" x.streamCount
                    sprintf "pStreamStrides = %A" x.pStreamStrides
                ] |> sprintf "VkIndirectCommandsLayoutCreateInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceGeneratedCommands : VkBool32

            new(pNext : nativeint, deviceGeneratedCommands : VkBool32) =
                {
                    sType = 1000277007u
                    pNext = pNext
                    deviceGeneratedCommands = deviceGeneratedCommands
                }

            new(deviceGeneratedCommands : VkBool32) =
                VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(Unchecked.defaultof<nativeint>, deviceGeneratedCommands)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceGeneratedCommands = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceGeneratedCommands = %A" x.deviceGeneratedCommands
                ] |> sprintf "VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxGraphicsShaderGroupCount : uint32
            val mutable public maxIndirectSequenceCount : uint32
            val mutable public maxIndirectCommandsTokenCount : uint32
            val mutable public maxIndirectCommandsStreamCount : uint32
            val mutable public maxIndirectCommandsTokenOffset : uint32
            val mutable public maxIndirectCommandsStreamStride : uint32
            val mutable public minSequencesCountBufferOffsetAlignment : uint32
            val mutable public minSequencesIndexBufferOffsetAlignment : uint32
            val mutable public minIndirectCommandsBufferOffsetAlignment : uint32

            new(pNext : nativeint, maxGraphicsShaderGroupCount : uint32, maxIndirectSequenceCount : uint32, maxIndirectCommandsTokenCount : uint32, maxIndirectCommandsStreamCount : uint32, maxIndirectCommandsTokenOffset : uint32, maxIndirectCommandsStreamStride : uint32, minSequencesCountBufferOffsetAlignment : uint32, minSequencesIndexBufferOffsetAlignment : uint32, minIndirectCommandsBufferOffsetAlignment : uint32) =
                {
                    sType = 1000277000u
                    pNext = pNext
                    maxGraphicsShaderGroupCount = maxGraphicsShaderGroupCount
                    maxIndirectSequenceCount = maxIndirectSequenceCount
                    maxIndirectCommandsTokenCount = maxIndirectCommandsTokenCount
                    maxIndirectCommandsStreamCount = maxIndirectCommandsStreamCount
                    maxIndirectCommandsTokenOffset = maxIndirectCommandsTokenOffset
                    maxIndirectCommandsStreamStride = maxIndirectCommandsStreamStride
                    minSequencesCountBufferOffsetAlignment = minSequencesCountBufferOffsetAlignment
                    minSequencesIndexBufferOffsetAlignment = minSequencesIndexBufferOffsetAlignment
                    minIndirectCommandsBufferOffsetAlignment = minIndirectCommandsBufferOffsetAlignment
                }

            new(maxGraphicsShaderGroupCount : uint32, maxIndirectSequenceCount : uint32, maxIndirectCommandsTokenCount : uint32, maxIndirectCommandsStreamCount : uint32, maxIndirectCommandsTokenOffset : uint32, maxIndirectCommandsStreamStride : uint32, minSequencesCountBufferOffsetAlignment : uint32, minSequencesIndexBufferOffsetAlignment : uint32, minIndirectCommandsBufferOffsetAlignment : uint32) =
                VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(Unchecked.defaultof<nativeint>, maxGraphicsShaderGroupCount, maxIndirectSequenceCount, maxIndirectCommandsTokenCount, maxIndirectCommandsStreamCount, maxIndirectCommandsTokenOffset, maxIndirectCommandsStreamStride, minSequencesCountBufferOffsetAlignment, minSequencesIndexBufferOffsetAlignment, minIndirectCommandsBufferOffsetAlignment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxGraphicsShaderGroupCount = Unchecked.defaultof<uint32> && x.maxIndirectSequenceCount = Unchecked.defaultof<uint32> && x.maxIndirectCommandsTokenCount = Unchecked.defaultof<uint32> && x.maxIndirectCommandsStreamCount = Unchecked.defaultof<uint32> && x.maxIndirectCommandsTokenOffset = Unchecked.defaultof<uint32> && x.maxIndirectCommandsStreamStride = Unchecked.defaultof<uint32> && x.minSequencesCountBufferOffsetAlignment = Unchecked.defaultof<uint32> && x.minSequencesIndexBufferOffsetAlignment = Unchecked.defaultof<uint32> && x.minIndirectCommandsBufferOffsetAlignment = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxGraphicsShaderGroupCount = %A" x.maxGraphicsShaderGroupCount
                    sprintf "maxIndirectSequenceCount = %A" x.maxIndirectSequenceCount
                    sprintf "maxIndirectCommandsTokenCount = %A" x.maxIndirectCommandsTokenCount
                    sprintf "maxIndirectCommandsStreamCount = %A" x.maxIndirectCommandsStreamCount
                    sprintf "maxIndirectCommandsTokenOffset = %A" x.maxIndirectCommandsTokenOffset
                    sprintf "maxIndirectCommandsStreamStride = %A" x.maxIndirectCommandsStreamStride
                    sprintf "minSequencesCountBufferOffsetAlignment = %A" x.minSequencesCountBufferOffsetAlignment
                    sprintf "minSequencesIndexBufferOffsetAlignment = %A" x.minSequencesIndexBufferOffsetAlignment
                    sprintf "minIndirectCommandsBufferOffsetAlignment = %A" x.minIndirectCommandsBufferOffsetAlignment
                ] |> sprintf "VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSetStateFlagsIndirectCommandNV =
        struct
            val mutable public data : uint32

            new(data : uint32) =
                {
                    data = data
                }

            member x.IsEmpty =
                x.data = Unchecked.defaultof<uint32>

            static member Empty =
                VkSetStateFlagsIndirectCommandNV(Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "data = %A" x.data
                ] |> sprintf "VkSetStateFlagsIndirectCommandNV { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags with
              static member inline CommandPreprocessReadBitNv = unbox<VkAccessFlags> 0x00020000
              static member inline CommandPreprocessWriteBitNv = unbox<VkAccessFlags> 0x00040000
         type VkObjectType with
              static member inline IndirectCommandsLayoutNv = unbox<VkObjectType> 1000277000
         type VkPipelineCreateFlags with
              static member inline IndirectBindableBitNv = unbox<VkPipelineCreateFlags> 0x00040000
         type VkPipelineStageFlags with
              static member inline CommandPreprocessBitNv = unbox<VkPipelineStageFlags> 0x00020000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetGeneratedCommandsMemoryRequirementsNVDel = delegate of VkDevice * nativeptr<VkGeneratedCommandsMemoryRequirementsInfoNV> * nativeptr<VkMemoryRequirements2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdPreprocessGeneratedCommandsNVDel = delegate of VkCommandBuffer * nativeptr<VkGeneratedCommandsInfoNV> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdExecuteGeneratedCommandsNVDel = delegate of VkCommandBuffer * VkBool32 * nativeptr<VkGeneratedCommandsInfoNV> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBindPipelineShaderGroupNVDel = delegate of VkCommandBuffer * VkPipelineBindPoint * VkPipeline * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateIndirectCommandsLayoutNVDel = delegate of VkDevice * nativeptr<VkIndirectCommandsLayoutCreateInfoNV> * nativeptr<VkAllocationCallbacks> * nativeptr<VkIndirectCommandsLayoutNV> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyIndirectCommandsLayoutNVDel = delegate of VkDevice * VkIndirectCommandsLayoutNV * nativeptr<VkAllocationCallbacks> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVDeviceGeneratedCommands")
            static let s_vkGetGeneratedCommandsMemoryRequirementsNVDel = VkRaw.vkImportInstanceDelegate<VkGetGeneratedCommandsMemoryRequirementsNVDel> "vkGetGeneratedCommandsMemoryRequirementsNV"
            static let s_vkCmdPreprocessGeneratedCommandsNVDel = VkRaw.vkImportInstanceDelegate<VkCmdPreprocessGeneratedCommandsNVDel> "vkCmdPreprocessGeneratedCommandsNV"
            static let s_vkCmdExecuteGeneratedCommandsNVDel = VkRaw.vkImportInstanceDelegate<VkCmdExecuteGeneratedCommandsNVDel> "vkCmdExecuteGeneratedCommandsNV"
            static let s_vkCmdBindPipelineShaderGroupNVDel = VkRaw.vkImportInstanceDelegate<VkCmdBindPipelineShaderGroupNVDel> "vkCmdBindPipelineShaderGroupNV"
            static let s_vkCreateIndirectCommandsLayoutNVDel = VkRaw.vkImportInstanceDelegate<VkCreateIndirectCommandsLayoutNVDel> "vkCreateIndirectCommandsLayoutNV"
            static let s_vkDestroyIndirectCommandsLayoutNVDel = VkRaw.vkImportInstanceDelegate<VkDestroyIndirectCommandsLayoutNVDel> "vkDestroyIndirectCommandsLayoutNV"
            static do Report.End(3) |> ignore
            static member vkGetGeneratedCommandsMemoryRequirementsNV = s_vkGetGeneratedCommandsMemoryRequirementsNVDel
            static member vkCmdPreprocessGeneratedCommandsNV = s_vkCmdPreprocessGeneratedCommandsNVDel
            static member vkCmdExecuteGeneratedCommandsNV = s_vkCmdExecuteGeneratedCommandsNVDel
            static member vkCmdBindPipelineShaderGroupNV = s_vkCmdBindPipelineShaderGroupNVDel
            static member vkCreateIndirectCommandsLayoutNV = s_vkCreateIndirectCommandsLayoutNVDel
            static member vkDestroyIndirectCommandsLayoutNV = s_vkDestroyIndirectCommandsLayoutNVDel
        let vkGetGeneratedCommandsMemoryRequirementsNV(device : VkDevice, pInfo : nativeptr<VkGeneratedCommandsMemoryRequirementsInfoNV>, pMemoryRequirements : nativeptr<VkMemoryRequirements2>) = Loader<unit>.vkGetGeneratedCommandsMemoryRequirementsNV.Invoke(device, pInfo, pMemoryRequirements)
        let vkCmdPreprocessGeneratedCommandsNV(commandBuffer : VkCommandBuffer, pGeneratedCommandsInfo : nativeptr<VkGeneratedCommandsInfoNV>) = Loader<unit>.vkCmdPreprocessGeneratedCommandsNV.Invoke(commandBuffer, pGeneratedCommandsInfo)
        let vkCmdExecuteGeneratedCommandsNV(commandBuffer : VkCommandBuffer, isPreprocessed : VkBool32, pGeneratedCommandsInfo : nativeptr<VkGeneratedCommandsInfoNV>) = Loader<unit>.vkCmdExecuteGeneratedCommandsNV.Invoke(commandBuffer, isPreprocessed, pGeneratedCommandsInfo)
        let vkCmdBindPipelineShaderGroupNV(commandBuffer : VkCommandBuffer, pipelineBindPoint : VkPipelineBindPoint, pipeline : VkPipeline, groupIndex : uint32) = Loader<unit>.vkCmdBindPipelineShaderGroupNV.Invoke(commandBuffer, pipelineBindPoint, pipeline, groupIndex)
        let vkCreateIndirectCommandsLayoutNV(device : VkDevice, pCreateInfo : nativeptr<VkIndirectCommandsLayoutCreateInfoNV>, pAllocator : nativeptr<VkAllocationCallbacks>, pIndirectCommandsLayout : nativeptr<VkIndirectCommandsLayoutNV>) = Loader<unit>.vkCreateIndirectCommandsLayoutNV.Invoke(device, pCreateInfo, pAllocator, pIndirectCommandsLayout)
        let vkDestroyIndirectCommandsLayoutNV(device : VkDevice, indirectCommandsLayout : VkIndirectCommandsLayoutNV, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyIndirectCommandsLayoutNV.Invoke(device, indirectCommandsLayout, pAllocator)

module KHRFragmentShadingRate =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRCreateRenderpass2
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance2
    open KHRMultiview
    let Name = "VK_KHR_fragment_shading_rate"
    let Number = 227

    let Required = [ KHRCreateRenderpass2.Name; KHRGetPhysicalDeviceProperties2.Name ]


    type VkFragmentShadingRateCombinerOpKHR =
        | Keep = 0
        | Replace = 1
        | Min = 2
        | Max = 3
        | Mul = 4

    [<StructLayout(LayoutKind.Explicit, Size = 8)>]
    type VkFragmentShadingRateCombinerOpKHR_2 =
        struct
            [<FieldOffset(0)>]
            val mutable public First : VkFragmentShadingRateCombinerOpKHR

            member x.Item
                with get (i : int) : VkFragmentShadingRateCombinerOpKHR =
                    if i < 0 || i > 1 then raise <| IndexOutOfRangeException()
                    let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                    NativePtr.get ptr i
                and set (i : int) (value : VkFragmentShadingRateCombinerOpKHR) =
                    if i < 0 || i > 1 then raise <| IndexOutOfRangeException()
                    let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                    NativePtr.set ptr i value

            member x.Length = 2

            interface System.Collections.IEnumerable with
                member x.GetEnumerator() = let x = x in (Seq.init 2 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
            interface System.Collections.Generic.IEnumerable<VkFragmentShadingRateCombinerOpKHR> with
                member x.GetEnumerator() = let x = x in (Seq.init 2 (fun i -> x.[i])).GetEnumerator()
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkFragmentShadingRateAttachmentInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pFragmentShadingRateAttachment : nativeptr<VkAttachmentReference2>
            val mutable public shadingRateAttachmentTexelSize : VkExtent2D

            new(pNext : nativeint, pFragmentShadingRateAttachment : nativeptr<VkAttachmentReference2>, shadingRateAttachmentTexelSize : VkExtent2D) =
                {
                    sType = 1000226000u
                    pNext = pNext
                    pFragmentShadingRateAttachment = pFragmentShadingRateAttachment
                    shadingRateAttachmentTexelSize = shadingRateAttachmentTexelSize
                }

            new(pFragmentShadingRateAttachment : nativeptr<VkAttachmentReference2>, shadingRateAttachmentTexelSize : VkExtent2D) =
                VkFragmentShadingRateAttachmentInfoKHR(Unchecked.defaultof<nativeint>, pFragmentShadingRateAttachment, shadingRateAttachmentTexelSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pFragmentShadingRateAttachment = Unchecked.defaultof<nativeptr<VkAttachmentReference2>> && x.shadingRateAttachmentTexelSize = Unchecked.defaultof<VkExtent2D>

            static member Empty =
                VkFragmentShadingRateAttachmentInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkAttachmentReference2>>, Unchecked.defaultof<VkExtent2D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pFragmentShadingRateAttachment = %A" x.pFragmentShadingRateAttachment
                    sprintf "shadingRateAttachmentTexelSize = %A" x.shadingRateAttachmentTexelSize
                ] |> sprintf "VkFragmentShadingRateAttachmentInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentShadingRateFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipelineFragmentShadingRate : VkBool32
            val mutable public primitiveFragmentShadingRate : VkBool32
            val mutable public attachmentFragmentShadingRate : VkBool32

            new(pNext : nativeint, pipelineFragmentShadingRate : VkBool32, primitiveFragmentShadingRate : VkBool32, attachmentFragmentShadingRate : VkBool32) =
                {
                    sType = 1000226003u
                    pNext = pNext
                    pipelineFragmentShadingRate = pipelineFragmentShadingRate
                    primitiveFragmentShadingRate = primitiveFragmentShadingRate
                    attachmentFragmentShadingRate = attachmentFragmentShadingRate
                }

            new(pipelineFragmentShadingRate : VkBool32, primitiveFragmentShadingRate : VkBool32, attachmentFragmentShadingRate : VkBool32) =
                VkPhysicalDeviceFragmentShadingRateFeaturesKHR(Unchecked.defaultof<nativeint>, pipelineFragmentShadingRate, primitiveFragmentShadingRate, attachmentFragmentShadingRate)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipelineFragmentShadingRate = Unchecked.defaultof<VkBool32> && x.primitiveFragmentShadingRate = Unchecked.defaultof<VkBool32> && x.attachmentFragmentShadingRate = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceFragmentShadingRateFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipelineFragmentShadingRate = %A" x.pipelineFragmentShadingRate
                    sprintf "primitiveFragmentShadingRate = %A" x.primitiveFragmentShadingRate
                    sprintf "attachmentFragmentShadingRate = %A" x.attachmentFragmentShadingRate
                ] |> sprintf "VkPhysicalDeviceFragmentShadingRateFeaturesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentShadingRateKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public sampleCounts : VkSampleCountFlags
            val mutable public fragmentSize : VkExtent2D

            new(pNext : nativeint, sampleCounts : VkSampleCountFlags, fragmentSize : VkExtent2D) =
                {
                    sType = 1000226004u
                    pNext = pNext
                    sampleCounts = sampleCounts
                    fragmentSize = fragmentSize
                }

            new(sampleCounts : VkSampleCountFlags, fragmentSize : VkExtent2D) =
                VkPhysicalDeviceFragmentShadingRateKHR(Unchecked.defaultof<nativeint>, sampleCounts, fragmentSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.sampleCounts = Unchecked.defaultof<VkSampleCountFlags> && x.fragmentSize = Unchecked.defaultof<VkExtent2D>

            static member Empty =
                VkPhysicalDeviceFragmentShadingRateKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkExtent2D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "sampleCounts = %A" x.sampleCounts
                    sprintf "fragmentSize = %A" x.fragmentSize
                ] |> sprintf "VkPhysicalDeviceFragmentShadingRateKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentShadingRatePropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public minFragmentShadingRateAttachmentTexelSize : VkExtent2D
            val mutable public maxFragmentShadingRateAttachmentTexelSize : VkExtent2D
            val mutable public maxFragmentShadingRateAttachmentTexelSizeAspectRatio : uint32
            val mutable public primitiveFragmentShadingRateWithMultipleViewports : VkBool32
            val mutable public layeredShadingRateAttachments : VkBool32
            val mutable public fragmentShadingRateNonTrivialCombinerOps : VkBool32
            val mutable public maxFragmentSize : VkExtent2D
            val mutable public maxFragmentSizeAspectRatio : uint32
            val mutable public maxFragmentShadingRateCoverageSamples : uint32
            val mutable public maxFragmentShadingRateRasterizationSamples : VkSampleCountFlags
            val mutable public fragmentShadingRateWithShaderDepthStencilWrites : VkBool32
            val mutable public fragmentShadingRateWithSampleMask : VkBool32
            val mutable public fragmentShadingRateWithShaderSampleMask : VkBool32
            val mutable public fragmentShadingRateWithConservativeRasterization : VkBool32
            val mutable public fragmentShadingRateWithFragmentShaderInterlock : VkBool32
            val mutable public fragmentShadingRateWithCustomSampleLocations : VkBool32
            val mutable public fragmentShadingRateStrictMultiplyCombiner : VkBool32

            new(pNext : nativeint, minFragmentShadingRateAttachmentTexelSize : VkExtent2D, maxFragmentShadingRateAttachmentTexelSize : VkExtent2D, maxFragmentShadingRateAttachmentTexelSizeAspectRatio : uint32, primitiveFragmentShadingRateWithMultipleViewports : VkBool32, layeredShadingRateAttachments : VkBool32, fragmentShadingRateNonTrivialCombinerOps : VkBool32, maxFragmentSize : VkExtent2D, maxFragmentSizeAspectRatio : uint32, maxFragmentShadingRateCoverageSamples : uint32, maxFragmentShadingRateRasterizationSamples : VkSampleCountFlags, fragmentShadingRateWithShaderDepthStencilWrites : VkBool32, fragmentShadingRateWithSampleMask : VkBool32, fragmentShadingRateWithShaderSampleMask : VkBool32, fragmentShadingRateWithConservativeRasterization : VkBool32, fragmentShadingRateWithFragmentShaderInterlock : VkBool32, fragmentShadingRateWithCustomSampleLocations : VkBool32, fragmentShadingRateStrictMultiplyCombiner : VkBool32) =
                {
                    sType = 1000226002u
                    pNext = pNext
                    minFragmentShadingRateAttachmentTexelSize = minFragmentShadingRateAttachmentTexelSize
                    maxFragmentShadingRateAttachmentTexelSize = maxFragmentShadingRateAttachmentTexelSize
                    maxFragmentShadingRateAttachmentTexelSizeAspectRatio = maxFragmentShadingRateAttachmentTexelSizeAspectRatio
                    primitiveFragmentShadingRateWithMultipleViewports = primitiveFragmentShadingRateWithMultipleViewports
                    layeredShadingRateAttachments = layeredShadingRateAttachments
                    fragmentShadingRateNonTrivialCombinerOps = fragmentShadingRateNonTrivialCombinerOps
                    maxFragmentSize = maxFragmentSize
                    maxFragmentSizeAspectRatio = maxFragmentSizeAspectRatio
                    maxFragmentShadingRateCoverageSamples = maxFragmentShadingRateCoverageSamples
                    maxFragmentShadingRateRasterizationSamples = maxFragmentShadingRateRasterizationSamples
                    fragmentShadingRateWithShaderDepthStencilWrites = fragmentShadingRateWithShaderDepthStencilWrites
                    fragmentShadingRateWithSampleMask = fragmentShadingRateWithSampleMask
                    fragmentShadingRateWithShaderSampleMask = fragmentShadingRateWithShaderSampleMask
                    fragmentShadingRateWithConservativeRasterization = fragmentShadingRateWithConservativeRasterization
                    fragmentShadingRateWithFragmentShaderInterlock = fragmentShadingRateWithFragmentShaderInterlock
                    fragmentShadingRateWithCustomSampleLocations = fragmentShadingRateWithCustomSampleLocations
                    fragmentShadingRateStrictMultiplyCombiner = fragmentShadingRateStrictMultiplyCombiner
                }

            new(minFragmentShadingRateAttachmentTexelSize : VkExtent2D, maxFragmentShadingRateAttachmentTexelSize : VkExtent2D, maxFragmentShadingRateAttachmentTexelSizeAspectRatio : uint32, primitiveFragmentShadingRateWithMultipleViewports : VkBool32, layeredShadingRateAttachments : VkBool32, fragmentShadingRateNonTrivialCombinerOps : VkBool32, maxFragmentSize : VkExtent2D, maxFragmentSizeAspectRatio : uint32, maxFragmentShadingRateCoverageSamples : uint32, maxFragmentShadingRateRasterizationSamples : VkSampleCountFlags, fragmentShadingRateWithShaderDepthStencilWrites : VkBool32, fragmentShadingRateWithSampleMask : VkBool32, fragmentShadingRateWithShaderSampleMask : VkBool32, fragmentShadingRateWithConservativeRasterization : VkBool32, fragmentShadingRateWithFragmentShaderInterlock : VkBool32, fragmentShadingRateWithCustomSampleLocations : VkBool32, fragmentShadingRateStrictMultiplyCombiner : VkBool32) =
                VkPhysicalDeviceFragmentShadingRatePropertiesKHR(Unchecked.defaultof<nativeint>, minFragmentShadingRateAttachmentTexelSize, maxFragmentShadingRateAttachmentTexelSize, maxFragmentShadingRateAttachmentTexelSizeAspectRatio, primitiveFragmentShadingRateWithMultipleViewports, layeredShadingRateAttachments, fragmentShadingRateNonTrivialCombinerOps, maxFragmentSize, maxFragmentSizeAspectRatio, maxFragmentShadingRateCoverageSamples, maxFragmentShadingRateRasterizationSamples, fragmentShadingRateWithShaderDepthStencilWrites, fragmentShadingRateWithSampleMask, fragmentShadingRateWithShaderSampleMask, fragmentShadingRateWithConservativeRasterization, fragmentShadingRateWithFragmentShaderInterlock, fragmentShadingRateWithCustomSampleLocations, fragmentShadingRateStrictMultiplyCombiner)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.minFragmentShadingRateAttachmentTexelSize = Unchecked.defaultof<VkExtent2D> && x.maxFragmentShadingRateAttachmentTexelSize = Unchecked.defaultof<VkExtent2D> && x.maxFragmentShadingRateAttachmentTexelSizeAspectRatio = Unchecked.defaultof<uint32> && x.primitiveFragmentShadingRateWithMultipleViewports = Unchecked.defaultof<VkBool32> && x.layeredShadingRateAttachments = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateNonTrivialCombinerOps = Unchecked.defaultof<VkBool32> && x.maxFragmentSize = Unchecked.defaultof<VkExtent2D> && x.maxFragmentSizeAspectRatio = Unchecked.defaultof<uint32> && x.maxFragmentShadingRateCoverageSamples = Unchecked.defaultof<uint32> && x.maxFragmentShadingRateRasterizationSamples = Unchecked.defaultof<VkSampleCountFlags> && x.fragmentShadingRateWithShaderDepthStencilWrites = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateWithSampleMask = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateWithShaderSampleMask = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateWithConservativeRasterization = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateWithFragmentShaderInterlock = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateWithCustomSampleLocations = Unchecked.defaultof<VkBool32> && x.fragmentShadingRateStrictMultiplyCombiner = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceFragmentShadingRatePropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "minFragmentShadingRateAttachmentTexelSize = %A" x.minFragmentShadingRateAttachmentTexelSize
                    sprintf "maxFragmentShadingRateAttachmentTexelSize = %A" x.maxFragmentShadingRateAttachmentTexelSize
                    sprintf "maxFragmentShadingRateAttachmentTexelSizeAspectRatio = %A" x.maxFragmentShadingRateAttachmentTexelSizeAspectRatio
                    sprintf "primitiveFragmentShadingRateWithMultipleViewports = %A" x.primitiveFragmentShadingRateWithMultipleViewports
                    sprintf "layeredShadingRateAttachments = %A" x.layeredShadingRateAttachments
                    sprintf "fragmentShadingRateNonTrivialCombinerOps = %A" x.fragmentShadingRateNonTrivialCombinerOps
                    sprintf "maxFragmentSize = %A" x.maxFragmentSize
                    sprintf "maxFragmentSizeAspectRatio = %A" x.maxFragmentSizeAspectRatio
                    sprintf "maxFragmentShadingRateCoverageSamples = %A" x.maxFragmentShadingRateCoverageSamples
                    sprintf "maxFragmentShadingRateRasterizationSamples = %A" x.maxFragmentShadingRateRasterizationSamples
                    sprintf "fragmentShadingRateWithShaderDepthStencilWrites = %A" x.fragmentShadingRateWithShaderDepthStencilWrites
                    sprintf "fragmentShadingRateWithSampleMask = %A" x.fragmentShadingRateWithSampleMask
                    sprintf "fragmentShadingRateWithShaderSampleMask = %A" x.fragmentShadingRateWithShaderSampleMask
                    sprintf "fragmentShadingRateWithConservativeRasterization = %A" x.fragmentShadingRateWithConservativeRasterization
                    sprintf "fragmentShadingRateWithFragmentShaderInterlock = %A" x.fragmentShadingRateWithFragmentShaderInterlock
                    sprintf "fragmentShadingRateWithCustomSampleLocations = %A" x.fragmentShadingRateWithCustomSampleLocations
                    sprintf "fragmentShadingRateStrictMultiplyCombiner = %A" x.fragmentShadingRateStrictMultiplyCombiner
                ] |> sprintf "VkPhysicalDeviceFragmentShadingRatePropertiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineFragmentShadingRateStateCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fragmentSize : VkExtent2D
            val mutable public combinerOps : VkFragmentShadingRateCombinerOpKHR_2

            new(pNext : nativeint, fragmentSize : VkExtent2D, combinerOps : VkFragmentShadingRateCombinerOpKHR_2) =
                {
                    sType = 1000226001u
                    pNext = pNext
                    fragmentSize = fragmentSize
                    combinerOps = combinerOps
                }

            new(fragmentSize : VkExtent2D, combinerOps : VkFragmentShadingRateCombinerOpKHR_2) =
                VkPipelineFragmentShadingRateStateCreateInfoKHR(Unchecked.defaultof<nativeint>, fragmentSize, combinerOps)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fragmentSize = Unchecked.defaultof<VkExtent2D> && x.combinerOps = Unchecked.defaultof<VkFragmentShadingRateCombinerOpKHR_2>

            static member Empty =
                VkPipelineFragmentShadingRateStateCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkFragmentShadingRateCombinerOpKHR_2>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fragmentSize = %A" x.fragmentSize
                    sprintf "combinerOps = %A" x.combinerOps
                ] |> sprintf "VkPipelineFragmentShadingRateStateCreateInfoKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags with
              static member inline FragmentShadingRateAttachmentReadBitKhr = unbox<VkAccessFlags> 0x00800000
         type VkDynamicState with
              static member inline FragmentShadingRateKhr = unbox<VkDynamicState> 1000226000
         type VkFormatFeatureFlags with
              static member inline FragmentShadingRateAttachmentBitKhr = unbox<VkFormatFeatureFlags> 0x40000000
         type VkImageLayout with
              static member inline FragmentShadingRateAttachmentOptimalKhr = unbox<VkImageLayout> 1000164003
         type VkImageUsageFlags with
              static member inline FragmentShadingRateAttachmentBitKhr = unbox<VkImageUsageFlags> 0x00000100
         type VkPipelineStageFlags with
              static member inline FragmentShadingRateAttachmentBitKhr = unbox<VkPipelineStageFlags> 0x00400000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceFragmentShadingRatesKHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkPhysicalDeviceFragmentShadingRateKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetFragmentShadingRateKHRDel = delegate of VkCommandBuffer * nativeptr<VkExtent2D> * VkFragmentShadingRateCombinerOpKHR_2 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRFragmentShadingRate")
            static let s_vkGetPhysicalDeviceFragmentShadingRatesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceFragmentShadingRatesKHRDel> "vkGetPhysicalDeviceFragmentShadingRatesKHR"
            static let s_vkCmdSetFragmentShadingRateKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdSetFragmentShadingRateKHRDel> "vkCmdSetFragmentShadingRateKHR"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceFragmentShadingRatesKHR = s_vkGetPhysicalDeviceFragmentShadingRatesKHRDel
            static member vkCmdSetFragmentShadingRateKHR = s_vkCmdSetFragmentShadingRateKHRDel
        let vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice : VkPhysicalDevice, pFragmentShadingRateCount : nativeptr<uint32>, pFragmentShadingRates : nativeptr<VkPhysicalDeviceFragmentShadingRateKHR>) = Loader<unit>.vkGetPhysicalDeviceFragmentShadingRatesKHR.Invoke(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates)
        let vkCmdSetFragmentShadingRateKHR(commandBuffer : VkCommandBuffer, pFragmentSize : nativeptr<VkExtent2D>, combinerOps : VkFragmentShadingRateCombinerOpKHR_2) = Loader<unit>.vkCmdSetFragmentShadingRateKHR.Invoke(commandBuffer, pFragmentSize, combinerOps)

    module KHRFormatFeatureFlags2 =
        [<AutoOpen>]
        module EnumExtensions =
             type VkFormatFeatureFlags2 with
                  static member inline FormatFeature2FragmentShadingRateAttachmentBitKhr = unbox<VkFormatFeatureFlags2> 0x40000000


module NVShadingRateImage =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_NV_shading_rate_image"
    let Number = 165

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkShadingRatePaletteEntryNV =
        | NoInvocations = 0
        | D16InvocationsPerPixel = 1
        | D8InvocationsPerPixel = 2
        | D4InvocationsPerPixel = 3
        | D2InvocationsPerPixel = 4
        | D1InvocationPerPixel = 5
        | D1InvocationPer2x1Pixels = 6
        | D1InvocationPer1x2Pixels = 7
        | D1InvocationPer2x2Pixels = 8
        | D1InvocationPer4x2Pixels = 9
        | D1InvocationPer2x4Pixels = 10
        | D1InvocationPer4x4Pixels = 11

    type VkCoarseSampleOrderTypeNV =
        | Default = 0
        | Custom = 1
        | PixelMajor = 2
        | SampleMajor = 3


    [<StructLayout(LayoutKind.Sequential)>]
    type VkCoarseSampleLocationNV =
        struct
            val mutable public pixelX : uint32
            val mutable public pixelY : uint32
            val mutable public sample : uint32

            new(pixelX : uint32, pixelY : uint32, sample : uint32) =
                {
                    pixelX = pixelX
                    pixelY = pixelY
                    sample = sample
                }

            member x.IsEmpty =
                x.pixelX = Unchecked.defaultof<uint32> && x.pixelY = Unchecked.defaultof<uint32> && x.sample = Unchecked.defaultof<uint32>

            static member Empty =
                VkCoarseSampleLocationNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "pixelX = %A" x.pixelX
                    sprintf "pixelY = %A" x.pixelY
                    sprintf "sample = %A" x.sample
                ] |> sprintf "VkCoarseSampleLocationNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCoarseSampleOrderCustomNV =
        struct
            val mutable public shadingRate : VkShadingRatePaletteEntryNV
            val mutable public sampleCount : uint32
            val mutable public sampleLocationCount : uint32
            val mutable public pSampleLocations : nativeptr<VkCoarseSampleLocationNV>

            new(shadingRate : VkShadingRatePaletteEntryNV, sampleCount : uint32, sampleLocationCount : uint32, pSampleLocations : nativeptr<VkCoarseSampleLocationNV>) =
                {
                    shadingRate = shadingRate
                    sampleCount = sampleCount
                    sampleLocationCount = sampleLocationCount
                    pSampleLocations = pSampleLocations
                }

            member x.IsEmpty =
                x.shadingRate = Unchecked.defaultof<VkShadingRatePaletteEntryNV> && x.sampleCount = Unchecked.defaultof<uint32> && x.sampleLocationCount = Unchecked.defaultof<uint32> && x.pSampleLocations = Unchecked.defaultof<nativeptr<VkCoarseSampleLocationNV>>

            static member Empty =
                VkCoarseSampleOrderCustomNV(Unchecked.defaultof<VkShadingRatePaletteEntryNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkCoarseSampleLocationNV>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "shadingRate = %A" x.shadingRate
                    sprintf "sampleCount = %A" x.sampleCount
                    sprintf "sampleLocationCount = %A" x.sampleLocationCount
                    sprintf "pSampleLocations = %A" x.pSampleLocations
                ] |> sprintf "VkCoarseSampleOrderCustomNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShadingRateImageFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shadingRateImage : VkBool32
            val mutable public shadingRateCoarseSampleOrder : VkBool32

            new(pNext : nativeint, shadingRateImage : VkBool32, shadingRateCoarseSampleOrder : VkBool32) =
                {
                    sType = 1000164001u
                    pNext = pNext
                    shadingRateImage = shadingRateImage
                    shadingRateCoarseSampleOrder = shadingRateCoarseSampleOrder
                }

            new(shadingRateImage : VkBool32, shadingRateCoarseSampleOrder : VkBool32) =
                VkPhysicalDeviceShadingRateImageFeaturesNV(Unchecked.defaultof<nativeint>, shadingRateImage, shadingRateCoarseSampleOrder)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shadingRateImage = Unchecked.defaultof<VkBool32> && x.shadingRateCoarseSampleOrder = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShadingRateImageFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shadingRateImage = %A" x.shadingRateImage
                    sprintf "shadingRateCoarseSampleOrder = %A" x.shadingRateCoarseSampleOrder
                ] |> sprintf "VkPhysicalDeviceShadingRateImageFeaturesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShadingRateImagePropertiesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shadingRateTexelSize : VkExtent2D
            val mutable public shadingRatePaletteSize : uint32
            val mutable public shadingRateMaxCoarseSamples : uint32

            new(pNext : nativeint, shadingRateTexelSize : VkExtent2D, shadingRatePaletteSize : uint32, shadingRateMaxCoarseSamples : uint32) =
                {
                    sType = 1000164002u
                    pNext = pNext
                    shadingRateTexelSize = shadingRateTexelSize
                    shadingRatePaletteSize = shadingRatePaletteSize
                    shadingRateMaxCoarseSamples = shadingRateMaxCoarseSamples
                }

            new(shadingRateTexelSize : VkExtent2D, shadingRatePaletteSize : uint32, shadingRateMaxCoarseSamples : uint32) =
                VkPhysicalDeviceShadingRateImagePropertiesNV(Unchecked.defaultof<nativeint>, shadingRateTexelSize, shadingRatePaletteSize, shadingRateMaxCoarseSamples)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shadingRateTexelSize = Unchecked.defaultof<VkExtent2D> && x.shadingRatePaletteSize = Unchecked.defaultof<uint32> && x.shadingRateMaxCoarseSamples = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceShadingRateImagePropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shadingRateTexelSize = %A" x.shadingRateTexelSize
                    sprintf "shadingRatePaletteSize = %A" x.shadingRatePaletteSize
                    sprintf "shadingRateMaxCoarseSamples = %A" x.shadingRateMaxCoarseSamples
                ] |> sprintf "VkPhysicalDeviceShadingRateImagePropertiesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineViewportCoarseSampleOrderStateCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public sampleOrderType : VkCoarseSampleOrderTypeNV
            val mutable public customSampleOrderCount : uint32
            val mutable public pCustomSampleOrders : nativeptr<VkCoarseSampleOrderCustomNV>

            new(pNext : nativeint, sampleOrderType : VkCoarseSampleOrderTypeNV, customSampleOrderCount : uint32, pCustomSampleOrders : nativeptr<VkCoarseSampleOrderCustomNV>) =
                {
                    sType = 1000164005u
                    pNext = pNext
                    sampleOrderType = sampleOrderType
                    customSampleOrderCount = customSampleOrderCount
                    pCustomSampleOrders = pCustomSampleOrders
                }

            new(sampleOrderType : VkCoarseSampleOrderTypeNV, customSampleOrderCount : uint32, pCustomSampleOrders : nativeptr<VkCoarseSampleOrderCustomNV>) =
                VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(Unchecked.defaultof<nativeint>, sampleOrderType, customSampleOrderCount, pCustomSampleOrders)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.sampleOrderType = Unchecked.defaultof<VkCoarseSampleOrderTypeNV> && x.customSampleOrderCount = Unchecked.defaultof<uint32> && x.pCustomSampleOrders = Unchecked.defaultof<nativeptr<VkCoarseSampleOrderCustomNV>>

            static member Empty =
                VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCoarseSampleOrderTypeNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkCoarseSampleOrderCustomNV>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "sampleOrderType = %A" x.sampleOrderType
                    sprintf "customSampleOrderCount = %A" x.customSampleOrderCount
                    sprintf "pCustomSampleOrders = %A" x.pCustomSampleOrders
                ] |> sprintf "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkShadingRatePaletteNV =
        struct
            val mutable public shadingRatePaletteEntryCount : uint32
            val mutable public pShadingRatePaletteEntries : nativeptr<VkShadingRatePaletteEntryNV>

            new(shadingRatePaletteEntryCount : uint32, pShadingRatePaletteEntries : nativeptr<VkShadingRatePaletteEntryNV>) =
                {
                    shadingRatePaletteEntryCount = shadingRatePaletteEntryCount
                    pShadingRatePaletteEntries = pShadingRatePaletteEntries
                }

            member x.IsEmpty =
                x.shadingRatePaletteEntryCount = Unchecked.defaultof<uint32> && x.pShadingRatePaletteEntries = Unchecked.defaultof<nativeptr<VkShadingRatePaletteEntryNV>>

            static member Empty =
                VkShadingRatePaletteNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkShadingRatePaletteEntryNV>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "shadingRatePaletteEntryCount = %A" x.shadingRatePaletteEntryCount
                    sprintf "pShadingRatePaletteEntries = %A" x.pShadingRatePaletteEntries
                ] |> sprintf "VkShadingRatePaletteNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineViewportShadingRateImageStateCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shadingRateImageEnable : VkBool32
            val mutable public viewportCount : uint32
            val mutable public pShadingRatePalettes : nativeptr<VkShadingRatePaletteNV>

            new(pNext : nativeint, shadingRateImageEnable : VkBool32, viewportCount : uint32, pShadingRatePalettes : nativeptr<VkShadingRatePaletteNV>) =
                {
                    sType = 1000164000u
                    pNext = pNext
                    shadingRateImageEnable = shadingRateImageEnable
                    viewportCount = viewportCount
                    pShadingRatePalettes = pShadingRatePalettes
                }

            new(shadingRateImageEnable : VkBool32, viewportCount : uint32, pShadingRatePalettes : nativeptr<VkShadingRatePaletteNV>) =
                VkPipelineViewportShadingRateImageStateCreateInfoNV(Unchecked.defaultof<nativeint>, shadingRateImageEnable, viewportCount, pShadingRatePalettes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shadingRateImageEnable = Unchecked.defaultof<VkBool32> && x.viewportCount = Unchecked.defaultof<uint32> && x.pShadingRatePalettes = Unchecked.defaultof<nativeptr<VkShadingRatePaletteNV>>

            static member Empty =
                VkPipelineViewportShadingRateImageStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkShadingRatePaletteNV>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shadingRateImageEnable = %A" x.shadingRateImageEnable
                    sprintf "viewportCount = %A" x.viewportCount
                    sprintf "pShadingRatePalettes = %A" x.pShadingRatePalettes
                ] |> sprintf "VkPipelineViewportShadingRateImageStateCreateInfoNV { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags with
              static member inline ShadingRateImageReadBitNv = unbox<VkAccessFlags> 0x00800000
         type VkDynamicState with
              static member inline ViewportShadingRatePaletteNv = unbox<VkDynamicState> 1000164004
              static member inline ViewportCoarseSampleOrderNv = unbox<VkDynamicState> 1000164006
         type VkImageLayout with
              static member inline ShadingRateOptimalNv = unbox<VkImageLayout> 1000164003
         type VkImageUsageFlags with
              static member inline ShadingRateImageBitNv = unbox<VkImageUsageFlags> 0x00000100
         type VkPipelineStageFlags with
              static member inline ShadingRateImageBitNv = unbox<VkPipelineStageFlags> 0x00400000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBindShadingRateImageNVDel = delegate of VkCommandBuffer * VkImageView * VkImageLayout -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetViewportShadingRatePaletteNVDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkShadingRatePaletteNV> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetCoarseSampleOrderNVDel = delegate of VkCommandBuffer * VkCoarseSampleOrderTypeNV * uint32 * nativeptr<VkCoarseSampleOrderCustomNV> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVShadingRateImage")
            static let s_vkCmdBindShadingRateImageNVDel = VkRaw.vkImportInstanceDelegate<VkCmdBindShadingRateImageNVDel> "vkCmdBindShadingRateImageNV"
            static let s_vkCmdSetViewportShadingRatePaletteNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetViewportShadingRatePaletteNVDel> "vkCmdSetViewportShadingRatePaletteNV"
            static let s_vkCmdSetCoarseSampleOrderNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetCoarseSampleOrderNVDel> "vkCmdSetCoarseSampleOrderNV"
            static do Report.End(3) |> ignore
            static member vkCmdBindShadingRateImageNV = s_vkCmdBindShadingRateImageNVDel
            static member vkCmdSetViewportShadingRatePaletteNV = s_vkCmdSetViewportShadingRatePaletteNVDel
            static member vkCmdSetCoarseSampleOrderNV = s_vkCmdSetCoarseSampleOrderNVDel
        let vkCmdBindShadingRateImageNV(commandBuffer : VkCommandBuffer, imageView : VkImageView, imageLayout : VkImageLayout) = Loader<unit>.vkCmdBindShadingRateImageNV.Invoke(commandBuffer, imageView, imageLayout)
        let vkCmdSetViewportShadingRatePaletteNV(commandBuffer : VkCommandBuffer, firstViewport : uint32, viewportCount : uint32, pShadingRatePalettes : nativeptr<VkShadingRatePaletteNV>) = Loader<unit>.vkCmdSetViewportShadingRatePaletteNV.Invoke(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes)
        let vkCmdSetCoarseSampleOrderNV(commandBuffer : VkCommandBuffer, sampleOrderType : VkCoarseSampleOrderTypeNV, customSampleOrderCount : uint32, pCustomSampleOrders : nativeptr<VkCoarseSampleOrderCustomNV>) = Loader<unit>.vkCmdSetCoarseSampleOrderNV.Invoke(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders)

module KHRDeferredHostOperations =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_deferred_host_operations"
    let Number = 269



    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeferredOperationKHR =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkDeferredOperationKHR(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<AutoOpen>]
    module EnumExtensions =
         type VkObjectType with
              static member inline DeferredOperationKhr = unbox<VkObjectType> 1000268000
         type VkResult with
              static member inline ThreadIdleKhr = unbox<VkResult> 1000268000
              static member inline ThreadDoneKhr = unbox<VkResult> 1000268001
              static member inline OperationDeferredKhr = unbox<VkResult> 1000268002
              static member inline OperationNotDeferredKhr = unbox<VkResult> 1000268003

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateDeferredOperationKHRDel = delegate of VkDevice * nativeptr<VkAllocationCallbacks> * nativeptr<VkDeferredOperationKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyDeferredOperationKHRDel = delegate of VkDevice * VkDeferredOperationKHR * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDeferredOperationMaxConcurrencyKHRDel = delegate of VkDevice * VkDeferredOperationKHR -> uint32
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDeferredOperationResultKHRDel = delegate of VkDevice * VkDeferredOperationKHR -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDeferredOperationJoinKHRDel = delegate of VkDevice * VkDeferredOperationKHR -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRDeferredHostOperations")
            static let s_vkCreateDeferredOperationKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateDeferredOperationKHRDel> "vkCreateDeferredOperationKHR"
            static let s_vkDestroyDeferredOperationKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroyDeferredOperationKHRDel> "vkDestroyDeferredOperationKHR"
            static let s_vkGetDeferredOperationMaxConcurrencyKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeferredOperationMaxConcurrencyKHRDel> "vkGetDeferredOperationMaxConcurrencyKHR"
            static let s_vkGetDeferredOperationResultKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeferredOperationResultKHRDel> "vkGetDeferredOperationResultKHR"
            static let s_vkDeferredOperationJoinKHRDel = VkRaw.vkImportInstanceDelegate<VkDeferredOperationJoinKHRDel> "vkDeferredOperationJoinKHR"
            static do Report.End(3) |> ignore
            static member vkCreateDeferredOperationKHR = s_vkCreateDeferredOperationKHRDel
            static member vkDestroyDeferredOperationKHR = s_vkDestroyDeferredOperationKHRDel
            static member vkGetDeferredOperationMaxConcurrencyKHR = s_vkGetDeferredOperationMaxConcurrencyKHRDel
            static member vkGetDeferredOperationResultKHR = s_vkGetDeferredOperationResultKHRDel
            static member vkDeferredOperationJoinKHR = s_vkDeferredOperationJoinKHRDel
        let vkCreateDeferredOperationKHR(device : VkDevice, pAllocator : nativeptr<VkAllocationCallbacks>, pDeferredOperation : nativeptr<VkDeferredOperationKHR>) = Loader<unit>.vkCreateDeferredOperationKHR.Invoke(device, pAllocator, pDeferredOperation)
        let vkDestroyDeferredOperationKHR(device : VkDevice, operation : VkDeferredOperationKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyDeferredOperationKHR.Invoke(device, operation, pAllocator)
        let vkGetDeferredOperationMaxConcurrencyKHR(device : VkDevice, operation : VkDeferredOperationKHR) = Loader<unit>.vkGetDeferredOperationMaxConcurrencyKHR.Invoke(device, operation)
        let vkGetDeferredOperationResultKHR(device : VkDevice, operation : VkDeferredOperationKHR) = Loader<unit>.vkGetDeferredOperationResultKHR.Invoke(device, operation)
        let vkDeferredOperationJoinKHR(device : VkDevice, operation : VkDeferredOperationKHR) = Loader<unit>.vkDeferredOperationJoinKHR.Invoke(device, operation)

module KHRAccelerationStructure =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open EXTDescriptorIndexing
    open KHRBufferDeviceAddress
    open KHRDeferredHostOperations
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance3
    let Name = "VK_KHR_acceleration_structure"
    let Number = 151

    let Required = [ EXTDescriptorIndexing.Name; KHRBufferDeviceAddress.Name; KHRDeferredHostOperations.Name ]



    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureKHR =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkAccelerationStructureKHR(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    type VkAccelerationStructureTypeKHR =
        | TopLevel = 0
        | BottomLevel = 1
        | Generic = 2

    type VkAccelerationStructureBuildTypeKHR =
        | Host = 0
        | Device = 1
        | HostOrDevice = 2

    [<Flags>]
    type VkGeometryFlagsKHR =
        | All = 3
        | None = 0
        | OpaqueBit = 0x00000001
        | NoDuplicateAnyHitInvocationBit = 0x00000002

    [<Flags>]
    type VkGeometryInstanceFlagsKHR =
        | All = 15
        | None = 0
        | TriangleFacingCullDisableBit = 0x00000001
        | TriangleFlipFacingBit = 0x00000002
        | ForceOpaqueBit = 0x00000004
        | ForceNoOpaqueBit = 0x00000008
        | TriangleFrontCounterclockwiseBit = 0x00000002

    [<Flags>]
    type VkBuildAccelerationStructureFlagsKHR =
        | All = 31
        | None = 0
        | AllowUpdateBit = 0x00000001
        | AllowCompactionBit = 0x00000002
        | PreferFastTraceBit = 0x00000004
        | PreferFastBuildBit = 0x00000008
        | LowMemoryBit = 0x00000010

    type VkCopyAccelerationStructureModeKHR =
        | Clone = 0
        | Compact = 1
        | Serialize = 2
        | Deserialize = 3

    type VkGeometryTypeKHR =
        | Triangles = 0
        | Aabbs = 1
        | Instances = 2

    type VkAccelerationStructureCompatibilityKHR =
        | Compatible = 0
        | Incompatible = 1

    [<Flags>]
    type VkAccelerationStructureCreateFlagsKHR =
        | All = 1
        | None = 0
        | DeviceAddressCaptureReplayBit = 0x00000001

    type VkBuildAccelerationStructureModeKHR =
        | Build = 0
        | Update = 1


    [<StructLayout(LayoutKind.Sequential)>]
    type VkAabbPositionsKHR =
        struct
            val mutable public minX : float32
            val mutable public minY : float32
            val mutable public minZ : float32
            val mutable public maxX : float32
            val mutable public maxY : float32
            val mutable public maxZ : float32

            new(minX : float32, minY : float32, minZ : float32, maxX : float32, maxY : float32, maxZ : float32) =
                {
                    minX = minX
                    minY = minY
                    minZ = minZ
                    maxX = maxX
                    maxY = maxY
                    maxZ = maxZ
                }

            member x.IsEmpty =
                x.minX = Unchecked.defaultof<float32> && x.minY = Unchecked.defaultof<float32> && x.minZ = Unchecked.defaultof<float32> && x.maxX = Unchecked.defaultof<float32> && x.maxY = Unchecked.defaultof<float32> && x.maxZ = Unchecked.defaultof<float32>

            static member Empty =
                VkAabbPositionsKHR(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "minX = %A" x.minX
                    sprintf "minY = %A" x.minY
                    sprintf "minZ = %A" x.minZ
                    sprintf "maxX = %A" x.maxX
                    sprintf "maxY = %A" x.maxY
                    sprintf "maxZ = %A" x.maxZ
                ] |> sprintf "VkAabbPositionsKHR { %s }"
        end

    [<StructLayout(LayoutKind.Explicit)>]
    type VkDeviceOrHostAddressConstKHR =
        struct
            [<FieldOffset(0)>]
            val mutable public deviceAddress : VkDeviceAddress
            [<FieldOffset(0)>]
            val mutable public hostAddress : nativeint

            static member DeviceAddress(value : VkDeviceAddress) =
                let mutable result = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>
                result.deviceAddress <- value
                result

            static member HostAddress(value : nativeint) =
                let mutable result = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>
                result.hostAddress <- value
                result

            override x.ToString() =
                String.concat "; " [
                    sprintf "deviceAddress = %A" x.deviceAddress
                    sprintf "hostAddress = %A" x.hostAddress
                ] |> sprintf "VkDeviceOrHostAddressConstKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureGeometryTrianglesDataKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vertexFormat : VkFormat
            val mutable public vertexData : VkDeviceOrHostAddressConstKHR
            val mutable public vertexStride : VkDeviceSize
            val mutable public maxVertex : uint32
            val mutable public indexType : VkIndexType
            val mutable public indexData : VkDeviceOrHostAddressConstKHR
            val mutable public transformData : VkDeviceOrHostAddressConstKHR

            new(pNext : nativeint, vertexFormat : VkFormat, vertexData : VkDeviceOrHostAddressConstKHR, vertexStride : VkDeviceSize, maxVertex : uint32, indexType : VkIndexType, indexData : VkDeviceOrHostAddressConstKHR, transformData : VkDeviceOrHostAddressConstKHR) =
                {
                    sType = 1000150005u
                    pNext = pNext
                    vertexFormat = vertexFormat
                    vertexData = vertexData
                    vertexStride = vertexStride
                    maxVertex = maxVertex
                    indexType = indexType
                    indexData = indexData
                    transformData = transformData
                }

            new(vertexFormat : VkFormat, vertexData : VkDeviceOrHostAddressConstKHR, vertexStride : VkDeviceSize, maxVertex : uint32, indexType : VkIndexType, indexData : VkDeviceOrHostAddressConstKHR, transformData : VkDeviceOrHostAddressConstKHR) =
                VkAccelerationStructureGeometryTrianglesDataKHR(Unchecked.defaultof<nativeint>, vertexFormat, vertexData, vertexStride, maxVertex, indexType, indexData, transformData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vertexFormat = Unchecked.defaultof<VkFormat> && x.vertexData = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR> && x.vertexStride = Unchecked.defaultof<VkDeviceSize> && x.maxVertex = Unchecked.defaultof<uint32> && x.indexType = Unchecked.defaultof<VkIndexType> && x.indexData = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR> && x.transformData = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>

            static member Empty =
                VkAccelerationStructureGeometryTrianglesDataKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkIndexType>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "vertexFormat = %A" x.vertexFormat
                    sprintf "vertexData = %A" x.vertexData
                    sprintf "vertexStride = %A" x.vertexStride
                    sprintf "maxVertex = %A" x.maxVertex
                    sprintf "indexType = %A" x.indexType
                    sprintf "indexData = %A" x.indexData
                    sprintf "transformData = %A" x.transformData
                ] |> sprintf "VkAccelerationStructureGeometryTrianglesDataKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureGeometryAabbsDataKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public data : VkDeviceOrHostAddressConstKHR
            val mutable public stride : VkDeviceSize

            new(pNext : nativeint, data : VkDeviceOrHostAddressConstKHR, stride : VkDeviceSize) =
                {
                    sType = 1000150003u
                    pNext = pNext
                    data = data
                    stride = stride
                }

            new(data : VkDeviceOrHostAddressConstKHR, stride : VkDeviceSize) =
                VkAccelerationStructureGeometryAabbsDataKHR(Unchecked.defaultof<nativeint>, data, stride)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.data = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR> && x.stride = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkAccelerationStructureGeometryAabbsDataKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "data = %A" x.data
                    sprintf "stride = %A" x.stride
                ] |> sprintf "VkAccelerationStructureGeometryAabbsDataKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureGeometryInstancesDataKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public arrayOfPointers : VkBool32
            val mutable public data : VkDeviceOrHostAddressConstKHR

            new(pNext : nativeint, arrayOfPointers : VkBool32, data : VkDeviceOrHostAddressConstKHR) =
                {
                    sType = 1000150004u
                    pNext = pNext
                    arrayOfPointers = arrayOfPointers
                    data = data
                }

            new(arrayOfPointers : VkBool32, data : VkDeviceOrHostAddressConstKHR) =
                VkAccelerationStructureGeometryInstancesDataKHR(Unchecked.defaultof<nativeint>, arrayOfPointers, data)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.arrayOfPointers = Unchecked.defaultof<VkBool32> && x.data = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>

            static member Empty =
                VkAccelerationStructureGeometryInstancesDataKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "arrayOfPointers = %A" x.arrayOfPointers
                    sprintf "data = %A" x.data
                ] |> sprintf "VkAccelerationStructureGeometryInstancesDataKHR { %s }"
        end

    [<StructLayout(LayoutKind.Explicit)>]
    type VkAccelerationStructureGeometryDataKHR =
        struct
            [<FieldOffset(0)>]
            val mutable public triangles : VkAccelerationStructureGeometryTrianglesDataKHR
            [<FieldOffset(0)>]
            val mutable public aabbs : VkAccelerationStructureGeometryAabbsDataKHR
            [<FieldOffset(0)>]
            val mutable public instances : VkAccelerationStructureGeometryInstancesDataKHR

            static member Triangles(value : VkAccelerationStructureGeometryTrianglesDataKHR) =
                let mutable result = Unchecked.defaultof<VkAccelerationStructureGeometryDataKHR>
                result.triangles <- value
                result

            static member Aabbs(value : VkAccelerationStructureGeometryAabbsDataKHR) =
                let mutable result = Unchecked.defaultof<VkAccelerationStructureGeometryDataKHR>
                result.aabbs <- value
                result

            static member Instances(value : VkAccelerationStructureGeometryInstancesDataKHR) =
                let mutable result = Unchecked.defaultof<VkAccelerationStructureGeometryDataKHR>
                result.instances <- value
                result

            override x.ToString() =
                String.concat "; " [
                    sprintf "triangles = %A" x.triangles
                    sprintf "aabbs = %A" x.aabbs
                    sprintf "instances = %A" x.instances
                ] |> sprintf "VkAccelerationStructureGeometryDataKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureGeometryKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public geometryType : VkGeometryTypeKHR
            val mutable public geometry : VkAccelerationStructureGeometryDataKHR
            val mutable public flags : VkGeometryFlagsKHR

            new(pNext : nativeint, geometryType : VkGeometryTypeKHR, geometry : VkAccelerationStructureGeometryDataKHR, flags : VkGeometryFlagsKHR) =
                {
                    sType = 1000150006u
                    pNext = pNext
                    geometryType = geometryType
                    geometry = geometry
                    flags = flags
                }

            new(geometryType : VkGeometryTypeKHR, geometry : VkAccelerationStructureGeometryDataKHR, flags : VkGeometryFlagsKHR) =
                VkAccelerationStructureGeometryKHR(Unchecked.defaultof<nativeint>, geometryType, geometry, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.geometryType = Unchecked.defaultof<VkGeometryTypeKHR> && x.geometry = Unchecked.defaultof<VkAccelerationStructureGeometryDataKHR> && x.flags = Unchecked.defaultof<VkGeometryFlagsKHR>

            static member Empty =
                VkAccelerationStructureGeometryKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkGeometryTypeKHR>, Unchecked.defaultof<VkAccelerationStructureGeometryDataKHR>, Unchecked.defaultof<VkGeometryFlagsKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "geometryType = %A" x.geometryType
                    sprintf "geometry = %A" x.geometry
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkAccelerationStructureGeometryKHR { %s }"
        end

    [<StructLayout(LayoutKind.Explicit)>]
    type VkDeviceOrHostAddressKHR =
        struct
            [<FieldOffset(0)>]
            val mutable public deviceAddress : VkDeviceAddress
            [<FieldOffset(0)>]
            val mutable public hostAddress : nativeint

            static member DeviceAddress(value : VkDeviceAddress) =
                let mutable result = Unchecked.defaultof<VkDeviceOrHostAddressKHR>
                result.deviceAddress <- value
                result

            static member HostAddress(value : nativeint) =
                let mutable result = Unchecked.defaultof<VkDeviceOrHostAddressKHR>
                result.hostAddress <- value
                result

            override x.ToString() =
                String.concat "; " [
                    sprintf "deviceAddress = %A" x.deviceAddress
                    sprintf "hostAddress = %A" x.hostAddress
                ] |> sprintf "VkDeviceOrHostAddressKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureBuildGeometryInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public _type : VkAccelerationStructureTypeKHR
            val mutable public flags : VkBuildAccelerationStructureFlagsKHR
            val mutable public mode : VkBuildAccelerationStructureModeKHR
            val mutable public srcAccelerationStructure : VkAccelerationStructureKHR
            val mutable public dstAccelerationStructure : VkAccelerationStructureKHR
            val mutable public geometryCount : uint32
            val mutable public pGeometries : nativeptr<VkAccelerationStructureGeometryKHR>
            val mutable public ppGeometries : nativeptr<nativeptr<VkAccelerationStructureGeometryKHR>>
            val mutable public scratchData : VkDeviceOrHostAddressKHR

            new(pNext : nativeint, _type : VkAccelerationStructureTypeKHR, flags : VkBuildAccelerationStructureFlagsKHR, mode : VkBuildAccelerationStructureModeKHR, srcAccelerationStructure : VkAccelerationStructureKHR, dstAccelerationStructure : VkAccelerationStructureKHR, geometryCount : uint32, pGeometries : nativeptr<VkAccelerationStructureGeometryKHR>, ppGeometries : nativeptr<nativeptr<VkAccelerationStructureGeometryKHR>>, scratchData : VkDeviceOrHostAddressKHR) =
                {
                    sType = 1000150000u
                    pNext = pNext
                    _type = _type
                    flags = flags
                    mode = mode
                    srcAccelerationStructure = srcAccelerationStructure
                    dstAccelerationStructure = dstAccelerationStructure
                    geometryCount = geometryCount
                    pGeometries = pGeometries
                    ppGeometries = ppGeometries
                    scratchData = scratchData
                }

            new(_type : VkAccelerationStructureTypeKHR, flags : VkBuildAccelerationStructureFlagsKHR, mode : VkBuildAccelerationStructureModeKHR, srcAccelerationStructure : VkAccelerationStructureKHR, dstAccelerationStructure : VkAccelerationStructureKHR, geometryCount : uint32, pGeometries : nativeptr<VkAccelerationStructureGeometryKHR>, ppGeometries : nativeptr<nativeptr<VkAccelerationStructureGeometryKHR>>, scratchData : VkDeviceOrHostAddressKHR) =
                VkAccelerationStructureBuildGeometryInfoKHR(Unchecked.defaultof<nativeint>, _type, flags, mode, srcAccelerationStructure, dstAccelerationStructure, geometryCount, pGeometries, ppGeometries, scratchData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkAccelerationStructureTypeKHR> && x.flags = Unchecked.defaultof<VkBuildAccelerationStructureFlagsKHR> && x.mode = Unchecked.defaultof<VkBuildAccelerationStructureModeKHR> && x.srcAccelerationStructure = Unchecked.defaultof<VkAccelerationStructureKHR> && x.dstAccelerationStructure = Unchecked.defaultof<VkAccelerationStructureKHR> && x.geometryCount = Unchecked.defaultof<uint32> && x.pGeometries = Unchecked.defaultof<nativeptr<VkAccelerationStructureGeometryKHR>> && x.ppGeometries = Unchecked.defaultof<nativeptr<nativeptr<VkAccelerationStructureGeometryKHR>>> && x.scratchData = Unchecked.defaultof<VkDeviceOrHostAddressKHR>

            static member Empty =
                VkAccelerationStructureBuildGeometryInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureTypeKHR>, Unchecked.defaultof<VkBuildAccelerationStructureFlagsKHR>, Unchecked.defaultof<VkBuildAccelerationStructureModeKHR>, Unchecked.defaultof<VkAccelerationStructureKHR>, Unchecked.defaultof<VkAccelerationStructureKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAccelerationStructureGeometryKHR>>, Unchecked.defaultof<nativeptr<nativeptr<VkAccelerationStructureGeometryKHR>>>, Unchecked.defaultof<VkDeviceOrHostAddressKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "_type = %A" x._type
                    sprintf "flags = %A" x.flags
                    sprintf "mode = %A" x.mode
                    sprintf "srcAccelerationStructure = %A" x.srcAccelerationStructure
                    sprintf "dstAccelerationStructure = %A" x.dstAccelerationStructure
                    sprintf "geometryCount = %A" x.geometryCount
                    sprintf "pGeometries = %A" x.pGeometries
                    sprintf "ppGeometries = %A" x.ppGeometries
                    sprintf "scratchData = %A" x.scratchData
                ] |> sprintf "VkAccelerationStructureBuildGeometryInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureBuildRangeInfoKHR =
        struct
            val mutable public primitiveCount : uint32
            val mutable public primitiveOffset : uint32
            val mutable public firstVertex : uint32
            val mutable public transformOffset : uint32

            new(primitiveCount : uint32, primitiveOffset : uint32, firstVertex : uint32, transformOffset : uint32) =
                {
                    primitiveCount = primitiveCount
                    primitiveOffset = primitiveOffset
                    firstVertex = firstVertex
                    transformOffset = transformOffset
                }

            member x.IsEmpty =
                x.primitiveCount = Unchecked.defaultof<uint32> && x.primitiveOffset = Unchecked.defaultof<uint32> && x.firstVertex = Unchecked.defaultof<uint32> && x.transformOffset = Unchecked.defaultof<uint32>

            static member Empty =
                VkAccelerationStructureBuildRangeInfoKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "primitiveCount = %A" x.primitiveCount
                    sprintf "primitiveOffset = %A" x.primitiveOffset
                    sprintf "firstVertex = %A" x.firstVertex
                    sprintf "transformOffset = %A" x.transformOffset
                ] |> sprintf "VkAccelerationStructureBuildRangeInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureBuildSizesInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public accelerationStructureSize : VkDeviceSize
            val mutable public updateScratchSize : VkDeviceSize
            val mutable public buildScratchSize : VkDeviceSize

            new(pNext : nativeint, accelerationStructureSize : VkDeviceSize, updateScratchSize : VkDeviceSize, buildScratchSize : VkDeviceSize) =
                {
                    sType = 1000150020u
                    pNext = pNext
                    accelerationStructureSize = accelerationStructureSize
                    updateScratchSize = updateScratchSize
                    buildScratchSize = buildScratchSize
                }

            new(accelerationStructureSize : VkDeviceSize, updateScratchSize : VkDeviceSize, buildScratchSize : VkDeviceSize) =
                VkAccelerationStructureBuildSizesInfoKHR(Unchecked.defaultof<nativeint>, accelerationStructureSize, updateScratchSize, buildScratchSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructureSize = Unchecked.defaultof<VkDeviceSize> && x.updateScratchSize = Unchecked.defaultof<VkDeviceSize> && x.buildScratchSize = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkAccelerationStructureBuildSizesInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "accelerationStructureSize = %A" x.accelerationStructureSize
                    sprintf "updateScratchSize = %A" x.updateScratchSize
                    sprintf "buildScratchSize = %A" x.buildScratchSize
                ] |> sprintf "VkAccelerationStructureBuildSizesInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public createFlags : VkAccelerationStructureCreateFlagsKHR
            val mutable public buffer : VkBuffer
            val mutable public offset : VkDeviceSize
            val mutable public size : VkDeviceSize
            val mutable public _type : VkAccelerationStructureTypeKHR
            val mutable public deviceAddress : VkDeviceAddress

            new(pNext : nativeint, createFlags : VkAccelerationStructureCreateFlagsKHR, buffer : VkBuffer, offset : VkDeviceSize, size : VkDeviceSize, _type : VkAccelerationStructureTypeKHR, deviceAddress : VkDeviceAddress) =
                {
                    sType = 1000150017u
                    pNext = pNext
                    createFlags = createFlags
                    buffer = buffer
                    offset = offset
                    size = size
                    _type = _type
                    deviceAddress = deviceAddress
                }

            new(createFlags : VkAccelerationStructureCreateFlagsKHR, buffer : VkBuffer, offset : VkDeviceSize, size : VkDeviceSize, _type : VkAccelerationStructureTypeKHR, deviceAddress : VkDeviceAddress) =
                VkAccelerationStructureCreateInfoKHR(Unchecked.defaultof<nativeint>, createFlags, buffer, offset, size, _type, deviceAddress)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.createFlags = Unchecked.defaultof<VkAccelerationStructureCreateFlagsKHR> && x.buffer = Unchecked.defaultof<VkBuffer> && x.offset = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize> && x._type = Unchecked.defaultof<VkAccelerationStructureTypeKHR> && x.deviceAddress = Unchecked.defaultof<VkDeviceAddress>

            static member Empty =
                VkAccelerationStructureCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureCreateFlagsKHR>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkAccelerationStructureTypeKHR>, Unchecked.defaultof<VkDeviceAddress>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "createFlags = %A" x.createFlags
                    sprintf "buffer = %A" x.buffer
                    sprintf "offset = %A" x.offset
                    sprintf "size = %A" x.size
                    sprintf "_type = %A" x._type
                    sprintf "deviceAddress = %A" x.deviceAddress
                ] |> sprintf "VkAccelerationStructureCreateInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureDeviceAddressInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public accelerationStructure : VkAccelerationStructureKHR

            new(pNext : nativeint, accelerationStructure : VkAccelerationStructureKHR) =
                {
                    sType = 1000150002u
                    pNext = pNext
                    accelerationStructure = accelerationStructure
                }

            new(accelerationStructure : VkAccelerationStructureKHR) =
                VkAccelerationStructureDeviceAddressInfoKHR(Unchecked.defaultof<nativeint>, accelerationStructure)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructure = Unchecked.defaultof<VkAccelerationStructureKHR>

            static member Empty =
                VkAccelerationStructureDeviceAddressInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "accelerationStructure = %A" x.accelerationStructure
                ] |> sprintf "VkAccelerationStructureDeviceAddressInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkTransformMatrixKHR =
        struct
            val mutable public matrix : M34f

            new(matrix : M34f) =
                {
                    matrix = matrix
                }

            member x.IsEmpty =
                x.matrix = Unchecked.defaultof<M34f>

            static member Empty =
                VkTransformMatrixKHR(Unchecked.defaultof<M34f>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "matrix = %A" x.matrix
                ] |> sprintf "VkTransformMatrixKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureInstanceKHR =
        struct
            val mutable public transform : VkTransformMatrixKHR
            val mutable public instanceCustomIndex : uint24
            val mutable public mask : uint8
            val mutable public instanceShaderBindingTableRecordOffset : uint24
            val mutable public flags : uint8
            val mutable public accelerationStructureReference : uint64

            new(transform : VkTransformMatrixKHR, instanceCustomIndex : uint24, mask : uint8, instanceShaderBindingTableRecordOffset : uint24, flags : uint8, accelerationStructureReference : uint64) =
                {
                    transform = transform
                    instanceCustomIndex = instanceCustomIndex
                    mask = mask
                    instanceShaderBindingTableRecordOffset = instanceShaderBindingTableRecordOffset
                    flags = flags
                    accelerationStructureReference = accelerationStructureReference
                }

            member x.IsEmpty =
                x.transform = Unchecked.defaultof<VkTransformMatrixKHR> && x.instanceCustomIndex = Unchecked.defaultof<uint24> && x.mask = Unchecked.defaultof<uint8> && x.instanceShaderBindingTableRecordOffset = Unchecked.defaultof<uint24> && x.flags = Unchecked.defaultof<uint8> && x.accelerationStructureReference = Unchecked.defaultof<uint64>

            static member Empty =
                VkAccelerationStructureInstanceKHR(Unchecked.defaultof<VkTransformMatrixKHR>, Unchecked.defaultof<uint24>, Unchecked.defaultof<uint8>, Unchecked.defaultof<uint24>, Unchecked.defaultof<uint8>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "transform = %A" x.transform
                    sprintf "instanceCustomIndex = %A" x.instanceCustomIndex
                    sprintf "mask = %A" x.mask
                    sprintf "instanceShaderBindingTableRecordOffset = %A" x.instanceShaderBindingTableRecordOffset
                    sprintf "flags = %A" x.flags
                    sprintf "accelerationStructureReference = %A" x.accelerationStructureReference
                ] |> sprintf "VkAccelerationStructureInstanceKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureVersionInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pVersionData : nativeptr<byte>

            new(pNext : nativeint, pVersionData : nativeptr<byte>) =
                {
                    sType = 1000150009u
                    pNext = pNext
                    pVersionData = pVersionData
                }

            new(pVersionData : nativeptr<byte>) =
                VkAccelerationStructureVersionInfoKHR(Unchecked.defaultof<nativeint>, pVersionData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pVersionData = Unchecked.defaultof<nativeptr<byte>>

            static member Empty =
                VkAccelerationStructureVersionInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<byte>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pVersionData = %A" x.pVersionData
                ] |> sprintf "VkAccelerationStructureVersionInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyAccelerationStructureInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public src : VkAccelerationStructureKHR
            val mutable public dst : VkAccelerationStructureKHR
            val mutable public mode : VkCopyAccelerationStructureModeKHR

            new(pNext : nativeint, src : VkAccelerationStructureKHR, dst : VkAccelerationStructureKHR, mode : VkCopyAccelerationStructureModeKHR) =
                {
                    sType = 1000150010u
                    pNext = pNext
                    src = src
                    dst = dst
                    mode = mode
                }

            new(src : VkAccelerationStructureKHR, dst : VkAccelerationStructureKHR, mode : VkCopyAccelerationStructureModeKHR) =
                VkCopyAccelerationStructureInfoKHR(Unchecked.defaultof<nativeint>, src, dst, mode)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.src = Unchecked.defaultof<VkAccelerationStructureKHR> && x.dst = Unchecked.defaultof<VkAccelerationStructureKHR> && x.mode = Unchecked.defaultof<VkCopyAccelerationStructureModeKHR>

            static member Empty =
                VkCopyAccelerationStructureInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureKHR>, Unchecked.defaultof<VkAccelerationStructureKHR>, Unchecked.defaultof<VkCopyAccelerationStructureModeKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "src = %A" x.src
                    sprintf "dst = %A" x.dst
                    sprintf "mode = %A" x.mode
                ] |> sprintf "VkCopyAccelerationStructureInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyAccelerationStructureToMemoryInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public src : VkAccelerationStructureKHR
            val mutable public dst : VkDeviceOrHostAddressKHR
            val mutable public mode : VkCopyAccelerationStructureModeKHR

            new(pNext : nativeint, src : VkAccelerationStructureKHR, dst : VkDeviceOrHostAddressKHR, mode : VkCopyAccelerationStructureModeKHR) =
                {
                    sType = 1000150011u
                    pNext = pNext
                    src = src
                    dst = dst
                    mode = mode
                }

            new(src : VkAccelerationStructureKHR, dst : VkDeviceOrHostAddressKHR, mode : VkCopyAccelerationStructureModeKHR) =
                VkCopyAccelerationStructureToMemoryInfoKHR(Unchecked.defaultof<nativeint>, src, dst, mode)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.src = Unchecked.defaultof<VkAccelerationStructureKHR> && x.dst = Unchecked.defaultof<VkDeviceOrHostAddressKHR> && x.mode = Unchecked.defaultof<VkCopyAccelerationStructureModeKHR>

            static member Empty =
                VkCopyAccelerationStructureToMemoryInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureKHR>, Unchecked.defaultof<VkDeviceOrHostAddressKHR>, Unchecked.defaultof<VkCopyAccelerationStructureModeKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "src = %A" x.src
                    sprintf "dst = %A" x.dst
                    sprintf "mode = %A" x.mode
                ] |> sprintf "VkCopyAccelerationStructureToMemoryInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyMemoryToAccelerationStructureInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public src : VkDeviceOrHostAddressConstKHR
            val mutable public dst : VkAccelerationStructureKHR
            val mutable public mode : VkCopyAccelerationStructureModeKHR

            new(pNext : nativeint, src : VkDeviceOrHostAddressConstKHR, dst : VkAccelerationStructureKHR, mode : VkCopyAccelerationStructureModeKHR) =
                {
                    sType = 1000150012u
                    pNext = pNext
                    src = src
                    dst = dst
                    mode = mode
                }

            new(src : VkDeviceOrHostAddressConstKHR, dst : VkAccelerationStructureKHR, mode : VkCopyAccelerationStructureModeKHR) =
                VkCopyMemoryToAccelerationStructureInfoKHR(Unchecked.defaultof<nativeint>, src, dst, mode)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.src = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR> && x.dst = Unchecked.defaultof<VkAccelerationStructureKHR> && x.mode = Unchecked.defaultof<VkCopyAccelerationStructureModeKHR>

            static member Empty =
                VkCopyMemoryToAccelerationStructureInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>, Unchecked.defaultof<VkAccelerationStructureKHR>, Unchecked.defaultof<VkCopyAccelerationStructureModeKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "src = %A" x.src
                    sprintf "dst = %A" x.dst
                    sprintf "mode = %A" x.mode
                ] |> sprintf "VkCopyMemoryToAccelerationStructureInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceAccelerationStructureFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public accelerationStructure : VkBool32
            val mutable public accelerationStructureCaptureReplay : VkBool32
            val mutable public accelerationStructureIndirectBuild : VkBool32
            val mutable public accelerationStructureHostCommands : VkBool32
            val mutable public descriptorBindingAccelerationStructureUpdateAfterBind : VkBool32

            new(pNext : nativeint, accelerationStructure : VkBool32, accelerationStructureCaptureReplay : VkBool32, accelerationStructureIndirectBuild : VkBool32, accelerationStructureHostCommands : VkBool32, descriptorBindingAccelerationStructureUpdateAfterBind : VkBool32) =
                {
                    sType = 1000150013u
                    pNext = pNext
                    accelerationStructure = accelerationStructure
                    accelerationStructureCaptureReplay = accelerationStructureCaptureReplay
                    accelerationStructureIndirectBuild = accelerationStructureIndirectBuild
                    accelerationStructureHostCommands = accelerationStructureHostCommands
                    descriptorBindingAccelerationStructureUpdateAfterBind = descriptorBindingAccelerationStructureUpdateAfterBind
                }

            new(accelerationStructure : VkBool32, accelerationStructureCaptureReplay : VkBool32, accelerationStructureIndirectBuild : VkBool32, accelerationStructureHostCommands : VkBool32, descriptorBindingAccelerationStructureUpdateAfterBind : VkBool32) =
                VkPhysicalDeviceAccelerationStructureFeaturesKHR(Unchecked.defaultof<nativeint>, accelerationStructure, accelerationStructureCaptureReplay, accelerationStructureIndirectBuild, accelerationStructureHostCommands, descriptorBindingAccelerationStructureUpdateAfterBind)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructure = Unchecked.defaultof<VkBool32> && x.accelerationStructureCaptureReplay = Unchecked.defaultof<VkBool32> && x.accelerationStructureIndirectBuild = Unchecked.defaultof<VkBool32> && x.accelerationStructureHostCommands = Unchecked.defaultof<VkBool32> && x.descriptorBindingAccelerationStructureUpdateAfterBind = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceAccelerationStructureFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "accelerationStructure = %A" x.accelerationStructure
                    sprintf "accelerationStructureCaptureReplay = %A" x.accelerationStructureCaptureReplay
                    sprintf "accelerationStructureIndirectBuild = %A" x.accelerationStructureIndirectBuild
                    sprintf "accelerationStructureHostCommands = %A" x.accelerationStructureHostCommands
                    sprintf "descriptorBindingAccelerationStructureUpdateAfterBind = %A" x.descriptorBindingAccelerationStructureUpdateAfterBind
                ] |> sprintf "VkPhysicalDeviceAccelerationStructureFeaturesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceAccelerationStructurePropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxGeometryCount : uint64
            val mutable public maxInstanceCount : uint64
            val mutable public maxPrimitiveCount : uint64
            val mutable public maxPerStageDescriptorAccelerationStructures : uint32
            val mutable public maxPerStageDescriptorUpdateAfterBindAccelerationStructures : uint32
            val mutable public maxDescriptorSetAccelerationStructures : uint32
            val mutable public maxDescriptorSetUpdateAfterBindAccelerationStructures : uint32
            val mutable public minAccelerationStructureScratchOffsetAlignment : uint32

            new(pNext : nativeint, maxGeometryCount : uint64, maxInstanceCount : uint64, maxPrimitiveCount : uint64, maxPerStageDescriptorAccelerationStructures : uint32, maxPerStageDescriptorUpdateAfterBindAccelerationStructures : uint32, maxDescriptorSetAccelerationStructures : uint32, maxDescriptorSetUpdateAfterBindAccelerationStructures : uint32, minAccelerationStructureScratchOffsetAlignment : uint32) =
                {
                    sType = 1000150014u
                    pNext = pNext
                    maxGeometryCount = maxGeometryCount
                    maxInstanceCount = maxInstanceCount
                    maxPrimitiveCount = maxPrimitiveCount
                    maxPerStageDescriptorAccelerationStructures = maxPerStageDescriptorAccelerationStructures
                    maxPerStageDescriptorUpdateAfterBindAccelerationStructures = maxPerStageDescriptorUpdateAfterBindAccelerationStructures
                    maxDescriptorSetAccelerationStructures = maxDescriptorSetAccelerationStructures
                    maxDescriptorSetUpdateAfterBindAccelerationStructures = maxDescriptorSetUpdateAfterBindAccelerationStructures
                    minAccelerationStructureScratchOffsetAlignment = minAccelerationStructureScratchOffsetAlignment
                }

            new(maxGeometryCount : uint64, maxInstanceCount : uint64, maxPrimitiveCount : uint64, maxPerStageDescriptorAccelerationStructures : uint32, maxPerStageDescriptorUpdateAfterBindAccelerationStructures : uint32, maxDescriptorSetAccelerationStructures : uint32, maxDescriptorSetUpdateAfterBindAccelerationStructures : uint32, minAccelerationStructureScratchOffsetAlignment : uint32) =
                VkPhysicalDeviceAccelerationStructurePropertiesKHR(Unchecked.defaultof<nativeint>, maxGeometryCount, maxInstanceCount, maxPrimitiveCount, maxPerStageDescriptorAccelerationStructures, maxPerStageDescriptorUpdateAfterBindAccelerationStructures, maxDescriptorSetAccelerationStructures, maxDescriptorSetUpdateAfterBindAccelerationStructures, minAccelerationStructureScratchOffsetAlignment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxGeometryCount = Unchecked.defaultof<uint64> && x.maxInstanceCount = Unchecked.defaultof<uint64> && x.maxPrimitiveCount = Unchecked.defaultof<uint64> && x.maxPerStageDescriptorAccelerationStructures = Unchecked.defaultof<uint32> && x.maxPerStageDescriptorUpdateAfterBindAccelerationStructures = Unchecked.defaultof<uint32> && x.maxDescriptorSetAccelerationStructures = Unchecked.defaultof<uint32> && x.maxDescriptorSetUpdateAfterBindAccelerationStructures = Unchecked.defaultof<uint32> && x.minAccelerationStructureScratchOffsetAlignment = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceAccelerationStructurePropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxGeometryCount = %A" x.maxGeometryCount
                    sprintf "maxInstanceCount = %A" x.maxInstanceCount
                    sprintf "maxPrimitiveCount = %A" x.maxPrimitiveCount
                    sprintf "maxPerStageDescriptorAccelerationStructures = %A" x.maxPerStageDescriptorAccelerationStructures
                    sprintf "maxPerStageDescriptorUpdateAfterBindAccelerationStructures = %A" x.maxPerStageDescriptorUpdateAfterBindAccelerationStructures
                    sprintf "maxDescriptorSetAccelerationStructures = %A" x.maxDescriptorSetAccelerationStructures
                    sprintf "maxDescriptorSetUpdateAfterBindAccelerationStructures = %A" x.maxDescriptorSetUpdateAfterBindAccelerationStructures
                    sprintf "minAccelerationStructureScratchOffsetAlignment = %A" x.minAccelerationStructureScratchOffsetAlignment
                ] |> sprintf "VkPhysicalDeviceAccelerationStructurePropertiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkWriteDescriptorSetAccelerationStructureKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public accelerationStructureCount : uint32
            val mutable public pAccelerationStructures : nativeptr<VkAccelerationStructureKHR>

            new(pNext : nativeint, accelerationStructureCount : uint32, pAccelerationStructures : nativeptr<VkAccelerationStructureKHR>) =
                {
                    sType = 1000150007u
                    pNext = pNext
                    accelerationStructureCount = accelerationStructureCount
                    pAccelerationStructures = pAccelerationStructures
                }

            new(accelerationStructureCount : uint32, pAccelerationStructures : nativeptr<VkAccelerationStructureKHR>) =
                VkWriteDescriptorSetAccelerationStructureKHR(Unchecked.defaultof<nativeint>, accelerationStructureCount, pAccelerationStructures)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructureCount = Unchecked.defaultof<uint32> && x.pAccelerationStructures = Unchecked.defaultof<nativeptr<VkAccelerationStructureKHR>>

            static member Empty =
                VkWriteDescriptorSetAccelerationStructureKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAccelerationStructureKHR>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "accelerationStructureCount = %A" x.accelerationStructureCount
                    sprintf "pAccelerationStructures = %A" x.pAccelerationStructures
                ] |> sprintf "VkWriteDescriptorSetAccelerationStructureKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags with
              static member inline AccelerationStructureReadBitKhr = unbox<VkAccessFlags> 0x00200000
              static member inline AccelerationStructureWriteBitKhr = unbox<VkAccessFlags> 0x00400000
         type VkBufferUsageFlags with
              static member inline AccelerationStructureBuildInputReadOnlyBitKhr = unbox<VkBufferUsageFlags> 0x00080000
              static member inline AccelerationStructureStorageBitKhr = unbox<VkBufferUsageFlags> 0x00100000
         type VkDebugReportObjectTypeEXT with
              static member inline AccelerationStructureKhr = unbox<VkDebugReportObjectTypeEXT> 1000150000
         type VkDescriptorType with
              static member inline AccelerationStructureKhr = unbox<VkDescriptorType> 1000150000
         type VkFormatFeatureFlags with
              static member inline AccelerationStructureVertexBufferBitKhr = unbox<VkFormatFeatureFlags> 0x20000000
         type VkIndexType with
              static member inline NoneKhr = unbox<VkIndexType> 1000165000
         type VkObjectType with
              static member inline AccelerationStructureKhr = unbox<VkObjectType> 1000150000
         type VkPipelineStageFlags with
              static member inline AccelerationStructureBuildBitKhr = unbox<VkPipelineStageFlags> 0x02000000
         type VkQueryType with
              static member inline AccelerationStructureCompactedSizeKhr = unbox<VkQueryType> 1000150000
              static member inline AccelerationStructureSerializationSizeKhr = unbox<VkQueryType> 1000150001

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateAccelerationStructureKHRDel = delegate of VkDevice * nativeptr<VkAccelerationStructureCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkAccelerationStructureKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyAccelerationStructureKHRDel = delegate of VkDevice * VkAccelerationStructureKHR * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBuildAccelerationStructuresKHRDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkAccelerationStructureBuildGeometryInfoKHR> * nativeptr<nativeptr<VkAccelerationStructureBuildRangeInfoKHR>> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBuildAccelerationStructuresIndirectKHRDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkAccelerationStructureBuildGeometryInfoKHR> * nativeptr<VkDeviceAddress> * nativeptr<uint32> * nativeptr<nativeptr<uint32>> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkBuildAccelerationStructuresKHRDel = delegate of VkDevice * VkDeferredOperationKHR * uint32 * nativeptr<VkAccelerationStructureBuildGeometryInfoKHR> * nativeptr<nativeptr<VkAccelerationStructureBuildRangeInfoKHR>> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCopyAccelerationStructureKHRDel = delegate of VkDevice * VkDeferredOperationKHR * nativeptr<VkCopyAccelerationStructureInfoKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCopyAccelerationStructureToMemoryKHRDel = delegate of VkDevice * VkDeferredOperationKHR * nativeptr<VkCopyAccelerationStructureToMemoryInfoKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCopyMemoryToAccelerationStructureKHRDel = delegate of VkDevice * VkDeferredOperationKHR * nativeptr<VkCopyMemoryToAccelerationStructureInfoKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkWriteAccelerationStructuresPropertiesKHRDel = delegate of VkDevice * uint32 * nativeptr<VkAccelerationStructureKHR> * VkQueryType * uint64 * nativeint * uint64 -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdCopyAccelerationStructureKHRDel = delegate of VkCommandBuffer * nativeptr<VkCopyAccelerationStructureInfoKHR> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdCopyAccelerationStructureToMemoryKHRDel = delegate of VkCommandBuffer * nativeptr<VkCopyAccelerationStructureToMemoryInfoKHR> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdCopyMemoryToAccelerationStructureKHRDel = delegate of VkCommandBuffer * nativeptr<VkCopyMemoryToAccelerationStructureInfoKHR> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetAccelerationStructureDeviceAddressKHRDel = delegate of VkDevice * nativeptr<VkAccelerationStructureDeviceAddressInfoKHR> -> VkDeviceAddress
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdWriteAccelerationStructuresPropertiesKHRDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkAccelerationStructureKHR> * VkQueryType * VkQueryPool * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDeviceAccelerationStructureCompatibilityKHRDel = delegate of VkDevice * nativeptr<VkAccelerationStructureVersionInfoKHR> * nativeptr<VkAccelerationStructureCompatibilityKHR> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetAccelerationStructureBuildSizesKHRDel = delegate of VkDevice * VkAccelerationStructureBuildTypeKHR * nativeptr<VkAccelerationStructureBuildGeometryInfoKHR> * nativeptr<uint32> * nativeptr<VkAccelerationStructureBuildSizesInfoKHR> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRAccelerationStructure")
            static let s_vkCreateAccelerationStructureKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateAccelerationStructureKHRDel> "vkCreateAccelerationStructureKHR"
            static let s_vkDestroyAccelerationStructureKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroyAccelerationStructureKHRDel> "vkDestroyAccelerationStructureKHR"
            static let s_vkCmdBuildAccelerationStructuresKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBuildAccelerationStructuresKHRDel> "vkCmdBuildAccelerationStructuresKHR"
            static let s_vkCmdBuildAccelerationStructuresIndirectKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBuildAccelerationStructuresIndirectKHRDel> "vkCmdBuildAccelerationStructuresIndirectKHR"
            static let s_vkBuildAccelerationStructuresKHRDel = VkRaw.vkImportInstanceDelegate<VkBuildAccelerationStructuresKHRDel> "vkBuildAccelerationStructuresKHR"
            static let s_vkCopyAccelerationStructureKHRDel = VkRaw.vkImportInstanceDelegate<VkCopyAccelerationStructureKHRDel> "vkCopyAccelerationStructureKHR"
            static let s_vkCopyAccelerationStructureToMemoryKHRDel = VkRaw.vkImportInstanceDelegate<VkCopyAccelerationStructureToMemoryKHRDel> "vkCopyAccelerationStructureToMemoryKHR"
            static let s_vkCopyMemoryToAccelerationStructureKHRDel = VkRaw.vkImportInstanceDelegate<VkCopyMemoryToAccelerationStructureKHRDel> "vkCopyMemoryToAccelerationStructureKHR"
            static let s_vkWriteAccelerationStructuresPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkWriteAccelerationStructuresPropertiesKHRDel> "vkWriteAccelerationStructuresPropertiesKHR"
            static let s_vkCmdCopyAccelerationStructureKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyAccelerationStructureKHRDel> "vkCmdCopyAccelerationStructureKHR"
            static let s_vkCmdCopyAccelerationStructureToMemoryKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyAccelerationStructureToMemoryKHRDel> "vkCmdCopyAccelerationStructureToMemoryKHR"
            static let s_vkCmdCopyMemoryToAccelerationStructureKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyMemoryToAccelerationStructureKHRDel> "vkCmdCopyMemoryToAccelerationStructureKHR"
            static let s_vkGetAccelerationStructureDeviceAddressKHRDel = VkRaw.vkImportInstanceDelegate<VkGetAccelerationStructureDeviceAddressKHRDel> "vkGetAccelerationStructureDeviceAddressKHR"
            static let s_vkCmdWriteAccelerationStructuresPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdWriteAccelerationStructuresPropertiesKHRDel> "vkCmdWriteAccelerationStructuresPropertiesKHR"
            static let s_vkGetDeviceAccelerationStructureCompatibilityKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceAccelerationStructureCompatibilityKHRDel> "vkGetDeviceAccelerationStructureCompatibilityKHR"
            static let s_vkGetAccelerationStructureBuildSizesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetAccelerationStructureBuildSizesKHRDel> "vkGetAccelerationStructureBuildSizesKHR"
            static do Report.End(3) |> ignore
            static member vkCreateAccelerationStructureKHR = s_vkCreateAccelerationStructureKHRDel
            static member vkDestroyAccelerationStructureKHR = s_vkDestroyAccelerationStructureKHRDel
            static member vkCmdBuildAccelerationStructuresKHR = s_vkCmdBuildAccelerationStructuresKHRDel
            static member vkCmdBuildAccelerationStructuresIndirectKHR = s_vkCmdBuildAccelerationStructuresIndirectKHRDel
            static member vkBuildAccelerationStructuresKHR = s_vkBuildAccelerationStructuresKHRDel
            static member vkCopyAccelerationStructureKHR = s_vkCopyAccelerationStructureKHRDel
            static member vkCopyAccelerationStructureToMemoryKHR = s_vkCopyAccelerationStructureToMemoryKHRDel
            static member vkCopyMemoryToAccelerationStructureKHR = s_vkCopyMemoryToAccelerationStructureKHRDel
            static member vkWriteAccelerationStructuresPropertiesKHR = s_vkWriteAccelerationStructuresPropertiesKHRDel
            static member vkCmdCopyAccelerationStructureKHR = s_vkCmdCopyAccelerationStructureKHRDel
            static member vkCmdCopyAccelerationStructureToMemoryKHR = s_vkCmdCopyAccelerationStructureToMemoryKHRDel
            static member vkCmdCopyMemoryToAccelerationStructureKHR = s_vkCmdCopyMemoryToAccelerationStructureKHRDel
            static member vkGetAccelerationStructureDeviceAddressKHR = s_vkGetAccelerationStructureDeviceAddressKHRDel
            static member vkCmdWriteAccelerationStructuresPropertiesKHR = s_vkCmdWriteAccelerationStructuresPropertiesKHRDel
            static member vkGetDeviceAccelerationStructureCompatibilityKHR = s_vkGetDeviceAccelerationStructureCompatibilityKHRDel
            static member vkGetAccelerationStructureBuildSizesKHR = s_vkGetAccelerationStructureBuildSizesKHRDel
        let vkCreateAccelerationStructureKHR(device : VkDevice, pCreateInfo : nativeptr<VkAccelerationStructureCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pAccelerationStructure : nativeptr<VkAccelerationStructureKHR>) = Loader<unit>.vkCreateAccelerationStructureKHR.Invoke(device, pCreateInfo, pAllocator, pAccelerationStructure)
        let vkDestroyAccelerationStructureKHR(device : VkDevice, accelerationStructure : VkAccelerationStructureKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyAccelerationStructureKHR.Invoke(device, accelerationStructure, pAllocator)
        let vkCmdBuildAccelerationStructuresKHR(commandBuffer : VkCommandBuffer, infoCount : uint32, pInfos : nativeptr<VkAccelerationStructureBuildGeometryInfoKHR>, ppBuildRangeInfos : nativeptr<nativeptr<VkAccelerationStructureBuildRangeInfoKHR>>) = Loader<unit>.vkCmdBuildAccelerationStructuresKHR.Invoke(commandBuffer, infoCount, pInfos, ppBuildRangeInfos)
        let vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer : VkCommandBuffer, infoCount : uint32, pInfos : nativeptr<VkAccelerationStructureBuildGeometryInfoKHR>, pIndirectDeviceAddresses : nativeptr<VkDeviceAddress>, pIndirectStrides : nativeptr<uint32>, ppMaxPrimitiveCounts : nativeptr<nativeptr<uint32>>) = Loader<unit>.vkCmdBuildAccelerationStructuresIndirectKHR.Invoke(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts)
        let vkBuildAccelerationStructuresKHR(device : VkDevice, deferredOperation : VkDeferredOperationKHR, infoCount : uint32, pInfos : nativeptr<VkAccelerationStructureBuildGeometryInfoKHR>, ppBuildRangeInfos : nativeptr<nativeptr<VkAccelerationStructureBuildRangeInfoKHR>>) = Loader<unit>.vkBuildAccelerationStructuresKHR.Invoke(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos)
        let vkCopyAccelerationStructureKHR(device : VkDevice, deferredOperation : VkDeferredOperationKHR, pInfo : nativeptr<VkCopyAccelerationStructureInfoKHR>) = Loader<unit>.vkCopyAccelerationStructureKHR.Invoke(device, deferredOperation, pInfo)
        let vkCopyAccelerationStructureToMemoryKHR(device : VkDevice, deferredOperation : VkDeferredOperationKHR, pInfo : nativeptr<VkCopyAccelerationStructureToMemoryInfoKHR>) = Loader<unit>.vkCopyAccelerationStructureToMemoryKHR.Invoke(device, deferredOperation, pInfo)
        let vkCopyMemoryToAccelerationStructureKHR(device : VkDevice, deferredOperation : VkDeferredOperationKHR, pInfo : nativeptr<VkCopyMemoryToAccelerationStructureInfoKHR>) = Loader<unit>.vkCopyMemoryToAccelerationStructureKHR.Invoke(device, deferredOperation, pInfo)
        let vkWriteAccelerationStructuresPropertiesKHR(device : VkDevice, accelerationStructureCount : uint32, pAccelerationStructures : nativeptr<VkAccelerationStructureKHR>, queryType : VkQueryType, dataSize : uint64, pData : nativeint, stride : uint64) = Loader<unit>.vkWriteAccelerationStructuresPropertiesKHR.Invoke(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride)
        let vkCmdCopyAccelerationStructureKHR(commandBuffer : VkCommandBuffer, pInfo : nativeptr<VkCopyAccelerationStructureInfoKHR>) = Loader<unit>.vkCmdCopyAccelerationStructureKHR.Invoke(commandBuffer, pInfo)
        let vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer : VkCommandBuffer, pInfo : nativeptr<VkCopyAccelerationStructureToMemoryInfoKHR>) = Loader<unit>.vkCmdCopyAccelerationStructureToMemoryKHR.Invoke(commandBuffer, pInfo)
        let vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer : VkCommandBuffer, pInfo : nativeptr<VkCopyMemoryToAccelerationStructureInfoKHR>) = Loader<unit>.vkCmdCopyMemoryToAccelerationStructureKHR.Invoke(commandBuffer, pInfo)
        let vkGetAccelerationStructureDeviceAddressKHR(device : VkDevice, pInfo : nativeptr<VkAccelerationStructureDeviceAddressInfoKHR>) = Loader<unit>.vkGetAccelerationStructureDeviceAddressKHR.Invoke(device, pInfo)
        let vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer : VkCommandBuffer, accelerationStructureCount : uint32, pAccelerationStructures : nativeptr<VkAccelerationStructureKHR>, queryType : VkQueryType, queryPool : VkQueryPool, firstQuery : uint32) = Loader<unit>.vkCmdWriteAccelerationStructuresPropertiesKHR.Invoke(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery)
        let vkGetDeviceAccelerationStructureCompatibilityKHR(device : VkDevice, pVersionInfo : nativeptr<VkAccelerationStructureVersionInfoKHR>, pCompatibility : nativeptr<VkAccelerationStructureCompatibilityKHR>) = Loader<unit>.vkGetDeviceAccelerationStructureCompatibilityKHR.Invoke(device, pVersionInfo, pCompatibility)
        let vkGetAccelerationStructureBuildSizesKHR(device : VkDevice, buildType : VkAccelerationStructureBuildTypeKHR, pBuildInfo : nativeptr<VkAccelerationStructureBuildGeometryInfoKHR>, pMaxPrimitiveCounts : nativeptr<uint32>, pSizeInfo : nativeptr<VkAccelerationStructureBuildSizesInfoKHR>) = Loader<unit>.vkGetAccelerationStructureBuildSizesKHR.Invoke(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo)

    module KHRFormatFeatureFlags2 =
        [<AutoOpen>]
        module EnumExtensions =
             type VkFormatFeatureFlags2 with
                  static member inline FormatFeature2AccelerationStructureVertexBufferBitKhr = unbox<VkFormatFeatureFlags2> 0x20000000


module KHRShaderFloatControls =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_shader_float_controls"
    let Number = 198

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkShaderFloatControlsIndependenceKHR = VkShaderFloatControlsIndependence

    type VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties


    [<AutoOpen>]
    module EnumExtensions =
         type VkShaderFloatControlsIndependence with
              static member inline D32BitOnlyKhr = unbox<VkShaderFloatControlsIndependence> 0
              static member inline AllKhr = unbox<VkShaderFloatControlsIndependence> 1
              static member inline NoneKhr = unbox<VkShaderFloatControlsIndependence> 2


module KHRSpirv14 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRShaderFloatControls
    let Name = "VK_KHR_spirv_1_4"
    let Number = 237

    let Required = [ KHRShaderFloatControls.Name ]


module KHRRayTracingPipeline =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open EXTDescriptorIndexing
    open KHRAccelerationStructure
    open KHRBufferDeviceAddress
    open KHRDeferredHostOperations
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance3
    open KHRPipelineLibrary
    open KHRShaderFloatControls
    open KHRSpirv14
    let Name = "VK_KHR_ray_tracing_pipeline"
    let Number = 348

    let Required = [ KHRAccelerationStructure.Name; KHRSpirv14.Name ]


    type VkRayTracingShaderGroupTypeKHR =
        | General = 0
        | TrianglesHitGroup = 1
        | ProceduralHitGroup = 2

    type VkShaderGroupShaderKHR =
        | General = 0
        | ClosestHit = 1
        | AnyHit = 2
        | Intersection = 3


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceRayTracingPipelineFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public rayTracingPipeline : VkBool32
            val mutable public rayTracingPipelineShaderGroupHandleCaptureReplay : VkBool32
            val mutable public rayTracingPipelineShaderGroupHandleCaptureReplayMixed : VkBool32
            val mutable public rayTracingPipelineTraceRaysIndirect : VkBool32
            val mutable public rayTraversalPrimitiveCulling : VkBool32

            new(pNext : nativeint, rayTracingPipeline : VkBool32, rayTracingPipelineShaderGroupHandleCaptureReplay : VkBool32, rayTracingPipelineShaderGroupHandleCaptureReplayMixed : VkBool32, rayTracingPipelineTraceRaysIndirect : VkBool32, rayTraversalPrimitiveCulling : VkBool32) =
                {
                    sType = 1000347000u
                    pNext = pNext
                    rayTracingPipeline = rayTracingPipeline
                    rayTracingPipelineShaderGroupHandleCaptureReplay = rayTracingPipelineShaderGroupHandleCaptureReplay
                    rayTracingPipelineShaderGroupHandleCaptureReplayMixed = rayTracingPipelineShaderGroupHandleCaptureReplayMixed
                    rayTracingPipelineTraceRaysIndirect = rayTracingPipelineTraceRaysIndirect
                    rayTraversalPrimitiveCulling = rayTraversalPrimitiveCulling
                }

            new(rayTracingPipeline : VkBool32, rayTracingPipelineShaderGroupHandleCaptureReplay : VkBool32, rayTracingPipelineShaderGroupHandleCaptureReplayMixed : VkBool32, rayTracingPipelineTraceRaysIndirect : VkBool32, rayTraversalPrimitiveCulling : VkBool32) =
                VkPhysicalDeviceRayTracingPipelineFeaturesKHR(Unchecked.defaultof<nativeint>, rayTracingPipeline, rayTracingPipelineShaderGroupHandleCaptureReplay, rayTracingPipelineShaderGroupHandleCaptureReplayMixed, rayTracingPipelineTraceRaysIndirect, rayTraversalPrimitiveCulling)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.rayTracingPipeline = Unchecked.defaultof<VkBool32> && x.rayTracingPipelineShaderGroupHandleCaptureReplay = Unchecked.defaultof<VkBool32> && x.rayTracingPipelineShaderGroupHandleCaptureReplayMixed = Unchecked.defaultof<VkBool32> && x.rayTracingPipelineTraceRaysIndirect = Unchecked.defaultof<VkBool32> && x.rayTraversalPrimitiveCulling = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceRayTracingPipelineFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "rayTracingPipeline = %A" x.rayTracingPipeline
                    sprintf "rayTracingPipelineShaderGroupHandleCaptureReplay = %A" x.rayTracingPipelineShaderGroupHandleCaptureReplay
                    sprintf "rayTracingPipelineShaderGroupHandleCaptureReplayMixed = %A" x.rayTracingPipelineShaderGroupHandleCaptureReplayMixed
                    sprintf "rayTracingPipelineTraceRaysIndirect = %A" x.rayTracingPipelineTraceRaysIndirect
                    sprintf "rayTraversalPrimitiveCulling = %A" x.rayTraversalPrimitiveCulling
                ] |> sprintf "VkPhysicalDeviceRayTracingPipelineFeaturesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceRayTracingPipelinePropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderGroupHandleSize : uint32
            val mutable public maxRayRecursionDepth : uint32
            val mutable public maxShaderGroupStride : uint32
            val mutable public shaderGroupBaseAlignment : uint32
            val mutable public shaderGroupHandleCaptureReplaySize : uint32
            val mutable public maxRayDispatchInvocationCount : uint32
            val mutable public shaderGroupHandleAlignment : uint32
            val mutable public maxRayHitAttributeSize : uint32

            new(pNext : nativeint, shaderGroupHandleSize : uint32, maxRayRecursionDepth : uint32, maxShaderGroupStride : uint32, shaderGroupBaseAlignment : uint32, shaderGroupHandleCaptureReplaySize : uint32, maxRayDispatchInvocationCount : uint32, shaderGroupHandleAlignment : uint32, maxRayHitAttributeSize : uint32) =
                {
                    sType = 1000347001u
                    pNext = pNext
                    shaderGroupHandleSize = shaderGroupHandleSize
                    maxRayRecursionDepth = maxRayRecursionDepth
                    maxShaderGroupStride = maxShaderGroupStride
                    shaderGroupBaseAlignment = shaderGroupBaseAlignment
                    shaderGroupHandleCaptureReplaySize = shaderGroupHandleCaptureReplaySize
                    maxRayDispatchInvocationCount = maxRayDispatchInvocationCount
                    shaderGroupHandleAlignment = shaderGroupHandleAlignment
                    maxRayHitAttributeSize = maxRayHitAttributeSize
                }

            new(shaderGroupHandleSize : uint32, maxRayRecursionDepth : uint32, maxShaderGroupStride : uint32, shaderGroupBaseAlignment : uint32, shaderGroupHandleCaptureReplaySize : uint32, maxRayDispatchInvocationCount : uint32, shaderGroupHandleAlignment : uint32, maxRayHitAttributeSize : uint32) =
                VkPhysicalDeviceRayTracingPipelinePropertiesKHR(Unchecked.defaultof<nativeint>, shaderGroupHandleSize, maxRayRecursionDepth, maxShaderGroupStride, shaderGroupBaseAlignment, shaderGroupHandleCaptureReplaySize, maxRayDispatchInvocationCount, shaderGroupHandleAlignment, maxRayHitAttributeSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderGroupHandleSize = Unchecked.defaultof<uint32> && x.maxRayRecursionDepth = Unchecked.defaultof<uint32> && x.maxShaderGroupStride = Unchecked.defaultof<uint32> && x.shaderGroupBaseAlignment = Unchecked.defaultof<uint32> && x.shaderGroupHandleCaptureReplaySize = Unchecked.defaultof<uint32> && x.maxRayDispatchInvocationCount = Unchecked.defaultof<uint32> && x.shaderGroupHandleAlignment = Unchecked.defaultof<uint32> && x.maxRayHitAttributeSize = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceRayTracingPipelinePropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderGroupHandleSize = %A" x.shaderGroupHandleSize
                    sprintf "maxRayRecursionDepth = %A" x.maxRayRecursionDepth
                    sprintf "maxShaderGroupStride = %A" x.maxShaderGroupStride
                    sprintf "shaderGroupBaseAlignment = %A" x.shaderGroupBaseAlignment
                    sprintf "shaderGroupHandleCaptureReplaySize = %A" x.shaderGroupHandleCaptureReplaySize
                    sprintf "maxRayDispatchInvocationCount = %A" x.maxRayDispatchInvocationCount
                    sprintf "shaderGroupHandleAlignment = %A" x.shaderGroupHandleAlignment
                    sprintf "maxRayHitAttributeSize = %A" x.maxRayHitAttributeSize
                ] |> sprintf "VkPhysicalDeviceRayTracingPipelinePropertiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRayTracingShaderGroupCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public _type : VkRayTracingShaderGroupTypeKHR
            val mutable public generalShader : uint32
            val mutable public closestHitShader : uint32
            val mutable public anyHitShader : uint32
            val mutable public intersectionShader : uint32
            val mutable public pShaderGroupCaptureReplayHandle : nativeint

            new(pNext : nativeint, _type : VkRayTracingShaderGroupTypeKHR, generalShader : uint32, closestHitShader : uint32, anyHitShader : uint32, intersectionShader : uint32, pShaderGroupCaptureReplayHandle : nativeint) =
                {
                    sType = 1000150016u
                    pNext = pNext
                    _type = _type
                    generalShader = generalShader
                    closestHitShader = closestHitShader
                    anyHitShader = anyHitShader
                    intersectionShader = intersectionShader
                    pShaderGroupCaptureReplayHandle = pShaderGroupCaptureReplayHandle
                }

            new(_type : VkRayTracingShaderGroupTypeKHR, generalShader : uint32, closestHitShader : uint32, anyHitShader : uint32, intersectionShader : uint32, pShaderGroupCaptureReplayHandle : nativeint) =
                VkRayTracingShaderGroupCreateInfoKHR(Unchecked.defaultof<nativeint>, _type, generalShader, closestHitShader, anyHitShader, intersectionShader, pShaderGroupCaptureReplayHandle)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkRayTracingShaderGroupTypeKHR> && x.generalShader = Unchecked.defaultof<uint32> && x.closestHitShader = Unchecked.defaultof<uint32> && x.anyHitShader = Unchecked.defaultof<uint32> && x.intersectionShader = Unchecked.defaultof<uint32> && x.pShaderGroupCaptureReplayHandle = Unchecked.defaultof<nativeint>

            static member Empty =
                VkRayTracingShaderGroupCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRayTracingShaderGroupTypeKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "_type = %A" x._type
                    sprintf "generalShader = %A" x.generalShader
                    sprintf "closestHitShader = %A" x.closestHitShader
                    sprintf "anyHitShader = %A" x.anyHitShader
                    sprintf "intersectionShader = %A" x.intersectionShader
                    sprintf "pShaderGroupCaptureReplayHandle = %A" x.pShaderGroupCaptureReplayHandle
                ] |> sprintf "VkRayTracingShaderGroupCreateInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRayTracingPipelineInterfaceCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxPipelineRayPayloadSize : uint32
            val mutable public maxPipelineRayHitAttributeSize : uint32

            new(pNext : nativeint, maxPipelineRayPayloadSize : uint32, maxPipelineRayHitAttributeSize : uint32) =
                {
                    sType = 1000150018u
                    pNext = pNext
                    maxPipelineRayPayloadSize = maxPipelineRayPayloadSize
                    maxPipelineRayHitAttributeSize = maxPipelineRayHitAttributeSize
                }

            new(maxPipelineRayPayloadSize : uint32, maxPipelineRayHitAttributeSize : uint32) =
                VkRayTracingPipelineInterfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, maxPipelineRayPayloadSize, maxPipelineRayHitAttributeSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxPipelineRayPayloadSize = Unchecked.defaultof<uint32> && x.maxPipelineRayHitAttributeSize = Unchecked.defaultof<uint32>

            static member Empty =
                VkRayTracingPipelineInterfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxPipelineRayPayloadSize = %A" x.maxPipelineRayPayloadSize
                    sprintf "maxPipelineRayHitAttributeSize = %A" x.maxPipelineRayHitAttributeSize
                ] |> sprintf "VkRayTracingPipelineInterfaceCreateInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRayTracingPipelineCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPipelineCreateFlags
            val mutable public stageCount : uint32
            val mutable public pStages : nativeptr<VkPipelineShaderStageCreateInfo>
            val mutable public groupCount : uint32
            val mutable public pGroups : nativeptr<VkRayTracingShaderGroupCreateInfoKHR>
            val mutable public maxPipelineRayRecursionDepth : uint32
            val mutable public pLibraryInfo : nativeptr<VkPipelineLibraryCreateInfoKHR>
            val mutable public pLibraryInterface : nativeptr<VkRayTracingPipelineInterfaceCreateInfoKHR>
            val mutable public pDynamicState : nativeptr<VkPipelineDynamicStateCreateInfo>
            val mutable public layout : VkPipelineLayout
            val mutable public basePipelineHandle : VkPipeline
            val mutable public basePipelineIndex : int

            new(pNext : nativeint, flags : VkPipelineCreateFlags, stageCount : uint32, pStages : nativeptr<VkPipelineShaderStageCreateInfo>, groupCount : uint32, pGroups : nativeptr<VkRayTracingShaderGroupCreateInfoKHR>, maxPipelineRayRecursionDepth : uint32, pLibraryInfo : nativeptr<VkPipelineLibraryCreateInfoKHR>, pLibraryInterface : nativeptr<VkRayTracingPipelineInterfaceCreateInfoKHR>, pDynamicState : nativeptr<VkPipelineDynamicStateCreateInfo>, layout : VkPipelineLayout, basePipelineHandle : VkPipeline, basePipelineIndex : int) =
                {
                    sType = 1000150015u
                    pNext = pNext
                    flags = flags
                    stageCount = stageCount
                    pStages = pStages
                    groupCount = groupCount
                    pGroups = pGroups
                    maxPipelineRayRecursionDepth = maxPipelineRayRecursionDepth
                    pLibraryInfo = pLibraryInfo
                    pLibraryInterface = pLibraryInterface
                    pDynamicState = pDynamicState
                    layout = layout
                    basePipelineHandle = basePipelineHandle
                    basePipelineIndex = basePipelineIndex
                }

            new(flags : VkPipelineCreateFlags, stageCount : uint32, pStages : nativeptr<VkPipelineShaderStageCreateInfo>, groupCount : uint32, pGroups : nativeptr<VkRayTracingShaderGroupCreateInfoKHR>, maxPipelineRayRecursionDepth : uint32, pLibraryInfo : nativeptr<VkPipelineLibraryCreateInfoKHR>, pLibraryInterface : nativeptr<VkRayTracingPipelineInterfaceCreateInfoKHR>, pDynamicState : nativeptr<VkPipelineDynamicStateCreateInfo>, layout : VkPipelineLayout, basePipelineHandle : VkPipeline, basePipelineIndex : int) =
                VkRayTracingPipelineCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, stageCount, pStages, groupCount, pGroups, maxPipelineRayRecursionDepth, pLibraryInfo, pLibraryInterface, pDynamicState, layout, basePipelineHandle, basePipelineIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCreateFlags> && x.stageCount = Unchecked.defaultof<uint32> && x.pStages = Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>> && x.groupCount = Unchecked.defaultof<uint32> && x.pGroups = Unchecked.defaultof<nativeptr<VkRayTracingShaderGroupCreateInfoKHR>> && x.maxPipelineRayRecursionDepth = Unchecked.defaultof<uint32> && x.pLibraryInfo = Unchecked.defaultof<nativeptr<VkPipelineLibraryCreateInfoKHR>> && x.pLibraryInterface = Unchecked.defaultof<nativeptr<VkRayTracingPipelineInterfaceCreateInfoKHR>> && x.pDynamicState = Unchecked.defaultof<nativeptr<VkPipelineDynamicStateCreateInfo>> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.basePipelineHandle = Unchecked.defaultof<VkPipeline> && x.basePipelineIndex = Unchecked.defaultof<int>

            static member Empty =
                VkRayTracingPipelineCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRayTracingShaderGroupCreateInfoKHR>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineLibraryCreateInfoKHR>>, Unchecked.defaultof<nativeptr<VkRayTracingPipelineInterfaceCreateInfoKHR>>, Unchecked.defaultof<nativeptr<VkPipelineDynamicStateCreateInfo>>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<int>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "stageCount = %A" x.stageCount
                    sprintf "pStages = %A" x.pStages
                    sprintf "groupCount = %A" x.groupCount
                    sprintf "pGroups = %A" x.pGroups
                    sprintf "maxPipelineRayRecursionDepth = %A" x.maxPipelineRayRecursionDepth
                    sprintf "pLibraryInfo = %A" x.pLibraryInfo
                    sprintf "pLibraryInterface = %A" x.pLibraryInterface
                    sprintf "pDynamicState = %A" x.pDynamicState
                    sprintf "layout = %A" x.layout
                    sprintf "basePipelineHandle = %A" x.basePipelineHandle
                    sprintf "basePipelineIndex = %A" x.basePipelineIndex
                ] |> sprintf "VkRayTracingPipelineCreateInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkStridedDeviceAddressRegionKHR =
        struct
            val mutable public deviceAddress : VkDeviceAddress
            val mutable public stride : VkDeviceSize
            val mutable public size : VkDeviceSize

            new(deviceAddress : VkDeviceAddress, stride : VkDeviceSize, size : VkDeviceSize) =
                {
                    deviceAddress = deviceAddress
                    stride = stride
                    size = size
                }

            member x.IsEmpty =
                x.deviceAddress = Unchecked.defaultof<VkDeviceAddress> && x.stride = Unchecked.defaultof<VkDeviceSize> && x.size = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkStridedDeviceAddressRegionKHR(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "deviceAddress = %A" x.deviceAddress
                    sprintf "stride = %A" x.stride
                    sprintf "size = %A" x.size
                ] |> sprintf "VkStridedDeviceAddressRegionKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkTraceRaysIndirectCommandKHR =
        struct
            val mutable public width : uint32
            val mutable public height : uint32
            val mutable public depth : uint32

            new(width : uint32, height : uint32, depth : uint32) =
                {
                    width = width
                    height = height
                    depth = depth
                }

            member x.IsEmpty =
                x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32> && x.depth = Unchecked.defaultof<uint32>

            static member Empty =
                VkTraceRaysIndirectCommandKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "width = %A" x.width
                    sprintf "height = %A" x.height
                    sprintf "depth = %A" x.depth
                ] |> sprintf "VkTraceRaysIndirectCommandKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkBufferUsageFlags with
              static member inline ShaderBindingTableBitKhr = unbox<VkBufferUsageFlags> 0x00000400
         type VkDynamicState with
              static member inline RayTracingPipelineStackSizeKhr = unbox<VkDynamicState> 1000347000
         type VkPipelineBindPoint with
              static member inline RayTracingKhr = unbox<VkPipelineBindPoint> 1000165000
         type VkPipelineCreateFlags with
              static member inline RayTracingNoNullAnyHitShadersBitKhr = unbox<VkPipelineCreateFlags> 0x00004000
              static member inline RayTracingNoNullClosestHitShadersBitKhr = unbox<VkPipelineCreateFlags> 0x00008000
              static member inline RayTracingNoNullMissShadersBitKhr = unbox<VkPipelineCreateFlags> 0x00010000
              static member inline RayTracingNoNullIntersectionShadersBitKhr = unbox<VkPipelineCreateFlags> 0x00020000
              static member inline RayTracingSkipTrianglesBitKhr = unbox<VkPipelineCreateFlags> 0x00001000
              static member inline RayTracingSkipAabbsBitKhr = unbox<VkPipelineCreateFlags> 0x00002000
              static member inline RayTracingShaderGroupHandleCaptureReplayBitKhr = unbox<VkPipelineCreateFlags> 0x00080000
         type VkPipelineStageFlags with
              static member inline RayTracingShaderBitKhr = unbox<VkPipelineStageFlags> 0x00200000
         type VkShaderStageFlags with
              static member inline RaygenBitKhr = unbox<VkShaderStageFlags> 0x00000100
              static member inline AnyHitBitKhr = unbox<VkShaderStageFlags> 0x00000200
              static member inline ClosestHitBitKhr = unbox<VkShaderStageFlags> 0x00000400
              static member inline MissBitKhr = unbox<VkShaderStageFlags> 0x00000800
              static member inline IntersectionBitKhr = unbox<VkShaderStageFlags> 0x00001000
              static member inline CallableBitKhr = unbox<VkShaderStageFlags> 0x00002000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdTraceRaysKHRDel = delegate of VkCommandBuffer * nativeptr<VkStridedDeviceAddressRegionKHR> * nativeptr<VkStridedDeviceAddressRegionKHR> * nativeptr<VkStridedDeviceAddressRegionKHR> * nativeptr<VkStridedDeviceAddressRegionKHR> * uint32 * uint32 * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateRayTracingPipelinesKHRDel = delegate of VkDevice * VkDeferredOperationKHR * VkPipelineCache * uint32 * nativeptr<VkRayTracingPipelineCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkPipeline> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetRayTracingShaderGroupHandlesKHRDel = delegate of VkDevice * VkPipeline * uint32 * uint32 * uint64 * nativeint -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetRayTracingCaptureReplayShaderGroupHandlesKHRDel = delegate of VkDevice * VkPipeline * uint32 * uint32 * uint64 * nativeint -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdTraceRaysIndirectKHRDel = delegate of VkCommandBuffer * nativeptr<VkStridedDeviceAddressRegionKHR> * nativeptr<VkStridedDeviceAddressRegionKHR> * nativeptr<VkStridedDeviceAddressRegionKHR> * nativeptr<VkStridedDeviceAddressRegionKHR> * VkDeviceAddress -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetRayTracingShaderGroupStackSizeKHRDel = delegate of VkDevice * VkPipeline * uint32 * VkShaderGroupShaderKHR -> VkDeviceSize
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetRayTracingPipelineStackSizeKHRDel = delegate of VkCommandBuffer * uint32 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRRayTracingPipeline")
            static let s_vkCmdTraceRaysKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdTraceRaysKHRDel> "vkCmdTraceRaysKHR"
            static let s_vkCreateRayTracingPipelinesKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateRayTracingPipelinesKHRDel> "vkCreateRayTracingPipelinesKHR"
            static let s_vkGetRayTracingShaderGroupHandlesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetRayTracingShaderGroupHandlesKHRDel> "vkGetRayTracingShaderGroupHandlesKHR"
            static let s_vkGetRayTracingCaptureReplayShaderGroupHandlesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetRayTracingCaptureReplayShaderGroupHandlesKHRDel> "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"
            static let s_vkCmdTraceRaysIndirectKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdTraceRaysIndirectKHRDel> "vkCmdTraceRaysIndirectKHR"
            static let s_vkGetRayTracingShaderGroupStackSizeKHRDel = VkRaw.vkImportInstanceDelegate<VkGetRayTracingShaderGroupStackSizeKHRDel> "vkGetRayTracingShaderGroupStackSizeKHR"
            static let s_vkCmdSetRayTracingPipelineStackSizeKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdSetRayTracingPipelineStackSizeKHRDel> "vkCmdSetRayTracingPipelineStackSizeKHR"
            static do Report.End(3) |> ignore
            static member vkCmdTraceRaysKHR = s_vkCmdTraceRaysKHRDel
            static member vkCreateRayTracingPipelinesKHR = s_vkCreateRayTracingPipelinesKHRDel
            static member vkGetRayTracingShaderGroupHandlesKHR = s_vkGetRayTracingShaderGroupHandlesKHRDel
            static member vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = s_vkGetRayTracingCaptureReplayShaderGroupHandlesKHRDel
            static member vkCmdTraceRaysIndirectKHR = s_vkCmdTraceRaysIndirectKHRDel
            static member vkGetRayTracingShaderGroupStackSizeKHR = s_vkGetRayTracingShaderGroupStackSizeKHRDel
            static member vkCmdSetRayTracingPipelineStackSizeKHR = s_vkCmdSetRayTracingPipelineStackSizeKHRDel
        let vkCmdTraceRaysKHR(commandBuffer : VkCommandBuffer, pRaygenShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, pMissShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, pHitShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, pCallableShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, width : uint32, height : uint32, depth : uint32) = Loader<unit>.vkCmdTraceRaysKHR.Invoke(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth)
        let vkCreateRayTracingPipelinesKHR(device : VkDevice, deferredOperation : VkDeferredOperationKHR, pipelineCache : VkPipelineCache, createInfoCount : uint32, pCreateInfos : nativeptr<VkRayTracingPipelineCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pPipelines : nativeptr<VkPipeline>) = Loader<unit>.vkCreateRayTracingPipelinesKHR.Invoke(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
        let vkGetRayTracingShaderGroupHandlesKHR(device : VkDevice, pipeline : VkPipeline, firstGroup : uint32, groupCount : uint32, dataSize : uint64, pData : nativeint) = Loader<unit>.vkGetRayTracingShaderGroupHandlesKHR.Invoke(device, pipeline, firstGroup, groupCount, dataSize, pData)
        let vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device : VkDevice, pipeline : VkPipeline, firstGroup : uint32, groupCount : uint32, dataSize : uint64, pData : nativeint) = Loader<unit>.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR.Invoke(device, pipeline, firstGroup, groupCount, dataSize, pData)
        let vkCmdTraceRaysIndirectKHR(commandBuffer : VkCommandBuffer, pRaygenShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, pMissShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, pHitShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, pCallableShaderBindingTable : nativeptr<VkStridedDeviceAddressRegionKHR>, indirectDeviceAddress : VkDeviceAddress) = Loader<unit>.vkCmdTraceRaysIndirectKHR.Invoke(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress)
        let vkGetRayTracingShaderGroupStackSizeKHR(device : VkDevice, pipeline : VkPipeline, group : uint32, groupShader : VkShaderGroupShaderKHR) = Loader<unit>.vkGetRayTracingShaderGroupStackSizeKHR.Invoke(device, pipeline, group, groupShader)
        let vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer : VkCommandBuffer, pipelineStackSize : uint32) = Loader<unit>.vkCmdSetRayTracingPipelineStackSizeKHR.Invoke(commandBuffer, pipelineStackSize)

module NVRayTracing =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open EXTDescriptorIndexing
    open KHRAccelerationStructure
    open KHRBufferDeviceAddress
    open KHRDeferredHostOperations
    open KHRGetMemoryRequirements2
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance3
    open KHRPipelineLibrary
    open KHRRayTracingPipeline
    open KHRShaderFloatControls
    open KHRSpirv14
    let Name = "VK_NV_ray_tracing"
    let Number = 166

    let Required = [ KHRGetMemoryRequirements2.Name; KHRGetPhysicalDeviceProperties2.Name ]



    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureNV =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkAccelerationStructureNV(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    type VkRayTracingShaderGroupTypeNV = VkRayTracingShaderGroupTypeKHR
    type VkGeometryTypeNV = VkGeometryTypeKHR
    type VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR
    type VkGeometryFlagsNV = VkGeometryFlagsKHR
    type VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR
    type VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR
    type VkCopyAccelerationStructureModeNV = VkCopyAccelerationStructureModeKHR

    type VkAccelerationStructureMemoryRequirementsTypeNV =
        | Object = 0
        | BuildScratch = 1
        | UpdateScratch = 2


    type VkAabbPositionsNV = VkAabbPositionsKHR

    [<StructLayout(LayoutKind.Sequential)>]
    type VkGeometryTrianglesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vertexData : VkBuffer
            val mutable public vertexOffset : VkDeviceSize
            val mutable public vertexCount : uint32
            val mutable public vertexStride : VkDeviceSize
            val mutable public vertexFormat : VkFormat
            val mutable public indexData : VkBuffer
            val mutable public indexOffset : VkDeviceSize
            val mutable public indexCount : uint32
            val mutable public indexType : VkIndexType
            val mutable public transformData : VkBuffer
            val mutable public transformOffset : VkDeviceSize

            new(pNext : nativeint, vertexData : VkBuffer, vertexOffset : VkDeviceSize, vertexCount : uint32, vertexStride : VkDeviceSize, vertexFormat : VkFormat, indexData : VkBuffer, indexOffset : VkDeviceSize, indexCount : uint32, indexType : VkIndexType, transformData : VkBuffer, transformOffset : VkDeviceSize) =
                {
                    sType = 1000165004u
                    pNext = pNext
                    vertexData = vertexData
                    vertexOffset = vertexOffset
                    vertexCount = vertexCount
                    vertexStride = vertexStride
                    vertexFormat = vertexFormat
                    indexData = indexData
                    indexOffset = indexOffset
                    indexCount = indexCount
                    indexType = indexType
                    transformData = transformData
                    transformOffset = transformOffset
                }

            new(vertexData : VkBuffer, vertexOffset : VkDeviceSize, vertexCount : uint32, vertexStride : VkDeviceSize, vertexFormat : VkFormat, indexData : VkBuffer, indexOffset : VkDeviceSize, indexCount : uint32, indexType : VkIndexType, transformData : VkBuffer, transformOffset : VkDeviceSize) =
                VkGeometryTrianglesNV(Unchecked.defaultof<nativeint>, vertexData, vertexOffset, vertexCount, vertexStride, vertexFormat, indexData, indexOffset, indexCount, indexType, transformData, transformOffset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vertexData = Unchecked.defaultof<VkBuffer> && x.vertexOffset = Unchecked.defaultof<VkDeviceSize> && x.vertexCount = Unchecked.defaultof<uint32> && x.vertexStride = Unchecked.defaultof<VkDeviceSize> && x.vertexFormat = Unchecked.defaultof<VkFormat> && x.indexData = Unchecked.defaultof<VkBuffer> && x.indexOffset = Unchecked.defaultof<VkDeviceSize> && x.indexCount = Unchecked.defaultof<uint32> && x.indexType = Unchecked.defaultof<VkIndexType> && x.transformData = Unchecked.defaultof<VkBuffer> && x.transformOffset = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkGeometryTrianglesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkIndexType>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "vertexData = %A" x.vertexData
                    sprintf "vertexOffset = %A" x.vertexOffset
                    sprintf "vertexCount = %A" x.vertexCount
                    sprintf "vertexStride = %A" x.vertexStride
                    sprintf "vertexFormat = %A" x.vertexFormat
                    sprintf "indexData = %A" x.indexData
                    sprintf "indexOffset = %A" x.indexOffset
                    sprintf "indexCount = %A" x.indexCount
                    sprintf "indexType = %A" x.indexType
                    sprintf "transformData = %A" x.transformData
                    sprintf "transformOffset = %A" x.transformOffset
                ] |> sprintf "VkGeometryTrianglesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkGeometryAABBNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public aabbData : VkBuffer
            val mutable public numAABBs : uint32
            val mutable public stride : uint32
            val mutable public offset : VkDeviceSize

            new(pNext : nativeint, aabbData : VkBuffer, numAABBs : uint32, stride : uint32, offset : VkDeviceSize) =
                {
                    sType = 1000165005u
                    pNext = pNext
                    aabbData = aabbData
                    numAABBs = numAABBs
                    stride = stride
                    offset = offset
                }

            new(aabbData : VkBuffer, numAABBs : uint32, stride : uint32, offset : VkDeviceSize) =
                VkGeometryAABBNV(Unchecked.defaultof<nativeint>, aabbData, numAABBs, stride, offset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.aabbData = Unchecked.defaultof<VkBuffer> && x.numAABBs = Unchecked.defaultof<uint32> && x.stride = Unchecked.defaultof<uint32> && x.offset = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkGeometryAABBNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "aabbData = %A" x.aabbData
                    sprintf "numAABBs = %A" x.numAABBs
                    sprintf "stride = %A" x.stride
                    sprintf "offset = %A" x.offset
                ] |> sprintf "VkGeometryAABBNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkGeometryDataNV =
        struct
            val mutable public triangles : VkGeometryTrianglesNV
            val mutable public aabbs : VkGeometryAABBNV

            new(triangles : VkGeometryTrianglesNV, aabbs : VkGeometryAABBNV) =
                {
                    triangles = triangles
                    aabbs = aabbs
                }

            member x.IsEmpty =
                x.triangles = Unchecked.defaultof<VkGeometryTrianglesNV> && x.aabbs = Unchecked.defaultof<VkGeometryAABBNV>

            static member Empty =
                VkGeometryDataNV(Unchecked.defaultof<VkGeometryTrianglesNV>, Unchecked.defaultof<VkGeometryAABBNV>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "triangles = %A" x.triangles
                    sprintf "aabbs = %A" x.aabbs
                ] |> sprintf "VkGeometryDataNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkGeometryNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public geometryType : VkGeometryTypeKHR
            val mutable public geometry : VkGeometryDataNV
            val mutable public flags : VkGeometryFlagsKHR

            new(pNext : nativeint, geometryType : VkGeometryTypeKHR, geometry : VkGeometryDataNV, flags : VkGeometryFlagsKHR) =
                {
                    sType = 1000165003u
                    pNext = pNext
                    geometryType = geometryType
                    geometry = geometry
                    flags = flags
                }

            new(geometryType : VkGeometryTypeKHR, geometry : VkGeometryDataNV, flags : VkGeometryFlagsKHR) =
                VkGeometryNV(Unchecked.defaultof<nativeint>, geometryType, geometry, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.geometryType = Unchecked.defaultof<VkGeometryTypeKHR> && x.geometry = Unchecked.defaultof<VkGeometryDataNV> && x.flags = Unchecked.defaultof<VkGeometryFlagsKHR>

            static member Empty =
                VkGeometryNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkGeometryTypeKHR>, Unchecked.defaultof<VkGeometryDataNV>, Unchecked.defaultof<VkGeometryFlagsKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "geometryType = %A" x.geometryType
                    sprintf "geometry = %A" x.geometry
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkGeometryNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public _type : VkAccelerationStructureTypeNV
            val mutable public flags : VkBuildAccelerationStructureFlagsNV
            val mutable public instanceCount : uint32
            val mutable public geometryCount : uint32
            val mutable public pGeometries : nativeptr<VkGeometryNV>

            new(pNext : nativeint, _type : VkAccelerationStructureTypeNV, flags : VkBuildAccelerationStructureFlagsNV, instanceCount : uint32, geometryCount : uint32, pGeometries : nativeptr<VkGeometryNV>) =
                {
                    sType = 1000165012u
                    pNext = pNext
                    _type = _type
                    flags = flags
                    instanceCount = instanceCount
                    geometryCount = geometryCount
                    pGeometries = pGeometries
                }

            new(_type : VkAccelerationStructureTypeNV, flags : VkBuildAccelerationStructureFlagsNV, instanceCount : uint32, geometryCount : uint32, pGeometries : nativeptr<VkGeometryNV>) =
                VkAccelerationStructureInfoNV(Unchecked.defaultof<nativeint>, _type, flags, instanceCount, geometryCount, pGeometries)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkAccelerationStructureTypeNV> && x.flags = Unchecked.defaultof<VkBuildAccelerationStructureFlagsNV> && x.instanceCount = Unchecked.defaultof<uint32> && x.geometryCount = Unchecked.defaultof<uint32> && x.pGeometries = Unchecked.defaultof<nativeptr<VkGeometryNV>>

            static member Empty =
                VkAccelerationStructureInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureTypeNV>, Unchecked.defaultof<VkBuildAccelerationStructureFlagsNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkGeometryNV>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "_type = %A" x._type
                    sprintf "flags = %A" x.flags
                    sprintf "instanceCount = %A" x.instanceCount
                    sprintf "geometryCount = %A" x.geometryCount
                    sprintf "pGeometries = %A" x.pGeometries
                ] |> sprintf "VkAccelerationStructureInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public compactedSize : VkDeviceSize
            val mutable public info : VkAccelerationStructureInfoNV

            new(pNext : nativeint, compactedSize : VkDeviceSize, info : VkAccelerationStructureInfoNV) =
                {
                    sType = 1000165001u
                    pNext = pNext
                    compactedSize = compactedSize
                    info = info
                }

            new(compactedSize : VkDeviceSize, info : VkAccelerationStructureInfoNV) =
                VkAccelerationStructureCreateInfoNV(Unchecked.defaultof<nativeint>, compactedSize, info)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.compactedSize = Unchecked.defaultof<VkDeviceSize> && x.info = Unchecked.defaultof<VkAccelerationStructureInfoNV>

            static member Empty =
                VkAccelerationStructureCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkAccelerationStructureInfoNV>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "compactedSize = %A" x.compactedSize
                    sprintf "info = %A" x.info
                ] |> sprintf "VkAccelerationStructureCreateInfoNV { %s }"
        end

    type VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureMemoryRequirementsInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public _type : VkAccelerationStructureMemoryRequirementsTypeNV
            val mutable public accelerationStructure : VkAccelerationStructureNV

            new(pNext : nativeint, _type : VkAccelerationStructureMemoryRequirementsTypeNV, accelerationStructure : VkAccelerationStructureNV) =
                {
                    sType = 1000165008u
                    pNext = pNext
                    _type = _type
                    accelerationStructure = accelerationStructure
                }

            new(_type : VkAccelerationStructureMemoryRequirementsTypeNV, accelerationStructure : VkAccelerationStructureNV) =
                VkAccelerationStructureMemoryRequirementsInfoNV(Unchecked.defaultof<nativeint>, _type, accelerationStructure)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkAccelerationStructureMemoryRequirementsTypeNV> && x.accelerationStructure = Unchecked.defaultof<VkAccelerationStructureNV>

            static member Empty =
                VkAccelerationStructureMemoryRequirementsInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureMemoryRequirementsTypeNV>, Unchecked.defaultof<VkAccelerationStructureNV>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "_type = %A" x._type
                    sprintf "accelerationStructure = %A" x.accelerationStructure
                ] |> sprintf "VkAccelerationStructureMemoryRequirementsInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBindAccelerationStructureMemoryInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public accelerationStructure : VkAccelerationStructureNV
            val mutable public memory : VkDeviceMemory
            val mutable public memoryOffset : VkDeviceSize
            val mutable public deviceIndexCount : uint32
            val mutable public pDeviceIndices : nativeptr<uint32>

            new(pNext : nativeint, accelerationStructure : VkAccelerationStructureNV, memory : VkDeviceMemory, memoryOffset : VkDeviceSize, deviceIndexCount : uint32, pDeviceIndices : nativeptr<uint32>) =
                {
                    sType = 1000165006u
                    pNext = pNext
                    accelerationStructure = accelerationStructure
                    memory = memory
                    memoryOffset = memoryOffset
                    deviceIndexCount = deviceIndexCount
                    pDeviceIndices = pDeviceIndices
                }

            new(accelerationStructure : VkAccelerationStructureNV, memory : VkDeviceMemory, memoryOffset : VkDeviceSize, deviceIndexCount : uint32, pDeviceIndices : nativeptr<uint32>) =
                VkBindAccelerationStructureMemoryInfoNV(Unchecked.defaultof<nativeint>, accelerationStructure, memory, memoryOffset, deviceIndexCount, pDeviceIndices)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructure = Unchecked.defaultof<VkAccelerationStructureNV> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.memoryOffset = Unchecked.defaultof<VkDeviceSize> && x.deviceIndexCount = Unchecked.defaultof<uint32> && x.pDeviceIndices = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkBindAccelerationStructureMemoryInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAccelerationStructureNV>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "accelerationStructure = %A" x.accelerationStructure
                    sprintf "memory = %A" x.memory
                    sprintf "memoryOffset = %A" x.memoryOffset
                    sprintf "deviceIndexCount = %A" x.deviceIndexCount
                    sprintf "pDeviceIndices = %A" x.pDeviceIndices
                ] |> sprintf "VkBindAccelerationStructureMemoryInfoNV { %s }"
        end

    type VkMemoryRequirements2KHR = KHRGetMemoryRequirements2.VkMemoryRequirements2KHR

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceRayTracingPropertiesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderGroupHandleSize : uint32
            val mutable public maxRecursionDepth : uint32
            val mutable public maxShaderGroupStride : uint32
            val mutable public shaderGroupBaseAlignment : uint32
            val mutable public maxGeometryCount : uint64
            val mutable public maxInstanceCount : uint64
            val mutable public maxTriangleCount : uint64
            val mutable public maxDescriptorSetAccelerationStructures : uint32

            new(pNext : nativeint, shaderGroupHandleSize : uint32, maxRecursionDepth : uint32, maxShaderGroupStride : uint32, shaderGroupBaseAlignment : uint32, maxGeometryCount : uint64, maxInstanceCount : uint64, maxTriangleCount : uint64, maxDescriptorSetAccelerationStructures : uint32) =
                {
                    sType = 1000165009u
                    pNext = pNext
                    shaderGroupHandleSize = shaderGroupHandleSize
                    maxRecursionDepth = maxRecursionDepth
                    maxShaderGroupStride = maxShaderGroupStride
                    shaderGroupBaseAlignment = shaderGroupBaseAlignment
                    maxGeometryCount = maxGeometryCount
                    maxInstanceCount = maxInstanceCount
                    maxTriangleCount = maxTriangleCount
                    maxDescriptorSetAccelerationStructures = maxDescriptorSetAccelerationStructures
                }

            new(shaderGroupHandleSize : uint32, maxRecursionDepth : uint32, maxShaderGroupStride : uint32, shaderGroupBaseAlignment : uint32, maxGeometryCount : uint64, maxInstanceCount : uint64, maxTriangleCount : uint64, maxDescriptorSetAccelerationStructures : uint32) =
                VkPhysicalDeviceRayTracingPropertiesNV(Unchecked.defaultof<nativeint>, shaderGroupHandleSize, maxRecursionDepth, maxShaderGroupStride, shaderGroupBaseAlignment, maxGeometryCount, maxInstanceCount, maxTriangleCount, maxDescriptorSetAccelerationStructures)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderGroupHandleSize = Unchecked.defaultof<uint32> && x.maxRecursionDepth = Unchecked.defaultof<uint32> && x.maxShaderGroupStride = Unchecked.defaultof<uint32> && x.shaderGroupBaseAlignment = Unchecked.defaultof<uint32> && x.maxGeometryCount = Unchecked.defaultof<uint64> && x.maxInstanceCount = Unchecked.defaultof<uint64> && x.maxTriangleCount = Unchecked.defaultof<uint64> && x.maxDescriptorSetAccelerationStructures = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceRayTracingPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderGroupHandleSize = %A" x.shaderGroupHandleSize
                    sprintf "maxRecursionDepth = %A" x.maxRecursionDepth
                    sprintf "maxShaderGroupStride = %A" x.maxShaderGroupStride
                    sprintf "shaderGroupBaseAlignment = %A" x.shaderGroupBaseAlignment
                    sprintf "maxGeometryCount = %A" x.maxGeometryCount
                    sprintf "maxInstanceCount = %A" x.maxInstanceCount
                    sprintf "maxTriangleCount = %A" x.maxTriangleCount
                    sprintf "maxDescriptorSetAccelerationStructures = %A" x.maxDescriptorSetAccelerationStructures
                ] |> sprintf "VkPhysicalDeviceRayTracingPropertiesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRayTracingShaderGroupCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public _type : VkRayTracingShaderGroupTypeKHR
            val mutable public generalShader : uint32
            val mutable public closestHitShader : uint32
            val mutable public anyHitShader : uint32
            val mutable public intersectionShader : uint32

            new(pNext : nativeint, _type : VkRayTracingShaderGroupTypeKHR, generalShader : uint32, closestHitShader : uint32, anyHitShader : uint32, intersectionShader : uint32) =
                {
                    sType = 1000165011u
                    pNext = pNext
                    _type = _type
                    generalShader = generalShader
                    closestHitShader = closestHitShader
                    anyHitShader = anyHitShader
                    intersectionShader = intersectionShader
                }

            new(_type : VkRayTracingShaderGroupTypeKHR, generalShader : uint32, closestHitShader : uint32, anyHitShader : uint32, intersectionShader : uint32) =
                VkRayTracingShaderGroupCreateInfoNV(Unchecked.defaultof<nativeint>, _type, generalShader, closestHitShader, anyHitShader, intersectionShader)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkRayTracingShaderGroupTypeKHR> && x.generalShader = Unchecked.defaultof<uint32> && x.closestHitShader = Unchecked.defaultof<uint32> && x.anyHitShader = Unchecked.defaultof<uint32> && x.intersectionShader = Unchecked.defaultof<uint32>

            static member Empty =
                VkRayTracingShaderGroupCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRayTracingShaderGroupTypeKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "_type = %A" x._type
                    sprintf "generalShader = %A" x.generalShader
                    sprintf "closestHitShader = %A" x.closestHitShader
                    sprintf "anyHitShader = %A" x.anyHitShader
                    sprintf "intersectionShader = %A" x.intersectionShader
                ] |> sprintf "VkRayTracingShaderGroupCreateInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRayTracingPipelineCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPipelineCreateFlags
            val mutable public stageCount : uint32
            val mutable public pStages : nativeptr<VkPipelineShaderStageCreateInfo>
            val mutable public groupCount : uint32
            val mutable public pGroups : nativeptr<VkRayTracingShaderGroupCreateInfoNV>
            val mutable public maxRecursionDepth : uint32
            val mutable public layout : VkPipelineLayout
            val mutable public basePipelineHandle : VkPipeline
            val mutable public basePipelineIndex : int

            new(pNext : nativeint, flags : VkPipelineCreateFlags, stageCount : uint32, pStages : nativeptr<VkPipelineShaderStageCreateInfo>, groupCount : uint32, pGroups : nativeptr<VkRayTracingShaderGroupCreateInfoNV>, maxRecursionDepth : uint32, layout : VkPipelineLayout, basePipelineHandle : VkPipeline, basePipelineIndex : int) =
                {
                    sType = 1000165000u
                    pNext = pNext
                    flags = flags
                    stageCount = stageCount
                    pStages = pStages
                    groupCount = groupCount
                    pGroups = pGroups
                    maxRecursionDepth = maxRecursionDepth
                    layout = layout
                    basePipelineHandle = basePipelineHandle
                    basePipelineIndex = basePipelineIndex
                }

            new(flags : VkPipelineCreateFlags, stageCount : uint32, pStages : nativeptr<VkPipelineShaderStageCreateInfo>, groupCount : uint32, pGroups : nativeptr<VkRayTracingShaderGroupCreateInfoNV>, maxRecursionDepth : uint32, layout : VkPipelineLayout, basePipelineHandle : VkPipeline, basePipelineIndex : int) =
                VkRayTracingPipelineCreateInfoNV(Unchecked.defaultof<nativeint>, flags, stageCount, pStages, groupCount, pGroups, maxRecursionDepth, layout, basePipelineHandle, basePipelineIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCreateFlags> && x.stageCount = Unchecked.defaultof<uint32> && x.pStages = Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>> && x.groupCount = Unchecked.defaultof<uint32> && x.pGroups = Unchecked.defaultof<nativeptr<VkRayTracingShaderGroupCreateInfoNV>> && x.maxRecursionDepth = Unchecked.defaultof<uint32> && x.layout = Unchecked.defaultof<VkPipelineLayout> && x.basePipelineHandle = Unchecked.defaultof<VkPipeline> && x.basePipelineIndex = Unchecked.defaultof<int>

            static member Empty =
                VkRayTracingPipelineCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCreateFlags>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPipelineShaderStageCreateInfo>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRayTracingShaderGroupCreateInfoNV>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkPipelineLayout>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<int>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "stageCount = %A" x.stageCount
                    sprintf "pStages = %A" x.pStages
                    sprintf "groupCount = %A" x.groupCount
                    sprintf "pGroups = %A" x.pGroups
                    sprintf "maxRecursionDepth = %A" x.maxRecursionDepth
                    sprintf "layout = %A" x.layout
                    sprintf "basePipelineHandle = %A" x.basePipelineHandle
                    sprintf "basePipelineIndex = %A" x.basePipelineIndex
                ] |> sprintf "VkRayTracingPipelineCreateInfoNV { %s }"
        end

    type VkTransformMatrixNV = VkTransformMatrixKHR

    [<StructLayout(LayoutKind.Sequential)>]
    type VkWriteDescriptorSetAccelerationStructureNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public accelerationStructureCount : uint32
            val mutable public pAccelerationStructures : nativeptr<VkAccelerationStructureNV>

            new(pNext : nativeint, accelerationStructureCount : uint32, pAccelerationStructures : nativeptr<VkAccelerationStructureNV>) =
                {
                    sType = 1000165007u
                    pNext = pNext
                    accelerationStructureCount = accelerationStructureCount
                    pAccelerationStructures = pAccelerationStructures
                }

            new(accelerationStructureCount : uint32, pAccelerationStructures : nativeptr<VkAccelerationStructureNV>) =
                VkWriteDescriptorSetAccelerationStructureNV(Unchecked.defaultof<nativeint>, accelerationStructureCount, pAccelerationStructures)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.accelerationStructureCount = Unchecked.defaultof<uint32> && x.pAccelerationStructures = Unchecked.defaultof<nativeptr<VkAccelerationStructureNV>>

            static member Empty =
                VkWriteDescriptorSetAccelerationStructureNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkAccelerationStructureNV>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "accelerationStructureCount = %A" x.accelerationStructureCount
                    sprintf "pAccelerationStructures = %A" x.pAccelerationStructures
                ] |> sprintf "VkWriteDescriptorSetAccelerationStructureNV { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccelerationStructureTypeKHR with
              static member inline TopLevelNv = unbox<VkAccelerationStructureTypeKHR> 0
              static member inline BottomLevelNv = unbox<VkAccelerationStructureTypeKHR> 1
         type VkAccessFlags with
              static member inline AccelerationStructureReadBitNv = unbox<VkAccessFlags> 0x00200000
              static member inline AccelerationStructureWriteBitNv = unbox<VkAccessFlags> 0x00400000
         type VkBufferUsageFlags with
              static member inline RayTracingBitNv = unbox<VkBufferUsageFlags> 0x00000400
         type VkBuildAccelerationStructureFlagsKHR with
              static member inline AllowUpdateBitNv = unbox<VkBuildAccelerationStructureFlagsKHR> 0x00000001
              static member inline AllowCompactionBitNv = unbox<VkBuildAccelerationStructureFlagsKHR> 0x00000002
              static member inline PreferFastTraceBitNv = unbox<VkBuildAccelerationStructureFlagsKHR> 0x00000004
              static member inline PreferFastBuildBitNv = unbox<VkBuildAccelerationStructureFlagsKHR> 0x00000008
              static member inline LowMemoryBitNv = unbox<VkBuildAccelerationStructureFlagsKHR> 0x00000010
         type VkCopyAccelerationStructureModeKHR with
              static member inline CloneNv = unbox<VkCopyAccelerationStructureModeKHR> 0
              static member inline CompactNv = unbox<VkCopyAccelerationStructureModeKHR> 1
         type VkDebugReportObjectTypeEXT with
              static member inline AccelerationStructureNv = unbox<VkDebugReportObjectTypeEXT> 1000165000
         type VkDescriptorType with
              static member inline AccelerationStructureNv = unbox<VkDescriptorType> 1000165000
         type VkGeometryFlagsKHR with
              static member inline OpaqueBitNv = unbox<VkGeometryFlagsKHR> 0x00000001
              static member inline NoDuplicateAnyHitInvocationBitNv = unbox<VkGeometryFlagsKHR> 0x00000002
         type VkGeometryInstanceFlagsKHR with
              static member inline TriangleCullDisableBitNv = unbox<VkGeometryInstanceFlagsKHR> 0x00000001
              static member inline TriangleFrontCounterclockwiseBitNv = unbox<VkGeometryInstanceFlagsKHR> 0x00000002
              static member inline ForceOpaqueBitNv = unbox<VkGeometryInstanceFlagsKHR> 0x00000004
              static member inline ForceNoOpaqueBitNv = unbox<VkGeometryInstanceFlagsKHR> 0x00000008
         type VkGeometryTypeKHR with
              static member inline TrianglesNv = unbox<VkGeometryTypeKHR> 0
              static member inline AabbsNv = unbox<VkGeometryTypeKHR> 1
         type VkIndexType with
              static member inline NoneNv = unbox<VkIndexType> 1000165000
         type VkObjectType with
              static member inline AccelerationStructureNv = unbox<VkObjectType> 1000165000
         type VkPipelineBindPoint with
              static member inline RayTracingNv = unbox<VkPipelineBindPoint> 1000165000
         type VkPipelineCreateFlags with
              static member inline DeferCompileBitNv = unbox<VkPipelineCreateFlags> 0x00000020
         type VkPipelineStageFlags with
              static member inline RayTracingShaderBitNv = unbox<VkPipelineStageFlags> 0x00200000
              static member inline AccelerationStructureBuildBitNv = unbox<VkPipelineStageFlags> 0x02000000
         type VkQueryType with
              static member inline AccelerationStructureCompactedSizeNv = unbox<VkQueryType> 1000165000
         type VkRayTracingShaderGroupTypeKHR with
              static member inline GeneralNv = unbox<VkRayTracingShaderGroupTypeKHR> 0
              static member inline TrianglesHitGroupNv = unbox<VkRayTracingShaderGroupTypeKHR> 1
              static member inline ProceduralHitGroupNv = unbox<VkRayTracingShaderGroupTypeKHR> 2
         type VkShaderStageFlags with
              static member inline RaygenBitNv = unbox<VkShaderStageFlags> 0x00000100
              static member inline AnyHitBitNv = unbox<VkShaderStageFlags> 0x00000200
              static member inline ClosestHitBitNv = unbox<VkShaderStageFlags> 0x00000400
              static member inline MissBitNv = unbox<VkShaderStageFlags> 0x00000800
              static member inline IntersectionBitNv = unbox<VkShaderStageFlags> 0x00001000
              static member inline CallableBitNv = unbox<VkShaderStageFlags> 0x00002000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateAccelerationStructureNVDel = delegate of VkDevice * nativeptr<VkAccelerationStructureCreateInfoNV> * nativeptr<VkAllocationCallbacks> * nativeptr<VkAccelerationStructureNV> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyAccelerationStructureNVDel = delegate of VkDevice * VkAccelerationStructureNV * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetAccelerationStructureMemoryRequirementsNVDel = delegate of VkDevice * nativeptr<VkAccelerationStructureMemoryRequirementsInfoNV> * nativeptr<VkMemoryRequirements2KHR> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkBindAccelerationStructureMemoryNVDel = delegate of VkDevice * uint32 * nativeptr<VkBindAccelerationStructureMemoryInfoNV> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBuildAccelerationStructureNVDel = delegate of VkCommandBuffer * nativeptr<VkAccelerationStructureInfoNV> * VkBuffer * VkDeviceSize * VkBool32 * VkAccelerationStructureNV * VkAccelerationStructureNV * VkBuffer * VkDeviceSize -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdCopyAccelerationStructureNVDel = delegate of VkCommandBuffer * VkAccelerationStructureNV * VkAccelerationStructureNV * VkCopyAccelerationStructureModeKHR -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdTraceRaysNVDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * VkDeviceSize * VkBuffer * VkDeviceSize * VkDeviceSize * VkBuffer * VkDeviceSize * VkDeviceSize * uint32 * uint32 * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateRayTracingPipelinesNVDel = delegate of VkDevice * VkPipelineCache * uint32 * nativeptr<VkRayTracingPipelineCreateInfoNV> * nativeptr<VkAllocationCallbacks> * nativeptr<VkPipeline> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetRayTracingShaderGroupHandlesNVDel = delegate of VkDevice * VkPipeline * uint32 * uint32 * uint64 * nativeint -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetAccelerationStructureHandleNVDel = delegate of VkDevice * VkAccelerationStructureNV * uint64 * nativeint -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdWriteAccelerationStructuresPropertiesNVDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkAccelerationStructureNV> * VkQueryType * VkQueryPool * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCompileDeferredNVDel = delegate of VkDevice * VkPipeline * uint32 -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVRayTracing")
            static let s_vkCreateAccelerationStructureNVDel = VkRaw.vkImportInstanceDelegate<VkCreateAccelerationStructureNVDel> "vkCreateAccelerationStructureNV"
            static let s_vkDestroyAccelerationStructureNVDel = VkRaw.vkImportInstanceDelegate<VkDestroyAccelerationStructureNVDel> "vkDestroyAccelerationStructureNV"
            static let s_vkGetAccelerationStructureMemoryRequirementsNVDel = VkRaw.vkImportInstanceDelegate<VkGetAccelerationStructureMemoryRequirementsNVDel> "vkGetAccelerationStructureMemoryRequirementsNV"
            static let s_vkBindAccelerationStructureMemoryNVDel = VkRaw.vkImportInstanceDelegate<VkBindAccelerationStructureMemoryNVDel> "vkBindAccelerationStructureMemoryNV"
            static let s_vkCmdBuildAccelerationStructureNVDel = VkRaw.vkImportInstanceDelegate<VkCmdBuildAccelerationStructureNVDel> "vkCmdBuildAccelerationStructureNV"
            static let s_vkCmdCopyAccelerationStructureNVDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyAccelerationStructureNVDel> "vkCmdCopyAccelerationStructureNV"
            static let s_vkCmdTraceRaysNVDel = VkRaw.vkImportInstanceDelegate<VkCmdTraceRaysNVDel> "vkCmdTraceRaysNV"
            static let s_vkCreateRayTracingPipelinesNVDel = VkRaw.vkImportInstanceDelegate<VkCreateRayTracingPipelinesNVDel> "vkCreateRayTracingPipelinesNV"
            static let s_vkGetRayTracingShaderGroupHandlesNVDel = VkRaw.vkImportInstanceDelegate<VkGetRayTracingShaderGroupHandlesNVDel> "vkGetRayTracingShaderGroupHandlesNV"
            static let s_vkGetAccelerationStructureHandleNVDel = VkRaw.vkImportInstanceDelegate<VkGetAccelerationStructureHandleNVDel> "vkGetAccelerationStructureHandleNV"
            static let s_vkCmdWriteAccelerationStructuresPropertiesNVDel = VkRaw.vkImportInstanceDelegate<VkCmdWriteAccelerationStructuresPropertiesNVDel> "vkCmdWriteAccelerationStructuresPropertiesNV"
            static let s_vkCompileDeferredNVDel = VkRaw.vkImportInstanceDelegate<VkCompileDeferredNVDel> "vkCompileDeferredNV"
            static do Report.End(3) |> ignore
            static member vkCreateAccelerationStructureNV = s_vkCreateAccelerationStructureNVDel
            static member vkDestroyAccelerationStructureNV = s_vkDestroyAccelerationStructureNVDel
            static member vkGetAccelerationStructureMemoryRequirementsNV = s_vkGetAccelerationStructureMemoryRequirementsNVDel
            static member vkBindAccelerationStructureMemoryNV = s_vkBindAccelerationStructureMemoryNVDel
            static member vkCmdBuildAccelerationStructureNV = s_vkCmdBuildAccelerationStructureNVDel
            static member vkCmdCopyAccelerationStructureNV = s_vkCmdCopyAccelerationStructureNVDel
            static member vkCmdTraceRaysNV = s_vkCmdTraceRaysNVDel
            static member vkCreateRayTracingPipelinesNV = s_vkCreateRayTracingPipelinesNVDel
            static member vkGetRayTracingShaderGroupHandlesNV = s_vkGetRayTracingShaderGroupHandlesNVDel
            static member vkGetAccelerationStructureHandleNV = s_vkGetAccelerationStructureHandleNVDel
            static member vkCmdWriteAccelerationStructuresPropertiesNV = s_vkCmdWriteAccelerationStructuresPropertiesNVDel
            static member vkCompileDeferredNV = s_vkCompileDeferredNVDel
        let vkCreateAccelerationStructureNV(device : VkDevice, pCreateInfo : nativeptr<VkAccelerationStructureCreateInfoNV>, pAllocator : nativeptr<VkAllocationCallbacks>, pAccelerationStructure : nativeptr<VkAccelerationStructureNV>) = Loader<unit>.vkCreateAccelerationStructureNV.Invoke(device, pCreateInfo, pAllocator, pAccelerationStructure)
        let vkDestroyAccelerationStructureNV(device : VkDevice, accelerationStructure : VkAccelerationStructureNV, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyAccelerationStructureNV.Invoke(device, accelerationStructure, pAllocator)
        let vkGetAccelerationStructureMemoryRequirementsNV(device : VkDevice, pInfo : nativeptr<VkAccelerationStructureMemoryRequirementsInfoNV>, pMemoryRequirements : nativeptr<VkMemoryRequirements2KHR>) = Loader<unit>.vkGetAccelerationStructureMemoryRequirementsNV.Invoke(device, pInfo, pMemoryRequirements)
        let vkBindAccelerationStructureMemoryNV(device : VkDevice, bindInfoCount : uint32, pBindInfos : nativeptr<VkBindAccelerationStructureMemoryInfoNV>) = Loader<unit>.vkBindAccelerationStructureMemoryNV.Invoke(device, bindInfoCount, pBindInfos)
        let vkCmdBuildAccelerationStructureNV(commandBuffer : VkCommandBuffer, pInfo : nativeptr<VkAccelerationStructureInfoNV>, instanceData : VkBuffer, instanceOffset : VkDeviceSize, update : VkBool32, dst : VkAccelerationStructureNV, src : VkAccelerationStructureNV, scratch : VkBuffer, scratchOffset : VkDeviceSize) = Loader<unit>.vkCmdBuildAccelerationStructureNV.Invoke(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset)
        let vkCmdCopyAccelerationStructureNV(commandBuffer : VkCommandBuffer, dst : VkAccelerationStructureNV, src : VkAccelerationStructureNV, mode : VkCopyAccelerationStructureModeKHR) = Loader<unit>.vkCmdCopyAccelerationStructureNV.Invoke(commandBuffer, dst, src, mode)
        let vkCmdTraceRaysNV(commandBuffer : VkCommandBuffer, raygenShaderBindingTableBuffer : VkBuffer, raygenShaderBindingOffset : VkDeviceSize, missShaderBindingTableBuffer : VkBuffer, missShaderBindingOffset : VkDeviceSize, missShaderBindingStride : VkDeviceSize, hitShaderBindingTableBuffer : VkBuffer, hitShaderBindingOffset : VkDeviceSize, hitShaderBindingStride : VkDeviceSize, callableShaderBindingTableBuffer : VkBuffer, callableShaderBindingOffset : VkDeviceSize, callableShaderBindingStride : VkDeviceSize, width : uint32, height : uint32, depth : uint32) = Loader<unit>.vkCmdTraceRaysNV.Invoke(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth)
        let vkCreateRayTracingPipelinesNV(device : VkDevice, pipelineCache : VkPipelineCache, createInfoCount : uint32, pCreateInfos : nativeptr<VkRayTracingPipelineCreateInfoNV>, pAllocator : nativeptr<VkAllocationCallbacks>, pPipelines : nativeptr<VkPipeline>) = Loader<unit>.vkCreateRayTracingPipelinesNV.Invoke(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
        let vkGetRayTracingShaderGroupHandlesNV(device : VkDevice, pipeline : VkPipeline, firstGroup : uint32, groupCount : uint32, dataSize : uint64, pData : nativeint) = Loader<unit>.vkGetRayTracingShaderGroupHandlesNV.Invoke(device, pipeline, firstGroup, groupCount, dataSize, pData)
        let vkGetAccelerationStructureHandleNV(device : VkDevice, accelerationStructure : VkAccelerationStructureNV, dataSize : uint64, pData : nativeint) = Loader<unit>.vkGetAccelerationStructureHandleNV.Invoke(device, accelerationStructure, dataSize, pData)
        let vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer : VkCommandBuffer, accelerationStructureCount : uint32, pAccelerationStructures : nativeptr<VkAccelerationStructureNV>, queryType : VkQueryType, queryPool : VkQueryPool, firstQuery : uint32) = Loader<unit>.vkCmdWriteAccelerationStructuresPropertiesNV.Invoke(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery)
        let vkCompileDeferredNV(device : VkDevice, pipeline : VkPipeline, shader : uint32) = Loader<unit>.vkCompileDeferredNV.Invoke(device, pipeline, shader)

module NVMeshShader =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_NV_mesh_shader"
    let Number = 203

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDrawMeshTasksIndirectCommandNV =
        struct
            val mutable public taskCount : uint32
            val mutable public firstTask : uint32

            new(taskCount : uint32, firstTask : uint32) =
                {
                    taskCount = taskCount
                    firstTask = firstTask
                }

            member x.IsEmpty =
                x.taskCount = Unchecked.defaultof<uint32> && x.firstTask = Unchecked.defaultof<uint32>

            static member Empty =
                VkDrawMeshTasksIndirectCommandNV(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "taskCount = %A" x.taskCount
                    sprintf "firstTask = %A" x.firstTask
                ] |> sprintf "VkDrawMeshTasksIndirectCommandNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMeshShaderFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public taskShader : VkBool32
            val mutable public meshShader : VkBool32

            new(pNext : nativeint, taskShader : VkBool32, meshShader : VkBool32) =
                {
                    sType = 1000202000u
                    pNext = pNext
                    taskShader = taskShader
                    meshShader = meshShader
                }

            new(taskShader : VkBool32, meshShader : VkBool32) =
                VkPhysicalDeviceMeshShaderFeaturesNV(Unchecked.defaultof<nativeint>, taskShader, meshShader)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.taskShader = Unchecked.defaultof<VkBool32> && x.meshShader = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMeshShaderFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "taskShader = %A" x.taskShader
                    sprintf "meshShader = %A" x.meshShader
                ] |> sprintf "VkPhysicalDeviceMeshShaderFeaturesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMeshShaderPropertiesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxDrawMeshTasksCount : uint32
            val mutable public maxTaskWorkGroupInvocations : uint32
            val mutable public maxTaskWorkGroupSize : V3ui
            val mutable public maxTaskTotalMemorySize : uint32
            val mutable public maxTaskOutputCount : uint32
            val mutable public maxMeshWorkGroupInvocations : uint32
            val mutable public maxMeshWorkGroupSize : V3ui
            val mutable public maxMeshTotalMemorySize : uint32
            val mutable public maxMeshOutputVertices : uint32
            val mutable public maxMeshOutputPrimitives : uint32
            val mutable public maxMeshMultiviewViewCount : uint32
            val mutable public meshOutputPerVertexGranularity : uint32
            val mutable public meshOutputPerPrimitiveGranularity : uint32

            new(pNext : nativeint, maxDrawMeshTasksCount : uint32, maxTaskWorkGroupInvocations : uint32, maxTaskWorkGroupSize : V3ui, maxTaskTotalMemorySize : uint32, maxTaskOutputCount : uint32, maxMeshWorkGroupInvocations : uint32, maxMeshWorkGroupSize : V3ui, maxMeshTotalMemorySize : uint32, maxMeshOutputVertices : uint32, maxMeshOutputPrimitives : uint32, maxMeshMultiviewViewCount : uint32, meshOutputPerVertexGranularity : uint32, meshOutputPerPrimitiveGranularity : uint32) =
                {
                    sType = 1000202001u
                    pNext = pNext
                    maxDrawMeshTasksCount = maxDrawMeshTasksCount
                    maxTaskWorkGroupInvocations = maxTaskWorkGroupInvocations
                    maxTaskWorkGroupSize = maxTaskWorkGroupSize
                    maxTaskTotalMemorySize = maxTaskTotalMemorySize
                    maxTaskOutputCount = maxTaskOutputCount
                    maxMeshWorkGroupInvocations = maxMeshWorkGroupInvocations
                    maxMeshWorkGroupSize = maxMeshWorkGroupSize
                    maxMeshTotalMemorySize = maxMeshTotalMemorySize
                    maxMeshOutputVertices = maxMeshOutputVertices
                    maxMeshOutputPrimitives = maxMeshOutputPrimitives
                    maxMeshMultiviewViewCount = maxMeshMultiviewViewCount
                    meshOutputPerVertexGranularity = meshOutputPerVertexGranularity
                    meshOutputPerPrimitiveGranularity = meshOutputPerPrimitiveGranularity
                }

            new(maxDrawMeshTasksCount : uint32, maxTaskWorkGroupInvocations : uint32, maxTaskWorkGroupSize : V3ui, maxTaskTotalMemorySize : uint32, maxTaskOutputCount : uint32, maxMeshWorkGroupInvocations : uint32, maxMeshWorkGroupSize : V3ui, maxMeshTotalMemorySize : uint32, maxMeshOutputVertices : uint32, maxMeshOutputPrimitives : uint32, maxMeshMultiviewViewCount : uint32, meshOutputPerVertexGranularity : uint32, meshOutputPerPrimitiveGranularity : uint32) =
                VkPhysicalDeviceMeshShaderPropertiesNV(Unchecked.defaultof<nativeint>, maxDrawMeshTasksCount, maxTaskWorkGroupInvocations, maxTaskWorkGroupSize, maxTaskTotalMemorySize, maxTaskOutputCount, maxMeshWorkGroupInvocations, maxMeshWorkGroupSize, maxMeshTotalMemorySize, maxMeshOutputVertices, maxMeshOutputPrimitives, maxMeshMultiviewViewCount, meshOutputPerVertexGranularity, meshOutputPerPrimitiveGranularity)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxDrawMeshTasksCount = Unchecked.defaultof<uint32> && x.maxTaskWorkGroupInvocations = Unchecked.defaultof<uint32> && x.maxTaskWorkGroupSize = Unchecked.defaultof<V3ui> && x.maxTaskTotalMemorySize = Unchecked.defaultof<uint32> && x.maxTaskOutputCount = Unchecked.defaultof<uint32> && x.maxMeshWorkGroupInvocations = Unchecked.defaultof<uint32> && x.maxMeshWorkGroupSize = Unchecked.defaultof<V3ui> && x.maxMeshTotalMemorySize = Unchecked.defaultof<uint32> && x.maxMeshOutputVertices = Unchecked.defaultof<uint32> && x.maxMeshOutputPrimitives = Unchecked.defaultof<uint32> && x.maxMeshMultiviewViewCount = Unchecked.defaultof<uint32> && x.meshOutputPerVertexGranularity = Unchecked.defaultof<uint32> && x.meshOutputPerPrimitiveGranularity = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceMeshShaderPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<V3ui>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxDrawMeshTasksCount = %A" x.maxDrawMeshTasksCount
                    sprintf "maxTaskWorkGroupInvocations = %A" x.maxTaskWorkGroupInvocations
                    sprintf "maxTaskWorkGroupSize = %A" x.maxTaskWorkGroupSize
                    sprintf "maxTaskTotalMemorySize = %A" x.maxTaskTotalMemorySize
                    sprintf "maxTaskOutputCount = %A" x.maxTaskOutputCount
                    sprintf "maxMeshWorkGroupInvocations = %A" x.maxMeshWorkGroupInvocations
                    sprintf "maxMeshWorkGroupSize = %A" x.maxMeshWorkGroupSize
                    sprintf "maxMeshTotalMemorySize = %A" x.maxMeshTotalMemorySize
                    sprintf "maxMeshOutputVertices = %A" x.maxMeshOutputVertices
                    sprintf "maxMeshOutputPrimitives = %A" x.maxMeshOutputPrimitives
                    sprintf "maxMeshMultiviewViewCount = %A" x.maxMeshMultiviewViewCount
                    sprintf "meshOutputPerVertexGranularity = %A" x.meshOutputPerVertexGranularity
                    sprintf "meshOutputPerPrimitiveGranularity = %A" x.meshOutputPerPrimitiveGranularity
                ] |> sprintf "VkPhysicalDeviceMeshShaderPropertiesNV { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkPipelineStageFlags with
              static member inline TaskShaderBitNv = unbox<VkPipelineStageFlags> 0x00080000
              static member inline MeshShaderBitNv = unbox<VkPipelineStageFlags> 0x00100000
         type VkShaderStageFlags with
              static member inline TaskBitNv = unbox<VkShaderStageFlags> 0x00000040
              static member inline MeshBitNv = unbox<VkShaderStageFlags> 0x00000080

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDrawMeshTasksNVDel = delegate of VkCommandBuffer * uint32 * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDrawMeshTasksIndirectNVDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDrawMeshTasksIndirectCountNVDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVMeshShader")
            static let s_vkCmdDrawMeshTasksNVDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMeshTasksNVDel> "vkCmdDrawMeshTasksNV"
            static let s_vkCmdDrawMeshTasksIndirectNVDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMeshTasksIndirectNVDel> "vkCmdDrawMeshTasksIndirectNV"
            static let s_vkCmdDrawMeshTasksIndirectCountNVDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawMeshTasksIndirectCountNVDel> "vkCmdDrawMeshTasksIndirectCountNV"
            static do Report.End(3) |> ignore
            static member vkCmdDrawMeshTasksNV = s_vkCmdDrawMeshTasksNVDel
            static member vkCmdDrawMeshTasksIndirectNV = s_vkCmdDrawMeshTasksIndirectNVDel
            static member vkCmdDrawMeshTasksIndirectCountNV = s_vkCmdDrawMeshTasksIndirectCountNVDel
        let vkCmdDrawMeshTasksNV(commandBuffer : VkCommandBuffer, taskCount : uint32, firstTask : uint32) = Loader<unit>.vkCmdDrawMeshTasksNV.Invoke(commandBuffer, taskCount, firstTask)
        let vkCmdDrawMeshTasksIndirectNV(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, drawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawMeshTasksIndirectNV.Invoke(commandBuffer, buffer, offset, drawCount, stride)
        let vkCmdDrawMeshTasksIndirectCountNV(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, countBuffer : VkBuffer, countBufferOffset : VkDeviceSize, maxDrawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawMeshTasksIndirectCountNV.Invoke(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)

module NVDeviceDiagnosticCheckpoints =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_NV_device_diagnostic_checkpoints"
    let Number = 207

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkCheckpointDataNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stage : VkPipelineStageFlags
            val mutable public pCheckpointMarker : nativeint

            new(pNext : nativeint, stage : VkPipelineStageFlags, pCheckpointMarker : nativeint) =
                {
                    sType = 1000206000u
                    pNext = pNext
                    stage = stage
                    pCheckpointMarker = pCheckpointMarker
                }

            new(stage : VkPipelineStageFlags, pCheckpointMarker : nativeint) =
                VkCheckpointDataNV(Unchecked.defaultof<nativeint>, stage, pCheckpointMarker)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stage = Unchecked.defaultof<VkPipelineStageFlags> && x.pCheckpointMarker = Unchecked.defaultof<nativeint>

            static member Empty =
                VkCheckpointDataNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineStageFlags>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "stage = %A" x.stage
                    sprintf "pCheckpointMarker = %A" x.pCheckpointMarker
                ] |> sprintf "VkCheckpointDataNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkQueueFamilyCheckpointPropertiesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public checkpointExecutionStageMask : VkPipelineStageFlags

            new(pNext : nativeint, checkpointExecutionStageMask : VkPipelineStageFlags) =
                {
                    sType = 1000206001u
                    pNext = pNext
                    checkpointExecutionStageMask = checkpointExecutionStageMask
                }

            new(checkpointExecutionStageMask : VkPipelineStageFlags) =
                VkQueueFamilyCheckpointPropertiesNV(Unchecked.defaultof<nativeint>, checkpointExecutionStageMask)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.checkpointExecutionStageMask = Unchecked.defaultof<VkPipelineStageFlags>

            static member Empty =
                VkQueueFamilyCheckpointPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineStageFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "checkpointExecutionStageMask = %A" x.checkpointExecutionStageMask
                ] |> sprintf "VkQueueFamilyCheckpointPropertiesNV { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetCheckpointNVDel = delegate of VkCommandBuffer * nativeint -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetQueueCheckpointDataNVDel = delegate of VkQueue * nativeptr<uint32> * nativeptr<VkCheckpointDataNV> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVDeviceDiagnosticCheckpoints")
            static let s_vkCmdSetCheckpointNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetCheckpointNVDel> "vkCmdSetCheckpointNV"
            static let s_vkGetQueueCheckpointDataNVDel = VkRaw.vkImportInstanceDelegate<VkGetQueueCheckpointDataNVDel> "vkGetQueueCheckpointDataNV"
            static do Report.End(3) |> ignore
            static member vkCmdSetCheckpointNV = s_vkCmdSetCheckpointNVDel
            static member vkGetQueueCheckpointDataNV = s_vkGetQueueCheckpointDataNVDel
        let vkCmdSetCheckpointNV(commandBuffer : VkCommandBuffer, pCheckpointMarker : nativeint) = Loader<unit>.vkCmdSetCheckpointNV.Invoke(commandBuffer, pCheckpointMarker)
        let vkGetQueueCheckpointDataNV(queue : VkQueue, pCheckpointDataCount : nativeptr<uint32>, pCheckpointData : nativeptr<VkCheckpointDataNV>) = Loader<unit>.vkGetQueueCheckpointDataNV.Invoke(queue, pCheckpointDataCount, pCheckpointData)

module KHRSynchronization2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_synchronization2"
    let Number = 315

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkFlags64 = uint64
    type VkPipelineStageFlags2KHR = VkPipelineStageFlags2
    type VkAccessFlags2KHR = VkAccessFlags2
    type VkSubmitFlagsKHR = VkSubmitFlags

    type VkBufferMemoryBarrier2KHR = VkBufferMemoryBarrier2

    type VkCommandBufferSubmitInfoKHR = VkCommandBufferSubmitInfo

    type VkDependencyInfoKHR = VkDependencyInfo

    type VkImageMemoryBarrier2KHR = VkImageMemoryBarrier2

    type VkMemoryBarrier2KHR = VkMemoryBarrier2

    type VkPhysicalDeviceSynchronization2FeaturesKHR = VkPhysicalDeviceSynchronization2Features

    type VkSemaphoreSubmitInfoKHR = VkSemaphoreSubmitInfo

    type VkSubmitInfo2KHR = VkSubmitInfo2


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags with
              static member inline NoneKhr = unbox<VkAccessFlags> 0
         type VkEventCreateFlags with
              static member inline DeviceOnlyBitKhr = unbox<VkEventCreateFlags> 0x00000001
         type VkImageLayout with
              static member inline ReadOnlyOptimalKhr = unbox<VkImageLayout> 1000314000
              static member inline AttachmentOptimalKhr = unbox<VkImageLayout> 1000314001
         type VkPipelineStageFlags with
              static member inline NoneKhr = unbox<VkPipelineStageFlags> 0

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetEvent2KHRDel = delegate of VkCommandBuffer * VkEvent * nativeptr<VkDependencyInfo> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdResetEvent2KHRDel = delegate of VkCommandBuffer * VkEvent * VkPipelineStageFlags2 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdWaitEvents2KHRDel = delegate of VkCommandBuffer * uint32 * nativeptr<VkEvent> * nativeptr<VkDependencyInfo> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdPipelineBarrier2KHRDel = delegate of VkCommandBuffer * nativeptr<VkDependencyInfo> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdWriteTimestamp2KHRDel = delegate of VkCommandBuffer * VkPipelineStageFlags2 * VkQueryPool * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkQueueSubmit2KHRDel = delegate of VkQueue * uint32 * nativeptr<VkSubmitInfo2> * VkFence -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRSynchronization2")
            static let s_vkCmdSetEvent2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdSetEvent2KHRDel> "vkCmdSetEvent2KHR"
            static let s_vkCmdResetEvent2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdResetEvent2KHRDel> "vkCmdResetEvent2KHR"
            static let s_vkCmdWaitEvents2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdWaitEvents2KHRDel> "vkCmdWaitEvents2KHR"
            static let s_vkCmdPipelineBarrier2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdPipelineBarrier2KHRDel> "vkCmdPipelineBarrier2KHR"
            static let s_vkCmdWriteTimestamp2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdWriteTimestamp2KHRDel> "vkCmdWriteTimestamp2KHR"
            static let s_vkQueueSubmit2KHRDel = VkRaw.vkImportInstanceDelegate<VkQueueSubmit2KHRDel> "vkQueueSubmit2KHR"
            static do Report.End(3) |> ignore
            static member vkCmdSetEvent2KHR = s_vkCmdSetEvent2KHRDel
            static member vkCmdResetEvent2KHR = s_vkCmdResetEvent2KHRDel
            static member vkCmdWaitEvents2KHR = s_vkCmdWaitEvents2KHRDel
            static member vkCmdPipelineBarrier2KHR = s_vkCmdPipelineBarrier2KHRDel
            static member vkCmdWriteTimestamp2KHR = s_vkCmdWriteTimestamp2KHRDel
            static member vkQueueSubmit2KHR = s_vkQueueSubmit2KHRDel
        let vkCmdSetEvent2KHR(commandBuffer : VkCommandBuffer, event : VkEvent, pDependencyInfo : nativeptr<VkDependencyInfo>) = Loader<unit>.vkCmdSetEvent2KHR.Invoke(commandBuffer, event, pDependencyInfo)
        let vkCmdResetEvent2KHR(commandBuffer : VkCommandBuffer, event : VkEvent, stageMask : VkPipelineStageFlags2) = Loader<unit>.vkCmdResetEvent2KHR.Invoke(commandBuffer, event, stageMask)
        let vkCmdWaitEvents2KHR(commandBuffer : VkCommandBuffer, eventCount : uint32, pEvents : nativeptr<VkEvent>, pDependencyInfos : nativeptr<VkDependencyInfo>) = Loader<unit>.vkCmdWaitEvents2KHR.Invoke(commandBuffer, eventCount, pEvents, pDependencyInfos)
        let vkCmdPipelineBarrier2KHR(commandBuffer : VkCommandBuffer, pDependencyInfo : nativeptr<VkDependencyInfo>) = Loader<unit>.vkCmdPipelineBarrier2KHR.Invoke(commandBuffer, pDependencyInfo)
        let vkCmdWriteTimestamp2KHR(commandBuffer : VkCommandBuffer, stage : VkPipelineStageFlags2, queryPool : VkQueryPool, query : uint32) = Loader<unit>.vkCmdWriteTimestamp2KHR.Invoke(commandBuffer, stage, queryPool, query)
        let vkQueueSubmit2KHR(queue : VkQueue, submitCount : uint32, pSubmits : nativeptr<VkSubmitInfo2>, fence : VkFence) = Loader<unit>.vkQueueSubmit2KHR.Invoke(queue, submitCount, pSubmits, fence)

    module EXTTransformFeedback =
        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags2 with
                  static member inline Access2TransformFeedbackWriteBitExt = unbox<VkAccessFlags2> 0x02000000
                  static member inline Access2TransformFeedbackCounterReadBitExt = unbox<VkAccessFlags2> 0x04000000
                  static member inline Access2TransformFeedbackCounterWriteBitExt = unbox<VkAccessFlags2> 0x08000000
             type VkPipelineStageFlags2 with
                  static member inline PipelineStage2TransformFeedbackBitExt = unbox<VkPipelineStageFlags2> 0x01000000


    module EXTConditionalRendering =
        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags2 with
                  /// read access flag for reading conditional rendering predicate
                  static member inline Access2ConditionalRenderingReadBitExt = unbox<VkAccessFlags2> 0x00100000
             type VkPipelineStageFlags2 with
                  /// A pipeline stage for conditional rendering predicate fetch
                  static member inline PipelineStage2ConditionalRenderingBitExt = unbox<VkPipelineStageFlags2> 0x00040000


    module NVDeviceGeneratedCommands =
        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags2 with
                  static member inline Access2CommandPreprocessReadBitNv = unbox<VkAccessFlags2> 0x00020000
                  static member inline Access2CommandPreprocessWriteBitNv = unbox<VkAccessFlags2> 0x00040000
             type VkPipelineStageFlags2 with
                  static member inline PipelineStage2CommandPreprocessBitNv = unbox<VkPipelineStageFlags2> 0x00020000


    module KHRFragmentShadingRate =
        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags2 with
                  static member inline Access2FragmentShadingRateAttachmentReadBitKhr = unbox<VkAccessFlags2> 0x00800000
             type VkPipelineStageFlags2 with
                  static member inline PipelineStage2FragmentShadingRateAttachmentBitKhr = unbox<VkPipelineStageFlags2> 0x00400000


    module NVShadingRateImage =
        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags2 with
                  static member inline Access2ShadingRateImageReadBitNv = unbox<VkAccessFlags2> 0x00800000
             type VkPipelineStageFlags2 with
                  static member inline PipelineStage2ShadingRateImageBitNv = unbox<VkPipelineStageFlags2> 0x00400000


    module KHRAccelerationStructure =
        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags2 with
                  static member inline Access2AccelerationStructureReadBitKhr = unbox<VkAccessFlags2> 0x00200000
                  static member inline Access2AccelerationStructureWriteBitKhr = unbox<VkAccessFlags2> 0x00400000
             type VkPipelineStageFlags2 with
                  static member inline PipelineStage2AccelerationStructureBuildBitKhr = unbox<VkPipelineStageFlags2> 0x02000000


    module KHRRayTracingPipeline =
        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineStageFlags2 with
                  static member inline PipelineStage2RayTracingShaderBitKhr = unbox<VkPipelineStageFlags2> 0x00200000


    module NVRayTracing =
        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags2 with
                  static member inline Access2AccelerationStructureReadBitNv = unbox<VkAccessFlags2> 0x00200000
                  static member inline Access2AccelerationStructureWriteBitNv = unbox<VkAccessFlags2> 0x00400000
             type VkPipelineStageFlags2 with
                  static member inline PipelineStage2RayTracingShaderBitNv = unbox<VkPipelineStageFlags2> 0x00200000
                  static member inline PipelineStage2AccelerationStructureBuildBitNv = unbox<VkPipelineStageFlags2> 0x02000000


    module EXTFragmentDensityMap =
        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags2 with
                  static member inline Access2FragmentDensityMapReadBitExt = unbox<VkAccessFlags2> 0x01000000
             type VkPipelineStageFlags2 with
                  static member inline PipelineStage2FragmentDensityProcessBitExt = unbox<VkPipelineStageFlags2> 0x00800000


    module EXTBlendOperationAdvanced =
        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags2 with
                  static member inline Access2ColorAttachmentReadNoncoherentBitExt = unbox<VkAccessFlags2> 0x00080000


    module NVMeshShader =
        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineStageFlags2 with
                  static member inline PipelineStage2TaskShaderBitNv = unbox<VkPipelineStageFlags2> 0x00080000
                  static member inline PipelineStage2MeshShaderBitNv = unbox<VkPipelineStageFlags2> 0x00100000


    module AMDBufferMarker =
        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdWriteBufferMarker2AMDDel = delegate of VkCommandBuffer * VkPipelineStageFlags2 * VkBuffer * VkDeviceSize * uint32 -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'d> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRSynchronization2 -> AMDBufferMarker")
                static let s_vkCmdWriteBufferMarker2AMDDel = VkRaw.vkImportInstanceDelegate<VkCmdWriteBufferMarker2AMDDel> "vkCmdWriteBufferMarker2AMD"
                static do Report.End(3) |> ignore
                static member vkCmdWriteBufferMarker2AMD = s_vkCmdWriteBufferMarker2AMDDel
            let vkCmdWriteBufferMarker2AMD(commandBuffer : VkCommandBuffer, stage : VkPipelineStageFlags2, dstBuffer : VkBuffer, dstOffset : VkDeviceSize, marker : uint32) = Loader<unit>.vkCmdWriteBufferMarker2AMD.Invoke(commandBuffer, stage, dstBuffer, dstOffset, marker)

    module NVDeviceDiagnosticCheckpoints =
        [<StructLayout(LayoutKind.Sequential)>]
        type VkCheckpointData2NV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public stage : VkPipelineStageFlags2
                val mutable public pCheckpointMarker : nativeint

                new(pNext : nativeint, stage : VkPipelineStageFlags2, pCheckpointMarker : nativeint) =
                    {
                        sType = 1000314009u
                        pNext = pNext
                        stage = stage
                        pCheckpointMarker = pCheckpointMarker
                    }

                new(stage : VkPipelineStageFlags2, pCheckpointMarker : nativeint) =
                    VkCheckpointData2NV(Unchecked.defaultof<nativeint>, stage, pCheckpointMarker)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.stage = Unchecked.defaultof<VkPipelineStageFlags2> && x.pCheckpointMarker = Unchecked.defaultof<nativeint>

                static member Empty =
                    VkCheckpointData2NV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineStageFlags2>, Unchecked.defaultof<nativeint>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "stage = %A" x.stage
                        sprintf "pCheckpointMarker = %A" x.pCheckpointMarker
                    ] |> sprintf "VkCheckpointData2NV { %s }"
            end

        [<StructLayout(LayoutKind.Sequential)>]
        type VkQueueFamilyCheckpointProperties2NV =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public checkpointExecutionStageMask : VkPipelineStageFlags2

                new(pNext : nativeint, checkpointExecutionStageMask : VkPipelineStageFlags2) =
                    {
                        sType = 1000314008u
                        pNext = pNext
                        checkpointExecutionStageMask = checkpointExecutionStageMask
                    }

                new(checkpointExecutionStageMask : VkPipelineStageFlags2) =
                    VkQueueFamilyCheckpointProperties2NV(Unchecked.defaultof<nativeint>, checkpointExecutionStageMask)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.checkpointExecutionStageMask = Unchecked.defaultof<VkPipelineStageFlags2>

                static member Empty =
                    VkQueueFamilyCheckpointProperties2NV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineStageFlags2>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "checkpointExecutionStageMask = %A" x.checkpointExecutionStageMask
                    ] |> sprintf "VkQueueFamilyCheckpointProperties2NV { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkGetQueueCheckpointData2NVDel = delegate of VkQueue * nativeptr<uint32> * nativeptr<VkCheckpointData2NV> -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'d> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRSynchronization2 -> NVDeviceDiagnosticCheckpoints")
                static let s_vkGetQueueCheckpointData2NVDel = VkRaw.vkImportInstanceDelegate<VkGetQueueCheckpointData2NVDel> "vkGetQueueCheckpointData2NV"
                static do Report.End(3) |> ignore
                static member vkGetQueueCheckpointData2NV = s_vkGetQueueCheckpointData2NVDel
            let vkGetQueueCheckpointData2NV(queue : VkQueue, pCheckpointDataCount : nativeptr<uint32>, pCheckpointData : nativeptr<VkCheckpointData2NV>) = Loader<unit>.vkGetQueueCheckpointData2NV.Invoke(queue, pCheckpointDataCount, pCheckpointData)

module KHRVideoQueue =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRSynchronization2
    let Name = "VK_KHR_video_queue"
    let Number = 24

    let Required = [ KHRGetPhysicalDeviceProperties2.Name; KHRSynchronization2.Name ]



    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoSessionKHR =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkVideoSessionKHR(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoSessionParametersKHR =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkVideoSessionParametersKHR(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<Flags>]
    type VkVideoCodecOperationFlagsKHR =
        | All = 0
        | InvalidBit = 0

    [<Flags>]
    type VkVideoChromaSubsamplingFlagsKHR =
        | All = 15
        | InvalidBit = 0
        | MonochromeBit = 0x00000001
        | D420Bit = 0x00000002
        | D422Bit = 0x00000004
        | D444Bit = 0x00000008

    [<Flags>]
    type VkVideoComponentBitDepthFlagsKHR =
        | All = 21
        | Invalid = 0
        | D8Bit = 0x00000001
        | D10Bit = 0x00000004
        | D12Bit = 0x00000010

    [<Flags>]
    type VkVideoCapabilityFlagsKHR =
        | All = 3
        | None = 0
        | ProtectedContentBit = 0x00000001
        | SeparateReferenceImagesBit = 0x00000002

    [<Flags>]
    type VkVideoSessionCreateFlagsKHR =
        | All = 1
        | Default = 0
        | ProtectedContentBit = 0x00000001

    [<Flags>]
    type VkVideoCodingControlFlagsKHR =
        | All = 1
        | Default = 0
        | ResetBit = 0x00000001

    [<Flags>]
    type VkVideoCodingQualityPresetFlagsKHR =
        | All = 7
        | None = 0
        | NormalBit = 0x00000001
        | PowerBit = 0x00000002
        | QualityBit = 0x00000004

    type VkQueryResultStatusKHR =
        | Error = -1
        | NotReady = 0
        | Complete = 1


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceVideoFormatInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageUsage : VkImageUsageFlags

            new(pNext : nativeint, imageUsage : VkImageUsageFlags) =
                {
                    sType = 1000023014u
                    pNext = pNext
                    imageUsage = imageUsage
                }

            new(imageUsage : VkImageUsageFlags) =
                VkPhysicalDeviceVideoFormatInfoKHR(Unchecked.defaultof<nativeint>, imageUsage)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageUsage = Unchecked.defaultof<VkImageUsageFlags>

            static member Empty =
                VkPhysicalDeviceVideoFormatInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageUsageFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageUsage = %A" x.imageUsage
                ] |> sprintf "VkPhysicalDeviceVideoFormatInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkQueueFamilyQueryResultStatusProperties2KHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public queryResultStatusSupport : VkBool32

            new(pNext : nativeint, queryResultStatusSupport : VkBool32) =
                {
                    sType = 1000023016u
                    pNext = pNext
                    queryResultStatusSupport = queryResultStatusSupport
                }

            new(queryResultStatusSupport : VkBool32) =
                VkQueueFamilyQueryResultStatusProperties2KHR(Unchecked.defaultof<nativeint>, queryResultStatusSupport)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.queryResultStatusSupport = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkQueueFamilyQueryResultStatusProperties2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "queryResultStatusSupport = %A" x.queryResultStatusSupport
                ] |> sprintf "VkQueueFamilyQueryResultStatusProperties2KHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoPictureResourceKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public codedOffset : VkOffset2D
            val mutable public codedExtent : VkExtent2D
            val mutable public baseArrayLayer : uint32
            val mutable public imageViewBinding : VkImageView

            new(pNext : nativeint, codedOffset : VkOffset2D, codedExtent : VkExtent2D, baseArrayLayer : uint32, imageViewBinding : VkImageView) =
                {
                    sType = 1000023002u
                    pNext = pNext
                    codedOffset = codedOffset
                    codedExtent = codedExtent
                    baseArrayLayer = baseArrayLayer
                    imageViewBinding = imageViewBinding
                }

            new(codedOffset : VkOffset2D, codedExtent : VkExtent2D, baseArrayLayer : uint32, imageViewBinding : VkImageView) =
                VkVideoPictureResourceKHR(Unchecked.defaultof<nativeint>, codedOffset, codedExtent, baseArrayLayer, imageViewBinding)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.codedOffset = Unchecked.defaultof<VkOffset2D> && x.codedExtent = Unchecked.defaultof<VkExtent2D> && x.baseArrayLayer = Unchecked.defaultof<uint32> && x.imageViewBinding = Unchecked.defaultof<VkImageView>

            static member Empty =
                VkVideoPictureResourceKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkImageView>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "codedOffset = %A" x.codedOffset
                    sprintf "codedExtent = %A" x.codedExtent
                    sprintf "baseArrayLayer = %A" x.baseArrayLayer
                    sprintf "imageViewBinding = %A" x.imageViewBinding
                ] |> sprintf "VkVideoPictureResourceKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoReferenceSlotKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public slotIndex : int8
            val mutable public pPictureResource : nativeptr<VkVideoPictureResourceKHR>

            new(pNext : nativeint, slotIndex : int8, pPictureResource : nativeptr<VkVideoPictureResourceKHR>) =
                {
                    sType = 1000023011u
                    pNext = pNext
                    slotIndex = slotIndex
                    pPictureResource = pPictureResource
                }

            new(slotIndex : int8, pPictureResource : nativeptr<VkVideoPictureResourceKHR>) =
                VkVideoReferenceSlotKHR(Unchecked.defaultof<nativeint>, slotIndex, pPictureResource)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.slotIndex = Unchecked.defaultof<int8> && x.pPictureResource = Unchecked.defaultof<nativeptr<VkVideoPictureResourceKHR>>

            static member Empty =
                VkVideoReferenceSlotKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<int8>, Unchecked.defaultof<nativeptr<VkVideoPictureResourceKHR>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "slotIndex = %A" x.slotIndex
                    sprintf "pPictureResource = %A" x.pPictureResource
                ] |> sprintf "VkVideoReferenceSlotKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoBeginCodingInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkVideoBeginCodingFlagsKHR
            val mutable public codecQualityPreset : VkVideoCodingQualityPresetFlagsKHR
            val mutable public videoSession : VkVideoSessionKHR
            val mutable public videoSessionParameters : VkVideoSessionParametersKHR
            val mutable public referenceSlotCount : uint32
            val mutable public pReferenceSlots : nativeptr<VkVideoReferenceSlotKHR>

            new(pNext : nativeint, flags : VkVideoBeginCodingFlagsKHR, codecQualityPreset : VkVideoCodingQualityPresetFlagsKHR, videoSession : VkVideoSessionKHR, videoSessionParameters : VkVideoSessionParametersKHR, referenceSlotCount : uint32, pReferenceSlots : nativeptr<VkVideoReferenceSlotKHR>) =
                {
                    sType = 1000023008u
                    pNext = pNext
                    flags = flags
                    codecQualityPreset = codecQualityPreset
                    videoSession = videoSession
                    videoSessionParameters = videoSessionParameters
                    referenceSlotCount = referenceSlotCount
                    pReferenceSlots = pReferenceSlots
                }

            new(flags : VkVideoBeginCodingFlagsKHR, codecQualityPreset : VkVideoCodingQualityPresetFlagsKHR, videoSession : VkVideoSessionKHR, videoSessionParameters : VkVideoSessionParametersKHR, referenceSlotCount : uint32, pReferenceSlots : nativeptr<VkVideoReferenceSlotKHR>) =
                VkVideoBeginCodingInfoKHR(Unchecked.defaultof<nativeint>, flags, codecQualityPreset, videoSession, videoSessionParameters, referenceSlotCount, pReferenceSlots)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoBeginCodingFlagsKHR> && x.codecQualityPreset = Unchecked.defaultof<VkVideoCodingQualityPresetFlagsKHR> && x.videoSession = Unchecked.defaultof<VkVideoSessionKHR> && x.videoSessionParameters = Unchecked.defaultof<VkVideoSessionParametersKHR> && x.referenceSlotCount = Unchecked.defaultof<uint32> && x.pReferenceSlots = Unchecked.defaultof<nativeptr<VkVideoReferenceSlotKHR>>

            static member Empty =
                VkVideoBeginCodingInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoBeginCodingFlagsKHR>, Unchecked.defaultof<VkVideoCodingQualityPresetFlagsKHR>, Unchecked.defaultof<VkVideoSessionKHR>, Unchecked.defaultof<VkVideoSessionParametersKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoReferenceSlotKHR>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "codecQualityPreset = %A" x.codecQualityPreset
                    sprintf "videoSession = %A" x.videoSession
                    sprintf "videoSessionParameters = %A" x.videoSessionParameters
                    sprintf "referenceSlotCount = %A" x.referenceSlotCount
                    sprintf "pReferenceSlots = %A" x.pReferenceSlots
                ] |> sprintf "VkVideoBeginCodingInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoBindMemoryKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryBindIndex : uint32
            val mutable public memory : VkDeviceMemory
            val mutable public memoryOffset : VkDeviceSize
            val mutable public memorySize : VkDeviceSize

            new(pNext : nativeint, memoryBindIndex : uint32, memory : VkDeviceMemory, memoryOffset : VkDeviceSize, memorySize : VkDeviceSize) =
                {
                    sType = 1000023004u
                    pNext = pNext
                    memoryBindIndex = memoryBindIndex
                    memory = memory
                    memoryOffset = memoryOffset
                    memorySize = memorySize
                }

            new(memoryBindIndex : uint32, memory : VkDeviceMemory, memoryOffset : VkDeviceSize, memorySize : VkDeviceSize) =
                VkVideoBindMemoryKHR(Unchecked.defaultof<nativeint>, memoryBindIndex, memory, memoryOffset, memorySize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryBindIndex = Unchecked.defaultof<uint32> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.memoryOffset = Unchecked.defaultof<VkDeviceSize> && x.memorySize = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkVideoBindMemoryKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryBindIndex = %A" x.memoryBindIndex
                    sprintf "memory = %A" x.memory
                    sprintf "memoryOffset = %A" x.memoryOffset
                    sprintf "memorySize = %A" x.memorySize
                ] |> sprintf "VkVideoBindMemoryKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoCapabilitiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public capabilityFlags : VkVideoCapabilityFlagsKHR
            val mutable public minBitstreamBufferOffsetAlignment : VkDeviceSize
            val mutable public minBitstreamBufferSizeAlignment : VkDeviceSize
            val mutable public videoPictureExtentGranularity : VkExtent2D
            val mutable public minExtent : VkExtent2D
            val mutable public maxExtent : VkExtent2D
            val mutable public maxReferencePicturesSlotsCount : uint32
            val mutable public maxReferencePicturesActiveCount : uint32
            val mutable public stdHeaderVersion : VkExtensionProperties

            new(pNext : nativeint, capabilityFlags : VkVideoCapabilityFlagsKHR, minBitstreamBufferOffsetAlignment : VkDeviceSize, minBitstreamBufferSizeAlignment : VkDeviceSize, videoPictureExtentGranularity : VkExtent2D, minExtent : VkExtent2D, maxExtent : VkExtent2D, maxReferencePicturesSlotsCount : uint32, maxReferencePicturesActiveCount : uint32, stdHeaderVersion : VkExtensionProperties) =
                {
                    sType = 1000023001u
                    pNext = pNext
                    capabilityFlags = capabilityFlags
                    minBitstreamBufferOffsetAlignment = minBitstreamBufferOffsetAlignment
                    minBitstreamBufferSizeAlignment = minBitstreamBufferSizeAlignment
                    videoPictureExtentGranularity = videoPictureExtentGranularity
                    minExtent = minExtent
                    maxExtent = maxExtent
                    maxReferencePicturesSlotsCount = maxReferencePicturesSlotsCount
                    maxReferencePicturesActiveCount = maxReferencePicturesActiveCount
                    stdHeaderVersion = stdHeaderVersion
                }

            new(capabilityFlags : VkVideoCapabilityFlagsKHR, minBitstreamBufferOffsetAlignment : VkDeviceSize, minBitstreamBufferSizeAlignment : VkDeviceSize, videoPictureExtentGranularity : VkExtent2D, minExtent : VkExtent2D, maxExtent : VkExtent2D, maxReferencePicturesSlotsCount : uint32, maxReferencePicturesActiveCount : uint32, stdHeaderVersion : VkExtensionProperties) =
                VkVideoCapabilitiesKHR(Unchecked.defaultof<nativeint>, capabilityFlags, minBitstreamBufferOffsetAlignment, minBitstreamBufferSizeAlignment, videoPictureExtentGranularity, minExtent, maxExtent, maxReferencePicturesSlotsCount, maxReferencePicturesActiveCount, stdHeaderVersion)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.capabilityFlags = Unchecked.defaultof<VkVideoCapabilityFlagsKHR> && x.minBitstreamBufferOffsetAlignment = Unchecked.defaultof<VkDeviceSize> && x.minBitstreamBufferSizeAlignment = Unchecked.defaultof<VkDeviceSize> && x.videoPictureExtentGranularity = Unchecked.defaultof<VkExtent2D> && x.minExtent = Unchecked.defaultof<VkExtent2D> && x.maxExtent = Unchecked.defaultof<VkExtent2D> && x.maxReferencePicturesSlotsCount = Unchecked.defaultof<uint32> && x.maxReferencePicturesActiveCount = Unchecked.defaultof<uint32> && x.stdHeaderVersion = Unchecked.defaultof<VkExtensionProperties>

            static member Empty =
                VkVideoCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoCapabilityFlagsKHR>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkExtensionProperties>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "capabilityFlags = %A" x.capabilityFlags
                    sprintf "minBitstreamBufferOffsetAlignment = %A" x.minBitstreamBufferOffsetAlignment
                    sprintf "minBitstreamBufferSizeAlignment = %A" x.minBitstreamBufferSizeAlignment
                    sprintf "videoPictureExtentGranularity = %A" x.videoPictureExtentGranularity
                    sprintf "minExtent = %A" x.minExtent
                    sprintf "maxExtent = %A" x.maxExtent
                    sprintf "maxReferencePicturesSlotsCount = %A" x.maxReferencePicturesSlotsCount
                    sprintf "maxReferencePicturesActiveCount = %A" x.maxReferencePicturesActiveCount
                    sprintf "stdHeaderVersion = %A" x.stdHeaderVersion
                ] |> sprintf "VkVideoCapabilitiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoCodingControlInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkVideoCodingControlFlagsKHR

            new(pNext : nativeint, flags : VkVideoCodingControlFlagsKHR) =
                {
                    sType = 1000023010u
                    pNext = pNext
                    flags = flags
                }

            new(flags : VkVideoCodingControlFlagsKHR) =
                VkVideoCodingControlInfoKHR(Unchecked.defaultof<nativeint>, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoCodingControlFlagsKHR>

            static member Empty =
                VkVideoCodingControlInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoCodingControlFlagsKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkVideoCodingControlInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEndCodingInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkVideoEndCodingFlagsKHR

            new(pNext : nativeint, flags : VkVideoEndCodingFlagsKHR) =
                {
                    sType = 1000023009u
                    pNext = pNext
                    flags = flags
                }

            new(flags : VkVideoEndCodingFlagsKHR) =
                VkVideoEndCodingInfoKHR(Unchecked.defaultof<nativeint>, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEndCodingFlagsKHR>

            static member Empty =
                VkVideoEndCodingInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEndCodingFlagsKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkVideoEndCodingInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoFormatPropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public format : VkFormat
            val mutable public componentMapping : VkComponentMapping
            val mutable public imageCreateFlags : VkImageCreateFlags
            val mutable public imageType : VkImageType
            val mutable public imageTiling : VkImageTiling
            val mutable public imageUsageFlags : VkImageUsageFlags

            new(pNext : nativeint, format : VkFormat, componentMapping : VkComponentMapping, imageCreateFlags : VkImageCreateFlags, imageType : VkImageType, imageTiling : VkImageTiling, imageUsageFlags : VkImageUsageFlags) =
                {
                    sType = 1000023015u
                    pNext = pNext
                    format = format
                    componentMapping = componentMapping
                    imageCreateFlags = imageCreateFlags
                    imageType = imageType
                    imageTiling = imageTiling
                    imageUsageFlags = imageUsageFlags
                }

            new(format : VkFormat, componentMapping : VkComponentMapping, imageCreateFlags : VkImageCreateFlags, imageType : VkImageType, imageTiling : VkImageTiling, imageUsageFlags : VkImageUsageFlags) =
                VkVideoFormatPropertiesKHR(Unchecked.defaultof<nativeint>, format, componentMapping, imageCreateFlags, imageType, imageTiling, imageUsageFlags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.format = Unchecked.defaultof<VkFormat> && x.componentMapping = Unchecked.defaultof<VkComponentMapping> && x.imageCreateFlags = Unchecked.defaultof<VkImageCreateFlags> && x.imageType = Unchecked.defaultof<VkImageType> && x.imageTiling = Unchecked.defaultof<VkImageTiling> && x.imageUsageFlags = Unchecked.defaultof<VkImageUsageFlags>

            static member Empty =
                VkVideoFormatPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<VkImageCreateFlags>, Unchecked.defaultof<VkImageType>, Unchecked.defaultof<VkImageTiling>, Unchecked.defaultof<VkImageUsageFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "format = %A" x.format
                    sprintf "componentMapping = %A" x.componentMapping
                    sprintf "imageCreateFlags = %A" x.imageCreateFlags
                    sprintf "imageType = %A" x.imageType
                    sprintf "imageTiling = %A" x.imageTiling
                    sprintf "imageUsageFlags = %A" x.imageUsageFlags
                ] |> sprintf "VkVideoFormatPropertiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoGetMemoryPropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryBindIndex : uint32
            val mutable public pMemoryRequirements : nativeptr<VkMemoryRequirements2>

            new(pNext : nativeint, memoryBindIndex : uint32, pMemoryRequirements : nativeptr<VkMemoryRequirements2>) =
                {
                    sType = 1000023003u
                    pNext = pNext
                    memoryBindIndex = memoryBindIndex
                    pMemoryRequirements = pMemoryRequirements
                }

            new(memoryBindIndex : uint32, pMemoryRequirements : nativeptr<VkMemoryRequirements2>) =
                VkVideoGetMemoryPropertiesKHR(Unchecked.defaultof<nativeint>, memoryBindIndex, pMemoryRequirements)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryBindIndex = Unchecked.defaultof<uint32> && x.pMemoryRequirements = Unchecked.defaultof<nativeptr<VkMemoryRequirements2>>

            static member Empty =
                VkVideoGetMemoryPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkMemoryRequirements2>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryBindIndex = %A" x.memoryBindIndex
                    sprintf "pMemoryRequirements = %A" x.pMemoryRequirements
                ] |> sprintf "VkVideoGetMemoryPropertiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoProfileKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public videoCodecOperation : VkVideoCodecOperationFlagsKHR
            val mutable public chromaSubsampling : VkVideoChromaSubsamplingFlagsKHR
            val mutable public lumaBitDepth : VkVideoComponentBitDepthFlagsKHR
            val mutable public chromaBitDepth : VkVideoComponentBitDepthFlagsKHR

            new(pNext : nativeint, videoCodecOperation : VkVideoCodecOperationFlagsKHR, chromaSubsampling : VkVideoChromaSubsamplingFlagsKHR, lumaBitDepth : VkVideoComponentBitDepthFlagsKHR, chromaBitDepth : VkVideoComponentBitDepthFlagsKHR) =
                {
                    sType = 1000023000u
                    pNext = pNext
                    videoCodecOperation = videoCodecOperation
                    chromaSubsampling = chromaSubsampling
                    lumaBitDepth = lumaBitDepth
                    chromaBitDepth = chromaBitDepth
                }

            new(videoCodecOperation : VkVideoCodecOperationFlagsKHR, chromaSubsampling : VkVideoChromaSubsamplingFlagsKHR, lumaBitDepth : VkVideoComponentBitDepthFlagsKHR, chromaBitDepth : VkVideoComponentBitDepthFlagsKHR) =
                VkVideoProfileKHR(Unchecked.defaultof<nativeint>, videoCodecOperation, chromaSubsampling, lumaBitDepth, chromaBitDepth)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.videoCodecOperation = Unchecked.defaultof<VkVideoCodecOperationFlagsKHR> && x.chromaSubsampling = Unchecked.defaultof<VkVideoChromaSubsamplingFlagsKHR> && x.lumaBitDepth = Unchecked.defaultof<VkVideoComponentBitDepthFlagsKHR> && x.chromaBitDepth = Unchecked.defaultof<VkVideoComponentBitDepthFlagsKHR>

            static member Empty =
                VkVideoProfileKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoCodecOperationFlagsKHR>, Unchecked.defaultof<VkVideoChromaSubsamplingFlagsKHR>, Unchecked.defaultof<VkVideoComponentBitDepthFlagsKHR>, Unchecked.defaultof<VkVideoComponentBitDepthFlagsKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "videoCodecOperation = %A" x.videoCodecOperation
                    sprintf "chromaSubsampling = %A" x.chromaSubsampling
                    sprintf "lumaBitDepth = %A" x.lumaBitDepth
                    sprintf "chromaBitDepth = %A" x.chromaBitDepth
                ] |> sprintf "VkVideoProfileKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoProfilesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public profileCount : uint32
            val mutable public pProfiles : nativeptr<VkVideoProfileKHR>

            new(pNext : nativeint, profileCount : uint32, pProfiles : nativeptr<VkVideoProfileKHR>) =
                {
                    sType = 1000023013u
                    pNext = pNext
                    profileCount = profileCount
                    pProfiles = pProfiles
                }

            new(profileCount : uint32, pProfiles : nativeptr<VkVideoProfileKHR>) =
                VkVideoProfilesKHR(Unchecked.defaultof<nativeint>, profileCount, pProfiles)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.profileCount = Unchecked.defaultof<uint32> && x.pProfiles = Unchecked.defaultof<nativeptr<VkVideoProfileKHR>>

            static member Empty =
                VkVideoProfilesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoProfileKHR>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "profileCount = %A" x.profileCount
                    sprintf "pProfiles = %A" x.pProfiles
                ] |> sprintf "VkVideoProfilesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoQueueFamilyProperties2KHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public videoCodecOperations : VkVideoCodecOperationFlagsKHR

            new(pNext : nativeint, videoCodecOperations : VkVideoCodecOperationFlagsKHR) =
                {
                    sType = 1000023012u
                    pNext = pNext
                    videoCodecOperations = videoCodecOperations
                }

            new(videoCodecOperations : VkVideoCodecOperationFlagsKHR) =
                VkVideoQueueFamilyProperties2KHR(Unchecked.defaultof<nativeint>, videoCodecOperations)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.videoCodecOperations = Unchecked.defaultof<VkVideoCodecOperationFlagsKHR>

            static member Empty =
                VkVideoQueueFamilyProperties2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoCodecOperationFlagsKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "videoCodecOperations = %A" x.videoCodecOperations
                ] |> sprintf "VkVideoQueueFamilyProperties2KHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoSessionCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public queueFamilyIndex : uint32
            val mutable public flags : VkVideoSessionCreateFlagsKHR
            val mutable public pVideoProfile : nativeptr<VkVideoProfileKHR>
            val mutable public pictureFormat : VkFormat
            val mutable public maxCodedExtent : VkExtent2D
            val mutable public referencePicturesFormat : VkFormat
            val mutable public maxReferencePicturesSlotsCount : uint32
            val mutable public maxReferencePicturesActiveCount : uint32
            val mutable public pStdHeaderVersion : nativeptr<VkExtensionProperties>

            new(pNext : nativeint, queueFamilyIndex : uint32, flags : VkVideoSessionCreateFlagsKHR, pVideoProfile : nativeptr<VkVideoProfileKHR>, pictureFormat : VkFormat, maxCodedExtent : VkExtent2D, referencePicturesFormat : VkFormat, maxReferencePicturesSlotsCount : uint32, maxReferencePicturesActiveCount : uint32, pStdHeaderVersion : nativeptr<VkExtensionProperties>) =
                {
                    sType = 1000023005u
                    pNext = pNext
                    queueFamilyIndex = queueFamilyIndex
                    flags = flags
                    pVideoProfile = pVideoProfile
                    pictureFormat = pictureFormat
                    maxCodedExtent = maxCodedExtent
                    referencePicturesFormat = referencePicturesFormat
                    maxReferencePicturesSlotsCount = maxReferencePicturesSlotsCount
                    maxReferencePicturesActiveCount = maxReferencePicturesActiveCount
                    pStdHeaderVersion = pStdHeaderVersion
                }

            new(queueFamilyIndex : uint32, flags : VkVideoSessionCreateFlagsKHR, pVideoProfile : nativeptr<VkVideoProfileKHR>, pictureFormat : VkFormat, maxCodedExtent : VkExtent2D, referencePicturesFormat : VkFormat, maxReferencePicturesSlotsCount : uint32, maxReferencePicturesActiveCount : uint32, pStdHeaderVersion : nativeptr<VkExtensionProperties>) =
                VkVideoSessionCreateInfoKHR(Unchecked.defaultof<nativeint>, queueFamilyIndex, flags, pVideoProfile, pictureFormat, maxCodedExtent, referencePicturesFormat, maxReferencePicturesSlotsCount, maxReferencePicturesActiveCount, pStdHeaderVersion)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.queueFamilyIndex = Unchecked.defaultof<uint32> && x.flags = Unchecked.defaultof<VkVideoSessionCreateFlagsKHR> && x.pVideoProfile = Unchecked.defaultof<nativeptr<VkVideoProfileKHR>> && x.pictureFormat = Unchecked.defaultof<VkFormat> && x.maxCodedExtent = Unchecked.defaultof<VkExtent2D> && x.referencePicturesFormat = Unchecked.defaultof<VkFormat> && x.maxReferencePicturesSlotsCount = Unchecked.defaultof<uint32> && x.maxReferencePicturesActiveCount = Unchecked.defaultof<uint32> && x.pStdHeaderVersion = Unchecked.defaultof<nativeptr<VkExtensionProperties>>

            static member Empty =
                VkVideoSessionCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkVideoSessionCreateFlagsKHR>, Unchecked.defaultof<nativeptr<VkVideoProfileKHR>>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<VkFormat>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkExtensionProperties>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "queueFamilyIndex = %A" x.queueFamilyIndex
                    sprintf "flags = %A" x.flags
                    sprintf "pVideoProfile = %A" x.pVideoProfile
                    sprintf "pictureFormat = %A" x.pictureFormat
                    sprintf "maxCodedExtent = %A" x.maxCodedExtent
                    sprintf "referencePicturesFormat = %A" x.referencePicturesFormat
                    sprintf "maxReferencePicturesSlotsCount = %A" x.maxReferencePicturesSlotsCount
                    sprintf "maxReferencePicturesActiveCount = %A" x.maxReferencePicturesActiveCount
                    sprintf "pStdHeaderVersion = %A" x.pStdHeaderVersion
                ] |> sprintf "VkVideoSessionCreateInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoSessionParametersCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public videoSessionParametersTemplate : VkVideoSessionParametersKHR
            val mutable public videoSession : VkVideoSessionKHR

            new(pNext : nativeint, videoSessionParametersTemplate : VkVideoSessionParametersKHR, videoSession : VkVideoSessionKHR) =
                {
                    sType = 1000023006u
                    pNext = pNext
                    videoSessionParametersTemplate = videoSessionParametersTemplate
                    videoSession = videoSession
                }

            new(videoSessionParametersTemplate : VkVideoSessionParametersKHR, videoSession : VkVideoSessionKHR) =
                VkVideoSessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, videoSessionParametersTemplate, videoSession)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.videoSessionParametersTemplate = Unchecked.defaultof<VkVideoSessionParametersKHR> && x.videoSession = Unchecked.defaultof<VkVideoSessionKHR>

            static member Empty =
                VkVideoSessionParametersCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoSessionParametersKHR>, Unchecked.defaultof<VkVideoSessionKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "videoSessionParametersTemplate = %A" x.videoSessionParametersTemplate
                    sprintf "videoSession = %A" x.videoSession
                ] |> sprintf "VkVideoSessionParametersCreateInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoSessionParametersUpdateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public updateSequenceCount : uint32

            new(pNext : nativeint, updateSequenceCount : uint32) =
                {
                    sType = 1000023007u
                    pNext = pNext
                    updateSequenceCount = updateSequenceCount
                }

            new(updateSequenceCount : uint32) =
                VkVideoSessionParametersUpdateInfoKHR(Unchecked.defaultof<nativeint>, updateSequenceCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.updateSequenceCount = Unchecked.defaultof<uint32>

            static member Empty =
                VkVideoSessionParametersUpdateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "updateSequenceCount = %A" x.updateSequenceCount
                ] |> sprintf "VkVideoSessionParametersUpdateInfoKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkObjectType with
              /// VkVideoSessionKHR
              static member inline VideoSessionKhr = unbox<VkObjectType> 1000023000
              /// VkVideoSessionParametersKHR
              static member inline VideoSessionParametersKhr = unbox<VkObjectType> 1000023001
         type VkQueryResultFlags with
              static member inline WithStatusBitKhr = unbox<VkQueryResultFlags> 0x00000010
         type VkQueryType with
              static member inline ResultStatusOnlyKhr = unbox<VkQueryType> 1000023000
         type VkResult with
              static member inline ErrorImageUsageNotSupportedKhr = unbox<VkResult> -1000023000
              static member inline ErrorVideoPictureLayoutNotSupportedKhr = unbox<VkResult> -1000023001
              static member inline ErrorVideoProfileOperationNotSupportedKhr = unbox<VkResult> -1000023002
              static member inline ErrorVideoProfileFormatNotSupportedKhr = unbox<VkResult> -1000023003
              static member inline ErrorVideoProfileCodecNotSupportedKhr = unbox<VkResult> -1000023004
              static member inline ErrorVideoStdVersionNotSupportedKhr = unbox<VkResult> -1000023005

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceVideoCapabilitiesKHRDel = delegate of VkPhysicalDevice * nativeptr<VkVideoProfileKHR> * nativeptr<VkVideoCapabilitiesKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceVideoFormatPropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceVideoFormatInfoKHR> * nativeptr<uint32> * nativeptr<VkVideoFormatPropertiesKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateVideoSessionKHRDel = delegate of VkDevice * nativeptr<VkVideoSessionCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkVideoSessionKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyVideoSessionKHRDel = delegate of VkDevice * VkVideoSessionKHR * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetVideoSessionMemoryRequirementsKHRDel = delegate of VkDevice * VkVideoSessionKHR * nativeptr<uint32> * nativeptr<VkVideoGetMemoryPropertiesKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkBindVideoSessionMemoryKHRDel = delegate of VkDevice * VkVideoSessionKHR * uint32 * nativeptr<VkVideoBindMemoryKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateVideoSessionParametersKHRDel = delegate of VkDevice * nativeptr<VkVideoSessionParametersCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkVideoSessionParametersKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkUpdateVideoSessionParametersKHRDel = delegate of VkDevice * VkVideoSessionParametersKHR * nativeptr<VkVideoSessionParametersUpdateInfoKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyVideoSessionParametersKHRDel = delegate of VkDevice * VkVideoSessionParametersKHR * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBeginVideoCodingKHRDel = delegate of VkCommandBuffer * nativeptr<VkVideoBeginCodingInfoKHR> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdEndVideoCodingKHRDel = delegate of VkCommandBuffer * nativeptr<VkVideoEndCodingInfoKHR> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdControlVideoCodingKHRDel = delegate of VkCommandBuffer * nativeptr<VkVideoCodingControlInfoKHR> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRVideoQueue")
            static let s_vkGetPhysicalDeviceVideoCapabilitiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceVideoCapabilitiesKHRDel> "vkGetPhysicalDeviceVideoCapabilitiesKHR"
            static let s_vkGetPhysicalDeviceVideoFormatPropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceVideoFormatPropertiesKHRDel> "vkGetPhysicalDeviceVideoFormatPropertiesKHR"
            static let s_vkCreateVideoSessionKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateVideoSessionKHRDel> "vkCreateVideoSessionKHR"
            static let s_vkDestroyVideoSessionKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroyVideoSessionKHRDel> "vkDestroyVideoSessionKHR"
            static let s_vkGetVideoSessionMemoryRequirementsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetVideoSessionMemoryRequirementsKHRDel> "vkGetVideoSessionMemoryRequirementsKHR"
            static let s_vkBindVideoSessionMemoryKHRDel = VkRaw.vkImportInstanceDelegate<VkBindVideoSessionMemoryKHRDel> "vkBindVideoSessionMemoryKHR"
            static let s_vkCreateVideoSessionParametersKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateVideoSessionParametersKHRDel> "vkCreateVideoSessionParametersKHR"
            static let s_vkUpdateVideoSessionParametersKHRDel = VkRaw.vkImportInstanceDelegate<VkUpdateVideoSessionParametersKHRDel> "vkUpdateVideoSessionParametersKHR"
            static let s_vkDestroyVideoSessionParametersKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroyVideoSessionParametersKHRDel> "vkDestroyVideoSessionParametersKHR"
            static let s_vkCmdBeginVideoCodingKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginVideoCodingKHRDel> "vkCmdBeginVideoCodingKHR"
            static let s_vkCmdEndVideoCodingKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdEndVideoCodingKHRDel> "vkCmdEndVideoCodingKHR"
            static let s_vkCmdControlVideoCodingKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdControlVideoCodingKHRDel> "vkCmdControlVideoCodingKHR"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceVideoCapabilitiesKHR = s_vkGetPhysicalDeviceVideoCapabilitiesKHRDel
            static member vkGetPhysicalDeviceVideoFormatPropertiesKHR = s_vkGetPhysicalDeviceVideoFormatPropertiesKHRDel
            static member vkCreateVideoSessionKHR = s_vkCreateVideoSessionKHRDel
            static member vkDestroyVideoSessionKHR = s_vkDestroyVideoSessionKHRDel
            static member vkGetVideoSessionMemoryRequirementsKHR = s_vkGetVideoSessionMemoryRequirementsKHRDel
            static member vkBindVideoSessionMemoryKHR = s_vkBindVideoSessionMemoryKHRDel
            static member vkCreateVideoSessionParametersKHR = s_vkCreateVideoSessionParametersKHRDel
            static member vkUpdateVideoSessionParametersKHR = s_vkUpdateVideoSessionParametersKHRDel
            static member vkDestroyVideoSessionParametersKHR = s_vkDestroyVideoSessionParametersKHRDel
            static member vkCmdBeginVideoCodingKHR = s_vkCmdBeginVideoCodingKHRDel
            static member vkCmdEndVideoCodingKHR = s_vkCmdEndVideoCodingKHRDel
            static member vkCmdControlVideoCodingKHR = s_vkCmdControlVideoCodingKHRDel
        let vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice : VkPhysicalDevice, pVideoProfile : nativeptr<VkVideoProfileKHR>, pCapabilities : nativeptr<VkVideoCapabilitiesKHR>) = Loader<unit>.vkGetPhysicalDeviceVideoCapabilitiesKHR.Invoke(physicalDevice, pVideoProfile, pCapabilities)
        let vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice : VkPhysicalDevice, pVideoFormatInfo : nativeptr<VkPhysicalDeviceVideoFormatInfoKHR>, pVideoFormatPropertyCount : nativeptr<uint32>, pVideoFormatProperties : nativeptr<VkVideoFormatPropertiesKHR>) = Loader<unit>.vkGetPhysicalDeviceVideoFormatPropertiesKHR.Invoke(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties)
        let vkCreateVideoSessionKHR(device : VkDevice, pCreateInfo : nativeptr<VkVideoSessionCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pVideoSession : nativeptr<VkVideoSessionKHR>) = Loader<unit>.vkCreateVideoSessionKHR.Invoke(device, pCreateInfo, pAllocator, pVideoSession)
        let vkDestroyVideoSessionKHR(device : VkDevice, videoSession : VkVideoSessionKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyVideoSessionKHR.Invoke(device, videoSession, pAllocator)
        let vkGetVideoSessionMemoryRequirementsKHR(device : VkDevice, videoSession : VkVideoSessionKHR, pVideoSessionMemoryRequirementsCount : nativeptr<uint32>, pVideoSessionMemoryRequirements : nativeptr<VkVideoGetMemoryPropertiesKHR>) = Loader<unit>.vkGetVideoSessionMemoryRequirementsKHR.Invoke(device, videoSession, pVideoSessionMemoryRequirementsCount, pVideoSessionMemoryRequirements)
        let vkBindVideoSessionMemoryKHR(device : VkDevice, videoSession : VkVideoSessionKHR, videoSessionBindMemoryCount : uint32, pVideoSessionBindMemories : nativeptr<VkVideoBindMemoryKHR>) = Loader<unit>.vkBindVideoSessionMemoryKHR.Invoke(device, videoSession, videoSessionBindMemoryCount, pVideoSessionBindMemories)
        let vkCreateVideoSessionParametersKHR(device : VkDevice, pCreateInfo : nativeptr<VkVideoSessionParametersCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pVideoSessionParameters : nativeptr<VkVideoSessionParametersKHR>) = Loader<unit>.vkCreateVideoSessionParametersKHR.Invoke(device, pCreateInfo, pAllocator, pVideoSessionParameters)
        let vkUpdateVideoSessionParametersKHR(device : VkDevice, videoSessionParameters : VkVideoSessionParametersKHR, pUpdateInfo : nativeptr<VkVideoSessionParametersUpdateInfoKHR>) = Loader<unit>.vkUpdateVideoSessionParametersKHR.Invoke(device, videoSessionParameters, pUpdateInfo)
        let vkDestroyVideoSessionParametersKHR(device : VkDevice, videoSessionParameters : VkVideoSessionParametersKHR, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyVideoSessionParametersKHR.Invoke(device, videoSessionParameters, pAllocator)
        let vkCmdBeginVideoCodingKHR(commandBuffer : VkCommandBuffer, pBeginInfo : nativeptr<VkVideoBeginCodingInfoKHR>) = Loader<unit>.vkCmdBeginVideoCodingKHR.Invoke(commandBuffer, pBeginInfo)
        let vkCmdEndVideoCodingKHR(commandBuffer : VkCommandBuffer, pEndCodingInfo : nativeptr<VkVideoEndCodingInfoKHR>) = Loader<unit>.vkCmdEndVideoCodingKHR.Invoke(commandBuffer, pEndCodingInfo)
        let vkCmdControlVideoCodingKHR(commandBuffer : VkCommandBuffer, pCodingControlInfo : nativeptr<VkVideoCodingControlInfoKHR>) = Loader<unit>.vkCmdControlVideoCodingKHR.Invoke(commandBuffer, pCodingControlInfo)

module KHRVideoDecodeQueue =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRSynchronization2
    open KHRVideoQueue
    let Name = "VK_KHR_video_decode_queue"
    let Number = 25

    let Required = [ KHRSynchronization2.Name; KHRVideoQueue.Name ]


    [<Flags>]
    type VkVideoDecodeCapabilityFlagsKHR =
        | All = 3
        | Default = 0
        | DpbAndOutputCoincideBit = 0x00000001
        | DpbAndOutputDistinctBit = 0x00000002

    [<Flags>]
    type VkVideoDecodeFlagsKHR =
        | All = 1
        | Default = 0
        | Reserved0Bit = 0x00000001


    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeCapabilitiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkVideoDecodeCapabilityFlagsKHR

            new(pNext : nativeint, flags : VkVideoDecodeCapabilityFlagsKHR) =
                {
                    sType = 1000024001u
                    pNext = pNext
                    flags = flags
                }

            new(flags : VkVideoDecodeCapabilityFlagsKHR) =
                VkVideoDecodeCapabilitiesKHR(Unchecked.defaultof<nativeint>, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoDecodeCapabilityFlagsKHR>

            static member Empty =
                VkVideoDecodeCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoDecodeCapabilityFlagsKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkVideoDecodeCapabilitiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkVideoDecodeFlagsKHR
            val mutable public srcBuffer : VkBuffer
            val mutable public srcBufferOffset : VkDeviceSize
            val mutable public srcBufferRange : VkDeviceSize
            val mutable public dstPictureResource : VkVideoPictureResourceKHR
            val mutable public pSetupReferenceSlot : nativeptr<VkVideoReferenceSlotKHR>
            val mutable public referenceSlotCount : uint32
            val mutable public pReferenceSlots : nativeptr<VkVideoReferenceSlotKHR>

            new(pNext : nativeint, flags : VkVideoDecodeFlagsKHR, srcBuffer : VkBuffer, srcBufferOffset : VkDeviceSize, srcBufferRange : VkDeviceSize, dstPictureResource : VkVideoPictureResourceKHR, pSetupReferenceSlot : nativeptr<VkVideoReferenceSlotKHR>, referenceSlotCount : uint32, pReferenceSlots : nativeptr<VkVideoReferenceSlotKHR>) =
                {
                    sType = 1000024000u
                    pNext = pNext
                    flags = flags
                    srcBuffer = srcBuffer
                    srcBufferOffset = srcBufferOffset
                    srcBufferRange = srcBufferRange
                    dstPictureResource = dstPictureResource
                    pSetupReferenceSlot = pSetupReferenceSlot
                    referenceSlotCount = referenceSlotCount
                    pReferenceSlots = pReferenceSlots
                }

            new(flags : VkVideoDecodeFlagsKHR, srcBuffer : VkBuffer, srcBufferOffset : VkDeviceSize, srcBufferRange : VkDeviceSize, dstPictureResource : VkVideoPictureResourceKHR, pSetupReferenceSlot : nativeptr<VkVideoReferenceSlotKHR>, referenceSlotCount : uint32, pReferenceSlots : nativeptr<VkVideoReferenceSlotKHR>) =
                VkVideoDecodeInfoKHR(Unchecked.defaultof<nativeint>, flags, srcBuffer, srcBufferOffset, srcBufferRange, dstPictureResource, pSetupReferenceSlot, referenceSlotCount, pReferenceSlots)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoDecodeFlagsKHR> && x.srcBuffer = Unchecked.defaultof<VkBuffer> && x.srcBufferOffset = Unchecked.defaultof<VkDeviceSize> && x.srcBufferRange = Unchecked.defaultof<VkDeviceSize> && x.dstPictureResource = Unchecked.defaultof<VkVideoPictureResourceKHR> && x.pSetupReferenceSlot = Unchecked.defaultof<nativeptr<VkVideoReferenceSlotKHR>> && x.referenceSlotCount = Unchecked.defaultof<uint32> && x.pReferenceSlots = Unchecked.defaultof<nativeptr<VkVideoReferenceSlotKHR>>

            static member Empty =
                VkVideoDecodeInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoDecodeFlagsKHR>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkVideoPictureResourceKHR>, Unchecked.defaultof<nativeptr<VkVideoReferenceSlotKHR>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoReferenceSlotKHR>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "srcBuffer = %A" x.srcBuffer
                    sprintf "srcBufferOffset = %A" x.srcBufferOffset
                    sprintf "srcBufferRange = %A" x.srcBufferRange
                    sprintf "dstPictureResource = %A" x.dstPictureResource
                    sprintf "pSetupReferenceSlot = %A" x.pSetupReferenceSlot
                    sprintf "referenceSlotCount = %A" x.referenceSlotCount
                    sprintf "pReferenceSlots = %A" x.pReferenceSlots
                ] |> sprintf "VkVideoDecodeInfoKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags2 with
              static member inline Access2VideoDecodeReadBitKhr = unbox<VkAccessFlags2> 0x00000008
              static member inline Access2VideoDecodeWriteBitKhr = unbox<VkAccessFlags2> 0x00000010
         type VkBufferUsageFlags with
              static member inline VideoDecodeSrcBitKhr = unbox<VkBufferUsageFlags> 0x00002000
              static member inline VideoDecodeDstBitKhr = unbox<VkBufferUsageFlags> 0x00004000
         type VkFormatFeatureFlags with
              static member inline VideoDecodeOutputBitKhr = unbox<VkFormatFeatureFlags> 0x02000000
              static member inline VideoDecodeDpbBitKhr = unbox<VkFormatFeatureFlags> 0x04000000
         type VkImageLayout with
              static member inline VideoDecodeDstKhr = unbox<VkImageLayout> 1000024000
              static member inline VideoDecodeSrcKhr = unbox<VkImageLayout> 1000024001
              static member inline VideoDecodeDpbKhr = unbox<VkImageLayout> 1000024002
         type VkImageUsageFlags with
              static member inline VideoDecodeDstBitKhr = unbox<VkImageUsageFlags> 0x00000400
              static member inline VideoDecodeSrcBitKhr = unbox<VkImageUsageFlags> 0x00000800
              static member inline VideoDecodeDpbBitKhr = unbox<VkImageUsageFlags> 0x00001000
         type VkPipelineStageFlags2 with
              static member inline PipelineStage2VideoDecodeBitKhr = unbox<VkPipelineStageFlags2> 0x04000000
         type VkQueueFlags with
              static member inline VideoDecodeBitKhr = unbox<VkQueueFlags> 0x00000020

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDecodeVideoKHRDel = delegate of VkCommandBuffer * nativeptr<VkVideoDecodeInfoKHR> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRVideoDecodeQueue")
            static let s_vkCmdDecodeVideoKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdDecodeVideoKHRDel> "vkCmdDecodeVideoKHR"
            static do Report.End(3) |> ignore
            static member vkCmdDecodeVideoKHR = s_vkCmdDecodeVideoKHRDel
        let vkCmdDecodeVideoKHR(commandBuffer : VkCommandBuffer, pFrameInfo : nativeptr<VkVideoDecodeInfoKHR>) = Loader<unit>.vkCmdDecodeVideoKHR.Invoke(commandBuffer, pFrameInfo)

    module KHRFormatFeatureFlags2 =
        [<AutoOpen>]
        module EnumExtensions =
             type VkFormatFeatureFlags2 with
                  static member inline FormatFeature2VideoDecodeOutputBitKhr = unbox<VkFormatFeatureFlags2> 0x02000000
                  static member inline FormatFeature2VideoDecodeDpbBitKhr = unbox<VkFormatFeatureFlags2> 0x04000000


module EXTVideoDecodeH264 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRSynchronization2
    open KHRVideoDecodeQueue
    open KHRVideoQueue
    let Name = "VK_EXT_video_decode_h264"
    let Number = 41

    let Required = [ KHRVideoDecodeQueue.Name ]


    [<Flags>]
    type VkVideoDecodeH264PictureLayoutFlagsEXT =
        | All = 3
        | Progressive = 0
        | InterlacedInterleavedLinesBit = 0x00000001
        | InterlacedSeparatePlanesBit = 0x00000002


    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH264CapabilitiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxLevel : nativeint
            val mutable public fieldOffsetGranularity : VkOffset2D

            new(pNext : nativeint, maxLevel : nativeint, fieldOffsetGranularity : VkOffset2D) =
                {
                    sType = 1000040000u
                    pNext = pNext
                    maxLevel = maxLevel
                    fieldOffsetGranularity = fieldOffsetGranularity
                }

            new(maxLevel : nativeint, fieldOffsetGranularity : VkOffset2D) =
                VkVideoDecodeH264CapabilitiesEXT(Unchecked.defaultof<nativeint>, maxLevel, fieldOffsetGranularity)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxLevel = Unchecked.defaultof<nativeint> && x.fieldOffsetGranularity = Unchecked.defaultof<VkOffset2D>

            static member Empty =
                VkVideoDecodeH264CapabilitiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkOffset2D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxLevel = %A" x.maxLevel
                    sprintf "fieldOffsetGranularity = %A" x.fieldOffsetGranularity
                ] |> sprintf "VkVideoDecodeH264CapabilitiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH264DpbSlotInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pStdReferenceInfo : nativeptr<nativeint>

            new(pNext : nativeint, pStdReferenceInfo : nativeptr<nativeint>) =
                {
                    sType = 1000040006u
                    pNext = pNext
                    pStdReferenceInfo = pStdReferenceInfo
                }

            new(pStdReferenceInfo : nativeptr<nativeint>) =
                VkVideoDecodeH264DpbSlotInfoEXT(Unchecked.defaultof<nativeint>, pStdReferenceInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pStdReferenceInfo = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoDecodeH264DpbSlotInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pStdReferenceInfo = %A" x.pStdReferenceInfo
                ] |> sprintf "VkVideoDecodeH264DpbSlotInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH264MvcEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pStdMvc : nativeptr<nativeint>

            new(pNext : nativeint, pStdMvc : nativeptr<nativeint>) =
                {
                    sType = 1000040002u
                    pNext = pNext
                    pStdMvc = pStdMvc
                }

            new(pStdMvc : nativeptr<nativeint>) =
                VkVideoDecodeH264MvcEXT(Unchecked.defaultof<nativeint>, pStdMvc)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pStdMvc = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoDecodeH264MvcEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pStdMvc = %A" x.pStdMvc
                ] |> sprintf "VkVideoDecodeH264MvcEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH264PictureInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pStdPictureInfo : nativeptr<nativeint>
            val mutable public slicesCount : uint32
            val mutable public pSlicesDataOffsets : nativeptr<uint32>

            new(pNext : nativeint, pStdPictureInfo : nativeptr<nativeint>, slicesCount : uint32, pSlicesDataOffsets : nativeptr<uint32>) =
                {
                    sType = 1000040001u
                    pNext = pNext
                    pStdPictureInfo = pStdPictureInfo
                    slicesCount = slicesCount
                    pSlicesDataOffsets = pSlicesDataOffsets
                }

            new(pStdPictureInfo : nativeptr<nativeint>, slicesCount : uint32, pSlicesDataOffsets : nativeptr<uint32>) =
                VkVideoDecodeH264PictureInfoEXT(Unchecked.defaultof<nativeint>, pStdPictureInfo, slicesCount, pSlicesDataOffsets)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pStdPictureInfo = Unchecked.defaultof<nativeptr<nativeint>> && x.slicesCount = Unchecked.defaultof<uint32> && x.pSlicesDataOffsets = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkVideoDecodeH264PictureInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pStdPictureInfo = %A" x.pStdPictureInfo
                    sprintf "slicesCount = %A" x.slicesCount
                    sprintf "pSlicesDataOffsets = %A" x.pSlicesDataOffsets
                ] |> sprintf "VkVideoDecodeH264PictureInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH264ProfileEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stdProfileIdc : nativeint
            val mutable public pictureLayout : VkVideoDecodeH264PictureLayoutFlagsEXT

            new(pNext : nativeint, stdProfileIdc : nativeint, pictureLayout : VkVideoDecodeH264PictureLayoutFlagsEXT) =
                {
                    sType = 1000040003u
                    pNext = pNext
                    stdProfileIdc = stdProfileIdc
                    pictureLayout = pictureLayout
                }

            new(stdProfileIdc : nativeint, pictureLayout : VkVideoDecodeH264PictureLayoutFlagsEXT) =
                VkVideoDecodeH264ProfileEXT(Unchecked.defaultof<nativeint>, stdProfileIdc, pictureLayout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stdProfileIdc = Unchecked.defaultof<nativeint> && x.pictureLayout = Unchecked.defaultof<VkVideoDecodeH264PictureLayoutFlagsEXT>

            static member Empty =
                VkVideoDecodeH264ProfileEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoDecodeH264PictureLayoutFlagsEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "stdProfileIdc = %A" x.stdProfileIdc
                    sprintf "pictureLayout = %A" x.pictureLayout
                ] |> sprintf "VkVideoDecodeH264ProfileEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH264SessionParametersAddInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public spsStdCount : uint32
            val mutable public pSpsStd : nativeptr<nativeint>
            val mutable public ppsStdCount : uint32
            val mutable public pPpsStd : nativeptr<nativeint>

            new(pNext : nativeint, spsStdCount : uint32, pSpsStd : nativeptr<nativeint>, ppsStdCount : uint32, pPpsStd : nativeptr<nativeint>) =
                {
                    sType = 1000040005u
                    pNext = pNext
                    spsStdCount = spsStdCount
                    pSpsStd = pSpsStd
                    ppsStdCount = ppsStdCount
                    pPpsStd = pPpsStd
                }

            new(spsStdCount : uint32, pSpsStd : nativeptr<nativeint>, ppsStdCount : uint32, pPpsStd : nativeptr<nativeint>) =
                VkVideoDecodeH264SessionParametersAddInfoEXT(Unchecked.defaultof<nativeint>, spsStdCount, pSpsStd, ppsStdCount, pPpsStd)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.spsStdCount = Unchecked.defaultof<uint32> && x.pSpsStd = Unchecked.defaultof<nativeptr<nativeint>> && x.ppsStdCount = Unchecked.defaultof<uint32> && x.pPpsStd = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoDecodeH264SessionParametersAddInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "spsStdCount = %A" x.spsStdCount
                    sprintf "pSpsStd = %A" x.pSpsStd
                    sprintf "ppsStdCount = %A" x.ppsStdCount
                    sprintf "pPpsStd = %A" x.pPpsStd
                ] |> sprintf "VkVideoDecodeH264SessionParametersAddInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH264SessionParametersCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxSpsStdCount : uint32
            val mutable public maxPpsStdCount : uint32
            val mutable public pParametersAddInfo : nativeptr<VkVideoDecodeH264SessionParametersAddInfoEXT>

            new(pNext : nativeint, maxSpsStdCount : uint32, maxPpsStdCount : uint32, pParametersAddInfo : nativeptr<VkVideoDecodeH264SessionParametersAddInfoEXT>) =
                {
                    sType = 1000040004u
                    pNext = pNext
                    maxSpsStdCount = maxSpsStdCount
                    maxPpsStdCount = maxPpsStdCount
                    pParametersAddInfo = pParametersAddInfo
                }

            new(maxSpsStdCount : uint32, maxPpsStdCount : uint32, pParametersAddInfo : nativeptr<VkVideoDecodeH264SessionParametersAddInfoEXT>) =
                VkVideoDecodeH264SessionParametersCreateInfoEXT(Unchecked.defaultof<nativeint>, maxSpsStdCount, maxPpsStdCount, pParametersAddInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxSpsStdCount = Unchecked.defaultof<uint32> && x.maxPpsStdCount = Unchecked.defaultof<uint32> && x.pParametersAddInfo = Unchecked.defaultof<nativeptr<VkVideoDecodeH264SessionParametersAddInfoEXT>>

            static member Empty =
                VkVideoDecodeH264SessionParametersCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoDecodeH264SessionParametersAddInfoEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxSpsStdCount = %A" x.maxSpsStdCount
                    sprintf "maxPpsStdCount = %A" x.maxPpsStdCount
                    sprintf "pParametersAddInfo = %A" x.pParametersAddInfo
                ] |> sprintf "VkVideoDecodeH264SessionParametersCreateInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkVideoCodecOperationFlagsKHR with
              static member inline DecodeH264BitExt = unbox<VkVideoCodecOperationFlagsKHR> 0x00000001


module EXTVideoDecodeH265 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRSynchronization2
    open KHRVideoDecodeQueue
    open KHRVideoQueue
    let Name = "VK_EXT_video_decode_h265"
    let Number = 188

    let Required = [ KHRVideoDecodeQueue.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH265CapabilitiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxLevel : nativeint

            new(pNext : nativeint, maxLevel : nativeint) =
                {
                    sType = 1000187000u
                    pNext = pNext
                    maxLevel = maxLevel
                }

            new(maxLevel : nativeint) =
                VkVideoDecodeH265CapabilitiesEXT(Unchecked.defaultof<nativeint>, maxLevel)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxLevel = Unchecked.defaultof<nativeint>

            static member Empty =
                VkVideoDecodeH265CapabilitiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxLevel = %A" x.maxLevel
                ] |> sprintf "VkVideoDecodeH265CapabilitiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH265DpbSlotInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pStdReferenceInfo : nativeptr<nativeint>

            new(pNext : nativeint, pStdReferenceInfo : nativeptr<nativeint>) =
                {
                    sType = 1000187005u
                    pNext = pNext
                    pStdReferenceInfo = pStdReferenceInfo
                }

            new(pStdReferenceInfo : nativeptr<nativeint>) =
                VkVideoDecodeH265DpbSlotInfoEXT(Unchecked.defaultof<nativeint>, pStdReferenceInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pStdReferenceInfo = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoDecodeH265DpbSlotInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pStdReferenceInfo = %A" x.pStdReferenceInfo
                ] |> sprintf "VkVideoDecodeH265DpbSlotInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH265PictureInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pStdPictureInfo : nativeptr<nativeint>
            val mutable public slicesCount : uint32
            val mutable public pSlicesDataOffsets : nativeptr<uint32>

            new(pNext : nativeint, pStdPictureInfo : nativeptr<nativeint>, slicesCount : uint32, pSlicesDataOffsets : nativeptr<uint32>) =
                {
                    sType = 1000187004u
                    pNext = pNext
                    pStdPictureInfo = pStdPictureInfo
                    slicesCount = slicesCount
                    pSlicesDataOffsets = pSlicesDataOffsets
                }

            new(pStdPictureInfo : nativeptr<nativeint>, slicesCount : uint32, pSlicesDataOffsets : nativeptr<uint32>) =
                VkVideoDecodeH265PictureInfoEXT(Unchecked.defaultof<nativeint>, pStdPictureInfo, slicesCount, pSlicesDataOffsets)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pStdPictureInfo = Unchecked.defaultof<nativeptr<nativeint>> && x.slicesCount = Unchecked.defaultof<uint32> && x.pSlicesDataOffsets = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkVideoDecodeH265PictureInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pStdPictureInfo = %A" x.pStdPictureInfo
                    sprintf "slicesCount = %A" x.slicesCount
                    sprintf "pSlicesDataOffsets = %A" x.pSlicesDataOffsets
                ] |> sprintf "VkVideoDecodeH265PictureInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH265ProfileEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stdProfileIdc : nativeint

            new(pNext : nativeint, stdProfileIdc : nativeint) =
                {
                    sType = 1000187003u
                    pNext = pNext
                    stdProfileIdc = stdProfileIdc
                }

            new(stdProfileIdc : nativeint) =
                VkVideoDecodeH265ProfileEXT(Unchecked.defaultof<nativeint>, stdProfileIdc)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stdProfileIdc = Unchecked.defaultof<nativeint>

            static member Empty =
                VkVideoDecodeH265ProfileEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "stdProfileIdc = %A" x.stdProfileIdc
                ] |> sprintf "VkVideoDecodeH265ProfileEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH265SessionParametersAddInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vpsStdCount : uint32
            val mutable public pVpsStd : nativeptr<nativeint>
            val mutable public spsStdCount : uint32
            val mutable public pSpsStd : nativeptr<nativeint>
            val mutable public ppsStdCount : uint32
            val mutable public pPpsStd : nativeptr<nativeint>

            new(pNext : nativeint, vpsStdCount : uint32, pVpsStd : nativeptr<nativeint>, spsStdCount : uint32, pSpsStd : nativeptr<nativeint>, ppsStdCount : uint32, pPpsStd : nativeptr<nativeint>) =
                {
                    sType = 1000187002u
                    pNext = pNext
                    vpsStdCount = vpsStdCount
                    pVpsStd = pVpsStd
                    spsStdCount = spsStdCount
                    pSpsStd = pSpsStd
                    ppsStdCount = ppsStdCount
                    pPpsStd = pPpsStd
                }

            new(vpsStdCount : uint32, pVpsStd : nativeptr<nativeint>, spsStdCount : uint32, pSpsStd : nativeptr<nativeint>, ppsStdCount : uint32, pPpsStd : nativeptr<nativeint>) =
                VkVideoDecodeH265SessionParametersAddInfoEXT(Unchecked.defaultof<nativeint>, vpsStdCount, pVpsStd, spsStdCount, pSpsStd, ppsStdCount, pPpsStd)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vpsStdCount = Unchecked.defaultof<uint32> && x.pVpsStd = Unchecked.defaultof<nativeptr<nativeint>> && x.spsStdCount = Unchecked.defaultof<uint32> && x.pSpsStd = Unchecked.defaultof<nativeptr<nativeint>> && x.ppsStdCount = Unchecked.defaultof<uint32> && x.pPpsStd = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoDecodeH265SessionParametersAddInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "vpsStdCount = %A" x.vpsStdCount
                    sprintf "pVpsStd = %A" x.pVpsStd
                    sprintf "spsStdCount = %A" x.spsStdCount
                    sprintf "pSpsStd = %A" x.pSpsStd
                    sprintf "ppsStdCount = %A" x.ppsStdCount
                    sprintf "pPpsStd = %A" x.pPpsStd
                ] |> sprintf "VkVideoDecodeH265SessionParametersAddInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoDecodeH265SessionParametersCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxVpsStdCount : uint32
            val mutable public maxSpsStdCount : uint32
            val mutable public maxPpsStdCount : uint32
            val mutable public pParametersAddInfo : nativeptr<VkVideoDecodeH265SessionParametersAddInfoEXT>

            new(pNext : nativeint, maxVpsStdCount : uint32, maxSpsStdCount : uint32, maxPpsStdCount : uint32, pParametersAddInfo : nativeptr<VkVideoDecodeH265SessionParametersAddInfoEXT>) =
                {
                    sType = 1000187001u
                    pNext = pNext
                    maxVpsStdCount = maxVpsStdCount
                    maxSpsStdCount = maxSpsStdCount
                    maxPpsStdCount = maxPpsStdCount
                    pParametersAddInfo = pParametersAddInfo
                }

            new(maxVpsStdCount : uint32, maxSpsStdCount : uint32, maxPpsStdCount : uint32, pParametersAddInfo : nativeptr<VkVideoDecodeH265SessionParametersAddInfoEXT>) =
                VkVideoDecodeH265SessionParametersCreateInfoEXT(Unchecked.defaultof<nativeint>, maxVpsStdCount, maxSpsStdCount, maxPpsStdCount, pParametersAddInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxVpsStdCount = Unchecked.defaultof<uint32> && x.maxSpsStdCount = Unchecked.defaultof<uint32> && x.maxPpsStdCount = Unchecked.defaultof<uint32> && x.pParametersAddInfo = Unchecked.defaultof<nativeptr<VkVideoDecodeH265SessionParametersAddInfoEXT>>

            static member Empty =
                VkVideoDecodeH265SessionParametersCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoDecodeH265SessionParametersAddInfoEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxVpsStdCount = %A" x.maxVpsStdCount
                    sprintf "maxSpsStdCount = %A" x.maxSpsStdCount
                    sprintf "maxPpsStdCount = %A" x.maxPpsStdCount
                    sprintf "pParametersAddInfo = %A" x.pParametersAddInfo
                ] |> sprintf "VkVideoDecodeH265SessionParametersCreateInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkVideoCodecOperationFlagsKHR with
              static member inline DecodeH265BitExt = unbox<VkVideoCodecOperationFlagsKHR> 0x00000002


module KHRVideoEncodeQueue =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRSynchronization2
    open KHRVideoQueue
    let Name = "VK_KHR_video_encode_queue"
    let Number = 300

    let Required = [ KHRSynchronization2.Name; KHRVideoQueue.Name ]


    [<Flags>]
    type VkVideoEncodeFlagsKHR =
        | All = 1
        | Default = 0
        | Reserved0Bit = 0x00000001

    [<Flags>]
    type VkVideoEncodeCapabilityFlagsKHR =
        | All = 1
        | Default = 0
        | PrecedingExternallyEncodedBytesBit = 0x00000001

    [<Flags>]
    type VkVideoEncodeRateControlFlagsKHR =
        | All = 1
        | Default = 0
        | Reserved0Bit = 0x00000001

    [<Flags>]
    type VkVideoEncodeRateControlModeFlagsKHR =
        | NoneBit = 0
        | CbrBit = 1
        | VbrBit = 2


    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeCapabilitiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkVideoEncodeCapabilityFlagsKHR
            val mutable public rateControlModes : VkVideoEncodeRateControlModeFlagsKHR
            val mutable public rateControlLayerCount : byte
            val mutable public qualityLevelCount : byte
            val mutable public inputImageDataFillAlignment : VkExtent2D

            new(pNext : nativeint, flags : VkVideoEncodeCapabilityFlagsKHR, rateControlModes : VkVideoEncodeRateControlModeFlagsKHR, rateControlLayerCount : byte, qualityLevelCount : byte, inputImageDataFillAlignment : VkExtent2D) =
                {
                    sType = 1000299003u
                    pNext = pNext
                    flags = flags
                    rateControlModes = rateControlModes
                    rateControlLayerCount = rateControlLayerCount
                    qualityLevelCount = qualityLevelCount
                    inputImageDataFillAlignment = inputImageDataFillAlignment
                }

            new(flags : VkVideoEncodeCapabilityFlagsKHR, rateControlModes : VkVideoEncodeRateControlModeFlagsKHR, rateControlLayerCount : byte, qualityLevelCount : byte, inputImageDataFillAlignment : VkExtent2D) =
                VkVideoEncodeCapabilitiesKHR(Unchecked.defaultof<nativeint>, flags, rateControlModes, rateControlLayerCount, qualityLevelCount, inputImageDataFillAlignment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeCapabilityFlagsKHR> && x.rateControlModes = Unchecked.defaultof<VkVideoEncodeRateControlModeFlagsKHR> && x.rateControlLayerCount = Unchecked.defaultof<byte> && x.qualityLevelCount = Unchecked.defaultof<byte> && x.inputImageDataFillAlignment = Unchecked.defaultof<VkExtent2D>

            static member Empty =
                VkVideoEncodeCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeCapabilityFlagsKHR>, Unchecked.defaultof<VkVideoEncodeRateControlModeFlagsKHR>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<VkExtent2D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "rateControlModes = %A" x.rateControlModes
                    sprintf "rateControlLayerCount = %A" x.rateControlLayerCount
                    sprintf "qualityLevelCount = %A" x.qualityLevelCount
                    sprintf "inputImageDataFillAlignment = %A" x.inputImageDataFillAlignment
                ] |> sprintf "VkVideoEncodeCapabilitiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkVideoEncodeFlagsKHR
            val mutable public qualityLevel : uint32
            val mutable public dstBitstreamBuffer : VkBuffer
            val mutable public dstBitstreamBufferOffset : VkDeviceSize
            val mutable public dstBitstreamBufferMaxRange : VkDeviceSize
            val mutable public srcPictureResource : VkVideoPictureResourceKHR
            val mutable public pSetupReferenceSlot : nativeptr<VkVideoReferenceSlotKHR>
            val mutable public referenceSlotCount : uint32
            val mutable public pReferenceSlots : nativeptr<VkVideoReferenceSlotKHR>
            val mutable public precedingExternallyEncodedBytes : uint32

            new(pNext : nativeint, flags : VkVideoEncodeFlagsKHR, qualityLevel : uint32, dstBitstreamBuffer : VkBuffer, dstBitstreamBufferOffset : VkDeviceSize, dstBitstreamBufferMaxRange : VkDeviceSize, srcPictureResource : VkVideoPictureResourceKHR, pSetupReferenceSlot : nativeptr<VkVideoReferenceSlotKHR>, referenceSlotCount : uint32, pReferenceSlots : nativeptr<VkVideoReferenceSlotKHR>, precedingExternallyEncodedBytes : uint32) =
                {
                    sType = 1000299000u
                    pNext = pNext
                    flags = flags
                    qualityLevel = qualityLevel
                    dstBitstreamBuffer = dstBitstreamBuffer
                    dstBitstreamBufferOffset = dstBitstreamBufferOffset
                    dstBitstreamBufferMaxRange = dstBitstreamBufferMaxRange
                    srcPictureResource = srcPictureResource
                    pSetupReferenceSlot = pSetupReferenceSlot
                    referenceSlotCount = referenceSlotCount
                    pReferenceSlots = pReferenceSlots
                    precedingExternallyEncodedBytes = precedingExternallyEncodedBytes
                }

            new(flags : VkVideoEncodeFlagsKHR, qualityLevel : uint32, dstBitstreamBuffer : VkBuffer, dstBitstreamBufferOffset : VkDeviceSize, dstBitstreamBufferMaxRange : VkDeviceSize, srcPictureResource : VkVideoPictureResourceKHR, pSetupReferenceSlot : nativeptr<VkVideoReferenceSlotKHR>, referenceSlotCount : uint32, pReferenceSlots : nativeptr<VkVideoReferenceSlotKHR>, precedingExternallyEncodedBytes : uint32) =
                VkVideoEncodeInfoKHR(Unchecked.defaultof<nativeint>, flags, qualityLevel, dstBitstreamBuffer, dstBitstreamBufferOffset, dstBitstreamBufferMaxRange, srcPictureResource, pSetupReferenceSlot, referenceSlotCount, pReferenceSlots, precedingExternallyEncodedBytes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeFlagsKHR> && x.qualityLevel = Unchecked.defaultof<uint32> && x.dstBitstreamBuffer = Unchecked.defaultof<VkBuffer> && x.dstBitstreamBufferOffset = Unchecked.defaultof<VkDeviceSize> && x.dstBitstreamBufferMaxRange = Unchecked.defaultof<VkDeviceSize> && x.srcPictureResource = Unchecked.defaultof<VkVideoPictureResourceKHR> && x.pSetupReferenceSlot = Unchecked.defaultof<nativeptr<VkVideoReferenceSlotKHR>> && x.referenceSlotCount = Unchecked.defaultof<uint32> && x.pReferenceSlots = Unchecked.defaultof<nativeptr<VkVideoReferenceSlotKHR>> && x.precedingExternallyEncodedBytes = Unchecked.defaultof<uint32>

            static member Empty =
                VkVideoEncodeInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeFlagsKHR>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkBuffer>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkVideoPictureResourceKHR>, Unchecked.defaultof<nativeptr<VkVideoReferenceSlotKHR>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoReferenceSlotKHR>>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "qualityLevel = %A" x.qualityLevel
                    sprintf "dstBitstreamBuffer = %A" x.dstBitstreamBuffer
                    sprintf "dstBitstreamBufferOffset = %A" x.dstBitstreamBufferOffset
                    sprintf "dstBitstreamBufferMaxRange = %A" x.dstBitstreamBufferMaxRange
                    sprintf "srcPictureResource = %A" x.srcPictureResource
                    sprintf "pSetupReferenceSlot = %A" x.pSetupReferenceSlot
                    sprintf "referenceSlotCount = %A" x.referenceSlotCount
                    sprintf "pReferenceSlots = %A" x.pReferenceSlots
                    sprintf "precedingExternallyEncodedBytes = %A" x.precedingExternallyEncodedBytes
                ] |> sprintf "VkVideoEncodeInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeRateControlLayerInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public averageBitrate : uint32
            val mutable public maxBitrate : uint32
            val mutable public frameRateNumerator : uint32
            val mutable public frameRateDenominator : uint32
            val mutable public virtualBufferSizeInMs : uint32
            val mutable public initialVirtualBufferSizeInMs : uint32

            new(pNext : nativeint, averageBitrate : uint32, maxBitrate : uint32, frameRateNumerator : uint32, frameRateDenominator : uint32, virtualBufferSizeInMs : uint32, initialVirtualBufferSizeInMs : uint32) =
                {
                    sType = 1000299002u
                    pNext = pNext
                    averageBitrate = averageBitrate
                    maxBitrate = maxBitrate
                    frameRateNumerator = frameRateNumerator
                    frameRateDenominator = frameRateDenominator
                    virtualBufferSizeInMs = virtualBufferSizeInMs
                    initialVirtualBufferSizeInMs = initialVirtualBufferSizeInMs
                }

            new(averageBitrate : uint32, maxBitrate : uint32, frameRateNumerator : uint32, frameRateDenominator : uint32, virtualBufferSizeInMs : uint32, initialVirtualBufferSizeInMs : uint32) =
                VkVideoEncodeRateControlLayerInfoKHR(Unchecked.defaultof<nativeint>, averageBitrate, maxBitrate, frameRateNumerator, frameRateDenominator, virtualBufferSizeInMs, initialVirtualBufferSizeInMs)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.averageBitrate = Unchecked.defaultof<uint32> && x.maxBitrate = Unchecked.defaultof<uint32> && x.frameRateNumerator = Unchecked.defaultof<uint32> && x.frameRateDenominator = Unchecked.defaultof<uint32> && x.virtualBufferSizeInMs = Unchecked.defaultof<uint32> && x.initialVirtualBufferSizeInMs = Unchecked.defaultof<uint32>

            static member Empty =
                VkVideoEncodeRateControlLayerInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "averageBitrate = %A" x.averageBitrate
                    sprintf "maxBitrate = %A" x.maxBitrate
                    sprintf "frameRateNumerator = %A" x.frameRateNumerator
                    sprintf "frameRateDenominator = %A" x.frameRateDenominator
                    sprintf "virtualBufferSizeInMs = %A" x.virtualBufferSizeInMs
                    sprintf "initialVirtualBufferSizeInMs = %A" x.initialVirtualBufferSizeInMs
                ] |> sprintf "VkVideoEncodeRateControlLayerInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeRateControlInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkVideoEncodeRateControlFlagsKHR
            val mutable public rateControlMode : VkVideoEncodeRateControlModeFlagsKHR
            val mutable public layerCount : byte
            val mutable public pLayerConfigs : nativeptr<VkVideoEncodeRateControlLayerInfoKHR>

            new(pNext : nativeint, flags : VkVideoEncodeRateControlFlagsKHR, rateControlMode : VkVideoEncodeRateControlModeFlagsKHR, layerCount : byte, pLayerConfigs : nativeptr<VkVideoEncodeRateControlLayerInfoKHR>) =
                {
                    sType = 1000299001u
                    pNext = pNext
                    flags = flags
                    rateControlMode = rateControlMode
                    layerCount = layerCount
                    pLayerConfigs = pLayerConfigs
                }

            new(flags : VkVideoEncodeRateControlFlagsKHR, rateControlMode : VkVideoEncodeRateControlModeFlagsKHR, layerCount : byte, pLayerConfigs : nativeptr<VkVideoEncodeRateControlLayerInfoKHR>) =
                VkVideoEncodeRateControlInfoKHR(Unchecked.defaultof<nativeint>, flags, rateControlMode, layerCount, pLayerConfigs)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeRateControlFlagsKHR> && x.rateControlMode = Unchecked.defaultof<VkVideoEncodeRateControlModeFlagsKHR> && x.layerCount = Unchecked.defaultof<byte> && x.pLayerConfigs = Unchecked.defaultof<nativeptr<VkVideoEncodeRateControlLayerInfoKHR>>

            static member Empty =
                VkVideoEncodeRateControlInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeRateControlFlagsKHR>, Unchecked.defaultof<VkVideoEncodeRateControlModeFlagsKHR>, Unchecked.defaultof<byte>, Unchecked.defaultof<nativeptr<VkVideoEncodeRateControlLayerInfoKHR>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "rateControlMode = %A" x.rateControlMode
                    sprintf "layerCount = %A" x.layerCount
                    sprintf "pLayerConfigs = %A" x.pLayerConfigs
                ] |> sprintf "VkVideoEncodeRateControlInfoKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags2 with
              static member inline Access2VideoEncodeReadBitKhr = unbox<VkAccessFlags2> 0x00000020
              static member inline Access2VideoEncodeWriteBitKhr = unbox<VkAccessFlags2> 0x00000040
         type VkBufferUsageFlags with
              static member inline VideoEncodeDstBitKhr = unbox<VkBufferUsageFlags> 0x00008000
              static member inline VideoEncodeSrcBitKhr = unbox<VkBufferUsageFlags> 0x00010000
         type VkFormatFeatureFlags with
              static member inline VideoEncodeInputBitKhr = unbox<VkFormatFeatureFlags> 0x08000000
              static member inline VideoEncodeDpbBitKhr = unbox<VkFormatFeatureFlags> 0x10000000
         type VkImageLayout with
              static member inline VideoEncodeDstKhr = unbox<VkImageLayout> 1000299000
              static member inline VideoEncodeSrcKhr = unbox<VkImageLayout> 1000299001
              static member inline VideoEncodeDpbKhr = unbox<VkImageLayout> 1000299002
         type VkImageUsageFlags with
              static member inline VideoEncodeDstBitKhr = unbox<VkImageUsageFlags> 0x00002000
              static member inline VideoEncodeSrcBitKhr = unbox<VkImageUsageFlags> 0x00004000
              static member inline VideoEncodeDpbBitKhr = unbox<VkImageUsageFlags> 0x00008000
         type VkPipelineStageFlags2 with
              static member inline PipelineStage2VideoEncodeBitKhr = unbox<VkPipelineStageFlags2> 0x08000000
         type VkQueryType with
              static member inline VideoEncodeBitstreamBufferRangeKhr = unbox<VkQueryType> 1000299000
         type VkQueueFlags with
              static member inline VideoEncodeBitKhr = unbox<VkQueueFlags> 0x00000040

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdEncodeVideoKHRDel = delegate of VkCommandBuffer * nativeptr<VkVideoEncodeInfoKHR> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRVideoEncodeQueue")
            static let s_vkCmdEncodeVideoKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdEncodeVideoKHRDel> "vkCmdEncodeVideoKHR"
            static do Report.End(3) |> ignore
            static member vkCmdEncodeVideoKHR = s_vkCmdEncodeVideoKHRDel
        let vkCmdEncodeVideoKHR(commandBuffer : VkCommandBuffer, pEncodeInfo : nativeptr<VkVideoEncodeInfoKHR>) = Loader<unit>.vkCmdEncodeVideoKHR.Invoke(commandBuffer, pEncodeInfo)

    module KHRFormatFeatureFlags2 =
        [<AutoOpen>]
        module EnumExtensions =
             type VkFormatFeatureFlags2 with
                  static member inline FormatFeature2VideoEncodeInputBitKhr = unbox<VkFormatFeatureFlags2> 0x08000000
                  static member inline FormatFeature2VideoEncodeDpbBitKhr = unbox<VkFormatFeatureFlags2> 0x10000000


module EXTVideoEncodeH264 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRSynchronization2
    open KHRVideoEncodeQueue
    open KHRVideoQueue
    let Name = "VK_EXT_video_encode_h264"
    let Number = 39

    let Required = [ KHRVideoEncodeQueue.Name ]


    [<Flags>]
    type VkVideoEncodeH264CapabilityFlagsEXT =
        | All = 33554431
        | None = 0
        | Direct8x8InferenceEnabledBit = 0x00000001
        | Direct8x8InferenceDisabledBit = 0x00000002
        | SeparateColourPlaneBit = 0x00000004
        | QpprimeYZeroTransformBypassBit = 0x00000008
        | ScalingListsBit = 0x00000010
        | HrdComplianceBit = 0x00000020
        | ChromaQpOffsetBit = 0x00000040
        | SecondChromaQpOffsetBit = 0x00000080
        | PicInitQpMinus26Bit = 0x00000100
        | WeightedPredBit = 0x00000200
        | WeightedBipredExplicitBit = 0x00000400
        | WeightedBipredImplicitBit = 0x00000800
        | WeightedPredNoTableBit = 0x00001000
        | Transform8x8Bit = 0x00002000
        | CabacBit = 0x00004000
        | CavlcBit = 0x00008000
        | DeblockingFilterDisabledBit = 0x00010000
        | DeblockingFilterEnabledBit = 0x00020000
        | DeblockingFilterPartialBit = 0x00040000
        | DisableDirectSpatialMvPredBit = 0x00080000
        | MultipleSlicePerFrameBit = 0x00100000
        | SliceMbCountBit = 0x00200000
        | RowUnalignedSliceBit = 0x00400000
        | DifferentSliceTypeBit = 0x00800000
        | BFrameInL1ListBit = 0x01000000

    [<Flags>]
    type VkVideoEncodeH264InputModeFlagsEXT =
        | All = 7
        | None = 0
        | FrameBit = 0x00000001
        | SliceBit = 0x00000002
        | NonVclBit = 0x00000004

    [<Flags>]
    type VkVideoEncodeH264OutputModeFlagsEXT =
        | All = 7
        | None = 0
        | FrameBit = 0x00000001
        | SliceBit = 0x00000002
        | NonVclBit = 0x00000004

    [<Flags>]
    type VkVideoEncodeH264RateControlStructureFlagsEXT =
        | All = 3
        | Unknown = 0
        | FlatBit = 0x00000001
        | DyadicBit = 0x00000002


    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264CapabilitiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkVideoEncodeH264CapabilityFlagsEXT
            val mutable public inputModeFlags : VkVideoEncodeH264InputModeFlagsEXT
            val mutable public outputModeFlags : VkVideoEncodeH264OutputModeFlagsEXT
            val mutable public maxPPictureL0ReferenceCount : byte
            val mutable public maxBPictureL0ReferenceCount : byte
            val mutable public maxL1ReferenceCount : byte
            val mutable public motionVectorsOverPicBoundariesFlag : VkBool32
            val mutable public maxBytesPerPicDenom : uint32
            val mutable public maxBitsPerMbDenom : uint32
            val mutable public log2MaxMvLengthHorizontal : uint32
            val mutable public log2MaxMvLengthVertical : uint32

            new(pNext : nativeint, flags : VkVideoEncodeH264CapabilityFlagsEXT, inputModeFlags : VkVideoEncodeH264InputModeFlagsEXT, outputModeFlags : VkVideoEncodeH264OutputModeFlagsEXT, maxPPictureL0ReferenceCount : byte, maxBPictureL0ReferenceCount : byte, maxL1ReferenceCount : byte, motionVectorsOverPicBoundariesFlag : VkBool32, maxBytesPerPicDenom : uint32, maxBitsPerMbDenom : uint32, log2MaxMvLengthHorizontal : uint32, log2MaxMvLengthVertical : uint32) =
                {
                    sType = 1000038000u
                    pNext = pNext
                    flags = flags
                    inputModeFlags = inputModeFlags
                    outputModeFlags = outputModeFlags
                    maxPPictureL0ReferenceCount = maxPPictureL0ReferenceCount
                    maxBPictureL0ReferenceCount = maxBPictureL0ReferenceCount
                    maxL1ReferenceCount = maxL1ReferenceCount
                    motionVectorsOverPicBoundariesFlag = motionVectorsOverPicBoundariesFlag
                    maxBytesPerPicDenom = maxBytesPerPicDenom
                    maxBitsPerMbDenom = maxBitsPerMbDenom
                    log2MaxMvLengthHorizontal = log2MaxMvLengthHorizontal
                    log2MaxMvLengthVertical = log2MaxMvLengthVertical
                }

            new(flags : VkVideoEncodeH264CapabilityFlagsEXT, inputModeFlags : VkVideoEncodeH264InputModeFlagsEXT, outputModeFlags : VkVideoEncodeH264OutputModeFlagsEXT, maxPPictureL0ReferenceCount : byte, maxBPictureL0ReferenceCount : byte, maxL1ReferenceCount : byte, motionVectorsOverPicBoundariesFlag : VkBool32, maxBytesPerPicDenom : uint32, maxBitsPerMbDenom : uint32, log2MaxMvLengthHorizontal : uint32, log2MaxMvLengthVertical : uint32) =
                VkVideoEncodeH264CapabilitiesEXT(Unchecked.defaultof<nativeint>, flags, inputModeFlags, outputModeFlags, maxPPictureL0ReferenceCount, maxBPictureL0ReferenceCount, maxL1ReferenceCount, motionVectorsOverPicBoundariesFlag, maxBytesPerPicDenom, maxBitsPerMbDenom, log2MaxMvLengthHorizontal, log2MaxMvLengthVertical)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeH264CapabilityFlagsEXT> && x.inputModeFlags = Unchecked.defaultof<VkVideoEncodeH264InputModeFlagsEXT> && x.outputModeFlags = Unchecked.defaultof<VkVideoEncodeH264OutputModeFlagsEXT> && x.maxPPictureL0ReferenceCount = Unchecked.defaultof<byte> && x.maxBPictureL0ReferenceCount = Unchecked.defaultof<byte> && x.maxL1ReferenceCount = Unchecked.defaultof<byte> && x.motionVectorsOverPicBoundariesFlag = Unchecked.defaultof<VkBool32> && x.maxBytesPerPicDenom = Unchecked.defaultof<uint32> && x.maxBitsPerMbDenom = Unchecked.defaultof<uint32> && x.log2MaxMvLengthHorizontal = Unchecked.defaultof<uint32> && x.log2MaxMvLengthVertical = Unchecked.defaultof<uint32>

            static member Empty =
                VkVideoEncodeH264CapabilitiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeH264CapabilityFlagsEXT>, Unchecked.defaultof<VkVideoEncodeH264InputModeFlagsEXT>, Unchecked.defaultof<VkVideoEncodeH264OutputModeFlagsEXT>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "inputModeFlags = %A" x.inputModeFlags
                    sprintf "outputModeFlags = %A" x.outputModeFlags
                    sprintf "maxPPictureL0ReferenceCount = %A" x.maxPPictureL0ReferenceCount
                    sprintf "maxBPictureL0ReferenceCount = %A" x.maxBPictureL0ReferenceCount
                    sprintf "maxL1ReferenceCount = %A" x.maxL1ReferenceCount
                    sprintf "motionVectorsOverPicBoundariesFlag = %A" x.motionVectorsOverPicBoundariesFlag
                    sprintf "maxBytesPerPicDenom = %A" x.maxBytesPerPicDenom
                    sprintf "maxBitsPerMbDenom = %A" x.maxBitsPerMbDenom
                    sprintf "log2MaxMvLengthHorizontal = %A" x.log2MaxMvLengthHorizontal
                    sprintf "log2MaxMvLengthVertical = %A" x.log2MaxMvLengthVertical
                ] |> sprintf "VkVideoEncodeH264CapabilitiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264DpbSlotInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public slotIndex : int8
            val mutable public pStdReferenceInfo : nativeptr<nativeint>

            new(pNext : nativeint, slotIndex : int8, pStdReferenceInfo : nativeptr<nativeint>) =
                {
                    sType = 1000038004u
                    pNext = pNext
                    slotIndex = slotIndex
                    pStdReferenceInfo = pStdReferenceInfo
                }

            new(slotIndex : int8, pStdReferenceInfo : nativeptr<nativeint>) =
                VkVideoEncodeH264DpbSlotInfoEXT(Unchecked.defaultof<nativeint>, slotIndex, pStdReferenceInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.slotIndex = Unchecked.defaultof<int8> && x.pStdReferenceInfo = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoEncodeH264DpbSlotInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<int8>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "slotIndex = %A" x.slotIndex
                    sprintf "pStdReferenceInfo = %A" x.pStdReferenceInfo
                ] |> sprintf "VkVideoEncodeH264DpbSlotInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264EmitPictureParametersEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public spsId : byte
            val mutable public emitSpsEnable : VkBool32
            val mutable public ppsIdEntryCount : uint32
            val mutable public ppsIdEntries : nativeptr<byte>

            new(pNext : nativeint, spsId : byte, emitSpsEnable : VkBool32, ppsIdEntryCount : uint32, ppsIdEntries : nativeptr<byte>) =
                {
                    sType = 1000038006u
                    pNext = pNext
                    spsId = spsId
                    emitSpsEnable = emitSpsEnable
                    ppsIdEntryCount = ppsIdEntryCount
                    ppsIdEntries = ppsIdEntries
                }

            new(spsId : byte, emitSpsEnable : VkBool32, ppsIdEntryCount : uint32, ppsIdEntries : nativeptr<byte>) =
                VkVideoEncodeH264EmitPictureParametersEXT(Unchecked.defaultof<nativeint>, spsId, emitSpsEnable, ppsIdEntryCount, ppsIdEntries)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.spsId = Unchecked.defaultof<byte> && x.emitSpsEnable = Unchecked.defaultof<VkBool32> && x.ppsIdEntryCount = Unchecked.defaultof<uint32> && x.ppsIdEntries = Unchecked.defaultof<nativeptr<byte>>

            static member Empty =
                VkVideoEncodeH264EmitPictureParametersEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<byte>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<byte>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "spsId = %A" x.spsId
                    sprintf "emitSpsEnable = %A" x.emitSpsEnable
                    sprintf "ppsIdEntryCount = %A" x.ppsIdEntryCount
                    sprintf "ppsIdEntries = %A" x.ppsIdEntries
                ] |> sprintf "VkVideoEncodeH264EmitPictureParametersEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264FrameSizeEXT =
        struct
            val mutable public frameISize : uint32
            val mutable public framePSize : uint32
            val mutable public frameBSize : uint32

            new(frameISize : uint32, framePSize : uint32, frameBSize : uint32) =
                {
                    frameISize = frameISize
                    framePSize = framePSize
                    frameBSize = frameBSize
                }

            member x.IsEmpty =
                x.frameISize = Unchecked.defaultof<uint32> && x.framePSize = Unchecked.defaultof<uint32> && x.frameBSize = Unchecked.defaultof<uint32>

            static member Empty =
                VkVideoEncodeH264FrameSizeEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "frameISize = %A" x.frameISize
                    sprintf "framePSize = %A" x.framePSize
                    sprintf "frameBSize = %A" x.frameBSize
                ] |> sprintf "VkVideoEncodeH264FrameSizeEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264ReferenceListsEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public referenceList0EntryCount : byte
            val mutable public pReferenceList0Entries : nativeptr<VkVideoEncodeH264DpbSlotInfoEXT>
            val mutable public referenceList1EntryCount : byte
            val mutable public pReferenceList1Entries : nativeptr<VkVideoEncodeH264DpbSlotInfoEXT>
            val mutable public pMemMgmtCtrlOperations : nativeptr<nativeint>

            new(pNext : nativeint, referenceList0EntryCount : byte, pReferenceList0Entries : nativeptr<VkVideoEncodeH264DpbSlotInfoEXT>, referenceList1EntryCount : byte, pReferenceList1Entries : nativeptr<VkVideoEncodeH264DpbSlotInfoEXT>, pMemMgmtCtrlOperations : nativeptr<nativeint>) =
                {
                    sType = 1000038010u
                    pNext = pNext
                    referenceList0EntryCount = referenceList0EntryCount
                    pReferenceList0Entries = pReferenceList0Entries
                    referenceList1EntryCount = referenceList1EntryCount
                    pReferenceList1Entries = pReferenceList1Entries
                    pMemMgmtCtrlOperations = pMemMgmtCtrlOperations
                }

            new(referenceList0EntryCount : byte, pReferenceList0Entries : nativeptr<VkVideoEncodeH264DpbSlotInfoEXT>, referenceList1EntryCount : byte, pReferenceList1Entries : nativeptr<VkVideoEncodeH264DpbSlotInfoEXT>, pMemMgmtCtrlOperations : nativeptr<nativeint>) =
                VkVideoEncodeH264ReferenceListsEXT(Unchecked.defaultof<nativeint>, referenceList0EntryCount, pReferenceList0Entries, referenceList1EntryCount, pReferenceList1Entries, pMemMgmtCtrlOperations)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.referenceList0EntryCount = Unchecked.defaultof<byte> && x.pReferenceList0Entries = Unchecked.defaultof<nativeptr<VkVideoEncodeH264DpbSlotInfoEXT>> && x.referenceList1EntryCount = Unchecked.defaultof<byte> && x.pReferenceList1Entries = Unchecked.defaultof<nativeptr<VkVideoEncodeH264DpbSlotInfoEXT>> && x.pMemMgmtCtrlOperations = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoEncodeH264ReferenceListsEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<byte>, Unchecked.defaultof<nativeptr<VkVideoEncodeH264DpbSlotInfoEXT>>, Unchecked.defaultof<byte>, Unchecked.defaultof<nativeptr<VkVideoEncodeH264DpbSlotInfoEXT>>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "referenceList0EntryCount = %A" x.referenceList0EntryCount
                    sprintf "pReferenceList0Entries = %A" x.pReferenceList0Entries
                    sprintf "referenceList1EntryCount = %A" x.referenceList1EntryCount
                    sprintf "pReferenceList1Entries = %A" x.pReferenceList1Entries
                    sprintf "pMemMgmtCtrlOperations = %A" x.pMemMgmtCtrlOperations
                ] |> sprintf "VkVideoEncodeH264ReferenceListsEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264NaluSliceEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public mbCount : uint32
            val mutable public pReferenceFinalLists : nativeptr<VkVideoEncodeH264ReferenceListsEXT>
            val mutable public pSliceHeaderStd : nativeptr<nativeint>

            new(pNext : nativeint, mbCount : uint32, pReferenceFinalLists : nativeptr<VkVideoEncodeH264ReferenceListsEXT>, pSliceHeaderStd : nativeptr<nativeint>) =
                {
                    sType = 1000038005u
                    pNext = pNext
                    mbCount = mbCount
                    pReferenceFinalLists = pReferenceFinalLists
                    pSliceHeaderStd = pSliceHeaderStd
                }

            new(mbCount : uint32, pReferenceFinalLists : nativeptr<VkVideoEncodeH264ReferenceListsEXT>, pSliceHeaderStd : nativeptr<nativeint>) =
                VkVideoEncodeH264NaluSliceEXT(Unchecked.defaultof<nativeint>, mbCount, pReferenceFinalLists, pSliceHeaderStd)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.mbCount = Unchecked.defaultof<uint32> && x.pReferenceFinalLists = Unchecked.defaultof<nativeptr<VkVideoEncodeH264ReferenceListsEXT>> && x.pSliceHeaderStd = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoEncodeH264NaluSliceEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoEncodeH264ReferenceListsEXT>>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "mbCount = %A" x.mbCount
                    sprintf "pReferenceFinalLists = %A" x.pReferenceFinalLists
                    sprintf "pSliceHeaderStd = %A" x.pSliceHeaderStd
                ] |> sprintf "VkVideoEncodeH264NaluSliceEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264ProfileEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stdProfileIdc : nativeint

            new(pNext : nativeint, stdProfileIdc : nativeint) =
                {
                    sType = 1000038007u
                    pNext = pNext
                    stdProfileIdc = stdProfileIdc
                }

            new(stdProfileIdc : nativeint) =
                VkVideoEncodeH264ProfileEXT(Unchecked.defaultof<nativeint>, stdProfileIdc)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stdProfileIdc = Unchecked.defaultof<nativeint>

            static member Empty =
                VkVideoEncodeH264ProfileEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "stdProfileIdc = %A" x.stdProfileIdc
                ] |> sprintf "VkVideoEncodeH264ProfileEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264QpEXT =
        struct
            val mutable public qpI : int
            val mutable public qpP : int
            val mutable public qpB : int

            new(qpI : int, qpP : int, qpB : int) =
                {
                    qpI = qpI
                    qpP = qpP
                    qpB = qpB
                }

            member x.IsEmpty =
                x.qpI = Unchecked.defaultof<int> && x.qpP = Unchecked.defaultof<int> && x.qpB = Unchecked.defaultof<int>

            static member Empty =
                VkVideoEncodeH264QpEXT(Unchecked.defaultof<int>, Unchecked.defaultof<int>, Unchecked.defaultof<int>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "qpI = %A" x.qpI
                    sprintf "qpP = %A" x.qpP
                    sprintf "qpB = %A" x.qpB
                ] |> sprintf "VkVideoEncodeH264QpEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264RateControlInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public gopFrameCount : uint32
            val mutable public idrPeriod : uint32
            val mutable public consecutiveBFrameCount : uint32
            val mutable public rateControlStructure : VkVideoEncodeH264RateControlStructureFlagsEXT
            val mutable public temporalLayerCount : byte

            new(pNext : nativeint, gopFrameCount : uint32, idrPeriod : uint32, consecutiveBFrameCount : uint32, rateControlStructure : VkVideoEncodeH264RateControlStructureFlagsEXT, temporalLayerCount : byte) =
                {
                    sType = 1000038008u
                    pNext = pNext
                    gopFrameCount = gopFrameCount
                    idrPeriod = idrPeriod
                    consecutiveBFrameCount = consecutiveBFrameCount
                    rateControlStructure = rateControlStructure
                    temporalLayerCount = temporalLayerCount
                }

            new(gopFrameCount : uint32, idrPeriod : uint32, consecutiveBFrameCount : uint32, rateControlStructure : VkVideoEncodeH264RateControlStructureFlagsEXT, temporalLayerCount : byte) =
                VkVideoEncodeH264RateControlInfoEXT(Unchecked.defaultof<nativeint>, gopFrameCount, idrPeriod, consecutiveBFrameCount, rateControlStructure, temporalLayerCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.gopFrameCount = Unchecked.defaultof<uint32> && x.idrPeriod = Unchecked.defaultof<uint32> && x.consecutiveBFrameCount = Unchecked.defaultof<uint32> && x.rateControlStructure = Unchecked.defaultof<VkVideoEncodeH264RateControlStructureFlagsEXT> && x.temporalLayerCount = Unchecked.defaultof<byte>

            static member Empty =
                VkVideoEncodeH264RateControlInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkVideoEncodeH264RateControlStructureFlagsEXT>, Unchecked.defaultof<byte>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "gopFrameCount = %A" x.gopFrameCount
                    sprintf "idrPeriod = %A" x.idrPeriod
                    sprintf "consecutiveBFrameCount = %A" x.consecutiveBFrameCount
                    sprintf "rateControlStructure = %A" x.rateControlStructure
                    sprintf "temporalLayerCount = %A" x.temporalLayerCount
                ] |> sprintf "VkVideoEncodeH264RateControlInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264RateControlLayerInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public temporalLayerId : byte
            val mutable public useInitialRcQp : VkBool32
            val mutable public initialRcQp : VkVideoEncodeH264QpEXT
            val mutable public useMinQp : VkBool32
            val mutable public minQp : VkVideoEncodeH264QpEXT
            val mutable public useMaxQp : VkBool32
            val mutable public maxQp : VkVideoEncodeH264QpEXT
            val mutable public useMaxFrameSize : VkBool32
            val mutable public maxFrameSize : VkVideoEncodeH264FrameSizeEXT

            new(pNext : nativeint, temporalLayerId : byte, useInitialRcQp : VkBool32, initialRcQp : VkVideoEncodeH264QpEXT, useMinQp : VkBool32, minQp : VkVideoEncodeH264QpEXT, useMaxQp : VkBool32, maxQp : VkVideoEncodeH264QpEXT, useMaxFrameSize : VkBool32, maxFrameSize : VkVideoEncodeH264FrameSizeEXT) =
                {
                    sType = 1000038009u
                    pNext = pNext
                    temporalLayerId = temporalLayerId
                    useInitialRcQp = useInitialRcQp
                    initialRcQp = initialRcQp
                    useMinQp = useMinQp
                    minQp = minQp
                    useMaxQp = useMaxQp
                    maxQp = maxQp
                    useMaxFrameSize = useMaxFrameSize
                    maxFrameSize = maxFrameSize
                }

            new(temporalLayerId : byte, useInitialRcQp : VkBool32, initialRcQp : VkVideoEncodeH264QpEXT, useMinQp : VkBool32, minQp : VkVideoEncodeH264QpEXT, useMaxQp : VkBool32, maxQp : VkVideoEncodeH264QpEXT, useMaxFrameSize : VkBool32, maxFrameSize : VkVideoEncodeH264FrameSizeEXT) =
                VkVideoEncodeH264RateControlLayerInfoEXT(Unchecked.defaultof<nativeint>, temporalLayerId, useInitialRcQp, initialRcQp, useMinQp, minQp, useMaxQp, maxQp, useMaxFrameSize, maxFrameSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.temporalLayerId = Unchecked.defaultof<byte> && x.useInitialRcQp = Unchecked.defaultof<VkBool32> && x.initialRcQp = Unchecked.defaultof<VkVideoEncodeH264QpEXT> && x.useMinQp = Unchecked.defaultof<VkBool32> && x.minQp = Unchecked.defaultof<VkVideoEncodeH264QpEXT> && x.useMaxQp = Unchecked.defaultof<VkBool32> && x.maxQp = Unchecked.defaultof<VkVideoEncodeH264QpEXT> && x.useMaxFrameSize = Unchecked.defaultof<VkBool32> && x.maxFrameSize = Unchecked.defaultof<VkVideoEncodeH264FrameSizeEXT>

            static member Empty =
                VkVideoEncodeH264RateControlLayerInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<byte>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH264QpEXT>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH264QpEXT>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH264QpEXT>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH264FrameSizeEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "temporalLayerId = %A" x.temporalLayerId
                    sprintf "useInitialRcQp = %A" x.useInitialRcQp
                    sprintf "initialRcQp = %A" x.initialRcQp
                    sprintf "useMinQp = %A" x.useMinQp
                    sprintf "minQp = %A" x.minQp
                    sprintf "useMaxQp = %A" x.useMaxQp
                    sprintf "maxQp = %A" x.maxQp
                    sprintf "useMaxFrameSize = %A" x.useMaxFrameSize
                    sprintf "maxFrameSize = %A" x.maxFrameSize
                ] |> sprintf "VkVideoEncodeH264RateControlLayerInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264SessionParametersAddInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public spsStdCount : uint32
            val mutable public pSpsStd : nativeptr<nativeint>
            val mutable public ppsStdCount : uint32
            val mutable public pPpsStd : nativeptr<nativeint>

            new(pNext : nativeint, spsStdCount : uint32, pSpsStd : nativeptr<nativeint>, ppsStdCount : uint32, pPpsStd : nativeptr<nativeint>) =
                {
                    sType = 1000038002u
                    pNext = pNext
                    spsStdCount = spsStdCount
                    pSpsStd = pSpsStd
                    ppsStdCount = ppsStdCount
                    pPpsStd = pPpsStd
                }

            new(spsStdCount : uint32, pSpsStd : nativeptr<nativeint>, ppsStdCount : uint32, pPpsStd : nativeptr<nativeint>) =
                VkVideoEncodeH264SessionParametersAddInfoEXT(Unchecked.defaultof<nativeint>, spsStdCount, pSpsStd, ppsStdCount, pPpsStd)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.spsStdCount = Unchecked.defaultof<uint32> && x.pSpsStd = Unchecked.defaultof<nativeptr<nativeint>> && x.ppsStdCount = Unchecked.defaultof<uint32> && x.pPpsStd = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoEncodeH264SessionParametersAddInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "spsStdCount = %A" x.spsStdCount
                    sprintf "pSpsStd = %A" x.pSpsStd
                    sprintf "ppsStdCount = %A" x.ppsStdCount
                    sprintf "pPpsStd = %A" x.pPpsStd
                ] |> sprintf "VkVideoEncodeH264SessionParametersAddInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264SessionParametersCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxSpsStdCount : uint32
            val mutable public maxPpsStdCount : uint32
            val mutable public pParametersAddInfo : nativeptr<VkVideoEncodeH264SessionParametersAddInfoEXT>

            new(pNext : nativeint, maxSpsStdCount : uint32, maxPpsStdCount : uint32, pParametersAddInfo : nativeptr<VkVideoEncodeH264SessionParametersAddInfoEXT>) =
                {
                    sType = 1000038001u
                    pNext = pNext
                    maxSpsStdCount = maxSpsStdCount
                    maxPpsStdCount = maxPpsStdCount
                    pParametersAddInfo = pParametersAddInfo
                }

            new(maxSpsStdCount : uint32, maxPpsStdCount : uint32, pParametersAddInfo : nativeptr<VkVideoEncodeH264SessionParametersAddInfoEXT>) =
                VkVideoEncodeH264SessionParametersCreateInfoEXT(Unchecked.defaultof<nativeint>, maxSpsStdCount, maxPpsStdCount, pParametersAddInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxSpsStdCount = Unchecked.defaultof<uint32> && x.maxPpsStdCount = Unchecked.defaultof<uint32> && x.pParametersAddInfo = Unchecked.defaultof<nativeptr<VkVideoEncodeH264SessionParametersAddInfoEXT>>

            static member Empty =
                VkVideoEncodeH264SessionParametersCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoEncodeH264SessionParametersAddInfoEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxSpsStdCount = %A" x.maxSpsStdCount
                    sprintf "maxPpsStdCount = %A" x.maxPpsStdCount
                    sprintf "pParametersAddInfo = %A" x.pParametersAddInfo
                ] |> sprintf "VkVideoEncodeH264SessionParametersCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH264VclFrameInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pReferenceFinalLists : nativeptr<VkVideoEncodeH264ReferenceListsEXT>
            val mutable public naluSliceEntryCount : uint32
            val mutable public pNaluSliceEntries : nativeptr<VkVideoEncodeH264NaluSliceEXT>
            val mutable public pCurrentPictureInfo : nativeptr<nativeint>

            new(pNext : nativeint, pReferenceFinalLists : nativeptr<VkVideoEncodeH264ReferenceListsEXT>, naluSliceEntryCount : uint32, pNaluSliceEntries : nativeptr<VkVideoEncodeH264NaluSliceEXT>, pCurrentPictureInfo : nativeptr<nativeint>) =
                {
                    sType = 1000038003u
                    pNext = pNext
                    pReferenceFinalLists = pReferenceFinalLists
                    naluSliceEntryCount = naluSliceEntryCount
                    pNaluSliceEntries = pNaluSliceEntries
                    pCurrentPictureInfo = pCurrentPictureInfo
                }

            new(pReferenceFinalLists : nativeptr<VkVideoEncodeH264ReferenceListsEXT>, naluSliceEntryCount : uint32, pNaluSliceEntries : nativeptr<VkVideoEncodeH264NaluSliceEXT>, pCurrentPictureInfo : nativeptr<nativeint>) =
                VkVideoEncodeH264VclFrameInfoEXT(Unchecked.defaultof<nativeint>, pReferenceFinalLists, naluSliceEntryCount, pNaluSliceEntries, pCurrentPictureInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pReferenceFinalLists = Unchecked.defaultof<nativeptr<VkVideoEncodeH264ReferenceListsEXT>> && x.naluSliceEntryCount = Unchecked.defaultof<uint32> && x.pNaluSliceEntries = Unchecked.defaultof<nativeptr<VkVideoEncodeH264NaluSliceEXT>> && x.pCurrentPictureInfo = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoEncodeH264VclFrameInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkVideoEncodeH264ReferenceListsEXT>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoEncodeH264NaluSliceEXT>>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pReferenceFinalLists = %A" x.pReferenceFinalLists
                    sprintf "naluSliceEntryCount = %A" x.naluSliceEntryCount
                    sprintf "pNaluSliceEntries = %A" x.pNaluSliceEntries
                    sprintf "pCurrentPictureInfo = %A" x.pCurrentPictureInfo
                ] |> sprintf "VkVideoEncodeH264VclFrameInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkVideoCodecOperationFlagsKHR with
              static member inline EncodeH264BitExt = unbox<VkVideoCodecOperationFlagsKHR> 0x00010000


module EXTVideoEncodeH265 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRSynchronization2
    open KHRVideoEncodeQueue
    open KHRVideoQueue
    let Name = "VK_EXT_video_encode_h265"
    let Number = 40

    let Required = [ KHRVideoEncodeQueue.Name ]


    [<Flags>]
    type VkVideoEncodeH265CapabilityFlagsEXT =
        | All = 67108863
        | None = 0
        | SeparateColourPlaneBit = 0x00000001
        | ScalingListsBit = 0x00000002
        | SampleAdaptiveOffsetEnabledBit = 0x00000004
        | PcmEnableBit = 0x00000008
        | SpsTemporalMvpEnabledBit = 0x00000010
        | HrdComplianceBit = 0x00000020
        | InitQpMinus26Bit = 0x00000040
        | Log2ParallelMergeLevelMinus2Bit = 0x00000080
        | SignDataHidingEnabledBit = 0x00000100
        | TransformSkipEnabledBit = 0x00000200
        | TransformSkipDisabledBit = 0x00000400
        | PpsSliceChromaQpOffsetsPresentBit = 0x00000800
        | WeightedPredBit = 0x00001000
        | WeightedBipredBit = 0x00002000
        | WeightedPredNoTableBit = 0x00004000
        | TransquantBypassEnabledBit = 0x00008000
        | EntropyCodingSyncEnabledBit = 0x00010000
        | DeblockingFilterOverrideEnabledBit = 0x00020000
        | MultipleTilePerFrameBit = 0x00040000
        | MultipleSlicePerTileBit = 0x00080000
        | MultipleTilePerSliceBit = 0x00100000
        | SliceSegmentCtbCountBit = 0x00200000
        | RowUnalignedSliceSegmentBit = 0x00400000
        | DependentSliceSegmentBit = 0x00800000
        | DifferentSliceTypeBit = 0x01000000
        | BFrameInL1ListBit = 0x02000000

    [<Flags>]
    type VkVideoEncodeH265InputModeFlagsEXT =
        | All = 7
        | None = 0
        | FrameBit = 0x00000001
        | SliceSegmentBit = 0x00000002
        | NonVclBit = 0x00000004

    [<Flags>]
    type VkVideoEncodeH265OutputModeFlagsEXT =
        | All = 7
        | None = 0
        | FrameBit = 0x00000001
        | SliceSegmentBit = 0x00000002
        | NonVclBit = 0x00000004

    [<Flags>]
    type VkVideoEncodeH265CtbSizeFlagsEXT =
        | All = 7
        | None = 0
        | D16Bit = 0x00000001
        | D32Bit = 0x00000002
        | D64Bit = 0x00000004

    [<Flags>]
    type VkVideoEncodeH265TransformBlockSizeFlagsEXT =
        | All = 15
        | None = 0
        | D4Bit = 0x00000001
        | D8Bit = 0x00000002
        | D16Bit = 0x00000004
        | D32Bit = 0x00000008

    [<Flags>]
    type VkVideoEncodeH265RateControlStructureFlagsEXT =
        | All = 3
        | Unknown = 0
        | FlatBit = 0x00000001
        | DyadicBit = 0x00000002


    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265CapabilitiesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkVideoEncodeH265CapabilityFlagsEXT
            val mutable public inputModeFlags : VkVideoEncodeH265InputModeFlagsEXT
            val mutable public outputModeFlags : VkVideoEncodeH265OutputModeFlagsEXT
            val mutable public ctbSizes : VkVideoEncodeH265CtbSizeFlagsEXT
            val mutable public transformBlockSizes : VkVideoEncodeH265TransformBlockSizeFlagsEXT
            val mutable public maxPPictureL0ReferenceCount : byte
            val mutable public maxBPictureL0ReferenceCount : byte
            val mutable public maxL1ReferenceCount : byte
            val mutable public maxSubLayersCount : byte
            val mutable public minLog2MinLumaCodingBlockSizeMinus3 : byte
            val mutable public maxLog2MinLumaCodingBlockSizeMinus3 : byte
            val mutable public minLog2MinLumaTransformBlockSizeMinus2 : byte
            val mutable public maxLog2MinLumaTransformBlockSizeMinus2 : byte
            val mutable public minMaxTransformHierarchyDepthInter : byte
            val mutable public maxMaxTransformHierarchyDepthInter : byte
            val mutable public minMaxTransformHierarchyDepthIntra : byte
            val mutable public maxMaxTransformHierarchyDepthIntra : byte
            val mutable public maxDiffCuQpDeltaDepth : byte
            val mutable public minMaxNumMergeCand : byte
            val mutable public maxMaxNumMergeCand : byte

            new(pNext : nativeint, flags : VkVideoEncodeH265CapabilityFlagsEXT, inputModeFlags : VkVideoEncodeH265InputModeFlagsEXT, outputModeFlags : VkVideoEncodeH265OutputModeFlagsEXT, ctbSizes : VkVideoEncodeH265CtbSizeFlagsEXT, transformBlockSizes : VkVideoEncodeH265TransformBlockSizeFlagsEXT, maxPPictureL0ReferenceCount : byte, maxBPictureL0ReferenceCount : byte, maxL1ReferenceCount : byte, maxSubLayersCount : byte, minLog2MinLumaCodingBlockSizeMinus3 : byte, maxLog2MinLumaCodingBlockSizeMinus3 : byte, minLog2MinLumaTransformBlockSizeMinus2 : byte, maxLog2MinLumaTransformBlockSizeMinus2 : byte, minMaxTransformHierarchyDepthInter : byte, maxMaxTransformHierarchyDepthInter : byte, minMaxTransformHierarchyDepthIntra : byte, maxMaxTransformHierarchyDepthIntra : byte, maxDiffCuQpDeltaDepth : byte, minMaxNumMergeCand : byte, maxMaxNumMergeCand : byte) =
                {
                    sType = 1000039000u
                    pNext = pNext
                    flags = flags
                    inputModeFlags = inputModeFlags
                    outputModeFlags = outputModeFlags
                    ctbSizes = ctbSizes
                    transformBlockSizes = transformBlockSizes
                    maxPPictureL0ReferenceCount = maxPPictureL0ReferenceCount
                    maxBPictureL0ReferenceCount = maxBPictureL0ReferenceCount
                    maxL1ReferenceCount = maxL1ReferenceCount
                    maxSubLayersCount = maxSubLayersCount
                    minLog2MinLumaCodingBlockSizeMinus3 = minLog2MinLumaCodingBlockSizeMinus3
                    maxLog2MinLumaCodingBlockSizeMinus3 = maxLog2MinLumaCodingBlockSizeMinus3
                    minLog2MinLumaTransformBlockSizeMinus2 = minLog2MinLumaTransformBlockSizeMinus2
                    maxLog2MinLumaTransformBlockSizeMinus2 = maxLog2MinLumaTransformBlockSizeMinus2
                    minMaxTransformHierarchyDepthInter = minMaxTransformHierarchyDepthInter
                    maxMaxTransformHierarchyDepthInter = maxMaxTransformHierarchyDepthInter
                    minMaxTransformHierarchyDepthIntra = minMaxTransformHierarchyDepthIntra
                    maxMaxTransformHierarchyDepthIntra = maxMaxTransformHierarchyDepthIntra
                    maxDiffCuQpDeltaDepth = maxDiffCuQpDeltaDepth
                    minMaxNumMergeCand = minMaxNumMergeCand
                    maxMaxNumMergeCand = maxMaxNumMergeCand
                }

            new(flags : VkVideoEncodeH265CapabilityFlagsEXT, inputModeFlags : VkVideoEncodeH265InputModeFlagsEXT, outputModeFlags : VkVideoEncodeH265OutputModeFlagsEXT, ctbSizes : VkVideoEncodeH265CtbSizeFlagsEXT, transformBlockSizes : VkVideoEncodeH265TransformBlockSizeFlagsEXT, maxPPictureL0ReferenceCount : byte, maxBPictureL0ReferenceCount : byte, maxL1ReferenceCount : byte, maxSubLayersCount : byte, minLog2MinLumaCodingBlockSizeMinus3 : byte, maxLog2MinLumaCodingBlockSizeMinus3 : byte, minLog2MinLumaTransformBlockSizeMinus2 : byte, maxLog2MinLumaTransformBlockSizeMinus2 : byte, minMaxTransformHierarchyDepthInter : byte, maxMaxTransformHierarchyDepthInter : byte, minMaxTransformHierarchyDepthIntra : byte, maxMaxTransformHierarchyDepthIntra : byte, maxDiffCuQpDeltaDepth : byte, minMaxNumMergeCand : byte, maxMaxNumMergeCand : byte) =
                VkVideoEncodeH265CapabilitiesEXT(Unchecked.defaultof<nativeint>, flags, inputModeFlags, outputModeFlags, ctbSizes, transformBlockSizes, maxPPictureL0ReferenceCount, maxBPictureL0ReferenceCount, maxL1ReferenceCount, maxSubLayersCount, minLog2MinLumaCodingBlockSizeMinus3, maxLog2MinLumaCodingBlockSizeMinus3, minLog2MinLumaTransformBlockSizeMinus2, maxLog2MinLumaTransformBlockSizeMinus2, minMaxTransformHierarchyDepthInter, maxMaxTransformHierarchyDepthInter, minMaxTransformHierarchyDepthIntra, maxMaxTransformHierarchyDepthIntra, maxDiffCuQpDeltaDepth, minMaxNumMergeCand, maxMaxNumMergeCand)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkVideoEncodeH265CapabilityFlagsEXT> && x.inputModeFlags = Unchecked.defaultof<VkVideoEncodeH265InputModeFlagsEXT> && x.outputModeFlags = Unchecked.defaultof<VkVideoEncodeH265OutputModeFlagsEXT> && x.ctbSizes = Unchecked.defaultof<VkVideoEncodeH265CtbSizeFlagsEXT> && x.transformBlockSizes = Unchecked.defaultof<VkVideoEncodeH265TransformBlockSizeFlagsEXT> && x.maxPPictureL0ReferenceCount = Unchecked.defaultof<byte> && x.maxBPictureL0ReferenceCount = Unchecked.defaultof<byte> && x.maxL1ReferenceCount = Unchecked.defaultof<byte> && x.maxSubLayersCount = Unchecked.defaultof<byte> && x.minLog2MinLumaCodingBlockSizeMinus3 = Unchecked.defaultof<byte> && x.maxLog2MinLumaCodingBlockSizeMinus3 = Unchecked.defaultof<byte> && x.minLog2MinLumaTransformBlockSizeMinus2 = Unchecked.defaultof<byte> && x.maxLog2MinLumaTransformBlockSizeMinus2 = Unchecked.defaultof<byte> && x.minMaxTransformHierarchyDepthInter = Unchecked.defaultof<byte> && x.maxMaxTransformHierarchyDepthInter = Unchecked.defaultof<byte> && x.minMaxTransformHierarchyDepthIntra = Unchecked.defaultof<byte> && x.maxMaxTransformHierarchyDepthIntra = Unchecked.defaultof<byte> && x.maxDiffCuQpDeltaDepth = Unchecked.defaultof<byte> && x.minMaxNumMergeCand = Unchecked.defaultof<byte> && x.maxMaxNumMergeCand = Unchecked.defaultof<byte>

            static member Empty =
                VkVideoEncodeH265CapabilitiesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkVideoEncodeH265CapabilityFlagsEXT>, Unchecked.defaultof<VkVideoEncodeH265InputModeFlagsEXT>, Unchecked.defaultof<VkVideoEncodeH265OutputModeFlagsEXT>, Unchecked.defaultof<VkVideoEncodeH265CtbSizeFlagsEXT>, Unchecked.defaultof<VkVideoEncodeH265TransformBlockSizeFlagsEXT>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "inputModeFlags = %A" x.inputModeFlags
                    sprintf "outputModeFlags = %A" x.outputModeFlags
                    sprintf "ctbSizes = %A" x.ctbSizes
                    sprintf "transformBlockSizes = %A" x.transformBlockSizes
                    sprintf "maxPPictureL0ReferenceCount = %A" x.maxPPictureL0ReferenceCount
                    sprintf "maxBPictureL0ReferenceCount = %A" x.maxBPictureL0ReferenceCount
                    sprintf "maxL1ReferenceCount = %A" x.maxL1ReferenceCount
                    sprintf "maxSubLayersCount = %A" x.maxSubLayersCount
                    sprintf "minLog2MinLumaCodingBlockSizeMinus3 = %A" x.minLog2MinLumaCodingBlockSizeMinus3
                    sprintf "maxLog2MinLumaCodingBlockSizeMinus3 = %A" x.maxLog2MinLumaCodingBlockSizeMinus3
                    sprintf "minLog2MinLumaTransformBlockSizeMinus2 = %A" x.minLog2MinLumaTransformBlockSizeMinus2
                    sprintf "maxLog2MinLumaTransformBlockSizeMinus2 = %A" x.maxLog2MinLumaTransformBlockSizeMinus2
                    sprintf "minMaxTransformHierarchyDepthInter = %A" x.minMaxTransformHierarchyDepthInter
                    sprintf "maxMaxTransformHierarchyDepthInter = %A" x.maxMaxTransformHierarchyDepthInter
                    sprintf "minMaxTransformHierarchyDepthIntra = %A" x.minMaxTransformHierarchyDepthIntra
                    sprintf "maxMaxTransformHierarchyDepthIntra = %A" x.maxMaxTransformHierarchyDepthIntra
                    sprintf "maxDiffCuQpDeltaDepth = %A" x.maxDiffCuQpDeltaDepth
                    sprintf "minMaxNumMergeCand = %A" x.minMaxNumMergeCand
                    sprintf "maxMaxNumMergeCand = %A" x.maxMaxNumMergeCand
                ] |> sprintf "VkVideoEncodeH265CapabilitiesEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265DpbSlotInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public slotIndex : int8
            val mutable public pStdReferenceInfo : nativeptr<nativeint>

            new(pNext : nativeint, slotIndex : int8, pStdReferenceInfo : nativeptr<nativeint>) =
                {
                    sType = 1000039004u
                    pNext = pNext
                    slotIndex = slotIndex
                    pStdReferenceInfo = pStdReferenceInfo
                }

            new(slotIndex : int8, pStdReferenceInfo : nativeptr<nativeint>) =
                VkVideoEncodeH265DpbSlotInfoEXT(Unchecked.defaultof<nativeint>, slotIndex, pStdReferenceInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.slotIndex = Unchecked.defaultof<int8> && x.pStdReferenceInfo = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoEncodeH265DpbSlotInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<int8>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "slotIndex = %A" x.slotIndex
                    sprintf "pStdReferenceInfo = %A" x.pStdReferenceInfo
                ] |> sprintf "VkVideoEncodeH265DpbSlotInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265EmitPictureParametersEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vpsId : byte
            val mutable public spsId : byte
            val mutable public emitVpsEnable : VkBool32
            val mutable public emitSpsEnable : VkBool32
            val mutable public ppsIdEntryCount : uint32
            val mutable public ppsIdEntries : nativeptr<byte>

            new(pNext : nativeint, vpsId : byte, spsId : byte, emitVpsEnable : VkBool32, emitSpsEnable : VkBool32, ppsIdEntryCount : uint32, ppsIdEntries : nativeptr<byte>) =
                {
                    sType = 1000039006u
                    pNext = pNext
                    vpsId = vpsId
                    spsId = spsId
                    emitVpsEnable = emitVpsEnable
                    emitSpsEnable = emitSpsEnable
                    ppsIdEntryCount = ppsIdEntryCount
                    ppsIdEntries = ppsIdEntries
                }

            new(vpsId : byte, spsId : byte, emitVpsEnable : VkBool32, emitSpsEnable : VkBool32, ppsIdEntryCount : uint32, ppsIdEntries : nativeptr<byte>) =
                VkVideoEncodeH265EmitPictureParametersEXT(Unchecked.defaultof<nativeint>, vpsId, spsId, emitVpsEnable, emitSpsEnable, ppsIdEntryCount, ppsIdEntries)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vpsId = Unchecked.defaultof<byte> && x.spsId = Unchecked.defaultof<byte> && x.emitVpsEnable = Unchecked.defaultof<VkBool32> && x.emitSpsEnable = Unchecked.defaultof<VkBool32> && x.ppsIdEntryCount = Unchecked.defaultof<uint32> && x.ppsIdEntries = Unchecked.defaultof<nativeptr<byte>>

            static member Empty =
                VkVideoEncodeH265EmitPictureParametersEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<byte>, Unchecked.defaultof<byte>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<byte>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "vpsId = %A" x.vpsId
                    sprintf "spsId = %A" x.spsId
                    sprintf "emitVpsEnable = %A" x.emitVpsEnable
                    sprintf "emitSpsEnable = %A" x.emitSpsEnable
                    sprintf "ppsIdEntryCount = %A" x.ppsIdEntryCount
                    sprintf "ppsIdEntries = %A" x.ppsIdEntries
                ] |> sprintf "VkVideoEncodeH265EmitPictureParametersEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265FrameSizeEXT =
        struct
            val mutable public frameISize : uint32
            val mutable public framePSize : uint32
            val mutable public frameBSize : uint32

            new(frameISize : uint32, framePSize : uint32, frameBSize : uint32) =
                {
                    frameISize = frameISize
                    framePSize = framePSize
                    frameBSize = frameBSize
                }

            member x.IsEmpty =
                x.frameISize = Unchecked.defaultof<uint32> && x.framePSize = Unchecked.defaultof<uint32> && x.frameBSize = Unchecked.defaultof<uint32>

            static member Empty =
                VkVideoEncodeH265FrameSizeEXT(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "frameISize = %A" x.frameISize
                    sprintf "framePSize = %A" x.framePSize
                    sprintf "frameBSize = %A" x.frameBSize
                ] |> sprintf "VkVideoEncodeH265FrameSizeEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265ReferenceListsEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public referenceList0EntryCount : byte
            val mutable public pReferenceList0Entries : nativeptr<VkVideoEncodeH265DpbSlotInfoEXT>
            val mutable public referenceList1EntryCount : byte
            val mutable public pReferenceList1Entries : nativeptr<VkVideoEncodeH265DpbSlotInfoEXT>
            val mutable public pReferenceModifications : nativeptr<nativeint>

            new(pNext : nativeint, referenceList0EntryCount : byte, pReferenceList0Entries : nativeptr<VkVideoEncodeH265DpbSlotInfoEXT>, referenceList1EntryCount : byte, pReferenceList1Entries : nativeptr<VkVideoEncodeH265DpbSlotInfoEXT>, pReferenceModifications : nativeptr<nativeint>) =
                {
                    sType = 1000039008u
                    pNext = pNext
                    referenceList0EntryCount = referenceList0EntryCount
                    pReferenceList0Entries = pReferenceList0Entries
                    referenceList1EntryCount = referenceList1EntryCount
                    pReferenceList1Entries = pReferenceList1Entries
                    pReferenceModifications = pReferenceModifications
                }

            new(referenceList0EntryCount : byte, pReferenceList0Entries : nativeptr<VkVideoEncodeH265DpbSlotInfoEXT>, referenceList1EntryCount : byte, pReferenceList1Entries : nativeptr<VkVideoEncodeH265DpbSlotInfoEXT>, pReferenceModifications : nativeptr<nativeint>) =
                VkVideoEncodeH265ReferenceListsEXT(Unchecked.defaultof<nativeint>, referenceList0EntryCount, pReferenceList0Entries, referenceList1EntryCount, pReferenceList1Entries, pReferenceModifications)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.referenceList0EntryCount = Unchecked.defaultof<byte> && x.pReferenceList0Entries = Unchecked.defaultof<nativeptr<VkVideoEncodeH265DpbSlotInfoEXT>> && x.referenceList1EntryCount = Unchecked.defaultof<byte> && x.pReferenceList1Entries = Unchecked.defaultof<nativeptr<VkVideoEncodeH265DpbSlotInfoEXT>> && x.pReferenceModifications = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoEncodeH265ReferenceListsEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<byte>, Unchecked.defaultof<nativeptr<VkVideoEncodeH265DpbSlotInfoEXT>>, Unchecked.defaultof<byte>, Unchecked.defaultof<nativeptr<VkVideoEncodeH265DpbSlotInfoEXT>>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "referenceList0EntryCount = %A" x.referenceList0EntryCount
                    sprintf "pReferenceList0Entries = %A" x.pReferenceList0Entries
                    sprintf "referenceList1EntryCount = %A" x.referenceList1EntryCount
                    sprintf "pReferenceList1Entries = %A" x.pReferenceList1Entries
                    sprintf "pReferenceModifications = %A" x.pReferenceModifications
                ] |> sprintf "VkVideoEncodeH265ReferenceListsEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265NaluSliceSegmentEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public ctbCount : uint32
            val mutable public pReferenceFinalLists : nativeptr<VkVideoEncodeH265ReferenceListsEXT>
            val mutable public pSliceSegmentHeaderStd : nativeptr<nativeint>

            new(pNext : nativeint, ctbCount : uint32, pReferenceFinalLists : nativeptr<VkVideoEncodeH265ReferenceListsEXT>, pSliceSegmentHeaderStd : nativeptr<nativeint>) =
                {
                    sType = 1000039005u
                    pNext = pNext
                    ctbCount = ctbCount
                    pReferenceFinalLists = pReferenceFinalLists
                    pSliceSegmentHeaderStd = pSliceSegmentHeaderStd
                }

            new(ctbCount : uint32, pReferenceFinalLists : nativeptr<VkVideoEncodeH265ReferenceListsEXT>, pSliceSegmentHeaderStd : nativeptr<nativeint>) =
                VkVideoEncodeH265NaluSliceSegmentEXT(Unchecked.defaultof<nativeint>, ctbCount, pReferenceFinalLists, pSliceSegmentHeaderStd)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.ctbCount = Unchecked.defaultof<uint32> && x.pReferenceFinalLists = Unchecked.defaultof<nativeptr<VkVideoEncodeH265ReferenceListsEXT>> && x.pSliceSegmentHeaderStd = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoEncodeH265NaluSliceSegmentEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoEncodeH265ReferenceListsEXT>>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "ctbCount = %A" x.ctbCount
                    sprintf "pReferenceFinalLists = %A" x.pReferenceFinalLists
                    sprintf "pSliceSegmentHeaderStd = %A" x.pSliceSegmentHeaderStd
                ] |> sprintf "VkVideoEncodeH265NaluSliceSegmentEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265ProfileEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stdProfileIdc : nativeint

            new(pNext : nativeint, stdProfileIdc : nativeint) =
                {
                    sType = 1000039007u
                    pNext = pNext
                    stdProfileIdc = stdProfileIdc
                }

            new(stdProfileIdc : nativeint) =
                VkVideoEncodeH265ProfileEXT(Unchecked.defaultof<nativeint>, stdProfileIdc)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stdProfileIdc = Unchecked.defaultof<nativeint>

            static member Empty =
                VkVideoEncodeH265ProfileEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "stdProfileIdc = %A" x.stdProfileIdc
                ] |> sprintf "VkVideoEncodeH265ProfileEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265QpEXT =
        struct
            val mutable public qpI : int
            val mutable public qpP : int
            val mutable public qpB : int

            new(qpI : int, qpP : int, qpB : int) =
                {
                    qpI = qpI
                    qpP = qpP
                    qpB = qpB
                }

            member x.IsEmpty =
                x.qpI = Unchecked.defaultof<int> && x.qpP = Unchecked.defaultof<int> && x.qpB = Unchecked.defaultof<int>

            static member Empty =
                VkVideoEncodeH265QpEXT(Unchecked.defaultof<int>, Unchecked.defaultof<int>, Unchecked.defaultof<int>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "qpI = %A" x.qpI
                    sprintf "qpP = %A" x.qpP
                    sprintf "qpB = %A" x.qpB
                ] |> sprintf "VkVideoEncodeH265QpEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265RateControlInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public gopFrameCount : uint32
            val mutable public idrPeriod : uint32
            val mutable public consecutiveBFrameCount : uint32
            val mutable public rateControlStructure : VkVideoEncodeH265RateControlStructureFlagsEXT
            val mutable public subLayerCount : byte

            new(pNext : nativeint, gopFrameCount : uint32, idrPeriod : uint32, consecutiveBFrameCount : uint32, rateControlStructure : VkVideoEncodeH265RateControlStructureFlagsEXT, subLayerCount : byte) =
                {
                    sType = 1000039009u
                    pNext = pNext
                    gopFrameCount = gopFrameCount
                    idrPeriod = idrPeriod
                    consecutiveBFrameCount = consecutiveBFrameCount
                    rateControlStructure = rateControlStructure
                    subLayerCount = subLayerCount
                }

            new(gopFrameCount : uint32, idrPeriod : uint32, consecutiveBFrameCount : uint32, rateControlStructure : VkVideoEncodeH265RateControlStructureFlagsEXT, subLayerCount : byte) =
                VkVideoEncodeH265RateControlInfoEXT(Unchecked.defaultof<nativeint>, gopFrameCount, idrPeriod, consecutiveBFrameCount, rateControlStructure, subLayerCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.gopFrameCount = Unchecked.defaultof<uint32> && x.idrPeriod = Unchecked.defaultof<uint32> && x.consecutiveBFrameCount = Unchecked.defaultof<uint32> && x.rateControlStructure = Unchecked.defaultof<VkVideoEncodeH265RateControlStructureFlagsEXT> && x.subLayerCount = Unchecked.defaultof<byte>

            static member Empty =
                VkVideoEncodeH265RateControlInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkVideoEncodeH265RateControlStructureFlagsEXT>, Unchecked.defaultof<byte>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "gopFrameCount = %A" x.gopFrameCount
                    sprintf "idrPeriod = %A" x.idrPeriod
                    sprintf "consecutiveBFrameCount = %A" x.consecutiveBFrameCount
                    sprintf "rateControlStructure = %A" x.rateControlStructure
                    sprintf "subLayerCount = %A" x.subLayerCount
                ] |> sprintf "VkVideoEncodeH265RateControlInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265RateControlLayerInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public temporalId : byte
            val mutable public useInitialRcQp : VkBool32
            val mutable public initialRcQp : VkVideoEncodeH265QpEXT
            val mutable public useMinQp : VkBool32
            val mutable public minQp : VkVideoEncodeH265QpEXT
            val mutable public useMaxQp : VkBool32
            val mutable public maxQp : VkVideoEncodeH265QpEXT
            val mutable public useMaxFrameSize : VkBool32
            val mutable public maxFrameSize : VkVideoEncodeH265FrameSizeEXT

            new(pNext : nativeint, temporalId : byte, useInitialRcQp : VkBool32, initialRcQp : VkVideoEncodeH265QpEXT, useMinQp : VkBool32, minQp : VkVideoEncodeH265QpEXT, useMaxQp : VkBool32, maxQp : VkVideoEncodeH265QpEXT, useMaxFrameSize : VkBool32, maxFrameSize : VkVideoEncodeH265FrameSizeEXT) =
                {
                    sType = 1000039010u
                    pNext = pNext
                    temporalId = temporalId
                    useInitialRcQp = useInitialRcQp
                    initialRcQp = initialRcQp
                    useMinQp = useMinQp
                    minQp = minQp
                    useMaxQp = useMaxQp
                    maxQp = maxQp
                    useMaxFrameSize = useMaxFrameSize
                    maxFrameSize = maxFrameSize
                }

            new(temporalId : byte, useInitialRcQp : VkBool32, initialRcQp : VkVideoEncodeH265QpEXT, useMinQp : VkBool32, minQp : VkVideoEncodeH265QpEXT, useMaxQp : VkBool32, maxQp : VkVideoEncodeH265QpEXT, useMaxFrameSize : VkBool32, maxFrameSize : VkVideoEncodeH265FrameSizeEXT) =
                VkVideoEncodeH265RateControlLayerInfoEXT(Unchecked.defaultof<nativeint>, temporalId, useInitialRcQp, initialRcQp, useMinQp, minQp, useMaxQp, maxQp, useMaxFrameSize, maxFrameSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.temporalId = Unchecked.defaultof<byte> && x.useInitialRcQp = Unchecked.defaultof<VkBool32> && x.initialRcQp = Unchecked.defaultof<VkVideoEncodeH265QpEXT> && x.useMinQp = Unchecked.defaultof<VkBool32> && x.minQp = Unchecked.defaultof<VkVideoEncodeH265QpEXT> && x.useMaxQp = Unchecked.defaultof<VkBool32> && x.maxQp = Unchecked.defaultof<VkVideoEncodeH265QpEXT> && x.useMaxFrameSize = Unchecked.defaultof<VkBool32> && x.maxFrameSize = Unchecked.defaultof<VkVideoEncodeH265FrameSizeEXT>

            static member Empty =
                VkVideoEncodeH265RateControlLayerInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<byte>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH265QpEXT>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH265QpEXT>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH265QpEXT>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkVideoEncodeH265FrameSizeEXT>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "temporalId = %A" x.temporalId
                    sprintf "useInitialRcQp = %A" x.useInitialRcQp
                    sprintf "initialRcQp = %A" x.initialRcQp
                    sprintf "useMinQp = %A" x.useMinQp
                    sprintf "minQp = %A" x.minQp
                    sprintf "useMaxQp = %A" x.useMaxQp
                    sprintf "maxQp = %A" x.maxQp
                    sprintf "useMaxFrameSize = %A" x.useMaxFrameSize
                    sprintf "maxFrameSize = %A" x.maxFrameSize
                ] |> sprintf "VkVideoEncodeH265RateControlLayerInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265SessionParametersAddInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vpsStdCount : uint32
            val mutable public pVpsStd : nativeptr<nativeint>
            val mutable public spsStdCount : uint32
            val mutable public pSpsStd : nativeptr<nativeint>
            val mutable public ppsStdCount : uint32
            val mutable public pPpsStd : nativeptr<nativeint>

            new(pNext : nativeint, vpsStdCount : uint32, pVpsStd : nativeptr<nativeint>, spsStdCount : uint32, pSpsStd : nativeptr<nativeint>, ppsStdCount : uint32, pPpsStd : nativeptr<nativeint>) =
                {
                    sType = 1000039002u
                    pNext = pNext
                    vpsStdCount = vpsStdCount
                    pVpsStd = pVpsStd
                    spsStdCount = spsStdCount
                    pSpsStd = pSpsStd
                    ppsStdCount = ppsStdCount
                    pPpsStd = pPpsStd
                }

            new(vpsStdCount : uint32, pVpsStd : nativeptr<nativeint>, spsStdCount : uint32, pSpsStd : nativeptr<nativeint>, ppsStdCount : uint32, pPpsStd : nativeptr<nativeint>) =
                VkVideoEncodeH265SessionParametersAddInfoEXT(Unchecked.defaultof<nativeint>, vpsStdCount, pVpsStd, spsStdCount, pSpsStd, ppsStdCount, pPpsStd)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vpsStdCount = Unchecked.defaultof<uint32> && x.pVpsStd = Unchecked.defaultof<nativeptr<nativeint>> && x.spsStdCount = Unchecked.defaultof<uint32> && x.pSpsStd = Unchecked.defaultof<nativeptr<nativeint>> && x.ppsStdCount = Unchecked.defaultof<uint32> && x.pPpsStd = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoEncodeH265SessionParametersAddInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "vpsStdCount = %A" x.vpsStdCount
                    sprintf "pVpsStd = %A" x.pVpsStd
                    sprintf "spsStdCount = %A" x.spsStdCount
                    sprintf "pSpsStd = %A" x.pSpsStd
                    sprintf "ppsStdCount = %A" x.ppsStdCount
                    sprintf "pPpsStd = %A" x.pPpsStd
                ] |> sprintf "VkVideoEncodeH265SessionParametersAddInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265SessionParametersCreateInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxVpsStdCount : uint32
            val mutable public maxSpsStdCount : uint32
            val mutable public maxPpsStdCount : uint32
            val mutable public pParametersAddInfo : nativeptr<VkVideoEncodeH265SessionParametersAddInfoEXT>

            new(pNext : nativeint, maxVpsStdCount : uint32, maxSpsStdCount : uint32, maxPpsStdCount : uint32, pParametersAddInfo : nativeptr<VkVideoEncodeH265SessionParametersAddInfoEXT>) =
                {
                    sType = 1000039001u
                    pNext = pNext
                    maxVpsStdCount = maxVpsStdCount
                    maxSpsStdCount = maxSpsStdCount
                    maxPpsStdCount = maxPpsStdCount
                    pParametersAddInfo = pParametersAddInfo
                }

            new(maxVpsStdCount : uint32, maxSpsStdCount : uint32, maxPpsStdCount : uint32, pParametersAddInfo : nativeptr<VkVideoEncodeH265SessionParametersAddInfoEXT>) =
                VkVideoEncodeH265SessionParametersCreateInfoEXT(Unchecked.defaultof<nativeint>, maxVpsStdCount, maxSpsStdCount, maxPpsStdCount, pParametersAddInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxVpsStdCount = Unchecked.defaultof<uint32> && x.maxSpsStdCount = Unchecked.defaultof<uint32> && x.maxPpsStdCount = Unchecked.defaultof<uint32> && x.pParametersAddInfo = Unchecked.defaultof<nativeptr<VkVideoEncodeH265SessionParametersAddInfoEXT>>

            static member Empty =
                VkVideoEncodeH265SessionParametersCreateInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoEncodeH265SessionParametersAddInfoEXT>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxVpsStdCount = %A" x.maxVpsStdCount
                    sprintf "maxSpsStdCount = %A" x.maxSpsStdCount
                    sprintf "maxPpsStdCount = %A" x.maxPpsStdCount
                    sprintf "pParametersAddInfo = %A" x.pParametersAddInfo
                ] |> sprintf "VkVideoEncodeH265SessionParametersCreateInfoEXT { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkVideoEncodeH265VclFrameInfoEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pReferenceFinalLists : nativeptr<VkVideoEncodeH265ReferenceListsEXT>
            val mutable public naluSliceSegmentEntryCount : uint32
            val mutable public pNaluSliceSegmentEntries : nativeptr<VkVideoEncodeH265NaluSliceSegmentEXT>
            val mutable public pCurrentPictureInfo : nativeptr<nativeint>

            new(pNext : nativeint, pReferenceFinalLists : nativeptr<VkVideoEncodeH265ReferenceListsEXT>, naluSliceSegmentEntryCount : uint32, pNaluSliceSegmentEntries : nativeptr<VkVideoEncodeH265NaluSliceSegmentEXT>, pCurrentPictureInfo : nativeptr<nativeint>) =
                {
                    sType = 1000039003u
                    pNext = pNext
                    pReferenceFinalLists = pReferenceFinalLists
                    naluSliceSegmentEntryCount = naluSliceSegmentEntryCount
                    pNaluSliceSegmentEntries = pNaluSliceSegmentEntries
                    pCurrentPictureInfo = pCurrentPictureInfo
                }

            new(pReferenceFinalLists : nativeptr<VkVideoEncodeH265ReferenceListsEXT>, naluSliceSegmentEntryCount : uint32, pNaluSliceSegmentEntries : nativeptr<VkVideoEncodeH265NaluSliceSegmentEXT>, pCurrentPictureInfo : nativeptr<nativeint>) =
                VkVideoEncodeH265VclFrameInfoEXT(Unchecked.defaultof<nativeint>, pReferenceFinalLists, naluSliceSegmentEntryCount, pNaluSliceSegmentEntries, pCurrentPictureInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pReferenceFinalLists = Unchecked.defaultof<nativeptr<VkVideoEncodeH265ReferenceListsEXT>> && x.naluSliceSegmentEntryCount = Unchecked.defaultof<uint32> && x.pNaluSliceSegmentEntries = Unchecked.defaultof<nativeptr<VkVideoEncodeH265NaluSliceSegmentEXT>> && x.pCurrentPictureInfo = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkVideoEncodeH265VclFrameInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<VkVideoEncodeH265ReferenceListsEXT>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkVideoEncodeH265NaluSliceSegmentEXT>>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pReferenceFinalLists = %A" x.pReferenceFinalLists
                    sprintf "naluSliceSegmentEntryCount = %A" x.naluSliceSegmentEntryCount
                    sprintf "pNaluSliceSegmentEntries = %A" x.pNaluSliceSegmentEntries
                    sprintf "pCurrentPictureInfo = %A" x.pCurrentPictureInfo
                ] |> sprintf "VkVideoEncodeH265VclFrameInfoEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkVideoCodecOperationFlagsKHR with
              static member inline EncodeH265BitExt = unbox<VkVideoCodecOperationFlagsKHR> 0x00020000


module EXTYcbcr2plane444Formats =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open KHRBindMemory2
    open KHRGetMemoryRequirements2
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance1
    open KHRSamplerYcbcrConversion
    let Name = "VK_EXT_ycbcr_2plane_444_formats"
    let Number = 331

    let Required = [ KHRSamplerYcbcrConversion.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public ycbcr2plane444Formats : VkBool32

            new(pNext : nativeint, ycbcr2plane444Formats : VkBool32) =
                {
                    sType = 1000330000u
                    pNext = pNext
                    ycbcr2plane444Formats = ycbcr2plane444Formats
                }

            new(ycbcr2plane444Formats : VkBool32) =
                VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(Unchecked.defaultof<nativeint>, ycbcr2plane444Formats)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.ycbcr2plane444Formats = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "ycbcr2plane444Formats = %A" x.ycbcr2plane444Formats
                ] |> sprintf "VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkFormat with
              static member inline G8B8r82plane444UnormExt = unbox<VkFormat> 1000330000
              static member inline G10x6B10x6r10x62plane444Unorm3pack16Ext = unbox<VkFormat> 1000330001
              static member inline G12x4B12x4r12x42plane444Unorm3pack16Ext = unbox<VkFormat> 1000330002
              static member inline G16B16r162plane444UnormExt = unbox<VkFormat> 1000330003


module EXTYcbcrImageArrays =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open KHRBindMemory2
    open KHRGetMemoryRequirements2
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance1
    open KHRSamplerYcbcrConversion
    let Name = "VK_EXT_ycbcr_image_arrays"
    let Number = 253

    let Required = [ KHRSamplerYcbcrConversion.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceYcbcrImageArraysFeaturesEXT =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public ycbcrImageArrays : VkBool32

            new(pNext : nativeint, ycbcrImageArrays : VkBool32) =
                {
                    sType = 1000252000u
                    pNext = pNext
                    ycbcrImageArrays = ycbcrImageArrays
                }

            new(ycbcrImageArrays : VkBool32) =
                VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(Unchecked.defaultof<nativeint>, ycbcrImageArrays)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.ycbcrImageArrays = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "ycbcrImageArrays = %A" x.ycbcrImageArrays
                ] |> sprintf "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT { %s }"
        end



module FUCHSIAExternalMemory =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalMemory
    open KHRExternalMemoryCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_FUCHSIA_external_memory"
    let Number = 365

    let Required = [ KHRExternalMemory.Name; KHRExternalMemoryCapabilities.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportMemoryZirconHandleInfoFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleType : VkExternalMemoryHandleTypeFlags
            val mutable public handle : nativeint

            new(pNext : nativeint, handleType : VkExternalMemoryHandleTypeFlags, handle : nativeint) =
                {
                    sType = 1000364000u
                    pNext = pNext
                    handleType = handleType
                    handle = handle
                }

            new(handleType : VkExternalMemoryHandleTypeFlags, handle : nativeint) =
                VkImportMemoryZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, handleType, handle)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags> && x.handle = Unchecked.defaultof<nativeint>

            static member Empty =
                VkImportMemoryZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleType = %A" x.handleType
                    sprintf "handle = %A" x.handle
                ] |> sprintf "VkImportMemoryZirconHandleInfoFUCHSIA { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryGetZirconHandleInfoFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memory : VkDeviceMemory
            val mutable public handleType : VkExternalMemoryHandleTypeFlags

            new(pNext : nativeint, memory : VkDeviceMemory, handleType : VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000364002u
                    pNext = pNext
                    memory = memory
                    handleType = handleType
                }

            new(memory : VkDeviceMemory, handleType : VkExternalMemoryHandleTypeFlags) =
                VkMemoryGetZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, memory, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkMemoryGetZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memory = %A" x.memory
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkMemoryGetZirconHandleInfoFUCHSIA { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryZirconHandlePropertiesFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryTypeBits : uint32

            new(pNext : nativeint, memoryTypeBits : uint32) =
                {
                    sType = 1000364001u
                    pNext = pNext
                    memoryTypeBits = memoryTypeBits
                }

            new(memoryTypeBits : uint32) =
                VkMemoryZirconHandlePropertiesFUCHSIA(Unchecked.defaultof<nativeint>, memoryTypeBits)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryTypeBits = Unchecked.defaultof<uint32>

            static member Empty =
                VkMemoryZirconHandlePropertiesFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryTypeBits = %A" x.memoryTypeBits
                ] |> sprintf "VkMemoryZirconHandlePropertiesFUCHSIA { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkExternalMemoryHandleTypeFlags with
              static member inline ZirconVmoBitFuchsia = unbox<VkExternalMemoryHandleTypeFlags> 0x00000800

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetMemoryZirconHandleFUCHSIADel = delegate of VkDevice * nativeptr<VkMemoryGetZirconHandleInfoFUCHSIA> * nativeptr<nativeint> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetMemoryZirconHandlePropertiesFUCHSIADel = delegate of VkDevice * VkExternalMemoryHandleTypeFlags * nativeint * nativeptr<VkMemoryZirconHandlePropertiesFUCHSIA> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading FUCHSIAExternalMemory")
            static let s_vkGetMemoryZirconHandleFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkGetMemoryZirconHandleFUCHSIADel> "vkGetMemoryZirconHandleFUCHSIA"
            static let s_vkGetMemoryZirconHandlePropertiesFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkGetMemoryZirconHandlePropertiesFUCHSIADel> "vkGetMemoryZirconHandlePropertiesFUCHSIA"
            static do Report.End(3) |> ignore
            static member vkGetMemoryZirconHandleFUCHSIA = s_vkGetMemoryZirconHandleFUCHSIADel
            static member vkGetMemoryZirconHandlePropertiesFUCHSIA = s_vkGetMemoryZirconHandlePropertiesFUCHSIADel
        let vkGetMemoryZirconHandleFUCHSIA(device : VkDevice, pGetZirconHandleInfo : nativeptr<VkMemoryGetZirconHandleInfoFUCHSIA>, pZirconHandle : nativeptr<nativeint>) = Loader<unit>.vkGetMemoryZirconHandleFUCHSIA.Invoke(device, pGetZirconHandleInfo, pZirconHandle)
        let vkGetMemoryZirconHandlePropertiesFUCHSIA(device : VkDevice, handleType : VkExternalMemoryHandleTypeFlags, zirconHandle : nativeint, pMemoryZirconHandleProperties : nativeptr<VkMemoryZirconHandlePropertiesFUCHSIA>) = Loader<unit>.vkGetMemoryZirconHandlePropertiesFUCHSIA.Invoke(device, handleType, zirconHandle, pMemoryZirconHandleProperties)

module FUCHSIABufferCollection =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open FUCHSIAExternalMemory
    open KHRBindMemory2
    open KHRExternalMemory
    open KHRExternalMemoryCapabilities
    open KHRGetMemoryRequirements2
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance1
    open KHRSamplerYcbcrConversion
    let Name = "VK_FUCHSIA_buffer_collection"
    let Number = 367

    let Required = [ FUCHSIAExternalMemory.Name; KHRSamplerYcbcrConversion.Name ]



    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferCollectionFUCHSIA =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkBufferCollectionFUCHSIA(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<Flags>]
    type VkImageFormatConstraintsFlagsFUCHSIA =
        | All = 0
        | None = 0

    [<Flags>]
    type VkImageConstraintsInfoFlagsFUCHSIA =
        | All = 31
        | None = 0
        | CpuReadRarely = 0x00000001
        | CpuReadOften = 0x00000002
        | CpuWriteRarely = 0x00000004
        | CpuWriteOften = 0x00000008
        | ProtectedOptional = 0x00000010


    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferCollectionBufferCreateInfoFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public collection : VkBufferCollectionFUCHSIA
            val mutable public index : uint32

            new(pNext : nativeint, collection : VkBufferCollectionFUCHSIA, index : uint32) =
                {
                    sType = 1000366005u
                    pNext = pNext
                    collection = collection
                    index = index
                }

            new(collection : VkBufferCollectionFUCHSIA, index : uint32) =
                VkBufferCollectionBufferCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, collection, index)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.collection = Unchecked.defaultof<VkBufferCollectionFUCHSIA> && x.index = Unchecked.defaultof<uint32>

            static member Empty =
                VkBufferCollectionBufferCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferCollectionFUCHSIA>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "collection = %A" x.collection
                    sprintf "index = %A" x.index
                ] |> sprintf "VkBufferCollectionBufferCreateInfoFUCHSIA { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferCollectionConstraintsInfoFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public minBufferCount : uint32
            val mutable public maxBufferCount : uint32
            val mutable public minBufferCountForCamping : uint32
            val mutable public minBufferCountForDedicatedSlack : uint32
            val mutable public minBufferCountForSharedSlack : uint32

            new(pNext : nativeint, minBufferCount : uint32, maxBufferCount : uint32, minBufferCountForCamping : uint32, minBufferCountForDedicatedSlack : uint32, minBufferCountForSharedSlack : uint32) =
                {
                    sType = 1000366009u
                    pNext = pNext
                    minBufferCount = minBufferCount
                    maxBufferCount = maxBufferCount
                    minBufferCountForCamping = minBufferCountForCamping
                    minBufferCountForDedicatedSlack = minBufferCountForDedicatedSlack
                    minBufferCountForSharedSlack = minBufferCountForSharedSlack
                }

            new(minBufferCount : uint32, maxBufferCount : uint32, minBufferCountForCamping : uint32, minBufferCountForDedicatedSlack : uint32, minBufferCountForSharedSlack : uint32) =
                VkBufferCollectionConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, minBufferCount, maxBufferCount, minBufferCountForCamping, minBufferCountForDedicatedSlack, minBufferCountForSharedSlack)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.minBufferCount = Unchecked.defaultof<uint32> && x.maxBufferCount = Unchecked.defaultof<uint32> && x.minBufferCountForCamping = Unchecked.defaultof<uint32> && x.minBufferCountForDedicatedSlack = Unchecked.defaultof<uint32> && x.minBufferCountForSharedSlack = Unchecked.defaultof<uint32>

            static member Empty =
                VkBufferCollectionConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "minBufferCount = %A" x.minBufferCount
                    sprintf "maxBufferCount = %A" x.maxBufferCount
                    sprintf "minBufferCountForCamping = %A" x.minBufferCountForCamping
                    sprintf "minBufferCountForDedicatedSlack = %A" x.minBufferCountForDedicatedSlack
                    sprintf "minBufferCountForSharedSlack = %A" x.minBufferCountForSharedSlack
                ] |> sprintf "VkBufferCollectionConstraintsInfoFUCHSIA { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferCollectionCreateInfoFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public collectionToken : nativeint

            new(pNext : nativeint, collectionToken : nativeint) =
                {
                    sType = 1000366000u
                    pNext = pNext
                    collectionToken = collectionToken
                }

            new(collectionToken : nativeint) =
                VkBufferCollectionCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, collectionToken)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.collectionToken = Unchecked.defaultof<nativeint>

            static member Empty =
                VkBufferCollectionCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "collectionToken = %A" x.collectionToken
                ] |> sprintf "VkBufferCollectionCreateInfoFUCHSIA { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferCollectionImageCreateInfoFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public collection : VkBufferCollectionFUCHSIA
            val mutable public index : uint32

            new(pNext : nativeint, collection : VkBufferCollectionFUCHSIA, index : uint32) =
                {
                    sType = 1000366002u
                    pNext = pNext
                    collection = collection
                    index = index
                }

            new(collection : VkBufferCollectionFUCHSIA, index : uint32) =
                VkBufferCollectionImageCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, collection, index)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.collection = Unchecked.defaultof<VkBufferCollectionFUCHSIA> && x.index = Unchecked.defaultof<uint32>

            static member Empty =
                VkBufferCollectionImageCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferCollectionFUCHSIA>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "collection = %A" x.collection
                    sprintf "index = %A" x.index
                ] |> sprintf "VkBufferCollectionImageCreateInfoFUCHSIA { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSysmemColorSpaceFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public colorSpace : uint32

            new(pNext : nativeint, colorSpace : uint32) =
                {
                    sType = 1000366008u
                    pNext = pNext
                    colorSpace = colorSpace
                }

            new(colorSpace : uint32) =
                VkSysmemColorSpaceFUCHSIA(Unchecked.defaultof<nativeint>, colorSpace)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.colorSpace = Unchecked.defaultof<uint32>

            static member Empty =
                VkSysmemColorSpaceFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "colorSpace = %A" x.colorSpace
                ] |> sprintf "VkSysmemColorSpaceFUCHSIA { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferCollectionPropertiesFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryTypeBits : uint32
            val mutable public bufferCount : uint32
            val mutable public createInfoIndex : uint32
            val mutable public sysmemPixelFormat : uint64
            val mutable public formatFeatures : VkFormatFeatureFlags
            val mutable public sysmemColorSpaceIndex : VkSysmemColorSpaceFUCHSIA
            val mutable public samplerYcbcrConversionComponents : VkComponentMapping
            val mutable public suggestedYcbcrModel : VkSamplerYcbcrModelConversion
            val mutable public suggestedYcbcrRange : VkSamplerYcbcrRange
            val mutable public suggestedXChromaOffset : VkChromaLocation
            val mutable public suggestedYChromaOffset : VkChromaLocation

            new(pNext : nativeint, memoryTypeBits : uint32, bufferCount : uint32, createInfoIndex : uint32, sysmemPixelFormat : uint64, formatFeatures : VkFormatFeatureFlags, sysmemColorSpaceIndex : VkSysmemColorSpaceFUCHSIA, samplerYcbcrConversionComponents : VkComponentMapping, suggestedYcbcrModel : VkSamplerYcbcrModelConversion, suggestedYcbcrRange : VkSamplerYcbcrRange, suggestedXChromaOffset : VkChromaLocation, suggestedYChromaOffset : VkChromaLocation) =
                {
                    sType = 1000366003u
                    pNext = pNext
                    memoryTypeBits = memoryTypeBits
                    bufferCount = bufferCount
                    createInfoIndex = createInfoIndex
                    sysmemPixelFormat = sysmemPixelFormat
                    formatFeatures = formatFeatures
                    sysmemColorSpaceIndex = sysmemColorSpaceIndex
                    samplerYcbcrConversionComponents = samplerYcbcrConversionComponents
                    suggestedYcbcrModel = suggestedYcbcrModel
                    suggestedYcbcrRange = suggestedYcbcrRange
                    suggestedXChromaOffset = suggestedXChromaOffset
                    suggestedYChromaOffset = suggestedYChromaOffset
                }

            new(memoryTypeBits : uint32, bufferCount : uint32, createInfoIndex : uint32, sysmemPixelFormat : uint64, formatFeatures : VkFormatFeatureFlags, sysmemColorSpaceIndex : VkSysmemColorSpaceFUCHSIA, samplerYcbcrConversionComponents : VkComponentMapping, suggestedYcbcrModel : VkSamplerYcbcrModelConversion, suggestedYcbcrRange : VkSamplerYcbcrRange, suggestedXChromaOffset : VkChromaLocation, suggestedYChromaOffset : VkChromaLocation) =
                VkBufferCollectionPropertiesFUCHSIA(Unchecked.defaultof<nativeint>, memoryTypeBits, bufferCount, createInfoIndex, sysmemPixelFormat, formatFeatures, sysmemColorSpaceIndex, samplerYcbcrConversionComponents, suggestedYcbcrModel, suggestedYcbcrRange, suggestedXChromaOffset, suggestedYChromaOffset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryTypeBits = Unchecked.defaultof<uint32> && x.bufferCount = Unchecked.defaultof<uint32> && x.createInfoIndex = Unchecked.defaultof<uint32> && x.sysmemPixelFormat = Unchecked.defaultof<uint64> && x.formatFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.sysmemColorSpaceIndex = Unchecked.defaultof<VkSysmemColorSpaceFUCHSIA> && x.samplerYcbcrConversionComponents = Unchecked.defaultof<VkComponentMapping> && x.suggestedYcbcrModel = Unchecked.defaultof<VkSamplerYcbcrModelConversion> && x.suggestedYcbcrRange = Unchecked.defaultof<VkSamplerYcbcrRange> && x.suggestedXChromaOffset = Unchecked.defaultof<VkChromaLocation> && x.suggestedYChromaOffset = Unchecked.defaultof<VkChromaLocation>

            static member Empty =
                VkBufferCollectionPropertiesFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkSysmemColorSpaceFUCHSIA>, Unchecked.defaultof<VkComponentMapping>, Unchecked.defaultof<VkSamplerYcbcrModelConversion>, Unchecked.defaultof<VkSamplerYcbcrRange>, Unchecked.defaultof<VkChromaLocation>, Unchecked.defaultof<VkChromaLocation>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryTypeBits = %A" x.memoryTypeBits
                    sprintf "bufferCount = %A" x.bufferCount
                    sprintf "createInfoIndex = %A" x.createInfoIndex
                    sprintf "sysmemPixelFormat = %A" x.sysmemPixelFormat
                    sprintf "formatFeatures = %A" x.formatFeatures
                    sprintf "sysmemColorSpaceIndex = %A" x.sysmemColorSpaceIndex
                    sprintf "samplerYcbcrConversionComponents = %A" x.samplerYcbcrConversionComponents
                    sprintf "suggestedYcbcrModel = %A" x.suggestedYcbcrModel
                    sprintf "suggestedYcbcrRange = %A" x.suggestedYcbcrRange
                    sprintf "suggestedXChromaOffset = %A" x.suggestedXChromaOffset
                    sprintf "suggestedYChromaOffset = %A" x.suggestedYChromaOffset
                ] |> sprintf "VkBufferCollectionPropertiesFUCHSIA { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkBufferConstraintsInfoFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public createInfo : VkBufferCreateInfo
            val mutable public requiredFormatFeatures : VkFormatFeatureFlags
            val mutable public bufferCollectionConstraints : VkBufferCollectionConstraintsInfoFUCHSIA

            new(pNext : nativeint, createInfo : VkBufferCreateInfo, requiredFormatFeatures : VkFormatFeatureFlags, bufferCollectionConstraints : VkBufferCollectionConstraintsInfoFUCHSIA) =
                {
                    sType = 1000366004u
                    pNext = pNext
                    createInfo = createInfo
                    requiredFormatFeatures = requiredFormatFeatures
                    bufferCollectionConstraints = bufferCollectionConstraints
                }

            new(createInfo : VkBufferCreateInfo, requiredFormatFeatures : VkFormatFeatureFlags, bufferCollectionConstraints : VkBufferCollectionConstraintsInfoFUCHSIA) =
                VkBufferConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, createInfo, requiredFormatFeatures, bufferCollectionConstraints)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.createInfo = Unchecked.defaultof<VkBufferCreateInfo> && x.requiredFormatFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.bufferCollectionConstraints = Unchecked.defaultof<VkBufferCollectionConstraintsInfoFUCHSIA>

            static member Empty =
                VkBufferConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferCreateInfo>, Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkBufferCollectionConstraintsInfoFUCHSIA>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "createInfo = %A" x.createInfo
                    sprintf "requiredFormatFeatures = %A" x.requiredFormatFeatures
                    sprintf "bufferCollectionConstraints = %A" x.bufferCollectionConstraints
                ] |> sprintf "VkBufferConstraintsInfoFUCHSIA { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageFormatConstraintsInfoFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageCreateInfo : VkImageCreateInfo
            val mutable public requiredFormatFeatures : VkFormatFeatureFlags
            val mutable public flags : VkImageFormatConstraintsFlagsFUCHSIA
            val mutable public sysmemPixelFormat : uint64
            val mutable public colorSpaceCount : uint32
            val mutable public pColorSpaces : nativeptr<VkSysmemColorSpaceFUCHSIA>

            new(pNext : nativeint, imageCreateInfo : VkImageCreateInfo, requiredFormatFeatures : VkFormatFeatureFlags, flags : VkImageFormatConstraintsFlagsFUCHSIA, sysmemPixelFormat : uint64, colorSpaceCount : uint32, pColorSpaces : nativeptr<VkSysmemColorSpaceFUCHSIA>) =
                {
                    sType = 1000366007u
                    pNext = pNext
                    imageCreateInfo = imageCreateInfo
                    requiredFormatFeatures = requiredFormatFeatures
                    flags = flags
                    sysmemPixelFormat = sysmemPixelFormat
                    colorSpaceCount = colorSpaceCount
                    pColorSpaces = pColorSpaces
                }

            new(imageCreateInfo : VkImageCreateInfo, requiredFormatFeatures : VkFormatFeatureFlags, flags : VkImageFormatConstraintsFlagsFUCHSIA, sysmemPixelFormat : uint64, colorSpaceCount : uint32, pColorSpaces : nativeptr<VkSysmemColorSpaceFUCHSIA>) =
                VkImageFormatConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, imageCreateInfo, requiredFormatFeatures, flags, sysmemPixelFormat, colorSpaceCount, pColorSpaces)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageCreateInfo = Unchecked.defaultof<VkImageCreateInfo> && x.requiredFormatFeatures = Unchecked.defaultof<VkFormatFeatureFlags> && x.flags = Unchecked.defaultof<VkImageFormatConstraintsFlagsFUCHSIA> && x.sysmemPixelFormat = Unchecked.defaultof<uint64> && x.colorSpaceCount = Unchecked.defaultof<uint32> && x.pColorSpaces = Unchecked.defaultof<nativeptr<VkSysmemColorSpaceFUCHSIA>>

            static member Empty =
                VkImageFormatConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageCreateInfo>, Unchecked.defaultof<VkFormatFeatureFlags>, Unchecked.defaultof<VkImageFormatConstraintsFlagsFUCHSIA>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSysmemColorSpaceFUCHSIA>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageCreateInfo = %A" x.imageCreateInfo
                    sprintf "requiredFormatFeatures = %A" x.requiredFormatFeatures
                    sprintf "flags = %A" x.flags
                    sprintf "sysmemPixelFormat = %A" x.sysmemPixelFormat
                    sprintf "colorSpaceCount = %A" x.colorSpaceCount
                    sprintf "pColorSpaces = %A" x.pColorSpaces
                ] |> sprintf "VkImageFormatConstraintsInfoFUCHSIA { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageConstraintsInfoFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public formatConstraintsCount : uint32
            val mutable public pFormatConstraints : nativeptr<VkImageFormatConstraintsInfoFUCHSIA>
            val mutable public bufferCollectionConstraints : VkBufferCollectionConstraintsInfoFUCHSIA
            val mutable public flags : VkImageConstraintsInfoFlagsFUCHSIA

            new(pNext : nativeint, formatConstraintsCount : uint32, pFormatConstraints : nativeptr<VkImageFormatConstraintsInfoFUCHSIA>, bufferCollectionConstraints : VkBufferCollectionConstraintsInfoFUCHSIA, flags : VkImageConstraintsInfoFlagsFUCHSIA) =
                {
                    sType = 1000366006u
                    pNext = pNext
                    formatConstraintsCount = formatConstraintsCount
                    pFormatConstraints = pFormatConstraints
                    bufferCollectionConstraints = bufferCollectionConstraints
                    flags = flags
                }

            new(formatConstraintsCount : uint32, pFormatConstraints : nativeptr<VkImageFormatConstraintsInfoFUCHSIA>, bufferCollectionConstraints : VkBufferCollectionConstraintsInfoFUCHSIA, flags : VkImageConstraintsInfoFlagsFUCHSIA) =
                VkImageConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, formatConstraintsCount, pFormatConstraints, bufferCollectionConstraints, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.formatConstraintsCount = Unchecked.defaultof<uint32> && x.pFormatConstraints = Unchecked.defaultof<nativeptr<VkImageFormatConstraintsInfoFUCHSIA>> && x.bufferCollectionConstraints = Unchecked.defaultof<VkBufferCollectionConstraintsInfoFUCHSIA> && x.flags = Unchecked.defaultof<VkImageConstraintsInfoFlagsFUCHSIA>

            static member Empty =
                VkImageConstraintsInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkImageFormatConstraintsInfoFUCHSIA>>, Unchecked.defaultof<VkBufferCollectionConstraintsInfoFUCHSIA>, Unchecked.defaultof<VkImageConstraintsInfoFlagsFUCHSIA>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "formatConstraintsCount = %A" x.formatConstraintsCount
                    sprintf "pFormatConstraints = %A" x.pFormatConstraints
                    sprintf "bufferCollectionConstraints = %A" x.bufferCollectionConstraints
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkImageConstraintsInfoFUCHSIA { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportMemoryBufferCollectionFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public collection : VkBufferCollectionFUCHSIA
            val mutable public index : uint32

            new(pNext : nativeint, collection : VkBufferCollectionFUCHSIA, index : uint32) =
                {
                    sType = 1000366001u
                    pNext = pNext
                    collection = collection
                    index = index
                }

            new(collection : VkBufferCollectionFUCHSIA, index : uint32) =
                VkImportMemoryBufferCollectionFUCHSIA(Unchecked.defaultof<nativeint>, collection, index)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.collection = Unchecked.defaultof<VkBufferCollectionFUCHSIA> && x.index = Unchecked.defaultof<uint32>

            static member Empty =
                VkImportMemoryBufferCollectionFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBufferCollectionFUCHSIA>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "collection = %A" x.collection
                    sprintf "index = %A" x.index
                ] |> sprintf "VkImportMemoryBufferCollectionFUCHSIA { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkDebugReportObjectTypeEXT with
              static member inline BufferCollectionFuchsia = unbox<VkDebugReportObjectTypeEXT> 1000366000
         type VkObjectType with
              /// VkBufferCollectionFUCHSIA
              static member inline BufferCollectionFuchsia = unbox<VkObjectType> 1000366000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateBufferCollectionFUCHSIADel = delegate of VkDevice * nativeptr<VkBufferCollectionCreateInfoFUCHSIA> * nativeptr<VkAllocationCallbacks> * nativeptr<VkBufferCollectionFUCHSIA> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkSetBufferCollectionImageConstraintsFUCHSIADel = delegate of VkDevice * VkBufferCollectionFUCHSIA * nativeptr<VkImageConstraintsInfoFUCHSIA> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkSetBufferCollectionBufferConstraintsFUCHSIADel = delegate of VkDevice * VkBufferCollectionFUCHSIA * nativeptr<VkBufferConstraintsInfoFUCHSIA> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyBufferCollectionFUCHSIADel = delegate of VkDevice * VkBufferCollectionFUCHSIA * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetBufferCollectionPropertiesFUCHSIADel = delegate of VkDevice * VkBufferCollectionFUCHSIA * nativeptr<VkBufferCollectionPropertiesFUCHSIA> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading FUCHSIABufferCollection")
            static let s_vkCreateBufferCollectionFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkCreateBufferCollectionFUCHSIADel> "vkCreateBufferCollectionFUCHSIA"
            static let s_vkSetBufferCollectionImageConstraintsFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkSetBufferCollectionImageConstraintsFUCHSIADel> "vkSetBufferCollectionImageConstraintsFUCHSIA"
            static let s_vkSetBufferCollectionBufferConstraintsFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkSetBufferCollectionBufferConstraintsFUCHSIADel> "vkSetBufferCollectionBufferConstraintsFUCHSIA"
            static let s_vkDestroyBufferCollectionFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkDestroyBufferCollectionFUCHSIADel> "vkDestroyBufferCollectionFUCHSIA"
            static let s_vkGetBufferCollectionPropertiesFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkGetBufferCollectionPropertiesFUCHSIADel> "vkGetBufferCollectionPropertiesFUCHSIA"
            static do Report.End(3) |> ignore
            static member vkCreateBufferCollectionFUCHSIA = s_vkCreateBufferCollectionFUCHSIADel
            static member vkSetBufferCollectionImageConstraintsFUCHSIA = s_vkSetBufferCollectionImageConstraintsFUCHSIADel
            static member vkSetBufferCollectionBufferConstraintsFUCHSIA = s_vkSetBufferCollectionBufferConstraintsFUCHSIADel
            static member vkDestroyBufferCollectionFUCHSIA = s_vkDestroyBufferCollectionFUCHSIADel
            static member vkGetBufferCollectionPropertiesFUCHSIA = s_vkGetBufferCollectionPropertiesFUCHSIADel
        let vkCreateBufferCollectionFUCHSIA(device : VkDevice, pCreateInfo : nativeptr<VkBufferCollectionCreateInfoFUCHSIA>, pAllocator : nativeptr<VkAllocationCallbacks>, pCollection : nativeptr<VkBufferCollectionFUCHSIA>) = Loader<unit>.vkCreateBufferCollectionFUCHSIA.Invoke(device, pCreateInfo, pAllocator, pCollection)
        let vkSetBufferCollectionImageConstraintsFUCHSIA(device : VkDevice, collection : VkBufferCollectionFUCHSIA, pImageConstraintsInfo : nativeptr<VkImageConstraintsInfoFUCHSIA>) = Loader<unit>.vkSetBufferCollectionImageConstraintsFUCHSIA.Invoke(device, collection, pImageConstraintsInfo)
        let vkSetBufferCollectionBufferConstraintsFUCHSIA(device : VkDevice, collection : VkBufferCollectionFUCHSIA, pBufferConstraintsInfo : nativeptr<VkBufferConstraintsInfoFUCHSIA>) = Loader<unit>.vkSetBufferCollectionBufferConstraintsFUCHSIA.Invoke(device, collection, pBufferConstraintsInfo)
        let vkDestroyBufferCollectionFUCHSIA(device : VkDevice, collection : VkBufferCollectionFUCHSIA, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyBufferCollectionFUCHSIA.Invoke(device, collection, pAllocator)
        let vkGetBufferCollectionPropertiesFUCHSIA(device : VkDevice, collection : VkBufferCollectionFUCHSIA, pProperties : nativeptr<VkBufferCollectionPropertiesFUCHSIA>) = Loader<unit>.vkGetBufferCollectionPropertiesFUCHSIA.Invoke(device, collection, pProperties)

module KHRExternalSemaphoreCapabilities =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_external_semaphore_capabilities"
    let Number = 77

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags
    type VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags

    type VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties

    type VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo

    type VkPhysicalDeviceIDPropertiesKHR = KHRExternalMemoryCapabilities.VkPhysicalDeviceIDPropertiesKHR


    [<AutoOpen>]
    module EnumExtensions =
         type VkExternalSemaphoreFeatureFlags with
              static member inline ExportableBitKhr = unbox<VkExternalSemaphoreFeatureFlags> 0x00000001
              static member inline ImportableBitKhr = unbox<VkExternalSemaphoreFeatureFlags> 0x00000002
         type VkExternalSemaphoreHandleTypeFlags with
              static member inline OpaqueFdBitKhr = unbox<VkExternalSemaphoreHandleTypeFlags> 0x00000001
              static member inline OpaqueWin32BitKhr = unbox<VkExternalSemaphoreHandleTypeFlags> 0x00000002
              static member inline OpaqueWin32KmtBitKhr = unbox<VkExternalSemaphoreHandleTypeFlags> 0x00000004
              static member inline D3d12FenceBitKhr = unbox<VkExternalSemaphoreHandleTypeFlags> 0x00000008
              static member inline SyncFdBitKhr = unbox<VkExternalSemaphoreHandleTypeFlags> 0x00000010

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceExternalSemaphorePropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceExternalSemaphoreInfo> * nativeptr<VkExternalSemaphoreProperties> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRExternalSemaphoreCapabilities")
            static let s_vkGetPhysicalDeviceExternalSemaphorePropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceExternalSemaphorePropertiesKHRDel> "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = s_vkGetPhysicalDeviceExternalSemaphorePropertiesKHRDel
        let vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice : VkPhysicalDevice, pExternalSemaphoreInfo : nativeptr<VkPhysicalDeviceExternalSemaphoreInfo>, pExternalSemaphoreProperties : nativeptr<VkExternalSemaphoreProperties>) = Loader<unit>.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR.Invoke(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties)

module KHRExternalSemaphore =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalSemaphoreCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_external_semaphore"
    let Number = 78

    let Required = [ KHRExternalSemaphoreCapabilities.Name ]


    type VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags

    type VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkSemaphoreImportFlags with
              static member inline TemporaryBitKhr = unbox<VkSemaphoreImportFlags> 0x00000001


module FUCHSIAExternalSemaphore =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalSemaphore
    open KHRExternalSemaphoreCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_FUCHSIA_external_semaphore"
    let Number = 366

    let Required = [ KHRExternalSemaphore.Name; KHRExternalSemaphoreCapabilities.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportSemaphoreZirconHandleInfoFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphore : VkSemaphore
            val mutable public flags : VkSemaphoreImportFlags
            val mutable public handleType : VkExternalSemaphoreHandleTypeFlags
            val mutable public zirconHandle : nativeint

            new(pNext : nativeint, semaphore : VkSemaphore, flags : VkSemaphoreImportFlags, handleType : VkExternalSemaphoreHandleTypeFlags, zirconHandle : nativeint) =
                {
                    sType = 1000365000u
                    pNext = pNext
                    semaphore = semaphore
                    flags = flags
                    handleType = handleType
                    zirconHandle = zirconHandle
                }

            new(semaphore : VkSemaphore, flags : VkSemaphoreImportFlags, handleType : VkExternalSemaphoreHandleTypeFlags, zirconHandle : nativeint) =
                VkImportSemaphoreZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, semaphore, flags, handleType, zirconHandle)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.flags = Unchecked.defaultof<VkSemaphoreImportFlags> && x.handleType = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags> && x.zirconHandle = Unchecked.defaultof<nativeint>

            static member Empty =
                VkImportSemaphoreZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<VkSemaphoreImportFlags>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphore = %A" x.semaphore
                    sprintf "flags = %A" x.flags
                    sprintf "handleType = %A" x.handleType
                    sprintf "zirconHandle = %A" x.zirconHandle
                ] |> sprintf "VkImportSemaphoreZirconHandleInfoFUCHSIA { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSemaphoreGetZirconHandleInfoFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphore : VkSemaphore
            val mutable public handleType : VkExternalSemaphoreHandleTypeFlags

            new(pNext : nativeint, semaphore : VkSemaphore, handleType : VkExternalSemaphoreHandleTypeFlags) =
                {
                    sType = 1000365001u
                    pNext = pNext
                    semaphore = semaphore
                    handleType = handleType
                }

            new(semaphore : VkSemaphore, handleType : VkExternalSemaphoreHandleTypeFlags) =
                VkSemaphoreGetZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, semaphore, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.handleType = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>

            static member Empty =
                VkSemaphoreGetZirconHandleInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphore = %A" x.semaphore
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkSemaphoreGetZirconHandleInfoFUCHSIA { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkExternalSemaphoreHandleTypeFlags with
              static member inline ZirconEventBitFuchsia = unbox<VkExternalSemaphoreHandleTypeFlags> 0x00000080

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkImportSemaphoreZirconHandleFUCHSIADel = delegate of VkDevice * nativeptr<VkImportSemaphoreZirconHandleInfoFUCHSIA> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetSemaphoreZirconHandleFUCHSIADel = delegate of VkDevice * nativeptr<VkSemaphoreGetZirconHandleInfoFUCHSIA> * nativeptr<nativeint> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading FUCHSIAExternalSemaphore")
            static let s_vkImportSemaphoreZirconHandleFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkImportSemaphoreZirconHandleFUCHSIADel> "vkImportSemaphoreZirconHandleFUCHSIA"
            static let s_vkGetSemaphoreZirconHandleFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkGetSemaphoreZirconHandleFUCHSIADel> "vkGetSemaphoreZirconHandleFUCHSIA"
            static do Report.End(3) |> ignore
            static member vkImportSemaphoreZirconHandleFUCHSIA = s_vkImportSemaphoreZirconHandleFUCHSIADel
            static member vkGetSemaphoreZirconHandleFUCHSIA = s_vkGetSemaphoreZirconHandleFUCHSIADel
        let vkImportSemaphoreZirconHandleFUCHSIA(device : VkDevice, pImportSemaphoreZirconHandleInfo : nativeptr<VkImportSemaphoreZirconHandleInfoFUCHSIA>) = Loader<unit>.vkImportSemaphoreZirconHandleFUCHSIA.Invoke(device, pImportSemaphoreZirconHandleInfo)
        let vkGetSemaphoreZirconHandleFUCHSIA(device : VkDevice, pGetZirconHandleInfo : nativeptr<VkSemaphoreGetZirconHandleInfoFUCHSIA>, pZirconHandle : nativeptr<nativeint>) = Loader<unit>.vkGetSemaphoreZirconHandleFUCHSIA.Invoke(device, pGetZirconHandleInfo, pZirconHandle)

module FUCHSIAImagepipeSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_FUCHSIA_imagepipe_surface"
    let Number = 215

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkImagePipeSurfaceCreateInfoFUCHSIA =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkImagePipeSurfaceCreateFlagsFUCHSIA
            val mutable public imagePipeHandle : nativeint

            new(pNext : nativeint, flags : VkImagePipeSurfaceCreateFlagsFUCHSIA, imagePipeHandle : nativeint) =
                {
                    sType = 1000214000u
                    pNext = pNext
                    flags = flags
                    imagePipeHandle = imagePipeHandle
                }

            new(flags : VkImagePipeSurfaceCreateFlagsFUCHSIA, imagePipeHandle : nativeint) =
                VkImagePipeSurfaceCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, flags, imagePipeHandle)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkImagePipeSurfaceCreateFlagsFUCHSIA> && x.imagePipeHandle = Unchecked.defaultof<nativeint>

            static member Empty =
                VkImagePipeSurfaceCreateInfoFUCHSIA(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImagePipeSurfaceCreateFlagsFUCHSIA>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "imagePipeHandle = %A" x.imagePipeHandle
                ] |> sprintf "VkImagePipeSurfaceCreateInfoFUCHSIA { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateImagePipeSurfaceFUCHSIADel = delegate of VkInstance * nativeptr<VkImagePipeSurfaceCreateInfoFUCHSIA> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading FUCHSIAImagepipeSurface")
            static let s_vkCreateImagePipeSurfaceFUCHSIADel = VkRaw.vkImportInstanceDelegate<VkCreateImagePipeSurfaceFUCHSIADel> "vkCreateImagePipeSurfaceFUCHSIA"
            static do Report.End(3) |> ignore
            static member vkCreateImagePipeSurfaceFUCHSIA = s_vkCreateImagePipeSurfaceFUCHSIADel
        let vkCreateImagePipeSurfaceFUCHSIA(instance : VkInstance, pCreateInfo : nativeptr<VkImagePipeSurfaceCreateInfoFUCHSIA>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateImagePipeSurfaceFUCHSIA.Invoke(instance, pCreateInfo, pAllocator, pSurface)

module GGPStreamDescriptorSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_GGP_stream_descriptor_surface"
    let Number = 50

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkStreamDescriptorSurfaceCreateInfoGGP =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkStreamDescriptorSurfaceCreateFlagsGGP
            val mutable public streamDescriptor : nativeint

            new(pNext : nativeint, flags : VkStreamDescriptorSurfaceCreateFlagsGGP, streamDescriptor : nativeint) =
                {
                    sType = 1000049000u
                    pNext = pNext
                    flags = flags
                    streamDescriptor = streamDescriptor
                }

            new(flags : VkStreamDescriptorSurfaceCreateFlagsGGP, streamDescriptor : nativeint) =
                VkStreamDescriptorSurfaceCreateInfoGGP(Unchecked.defaultof<nativeint>, flags, streamDescriptor)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkStreamDescriptorSurfaceCreateFlagsGGP> && x.streamDescriptor = Unchecked.defaultof<nativeint>

            static member Empty =
                VkStreamDescriptorSurfaceCreateInfoGGP(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkStreamDescriptorSurfaceCreateFlagsGGP>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "streamDescriptor = %A" x.streamDescriptor
                ] |> sprintf "VkStreamDescriptorSurfaceCreateInfoGGP { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateStreamDescriptorSurfaceGGPDel = delegate of VkInstance * nativeptr<VkStreamDescriptorSurfaceCreateInfoGGP> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading GGPStreamDescriptorSurface")
            static let s_vkCreateStreamDescriptorSurfaceGGPDel = VkRaw.vkImportInstanceDelegate<VkCreateStreamDescriptorSurfaceGGPDel> "vkCreateStreamDescriptorSurfaceGGP"
            static do Report.End(3) |> ignore
            static member vkCreateStreamDescriptorSurfaceGGP = s_vkCreateStreamDescriptorSurfaceGGPDel
        let vkCreateStreamDescriptorSurfaceGGP(instance : VkInstance, pCreateInfo : nativeptr<VkStreamDescriptorSurfaceCreateInfoGGP>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateStreamDescriptorSurfaceGGP.Invoke(instance, pCreateInfo, pAllocator, pSurface)

module GGPFrameToken =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open GGPStreamDescriptorSurface
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_GGP_frame_token"
    let Number = 192

    let Required = [ GGPStreamDescriptorSurface.Name; KHRSwapchain.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPresentFrameTokenGGP =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public frameToken : nativeint

            new(pNext : nativeint, frameToken : nativeint) =
                {
                    sType = 1000191000u
                    pNext = pNext
                    frameToken = frameToken
                }

            new(frameToken : nativeint) =
                VkPresentFrameTokenGGP(Unchecked.defaultof<nativeint>, frameToken)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.frameToken = Unchecked.defaultof<nativeint>

            static member Empty =
                VkPresentFrameTokenGGP(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "frameToken = %A" x.frameToken
                ] |> sprintf "VkPresentFrameTokenGGP { %s }"
        end



module GOOGLEDecorateString =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_GOOGLE_decorate_string"
    let Number = 225


module GOOGLEDisplayTiming =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_GOOGLE_display_timing"
    let Number = 93

    let Required = [ KHRSwapchain.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPastPresentationTimingGOOGLE =
        struct
            val mutable public presentID : uint32
            val mutable public desiredPresentTime : uint64
            val mutable public actualPresentTime : uint64
            val mutable public earliestPresentTime : uint64
            val mutable public presentMargin : uint64

            new(presentID : uint32, desiredPresentTime : uint64, actualPresentTime : uint64, earliestPresentTime : uint64, presentMargin : uint64) =
                {
                    presentID = presentID
                    desiredPresentTime = desiredPresentTime
                    actualPresentTime = actualPresentTime
                    earliestPresentTime = earliestPresentTime
                    presentMargin = presentMargin
                }

            member x.IsEmpty =
                x.presentID = Unchecked.defaultof<uint32> && x.desiredPresentTime = Unchecked.defaultof<uint64> && x.actualPresentTime = Unchecked.defaultof<uint64> && x.earliestPresentTime = Unchecked.defaultof<uint64> && x.presentMargin = Unchecked.defaultof<uint64>

            static member Empty =
                VkPastPresentationTimingGOOGLE(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "presentID = %A" x.presentID
                    sprintf "desiredPresentTime = %A" x.desiredPresentTime
                    sprintf "actualPresentTime = %A" x.actualPresentTime
                    sprintf "earliestPresentTime = %A" x.earliestPresentTime
                    sprintf "presentMargin = %A" x.presentMargin
                ] |> sprintf "VkPastPresentationTimingGOOGLE { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPresentTimeGOOGLE =
        struct
            val mutable public presentID : uint32
            val mutable public desiredPresentTime : uint64

            new(presentID : uint32, desiredPresentTime : uint64) =
                {
                    presentID = presentID
                    desiredPresentTime = desiredPresentTime
                }

            member x.IsEmpty =
                x.presentID = Unchecked.defaultof<uint32> && x.desiredPresentTime = Unchecked.defaultof<uint64>

            static member Empty =
                VkPresentTimeGOOGLE(Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "presentID = %A" x.presentID
                    sprintf "desiredPresentTime = %A" x.desiredPresentTime
                ] |> sprintf "VkPresentTimeGOOGLE { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPresentTimesInfoGOOGLE =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public swapchainCount : uint32
            val mutable public pTimes : nativeptr<VkPresentTimeGOOGLE>

            new(pNext : nativeint, swapchainCount : uint32, pTimes : nativeptr<VkPresentTimeGOOGLE>) =
                {
                    sType = 1000092000u
                    pNext = pNext
                    swapchainCount = swapchainCount
                    pTimes = pTimes
                }

            new(swapchainCount : uint32, pTimes : nativeptr<VkPresentTimeGOOGLE>) =
                VkPresentTimesInfoGOOGLE(Unchecked.defaultof<nativeint>, swapchainCount, pTimes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.swapchainCount = Unchecked.defaultof<uint32> && x.pTimes = Unchecked.defaultof<nativeptr<VkPresentTimeGOOGLE>>

            static member Empty =
                VkPresentTimesInfoGOOGLE(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPresentTimeGOOGLE>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "swapchainCount = %A" x.swapchainCount
                    sprintf "pTimes = %A" x.pTimes
                ] |> sprintf "VkPresentTimesInfoGOOGLE { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRefreshCycleDurationGOOGLE =
        struct
            val mutable public refreshDuration : uint64

            new(refreshDuration : uint64) =
                {
                    refreshDuration = refreshDuration
                }

            member x.IsEmpty =
                x.refreshDuration = Unchecked.defaultof<uint64>

            static member Empty =
                VkRefreshCycleDurationGOOGLE(Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "refreshDuration = %A" x.refreshDuration
                ] |> sprintf "VkRefreshCycleDurationGOOGLE { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetRefreshCycleDurationGOOGLEDel = delegate of VkDevice * VkSwapchainKHR * nativeptr<VkRefreshCycleDurationGOOGLE> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPastPresentationTimingGOOGLEDel = delegate of VkDevice * VkSwapchainKHR * nativeptr<uint32> * nativeptr<VkPastPresentationTimingGOOGLE> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading GOOGLEDisplayTiming")
            static let s_vkGetRefreshCycleDurationGOOGLEDel = VkRaw.vkImportInstanceDelegate<VkGetRefreshCycleDurationGOOGLEDel> "vkGetRefreshCycleDurationGOOGLE"
            static let s_vkGetPastPresentationTimingGOOGLEDel = VkRaw.vkImportInstanceDelegate<VkGetPastPresentationTimingGOOGLEDel> "vkGetPastPresentationTimingGOOGLE"
            static do Report.End(3) |> ignore
            static member vkGetRefreshCycleDurationGOOGLE = s_vkGetRefreshCycleDurationGOOGLEDel
            static member vkGetPastPresentationTimingGOOGLE = s_vkGetPastPresentationTimingGOOGLEDel
        let vkGetRefreshCycleDurationGOOGLE(device : VkDevice, swapchain : VkSwapchainKHR, pDisplayTimingProperties : nativeptr<VkRefreshCycleDurationGOOGLE>) = Loader<unit>.vkGetRefreshCycleDurationGOOGLE.Invoke(device, swapchain, pDisplayTimingProperties)
        let vkGetPastPresentationTimingGOOGLE(device : VkDevice, swapchain : VkSwapchainKHR, pPresentationTimingCount : nativeptr<uint32>, pPresentationTimings : nativeptr<VkPastPresentationTimingGOOGLE>) = Loader<unit>.vkGetPastPresentationTimingGOOGLE.Invoke(device, swapchain, pPresentationTimingCount, pPresentationTimings)

module GOOGLEHlslFunctionality1 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_GOOGLE_hlsl_functionality1"
    let Number = 224


module GOOGLESurfacelessQuery =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_GOOGLE_surfaceless_query"
    let Number = 434

    let Required = [ KHRSurface.Name ]


module GOOGLEUserType =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_GOOGLE_user_type"
    let Number = 290


module HUAWEIInvocationMask =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open EXTDescriptorIndexing
    open KHRAccelerationStructure
    open KHRBufferDeviceAddress
    open KHRDeferredHostOperations
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance3
    open KHRPipelineLibrary
    open KHRRayTracingPipeline
    open KHRShaderFloatControls
    open KHRSpirv14
    open KHRSynchronization2
    let Name = "VK_HUAWEI_invocation_mask"
    let Number = 371

    let Required = [ KHRRayTracingPipeline.Name; KHRSynchronization2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceInvocationMaskFeaturesHUAWEI =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public invocationMask : VkBool32

            new(pNext : nativeint, invocationMask : VkBool32) =
                {
                    sType = 1000370000u
                    pNext = pNext
                    invocationMask = invocationMask
                }

            new(invocationMask : VkBool32) =
                VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(Unchecked.defaultof<nativeint>, invocationMask)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.invocationMask = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "invocationMask = %A" x.invocationMask
                ] |> sprintf "VkPhysicalDeviceInvocationMaskFeaturesHUAWEI { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccessFlags2 with
              static member inline Access2InvocationMaskReadBitHuawei = unbox<VkAccessFlags2> 0x00000080
         type VkImageUsageFlags with
              static member inline InvocationMaskBitHuawei = unbox<VkImageUsageFlags> 0x00040000
         type VkPipelineStageFlags2 with
              static member inline PipelineStage2InvocationMaskBitHuawei = unbox<VkPipelineStageFlags2> 0x00000100

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBindInvocationMaskHUAWEIDel = delegate of VkCommandBuffer * VkImageView * VkImageLayout -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading HUAWEIInvocationMask")
            static let s_vkCmdBindInvocationMaskHUAWEIDel = VkRaw.vkImportInstanceDelegate<VkCmdBindInvocationMaskHUAWEIDel> "vkCmdBindInvocationMaskHUAWEI"
            static do Report.End(3) |> ignore
            static member vkCmdBindInvocationMaskHUAWEI = s_vkCmdBindInvocationMaskHUAWEIDel
        let vkCmdBindInvocationMaskHUAWEI(commandBuffer : VkCommandBuffer, imageView : VkImageView, imageLayout : VkImageLayout) = Loader<unit>.vkCmdBindInvocationMaskHUAWEI.Invoke(commandBuffer, imageView, imageLayout)

module HUAWEISubpassShading =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRCreateRenderpass2
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance2
    open KHRMultiview
    open KHRSynchronization2
    let Name = "VK_HUAWEI_subpass_shading"
    let Number = 370

    let Required = [ KHRCreateRenderpass2.Name; KHRSynchronization2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSubpassShadingFeaturesHUAWEI =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public subpassShading : VkBool32

            new(pNext : nativeint, subpassShading : VkBool32) =
                {
                    sType = 1000369001u
                    pNext = pNext
                    subpassShading = subpassShading
                }

            new(subpassShading : VkBool32) =
                VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(Unchecked.defaultof<nativeint>, subpassShading)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.subpassShading = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "subpassShading = %A" x.subpassShading
                ] |> sprintf "VkPhysicalDeviceSubpassShadingFeaturesHUAWEI { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceSubpassShadingPropertiesHUAWEI =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxSubpassShadingWorkgroupSizeAspectRatio : uint32

            new(pNext : nativeint, maxSubpassShadingWorkgroupSizeAspectRatio : uint32) =
                {
                    sType = 1000369002u
                    pNext = pNext
                    maxSubpassShadingWorkgroupSizeAspectRatio = maxSubpassShadingWorkgroupSizeAspectRatio
                }

            new(maxSubpassShadingWorkgroupSizeAspectRatio : uint32) =
                VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(Unchecked.defaultof<nativeint>, maxSubpassShadingWorkgroupSizeAspectRatio)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxSubpassShadingWorkgroupSizeAspectRatio = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxSubpassShadingWorkgroupSizeAspectRatio = %A" x.maxSubpassShadingWorkgroupSizeAspectRatio
                ] |> sprintf "VkPhysicalDeviceSubpassShadingPropertiesHUAWEI { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassShadingPipelineCreateInfoHUAWEI =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public renderPass : VkRenderPass
            val mutable public subpass : uint32

            new(pNext : nativeint, renderPass : VkRenderPass, subpass : uint32) =
                {
                    sType = 1000369000u
                    pNext = pNext
                    renderPass = renderPass
                    subpass = subpass
                }

            new(renderPass : VkRenderPass, subpass : uint32) =
                VkSubpassShadingPipelineCreateInfoHUAWEI(Unchecked.defaultof<nativeint>, renderPass, subpass)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.renderPass = Unchecked.defaultof<VkRenderPass> && x.subpass = Unchecked.defaultof<uint32>

            static member Empty =
                VkSubpassShadingPipelineCreateInfoHUAWEI(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRenderPass>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "renderPass = %A" x.renderPass
                    sprintf "subpass = %A" x.subpass
                ] |> sprintf "VkSubpassShadingPipelineCreateInfoHUAWEI { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkPipelineBindPoint with
              static member inline SubpassShadingHuawei = unbox<VkPipelineBindPoint> 1000369003
         type VkPipelineStageFlags2 with
              static member inline PipelineStage2SubpassShadingBitHuawei = unbox<VkPipelineStageFlags2> 0x00000080
         type VkShaderStageFlags with
              static member inline SubpassShadingBitHuawei = unbox<VkShaderStageFlags> 0x00004000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEIDel = delegate of VkDevice * VkRenderPass * nativeptr<VkExtent2D> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSubpassShadingHUAWEIDel = delegate of VkCommandBuffer -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading HUAWEISubpassShading")
            static let s_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEIDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEIDel> "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"
            static let s_vkCmdSubpassShadingHUAWEIDel = VkRaw.vkImportInstanceDelegate<VkCmdSubpassShadingHUAWEIDel> "vkCmdSubpassShadingHUAWEI"
            static do Report.End(3) |> ignore
            static member vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = s_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEIDel
            static member vkCmdSubpassShadingHUAWEI = s_vkCmdSubpassShadingHUAWEIDel
        let vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device : VkDevice, renderpass : VkRenderPass, pMaxWorkgroupSize : nativeptr<VkExtent2D>) = Loader<unit>.vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI.Invoke(device, renderpass, pMaxWorkgroupSize)
        let vkCmdSubpassShadingHUAWEI(commandBuffer : VkCommandBuffer) = Loader<unit>.vkCmdSubpassShadingHUAWEI.Invoke(commandBuffer)

module IMGFilterCubic =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_IMG_filter_cubic"
    let Number = 16


    [<AutoOpen>]
    module EnumExtensions =
         type VkFilter with
              static member inline CubicImg = unbox<VkFilter> 1000015000
         type VkFormatFeatureFlags with
              /// Format can be filtered with VK_FILTER_CUBIC_IMG when being sampled
              static member inline SampledImageFilterCubicBitImg = unbox<VkFormatFeatureFlags> 0x00002000


module IMGFormatPvrtc =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_IMG_format_pvrtc"
    let Number = 55


    [<AutoOpen>]
    module EnumExtensions =
         type VkFormat with
              static member inline Pvrtc12bppUnormBlockImg = unbox<VkFormat> 1000054000
              static member inline Pvrtc14bppUnormBlockImg = unbox<VkFormat> 1000054001
              static member inline Pvrtc22bppUnormBlockImg = unbox<VkFormat> 1000054002
              static member inline Pvrtc24bppUnormBlockImg = unbox<VkFormat> 1000054003
              static member inline Pvrtc12bppSrgbBlockImg = unbox<VkFormat> 1000054004
              static member inline Pvrtc14bppSrgbBlockImg = unbox<VkFormat> 1000054005
              static member inline Pvrtc22bppSrgbBlockImg = unbox<VkFormat> 1000054006
              static member inline Pvrtc24bppSrgbBlockImg = unbox<VkFormat> 1000054007


module INTELPerformanceQuery =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_INTEL_performance_query"
    let Number = 211



    [<StructLayout(LayoutKind.Sequential)>]
    type VkPerformanceConfigurationINTEL =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkPerformanceConfigurationINTEL(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    type VkPerformanceConfigurationTypeINTEL =
        | CommandQueueMetricsDiscoveryActivated = 0

    type VkQueryPoolSamplingModeINTEL =
        | Manual = 0

    type VkPerformanceOverrideTypeINTEL =
        | NullHardware = 0
        | FlushGpuCaches = 1

    type VkPerformanceParameterTypeINTEL =
        | HwCountersSupported = 0
        | StreamMarkerValidBits = 1

    type VkPerformanceValueTypeINTEL =
        | Uint32 = 0
        | Uint64 = 1
        | Float = 2
        | Bool = 3
        | String = 4


    [<StructLayout(LayoutKind.Sequential)>]
    type VkInitializePerformanceApiInfoINTEL =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pUserData : nativeint

            new(pNext : nativeint, pUserData : nativeint) =
                {
                    sType = 1000210001u
                    pNext = pNext
                    pUserData = pUserData
                }

            new(pUserData : nativeint) =
                VkInitializePerformanceApiInfoINTEL(Unchecked.defaultof<nativeint>, pUserData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pUserData = Unchecked.defaultof<nativeint>

            static member Empty =
                VkInitializePerformanceApiInfoINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pUserData = %A" x.pUserData
                ] |> sprintf "VkInitializePerformanceApiInfoINTEL { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPerformanceConfigurationAcquireInfoINTEL =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public _type : VkPerformanceConfigurationTypeINTEL

            new(pNext : nativeint, _type : VkPerformanceConfigurationTypeINTEL) =
                {
                    sType = 1000210005u
                    pNext = pNext
                    _type = _type
                }

            new(_type : VkPerformanceConfigurationTypeINTEL) =
                VkPerformanceConfigurationAcquireInfoINTEL(Unchecked.defaultof<nativeint>, _type)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkPerformanceConfigurationTypeINTEL>

            static member Empty =
                VkPerformanceConfigurationAcquireInfoINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPerformanceConfigurationTypeINTEL>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "_type = %A" x._type
                ] |> sprintf "VkPerformanceConfigurationAcquireInfoINTEL { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPerformanceMarkerInfoINTEL =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public marker : uint64

            new(pNext : nativeint, marker : uint64) =
                {
                    sType = 1000210002u
                    pNext = pNext
                    marker = marker
                }

            new(marker : uint64) =
                VkPerformanceMarkerInfoINTEL(Unchecked.defaultof<nativeint>, marker)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.marker = Unchecked.defaultof<uint64>

            static member Empty =
                VkPerformanceMarkerInfoINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "marker = %A" x.marker
                ] |> sprintf "VkPerformanceMarkerInfoINTEL { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPerformanceOverrideInfoINTEL =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public _type : VkPerformanceOverrideTypeINTEL
            val mutable public enable : VkBool32
            val mutable public parameter : uint64

            new(pNext : nativeint, _type : VkPerformanceOverrideTypeINTEL, enable : VkBool32, parameter : uint64) =
                {
                    sType = 1000210004u
                    pNext = pNext
                    _type = _type
                    enable = enable
                    parameter = parameter
                }

            new(_type : VkPerformanceOverrideTypeINTEL, enable : VkBool32, parameter : uint64) =
                VkPerformanceOverrideInfoINTEL(Unchecked.defaultof<nativeint>, _type, enable, parameter)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x._type = Unchecked.defaultof<VkPerformanceOverrideTypeINTEL> && x.enable = Unchecked.defaultof<VkBool32> && x.parameter = Unchecked.defaultof<uint64>

            static member Empty =
                VkPerformanceOverrideInfoINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPerformanceOverrideTypeINTEL>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "_type = %A" x._type
                    sprintf "enable = %A" x.enable
                    sprintf "parameter = %A" x.parameter
                ] |> sprintf "VkPerformanceOverrideInfoINTEL { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPerformanceStreamMarkerInfoINTEL =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public marker : uint32

            new(pNext : nativeint, marker : uint32) =
                {
                    sType = 1000210003u
                    pNext = pNext
                    marker = marker
                }

            new(marker : uint32) =
                VkPerformanceStreamMarkerInfoINTEL(Unchecked.defaultof<nativeint>, marker)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.marker = Unchecked.defaultof<uint32>

            static member Empty =
                VkPerformanceStreamMarkerInfoINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "marker = %A" x.marker
                ] |> sprintf "VkPerformanceStreamMarkerInfoINTEL { %s }"
        end

    [<StructLayout(LayoutKind.Explicit)>]
    type VkPerformanceValueDataINTEL =
        struct
            [<FieldOffset(0)>]
            val mutable public value32 : uint32
            [<FieldOffset(0)>]
            val mutable public value64 : uint64
            [<FieldOffset(0)>]
            val mutable public valueFloat : float32
            [<FieldOffset(0)>]
            val mutable public valueBool : VkBool32
            [<FieldOffset(0)>]
            val mutable public valueString : cstr

            static member Value32(value : uint32) =
                let mutable result = Unchecked.defaultof<VkPerformanceValueDataINTEL>
                result.value32 <- value
                result

            static member Value64(value : uint64) =
                let mutable result = Unchecked.defaultof<VkPerformanceValueDataINTEL>
                result.value64 <- value
                result

            static member ValueFloat(value : float32) =
                let mutable result = Unchecked.defaultof<VkPerformanceValueDataINTEL>
                result.valueFloat <- value
                result

            static member ValueBool(value : VkBool32) =
                let mutable result = Unchecked.defaultof<VkPerformanceValueDataINTEL>
                result.valueBool <- value
                result

            static member ValueString(value : cstr) =
                let mutable result = Unchecked.defaultof<VkPerformanceValueDataINTEL>
                result.valueString <- value
                result

            override x.ToString() =
                String.concat "; " [
                    sprintf "value32 = %A" x.value32
                    sprintf "value64 = %A" x.value64
                    sprintf "valueFloat = %A" x.valueFloat
                    sprintf "valueBool = %A" x.valueBool
                    sprintf "valueString = %A" x.valueString
                ] |> sprintf "VkPerformanceValueDataINTEL { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPerformanceValueINTEL =
        struct
            val mutable public _type : VkPerformanceValueTypeINTEL
            val mutable public data : VkPerformanceValueDataINTEL

            new(_type : VkPerformanceValueTypeINTEL, data : VkPerformanceValueDataINTEL) =
                {
                    _type = _type
                    data = data
                }

            member x.IsEmpty =
                x._type = Unchecked.defaultof<VkPerformanceValueTypeINTEL> && x.data = Unchecked.defaultof<VkPerformanceValueDataINTEL>

            static member Empty =
                VkPerformanceValueINTEL(Unchecked.defaultof<VkPerformanceValueTypeINTEL>, Unchecked.defaultof<VkPerformanceValueDataINTEL>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "_type = %A" x._type
                    sprintf "data = %A" x.data
                ] |> sprintf "VkPerformanceValueINTEL { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkQueryPoolPerformanceQueryCreateInfoINTEL =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public performanceCountersSampling : VkQueryPoolSamplingModeINTEL

            new(pNext : nativeint, performanceCountersSampling : VkQueryPoolSamplingModeINTEL) =
                {
                    sType = 1000210000u
                    pNext = pNext
                    performanceCountersSampling = performanceCountersSampling
                }

            new(performanceCountersSampling : VkQueryPoolSamplingModeINTEL) =
                VkQueryPoolPerformanceQueryCreateInfoINTEL(Unchecked.defaultof<nativeint>, performanceCountersSampling)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.performanceCountersSampling = Unchecked.defaultof<VkQueryPoolSamplingModeINTEL>

            static member Empty =
                VkQueryPoolPerformanceQueryCreateInfoINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkQueryPoolSamplingModeINTEL>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "performanceCountersSampling = %A" x.performanceCountersSampling
                ] |> sprintf "VkQueryPoolPerformanceQueryCreateInfoINTEL { %s }"
        end

    type VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL


    [<AutoOpen>]
    module EnumExtensions =
         type VkObjectType with
              static member inline PerformanceConfigurationIntel = unbox<VkObjectType> 1000210000
         type VkQueryType with
              static member inline PerformanceQueryIntel = unbox<VkQueryType> 1000210000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkInitializePerformanceApiINTELDel = delegate of VkDevice * nativeptr<VkInitializePerformanceApiInfoINTEL> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkUninitializePerformanceApiINTELDel = delegate of VkDevice -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetPerformanceMarkerINTELDel = delegate of VkCommandBuffer * nativeptr<VkPerformanceMarkerInfoINTEL> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetPerformanceStreamMarkerINTELDel = delegate of VkCommandBuffer * nativeptr<VkPerformanceStreamMarkerInfoINTEL> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetPerformanceOverrideINTELDel = delegate of VkCommandBuffer * nativeptr<VkPerformanceOverrideInfoINTEL> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkAcquirePerformanceConfigurationINTELDel = delegate of VkDevice * nativeptr<VkPerformanceConfigurationAcquireInfoINTEL> * nativeptr<VkPerformanceConfigurationINTEL> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkReleasePerformanceConfigurationINTELDel = delegate of VkDevice * VkPerformanceConfigurationINTEL -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkQueueSetPerformanceConfigurationINTELDel = delegate of VkQueue * VkPerformanceConfigurationINTEL -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPerformanceParameterINTELDel = delegate of VkDevice * VkPerformanceParameterTypeINTEL * nativeptr<VkPerformanceValueINTEL> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading INTELPerformanceQuery")
            static let s_vkInitializePerformanceApiINTELDel = VkRaw.vkImportInstanceDelegate<VkInitializePerformanceApiINTELDel> "vkInitializePerformanceApiINTEL"
            static let s_vkUninitializePerformanceApiINTELDel = VkRaw.vkImportInstanceDelegate<VkUninitializePerformanceApiINTELDel> "vkUninitializePerformanceApiINTEL"
            static let s_vkCmdSetPerformanceMarkerINTELDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPerformanceMarkerINTELDel> "vkCmdSetPerformanceMarkerINTEL"
            static let s_vkCmdSetPerformanceStreamMarkerINTELDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPerformanceStreamMarkerINTELDel> "vkCmdSetPerformanceStreamMarkerINTEL"
            static let s_vkCmdSetPerformanceOverrideINTELDel = VkRaw.vkImportInstanceDelegate<VkCmdSetPerformanceOverrideINTELDel> "vkCmdSetPerformanceOverrideINTEL"
            static let s_vkAcquirePerformanceConfigurationINTELDel = VkRaw.vkImportInstanceDelegate<VkAcquirePerformanceConfigurationINTELDel> "vkAcquirePerformanceConfigurationINTEL"
            static let s_vkReleasePerformanceConfigurationINTELDel = VkRaw.vkImportInstanceDelegate<VkReleasePerformanceConfigurationINTELDel> "vkReleasePerformanceConfigurationINTEL"
            static let s_vkQueueSetPerformanceConfigurationINTELDel = VkRaw.vkImportInstanceDelegate<VkQueueSetPerformanceConfigurationINTELDel> "vkQueueSetPerformanceConfigurationINTEL"
            static let s_vkGetPerformanceParameterINTELDel = VkRaw.vkImportInstanceDelegate<VkGetPerformanceParameterINTELDel> "vkGetPerformanceParameterINTEL"
            static do Report.End(3) |> ignore
            static member vkInitializePerformanceApiINTEL = s_vkInitializePerformanceApiINTELDel
            static member vkUninitializePerformanceApiINTEL = s_vkUninitializePerformanceApiINTELDel
            static member vkCmdSetPerformanceMarkerINTEL = s_vkCmdSetPerformanceMarkerINTELDel
            static member vkCmdSetPerformanceStreamMarkerINTEL = s_vkCmdSetPerformanceStreamMarkerINTELDel
            static member vkCmdSetPerformanceOverrideINTEL = s_vkCmdSetPerformanceOverrideINTELDel
            static member vkAcquirePerformanceConfigurationINTEL = s_vkAcquirePerformanceConfigurationINTELDel
            static member vkReleasePerformanceConfigurationINTEL = s_vkReleasePerformanceConfigurationINTELDel
            static member vkQueueSetPerformanceConfigurationINTEL = s_vkQueueSetPerformanceConfigurationINTELDel
            static member vkGetPerformanceParameterINTEL = s_vkGetPerformanceParameterINTELDel
        let vkInitializePerformanceApiINTEL(device : VkDevice, pInitializeInfo : nativeptr<VkInitializePerformanceApiInfoINTEL>) = Loader<unit>.vkInitializePerformanceApiINTEL.Invoke(device, pInitializeInfo)
        let vkUninitializePerformanceApiINTEL(device : VkDevice) = Loader<unit>.vkUninitializePerformanceApiINTEL.Invoke(device)
        let vkCmdSetPerformanceMarkerINTEL(commandBuffer : VkCommandBuffer, pMarkerInfo : nativeptr<VkPerformanceMarkerInfoINTEL>) = Loader<unit>.vkCmdSetPerformanceMarkerINTEL.Invoke(commandBuffer, pMarkerInfo)
        let vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer : VkCommandBuffer, pMarkerInfo : nativeptr<VkPerformanceStreamMarkerInfoINTEL>) = Loader<unit>.vkCmdSetPerformanceStreamMarkerINTEL.Invoke(commandBuffer, pMarkerInfo)
        let vkCmdSetPerformanceOverrideINTEL(commandBuffer : VkCommandBuffer, pOverrideInfo : nativeptr<VkPerformanceOverrideInfoINTEL>) = Loader<unit>.vkCmdSetPerformanceOverrideINTEL.Invoke(commandBuffer, pOverrideInfo)
        let vkAcquirePerformanceConfigurationINTEL(device : VkDevice, pAcquireInfo : nativeptr<VkPerformanceConfigurationAcquireInfoINTEL>, pConfiguration : nativeptr<VkPerformanceConfigurationINTEL>) = Loader<unit>.vkAcquirePerformanceConfigurationINTEL.Invoke(device, pAcquireInfo, pConfiguration)
        let vkReleasePerformanceConfigurationINTEL(device : VkDevice, configuration : VkPerformanceConfigurationINTEL) = Loader<unit>.vkReleasePerformanceConfigurationINTEL.Invoke(device, configuration)
        let vkQueueSetPerformanceConfigurationINTEL(queue : VkQueue, configuration : VkPerformanceConfigurationINTEL) = Loader<unit>.vkQueueSetPerformanceConfigurationINTEL.Invoke(queue, configuration)
        let vkGetPerformanceParameterINTEL(device : VkDevice, parameter : VkPerformanceParameterTypeINTEL, pValue : nativeptr<VkPerformanceValueINTEL>) = Loader<unit>.vkGetPerformanceParameterINTEL.Invoke(device, parameter, pValue)

module INTELShaderIntegerFunctions2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_INTEL_shader_integer_functions2"
    let Number = 210

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderIntegerFunctions2 : VkBool32

            new(pNext : nativeint, shaderIntegerFunctions2 : VkBool32) =
                {
                    sType = 1000209000u
                    pNext = pNext
                    shaderIntegerFunctions2 = shaderIntegerFunctions2
                }

            new(shaderIntegerFunctions2 : VkBool32) =
                VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(Unchecked.defaultof<nativeint>, shaderIntegerFunctions2)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderIntegerFunctions2 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderIntegerFunctions2 = %A" x.shaderIntegerFunctions2
                ] |> sprintf "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL { %s }"
        end



module KHRStorageBufferStorageClass =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_storage_buffer_storage_class"
    let Number = 132


module KHR16bitStorage =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRStorageBufferStorageClass
    let Name = "VK_KHR_16bit_storage"
    let Number = 84

    let Required = [ KHRGetPhysicalDeviceProperties2.Name; KHRStorageBufferStorageClass.Name ]


    type VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures



module KHR8bitStorage =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRStorageBufferStorageClass
    let Name = "VK_KHR_8bit_storage"
    let Number = 178

    let Required = [ KHRGetPhysicalDeviceProperties2.Name; KHRStorageBufferStorageClass.Name ]


    type VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures



module KHRAndroidSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_KHR_android_surface"
    let Number = 9

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkAndroidSurfaceCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkAndroidSurfaceCreateFlagsKHR
            val mutable public window : nativeptr<nativeint>

            new(pNext : nativeint, flags : VkAndroidSurfaceCreateFlagsKHR, window : nativeptr<nativeint>) =
                {
                    sType = 1000008000u
                    pNext = pNext
                    flags = flags
                    window = window
                }

            new(flags : VkAndroidSurfaceCreateFlagsKHR, window : nativeptr<nativeint>) =
                VkAndroidSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, window)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkAndroidSurfaceCreateFlagsKHR> && x.window = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkAndroidSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAndroidSurfaceCreateFlagsKHR>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "window = %A" x.window
                ] |> sprintf "VkAndroidSurfaceCreateInfoKHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateAndroidSurfaceKHRDel = delegate of VkInstance * nativeptr<VkAndroidSurfaceCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRAndroidSurface")
            static let s_vkCreateAndroidSurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateAndroidSurfaceKHRDel> "vkCreateAndroidSurfaceKHR"
            static do Report.End(3) |> ignore
            static member vkCreateAndroidSurfaceKHR = s_vkCreateAndroidSurfaceKHRDel
        let vkCreateAndroidSurfaceKHR(instance : VkInstance, pCreateInfo : nativeptr<VkAndroidSurfaceCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateAndroidSurfaceKHR.Invoke(instance, pCreateInfo, pAllocator, pSurface)

module KHRCopyCommands2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_copy_commands2"
    let Number = 338


    type VkBlitImageInfo2KHR = VkBlitImageInfo2

    type VkBufferCopy2KHR = VkBufferCopy2

    type VkBufferImageCopy2KHR = VkBufferImageCopy2

    type VkCopyBufferInfo2KHR = VkCopyBufferInfo2

    type VkCopyBufferToImageInfo2KHR = VkCopyBufferToImageInfo2

    type VkCopyImageInfo2KHR = VkCopyImageInfo2

    type VkCopyImageToBufferInfo2KHR = VkCopyImageToBufferInfo2

    type VkImageBlit2KHR = VkImageBlit2

    type VkImageCopy2KHR = VkImageCopy2

    type VkImageResolve2KHR = VkImageResolve2

    type VkResolveImageInfo2KHR = VkResolveImageInfo2


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdCopyBuffer2KHRDel = delegate of VkCommandBuffer * nativeptr<VkCopyBufferInfo2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdCopyImage2KHRDel = delegate of VkCommandBuffer * nativeptr<VkCopyImageInfo2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdCopyBufferToImage2KHRDel = delegate of VkCommandBuffer * nativeptr<VkCopyBufferToImageInfo2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdCopyImageToBuffer2KHRDel = delegate of VkCommandBuffer * nativeptr<VkCopyImageToBufferInfo2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBlitImage2KHRDel = delegate of VkCommandBuffer * nativeptr<VkBlitImageInfo2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdResolveImage2KHRDel = delegate of VkCommandBuffer * nativeptr<VkResolveImageInfo2> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRCopyCommands2")
            static let s_vkCmdCopyBuffer2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyBuffer2KHRDel> "vkCmdCopyBuffer2KHR"
            static let s_vkCmdCopyImage2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyImage2KHRDel> "vkCmdCopyImage2KHR"
            static let s_vkCmdCopyBufferToImage2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyBufferToImage2KHRDel> "vkCmdCopyBufferToImage2KHR"
            static let s_vkCmdCopyImageToBuffer2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdCopyImageToBuffer2KHRDel> "vkCmdCopyImageToBuffer2KHR"
            static let s_vkCmdBlitImage2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBlitImage2KHRDel> "vkCmdBlitImage2KHR"
            static let s_vkCmdResolveImage2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdResolveImage2KHRDel> "vkCmdResolveImage2KHR"
            static do Report.End(3) |> ignore
            static member vkCmdCopyBuffer2KHR = s_vkCmdCopyBuffer2KHRDel
            static member vkCmdCopyImage2KHR = s_vkCmdCopyImage2KHRDel
            static member vkCmdCopyBufferToImage2KHR = s_vkCmdCopyBufferToImage2KHRDel
            static member vkCmdCopyImageToBuffer2KHR = s_vkCmdCopyImageToBuffer2KHRDel
            static member vkCmdBlitImage2KHR = s_vkCmdBlitImage2KHRDel
            static member vkCmdResolveImage2KHR = s_vkCmdResolveImage2KHRDel
        let vkCmdCopyBuffer2KHR(commandBuffer : VkCommandBuffer, pCopyBufferInfo : nativeptr<VkCopyBufferInfo2>) = Loader<unit>.vkCmdCopyBuffer2KHR.Invoke(commandBuffer, pCopyBufferInfo)
        let vkCmdCopyImage2KHR(commandBuffer : VkCommandBuffer, pCopyImageInfo : nativeptr<VkCopyImageInfo2>) = Loader<unit>.vkCmdCopyImage2KHR.Invoke(commandBuffer, pCopyImageInfo)
        let vkCmdCopyBufferToImage2KHR(commandBuffer : VkCommandBuffer, pCopyBufferToImageInfo : nativeptr<VkCopyBufferToImageInfo2>) = Loader<unit>.vkCmdCopyBufferToImage2KHR.Invoke(commandBuffer, pCopyBufferToImageInfo)
        let vkCmdCopyImageToBuffer2KHR(commandBuffer : VkCommandBuffer, pCopyImageToBufferInfo : nativeptr<VkCopyImageToBufferInfo2>) = Loader<unit>.vkCmdCopyImageToBuffer2KHR.Invoke(commandBuffer, pCopyImageToBufferInfo)
        let vkCmdBlitImage2KHR(commandBuffer : VkCommandBuffer, pBlitImageInfo : nativeptr<VkBlitImageInfo2>) = Loader<unit>.vkCmdBlitImage2KHR.Invoke(commandBuffer, pBlitImageInfo)
        let vkCmdResolveImage2KHR(commandBuffer : VkCommandBuffer, pResolveImageInfo : nativeptr<VkResolveImageInfo2>) = Loader<unit>.vkCmdResolveImage2KHR.Invoke(commandBuffer, pResolveImageInfo)

module KHRPushDescriptor =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_push_descriptor"
    let Number = 81

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePushDescriptorPropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxPushDescriptors : uint32

            new(pNext : nativeint, maxPushDescriptors : uint32) =
                {
                    sType = 1000080000u
                    pNext = pNext
                    maxPushDescriptors = maxPushDescriptors
                }

            new(maxPushDescriptors : uint32) =
                VkPhysicalDevicePushDescriptorPropertiesKHR(Unchecked.defaultof<nativeint>, maxPushDescriptors)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxPushDescriptors = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDevicePushDescriptorPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxPushDescriptors = %A" x.maxPushDescriptors
                ] |> sprintf "VkPhysicalDevicePushDescriptorPropertiesKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkDescriptorSetLayoutCreateFlags with
              /// Descriptors are pushed via flink:vkCmdPushDescriptorSetKHR
              static member inline PushDescriptorBitKhr = unbox<VkDescriptorSetLayoutCreateFlags> 0x00000001

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdPushDescriptorSetKHRDel = delegate of VkCommandBuffer * VkPipelineBindPoint * VkPipelineLayout * uint32 * uint32 * nativeptr<VkWriteDescriptorSet> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRPushDescriptor")
            static let s_vkCmdPushDescriptorSetKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdPushDescriptorSetKHRDel> "vkCmdPushDescriptorSetKHR"
            static do Report.End(3) |> ignore
            static member vkCmdPushDescriptorSetKHR = s_vkCmdPushDescriptorSetKHRDel
        let vkCmdPushDescriptorSetKHR(commandBuffer : VkCommandBuffer, pipelineBindPoint : VkPipelineBindPoint, layout : VkPipelineLayout, set : uint32, descriptorWriteCount : uint32, pDescriptorWrites : nativeptr<VkWriteDescriptorSet>) = Loader<unit>.vkCmdPushDescriptorSetKHR.Invoke(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites)

    module Vulkan11 =
        [<AutoOpen>]
        module EnumExtensions =
             type VkDescriptorUpdateTemplateType with
                  /// Create descriptor update template for pushed descriptor updates
                  static member inline PushDescriptorsKhr = unbox<VkDescriptorUpdateTemplateType> 1

        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdPushDescriptorSetWithTemplateKHRDel = delegate of VkCommandBuffer * VkDescriptorUpdateTemplate * VkPipelineLayout * uint32 * nativeint -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'d> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRPushDescriptor")
                static let s_vkCmdPushDescriptorSetWithTemplateKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdPushDescriptorSetWithTemplateKHRDel> "vkCmdPushDescriptorSetWithTemplateKHR"
                static do Report.End(3) |> ignore
                static member vkCmdPushDescriptorSetWithTemplateKHR = s_vkCmdPushDescriptorSetWithTemplateKHRDel
            let vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer : VkCommandBuffer, descriptorUpdateTemplate : VkDescriptorUpdateTemplate, layout : VkPipelineLayout, set : uint32, pData : nativeint) = Loader<unit>.vkCmdPushDescriptorSetWithTemplateKHR.Invoke(commandBuffer, descriptorUpdateTemplate, layout, set, pData)

    module KHRDescriptorUpdateTemplate =
        [<AutoOpen>]
        module EnumExtensions =
             type VkDescriptorUpdateTemplateType with
                  /// Create descriptor update template for pushed descriptor updates
                  static member inline PushDescriptorsKhr = unbox<VkDescriptorUpdateTemplateType> 1

        module VkRaw =
            let vkCmdPushDescriptorSetWithTemplateKHR = Vulkan11.VkRaw.vkCmdPushDescriptorSetWithTemplateKHR

module KHRDescriptorUpdateTemplate =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    let Name = "VK_KHR_descriptor_update_template"
    let Number = 86


    type VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate
    type VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags
    type VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType

    type VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo

    type VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry


    [<AutoOpen>]
    module EnumExtensions =
         type VkDescriptorUpdateTemplateType with
              static member inline DescriptorSetKhr = unbox<VkDescriptorUpdateTemplateType> 0
         type VkObjectType with
              static member inline DescriptorUpdateTemplateKhr = unbox<VkObjectType> 1000085000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateDescriptorUpdateTemplateKHRDel = delegate of VkDevice * nativeptr<VkDescriptorUpdateTemplateCreateInfo> * nativeptr<VkAllocationCallbacks> * nativeptr<VkDescriptorUpdateTemplate> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyDescriptorUpdateTemplateKHRDel = delegate of VkDevice * VkDescriptorUpdateTemplate * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkUpdateDescriptorSetWithTemplateKHRDel = delegate of VkDevice * VkDescriptorSet * VkDescriptorUpdateTemplate * nativeint -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRDescriptorUpdateTemplate")
            static let s_vkCreateDescriptorUpdateTemplateKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateDescriptorUpdateTemplateKHRDel> "vkCreateDescriptorUpdateTemplateKHR"
            static let s_vkDestroyDescriptorUpdateTemplateKHRDel = VkRaw.vkImportInstanceDelegate<VkDestroyDescriptorUpdateTemplateKHRDel> "vkDestroyDescriptorUpdateTemplateKHR"
            static let s_vkUpdateDescriptorSetWithTemplateKHRDel = VkRaw.vkImportInstanceDelegate<VkUpdateDescriptorSetWithTemplateKHRDel> "vkUpdateDescriptorSetWithTemplateKHR"
            static do Report.End(3) |> ignore
            static member vkCreateDescriptorUpdateTemplateKHR = s_vkCreateDescriptorUpdateTemplateKHRDel
            static member vkDestroyDescriptorUpdateTemplateKHR = s_vkDestroyDescriptorUpdateTemplateKHRDel
            static member vkUpdateDescriptorSetWithTemplateKHR = s_vkUpdateDescriptorSetWithTemplateKHRDel
        let vkCreateDescriptorUpdateTemplateKHR(device : VkDevice, pCreateInfo : nativeptr<VkDescriptorUpdateTemplateCreateInfo>, pAllocator : nativeptr<VkAllocationCallbacks>, pDescriptorUpdateTemplate : nativeptr<VkDescriptorUpdateTemplate>) = Loader<unit>.vkCreateDescriptorUpdateTemplateKHR.Invoke(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate)
        let vkDestroyDescriptorUpdateTemplateKHR(device : VkDevice, descriptorUpdateTemplate : VkDescriptorUpdateTemplate, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyDescriptorUpdateTemplateKHR.Invoke(device, descriptorUpdateTemplate, pAllocator)
        let vkUpdateDescriptorSetWithTemplateKHR(device : VkDevice, descriptorSet : VkDescriptorSet, descriptorUpdateTemplate : VkDescriptorUpdateTemplate, pData : nativeint) = Loader<unit>.vkUpdateDescriptorSetWithTemplateKHR.Invoke(device, descriptorSet, descriptorUpdateTemplate, pData)

    module KHRPushDescriptor =
        [<AutoOpen>]
        module EnumExtensions =
             type VkDescriptorUpdateTemplateType with
                  /// Create descriptor update template for pushed descriptor updates
                  static member inline PushDescriptorsKhr = unbox<VkDescriptorUpdateTemplateType> 1

        module VkRaw =
            let vkCmdPushDescriptorSetWithTemplateKHR = KHRPushDescriptor.Vulkan11.VkRaw.vkCmdPushDescriptorSetWithTemplateKHR

    module EXTDebugReport =
        [<AutoOpen>]
        module EnumExtensions =
             type VkDebugReportObjectTypeEXT with
                  static member inline DescriptorUpdateTemplateKhr = unbox<VkDebugReportObjectTypeEXT> 1000085000


module KHRDisplaySwapchain =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRDisplay
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_KHR_display_swapchain"
    let Number = 4

    let Required = [ KHRDisplay.Name; KHRSwapchain.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayPresentInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public srcRect : VkRect2D
            val mutable public dstRect : VkRect2D
            val mutable public persistent : VkBool32

            new(pNext : nativeint, srcRect : VkRect2D, dstRect : VkRect2D, persistent : VkBool32) =
                {
                    sType = 1000003000u
                    pNext = pNext
                    srcRect = srcRect
                    dstRect = dstRect
                    persistent = persistent
                }

            new(srcRect : VkRect2D, dstRect : VkRect2D, persistent : VkBool32) =
                VkDisplayPresentInfoKHR(Unchecked.defaultof<nativeint>, srcRect, dstRect, persistent)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.srcRect = Unchecked.defaultof<VkRect2D> && x.dstRect = Unchecked.defaultof<VkRect2D> && x.persistent = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkDisplayPresentInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkRect2D>, Unchecked.defaultof<VkRect2D>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "srcRect = %A" x.srcRect
                    sprintf "dstRect = %A" x.dstRect
                    sprintf "persistent = %A" x.persistent
                ] |> sprintf "VkDisplayPresentInfoKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkResult with
              static member inline ErrorIncompatibleDisplayKhr = unbox<VkResult> -1000003001

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateSharedSwapchainsKHRDel = delegate of VkDevice * uint32 * nativeptr<VkSwapchainCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSwapchainKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRDisplaySwapchain")
            static let s_vkCreateSharedSwapchainsKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateSharedSwapchainsKHRDel> "vkCreateSharedSwapchainsKHR"
            static do Report.End(3) |> ignore
            static member vkCreateSharedSwapchainsKHR = s_vkCreateSharedSwapchainsKHRDel
        let vkCreateSharedSwapchainsKHR(device : VkDevice, swapchainCount : uint32, pCreateInfos : nativeptr<VkSwapchainCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSwapchains : nativeptr<VkSwapchainKHR>) = Loader<unit>.vkCreateSharedSwapchainsKHR.Invoke(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains)

module KHRDrawIndirectCount =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_draw_indirect_count"
    let Number = 170


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDrawIndirectCountKHRDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdDrawIndexedIndirectCountKHRDel = delegate of VkCommandBuffer * VkBuffer * VkDeviceSize * VkBuffer * VkDeviceSize * uint32 * uint32 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRDrawIndirectCount")
            static let s_vkCmdDrawIndirectCountKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawIndirectCountKHRDel> "vkCmdDrawIndirectCountKHR"
            static let s_vkCmdDrawIndexedIndirectCountKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdDrawIndexedIndirectCountKHRDel> "vkCmdDrawIndexedIndirectCountKHR"
            static do Report.End(3) |> ignore
            static member vkCmdDrawIndirectCountKHR = s_vkCmdDrawIndirectCountKHRDel
            static member vkCmdDrawIndexedIndirectCountKHR = s_vkCmdDrawIndexedIndirectCountKHRDel
        let vkCmdDrawIndirectCountKHR(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, countBuffer : VkBuffer, countBufferOffset : VkDeviceSize, maxDrawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawIndirectCountKHR.Invoke(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
        let vkCmdDrawIndexedIndirectCountKHR(commandBuffer : VkCommandBuffer, buffer : VkBuffer, offset : VkDeviceSize, countBuffer : VkBuffer, countBufferOffset : VkDeviceSize, maxDrawCount : uint32, stride : uint32) = Loader<unit>.vkCmdDrawIndexedIndirectCountKHR.Invoke(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)

module KHRDriverProperties =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_driver_properties"
    let Number = 197

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkDriverIdKHR = VkDriverId

    type VkConformanceVersionKHR = VkConformanceVersion

    type VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties


    [<AutoOpen>]
    module EnumExtensions =
         type VkDriverId with
              static member inline AmdProprietaryKhr = unbox<VkDriverId> 1
              static member inline AmdOpenSourceKhr = unbox<VkDriverId> 2
              static member inline MesaRadvKhr = unbox<VkDriverId> 3
              static member inline NvidiaProprietaryKhr = unbox<VkDriverId> 4
              static member inline IntelProprietaryWindowsKhr = unbox<VkDriverId> 5
              static member inline IntelOpenSourceMesaKhr = unbox<VkDriverId> 6
              static member inline ImaginationProprietaryKhr = unbox<VkDriverId> 7
              static member inline QualcommProprietaryKhr = unbox<VkDriverId> 8
              static member inline ArmProprietaryKhr = unbox<VkDriverId> 9
              static member inline GoogleSwiftshaderKhr = unbox<VkDriverId> 10
              static member inline GgpProprietaryKhr = unbox<VkDriverId> 11
              static member inline BroadcomProprietaryKhr = unbox<VkDriverId> 12


module NVFramebufferMixedSamples =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_framebuffer_mixed_samples"
    let Number = 153


    type VkCoverageModulationModeNV =
        | None = 0
        | Rgb = 1
        | Alpha = 2
        | Rgba = 3


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineCoverageModulationStateCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPipelineCoverageModulationStateCreateFlagsNV
            val mutable public coverageModulationMode : VkCoverageModulationModeNV
            val mutable public coverageModulationTableEnable : VkBool32
            val mutable public coverageModulationTableCount : uint32
            val mutable public pCoverageModulationTable : nativeptr<float32>

            new(pNext : nativeint, flags : VkPipelineCoverageModulationStateCreateFlagsNV, coverageModulationMode : VkCoverageModulationModeNV, coverageModulationTableEnable : VkBool32, coverageModulationTableCount : uint32, pCoverageModulationTable : nativeptr<float32>) =
                {
                    sType = 1000152000u
                    pNext = pNext
                    flags = flags
                    coverageModulationMode = coverageModulationMode
                    coverageModulationTableEnable = coverageModulationTableEnable
                    coverageModulationTableCount = coverageModulationTableCount
                    pCoverageModulationTable = pCoverageModulationTable
                }

            new(flags : VkPipelineCoverageModulationStateCreateFlagsNV, coverageModulationMode : VkCoverageModulationModeNV, coverageModulationTableEnable : VkBool32, coverageModulationTableCount : uint32, pCoverageModulationTable : nativeptr<float32>) =
                VkPipelineCoverageModulationStateCreateInfoNV(Unchecked.defaultof<nativeint>, flags, coverageModulationMode, coverageModulationTableEnable, coverageModulationTableCount, pCoverageModulationTable)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCoverageModulationStateCreateFlagsNV> && x.coverageModulationMode = Unchecked.defaultof<VkCoverageModulationModeNV> && x.coverageModulationTableEnable = Unchecked.defaultof<VkBool32> && x.coverageModulationTableCount = Unchecked.defaultof<uint32> && x.pCoverageModulationTable = Unchecked.defaultof<nativeptr<float32>>

            static member Empty =
                VkPipelineCoverageModulationStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCoverageModulationStateCreateFlagsNV>, Unchecked.defaultof<VkCoverageModulationModeNV>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<float32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "coverageModulationMode = %A" x.coverageModulationMode
                    sprintf "coverageModulationTableEnable = %A" x.coverageModulationTableEnable
                    sprintf "coverageModulationTableCount = %A" x.coverageModulationTableCount
                    sprintf "pCoverageModulationTable = %A" x.pCoverageModulationTable
                ] |> sprintf "VkPipelineCoverageModulationStateCreateInfoNV { %s }"
        end



module NVXMultiviewPerViewAttributes =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRMultiview
    let Name = "VK_NVX_multiview_per_view_attributes"
    let Number = 98

    let Required = [ KHRMultiview.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public perViewPositionAllComponents : VkBool32

            new(pNext : nativeint, perViewPositionAllComponents : VkBool32) =
                {
                    sType = 1000097000u
                    pNext = pNext
                    perViewPositionAllComponents = perViewPositionAllComponents
                }

            new(perViewPositionAllComponents : VkBool32) =
                VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(Unchecked.defaultof<nativeint>, perViewPositionAllComponents)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.perViewPositionAllComponents = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "perViewPositionAllComponents = %A" x.perViewPositionAllComponents
                ] |> sprintf "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkSubpassDescriptionFlags with
              static member inline PerViewAttributesBitNvx = unbox<VkSubpassDescriptionFlags> 0x00000001
              static member inline PerViewPositionXOnlyBitNvx = unbox<VkSubpassDescriptionFlags> 0x00000002


module KHRDynamicRendering =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRCreateRenderpass2
    open KHRDepthStencilResolve
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance2
    open KHRMultiview
    let Name = "VK_KHR_dynamic_rendering"
    let Number = 45

    let Required = [ KHRDepthStencilResolve.Name; KHRGetPhysicalDeviceProperties2.Name ]


    type VkRenderingFlagsKHR = VkRenderingFlags

    type VkCommandBufferInheritanceRenderingInfoKHR = VkCommandBufferInheritanceRenderingInfo

    type VkPhysicalDeviceDynamicRenderingFeaturesKHR = VkPhysicalDeviceDynamicRenderingFeatures

    type VkPipelineRenderingCreateInfoKHR = VkPipelineRenderingCreateInfo

    type VkRenderingAttachmentInfoKHR = VkRenderingAttachmentInfo

    type VkRenderingInfoKHR = VkRenderingInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkAttachmentStoreOp with
              static member inline NoneKhr = unbox<VkAttachmentStoreOp> 1000301000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdBeginRenderingKHRDel = delegate of VkCommandBuffer * nativeptr<VkRenderingInfo> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdEndRenderingKHRDel = delegate of VkCommandBuffer -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRDynamicRendering")
            static let s_vkCmdBeginRenderingKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdBeginRenderingKHRDel> "vkCmdBeginRenderingKHR"
            static let s_vkCmdEndRenderingKHRDel = VkRaw.vkImportInstanceDelegate<VkCmdEndRenderingKHRDel> "vkCmdEndRenderingKHR"
            static do Report.End(3) |> ignore
            static member vkCmdBeginRenderingKHR = s_vkCmdBeginRenderingKHRDel
            static member vkCmdEndRenderingKHR = s_vkCmdEndRenderingKHRDel
        let vkCmdBeginRenderingKHR(commandBuffer : VkCommandBuffer, pRenderingInfo : nativeptr<VkRenderingInfo>) = Loader<unit>.vkCmdBeginRenderingKHR.Invoke(commandBuffer, pRenderingInfo)
        let vkCmdEndRenderingKHR(commandBuffer : VkCommandBuffer) = Loader<unit>.vkCmdEndRenderingKHR.Invoke(commandBuffer)

    module KHRFragmentShadingRate =
        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderingFragmentShadingRateAttachmentInfoKHR =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageView : VkImageView
                val mutable public imageLayout : VkImageLayout
                val mutable public shadingRateAttachmentTexelSize : VkExtent2D

                new(pNext : nativeint, imageView : VkImageView, imageLayout : VkImageLayout, shadingRateAttachmentTexelSize : VkExtent2D) =
                    {
                        sType = 1000044006u
                        pNext = pNext
                        imageView = imageView
                        imageLayout = imageLayout
                        shadingRateAttachmentTexelSize = shadingRateAttachmentTexelSize
                    }

                new(imageView : VkImageView, imageLayout : VkImageLayout, shadingRateAttachmentTexelSize : VkExtent2D) =
                    VkRenderingFragmentShadingRateAttachmentInfoKHR(Unchecked.defaultof<nativeint>, imageView, imageLayout, shadingRateAttachmentTexelSize)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageView = Unchecked.defaultof<VkImageView> && x.imageLayout = Unchecked.defaultof<VkImageLayout> && x.shadingRateAttachmentTexelSize = Unchecked.defaultof<VkExtent2D>

                static member Empty =
                    VkRenderingFragmentShadingRateAttachmentInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkImageLayout>, Unchecked.defaultof<VkExtent2D>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageView = %A" x.imageView
                        sprintf "imageLayout = %A" x.imageLayout
                        sprintf "shadingRateAttachmentTexelSize = %A" x.shadingRateAttachmentTexelSize
                    ] |> sprintf "VkRenderingFragmentShadingRateAttachmentInfoKHR { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineCreateFlags with
                  static member inline RenderingFragmentShadingRateAttachmentBitKhr = unbox<VkPipelineCreateFlags> 0x00200000


    module EXTFragmentDensityMap =
        [<StructLayout(LayoutKind.Sequential)>]
        type VkRenderingFragmentDensityMapAttachmentInfoEXT =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public imageView : VkImageView
                val mutable public imageLayout : VkImageLayout

                new(pNext : nativeint, imageView : VkImageView, imageLayout : VkImageLayout) =
                    {
                        sType = 1000044007u
                        pNext = pNext
                        imageView = imageView
                        imageLayout = imageLayout
                    }

                new(imageView : VkImageView, imageLayout : VkImageLayout) =
                    VkRenderingFragmentDensityMapAttachmentInfoEXT(Unchecked.defaultof<nativeint>, imageView, imageLayout)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.imageView = Unchecked.defaultof<VkImageView> && x.imageLayout = Unchecked.defaultof<VkImageLayout>

                static member Empty =
                    VkRenderingFragmentDensityMapAttachmentInfoEXT(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkImageLayout>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "imageView = %A" x.imageView
                        sprintf "imageLayout = %A" x.imageLayout
                    ] |> sprintf "VkRenderingFragmentDensityMapAttachmentInfoEXT { %s }"
            end


        [<AutoOpen>]
        module EnumExtensions =
             type VkPipelineCreateFlags with
                  static member inline RenderingFragmentDensityMapAttachmentBitExt = unbox<VkPipelineCreateFlags> 0x00400000


    module AMDMixedAttachmentSamples =
        [<StructLayout(LayoutKind.Sequential)>]
        type VkAttachmentSampleCountInfoAMD =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public colorAttachmentCount : uint32
                val mutable public pColorAttachmentSamples : nativeptr<VkSampleCountFlags>
                val mutable public depthStencilAttachmentSamples : VkSampleCountFlags

                new(pNext : nativeint, colorAttachmentCount : uint32, pColorAttachmentSamples : nativeptr<VkSampleCountFlags>, depthStencilAttachmentSamples : VkSampleCountFlags) =
                    {
                        sType = 1000044008u
                        pNext = pNext
                        colorAttachmentCount = colorAttachmentCount
                        pColorAttachmentSamples = pColorAttachmentSamples
                        depthStencilAttachmentSamples = depthStencilAttachmentSamples
                    }

                new(colorAttachmentCount : uint32, pColorAttachmentSamples : nativeptr<VkSampleCountFlags>, depthStencilAttachmentSamples : VkSampleCountFlags) =
                    VkAttachmentSampleCountInfoAMD(Unchecked.defaultof<nativeint>, colorAttachmentCount, pColorAttachmentSamples, depthStencilAttachmentSamples)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.colorAttachmentCount = Unchecked.defaultof<uint32> && x.pColorAttachmentSamples = Unchecked.defaultof<nativeptr<VkSampleCountFlags>> && x.depthStencilAttachmentSamples = Unchecked.defaultof<VkSampleCountFlags>

                static member Empty =
                    VkAttachmentSampleCountInfoAMD(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkSampleCountFlags>>, Unchecked.defaultof<VkSampleCountFlags>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "colorAttachmentCount = %A" x.colorAttachmentCount
                        sprintf "pColorAttachmentSamples = %A" x.pColorAttachmentSamples
                        sprintf "depthStencilAttachmentSamples = %A" x.depthStencilAttachmentSamples
                    ] |> sprintf "VkAttachmentSampleCountInfoAMD { %s }"
            end



    module NVFramebufferMixedSamples =
        type VkAttachmentSampleCountInfoNV = VkAttachmentSampleCountInfoAMD



    module NVXMultiviewPerViewAttributes =
        [<StructLayout(LayoutKind.Sequential)>]
        type VkMultiviewPerViewAttributesInfoNVX =
            struct
                val mutable public sType : uint32
                val mutable public pNext : nativeint
                val mutable public perViewAttributes : VkBool32
                val mutable public perViewAttributesPositionXOnly : VkBool32

                new(pNext : nativeint, perViewAttributes : VkBool32, perViewAttributesPositionXOnly : VkBool32) =
                    {
                        sType = 1000044009u
                        pNext = pNext
                        perViewAttributes = perViewAttributes
                        perViewAttributesPositionXOnly = perViewAttributesPositionXOnly
                    }

                new(perViewAttributes : VkBool32, perViewAttributesPositionXOnly : VkBool32) =
                    VkMultiviewPerViewAttributesInfoNVX(Unchecked.defaultof<nativeint>, perViewAttributes, perViewAttributesPositionXOnly)

                member x.IsEmpty =
                    x.pNext = Unchecked.defaultof<nativeint> && x.perViewAttributes = Unchecked.defaultof<VkBool32> && x.perViewAttributesPositionXOnly = Unchecked.defaultof<VkBool32>

                static member Empty =
                    VkMultiviewPerViewAttributesInfoNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "sType = %A" x.sType
                        sprintf "pNext = %A" x.pNext
                        sprintf "perViewAttributes = %A" x.perViewAttributes
                        sprintf "perViewAttributesPositionXOnly = %A" x.perViewAttributesPositionXOnly
                    ] |> sprintf "VkMultiviewPerViewAttributesInfoNVX { %s }"
            end



module KHRExternalFenceCapabilities =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_external_fence_capabilities"
    let Number = 113

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags
    type VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags

    type VkExternalFencePropertiesKHR = VkExternalFenceProperties

    type VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo

    type VkPhysicalDeviceIDPropertiesKHR = KHRExternalMemoryCapabilities.VkPhysicalDeviceIDPropertiesKHR


    [<AutoOpen>]
    module EnumExtensions =
         type VkExternalFenceFeatureFlags with
              static member inline ExportableBitKhr = unbox<VkExternalFenceFeatureFlags> 0x00000001
              static member inline ImportableBitKhr = unbox<VkExternalFenceFeatureFlags> 0x00000002
         type VkExternalFenceHandleTypeFlags with
              static member inline OpaqueFdBitKhr = unbox<VkExternalFenceHandleTypeFlags> 0x00000001
              static member inline OpaqueWin32BitKhr = unbox<VkExternalFenceHandleTypeFlags> 0x00000002
              static member inline OpaqueWin32KmtBitKhr = unbox<VkExternalFenceHandleTypeFlags> 0x00000004
              static member inline SyncFdBitKhr = unbox<VkExternalFenceHandleTypeFlags> 0x00000008

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceExternalFencePropertiesKHRDel = delegate of VkPhysicalDevice * nativeptr<VkPhysicalDeviceExternalFenceInfo> * nativeptr<VkExternalFenceProperties> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRExternalFenceCapabilities")
            static let s_vkGetPhysicalDeviceExternalFencePropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceExternalFencePropertiesKHRDel> "vkGetPhysicalDeviceExternalFencePropertiesKHR"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceExternalFencePropertiesKHR = s_vkGetPhysicalDeviceExternalFencePropertiesKHRDel
        let vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice : VkPhysicalDevice, pExternalFenceInfo : nativeptr<VkPhysicalDeviceExternalFenceInfo>, pExternalFenceProperties : nativeptr<VkExternalFenceProperties>) = Loader<unit>.vkGetPhysicalDeviceExternalFencePropertiesKHR.Invoke(physicalDevice, pExternalFenceInfo, pExternalFenceProperties)

module KHRExternalFence =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalFenceCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_external_fence"
    let Number = 114

    let Required = [ KHRExternalFenceCapabilities.Name ]


    type VkFenceImportFlagsKHR = VkFenceImportFlags

    type VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkFenceImportFlags with
              static member inline TemporaryBitKhr = unbox<VkFenceImportFlags> 0x00000001


module KHRExternalFenceFd =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalFence
    open KHRExternalFenceCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_external_fence_fd"
    let Number = 116

    let Required = [ KHRExternalFence.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkFenceGetFdInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fence : VkFence
            val mutable public handleType : VkExternalFenceHandleTypeFlags

            new(pNext : nativeint, fence : VkFence, handleType : VkExternalFenceHandleTypeFlags) =
                {
                    sType = 1000115001u
                    pNext = pNext
                    fence = fence
                    handleType = handleType
                }

            new(fence : VkFence, handleType : VkExternalFenceHandleTypeFlags) =
                VkFenceGetFdInfoKHR(Unchecked.defaultof<nativeint>, fence, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fence = Unchecked.defaultof<VkFence> && x.handleType = Unchecked.defaultof<VkExternalFenceHandleTypeFlags>

            static member Empty =
                VkFenceGetFdInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFence>, Unchecked.defaultof<VkExternalFenceHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fence = %A" x.fence
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkFenceGetFdInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportFenceFdInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fence : VkFence
            val mutable public flags : VkFenceImportFlags
            val mutable public handleType : VkExternalFenceHandleTypeFlags
            val mutable public fd : int

            new(pNext : nativeint, fence : VkFence, flags : VkFenceImportFlags, handleType : VkExternalFenceHandleTypeFlags, fd : int) =
                {
                    sType = 1000115000u
                    pNext = pNext
                    fence = fence
                    flags = flags
                    handleType = handleType
                    fd = fd
                }

            new(fence : VkFence, flags : VkFenceImportFlags, handleType : VkExternalFenceHandleTypeFlags, fd : int) =
                VkImportFenceFdInfoKHR(Unchecked.defaultof<nativeint>, fence, flags, handleType, fd)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fence = Unchecked.defaultof<VkFence> && x.flags = Unchecked.defaultof<VkFenceImportFlags> && x.handleType = Unchecked.defaultof<VkExternalFenceHandleTypeFlags> && x.fd = Unchecked.defaultof<int>

            static member Empty =
                VkImportFenceFdInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFence>, Unchecked.defaultof<VkFenceImportFlags>, Unchecked.defaultof<VkExternalFenceHandleTypeFlags>, Unchecked.defaultof<int>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fence = %A" x.fence
                    sprintf "flags = %A" x.flags
                    sprintf "handleType = %A" x.handleType
                    sprintf "fd = %A" x.fd
                ] |> sprintf "VkImportFenceFdInfoKHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkImportFenceFdKHRDel = delegate of VkDevice * nativeptr<VkImportFenceFdInfoKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetFenceFdKHRDel = delegate of VkDevice * nativeptr<VkFenceGetFdInfoKHR> * nativeptr<int> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRExternalFenceFd")
            static let s_vkImportFenceFdKHRDel = VkRaw.vkImportInstanceDelegate<VkImportFenceFdKHRDel> "vkImportFenceFdKHR"
            static let s_vkGetFenceFdKHRDel = VkRaw.vkImportInstanceDelegate<VkGetFenceFdKHRDel> "vkGetFenceFdKHR"
            static do Report.End(3) |> ignore
            static member vkImportFenceFdKHR = s_vkImportFenceFdKHRDel
            static member vkGetFenceFdKHR = s_vkGetFenceFdKHRDel
        let vkImportFenceFdKHR(device : VkDevice, pImportFenceFdInfo : nativeptr<VkImportFenceFdInfoKHR>) = Loader<unit>.vkImportFenceFdKHR.Invoke(device, pImportFenceFdInfo)
        let vkGetFenceFdKHR(device : VkDevice, pGetFdInfo : nativeptr<VkFenceGetFdInfoKHR>, pFd : nativeptr<int>) = Loader<unit>.vkGetFenceFdKHR.Invoke(device, pGetFdInfo, pFd)

module KHRExternalFenceWin32 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalFence
    open KHRExternalFenceCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_external_fence_win32"
    let Number = 115

    let Required = [ KHRExternalFence.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportFenceWin32HandleInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pAttributes : nativeptr<nativeint>
            val mutable public dwAccess : uint32
            val mutable public name : cstr

            new(pNext : nativeint, pAttributes : nativeptr<nativeint>, dwAccess : uint32, name : cstr) =
                {
                    sType = 1000114001u
                    pNext = pNext
                    pAttributes = pAttributes
                    dwAccess = dwAccess
                    name = name
                }

            new(pAttributes : nativeptr<nativeint>, dwAccess : uint32, name : cstr) =
                VkExportFenceWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, pAttributes, dwAccess, name)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pAttributes = Unchecked.defaultof<nativeptr<nativeint>> && x.dwAccess = Unchecked.defaultof<uint32> && x.name = Unchecked.defaultof<cstr>

            static member Empty =
                VkExportFenceWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<cstr>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pAttributes = %A" x.pAttributes
                    sprintf "dwAccess = %A" x.dwAccess
                    sprintf "name = %A" x.name
                ] |> sprintf "VkExportFenceWin32HandleInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkFenceGetWin32HandleInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fence : VkFence
            val mutable public handleType : VkExternalFenceHandleTypeFlags

            new(pNext : nativeint, fence : VkFence, handleType : VkExternalFenceHandleTypeFlags) =
                {
                    sType = 1000114002u
                    pNext = pNext
                    fence = fence
                    handleType = handleType
                }

            new(fence : VkFence, handleType : VkExternalFenceHandleTypeFlags) =
                VkFenceGetWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, fence, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fence = Unchecked.defaultof<VkFence> && x.handleType = Unchecked.defaultof<VkExternalFenceHandleTypeFlags>

            static member Empty =
                VkFenceGetWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFence>, Unchecked.defaultof<VkExternalFenceHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fence = %A" x.fence
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkFenceGetWin32HandleInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportFenceWin32HandleInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fence : VkFence
            val mutable public flags : VkFenceImportFlags
            val mutable public handleType : VkExternalFenceHandleTypeFlags
            val mutable public handle : nativeint
            val mutable public name : cstr

            new(pNext : nativeint, fence : VkFence, flags : VkFenceImportFlags, handleType : VkExternalFenceHandleTypeFlags, handle : nativeint, name : cstr) =
                {
                    sType = 1000114000u
                    pNext = pNext
                    fence = fence
                    flags = flags
                    handleType = handleType
                    handle = handle
                    name = name
                }

            new(fence : VkFence, flags : VkFenceImportFlags, handleType : VkExternalFenceHandleTypeFlags, handle : nativeint, name : cstr) =
                VkImportFenceWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, fence, flags, handleType, handle, name)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fence = Unchecked.defaultof<VkFence> && x.flags = Unchecked.defaultof<VkFenceImportFlags> && x.handleType = Unchecked.defaultof<VkExternalFenceHandleTypeFlags> && x.handle = Unchecked.defaultof<nativeint> && x.name = Unchecked.defaultof<cstr>

            static member Empty =
                VkImportFenceWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFence>, Unchecked.defaultof<VkFenceImportFlags>, Unchecked.defaultof<VkExternalFenceHandleTypeFlags>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fence = %A" x.fence
                    sprintf "flags = %A" x.flags
                    sprintf "handleType = %A" x.handleType
                    sprintf "handle = %A" x.handle
                    sprintf "name = %A" x.name
                ] |> sprintf "VkImportFenceWin32HandleInfoKHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkImportFenceWin32HandleKHRDel = delegate of VkDevice * nativeptr<VkImportFenceWin32HandleInfoKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetFenceWin32HandleKHRDel = delegate of VkDevice * nativeptr<VkFenceGetWin32HandleInfoKHR> * nativeptr<nativeint> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRExternalFenceWin32")
            static let s_vkImportFenceWin32HandleKHRDel = VkRaw.vkImportInstanceDelegate<VkImportFenceWin32HandleKHRDel> "vkImportFenceWin32HandleKHR"
            static let s_vkGetFenceWin32HandleKHRDel = VkRaw.vkImportInstanceDelegate<VkGetFenceWin32HandleKHRDel> "vkGetFenceWin32HandleKHR"
            static do Report.End(3) |> ignore
            static member vkImportFenceWin32HandleKHR = s_vkImportFenceWin32HandleKHRDel
            static member vkGetFenceWin32HandleKHR = s_vkGetFenceWin32HandleKHRDel
        let vkImportFenceWin32HandleKHR(device : VkDevice, pImportFenceWin32HandleInfo : nativeptr<VkImportFenceWin32HandleInfoKHR>) = Loader<unit>.vkImportFenceWin32HandleKHR.Invoke(device, pImportFenceWin32HandleInfo)
        let vkGetFenceWin32HandleKHR(device : VkDevice, pGetWin32HandleInfo : nativeptr<VkFenceGetWin32HandleInfoKHR>, pHandle : nativeptr<nativeint>) = Loader<unit>.vkGetFenceWin32HandleKHR.Invoke(device, pGetWin32HandleInfo, pHandle)

module KHRExternalMemoryWin32 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalMemory
    open KHRExternalMemoryCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_external_memory_win32"
    let Number = 74

    let Required = [ KHRExternalMemory.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMemoryWin32HandleInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pAttributes : nativeptr<nativeint>
            val mutable public dwAccess : uint32
            val mutable public name : cstr

            new(pNext : nativeint, pAttributes : nativeptr<nativeint>, dwAccess : uint32, name : cstr) =
                {
                    sType = 1000073001u
                    pNext = pNext
                    pAttributes = pAttributes
                    dwAccess = dwAccess
                    name = name
                }

            new(pAttributes : nativeptr<nativeint>, dwAccess : uint32, name : cstr) =
                VkExportMemoryWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, pAttributes, dwAccess, name)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pAttributes = Unchecked.defaultof<nativeptr<nativeint>> && x.dwAccess = Unchecked.defaultof<uint32> && x.name = Unchecked.defaultof<cstr>

            static member Empty =
                VkExportMemoryWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<cstr>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pAttributes = %A" x.pAttributes
                    sprintf "dwAccess = %A" x.dwAccess
                    sprintf "name = %A" x.name
                ] |> sprintf "VkExportMemoryWin32HandleInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportMemoryWin32HandleInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleType : VkExternalMemoryHandleTypeFlags
            val mutable public handle : nativeint
            val mutable public name : cstr

            new(pNext : nativeint, handleType : VkExternalMemoryHandleTypeFlags, handle : nativeint, name : cstr) =
                {
                    sType = 1000073000u
                    pNext = pNext
                    handleType = handleType
                    handle = handle
                    name = name
                }

            new(handleType : VkExternalMemoryHandleTypeFlags, handle : nativeint, name : cstr) =
                VkImportMemoryWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, handleType, handle, name)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags> && x.handle = Unchecked.defaultof<nativeint> && x.name = Unchecked.defaultof<cstr>

            static member Empty =
                VkImportMemoryWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleType = %A" x.handleType
                    sprintf "handle = %A" x.handle
                    sprintf "name = %A" x.name
                ] |> sprintf "VkImportMemoryWin32HandleInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryGetWin32HandleInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memory : VkDeviceMemory
            val mutable public handleType : VkExternalMemoryHandleTypeFlags

            new(pNext : nativeint, memory : VkDeviceMemory, handleType : VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000073003u
                    pNext = pNext
                    memory = memory
                    handleType = handleType
                }

            new(memory : VkDeviceMemory, handleType : VkExternalMemoryHandleTypeFlags) =
                VkMemoryGetWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, memory, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkMemoryGetWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memory = %A" x.memory
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkMemoryGetWin32HandleInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryWin32HandlePropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memoryTypeBits : uint32

            new(pNext : nativeint, memoryTypeBits : uint32) =
                {
                    sType = 1000073002u
                    pNext = pNext
                    memoryTypeBits = memoryTypeBits
                }

            new(memoryTypeBits : uint32) =
                VkMemoryWin32HandlePropertiesKHR(Unchecked.defaultof<nativeint>, memoryTypeBits)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memoryTypeBits = Unchecked.defaultof<uint32>

            static member Empty =
                VkMemoryWin32HandlePropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memoryTypeBits = %A" x.memoryTypeBits
                ] |> sprintf "VkMemoryWin32HandlePropertiesKHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetMemoryWin32HandleKHRDel = delegate of VkDevice * nativeptr<VkMemoryGetWin32HandleInfoKHR> * nativeptr<nativeint> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetMemoryWin32HandlePropertiesKHRDel = delegate of VkDevice * VkExternalMemoryHandleTypeFlags * nativeint * nativeptr<VkMemoryWin32HandlePropertiesKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRExternalMemoryWin32")
            static let s_vkGetMemoryWin32HandleKHRDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryWin32HandleKHRDel> "vkGetMemoryWin32HandleKHR"
            static let s_vkGetMemoryWin32HandlePropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryWin32HandlePropertiesKHRDel> "vkGetMemoryWin32HandlePropertiesKHR"
            static do Report.End(3) |> ignore
            static member vkGetMemoryWin32HandleKHR = s_vkGetMemoryWin32HandleKHRDel
            static member vkGetMemoryWin32HandlePropertiesKHR = s_vkGetMemoryWin32HandlePropertiesKHRDel
        let vkGetMemoryWin32HandleKHR(device : VkDevice, pGetWin32HandleInfo : nativeptr<VkMemoryGetWin32HandleInfoKHR>, pHandle : nativeptr<nativeint>) = Loader<unit>.vkGetMemoryWin32HandleKHR.Invoke(device, pGetWin32HandleInfo, pHandle)
        let vkGetMemoryWin32HandlePropertiesKHR(device : VkDevice, handleType : VkExternalMemoryHandleTypeFlags, handle : nativeint, pMemoryWin32HandleProperties : nativeptr<VkMemoryWin32HandlePropertiesKHR>) = Loader<unit>.vkGetMemoryWin32HandlePropertiesKHR.Invoke(device, handleType, handle, pMemoryWin32HandleProperties)

module KHRExternalSemaphoreFd =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalSemaphore
    open KHRExternalSemaphoreCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_external_semaphore_fd"
    let Number = 80

    let Required = [ KHRExternalSemaphore.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportSemaphoreFdInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphore : VkSemaphore
            val mutable public flags : VkSemaphoreImportFlags
            val mutable public handleType : VkExternalSemaphoreHandleTypeFlags
            val mutable public fd : int

            new(pNext : nativeint, semaphore : VkSemaphore, flags : VkSemaphoreImportFlags, handleType : VkExternalSemaphoreHandleTypeFlags, fd : int) =
                {
                    sType = 1000079000u
                    pNext = pNext
                    semaphore = semaphore
                    flags = flags
                    handleType = handleType
                    fd = fd
                }

            new(semaphore : VkSemaphore, flags : VkSemaphoreImportFlags, handleType : VkExternalSemaphoreHandleTypeFlags, fd : int) =
                VkImportSemaphoreFdInfoKHR(Unchecked.defaultof<nativeint>, semaphore, flags, handleType, fd)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.flags = Unchecked.defaultof<VkSemaphoreImportFlags> && x.handleType = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags> && x.fd = Unchecked.defaultof<int>

            static member Empty =
                VkImportSemaphoreFdInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<VkSemaphoreImportFlags>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>, Unchecked.defaultof<int>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphore = %A" x.semaphore
                    sprintf "flags = %A" x.flags
                    sprintf "handleType = %A" x.handleType
                    sprintf "fd = %A" x.fd
                ] |> sprintf "VkImportSemaphoreFdInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSemaphoreGetFdInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphore : VkSemaphore
            val mutable public handleType : VkExternalSemaphoreHandleTypeFlags

            new(pNext : nativeint, semaphore : VkSemaphore, handleType : VkExternalSemaphoreHandleTypeFlags) =
                {
                    sType = 1000079001u
                    pNext = pNext
                    semaphore = semaphore
                    handleType = handleType
                }

            new(semaphore : VkSemaphore, handleType : VkExternalSemaphoreHandleTypeFlags) =
                VkSemaphoreGetFdInfoKHR(Unchecked.defaultof<nativeint>, semaphore, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.handleType = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>

            static member Empty =
                VkSemaphoreGetFdInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphore = %A" x.semaphore
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkSemaphoreGetFdInfoKHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkImportSemaphoreFdKHRDel = delegate of VkDevice * nativeptr<VkImportSemaphoreFdInfoKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetSemaphoreFdKHRDel = delegate of VkDevice * nativeptr<VkSemaphoreGetFdInfoKHR> * nativeptr<int> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRExternalSemaphoreFd")
            static let s_vkImportSemaphoreFdKHRDel = VkRaw.vkImportInstanceDelegate<VkImportSemaphoreFdKHRDel> "vkImportSemaphoreFdKHR"
            static let s_vkGetSemaphoreFdKHRDel = VkRaw.vkImportInstanceDelegate<VkGetSemaphoreFdKHRDel> "vkGetSemaphoreFdKHR"
            static do Report.End(3) |> ignore
            static member vkImportSemaphoreFdKHR = s_vkImportSemaphoreFdKHRDel
            static member vkGetSemaphoreFdKHR = s_vkGetSemaphoreFdKHRDel
        let vkImportSemaphoreFdKHR(device : VkDevice, pImportSemaphoreFdInfo : nativeptr<VkImportSemaphoreFdInfoKHR>) = Loader<unit>.vkImportSemaphoreFdKHR.Invoke(device, pImportSemaphoreFdInfo)
        let vkGetSemaphoreFdKHR(device : VkDevice, pGetFdInfo : nativeptr<VkSemaphoreGetFdInfoKHR>, pFd : nativeptr<int>) = Loader<unit>.vkGetSemaphoreFdKHR.Invoke(device, pGetFdInfo, pFd)

module KHRExternalSemaphoreWin32 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalSemaphore
    open KHRExternalSemaphoreCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_external_semaphore_win32"
    let Number = 79

    let Required = [ KHRExternalSemaphore.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkD3D12FenceSubmitInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public waitSemaphoreValuesCount : uint32
            val mutable public pWaitSemaphoreValues : nativeptr<uint64>
            val mutable public signalSemaphoreValuesCount : uint32
            val mutable public pSignalSemaphoreValues : nativeptr<uint64>

            new(pNext : nativeint, waitSemaphoreValuesCount : uint32, pWaitSemaphoreValues : nativeptr<uint64>, signalSemaphoreValuesCount : uint32, pSignalSemaphoreValues : nativeptr<uint64>) =
                {
                    sType = 1000078002u
                    pNext = pNext
                    waitSemaphoreValuesCount = waitSemaphoreValuesCount
                    pWaitSemaphoreValues = pWaitSemaphoreValues
                    signalSemaphoreValuesCount = signalSemaphoreValuesCount
                    pSignalSemaphoreValues = pSignalSemaphoreValues
                }

            new(waitSemaphoreValuesCount : uint32, pWaitSemaphoreValues : nativeptr<uint64>, signalSemaphoreValuesCount : uint32, pSignalSemaphoreValues : nativeptr<uint64>) =
                VkD3D12FenceSubmitInfoKHR(Unchecked.defaultof<nativeint>, waitSemaphoreValuesCount, pWaitSemaphoreValues, signalSemaphoreValuesCount, pSignalSemaphoreValues)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.waitSemaphoreValuesCount = Unchecked.defaultof<uint32> && x.pWaitSemaphoreValues = Unchecked.defaultof<nativeptr<uint64>> && x.signalSemaphoreValuesCount = Unchecked.defaultof<uint32> && x.pSignalSemaphoreValues = Unchecked.defaultof<nativeptr<uint64>>

            static member Empty =
                VkD3D12FenceSubmitInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint64>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint64>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "waitSemaphoreValuesCount = %A" x.waitSemaphoreValuesCount
                    sprintf "pWaitSemaphoreValues = %A" x.pWaitSemaphoreValues
                    sprintf "signalSemaphoreValuesCount = %A" x.signalSemaphoreValuesCount
                    sprintf "pSignalSemaphoreValues = %A" x.pSignalSemaphoreValues
                ] |> sprintf "VkD3D12FenceSubmitInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportSemaphoreWin32HandleInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pAttributes : nativeptr<nativeint>
            val mutable public dwAccess : uint32
            val mutable public name : cstr

            new(pNext : nativeint, pAttributes : nativeptr<nativeint>, dwAccess : uint32, name : cstr) =
                {
                    sType = 1000078001u
                    pNext = pNext
                    pAttributes = pAttributes
                    dwAccess = dwAccess
                    name = name
                }

            new(pAttributes : nativeptr<nativeint>, dwAccess : uint32, name : cstr) =
                VkExportSemaphoreWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, pAttributes, dwAccess, name)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pAttributes = Unchecked.defaultof<nativeptr<nativeint>> && x.dwAccess = Unchecked.defaultof<uint32> && x.name = Unchecked.defaultof<cstr>

            static member Empty =
                VkExportSemaphoreWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<cstr>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pAttributes = %A" x.pAttributes
                    sprintf "dwAccess = %A" x.dwAccess
                    sprintf "name = %A" x.name
                ] |> sprintf "VkExportSemaphoreWin32HandleInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportSemaphoreWin32HandleInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphore : VkSemaphore
            val mutable public flags : VkSemaphoreImportFlags
            val mutable public handleType : VkExternalSemaphoreHandleTypeFlags
            val mutable public handle : nativeint
            val mutable public name : cstr

            new(pNext : nativeint, semaphore : VkSemaphore, flags : VkSemaphoreImportFlags, handleType : VkExternalSemaphoreHandleTypeFlags, handle : nativeint, name : cstr) =
                {
                    sType = 1000078000u
                    pNext = pNext
                    semaphore = semaphore
                    flags = flags
                    handleType = handleType
                    handle = handle
                    name = name
                }

            new(semaphore : VkSemaphore, flags : VkSemaphoreImportFlags, handleType : VkExternalSemaphoreHandleTypeFlags, handle : nativeint, name : cstr) =
                VkImportSemaphoreWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, semaphore, flags, handleType, handle, name)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.flags = Unchecked.defaultof<VkSemaphoreImportFlags> && x.handleType = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags> && x.handle = Unchecked.defaultof<nativeint> && x.name = Unchecked.defaultof<cstr>

            static member Empty =
                VkImportSemaphoreWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<VkSemaphoreImportFlags>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>, Unchecked.defaultof<nativeint>, Unchecked.defaultof<cstr>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphore = %A" x.semaphore
                    sprintf "flags = %A" x.flags
                    sprintf "handleType = %A" x.handleType
                    sprintf "handle = %A" x.handle
                    sprintf "name = %A" x.name
                ] |> sprintf "VkImportSemaphoreWin32HandleInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSemaphoreGetWin32HandleInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public semaphore : VkSemaphore
            val mutable public handleType : VkExternalSemaphoreHandleTypeFlags

            new(pNext : nativeint, semaphore : VkSemaphore, handleType : VkExternalSemaphoreHandleTypeFlags) =
                {
                    sType = 1000078003u
                    pNext = pNext
                    semaphore = semaphore
                    handleType = handleType
                }

            new(semaphore : VkSemaphore, handleType : VkExternalSemaphoreHandleTypeFlags) =
                VkSemaphoreGetWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, semaphore, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.semaphore = Unchecked.defaultof<VkSemaphore> && x.handleType = Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>

            static member Empty =
                VkSemaphoreGetWin32HandleInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSemaphore>, Unchecked.defaultof<VkExternalSemaphoreHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "semaphore = %A" x.semaphore
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkSemaphoreGetWin32HandleInfoKHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkImportSemaphoreWin32HandleKHRDel = delegate of VkDevice * nativeptr<VkImportSemaphoreWin32HandleInfoKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetSemaphoreWin32HandleKHRDel = delegate of VkDevice * nativeptr<VkSemaphoreGetWin32HandleInfoKHR> * nativeptr<nativeint> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRExternalSemaphoreWin32")
            static let s_vkImportSemaphoreWin32HandleKHRDel = VkRaw.vkImportInstanceDelegate<VkImportSemaphoreWin32HandleKHRDel> "vkImportSemaphoreWin32HandleKHR"
            static let s_vkGetSemaphoreWin32HandleKHRDel = VkRaw.vkImportInstanceDelegate<VkGetSemaphoreWin32HandleKHRDel> "vkGetSemaphoreWin32HandleKHR"
            static do Report.End(3) |> ignore
            static member vkImportSemaphoreWin32HandleKHR = s_vkImportSemaphoreWin32HandleKHRDel
            static member vkGetSemaphoreWin32HandleKHR = s_vkGetSemaphoreWin32HandleKHRDel
        let vkImportSemaphoreWin32HandleKHR(device : VkDevice, pImportSemaphoreWin32HandleInfo : nativeptr<VkImportSemaphoreWin32HandleInfoKHR>) = Loader<unit>.vkImportSemaphoreWin32HandleKHR.Invoke(device, pImportSemaphoreWin32HandleInfo)
        let vkGetSemaphoreWin32HandleKHR(device : VkDevice, pGetWin32HandleInfo : nativeptr<VkSemaphoreGetWin32HandleInfoKHR>, pHandle : nativeptr<nativeint>) = Loader<unit>.vkGetSemaphoreWin32HandleKHR.Invoke(device, pGetWin32HandleInfo, pHandle)

module KHRFragmentShaderBarycentric =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_fragment_shader_barycentric"
    let Number = 323

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fragmentShaderBarycentric : VkBool32

            new(pNext : nativeint, fragmentShaderBarycentric : VkBool32) =
                {
                    sType = 1000203000u
                    pNext = pNext
                    fragmentShaderBarycentric = fragmentShaderBarycentric
                }

            new(fragmentShaderBarycentric : VkBool32) =
                VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(Unchecked.defaultof<nativeint>, fragmentShaderBarycentric)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fragmentShaderBarycentric = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fragmentShaderBarycentric = %A" x.fragmentShaderBarycentric
                ] |> sprintf "VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public triStripVertexOrderIndependentOfProvokingVertex : VkBool32

            new(pNext : nativeint, triStripVertexOrderIndependentOfProvokingVertex : VkBool32) =
                {
                    sType = 1000322000u
                    pNext = pNext
                    triStripVertexOrderIndependentOfProvokingVertex = triStripVertexOrderIndependentOfProvokingVertex
                }

            new(triStripVertexOrderIndependentOfProvokingVertex : VkBool32) =
                VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(Unchecked.defaultof<nativeint>, triStripVertexOrderIndependentOfProvokingVertex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.triStripVertexOrderIndependentOfProvokingVertex = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "triStripVertexOrderIndependentOfProvokingVertex = %A" x.triStripVertexOrderIndependentOfProvokingVertex
                ] |> sprintf "VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR { %s }"
        end



module KHRGetDisplayProperties2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRDisplay
    open KHRSurface
    let Name = "VK_KHR_get_display_properties2"
    let Number = 122

    let Required = [ KHRDisplay.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayModeProperties2KHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public displayModeProperties : VkDisplayModePropertiesKHR

            new(pNext : nativeint, displayModeProperties : VkDisplayModePropertiesKHR) =
                {
                    sType = 1000121002u
                    pNext = pNext
                    displayModeProperties = displayModeProperties
                }

            new(displayModeProperties : VkDisplayModePropertiesKHR) =
                VkDisplayModeProperties2KHR(Unchecked.defaultof<nativeint>, displayModeProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.displayModeProperties = Unchecked.defaultof<VkDisplayModePropertiesKHR>

            static member Empty =
                VkDisplayModeProperties2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplayModePropertiesKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "displayModeProperties = %A" x.displayModeProperties
                ] |> sprintf "VkDisplayModeProperties2KHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayPlaneCapabilities2KHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public capabilities : VkDisplayPlaneCapabilitiesKHR

            new(pNext : nativeint, capabilities : VkDisplayPlaneCapabilitiesKHR) =
                {
                    sType = 1000121004u
                    pNext = pNext
                    capabilities = capabilities
                }

            new(capabilities : VkDisplayPlaneCapabilitiesKHR) =
                VkDisplayPlaneCapabilities2KHR(Unchecked.defaultof<nativeint>, capabilities)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.capabilities = Unchecked.defaultof<VkDisplayPlaneCapabilitiesKHR>

            static member Empty =
                VkDisplayPlaneCapabilities2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplayPlaneCapabilitiesKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "capabilities = %A" x.capabilities
                ] |> sprintf "VkDisplayPlaneCapabilities2KHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayPlaneInfo2KHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public mode : VkDisplayModeKHR
            val mutable public planeIndex : uint32

            new(pNext : nativeint, mode : VkDisplayModeKHR, planeIndex : uint32) =
                {
                    sType = 1000121003u
                    pNext = pNext
                    mode = mode
                    planeIndex = planeIndex
                }

            new(mode : VkDisplayModeKHR, planeIndex : uint32) =
                VkDisplayPlaneInfo2KHR(Unchecked.defaultof<nativeint>, mode, planeIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.mode = Unchecked.defaultof<VkDisplayModeKHR> && x.planeIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkDisplayPlaneInfo2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplayModeKHR>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "mode = %A" x.mode
                    sprintf "planeIndex = %A" x.planeIndex
                ] |> sprintf "VkDisplayPlaneInfo2KHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayPlaneProperties2KHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public displayPlaneProperties : VkDisplayPlanePropertiesKHR

            new(pNext : nativeint, displayPlaneProperties : VkDisplayPlanePropertiesKHR) =
                {
                    sType = 1000121001u
                    pNext = pNext
                    displayPlaneProperties = displayPlaneProperties
                }

            new(displayPlaneProperties : VkDisplayPlanePropertiesKHR) =
                VkDisplayPlaneProperties2KHR(Unchecked.defaultof<nativeint>, displayPlaneProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.displayPlaneProperties = Unchecked.defaultof<VkDisplayPlanePropertiesKHR>

            static member Empty =
                VkDisplayPlaneProperties2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplayPlanePropertiesKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "displayPlaneProperties = %A" x.displayPlaneProperties
                ] |> sprintf "VkDisplayPlaneProperties2KHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDisplayProperties2KHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public displayProperties : VkDisplayPropertiesKHR

            new(pNext : nativeint, displayProperties : VkDisplayPropertiesKHR) =
                {
                    sType = 1000121000u
                    pNext = pNext
                    displayProperties = displayProperties
                }

            new(displayProperties : VkDisplayPropertiesKHR) =
                VkDisplayProperties2KHR(Unchecked.defaultof<nativeint>, displayProperties)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.displayProperties = Unchecked.defaultof<VkDisplayPropertiesKHR>

            static member Empty =
                VkDisplayProperties2KHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDisplayPropertiesKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "displayProperties = %A" x.displayProperties
                ] |> sprintf "VkDisplayProperties2KHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceDisplayProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkDisplayProperties2KHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceDisplayPlaneProperties2KHRDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkDisplayPlaneProperties2KHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDisplayModeProperties2KHRDel = delegate of VkPhysicalDevice * VkDisplayKHR * nativeptr<uint32> * nativeptr<VkDisplayModeProperties2KHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDisplayPlaneCapabilities2KHRDel = delegate of VkPhysicalDevice * nativeptr<VkDisplayPlaneInfo2KHR> * nativeptr<VkDisplayPlaneCapabilities2KHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRGetDisplayProperties2")
            static let s_vkGetPhysicalDeviceDisplayProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceDisplayProperties2KHRDel> "vkGetPhysicalDeviceDisplayProperties2KHR"
            static let s_vkGetPhysicalDeviceDisplayPlaneProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceDisplayPlaneProperties2KHRDel> "vkGetPhysicalDeviceDisplayPlaneProperties2KHR"
            static let s_vkGetDisplayModeProperties2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetDisplayModeProperties2KHRDel> "vkGetDisplayModeProperties2KHR"
            static let s_vkGetDisplayPlaneCapabilities2KHRDel = VkRaw.vkImportInstanceDelegate<VkGetDisplayPlaneCapabilities2KHRDel> "vkGetDisplayPlaneCapabilities2KHR"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceDisplayProperties2KHR = s_vkGetPhysicalDeviceDisplayProperties2KHRDel
            static member vkGetPhysicalDeviceDisplayPlaneProperties2KHR = s_vkGetPhysicalDeviceDisplayPlaneProperties2KHRDel
            static member vkGetDisplayModeProperties2KHR = s_vkGetDisplayModeProperties2KHRDel
            static member vkGetDisplayPlaneCapabilities2KHR = s_vkGetDisplayPlaneCapabilities2KHRDel
        let vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkDisplayProperties2KHR>) = Loader<unit>.vkGetPhysicalDeviceDisplayProperties2KHR.Invoke(physicalDevice, pPropertyCount, pProperties)
        let vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkDisplayPlaneProperties2KHR>) = Loader<unit>.vkGetPhysicalDeviceDisplayPlaneProperties2KHR.Invoke(physicalDevice, pPropertyCount, pProperties)
        let vkGetDisplayModeProperties2KHR(physicalDevice : VkPhysicalDevice, display : VkDisplayKHR, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkDisplayModeProperties2KHR>) = Loader<unit>.vkGetDisplayModeProperties2KHR.Invoke(physicalDevice, display, pPropertyCount, pProperties)
        let vkGetDisplayPlaneCapabilities2KHR(physicalDevice : VkPhysicalDevice, pDisplayPlaneInfo : nativeptr<VkDisplayPlaneInfo2KHR>, pCapabilities : nativeptr<VkDisplayPlaneCapabilities2KHR>) = Loader<unit>.vkGetDisplayPlaneCapabilities2KHR.Invoke(physicalDevice, pDisplayPlaneInfo, pCapabilities)

module KHRGlobalPriority =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_global_priority"
    let Number = 189


    type VkQueueGlobalPriorityKHR =
        | Low = 128
        | Medium = 256
        | High = 512
        | Realtime = 1024


    [<StructLayout(LayoutKind.Explicit, Size = 64)>]
    type VkQueueGlobalPriorityKHR_16 =
        struct
            [<FieldOffset(0)>]
            val mutable public First : VkQueueGlobalPriorityKHR

            member x.Item
                with get (i : int) : VkQueueGlobalPriorityKHR =
                    if i < 0 || i > 15 then raise <| IndexOutOfRangeException()
                    let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                    NativePtr.get ptr i
                and set (i : int) (value : VkQueueGlobalPriorityKHR) =
                    if i < 0 || i > 15 then raise <| IndexOutOfRangeException()
                    let ptr = &&x |> NativePtr.toNativeInt |> NativePtr.ofNativeInt
                    NativePtr.set ptr i value

            member x.Length = 16

            interface System.Collections.IEnumerable with
                member x.GetEnumerator() = let x = x in (Seq.init 16 (fun i -> x.[i])).GetEnumerator() :> System.Collections.IEnumerator
            interface System.Collections.Generic.IEnumerable<VkQueueGlobalPriorityKHR> with
                member x.GetEnumerator() = let x = x in (Seq.init 16 (fun i -> x.[i])).GetEnumerator()
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceQueueGlobalPriorityCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public globalPriority : VkQueueGlobalPriorityKHR

            new(pNext : nativeint, globalPriority : VkQueueGlobalPriorityKHR) =
                {
                    sType = 1000174000u
                    pNext = pNext
                    globalPriority = globalPriority
                }

            new(globalPriority : VkQueueGlobalPriorityKHR) =
                VkDeviceQueueGlobalPriorityCreateInfoKHR(Unchecked.defaultof<nativeint>, globalPriority)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.globalPriority = Unchecked.defaultof<VkQueueGlobalPriorityKHR>

            static member Empty =
                VkDeviceQueueGlobalPriorityCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkQueueGlobalPriorityKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "globalPriority = %A" x.globalPriority
                ] |> sprintf "VkDeviceQueueGlobalPriorityCreateInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public globalPriorityQuery : VkBool32

            new(pNext : nativeint, globalPriorityQuery : VkBool32) =
                {
                    sType = 1000388000u
                    pNext = pNext
                    globalPriorityQuery = globalPriorityQuery
                }

            new(globalPriorityQuery : VkBool32) =
                VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(Unchecked.defaultof<nativeint>, globalPriorityQuery)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.globalPriorityQuery = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "globalPriorityQuery = %A" x.globalPriorityQuery
                ] |> sprintf "VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkQueueFamilyGlobalPriorityPropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public priorityCount : uint32
            val mutable public priorities : VkQueueGlobalPriorityKHR_16

            new(pNext : nativeint, priorityCount : uint32, priorities : VkQueueGlobalPriorityKHR_16) =
                {
                    sType = 1000388001u
                    pNext = pNext
                    priorityCount = priorityCount
                    priorities = priorities
                }

            new(priorityCount : uint32, priorities : VkQueueGlobalPriorityKHR_16) =
                VkQueueFamilyGlobalPriorityPropertiesKHR(Unchecked.defaultof<nativeint>, priorityCount, priorities)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.priorityCount = Unchecked.defaultof<uint32> && x.priorities = Unchecked.defaultof<VkQueueGlobalPriorityKHR_16>

            static member Empty =
                VkQueueFamilyGlobalPriorityPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkQueueGlobalPriorityKHR_16>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "priorityCount = %A" x.priorityCount
                    sprintf "priorities = %A" x.priorities
                ] |> sprintf "VkQueueFamilyGlobalPriorityPropertiesKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkResult with
              static member inline ErrorNotPermittedKhr = unbox<VkResult> -1000174001


module KHRImagelessFramebuffer =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRImageFormatList
    open KHRMaintenance2
    let Name = "VK_KHR_imageless_framebuffer"
    let Number = 109

    let Required = [ KHRImageFormatList.Name; KHRMaintenance2.Name ]


    type VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo

    type VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo

    type VkPhysicalDeviceImagelessFramebufferFeaturesKHR = VkPhysicalDeviceImagelessFramebufferFeatures

    type VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkFramebufferCreateFlags with
              static member inline ImagelessBitKhr = unbox<VkFramebufferCreateFlags> 0x00000001


module KHRIncrementalPresent =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_KHR_incremental_present"
    let Number = 85

    let Required = [ KHRSwapchain.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkRectLayerKHR =
        struct
            val mutable public offset : VkOffset2D
            val mutable public extent : VkExtent2D
            val mutable public layer : uint32

            new(offset : VkOffset2D, extent : VkExtent2D, layer : uint32) =
                {
                    offset = offset
                    extent = extent
                    layer = layer
                }

            member x.IsEmpty =
                x.offset = Unchecked.defaultof<VkOffset2D> && x.extent = Unchecked.defaultof<VkExtent2D> && x.layer = Unchecked.defaultof<uint32>

            static member Empty =
                VkRectLayerKHR(Unchecked.defaultof<VkOffset2D>, Unchecked.defaultof<VkExtent2D>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "offset = %A" x.offset
                    sprintf "extent = %A" x.extent
                    sprintf "layer = %A" x.layer
                ] |> sprintf "VkRectLayerKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPresentRegionKHR =
        struct
            val mutable public rectangleCount : uint32
            val mutable public pRectangles : nativeptr<VkRectLayerKHR>

            new(rectangleCount : uint32, pRectangles : nativeptr<VkRectLayerKHR>) =
                {
                    rectangleCount = rectangleCount
                    pRectangles = pRectangles
                }

            member x.IsEmpty =
                x.rectangleCount = Unchecked.defaultof<uint32> && x.pRectangles = Unchecked.defaultof<nativeptr<VkRectLayerKHR>>

            static member Empty =
                VkPresentRegionKHR(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRectLayerKHR>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "rectangleCount = %A" x.rectangleCount
                    sprintf "pRectangles = %A" x.pRectangles
                ] |> sprintf "VkPresentRegionKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPresentRegionsKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public swapchainCount : uint32
            val mutable public pRegions : nativeptr<VkPresentRegionKHR>

            new(pNext : nativeint, swapchainCount : uint32, pRegions : nativeptr<VkPresentRegionKHR>) =
                {
                    sType = 1000084000u
                    pNext = pNext
                    swapchainCount = swapchainCount
                    pRegions = pRegions
                }

            new(swapchainCount : uint32, pRegions : nativeptr<VkPresentRegionKHR>) =
                VkPresentRegionsKHR(Unchecked.defaultof<nativeint>, swapchainCount, pRegions)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.swapchainCount = Unchecked.defaultof<uint32> && x.pRegions = Unchecked.defaultof<nativeptr<VkPresentRegionKHR>>

            static member Empty =
                VkPresentRegionsKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkPresentRegionKHR>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "swapchainCount = %A" x.swapchainCount
                    sprintf "pRegions = %A" x.pRegions
                ] |> sprintf "VkPresentRegionsKHR { %s }"
        end



module KHRMaintenance4 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_maintenance4"
    let Number = 414


    type VkDeviceBufferMemoryRequirementsKHR = VkDeviceBufferMemoryRequirements

    type VkDeviceImageMemoryRequirementsKHR = VkDeviceImageMemoryRequirements

    type VkPhysicalDeviceMaintenance4FeaturesKHR = VkPhysicalDeviceMaintenance4Features

    type VkPhysicalDeviceMaintenance4PropertiesKHR = VkPhysicalDeviceMaintenance4Properties


    [<AutoOpen>]
    module EnumExtensions =
         type VkImageAspectFlags with
              static member inline NoneKhr = unbox<VkImageAspectFlags> 0

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDeviceBufferMemoryRequirementsKHRDel = delegate of VkDevice * nativeptr<VkDeviceBufferMemoryRequirements> * nativeptr<VkMemoryRequirements2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDeviceImageMemoryRequirementsKHRDel = delegate of VkDevice * nativeptr<VkDeviceImageMemoryRequirements> * nativeptr<VkMemoryRequirements2> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDeviceImageSparseMemoryRequirementsKHRDel = delegate of VkDevice * nativeptr<VkDeviceImageMemoryRequirements> * nativeptr<uint32> * nativeptr<VkSparseImageMemoryRequirements2> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRMaintenance4")
            static let s_vkGetDeviceBufferMemoryRequirementsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceBufferMemoryRequirementsKHRDel> "vkGetDeviceBufferMemoryRequirementsKHR"
            static let s_vkGetDeviceImageMemoryRequirementsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceImageMemoryRequirementsKHRDel> "vkGetDeviceImageMemoryRequirementsKHR"
            static let s_vkGetDeviceImageSparseMemoryRequirementsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetDeviceImageSparseMemoryRequirementsKHRDel> "vkGetDeviceImageSparseMemoryRequirementsKHR"
            static do Report.End(3) |> ignore
            static member vkGetDeviceBufferMemoryRequirementsKHR = s_vkGetDeviceBufferMemoryRequirementsKHRDel
            static member vkGetDeviceImageMemoryRequirementsKHR = s_vkGetDeviceImageMemoryRequirementsKHRDel
            static member vkGetDeviceImageSparseMemoryRequirementsKHR = s_vkGetDeviceImageSparseMemoryRequirementsKHRDel
        let vkGetDeviceBufferMemoryRequirementsKHR(device : VkDevice, pInfo : nativeptr<VkDeviceBufferMemoryRequirements>, pMemoryRequirements : nativeptr<VkMemoryRequirements2>) = Loader<unit>.vkGetDeviceBufferMemoryRequirementsKHR.Invoke(device, pInfo, pMemoryRequirements)
        let vkGetDeviceImageMemoryRequirementsKHR(device : VkDevice, pInfo : nativeptr<VkDeviceImageMemoryRequirements>, pMemoryRequirements : nativeptr<VkMemoryRequirements2>) = Loader<unit>.vkGetDeviceImageMemoryRequirementsKHR.Invoke(device, pInfo, pMemoryRequirements)
        let vkGetDeviceImageSparseMemoryRequirementsKHR(device : VkDevice, pInfo : nativeptr<VkDeviceImageMemoryRequirements>, pSparseMemoryRequirementCount : nativeptr<uint32>, pSparseMemoryRequirements : nativeptr<VkSparseImageMemoryRequirements2>) = Loader<unit>.vkGetDeviceImageSparseMemoryRequirementsKHR.Invoke(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements)

module KHRPerformanceQuery =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_performance_query"
    let Number = 117

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<Flags>]
    type VkPerformanceCounterDescriptionFlagsKHR =
        | All = 3
        | None = 0
        | PerformanceImpactingBit = 0x00000001
        | ConcurrentlyImpactedBit = 0x00000002

    type VkPerformanceCounterScopeKHR =
        | CommandBuffer = 0
        | RenderPass = 1
        | Command = 2

    type VkPerformanceCounterStorageKHR =
        | Int32 = 0
        | Int64 = 1
        | Uint32 = 2
        | Uint64 = 3
        | Float32 = 4
        | Float64 = 5

    type VkPerformanceCounterUnitKHR =
        | Generic = 0
        | Percentage = 1
        | Nanoseconds = 2
        | Bytes = 3
        | BytesPerSecond = 4
        | Kelvin = 5
        | Watts = 6
        | Volts = 7
        | Amps = 8
        | Hertz = 9
        | Cycles = 10

    [<Flags>]
    type VkAcquireProfilingLockFlagsKHR =
        | All = 0
        | None = 0


    [<StructLayout(LayoutKind.Sequential)>]
    type VkAcquireProfilingLockInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkAcquireProfilingLockFlagsKHR
            val mutable public timeout : uint64

            new(pNext : nativeint, flags : VkAcquireProfilingLockFlagsKHR, timeout : uint64) =
                {
                    sType = 1000116004u
                    pNext = pNext
                    flags = flags
                    timeout = timeout
                }

            new(flags : VkAcquireProfilingLockFlagsKHR, timeout : uint64) =
                VkAcquireProfilingLockInfoKHR(Unchecked.defaultof<nativeint>, flags, timeout)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkAcquireProfilingLockFlagsKHR> && x.timeout = Unchecked.defaultof<uint64>

            static member Empty =
                VkAcquireProfilingLockInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkAcquireProfilingLockFlagsKHR>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "timeout = %A" x.timeout
                ] |> sprintf "VkAcquireProfilingLockInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPerformanceCounterDescriptionKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPerformanceCounterDescriptionFlagsKHR
            val mutable public name : String256
            val mutable public category : String256
            val mutable public description : String256

            new(pNext : nativeint, flags : VkPerformanceCounterDescriptionFlagsKHR, name : String256, category : String256, description : String256) =
                {
                    sType = 1000116006u
                    pNext = pNext
                    flags = flags
                    name = name
                    category = category
                    description = description
                }

            new(flags : VkPerformanceCounterDescriptionFlagsKHR, name : String256, category : String256, description : String256) =
                VkPerformanceCounterDescriptionKHR(Unchecked.defaultof<nativeint>, flags, name, category, description)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPerformanceCounterDescriptionFlagsKHR> && x.name = Unchecked.defaultof<String256> && x.category = Unchecked.defaultof<String256> && x.description = Unchecked.defaultof<String256>

            static member Empty =
                VkPerformanceCounterDescriptionKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPerformanceCounterDescriptionFlagsKHR>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "name = %A" x.name
                    sprintf "category = %A" x.category
                    sprintf "description = %A" x.description
                ] |> sprintf "VkPerformanceCounterDescriptionKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPerformanceCounterKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public unit : VkPerformanceCounterUnitKHR
            val mutable public scope : VkPerformanceCounterScopeKHR
            val mutable public storage : VkPerformanceCounterStorageKHR
            val mutable public uuid : Guid

            new(pNext : nativeint, unit : VkPerformanceCounterUnitKHR, scope : VkPerformanceCounterScopeKHR, storage : VkPerformanceCounterStorageKHR, uuid : Guid) =
                {
                    sType = 1000116005u
                    pNext = pNext
                    unit = unit
                    scope = scope
                    storage = storage
                    uuid = uuid
                }

            new(unit : VkPerformanceCounterUnitKHR, scope : VkPerformanceCounterScopeKHR, storage : VkPerformanceCounterStorageKHR, uuid : Guid) =
                VkPerformanceCounterKHR(Unchecked.defaultof<nativeint>, unit, scope, storage, uuid)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.unit = Unchecked.defaultof<VkPerformanceCounterUnitKHR> && x.scope = Unchecked.defaultof<VkPerformanceCounterScopeKHR> && x.storage = Unchecked.defaultof<VkPerformanceCounterStorageKHR> && x.uuid = Unchecked.defaultof<Guid>

            static member Empty =
                VkPerformanceCounterKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPerformanceCounterUnitKHR>, Unchecked.defaultof<VkPerformanceCounterScopeKHR>, Unchecked.defaultof<VkPerformanceCounterStorageKHR>, Unchecked.defaultof<Guid>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "unit = %A" x.unit
                    sprintf "scope = %A" x.scope
                    sprintf "storage = %A" x.storage
                    sprintf "uuid = %A" x.uuid
                ] |> sprintf "VkPerformanceCounterKHR { %s }"
        end

    /// Union of all the possible return types a counter result could return
    [<StructLayout(LayoutKind.Explicit)>]
    type VkPerformanceCounterResultKHR =
        struct
            [<FieldOffset(0)>]
            val mutable public int32 : int
            [<FieldOffset(0)>]
            val mutable public int64 : int64
            [<FieldOffset(0)>]
            val mutable public uint32 : uint32
            [<FieldOffset(0)>]
            val mutable public uint64 : uint64
            [<FieldOffset(0)>]
            val mutable public float32 : float32
            [<FieldOffset(0)>]
            val mutable public float64 : float

            static member Int32(value : int) =
                let mutable result = Unchecked.defaultof<VkPerformanceCounterResultKHR>
                result.int32 <- value
                result

            static member Int64(value : int64) =
                let mutable result = Unchecked.defaultof<VkPerformanceCounterResultKHR>
                result.int64 <- value
                result

            static member Uint32(value : uint32) =
                let mutable result = Unchecked.defaultof<VkPerformanceCounterResultKHR>
                result.uint32 <- value
                result

            static member Uint64(value : uint64) =
                let mutable result = Unchecked.defaultof<VkPerformanceCounterResultKHR>
                result.uint64 <- value
                result

            static member Float32(value : float32) =
                let mutable result = Unchecked.defaultof<VkPerformanceCounterResultKHR>
                result.float32 <- value
                result

            static member Float64(value : float) =
                let mutable result = Unchecked.defaultof<VkPerformanceCounterResultKHR>
                result.float64 <- value
                result

            override x.ToString() =
                String.concat "; " [
                    sprintf "int32 = %A" x.int32
                    sprintf "int64 = %A" x.int64
                    sprintf "uint32 = %A" x.uint32
                    sprintf "uint64 = %A" x.uint64
                    sprintf "float32 = %A" x.float32
                    sprintf "float64 = %A" x.float64
                ] |> sprintf "VkPerformanceCounterResultKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPerformanceQuerySubmitInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public counterPassIndex : uint32

            new(pNext : nativeint, counterPassIndex : uint32) =
                {
                    sType = 1000116003u
                    pNext = pNext
                    counterPassIndex = counterPassIndex
                }

            new(counterPassIndex : uint32) =
                VkPerformanceQuerySubmitInfoKHR(Unchecked.defaultof<nativeint>, counterPassIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.counterPassIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkPerformanceQuerySubmitInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "counterPassIndex = %A" x.counterPassIndex
                ] |> sprintf "VkPerformanceQuerySubmitInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePerformanceQueryFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public performanceCounterQueryPools : VkBool32
            val mutable public performanceCounterMultipleQueryPools : VkBool32

            new(pNext : nativeint, performanceCounterQueryPools : VkBool32, performanceCounterMultipleQueryPools : VkBool32) =
                {
                    sType = 1000116000u
                    pNext = pNext
                    performanceCounterQueryPools = performanceCounterQueryPools
                    performanceCounterMultipleQueryPools = performanceCounterMultipleQueryPools
                }

            new(performanceCounterQueryPools : VkBool32, performanceCounterMultipleQueryPools : VkBool32) =
                VkPhysicalDevicePerformanceQueryFeaturesKHR(Unchecked.defaultof<nativeint>, performanceCounterQueryPools, performanceCounterMultipleQueryPools)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.performanceCounterQueryPools = Unchecked.defaultof<VkBool32> && x.performanceCounterMultipleQueryPools = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePerformanceQueryFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "performanceCounterQueryPools = %A" x.performanceCounterQueryPools
                    sprintf "performanceCounterMultipleQueryPools = %A" x.performanceCounterMultipleQueryPools
                ] |> sprintf "VkPhysicalDevicePerformanceQueryFeaturesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePerformanceQueryPropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public allowCommandBufferQueryCopies : VkBool32

            new(pNext : nativeint, allowCommandBufferQueryCopies : VkBool32) =
                {
                    sType = 1000116001u
                    pNext = pNext
                    allowCommandBufferQueryCopies = allowCommandBufferQueryCopies
                }

            new(allowCommandBufferQueryCopies : VkBool32) =
                VkPhysicalDevicePerformanceQueryPropertiesKHR(Unchecked.defaultof<nativeint>, allowCommandBufferQueryCopies)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.allowCommandBufferQueryCopies = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePerformanceQueryPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "allowCommandBufferQueryCopies = %A" x.allowCommandBufferQueryCopies
                ] |> sprintf "VkPhysicalDevicePerformanceQueryPropertiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkQueryPoolPerformanceCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public queueFamilyIndex : uint32
            val mutable public counterIndexCount : uint32
            val mutable public pCounterIndices : nativeptr<uint32>

            new(pNext : nativeint, queueFamilyIndex : uint32, counterIndexCount : uint32, pCounterIndices : nativeptr<uint32>) =
                {
                    sType = 1000116002u
                    pNext = pNext
                    queueFamilyIndex = queueFamilyIndex
                    counterIndexCount = counterIndexCount
                    pCounterIndices = pCounterIndices
                }

            new(queueFamilyIndex : uint32, counterIndexCount : uint32, pCounterIndices : nativeptr<uint32>) =
                VkQueryPoolPerformanceCreateInfoKHR(Unchecked.defaultof<nativeint>, queueFamilyIndex, counterIndexCount, pCounterIndices)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.queueFamilyIndex = Unchecked.defaultof<uint32> && x.counterIndexCount = Unchecked.defaultof<uint32> && x.pCounterIndices = Unchecked.defaultof<nativeptr<uint32>>

            static member Empty =
                VkQueryPoolPerformanceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint32>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "queueFamilyIndex = %A" x.queueFamilyIndex
                    sprintf "counterIndexCount = %A" x.counterIndexCount
                    sprintf "pCounterIndices = %A" x.pCounterIndices
                ] |> sprintf "VkQueryPoolPerformanceCreateInfoKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkQueryType with
              static member inline PerformanceQueryKhr = unbox<VkQueryType> 1000116000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHRDel = delegate of VkPhysicalDevice * uint32 * nativeptr<uint32> * nativeptr<VkPerformanceCounterKHR> * nativeptr<VkPerformanceCounterDescriptionKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHRDel = delegate of VkPhysicalDevice * nativeptr<VkQueryPoolPerformanceCreateInfoKHR> * nativeptr<uint32> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkAcquireProfilingLockKHRDel = delegate of VkDevice * nativeptr<VkAcquireProfilingLockInfoKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkReleaseProfilingLockKHRDel = delegate of VkDevice -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRPerformanceQuery")
            static let s_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHRDel = VkRaw.vkImportInstanceDelegate<VkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHRDel> "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
            static let s_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHRDel> "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
            static let s_vkAcquireProfilingLockKHRDel = VkRaw.vkImportInstanceDelegate<VkAcquireProfilingLockKHRDel> "vkAcquireProfilingLockKHR"
            static let s_vkReleaseProfilingLockKHRDel = VkRaw.vkImportInstanceDelegate<VkReleaseProfilingLockKHRDel> "vkReleaseProfilingLockKHR"
            static do Report.End(3) |> ignore
            static member vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = s_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHRDel
            static member vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = s_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHRDel
            static member vkAcquireProfilingLockKHR = s_vkAcquireProfilingLockKHRDel
            static member vkReleaseProfilingLockKHR = s_vkReleaseProfilingLockKHRDel
        let vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, pCounterCount : nativeptr<uint32>, pCounters : nativeptr<VkPerformanceCounterKHR>, pCounterDescriptions : nativeptr<VkPerformanceCounterDescriptionKHR>) = Loader<unit>.vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.Invoke(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions)
        let vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice : VkPhysicalDevice, pPerformanceQueryCreateInfo : nativeptr<VkQueryPoolPerformanceCreateInfoKHR>, pNumPasses : nativeptr<uint32>) = Loader<unit>.vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.Invoke(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses)
        let vkAcquireProfilingLockKHR(device : VkDevice, pInfo : nativeptr<VkAcquireProfilingLockInfoKHR>) = Loader<unit>.vkAcquireProfilingLockKHR.Invoke(device, pInfo)
        let vkReleaseProfilingLockKHR(device : VkDevice) = Loader<unit>.vkReleaseProfilingLockKHR.Invoke(device)

module KHRPipelineExecutableProperties =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_pipeline_executable_properties"
    let Number = 270

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPipelineExecutableStatisticFormatKHR =
        | Bool32 = 0
        | Int64 = 1
        | Uint64 = 2
        | Float64 = 3


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipelineExecutableInfo : VkBool32

            new(pNext : nativeint, pipelineExecutableInfo : VkBool32) =
                {
                    sType = 1000269000u
                    pNext = pNext
                    pipelineExecutableInfo = pipelineExecutableInfo
                }

            new(pipelineExecutableInfo : VkBool32) =
                VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(Unchecked.defaultof<nativeint>, pipelineExecutableInfo)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipelineExecutableInfo = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipelineExecutableInfo = %A" x.pipelineExecutableInfo
                ] |> sprintf "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineExecutableInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pipeline : VkPipeline
            val mutable public executableIndex : uint32

            new(pNext : nativeint, pipeline : VkPipeline, executableIndex : uint32) =
                {
                    sType = 1000269003u
                    pNext = pNext
                    pipeline = pipeline
                    executableIndex = executableIndex
                }

            new(pipeline : VkPipeline, executableIndex : uint32) =
                VkPipelineExecutableInfoKHR(Unchecked.defaultof<nativeint>, pipeline, executableIndex)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pipeline = Unchecked.defaultof<VkPipeline> && x.executableIndex = Unchecked.defaultof<uint32>

            static member Empty =
                VkPipelineExecutableInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipeline>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pipeline = %A" x.pipeline
                    sprintf "executableIndex = %A" x.executableIndex
                ] |> sprintf "VkPipelineExecutableInfoKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineExecutableInternalRepresentationKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public name : String256
            val mutable public description : String256
            val mutable public isText : VkBool32
            val mutable public dataSize : uint64
            val mutable public pData : nativeint

            new(pNext : nativeint, name : String256, description : String256, isText : VkBool32, dataSize : uint64, pData : nativeint) =
                {
                    sType = 1000269005u
                    pNext = pNext
                    name = name
                    description = description
                    isText = isText
                    dataSize = dataSize
                    pData = pData
                }

            new(name : String256, description : String256, isText : VkBool32, dataSize : uint64, pData : nativeint) =
                VkPipelineExecutableInternalRepresentationKHR(Unchecked.defaultof<nativeint>, name, description, isText, dataSize, pData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.name = Unchecked.defaultof<String256> && x.description = Unchecked.defaultof<String256> && x.isText = Unchecked.defaultof<VkBool32> && x.dataSize = Unchecked.defaultof<uint64> && x.pData = Unchecked.defaultof<nativeint>

            static member Empty =
                VkPipelineExecutableInternalRepresentationKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "name = %A" x.name
                    sprintf "description = %A" x.description
                    sprintf "isText = %A" x.isText
                    sprintf "dataSize = %A" x.dataSize
                    sprintf "pData = %A" x.pData
                ] |> sprintf "VkPipelineExecutableInternalRepresentationKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineExecutablePropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public stages : VkShaderStageFlags
            val mutable public name : String256
            val mutable public description : String256
            val mutable public subgroupSize : uint32

            new(pNext : nativeint, stages : VkShaderStageFlags, name : String256, description : String256, subgroupSize : uint32) =
                {
                    sType = 1000269002u
                    pNext = pNext
                    stages = stages
                    name = name
                    description = description
                    subgroupSize = subgroupSize
                }

            new(stages : VkShaderStageFlags, name : String256, description : String256, subgroupSize : uint32) =
                VkPipelineExecutablePropertiesKHR(Unchecked.defaultof<nativeint>, stages, name, description, subgroupSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.stages = Unchecked.defaultof<VkShaderStageFlags> && x.name = Unchecked.defaultof<String256> && x.description = Unchecked.defaultof<String256> && x.subgroupSize = Unchecked.defaultof<uint32>

            static member Empty =
                VkPipelineExecutablePropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderStageFlags>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "stages = %A" x.stages
                    sprintf "name = %A" x.name
                    sprintf "description = %A" x.description
                    sprintf "subgroupSize = %A" x.subgroupSize
                ] |> sprintf "VkPipelineExecutablePropertiesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Explicit)>]
    type VkPipelineExecutableStatisticValueKHR =
        struct
            [<FieldOffset(0)>]
            val mutable public b32 : VkBool32
            [<FieldOffset(0)>]
            val mutable public i64 : int64
            [<FieldOffset(0)>]
            val mutable public u64 : uint64
            [<FieldOffset(0)>]
            val mutable public f64 : float

            static member B32(value : VkBool32) =
                let mutable result = Unchecked.defaultof<VkPipelineExecutableStatisticValueKHR>
                result.b32 <- value
                result

            static member I64(value : int64) =
                let mutable result = Unchecked.defaultof<VkPipelineExecutableStatisticValueKHR>
                result.i64 <- value
                result

            static member U64(value : uint64) =
                let mutable result = Unchecked.defaultof<VkPipelineExecutableStatisticValueKHR>
                result.u64 <- value
                result

            static member F64(value : float) =
                let mutable result = Unchecked.defaultof<VkPipelineExecutableStatisticValueKHR>
                result.f64 <- value
                result

            override x.ToString() =
                String.concat "; " [
                    sprintf "b32 = %A" x.b32
                    sprintf "i64 = %A" x.i64
                    sprintf "u64 = %A" x.u64
                    sprintf "f64 = %A" x.f64
                ] |> sprintf "VkPipelineExecutableStatisticValueKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineExecutableStatisticKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public name : String256
            val mutable public description : String256
            val mutable public format : VkPipelineExecutableStatisticFormatKHR
            val mutable public value : VkPipelineExecutableStatisticValueKHR

            new(pNext : nativeint, name : String256, description : String256, format : VkPipelineExecutableStatisticFormatKHR, value : VkPipelineExecutableStatisticValueKHR) =
                {
                    sType = 1000269004u
                    pNext = pNext
                    name = name
                    description = description
                    format = format
                    value = value
                }

            new(name : String256, description : String256, format : VkPipelineExecutableStatisticFormatKHR, value : VkPipelineExecutableStatisticValueKHR) =
                VkPipelineExecutableStatisticKHR(Unchecked.defaultof<nativeint>, name, description, format, value)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.name = Unchecked.defaultof<String256> && x.description = Unchecked.defaultof<String256> && x.format = Unchecked.defaultof<VkPipelineExecutableStatisticFormatKHR> && x.value = Unchecked.defaultof<VkPipelineExecutableStatisticValueKHR>

            static member Empty =
                VkPipelineExecutableStatisticKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<String256>, Unchecked.defaultof<String256>, Unchecked.defaultof<VkPipelineExecutableStatisticFormatKHR>, Unchecked.defaultof<VkPipelineExecutableStatisticValueKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "name = %A" x.name
                    sprintf "description = %A" x.description
                    sprintf "format = %A" x.format
                    sprintf "value = %A" x.value
                ] |> sprintf "VkPipelineExecutableStatisticKHR { %s }"
        end

    type VkPipelineInfoKHR = EXTPipelineProperties.VkPipelineInfoKHR


    [<AutoOpen>]
    module EnumExtensions =
         type VkPipelineCreateFlags with
              static member inline CaptureStatisticsBitKhr = unbox<VkPipelineCreateFlags> 0x00000040
              static member inline CaptureInternalRepresentationsBitKhr = unbox<VkPipelineCreateFlags> 0x00000080

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPipelineExecutablePropertiesKHRDel = delegate of VkDevice * nativeptr<VkPipelineInfoKHR> * nativeptr<uint32> * nativeptr<VkPipelineExecutablePropertiesKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPipelineExecutableStatisticsKHRDel = delegate of VkDevice * nativeptr<VkPipelineExecutableInfoKHR> * nativeptr<uint32> * nativeptr<VkPipelineExecutableStatisticKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPipelineExecutableInternalRepresentationsKHRDel = delegate of VkDevice * nativeptr<VkPipelineExecutableInfoKHR> * nativeptr<uint32> * nativeptr<VkPipelineExecutableInternalRepresentationKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRPipelineExecutableProperties")
            static let s_vkGetPipelineExecutablePropertiesKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPipelineExecutablePropertiesKHRDel> "vkGetPipelineExecutablePropertiesKHR"
            static let s_vkGetPipelineExecutableStatisticsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPipelineExecutableStatisticsKHRDel> "vkGetPipelineExecutableStatisticsKHR"
            static let s_vkGetPipelineExecutableInternalRepresentationsKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPipelineExecutableInternalRepresentationsKHRDel> "vkGetPipelineExecutableInternalRepresentationsKHR"
            static do Report.End(3) |> ignore
            static member vkGetPipelineExecutablePropertiesKHR = s_vkGetPipelineExecutablePropertiesKHRDel
            static member vkGetPipelineExecutableStatisticsKHR = s_vkGetPipelineExecutableStatisticsKHRDel
            static member vkGetPipelineExecutableInternalRepresentationsKHR = s_vkGetPipelineExecutableInternalRepresentationsKHRDel
        let vkGetPipelineExecutablePropertiesKHR(device : VkDevice, pPipelineInfo : nativeptr<VkPipelineInfoKHR>, pExecutableCount : nativeptr<uint32>, pProperties : nativeptr<VkPipelineExecutablePropertiesKHR>) = Loader<unit>.vkGetPipelineExecutablePropertiesKHR.Invoke(device, pPipelineInfo, pExecutableCount, pProperties)
        let vkGetPipelineExecutableStatisticsKHR(device : VkDevice, pExecutableInfo : nativeptr<VkPipelineExecutableInfoKHR>, pStatisticCount : nativeptr<uint32>, pStatistics : nativeptr<VkPipelineExecutableStatisticKHR>) = Loader<unit>.vkGetPipelineExecutableStatisticsKHR.Invoke(device, pExecutableInfo, pStatisticCount, pStatistics)
        let vkGetPipelineExecutableInternalRepresentationsKHR(device : VkDevice, pExecutableInfo : nativeptr<VkPipelineExecutableInfoKHR>, pInternalRepresentationCount : nativeptr<uint32>, pInternalRepresentations : nativeptr<VkPipelineExecutableInternalRepresentationKHR>) = Loader<unit>.vkGetPipelineExecutableInternalRepresentationsKHR.Invoke(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations)

module KHRPortabilityEnumeration =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_portability_enumeration"
    let Number = 395


    [<AutoOpen>]
    module EnumExtensions =
         type VkInstanceCreateFlags with
              static member inline EnumeratePortabilityBitKhr = unbox<VkInstanceCreateFlags> 0x00000001


module KHRPortabilitySubset =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_portability_subset"
    let Number = 164

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePortabilitySubsetFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public constantAlphaColorBlendFactors : VkBool32
            val mutable public events : VkBool32
            val mutable public imageViewFormatReinterpretation : VkBool32
            val mutable public imageViewFormatSwizzle : VkBool32
            val mutable public imageView2DOn3DImage : VkBool32
            val mutable public multisampleArrayImage : VkBool32
            val mutable public mutableComparisonSamplers : VkBool32
            val mutable public pointPolygons : VkBool32
            val mutable public samplerMipLodBias : VkBool32
            val mutable public separateStencilMaskRef : VkBool32
            val mutable public shaderSampleRateInterpolationFunctions : VkBool32
            val mutable public tessellationIsolines : VkBool32
            val mutable public tessellationPointMode : VkBool32
            val mutable public triangleFans : VkBool32
            val mutable public vertexAttributeAccessBeyondStride : VkBool32

            new(pNext : nativeint, constantAlphaColorBlendFactors : VkBool32, events : VkBool32, imageViewFormatReinterpretation : VkBool32, imageViewFormatSwizzle : VkBool32, imageView2DOn3DImage : VkBool32, multisampleArrayImage : VkBool32, mutableComparisonSamplers : VkBool32, pointPolygons : VkBool32, samplerMipLodBias : VkBool32, separateStencilMaskRef : VkBool32, shaderSampleRateInterpolationFunctions : VkBool32, tessellationIsolines : VkBool32, tessellationPointMode : VkBool32, triangleFans : VkBool32, vertexAttributeAccessBeyondStride : VkBool32) =
                {
                    sType = 1000163000u
                    pNext = pNext
                    constantAlphaColorBlendFactors = constantAlphaColorBlendFactors
                    events = events
                    imageViewFormatReinterpretation = imageViewFormatReinterpretation
                    imageViewFormatSwizzle = imageViewFormatSwizzle
                    imageView2DOn3DImage = imageView2DOn3DImage
                    multisampleArrayImage = multisampleArrayImage
                    mutableComparisonSamplers = mutableComparisonSamplers
                    pointPolygons = pointPolygons
                    samplerMipLodBias = samplerMipLodBias
                    separateStencilMaskRef = separateStencilMaskRef
                    shaderSampleRateInterpolationFunctions = shaderSampleRateInterpolationFunctions
                    tessellationIsolines = tessellationIsolines
                    tessellationPointMode = tessellationPointMode
                    triangleFans = triangleFans
                    vertexAttributeAccessBeyondStride = vertexAttributeAccessBeyondStride
                }

            new(constantAlphaColorBlendFactors : VkBool32, events : VkBool32, imageViewFormatReinterpretation : VkBool32, imageViewFormatSwizzle : VkBool32, imageView2DOn3DImage : VkBool32, multisampleArrayImage : VkBool32, mutableComparisonSamplers : VkBool32, pointPolygons : VkBool32, samplerMipLodBias : VkBool32, separateStencilMaskRef : VkBool32, shaderSampleRateInterpolationFunctions : VkBool32, tessellationIsolines : VkBool32, tessellationPointMode : VkBool32, triangleFans : VkBool32, vertexAttributeAccessBeyondStride : VkBool32) =
                VkPhysicalDevicePortabilitySubsetFeaturesKHR(Unchecked.defaultof<nativeint>, constantAlphaColorBlendFactors, events, imageViewFormatReinterpretation, imageViewFormatSwizzle, imageView2DOn3DImage, multisampleArrayImage, mutableComparisonSamplers, pointPolygons, samplerMipLodBias, separateStencilMaskRef, shaderSampleRateInterpolationFunctions, tessellationIsolines, tessellationPointMode, triangleFans, vertexAttributeAccessBeyondStride)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.constantAlphaColorBlendFactors = Unchecked.defaultof<VkBool32> && x.events = Unchecked.defaultof<VkBool32> && x.imageViewFormatReinterpretation = Unchecked.defaultof<VkBool32> && x.imageViewFormatSwizzle = Unchecked.defaultof<VkBool32> && x.imageView2DOn3DImage = Unchecked.defaultof<VkBool32> && x.multisampleArrayImage = Unchecked.defaultof<VkBool32> && x.mutableComparisonSamplers = Unchecked.defaultof<VkBool32> && x.pointPolygons = Unchecked.defaultof<VkBool32> && x.samplerMipLodBias = Unchecked.defaultof<VkBool32> && x.separateStencilMaskRef = Unchecked.defaultof<VkBool32> && x.shaderSampleRateInterpolationFunctions = Unchecked.defaultof<VkBool32> && x.tessellationIsolines = Unchecked.defaultof<VkBool32> && x.tessellationPointMode = Unchecked.defaultof<VkBool32> && x.triangleFans = Unchecked.defaultof<VkBool32> && x.vertexAttributeAccessBeyondStride = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePortabilitySubsetFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "constantAlphaColorBlendFactors = %A" x.constantAlphaColorBlendFactors
                    sprintf "events = %A" x.events
                    sprintf "imageViewFormatReinterpretation = %A" x.imageViewFormatReinterpretation
                    sprintf "imageViewFormatSwizzle = %A" x.imageViewFormatSwizzle
                    sprintf "imageView2DOn3DImage = %A" x.imageView2DOn3DImage
                    sprintf "multisampleArrayImage = %A" x.multisampleArrayImage
                    sprintf "mutableComparisonSamplers = %A" x.mutableComparisonSamplers
                    sprintf "pointPolygons = %A" x.pointPolygons
                    sprintf "samplerMipLodBias = %A" x.samplerMipLodBias
                    sprintf "separateStencilMaskRef = %A" x.separateStencilMaskRef
                    sprintf "shaderSampleRateInterpolationFunctions = %A" x.shaderSampleRateInterpolationFunctions
                    sprintf "tessellationIsolines = %A" x.tessellationIsolines
                    sprintf "tessellationPointMode = %A" x.tessellationPointMode
                    sprintf "triangleFans = %A" x.triangleFans
                    sprintf "vertexAttributeAccessBeyondStride = %A" x.vertexAttributeAccessBeyondStride
                ] |> sprintf "VkPhysicalDevicePortabilitySubsetFeaturesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePortabilitySubsetPropertiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public minVertexInputBindingStrideAlignment : uint32

            new(pNext : nativeint, minVertexInputBindingStrideAlignment : uint32) =
                {
                    sType = 1000163001u
                    pNext = pNext
                    minVertexInputBindingStrideAlignment = minVertexInputBindingStrideAlignment
                }

            new(minVertexInputBindingStrideAlignment : uint32) =
                VkPhysicalDevicePortabilitySubsetPropertiesKHR(Unchecked.defaultof<nativeint>, minVertexInputBindingStrideAlignment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.minVertexInputBindingStrideAlignment = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDevicePortabilitySubsetPropertiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "minVertexInputBindingStrideAlignment = %A" x.minVertexInputBindingStrideAlignment
                ] |> sprintf "VkPhysicalDevicePortabilitySubsetPropertiesKHR { %s }"
        end



module KHRPresentId =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_KHR_present_id"
    let Number = 295

    let Required = [ KHRSwapchain.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePresentIdFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public presentId : VkBool32

            new(pNext : nativeint, presentId : VkBool32) =
                {
                    sType = 1000294001u
                    pNext = pNext
                    presentId = presentId
                }

            new(presentId : VkBool32) =
                VkPhysicalDevicePresentIdFeaturesKHR(Unchecked.defaultof<nativeint>, presentId)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.presentId = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePresentIdFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "presentId = %A" x.presentId
                ] |> sprintf "VkPhysicalDevicePresentIdFeaturesKHR { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPresentIdKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public swapchainCount : uint32
            val mutable public pPresentIds : nativeptr<uint64>

            new(pNext : nativeint, swapchainCount : uint32, pPresentIds : nativeptr<uint64>) =
                {
                    sType = 1000294000u
                    pNext = pNext
                    swapchainCount = swapchainCount
                    pPresentIds = pPresentIds
                }

            new(swapchainCount : uint32, pPresentIds : nativeptr<uint64>) =
                VkPresentIdKHR(Unchecked.defaultof<nativeint>, swapchainCount, pPresentIds)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.swapchainCount = Unchecked.defaultof<uint32> && x.pPresentIds = Unchecked.defaultof<nativeptr<uint64>>

            static member Empty =
                VkPresentIdKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<uint64>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "swapchainCount = %A" x.swapchainCount
                    sprintf "pPresentIds = %A" x.pPresentIds
                ] |> sprintf "VkPresentIdKHR { %s }"
        end



module KHRPresentWait =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRPresentId
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_KHR_present_wait"
    let Number = 249

    let Required = [ KHRPresentId.Name; KHRSwapchain.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDevicePresentWaitFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public presentWait : VkBool32

            new(pNext : nativeint, presentWait : VkBool32) =
                {
                    sType = 1000248000u
                    pNext = pNext
                    presentWait = presentWait
                }

            new(presentWait : VkBool32) =
                VkPhysicalDevicePresentWaitFeaturesKHR(Unchecked.defaultof<nativeint>, presentWait)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.presentWait = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDevicePresentWaitFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "presentWait = %A" x.presentWait
                ] |> sprintf "VkPhysicalDevicePresentWaitFeaturesKHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkWaitForPresentKHRDel = delegate of VkDevice * VkSwapchainKHR * uint64 * uint64 -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRPresentWait")
            static let s_vkWaitForPresentKHRDel = VkRaw.vkImportInstanceDelegate<VkWaitForPresentKHRDel> "vkWaitForPresentKHR"
            static do Report.End(3) |> ignore
            static member vkWaitForPresentKHR = s_vkWaitForPresentKHRDel
        let vkWaitForPresentKHR(device : VkDevice, swapchain : VkSwapchainKHR, presentId : uint64, timeout : uint64) = Loader<unit>.vkWaitForPresentKHR.Invoke(device, swapchain, presentId, timeout)

module KHRRayQuery =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open EXTDescriptorIndexing
    open KHRAccelerationStructure
    open KHRBufferDeviceAddress
    open KHRDeferredHostOperations
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance3
    open KHRShaderFloatControls
    open KHRSpirv14
    let Name = "VK_KHR_ray_query"
    let Number = 349

    let Required = [ KHRAccelerationStructure.Name; KHRSpirv14.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceRayQueryFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public rayQuery : VkBool32

            new(pNext : nativeint, rayQuery : VkBool32) =
                {
                    sType = 1000348013u
                    pNext = pNext
                    rayQuery = rayQuery
                }

            new(rayQuery : VkBool32) =
                VkPhysicalDeviceRayQueryFeaturesKHR(Unchecked.defaultof<nativeint>, rayQuery)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.rayQuery = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceRayQueryFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "rayQuery = %A" x.rayQuery
                ] |> sprintf "VkPhysicalDeviceRayQueryFeaturesKHR { %s }"
        end



module KHRRayTracingMaintenance1 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open EXTDescriptorIndexing
    open KHRAccelerationStructure
    open KHRBufferDeviceAddress
    open KHRDeferredHostOperations
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance3
    let Name = "VK_KHR_ray_tracing_maintenance1"
    let Number = 387

    let Required = [ KHRAccelerationStructure.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public rayTracingMaintenance1 : VkBool32
            val mutable public rayTracingPipelineTraceRaysIndirect2 : VkBool32

            new(pNext : nativeint, rayTracingMaintenance1 : VkBool32, rayTracingPipelineTraceRaysIndirect2 : VkBool32) =
                {
                    sType = 1000386000u
                    pNext = pNext
                    rayTracingMaintenance1 = rayTracingMaintenance1
                    rayTracingPipelineTraceRaysIndirect2 = rayTracingPipelineTraceRaysIndirect2
                }

            new(rayTracingMaintenance1 : VkBool32, rayTracingPipelineTraceRaysIndirect2 : VkBool32) =
                VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(Unchecked.defaultof<nativeint>, rayTracingMaintenance1, rayTracingPipelineTraceRaysIndirect2)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.rayTracingMaintenance1 = Unchecked.defaultof<VkBool32> && x.rayTracingPipelineTraceRaysIndirect2 = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "rayTracingMaintenance1 = %A" x.rayTracingMaintenance1
                    sprintf "rayTracingPipelineTraceRaysIndirect2 = %A" x.rayTracingPipelineTraceRaysIndirect2
                ] |> sprintf "VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkQueryType with
              static member inline AccelerationStructureSerializationBottomLevelPointersKhr = unbox<VkQueryType> 1000386000
              static member inline AccelerationStructureSizeKhr = unbox<VkQueryType> 1000386001


    module KHRSynchronization2 =
        [<AutoOpen>]
        module EnumExtensions =
             type VkAccessFlags2 with
                  static member inline Access2ShaderBindingTableReadBitKhr = unbox<VkAccessFlags2> 0x00000100
             type VkPipelineStageFlags2 with
                  static member inline PipelineStage2AccelerationStructureCopyBitKhr = unbox<VkPipelineStageFlags2> 0x10000000


    module KHRRayTracingPipeline =
        [<StructLayout(LayoutKind.Sequential)>]
        type VkTraceRaysIndirectCommand2KHR =
            struct
                val mutable public raygenShaderRecordAddress : VkDeviceAddress
                val mutable public raygenShaderRecordSize : VkDeviceSize
                val mutable public missShaderBindingTableAddress : VkDeviceAddress
                val mutable public missShaderBindingTableSize : VkDeviceSize
                val mutable public missShaderBindingTableStride : VkDeviceSize
                val mutable public hitShaderBindingTableAddress : VkDeviceAddress
                val mutable public hitShaderBindingTableSize : VkDeviceSize
                val mutable public hitShaderBindingTableStride : VkDeviceSize
                val mutable public callableShaderBindingTableAddress : VkDeviceAddress
                val mutable public callableShaderBindingTableSize : VkDeviceSize
                val mutable public callableShaderBindingTableStride : VkDeviceSize
                val mutable public width : uint32
                val mutable public height : uint32
                val mutable public depth : uint32

                new(raygenShaderRecordAddress : VkDeviceAddress, raygenShaderRecordSize : VkDeviceSize, missShaderBindingTableAddress : VkDeviceAddress, missShaderBindingTableSize : VkDeviceSize, missShaderBindingTableStride : VkDeviceSize, hitShaderBindingTableAddress : VkDeviceAddress, hitShaderBindingTableSize : VkDeviceSize, hitShaderBindingTableStride : VkDeviceSize, callableShaderBindingTableAddress : VkDeviceAddress, callableShaderBindingTableSize : VkDeviceSize, callableShaderBindingTableStride : VkDeviceSize, width : uint32, height : uint32, depth : uint32) =
                    {
                        raygenShaderRecordAddress = raygenShaderRecordAddress
                        raygenShaderRecordSize = raygenShaderRecordSize
                        missShaderBindingTableAddress = missShaderBindingTableAddress
                        missShaderBindingTableSize = missShaderBindingTableSize
                        missShaderBindingTableStride = missShaderBindingTableStride
                        hitShaderBindingTableAddress = hitShaderBindingTableAddress
                        hitShaderBindingTableSize = hitShaderBindingTableSize
                        hitShaderBindingTableStride = hitShaderBindingTableStride
                        callableShaderBindingTableAddress = callableShaderBindingTableAddress
                        callableShaderBindingTableSize = callableShaderBindingTableSize
                        callableShaderBindingTableStride = callableShaderBindingTableStride
                        width = width
                        height = height
                        depth = depth
                    }

                member x.IsEmpty =
                    x.raygenShaderRecordAddress = Unchecked.defaultof<VkDeviceAddress> && x.raygenShaderRecordSize = Unchecked.defaultof<VkDeviceSize> && x.missShaderBindingTableAddress = Unchecked.defaultof<VkDeviceAddress> && x.missShaderBindingTableSize = Unchecked.defaultof<VkDeviceSize> && x.missShaderBindingTableStride = Unchecked.defaultof<VkDeviceSize> && x.hitShaderBindingTableAddress = Unchecked.defaultof<VkDeviceAddress> && x.hitShaderBindingTableSize = Unchecked.defaultof<VkDeviceSize> && x.hitShaderBindingTableStride = Unchecked.defaultof<VkDeviceSize> && x.callableShaderBindingTableAddress = Unchecked.defaultof<VkDeviceAddress> && x.callableShaderBindingTableSize = Unchecked.defaultof<VkDeviceSize> && x.callableShaderBindingTableStride = Unchecked.defaultof<VkDeviceSize> && x.width = Unchecked.defaultof<uint32> && x.height = Unchecked.defaultof<uint32> && x.depth = Unchecked.defaultof<uint32>

                static member Empty =
                    VkTraceRaysIndirectCommand2KHR(Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<VkDeviceSize>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

                override x.ToString() =
                    String.concat "; " [
                        sprintf "raygenShaderRecordAddress = %A" x.raygenShaderRecordAddress
                        sprintf "raygenShaderRecordSize = %A" x.raygenShaderRecordSize
                        sprintf "missShaderBindingTableAddress = %A" x.missShaderBindingTableAddress
                        sprintf "missShaderBindingTableSize = %A" x.missShaderBindingTableSize
                        sprintf "missShaderBindingTableStride = %A" x.missShaderBindingTableStride
                        sprintf "hitShaderBindingTableAddress = %A" x.hitShaderBindingTableAddress
                        sprintf "hitShaderBindingTableSize = %A" x.hitShaderBindingTableSize
                        sprintf "hitShaderBindingTableStride = %A" x.hitShaderBindingTableStride
                        sprintf "callableShaderBindingTableAddress = %A" x.callableShaderBindingTableAddress
                        sprintf "callableShaderBindingTableSize = %A" x.callableShaderBindingTableSize
                        sprintf "callableShaderBindingTableStride = %A" x.callableShaderBindingTableStride
                        sprintf "width = %A" x.width
                        sprintf "height = %A" x.height
                        sprintf "depth = %A" x.depth
                    ] |> sprintf "VkTraceRaysIndirectCommand2KHR { %s }"
            end


        module VkRaw =
            [<SuppressUnmanagedCodeSecurity>]
            type VkCmdTraceRaysIndirect2KHRDel = delegate of VkCommandBuffer * VkDeviceAddress -> unit

            [<AbstractClass; Sealed>]
            type private Loader<'d> private() =
                static do Report.Begin(3, "[Vulkan] loading KHRRayTracingMaintenance1 -> KHRRayTracingPipeline")
                static let s_vkCmdTraceRaysIndirect2KHRDel = VkRaw.vkImportInstanceDelegate<VkCmdTraceRaysIndirect2KHRDel> "vkCmdTraceRaysIndirect2KHR"
                static do Report.End(3) |> ignore
                static member vkCmdTraceRaysIndirect2KHR = s_vkCmdTraceRaysIndirect2KHRDel
            let vkCmdTraceRaysIndirect2KHR(commandBuffer : VkCommandBuffer, indirectDeviceAddress : VkDeviceAddress) = Loader<unit>.vkCmdTraceRaysIndirect2KHR.Invoke(commandBuffer, indirectDeviceAddress)

module KHRRelaxedBlockLayout =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_relaxed_block_layout"
    let Number = 145


module KHRSamplerMirrorClampToEdge =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_sampler_mirror_clamp_to_edge"
    let Number = 15


    [<AutoOpen>]
    module EnumExtensions =
         type VkSamplerAddressMode with
              /// Note that this defines what was previously a core enum, and so uses the 'value' attribute rather than 'offset', and does not have a suffix. This is a special case, and should not be repeated
              static member inline MirrorClampToEdge = unbox<VkSamplerAddressMode> 4
              /// Alias introduced for consistency with extension suffixing rules
              static member inline MirrorClampToEdgeKhr = unbox<VkSamplerAddressMode> 4


module KHRSeparateDepthStencilLayouts =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRCreateRenderpass2
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance2
    open KHRMultiview
    let Name = "VK_KHR_separate_depth_stencil_layouts"
    let Number = 242

    let Required = [ KHRCreateRenderpass2.Name; KHRGetPhysicalDeviceProperties2.Name ]


    type VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout

    type VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout

    type VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures


    [<AutoOpen>]
    module EnumExtensions =
         type VkImageLayout with
              static member inline DepthAttachmentOptimalKhr = unbox<VkImageLayout> 1000241000
              static member inline DepthReadOnlyOptimalKhr = unbox<VkImageLayout> 1000241001
              static member inline StencilAttachmentOptimalKhr = unbox<VkImageLayout> 1000241002
              static member inline StencilReadOnlyOptimalKhr = unbox<VkImageLayout> 1000241003


module KHRShaderAtomicInt64 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_shader_atomic_int64"
    let Number = 181

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features



module KHRShaderClock =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_shader_clock"
    let Number = 182

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderClockFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderSubgroupClock : VkBool32
            val mutable public shaderDeviceClock : VkBool32

            new(pNext : nativeint, shaderSubgroupClock : VkBool32, shaderDeviceClock : VkBool32) =
                {
                    sType = 1000181000u
                    pNext = pNext
                    shaderSubgroupClock = shaderSubgroupClock
                    shaderDeviceClock = shaderDeviceClock
                }

            new(shaderSubgroupClock : VkBool32, shaderDeviceClock : VkBool32) =
                VkPhysicalDeviceShaderClockFeaturesKHR(Unchecked.defaultof<nativeint>, shaderSubgroupClock, shaderDeviceClock)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderSubgroupClock = Unchecked.defaultof<VkBool32> && x.shaderDeviceClock = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderClockFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderSubgroupClock = %A" x.shaderSubgroupClock
                    sprintf "shaderDeviceClock = %A" x.shaderDeviceClock
                ] |> sprintf "VkPhysicalDeviceShaderClockFeaturesKHR { %s }"
        end



module KHRShaderDrawParameters =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_shader_draw_parameters"
    let Number = 64


module KHRShaderFloat16Int8 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_shader_float16_int8"
    let Number = 83

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features

    type VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features



module KHRShaderIntegerDotProduct =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_shader_integer_dot_product"
    let Number = 281

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR = VkPhysicalDeviceShaderIntegerDotProductFeatures

    type VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR = VkPhysicalDeviceShaderIntegerDotProductProperties



module KHRShaderNonSemanticInfo =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_shader_non_semantic_info"
    let Number = 294


module KHRShaderSubgroupExtendedTypes =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_shader_subgroup_extended_types"
    let Number = 176


    type VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures



module KHRShaderSubgroupUniformControlFlow =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_shader_subgroup_uniform_control_flow"
    let Number = 324


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderSubgroupUniformControlFlow : VkBool32

            new(pNext : nativeint, shaderSubgroupUniformControlFlow : VkBool32) =
                {
                    sType = 1000323000u
                    pNext = pNext
                    shaderSubgroupUniformControlFlow = shaderSubgroupUniformControlFlow
                }

            new(shaderSubgroupUniformControlFlow : VkBool32) =
                VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(Unchecked.defaultof<nativeint>, shaderSubgroupUniformControlFlow)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderSubgroupUniformControlFlow = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderSubgroupUniformControlFlow = %A" x.shaderSubgroupUniformControlFlow
                ] |> sprintf "VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR { %s }"
        end



module KHRShaderTerminateInvocation =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_shader_terminate_invocation"
    let Number = 216

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = VkPhysicalDeviceShaderTerminateInvocationFeatures



module KHRSharedPresentableImage =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRGetSurfaceCapabilities2
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_KHR_shared_presentable_image"
    let Number = 112

    let Required = [ KHRGetPhysicalDeviceProperties2.Name; KHRGetSurfaceCapabilities2.Name; KHRSwapchain.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkSharedPresentSurfaceCapabilitiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public sharedPresentSupportedUsageFlags : VkImageUsageFlags

            new(pNext : nativeint, sharedPresentSupportedUsageFlags : VkImageUsageFlags) =
                {
                    sType = 1000111000u
                    pNext = pNext
                    sharedPresentSupportedUsageFlags = sharedPresentSupportedUsageFlags
                }

            new(sharedPresentSupportedUsageFlags : VkImageUsageFlags) =
                VkSharedPresentSurfaceCapabilitiesKHR(Unchecked.defaultof<nativeint>, sharedPresentSupportedUsageFlags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.sharedPresentSupportedUsageFlags = Unchecked.defaultof<VkImageUsageFlags>

            static member Empty =
                VkSharedPresentSurfaceCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageUsageFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "sharedPresentSupportedUsageFlags = %A" x.sharedPresentSupportedUsageFlags
                ] |> sprintf "VkSharedPresentSurfaceCapabilitiesKHR { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkImageLayout with
              static member inline SharedPresentKhr = unbox<VkImageLayout> 1000111000
         type VkPresentModeKHR with
              static member inline SharedDemandRefresh = unbox<VkPresentModeKHR> 1000111000
              static member inline SharedContinuousRefresh = unbox<VkPresentModeKHR> 1000111001

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetSwapchainStatusKHRDel = delegate of VkDevice * VkSwapchainKHR -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRSharedPresentableImage")
            static let s_vkGetSwapchainStatusKHRDel = VkRaw.vkImportInstanceDelegate<VkGetSwapchainStatusKHRDel> "vkGetSwapchainStatusKHR"
            static do Report.End(3) |> ignore
            static member vkGetSwapchainStatusKHR = s_vkGetSwapchainStatusKHRDel
        let vkGetSwapchainStatusKHR(device : VkDevice, swapchain : VkSwapchainKHR) = Loader<unit>.vkGetSwapchainStatusKHR.Invoke(device, swapchain)

module KHRSurfaceProtectedCapabilities =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetSurfaceCapabilities2
    open KHRSurface
    let Name = "VK_KHR_surface_protected_capabilities"
    let Number = 240

    let Required = [ KHRGetSurfaceCapabilities2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkSurfaceProtectedCapabilitiesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public supportsProtected : VkBool32

            new(pNext : nativeint, supportsProtected : VkBool32) =
                {
                    sType = 1000239000u
                    pNext = pNext
                    supportsProtected = supportsProtected
                }

            new(supportsProtected : VkBool32) =
                VkSurfaceProtectedCapabilitiesKHR(Unchecked.defaultof<nativeint>, supportsProtected)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.supportsProtected = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkSurfaceProtectedCapabilitiesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "supportsProtected = %A" x.supportsProtected
                ] |> sprintf "VkSurfaceProtectedCapabilitiesKHR { %s }"
        end



module KHRSwapchainMutableFormat =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRImageFormatList
    open KHRMaintenance2
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_KHR_swapchain_mutable_format"
    let Number = 201

    let Required = [ KHRImageFormatList.Name; KHRMaintenance2.Name; KHRSwapchain.Name ]


    [<AutoOpen>]
    module EnumExtensions =
         type VkSwapchainCreateFlagsKHR with
              static member inline MutableFormatBit = unbox<VkSwapchainCreateFlagsKHR> 0x00000004


module KHRTimelineSemaphore =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_timeline_semaphore"
    let Number = 208

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkSemaphoreTypeKHR = VkSemaphoreType
    type VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags

    type VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures

    type VkPhysicalDeviceTimelineSemaphorePropertiesKHR = VkPhysicalDeviceTimelineSemaphoreProperties

    type VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo

    type VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo

    type VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo

    type VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo


    [<AutoOpen>]
    module EnumExtensions =
         type VkSemaphoreType with
              static member inline BinaryKhr = unbox<VkSemaphoreType> 0
              static member inline TimelineKhr = unbox<VkSemaphoreType> 1
         type VkSemaphoreWaitFlags with
              static member inline AnyBitKhr = unbox<VkSemaphoreWaitFlags> 0x00000001

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetSemaphoreCounterValueKHRDel = delegate of VkDevice * VkSemaphore * nativeptr<uint64> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkWaitSemaphoresKHRDel = delegate of VkDevice * nativeptr<VkSemaphoreWaitInfo> * uint64 -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkSignalSemaphoreKHRDel = delegate of VkDevice * nativeptr<VkSemaphoreSignalInfo> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRTimelineSemaphore")
            static let s_vkGetSemaphoreCounterValueKHRDel = VkRaw.vkImportInstanceDelegate<VkGetSemaphoreCounterValueKHRDel> "vkGetSemaphoreCounterValueKHR"
            static let s_vkWaitSemaphoresKHRDel = VkRaw.vkImportInstanceDelegate<VkWaitSemaphoresKHRDel> "vkWaitSemaphoresKHR"
            static let s_vkSignalSemaphoreKHRDel = VkRaw.vkImportInstanceDelegate<VkSignalSemaphoreKHRDel> "vkSignalSemaphoreKHR"
            static do Report.End(3) |> ignore
            static member vkGetSemaphoreCounterValueKHR = s_vkGetSemaphoreCounterValueKHRDel
            static member vkWaitSemaphoresKHR = s_vkWaitSemaphoresKHRDel
            static member vkSignalSemaphoreKHR = s_vkSignalSemaphoreKHRDel
        let vkGetSemaphoreCounterValueKHR(device : VkDevice, semaphore : VkSemaphore, pValue : nativeptr<uint64>) = Loader<unit>.vkGetSemaphoreCounterValueKHR.Invoke(device, semaphore, pValue)
        let vkWaitSemaphoresKHR(device : VkDevice, pWaitInfo : nativeptr<VkSemaphoreWaitInfo>, timeout : uint64) = Loader<unit>.vkWaitSemaphoresKHR.Invoke(device, pWaitInfo, timeout)
        let vkSignalSemaphoreKHR(device : VkDevice, pSignalInfo : nativeptr<VkSemaphoreSignalInfo>) = Loader<unit>.vkSignalSemaphoreKHR.Invoke(device, pSignalInfo)

module KHRUniformBufferStandardLayout =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_uniform_buffer_standard_layout"
    let Number = 254

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = VkPhysicalDeviceUniformBufferStandardLayoutFeatures



module KHRVariablePointers =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRStorageBufferStorageClass
    let Name = "VK_KHR_variable_pointers"
    let Number = 121

    let Required = [ KHRGetPhysicalDeviceProperties2.Name; KHRStorageBufferStorageClass.Name ]


    type VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures

    type VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures



module KHRVulkanMemoryModel =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_KHR_vulkan_memory_model"
    let Number = 212


    type VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures



module KHRWaylandSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_KHR_wayland_surface"
    let Number = 7

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkWaylandSurfaceCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkWaylandSurfaceCreateFlagsKHR
            val mutable public display : nativeptr<nativeint>
            val mutable public surface : nativeptr<nativeint>

            new(pNext : nativeint, flags : VkWaylandSurfaceCreateFlagsKHR, display : nativeptr<nativeint>, surface : nativeptr<nativeint>) =
                {
                    sType = 1000006000u
                    pNext = pNext
                    flags = flags
                    display = display
                    surface = surface
                }

            new(flags : VkWaylandSurfaceCreateFlagsKHR, display : nativeptr<nativeint>, surface : nativeptr<nativeint>) =
                VkWaylandSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, display, surface)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkWaylandSurfaceCreateFlagsKHR> && x.display = Unchecked.defaultof<nativeptr<nativeint>> && x.surface = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkWaylandSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkWaylandSurfaceCreateFlagsKHR>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "display = %A" x.display
                    sprintf "surface = %A" x.surface
                ] |> sprintf "VkWaylandSurfaceCreateInfoKHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateWaylandSurfaceKHRDel = delegate of VkInstance * nativeptr<VkWaylandSurfaceCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceWaylandPresentationSupportKHRDel = delegate of VkPhysicalDevice * uint32 * nativeptr<nativeint> -> VkBool32

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRWaylandSurface")
            static let s_vkCreateWaylandSurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateWaylandSurfaceKHRDel> "vkCreateWaylandSurfaceKHR"
            static let s_vkGetPhysicalDeviceWaylandPresentationSupportKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceWaylandPresentationSupportKHRDel> "vkGetPhysicalDeviceWaylandPresentationSupportKHR"
            static do Report.End(3) |> ignore
            static member vkCreateWaylandSurfaceKHR = s_vkCreateWaylandSurfaceKHRDel
            static member vkGetPhysicalDeviceWaylandPresentationSupportKHR = s_vkGetPhysicalDeviceWaylandPresentationSupportKHRDel
        let vkCreateWaylandSurfaceKHR(instance : VkInstance, pCreateInfo : nativeptr<VkWaylandSurfaceCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateWaylandSurfaceKHR.Invoke(instance, pCreateInfo, pAllocator, pSurface)
        let vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, display : nativeptr<nativeint>) = Loader<unit>.vkGetPhysicalDeviceWaylandPresentationSupportKHR.Invoke(physicalDevice, queueFamilyIndex, display)

module KHRWin32KeyedMutex =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalMemory
    open KHRExternalMemoryCapabilities
    open KHRExternalMemoryWin32
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_win32_keyed_mutex"
    let Number = 76

    let Required = [ KHRExternalMemoryWin32.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkWin32KeyedMutexAcquireReleaseInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public acquireCount : uint32
            val mutable public pAcquireSyncs : nativeptr<VkDeviceMemory>
            val mutable public pAcquireKeys : nativeptr<uint64>
            val mutable public pAcquireTimeouts : nativeptr<uint32>
            val mutable public releaseCount : uint32
            val mutable public pReleaseSyncs : nativeptr<VkDeviceMemory>
            val mutable public pReleaseKeys : nativeptr<uint64>

            new(pNext : nativeint, acquireCount : uint32, pAcquireSyncs : nativeptr<VkDeviceMemory>, pAcquireKeys : nativeptr<uint64>, pAcquireTimeouts : nativeptr<uint32>, releaseCount : uint32, pReleaseSyncs : nativeptr<VkDeviceMemory>, pReleaseKeys : nativeptr<uint64>) =
                {
                    sType = 1000075000u
                    pNext = pNext
                    acquireCount = acquireCount
                    pAcquireSyncs = pAcquireSyncs
                    pAcquireKeys = pAcquireKeys
                    pAcquireTimeouts = pAcquireTimeouts
                    releaseCount = releaseCount
                    pReleaseSyncs = pReleaseSyncs
                    pReleaseKeys = pReleaseKeys
                }

            new(acquireCount : uint32, pAcquireSyncs : nativeptr<VkDeviceMemory>, pAcquireKeys : nativeptr<uint64>, pAcquireTimeouts : nativeptr<uint32>, releaseCount : uint32, pReleaseSyncs : nativeptr<VkDeviceMemory>, pReleaseKeys : nativeptr<uint64>) =
                VkWin32KeyedMutexAcquireReleaseInfoKHR(Unchecked.defaultof<nativeint>, acquireCount, pAcquireSyncs, pAcquireKeys, pAcquireTimeouts, releaseCount, pReleaseSyncs, pReleaseKeys)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.acquireCount = Unchecked.defaultof<uint32> && x.pAcquireSyncs = Unchecked.defaultof<nativeptr<VkDeviceMemory>> && x.pAcquireKeys = Unchecked.defaultof<nativeptr<uint64>> && x.pAcquireTimeouts = Unchecked.defaultof<nativeptr<uint32>> && x.releaseCount = Unchecked.defaultof<uint32> && x.pReleaseSyncs = Unchecked.defaultof<nativeptr<VkDeviceMemory>> && x.pReleaseKeys = Unchecked.defaultof<nativeptr<uint64>>

            static member Empty =
                VkWin32KeyedMutexAcquireReleaseInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDeviceMemory>>, Unchecked.defaultof<nativeptr<uint64>>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDeviceMemory>>, Unchecked.defaultof<nativeptr<uint64>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "acquireCount = %A" x.acquireCount
                    sprintf "pAcquireSyncs = %A" x.pAcquireSyncs
                    sprintf "pAcquireKeys = %A" x.pAcquireKeys
                    sprintf "pAcquireTimeouts = %A" x.pAcquireTimeouts
                    sprintf "releaseCount = %A" x.releaseCount
                    sprintf "pReleaseSyncs = %A" x.pReleaseSyncs
                    sprintf "pReleaseKeys = %A" x.pReleaseKeys
                ] |> sprintf "VkWin32KeyedMutexAcquireReleaseInfoKHR { %s }"
        end



module KHRWorkgroupMemoryExplicitLayout =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_workgroup_memory_explicit_layout"
    let Number = 337

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public workgroupMemoryExplicitLayout : VkBool32
            val mutable public workgroupMemoryExplicitLayoutScalarBlockLayout : VkBool32
            val mutable public workgroupMemoryExplicitLayout8BitAccess : VkBool32
            val mutable public workgroupMemoryExplicitLayout16BitAccess : VkBool32

            new(pNext : nativeint, workgroupMemoryExplicitLayout : VkBool32, workgroupMemoryExplicitLayoutScalarBlockLayout : VkBool32, workgroupMemoryExplicitLayout8BitAccess : VkBool32, workgroupMemoryExplicitLayout16BitAccess : VkBool32) =
                {
                    sType = 1000336000u
                    pNext = pNext
                    workgroupMemoryExplicitLayout = workgroupMemoryExplicitLayout
                    workgroupMemoryExplicitLayoutScalarBlockLayout = workgroupMemoryExplicitLayoutScalarBlockLayout
                    workgroupMemoryExplicitLayout8BitAccess = workgroupMemoryExplicitLayout8BitAccess
                    workgroupMemoryExplicitLayout16BitAccess = workgroupMemoryExplicitLayout16BitAccess
                }

            new(workgroupMemoryExplicitLayout : VkBool32, workgroupMemoryExplicitLayoutScalarBlockLayout : VkBool32, workgroupMemoryExplicitLayout8BitAccess : VkBool32, workgroupMemoryExplicitLayout16BitAccess : VkBool32) =
                VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(Unchecked.defaultof<nativeint>, workgroupMemoryExplicitLayout, workgroupMemoryExplicitLayoutScalarBlockLayout, workgroupMemoryExplicitLayout8BitAccess, workgroupMemoryExplicitLayout16BitAccess)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.workgroupMemoryExplicitLayout = Unchecked.defaultof<VkBool32> && x.workgroupMemoryExplicitLayoutScalarBlockLayout = Unchecked.defaultof<VkBool32> && x.workgroupMemoryExplicitLayout8BitAccess = Unchecked.defaultof<VkBool32> && x.workgroupMemoryExplicitLayout16BitAccess = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "workgroupMemoryExplicitLayout = %A" x.workgroupMemoryExplicitLayout
                    sprintf "workgroupMemoryExplicitLayoutScalarBlockLayout = %A" x.workgroupMemoryExplicitLayoutScalarBlockLayout
                    sprintf "workgroupMemoryExplicitLayout8BitAccess = %A" x.workgroupMemoryExplicitLayout8BitAccess
                    sprintf "workgroupMemoryExplicitLayout16BitAccess = %A" x.workgroupMemoryExplicitLayout16BitAccess
                ] |> sprintf "VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR { %s }"
        end



module KHRXcbSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_KHR_xcb_surface"
    let Number = 6

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkXcbSurfaceCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkXcbSurfaceCreateFlagsKHR
            val mutable public connection : nativeptr<nativeint>
            val mutable public window : nativeint

            new(pNext : nativeint, flags : VkXcbSurfaceCreateFlagsKHR, connection : nativeptr<nativeint>, window : nativeint) =
                {
                    sType = 1000005000u
                    pNext = pNext
                    flags = flags
                    connection = connection
                    window = window
                }

            new(flags : VkXcbSurfaceCreateFlagsKHR, connection : nativeptr<nativeint>, window : nativeint) =
                VkXcbSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, connection, window)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkXcbSurfaceCreateFlagsKHR> && x.connection = Unchecked.defaultof<nativeptr<nativeint>> && x.window = Unchecked.defaultof<nativeint>

            static member Empty =
                VkXcbSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkXcbSurfaceCreateFlagsKHR>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "connection = %A" x.connection
                    sprintf "window = %A" x.window
                ] |> sprintf "VkXcbSurfaceCreateInfoKHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateXcbSurfaceKHRDel = delegate of VkInstance * nativeptr<VkXcbSurfaceCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceXcbPresentationSupportKHRDel = delegate of VkPhysicalDevice * uint32 * nativeptr<nativeint> * nativeint -> VkBool32

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRXcbSurface")
            static let s_vkCreateXcbSurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateXcbSurfaceKHRDel> "vkCreateXcbSurfaceKHR"
            static let s_vkGetPhysicalDeviceXcbPresentationSupportKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceXcbPresentationSupportKHRDel> "vkGetPhysicalDeviceXcbPresentationSupportKHR"
            static do Report.End(3) |> ignore
            static member vkCreateXcbSurfaceKHR = s_vkCreateXcbSurfaceKHRDel
            static member vkGetPhysicalDeviceXcbPresentationSupportKHR = s_vkGetPhysicalDeviceXcbPresentationSupportKHRDel
        let vkCreateXcbSurfaceKHR(instance : VkInstance, pCreateInfo : nativeptr<VkXcbSurfaceCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateXcbSurfaceKHR.Invoke(instance, pCreateInfo, pAllocator, pSurface)
        let vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, connection : nativeptr<nativeint>, visual_id : nativeint) = Loader<unit>.vkGetPhysicalDeviceXcbPresentationSupportKHR.Invoke(physicalDevice, queueFamilyIndex, connection, visual_id)

module KHRXlibSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_KHR_xlib_surface"
    let Number = 5

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkXlibSurfaceCreateInfoKHR =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkXlibSurfaceCreateFlagsKHR
            val mutable public dpy : nativeptr<nativeint>
            val mutable public window : nativeint

            new(pNext : nativeint, flags : VkXlibSurfaceCreateFlagsKHR, dpy : nativeptr<nativeint>, window : nativeint) =
                {
                    sType = 1000004000u
                    pNext = pNext
                    flags = flags
                    dpy = dpy
                    window = window
                }

            new(flags : VkXlibSurfaceCreateFlagsKHR, dpy : nativeptr<nativeint>, window : nativeint) =
                VkXlibSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, flags, dpy, window)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkXlibSurfaceCreateFlagsKHR> && x.dpy = Unchecked.defaultof<nativeptr<nativeint>> && x.window = Unchecked.defaultof<nativeint>

            static member Empty =
                VkXlibSurfaceCreateInfoKHR(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkXlibSurfaceCreateFlagsKHR>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "dpy = %A" x.dpy
                    sprintf "window = %A" x.window
                ] |> sprintf "VkXlibSurfaceCreateInfoKHR { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateXlibSurfaceKHRDel = delegate of VkInstance * nativeptr<VkXlibSurfaceCreateInfoKHR> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceXlibPresentationSupportKHRDel = delegate of VkPhysicalDevice * uint32 * nativeptr<nativeint> * nativeint -> VkBool32

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading KHRXlibSurface")
            static let s_vkCreateXlibSurfaceKHRDel = VkRaw.vkImportInstanceDelegate<VkCreateXlibSurfaceKHRDel> "vkCreateXlibSurfaceKHR"
            static let s_vkGetPhysicalDeviceXlibPresentationSupportKHRDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceXlibPresentationSupportKHRDel> "vkGetPhysicalDeviceXlibPresentationSupportKHR"
            static do Report.End(3) |> ignore
            static member vkCreateXlibSurfaceKHR = s_vkCreateXlibSurfaceKHRDel
            static member vkGetPhysicalDeviceXlibPresentationSupportKHR = s_vkGetPhysicalDeviceXlibPresentationSupportKHRDel
        let vkCreateXlibSurfaceKHR(instance : VkInstance, pCreateInfo : nativeptr<VkXlibSurfaceCreateInfoKHR>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateXlibSurfaceKHR.Invoke(instance, pCreateInfo, pAllocator, pSurface)
        let vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, dpy : nativeptr<nativeint>, visualID : nativeint) = Loader<unit>.vkGetPhysicalDeviceXlibPresentationSupportKHR.Invoke(physicalDevice, queueFamilyIndex, dpy, visualID)

module KHRZeroInitializeWorkgroupMemory =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_KHR_zero_initialize_workgroup_memory"
    let Number = 326

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures



module MVKIosSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_MVK_ios_surface"
    let Number = 123

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkIOSSurfaceCreateInfoMVK =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkIOSSurfaceCreateFlagsMVK
            val mutable public pView : nativeint

            new(pNext : nativeint, flags : VkIOSSurfaceCreateFlagsMVK, pView : nativeint) =
                {
                    sType = 1000122000u
                    pNext = pNext
                    flags = flags
                    pView = pView
                }

            new(flags : VkIOSSurfaceCreateFlagsMVK, pView : nativeint) =
                VkIOSSurfaceCreateInfoMVK(Unchecked.defaultof<nativeint>, flags, pView)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkIOSSurfaceCreateFlagsMVK> && x.pView = Unchecked.defaultof<nativeint>

            static member Empty =
                VkIOSSurfaceCreateInfoMVK(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkIOSSurfaceCreateFlagsMVK>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "pView = %A" x.pView
                ] |> sprintf "VkIOSSurfaceCreateInfoMVK { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateIOSSurfaceMVKDel = delegate of VkInstance * nativeptr<VkIOSSurfaceCreateInfoMVK> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading MVKIosSurface")
            static let s_vkCreateIOSSurfaceMVKDel = VkRaw.vkImportInstanceDelegate<VkCreateIOSSurfaceMVKDel> "vkCreateIOSSurfaceMVK"
            static do Report.End(3) |> ignore
            static member vkCreateIOSSurfaceMVK = s_vkCreateIOSSurfaceMVKDel
        let vkCreateIOSSurfaceMVK(instance : VkInstance, pCreateInfo : nativeptr<VkIOSSurfaceCreateInfoMVK>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateIOSSurfaceMVK.Invoke(instance, pCreateInfo, pAllocator, pSurface)

module MVKMacosSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_MVK_macos_surface"
    let Number = 124

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkMacOSSurfaceCreateInfoMVK =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkMacOSSurfaceCreateFlagsMVK
            val mutable public pView : nativeint

            new(pNext : nativeint, flags : VkMacOSSurfaceCreateFlagsMVK, pView : nativeint) =
                {
                    sType = 1000123000u
                    pNext = pNext
                    flags = flags
                    pView = pView
                }

            new(flags : VkMacOSSurfaceCreateFlagsMVK, pView : nativeint) =
                VkMacOSSurfaceCreateInfoMVK(Unchecked.defaultof<nativeint>, flags, pView)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkMacOSSurfaceCreateFlagsMVK> && x.pView = Unchecked.defaultof<nativeint>

            static member Empty =
                VkMacOSSurfaceCreateInfoMVK(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkMacOSSurfaceCreateFlagsMVK>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "pView = %A" x.pView
                ] |> sprintf "VkMacOSSurfaceCreateInfoMVK { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateMacOSSurfaceMVKDel = delegate of VkInstance * nativeptr<VkMacOSSurfaceCreateInfoMVK> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading MVKMacosSurface")
            static let s_vkCreateMacOSSurfaceMVKDel = VkRaw.vkImportInstanceDelegate<VkCreateMacOSSurfaceMVKDel> "vkCreateMacOSSurfaceMVK"
            static do Report.End(3) |> ignore
            static member vkCreateMacOSSurfaceMVK = s_vkCreateMacOSSurfaceMVKDel
        let vkCreateMacOSSurfaceMVK(instance : VkInstance, pCreateInfo : nativeptr<VkMacOSSurfaceCreateInfoMVK>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateMacOSSurfaceMVK.Invoke(instance, pCreateInfo, pAllocator, pSurface)

module NNViSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_NN_vi_surface"
    let Number = 63

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkViSurfaceCreateInfoNN =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkViSurfaceCreateFlagsNN
            val mutable public window : nativeint

            new(pNext : nativeint, flags : VkViSurfaceCreateFlagsNN, window : nativeint) =
                {
                    sType = 1000062000u
                    pNext = pNext
                    flags = flags
                    window = window
                }

            new(flags : VkViSurfaceCreateFlagsNN, window : nativeint) =
                VkViSurfaceCreateInfoNN(Unchecked.defaultof<nativeint>, flags, window)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkViSurfaceCreateFlagsNN> && x.window = Unchecked.defaultof<nativeint>

            static member Empty =
                VkViSurfaceCreateInfoNN(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkViSurfaceCreateFlagsNN>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "window = %A" x.window
                ] |> sprintf "VkViSurfaceCreateInfoNN { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateViSurfaceNNDel = delegate of VkInstance * nativeptr<VkViSurfaceCreateInfoNN> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NNViSurface")
            static let s_vkCreateViSurfaceNNDel = VkRaw.vkImportInstanceDelegate<VkCreateViSurfaceNNDel> "vkCreateViSurfaceNN"
            static do Report.End(3) |> ignore
            static member vkCreateViSurfaceNN = s_vkCreateViSurfaceNNDel
        let vkCreateViSurfaceNN(instance : VkInstance, pCreateInfo : nativeptr<VkViSurfaceCreateInfoNN>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateViSurfaceNN.Invoke(instance, pCreateInfo, pAllocator, pSurface)

module NVXBinaryImport =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NVX_binary_import"
    let Number = 30



    [<StructLayout(LayoutKind.Sequential)>]
    type VkCuModuleNVX =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkCuModuleNVX(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCuFunctionNVX =
        struct
            val mutable public Handle : uint64
            new(h) = { Handle = h }
            static member Null = VkCuFunctionNVX(0UL)
            member x.IsNull = x.Handle = 0UL
            member x.IsValid = x.Handle <> 0UL
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCuFunctionCreateInfoNVX =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public _module : VkCuModuleNVX
            val mutable public pName : cstr

            new(pNext : nativeint, _module : VkCuModuleNVX, pName : cstr) =
                {
                    sType = 1000029001u
                    pNext = pNext
                    _module = _module
                    pName = pName
                }

            new(_module : VkCuModuleNVX, pName : cstr) =
                VkCuFunctionCreateInfoNVX(Unchecked.defaultof<nativeint>, _module, pName)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x._module = Unchecked.defaultof<VkCuModuleNVX> && x.pName = Unchecked.defaultof<cstr>

            static member Empty =
                VkCuFunctionCreateInfoNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCuModuleNVX>, Unchecked.defaultof<cstr>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "_module = %A" x._module
                    sprintf "pName = %A" x.pName
                ] |> sprintf "VkCuFunctionCreateInfoNVX { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCuLaunchInfoNVX =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public _function : VkCuFunctionNVX
            val mutable public gridDimX : uint32
            val mutable public gridDimY : uint32
            val mutable public gridDimZ : uint32
            val mutable public blockDimX : uint32
            val mutable public blockDimY : uint32
            val mutable public blockDimZ : uint32
            val mutable public sharedMemBytes : uint32
            val mutable public paramCount : uint64
            val mutable public pParams : nativeptr<nativeint>
            val mutable public extraCount : uint64
            val mutable public pExtras : nativeptr<nativeint>

            new(pNext : nativeint, _function : VkCuFunctionNVX, gridDimX : uint32, gridDimY : uint32, gridDimZ : uint32, blockDimX : uint32, blockDimY : uint32, blockDimZ : uint32, sharedMemBytes : uint32, paramCount : uint64, pParams : nativeptr<nativeint>, extraCount : uint64, pExtras : nativeptr<nativeint>) =
                {
                    sType = 1000029002u
                    pNext = pNext
                    _function = _function
                    gridDimX = gridDimX
                    gridDimY = gridDimY
                    gridDimZ = gridDimZ
                    blockDimX = blockDimX
                    blockDimY = blockDimY
                    blockDimZ = blockDimZ
                    sharedMemBytes = sharedMemBytes
                    paramCount = paramCount
                    pParams = pParams
                    extraCount = extraCount
                    pExtras = pExtras
                }

            new(_function : VkCuFunctionNVX, gridDimX : uint32, gridDimY : uint32, gridDimZ : uint32, blockDimX : uint32, blockDimY : uint32, blockDimZ : uint32, sharedMemBytes : uint32, paramCount : uint64, pParams : nativeptr<nativeint>, extraCount : uint64, pExtras : nativeptr<nativeint>) =
                VkCuLaunchInfoNVX(Unchecked.defaultof<nativeint>, _function, gridDimX, gridDimY, gridDimZ, blockDimX, blockDimY, blockDimZ, sharedMemBytes, paramCount, pParams, extraCount, pExtras)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x._function = Unchecked.defaultof<VkCuFunctionNVX> && x.gridDimX = Unchecked.defaultof<uint32> && x.gridDimY = Unchecked.defaultof<uint32> && x.gridDimZ = Unchecked.defaultof<uint32> && x.blockDimX = Unchecked.defaultof<uint32> && x.blockDimY = Unchecked.defaultof<uint32> && x.blockDimZ = Unchecked.defaultof<uint32> && x.sharedMemBytes = Unchecked.defaultof<uint32> && x.paramCount = Unchecked.defaultof<uint64> && x.pParams = Unchecked.defaultof<nativeptr<nativeint>> && x.extraCount = Unchecked.defaultof<uint64> && x.pExtras = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkCuLaunchInfoNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCuFunctionNVX>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "_function = %A" x._function
                    sprintf "gridDimX = %A" x.gridDimX
                    sprintf "gridDimY = %A" x.gridDimY
                    sprintf "gridDimZ = %A" x.gridDimZ
                    sprintf "blockDimX = %A" x.blockDimX
                    sprintf "blockDimY = %A" x.blockDimY
                    sprintf "blockDimZ = %A" x.blockDimZ
                    sprintf "sharedMemBytes = %A" x.sharedMemBytes
                    sprintf "paramCount = %A" x.paramCount
                    sprintf "pParams = %A" x.pParams
                    sprintf "extraCount = %A" x.extraCount
                    sprintf "pExtras = %A" x.pExtras
                ] |> sprintf "VkCuLaunchInfoNVX { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkCuModuleCreateInfoNVX =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public dataSize : uint64
            val mutable public pData : nativeint

            new(pNext : nativeint, dataSize : uint64, pData : nativeint) =
                {
                    sType = 1000029000u
                    pNext = pNext
                    dataSize = dataSize
                    pData = pData
                }

            new(dataSize : uint64, pData : nativeint) =
                VkCuModuleCreateInfoNVX(Unchecked.defaultof<nativeint>, dataSize, pData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.dataSize = Unchecked.defaultof<uint64> && x.pData = Unchecked.defaultof<nativeint>

            static member Empty =
                VkCuModuleCreateInfoNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "dataSize = %A" x.dataSize
                    sprintf "pData = %A" x.pData
                ] |> sprintf "VkCuModuleCreateInfoNVX { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkObjectType with
              static member inline CuModuleNvx = unbox<VkObjectType> 1000029000
              static member inline CuFunctionNvx = unbox<VkObjectType> 1000029001

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateCuModuleNVXDel = delegate of VkDevice * nativeptr<VkCuModuleCreateInfoNVX> * nativeptr<VkAllocationCallbacks> * nativeptr<VkCuModuleNVX> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateCuFunctionNVXDel = delegate of VkDevice * nativeptr<VkCuFunctionCreateInfoNVX> * nativeptr<VkAllocationCallbacks> * nativeptr<VkCuFunctionNVX> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyCuModuleNVXDel = delegate of VkDevice * VkCuModuleNVX * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkDestroyCuFunctionNVXDel = delegate of VkDevice * VkCuFunctionNVX * nativeptr<VkAllocationCallbacks> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdCuLaunchKernelNVXDel = delegate of VkCommandBuffer * nativeptr<VkCuLaunchInfoNVX> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVXBinaryImport")
            static let s_vkCreateCuModuleNVXDel = VkRaw.vkImportInstanceDelegate<VkCreateCuModuleNVXDel> "vkCreateCuModuleNVX"
            static let s_vkCreateCuFunctionNVXDel = VkRaw.vkImportInstanceDelegate<VkCreateCuFunctionNVXDel> "vkCreateCuFunctionNVX"
            static let s_vkDestroyCuModuleNVXDel = VkRaw.vkImportInstanceDelegate<VkDestroyCuModuleNVXDel> "vkDestroyCuModuleNVX"
            static let s_vkDestroyCuFunctionNVXDel = VkRaw.vkImportInstanceDelegate<VkDestroyCuFunctionNVXDel> "vkDestroyCuFunctionNVX"
            static let s_vkCmdCuLaunchKernelNVXDel = VkRaw.vkImportInstanceDelegate<VkCmdCuLaunchKernelNVXDel> "vkCmdCuLaunchKernelNVX"
            static do Report.End(3) |> ignore
            static member vkCreateCuModuleNVX = s_vkCreateCuModuleNVXDel
            static member vkCreateCuFunctionNVX = s_vkCreateCuFunctionNVXDel
            static member vkDestroyCuModuleNVX = s_vkDestroyCuModuleNVXDel
            static member vkDestroyCuFunctionNVX = s_vkDestroyCuFunctionNVXDel
            static member vkCmdCuLaunchKernelNVX = s_vkCmdCuLaunchKernelNVXDel
        let vkCreateCuModuleNVX(device : VkDevice, pCreateInfo : nativeptr<VkCuModuleCreateInfoNVX>, pAllocator : nativeptr<VkAllocationCallbacks>, pModule : nativeptr<VkCuModuleNVX>) = Loader<unit>.vkCreateCuModuleNVX.Invoke(device, pCreateInfo, pAllocator, pModule)
        let vkCreateCuFunctionNVX(device : VkDevice, pCreateInfo : nativeptr<VkCuFunctionCreateInfoNVX>, pAllocator : nativeptr<VkAllocationCallbacks>, pFunction : nativeptr<VkCuFunctionNVX>) = Loader<unit>.vkCreateCuFunctionNVX.Invoke(device, pCreateInfo, pAllocator, pFunction)
        let vkDestroyCuModuleNVX(device : VkDevice, _module : VkCuModuleNVX, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyCuModuleNVX.Invoke(device, _module, pAllocator)
        let vkDestroyCuFunctionNVX(device : VkDevice, _function : VkCuFunctionNVX, pAllocator : nativeptr<VkAllocationCallbacks>) = Loader<unit>.vkDestroyCuFunctionNVX.Invoke(device, _function, pAllocator)
        let vkCmdCuLaunchKernelNVX(commandBuffer : VkCommandBuffer, pLaunchInfo : nativeptr<VkCuLaunchInfoNVX>) = Loader<unit>.vkCmdCuLaunchKernelNVX.Invoke(commandBuffer, pLaunchInfo)

module NVXImageViewHandle =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NVX_image_view_handle"
    let Number = 31


    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageViewAddressPropertiesNVX =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public deviceAddress : VkDeviceAddress
            val mutable public size : VkDeviceSize

            new(pNext : nativeint, deviceAddress : VkDeviceAddress, size : VkDeviceSize) =
                {
                    sType = 1000030001u
                    pNext = pNext
                    deviceAddress = deviceAddress
                    size = size
                }

            new(deviceAddress : VkDeviceAddress, size : VkDeviceSize) =
                VkImageViewAddressPropertiesNVX(Unchecked.defaultof<nativeint>, deviceAddress, size)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.deviceAddress = Unchecked.defaultof<VkDeviceAddress> && x.size = Unchecked.defaultof<VkDeviceSize>

            static member Empty =
                VkImageViewAddressPropertiesNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceAddress>, Unchecked.defaultof<VkDeviceSize>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "deviceAddress = %A" x.deviceAddress
                    sprintf "size = %A" x.size
                ] |> sprintf "VkImageViewAddressPropertiesNVX { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImageViewHandleInfoNVX =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageView : VkImageView
            val mutable public descriptorType : VkDescriptorType
            val mutable public sampler : VkSampler

            new(pNext : nativeint, imageView : VkImageView, descriptorType : VkDescriptorType, sampler : VkSampler) =
                {
                    sType = 1000030000u
                    pNext = pNext
                    imageView = imageView
                    descriptorType = descriptorType
                    sampler = sampler
                }

            new(imageView : VkImageView, descriptorType : VkDescriptorType, sampler : VkSampler) =
                VkImageViewHandleInfoNVX(Unchecked.defaultof<nativeint>, imageView, descriptorType, sampler)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageView = Unchecked.defaultof<VkImageView> && x.descriptorType = Unchecked.defaultof<VkDescriptorType> && x.sampler = Unchecked.defaultof<VkSampler>

            static member Empty =
                VkImageViewHandleInfoNVX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImageView>, Unchecked.defaultof<VkDescriptorType>, Unchecked.defaultof<VkSampler>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageView = %A" x.imageView
                    sprintf "descriptorType = %A" x.descriptorType
                    sprintf "sampler = %A" x.sampler
                ] |> sprintf "VkImageViewHandleInfoNVX { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetImageViewHandleNVXDel = delegate of VkDevice * nativeptr<VkImageViewHandleInfoNVX> -> uint32
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetImageViewAddressNVXDel = delegate of VkDevice * VkImageView * nativeptr<VkImageViewAddressPropertiesNVX> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVXImageViewHandle")
            static let s_vkGetImageViewHandleNVXDel = VkRaw.vkImportInstanceDelegate<VkGetImageViewHandleNVXDel> "vkGetImageViewHandleNVX"
            static let s_vkGetImageViewAddressNVXDel = VkRaw.vkImportInstanceDelegate<VkGetImageViewAddressNVXDel> "vkGetImageViewAddressNVX"
            static do Report.End(3) |> ignore
            static member vkGetImageViewHandleNVX = s_vkGetImageViewHandleNVXDel
            static member vkGetImageViewAddressNVX = s_vkGetImageViewAddressNVXDel
        let vkGetImageViewHandleNVX(device : VkDevice, pInfo : nativeptr<VkImageViewHandleInfoNVX>) = Loader<unit>.vkGetImageViewHandleNVX.Invoke(device, pInfo)
        let vkGetImageViewAddressNVX(device : VkDevice, imageView : VkImageView, pProperties : nativeptr<VkImageViewAddressPropertiesNVX>) = Loader<unit>.vkGetImageViewAddressNVX.Invoke(device, imageView, pProperties)

module NVAcquireWinrtDisplay =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDirectModeDisplay
    open KHRDisplay
    open KHRSurface
    let Name = "VK_NV_acquire_winrt_display"
    let Number = 346

    let Required = [ EXTDirectModeDisplay.Name ]


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkAcquireWinrtDisplayNVDel = delegate of VkPhysicalDevice * VkDisplayKHR -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetWinrtDisplayNVDel = delegate of VkPhysicalDevice * uint32 * nativeptr<VkDisplayKHR> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVAcquireWinrtDisplay")
            static let s_vkAcquireWinrtDisplayNVDel = VkRaw.vkImportInstanceDelegate<VkAcquireWinrtDisplayNVDel> "vkAcquireWinrtDisplayNV"
            static let s_vkGetWinrtDisplayNVDel = VkRaw.vkImportInstanceDelegate<VkGetWinrtDisplayNVDel> "vkGetWinrtDisplayNV"
            static do Report.End(3) |> ignore
            static member vkAcquireWinrtDisplayNV = s_vkAcquireWinrtDisplayNVDel
            static member vkGetWinrtDisplayNV = s_vkGetWinrtDisplayNVDel
        let vkAcquireWinrtDisplayNV(physicalDevice : VkPhysicalDevice, display : VkDisplayKHR) = Loader<unit>.vkAcquireWinrtDisplayNV.Invoke(physicalDevice, display)
        let vkGetWinrtDisplayNV(physicalDevice : VkPhysicalDevice, deviceRelativeId : uint32, pDisplay : nativeptr<VkDisplayKHR>) = Loader<unit>.vkGetWinrtDisplayNV.Invoke(physicalDevice, deviceRelativeId, pDisplay)

module NVClipSpaceWScaling =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_clip_space_w_scaling"
    let Number = 88


    [<StructLayout(LayoutKind.Sequential)>]
    type VkViewportWScalingNV =
        struct
            val mutable public xcoeff : float32
            val mutable public ycoeff : float32

            new(xcoeff : float32, ycoeff : float32) =
                {
                    xcoeff = xcoeff
                    ycoeff = ycoeff
                }

            member x.IsEmpty =
                x.xcoeff = Unchecked.defaultof<float32> && x.ycoeff = Unchecked.defaultof<float32>

            static member Empty =
                VkViewportWScalingNV(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "xcoeff = %A" x.xcoeff
                    sprintf "ycoeff = %A" x.ycoeff
                ] |> sprintf "VkViewportWScalingNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineViewportWScalingStateCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public viewportWScalingEnable : VkBool32
            val mutable public viewportCount : uint32
            val mutable public pViewportWScalings : nativeptr<VkViewportWScalingNV>

            new(pNext : nativeint, viewportWScalingEnable : VkBool32, viewportCount : uint32, pViewportWScalings : nativeptr<VkViewportWScalingNV>) =
                {
                    sType = 1000087000u
                    pNext = pNext
                    viewportWScalingEnable = viewportWScalingEnable
                    viewportCount = viewportCount
                    pViewportWScalings = pViewportWScalings
                }

            new(viewportWScalingEnable : VkBool32, viewportCount : uint32, pViewportWScalings : nativeptr<VkViewportWScalingNV>) =
                VkPipelineViewportWScalingStateCreateInfoNV(Unchecked.defaultof<nativeint>, viewportWScalingEnable, viewportCount, pViewportWScalings)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.viewportWScalingEnable = Unchecked.defaultof<VkBool32> && x.viewportCount = Unchecked.defaultof<uint32> && x.pViewportWScalings = Unchecked.defaultof<nativeptr<VkViewportWScalingNV>>

            static member Empty =
                VkPipelineViewportWScalingStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkViewportWScalingNV>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "viewportWScalingEnable = %A" x.viewportWScalingEnable
                    sprintf "viewportCount = %A" x.viewportCount
                    sprintf "pViewportWScalings = %A" x.pViewportWScalings
                ] |> sprintf "VkPipelineViewportWScalingStateCreateInfoNV { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkDynamicState with
              static member inline ViewportWScalingNv = unbox<VkDynamicState> 1000087000

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetViewportWScalingNVDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkViewportWScalingNV> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVClipSpaceWScaling")
            static let s_vkCmdSetViewportWScalingNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetViewportWScalingNVDel> "vkCmdSetViewportWScalingNV"
            static do Report.End(3) |> ignore
            static member vkCmdSetViewportWScalingNV = s_vkCmdSetViewportWScalingNVDel
        let vkCmdSetViewportWScalingNV(commandBuffer : VkCommandBuffer, firstViewport : uint32, viewportCount : uint32, pViewportWScalings : nativeptr<VkViewportWScalingNV>) = Loader<unit>.vkCmdSetViewportWScalingNV.Invoke(commandBuffer, firstViewport, viewportCount, pViewportWScalings)

module NVComputeShaderDerivatives =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_NV_compute_shader_derivatives"
    let Number = 202

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceComputeShaderDerivativesFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public computeDerivativeGroupQuads : VkBool32
            val mutable public computeDerivativeGroupLinear : VkBool32

            new(pNext : nativeint, computeDerivativeGroupQuads : VkBool32, computeDerivativeGroupLinear : VkBool32) =
                {
                    sType = 1000201000u
                    pNext = pNext
                    computeDerivativeGroupQuads = computeDerivativeGroupQuads
                    computeDerivativeGroupLinear = computeDerivativeGroupLinear
                }

            new(computeDerivativeGroupQuads : VkBool32, computeDerivativeGroupLinear : VkBool32) =
                VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(Unchecked.defaultof<nativeint>, computeDerivativeGroupQuads, computeDerivativeGroupLinear)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.computeDerivativeGroupQuads = Unchecked.defaultof<VkBool32> && x.computeDerivativeGroupLinear = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "computeDerivativeGroupQuads = %A" x.computeDerivativeGroupQuads
                    sprintf "computeDerivativeGroupLinear = %A" x.computeDerivativeGroupLinear
                ] |> sprintf "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV { %s }"
        end



module NVCooperativeMatrix =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_NV_cooperative_matrix"
    let Number = 250

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkScopeNV =
        | Device = 1
        | Workgroup = 2
        | Subgroup = 3
        | QueueFamily = 5

    type VkComponentTypeNV =
        | Float16 = 0
        | Float32 = 1
        | Float64 = 2
        | Sint8 = 3
        | Sint16 = 4
        | Sint32 = 5
        | Sint64 = 6
        | Uint8 = 7
        | Uint16 = 8
        | Uint32 = 9
        | Uint64 = 10


    [<StructLayout(LayoutKind.Sequential)>]
    type VkCooperativeMatrixPropertiesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public MSize : uint32
            val mutable public NSize : uint32
            val mutable public KSize : uint32
            val mutable public AType : VkComponentTypeNV
            val mutable public BType : VkComponentTypeNV
            val mutable public CType : VkComponentTypeNV
            val mutable public DType : VkComponentTypeNV
            val mutable public scope : VkScopeNV

            new(pNext : nativeint, MSize : uint32, NSize : uint32, KSize : uint32, AType : VkComponentTypeNV, BType : VkComponentTypeNV, CType : VkComponentTypeNV, DType : VkComponentTypeNV, scope : VkScopeNV) =
                {
                    sType = 1000249001u
                    pNext = pNext
                    MSize = MSize
                    NSize = NSize
                    KSize = KSize
                    AType = AType
                    BType = BType
                    CType = CType
                    DType = DType
                    scope = scope
                }

            new(MSize : uint32, NSize : uint32, KSize : uint32, AType : VkComponentTypeNV, BType : VkComponentTypeNV, CType : VkComponentTypeNV, DType : VkComponentTypeNV, scope : VkScopeNV) =
                VkCooperativeMatrixPropertiesNV(Unchecked.defaultof<nativeint>, MSize, NSize, KSize, AType, BType, CType, DType, scope)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.MSize = Unchecked.defaultof<uint32> && x.NSize = Unchecked.defaultof<uint32> && x.KSize = Unchecked.defaultof<uint32> && x.AType = Unchecked.defaultof<VkComponentTypeNV> && x.BType = Unchecked.defaultof<VkComponentTypeNV> && x.CType = Unchecked.defaultof<VkComponentTypeNV> && x.DType = Unchecked.defaultof<VkComponentTypeNV> && x.scope = Unchecked.defaultof<VkScopeNV>

            static member Empty =
                VkCooperativeMatrixPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkComponentTypeNV>, Unchecked.defaultof<VkComponentTypeNV>, Unchecked.defaultof<VkComponentTypeNV>, Unchecked.defaultof<VkComponentTypeNV>, Unchecked.defaultof<VkScopeNV>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "MSize = %A" x.MSize
                    sprintf "NSize = %A" x.NSize
                    sprintf "KSize = %A" x.KSize
                    sprintf "AType = %A" x.AType
                    sprintf "BType = %A" x.BType
                    sprintf "CType = %A" x.CType
                    sprintf "DType = %A" x.DType
                    sprintf "scope = %A" x.scope
                ] |> sprintf "VkCooperativeMatrixPropertiesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceCooperativeMatrixFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public cooperativeMatrix : VkBool32
            val mutable public cooperativeMatrixRobustBufferAccess : VkBool32

            new(pNext : nativeint, cooperativeMatrix : VkBool32, cooperativeMatrixRobustBufferAccess : VkBool32) =
                {
                    sType = 1000249000u
                    pNext = pNext
                    cooperativeMatrix = cooperativeMatrix
                    cooperativeMatrixRobustBufferAccess = cooperativeMatrixRobustBufferAccess
                }

            new(cooperativeMatrix : VkBool32, cooperativeMatrixRobustBufferAccess : VkBool32) =
                VkPhysicalDeviceCooperativeMatrixFeaturesNV(Unchecked.defaultof<nativeint>, cooperativeMatrix, cooperativeMatrixRobustBufferAccess)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.cooperativeMatrix = Unchecked.defaultof<VkBool32> && x.cooperativeMatrixRobustBufferAccess = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceCooperativeMatrixFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "cooperativeMatrix = %A" x.cooperativeMatrix
                    sprintf "cooperativeMatrixRobustBufferAccess = %A" x.cooperativeMatrixRobustBufferAccess
                ] |> sprintf "VkPhysicalDeviceCooperativeMatrixFeaturesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceCooperativeMatrixPropertiesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public cooperativeMatrixSupportedStages : VkShaderStageFlags

            new(pNext : nativeint, cooperativeMatrixSupportedStages : VkShaderStageFlags) =
                {
                    sType = 1000249002u
                    pNext = pNext
                    cooperativeMatrixSupportedStages = cooperativeMatrixSupportedStages
                }

            new(cooperativeMatrixSupportedStages : VkShaderStageFlags) =
                VkPhysicalDeviceCooperativeMatrixPropertiesNV(Unchecked.defaultof<nativeint>, cooperativeMatrixSupportedStages)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.cooperativeMatrixSupportedStages = Unchecked.defaultof<VkShaderStageFlags>

            static member Empty =
                VkPhysicalDeviceCooperativeMatrixPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkShaderStageFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "cooperativeMatrixSupportedStages = %A" x.cooperativeMatrixSupportedStages
                ] |> sprintf "VkPhysicalDeviceCooperativeMatrixPropertiesNV { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceCooperativeMatrixPropertiesNVDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkCooperativeMatrixPropertiesNV> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVCooperativeMatrix")
            static let s_vkGetPhysicalDeviceCooperativeMatrixPropertiesNVDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceCooperativeMatrixPropertiesNVDel> "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = s_vkGetPhysicalDeviceCooperativeMatrixPropertiesNVDel
        let vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice : VkPhysicalDevice, pPropertyCount : nativeptr<uint32>, pProperties : nativeptr<VkCooperativeMatrixPropertiesNV>) = Loader<unit>.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.Invoke(physicalDevice, pPropertyCount, pProperties)

module NVCornerSampledImage =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_NV_corner_sampled_image"
    let Number = 51

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceCornerSampledImageFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public cornerSampledImage : VkBool32

            new(pNext : nativeint, cornerSampledImage : VkBool32) =
                {
                    sType = 1000050000u
                    pNext = pNext
                    cornerSampledImage = cornerSampledImage
                }

            new(cornerSampledImage : VkBool32) =
                VkPhysicalDeviceCornerSampledImageFeaturesNV(Unchecked.defaultof<nativeint>, cornerSampledImage)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.cornerSampledImage = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceCornerSampledImageFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "cornerSampledImage = %A" x.cornerSampledImage
                ] |> sprintf "VkPhysicalDeviceCornerSampledImageFeaturesNV { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkImageCreateFlags with
              static member inline CornerSampledBitNv = unbox<VkImageCreateFlags> 0x00002000


module NVCoverageReductionMode =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open NVFramebufferMixedSamples
    let Name = "VK_NV_coverage_reduction_mode"
    let Number = 251

    let Required = [ NVFramebufferMixedSamples.Name ]


    type VkCoverageReductionModeNV =
        | Merge = 0
        | Truncate = 1


    [<StructLayout(LayoutKind.Sequential)>]
    type VkFramebufferMixedSamplesCombinationNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public coverageReductionMode : VkCoverageReductionModeNV
            val mutable public rasterizationSamples : VkSampleCountFlags
            val mutable public depthStencilSamples : VkSampleCountFlags
            val mutable public colorSamples : VkSampleCountFlags

            new(pNext : nativeint, coverageReductionMode : VkCoverageReductionModeNV, rasterizationSamples : VkSampleCountFlags, depthStencilSamples : VkSampleCountFlags, colorSamples : VkSampleCountFlags) =
                {
                    sType = 1000250002u
                    pNext = pNext
                    coverageReductionMode = coverageReductionMode
                    rasterizationSamples = rasterizationSamples
                    depthStencilSamples = depthStencilSamples
                    colorSamples = colorSamples
                }

            new(coverageReductionMode : VkCoverageReductionModeNV, rasterizationSamples : VkSampleCountFlags, depthStencilSamples : VkSampleCountFlags, colorSamples : VkSampleCountFlags) =
                VkFramebufferMixedSamplesCombinationNV(Unchecked.defaultof<nativeint>, coverageReductionMode, rasterizationSamples, depthStencilSamples, colorSamples)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.coverageReductionMode = Unchecked.defaultof<VkCoverageReductionModeNV> && x.rasterizationSamples = Unchecked.defaultof<VkSampleCountFlags> && x.depthStencilSamples = Unchecked.defaultof<VkSampleCountFlags> && x.colorSamples = Unchecked.defaultof<VkSampleCountFlags>

            static member Empty =
                VkFramebufferMixedSamplesCombinationNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkCoverageReductionModeNV>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>, Unchecked.defaultof<VkSampleCountFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "coverageReductionMode = %A" x.coverageReductionMode
                    sprintf "rasterizationSamples = %A" x.rasterizationSamples
                    sprintf "depthStencilSamples = %A" x.depthStencilSamples
                    sprintf "colorSamples = %A" x.colorSamples
                ] |> sprintf "VkFramebufferMixedSamplesCombinationNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceCoverageReductionModeFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public coverageReductionMode : VkBool32

            new(pNext : nativeint, coverageReductionMode : VkBool32) =
                {
                    sType = 1000250000u
                    pNext = pNext
                    coverageReductionMode = coverageReductionMode
                }

            new(coverageReductionMode : VkBool32) =
                VkPhysicalDeviceCoverageReductionModeFeaturesNV(Unchecked.defaultof<nativeint>, coverageReductionMode)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.coverageReductionMode = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceCoverageReductionModeFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "coverageReductionMode = %A" x.coverageReductionMode
                ] |> sprintf "VkPhysicalDeviceCoverageReductionModeFeaturesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineCoverageReductionStateCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPipelineCoverageReductionStateCreateFlagsNV
            val mutable public coverageReductionMode : VkCoverageReductionModeNV

            new(pNext : nativeint, flags : VkPipelineCoverageReductionStateCreateFlagsNV, coverageReductionMode : VkCoverageReductionModeNV) =
                {
                    sType = 1000250001u
                    pNext = pNext
                    flags = flags
                    coverageReductionMode = coverageReductionMode
                }

            new(flags : VkPipelineCoverageReductionStateCreateFlagsNV, coverageReductionMode : VkCoverageReductionModeNV) =
                VkPipelineCoverageReductionStateCreateInfoNV(Unchecked.defaultof<nativeint>, flags, coverageReductionMode)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCoverageReductionStateCreateFlagsNV> && x.coverageReductionMode = Unchecked.defaultof<VkCoverageReductionModeNV>

            static member Empty =
                VkPipelineCoverageReductionStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCoverageReductionStateCreateFlagsNV>, Unchecked.defaultof<VkCoverageReductionModeNV>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "coverageReductionMode = %A" x.coverageReductionMode
                ] |> sprintf "VkPipelineCoverageReductionStateCreateInfoNV { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNVDel = delegate of VkPhysicalDevice * nativeptr<uint32> * nativeptr<VkFramebufferMixedSamplesCombinationNV> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVCoverageReductionMode")
            static let s_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNVDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNVDel> "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = s_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNVDel
        let vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice : VkPhysicalDevice, pCombinationCount : nativeptr<uint32>, pCombinations : nativeptr<VkFramebufferMixedSamplesCombinationNV>) = Loader<unit>.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.Invoke(physicalDevice, pCombinationCount, pCombinations)

module NVDedicatedAllocation =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_dedicated_allocation"
    let Number = 27


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDedicatedAllocationBufferCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public dedicatedAllocation : VkBool32

            new(pNext : nativeint, dedicatedAllocation : VkBool32) =
                {
                    sType = 1000026001u
                    pNext = pNext
                    dedicatedAllocation = dedicatedAllocation
                }

            new(dedicatedAllocation : VkBool32) =
                VkDedicatedAllocationBufferCreateInfoNV(Unchecked.defaultof<nativeint>, dedicatedAllocation)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.dedicatedAllocation = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkDedicatedAllocationBufferCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "dedicatedAllocation = %A" x.dedicatedAllocation
                ] |> sprintf "VkDedicatedAllocationBufferCreateInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDedicatedAllocationImageCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public dedicatedAllocation : VkBool32

            new(pNext : nativeint, dedicatedAllocation : VkBool32) =
                {
                    sType = 1000026000u
                    pNext = pNext
                    dedicatedAllocation = dedicatedAllocation
                }

            new(dedicatedAllocation : VkBool32) =
                VkDedicatedAllocationImageCreateInfoNV(Unchecked.defaultof<nativeint>, dedicatedAllocation)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.dedicatedAllocation = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkDedicatedAllocationImageCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "dedicatedAllocation = %A" x.dedicatedAllocation
                ] |> sprintf "VkDedicatedAllocationImageCreateInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDedicatedAllocationMemoryAllocateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public image : VkImage
            val mutable public buffer : VkBuffer

            new(pNext : nativeint, image : VkImage, buffer : VkBuffer) =
                {
                    sType = 1000026002u
                    pNext = pNext
                    image = image
                    buffer = buffer
                }

            new(image : VkImage, buffer : VkBuffer) =
                VkDedicatedAllocationMemoryAllocateInfoNV(Unchecked.defaultof<nativeint>, image, buffer)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.image = Unchecked.defaultof<VkImage> && x.buffer = Unchecked.defaultof<VkBuffer>

            static member Empty =
                VkDedicatedAllocationMemoryAllocateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkImage>, Unchecked.defaultof<VkBuffer>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "image = %A" x.image
                    sprintf "buffer = %A" x.buffer
                ] |> sprintf "VkDedicatedAllocationMemoryAllocateInfoNV { %s }"
        end



module NVDedicatedAllocationImageAliasing =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRDedicatedAllocation
    open KHRGetMemoryRequirements2
    let Name = "VK_NV_dedicated_allocation_image_aliasing"
    let Number = 241

    let Required = [ KHRDedicatedAllocation.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public dedicatedAllocationImageAliasing : VkBool32

            new(pNext : nativeint, dedicatedAllocationImageAliasing : VkBool32) =
                {
                    sType = 1000240000u
                    pNext = pNext
                    dedicatedAllocationImageAliasing = dedicatedAllocationImageAliasing
                }

            new(dedicatedAllocationImageAliasing : VkBool32) =
                VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(Unchecked.defaultof<nativeint>, dedicatedAllocationImageAliasing)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.dedicatedAllocationImageAliasing = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "dedicatedAllocationImageAliasing = %A" x.dedicatedAllocationImageAliasing
                ] |> sprintf "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV { %s }"
        end



module NVDeviceDiagnosticsConfig =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_NV_device_diagnostics_config"
    let Number = 301

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<Flags>]
    type VkDeviceDiagnosticsConfigFlagsNV =
        | All = 15
        | None = 0
        | EnableShaderDebugInfoBit = 0x00000001
        | EnableResourceTrackingBit = 0x00000002
        | EnableAutomaticCheckpointsBit = 0x00000004
        | EnableShaderErrorReportingBit = 0x00000008


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDeviceDiagnosticsConfigCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkDeviceDiagnosticsConfigFlagsNV

            new(pNext : nativeint, flags : VkDeviceDiagnosticsConfigFlagsNV) =
                {
                    sType = 1000300001u
                    pNext = pNext
                    flags = flags
                }

            new(flags : VkDeviceDiagnosticsConfigFlagsNV) =
                VkDeviceDiagnosticsConfigCreateInfoNV(Unchecked.defaultof<nativeint>, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkDeviceDiagnosticsConfigFlagsNV>

            static member Empty =
                VkDeviceDiagnosticsConfigCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceDiagnosticsConfigFlagsNV>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkDeviceDiagnosticsConfigCreateInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDiagnosticsConfigFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public diagnosticsConfig : VkBool32

            new(pNext : nativeint, diagnosticsConfig : VkBool32) =
                {
                    sType = 1000300000u
                    pNext = pNext
                    diagnosticsConfig = diagnosticsConfig
                }

            new(diagnosticsConfig : VkBool32) =
                VkPhysicalDeviceDiagnosticsConfigFeaturesNV(Unchecked.defaultof<nativeint>, diagnosticsConfig)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.diagnosticsConfig = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDiagnosticsConfigFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "diagnosticsConfig = %A" x.diagnosticsConfig
                ] |> sprintf "VkPhysicalDeviceDiagnosticsConfigFeaturesNV { %s }"
        end



module NVExternalMemoryCapabilities =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_external_memory_capabilities"
    let Number = 56


    [<Flags>]
    type VkExternalMemoryHandleTypeFlagsNV =
        | All = 15
        | None = 0
        | OpaqueWin32Bit = 0x00000001
        | OpaqueWin32KmtBit = 0x00000002
        | D3d11ImageBit = 0x00000004
        | D3d11ImageKmtBit = 0x00000008

    [<Flags>]
    type VkExternalMemoryFeatureFlagsNV =
        | All = 7
        | None = 0
        | DedicatedOnlyBit = 0x00000001
        | ExportableBit = 0x00000002
        | ImportableBit = 0x00000004


    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalImageFormatPropertiesNV =
        struct
            val mutable public imageFormatProperties : VkImageFormatProperties
            val mutable public externalMemoryFeatures : VkExternalMemoryFeatureFlagsNV
            val mutable public exportFromImportedHandleTypes : VkExternalMemoryHandleTypeFlagsNV
            val mutable public compatibleHandleTypes : VkExternalMemoryHandleTypeFlagsNV

            new(imageFormatProperties : VkImageFormatProperties, externalMemoryFeatures : VkExternalMemoryFeatureFlagsNV, exportFromImportedHandleTypes : VkExternalMemoryHandleTypeFlagsNV, compatibleHandleTypes : VkExternalMemoryHandleTypeFlagsNV) =
                {
                    imageFormatProperties = imageFormatProperties
                    externalMemoryFeatures = externalMemoryFeatures
                    exportFromImportedHandleTypes = exportFromImportedHandleTypes
                    compatibleHandleTypes = compatibleHandleTypes
                }

            member x.IsEmpty =
                x.imageFormatProperties = Unchecked.defaultof<VkImageFormatProperties> && x.externalMemoryFeatures = Unchecked.defaultof<VkExternalMemoryFeatureFlagsNV> && x.exportFromImportedHandleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV> && x.compatibleHandleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV>

            static member Empty =
                VkExternalImageFormatPropertiesNV(Unchecked.defaultof<VkImageFormatProperties>, Unchecked.defaultof<VkExternalMemoryFeatureFlagsNV>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "imageFormatProperties = %A" x.imageFormatProperties
                    sprintf "externalMemoryFeatures = %A" x.externalMemoryFeatures
                    sprintf "exportFromImportedHandleTypes = %A" x.exportFromImportedHandleTypes
                    sprintf "compatibleHandleTypes = %A" x.compatibleHandleTypes
                ] |> sprintf "VkExternalImageFormatPropertiesNV { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceExternalImageFormatPropertiesNVDel = delegate of VkPhysicalDevice * VkFormat * VkImageType * VkImageTiling * VkImageUsageFlags * VkImageCreateFlags * VkExternalMemoryHandleTypeFlagsNV * nativeptr<VkExternalImageFormatPropertiesNV> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVExternalMemoryCapabilities")
            static let s_vkGetPhysicalDeviceExternalImageFormatPropertiesNVDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceExternalImageFormatPropertiesNVDel> "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"
            static do Report.End(3) |> ignore
            static member vkGetPhysicalDeviceExternalImageFormatPropertiesNV = s_vkGetPhysicalDeviceExternalImageFormatPropertiesNVDel
        let vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice : VkPhysicalDevice, format : VkFormat, _type : VkImageType, tiling : VkImageTiling, usage : VkImageUsageFlags, flags : VkImageCreateFlags, externalHandleType : VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties : nativeptr<VkExternalImageFormatPropertiesNV>) = Loader<unit>.vkGetPhysicalDeviceExternalImageFormatPropertiesNV.Invoke(physicalDevice, format, _type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties)

module NVExternalMemory =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open NVExternalMemoryCapabilities
    let Name = "VK_NV_external_memory"
    let Number = 57

    let Required = [ NVExternalMemoryCapabilities.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMemoryAllocateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleTypes : VkExternalMemoryHandleTypeFlagsNV

            new(pNext : nativeint, handleTypes : VkExternalMemoryHandleTypeFlagsNV) =
                {
                    sType = 1000056001u
                    pNext = pNext
                    handleTypes = handleTypes
                }

            new(handleTypes : VkExternalMemoryHandleTypeFlagsNV) =
                VkExportMemoryAllocateInfoNV(Unchecked.defaultof<nativeint>, handleTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV>

            static member Empty =
                VkExportMemoryAllocateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleTypes = %A" x.handleTypes
                ] |> sprintf "VkExportMemoryAllocateInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkExternalMemoryImageCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleTypes : VkExternalMemoryHandleTypeFlagsNV

            new(pNext : nativeint, handleTypes : VkExternalMemoryHandleTypeFlagsNV) =
                {
                    sType = 1000056000u
                    pNext = pNext
                    handleTypes = handleTypes
                }

            new(handleTypes : VkExternalMemoryHandleTypeFlagsNV) =
                VkExternalMemoryImageCreateInfoNV(Unchecked.defaultof<nativeint>, handleTypes)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleTypes = Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV>

            static member Empty =
                VkExternalMemoryImageCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleTypes = %A" x.handleTypes
                ] |> sprintf "VkExternalMemoryImageCreateInfoNV { %s }"
        end



module NVExternalMemoryRdma =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRExternalMemory
    open KHRExternalMemoryCapabilities
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_NV_external_memory_rdma"
    let Number = 372

    let Required = [ KHRExternalMemory.Name ]


    type VkRemoteAddressNV = nativeint

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMemoryGetRemoteAddressInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public memory : VkDeviceMemory
            val mutable public handleType : VkExternalMemoryHandleTypeFlags

            new(pNext : nativeint, memory : VkDeviceMemory, handleType : VkExternalMemoryHandleTypeFlags) =
                {
                    sType = 1000371000u
                    pNext = pNext
                    memory = memory
                    handleType = handleType
                }

            new(memory : VkDeviceMemory, handleType : VkExternalMemoryHandleTypeFlags) =
                VkMemoryGetRemoteAddressInfoNV(Unchecked.defaultof<nativeint>, memory, handleType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.memory = Unchecked.defaultof<VkDeviceMemory> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>

            static member Empty =
                VkMemoryGetRemoteAddressInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceMemory>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "memory = %A" x.memory
                    sprintf "handleType = %A" x.handleType
                ] |> sprintf "VkMemoryGetRemoteAddressInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExternalMemoryRDMAFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public externalMemoryRDMA : VkBool32

            new(pNext : nativeint, externalMemoryRDMA : VkBool32) =
                {
                    sType = 1000371001u
                    pNext = pNext
                    externalMemoryRDMA = externalMemoryRDMA
                }

            new(externalMemoryRDMA : VkBool32) =
                VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(Unchecked.defaultof<nativeint>, externalMemoryRDMA)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.externalMemoryRDMA = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "externalMemoryRDMA = %A" x.externalMemoryRDMA
                ] |> sprintf "VkPhysicalDeviceExternalMemoryRDMAFeaturesNV { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkExternalMemoryHandleTypeFlags with
              static member inline RdmaAddressBitNv = unbox<VkExternalMemoryHandleTypeFlags> 0x00001000
         type VkMemoryPropertyFlags with
              static member inline RdmaCapableBitNv = unbox<VkMemoryPropertyFlags> 0x00000100

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetMemoryRemoteAddressNVDel = delegate of VkDevice * nativeptr<VkMemoryGetRemoteAddressInfoNV> * nativeptr<VkRemoteAddressNV> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVExternalMemoryRdma")
            static let s_vkGetMemoryRemoteAddressNVDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryRemoteAddressNVDel> "vkGetMemoryRemoteAddressNV"
            static do Report.End(3) |> ignore
            static member vkGetMemoryRemoteAddressNV = s_vkGetMemoryRemoteAddressNVDel
        let vkGetMemoryRemoteAddressNV(device : VkDevice, pMemoryGetRemoteAddressInfo : nativeptr<VkMemoryGetRemoteAddressInfoNV>, pAddress : nativeptr<VkRemoteAddressNV>) = Loader<unit>.vkGetMemoryRemoteAddressNV.Invoke(device, pMemoryGetRemoteAddressInfo, pAddress)

module NVExternalMemoryWin32 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open NVExternalMemory
    open NVExternalMemoryCapabilities
    let Name = "VK_NV_external_memory_win32"
    let Number = 58

    let Required = [ NVExternalMemory.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkExportMemoryWin32HandleInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public pAttributes : nativeptr<nativeint>
            val mutable public dwAccess : uint32

            new(pNext : nativeint, pAttributes : nativeptr<nativeint>, dwAccess : uint32) =
                {
                    sType = 1000057001u
                    pNext = pNext
                    pAttributes = pAttributes
                    dwAccess = dwAccess
                }

            new(pAttributes : nativeptr<nativeint>, dwAccess : uint32) =
                VkExportMemoryWin32HandleInfoNV(Unchecked.defaultof<nativeint>, pAttributes, dwAccess)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.pAttributes = Unchecked.defaultof<nativeptr<nativeint>> && x.dwAccess = Unchecked.defaultof<uint32>

            static member Empty =
                VkExportMemoryWin32HandleInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "pAttributes = %A" x.pAttributes
                    sprintf "dwAccess = %A" x.dwAccess
                ] |> sprintf "VkExportMemoryWin32HandleInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkImportMemoryWin32HandleInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public handleType : VkExternalMemoryHandleTypeFlagsNV
            val mutable public handle : nativeint

            new(pNext : nativeint, handleType : VkExternalMemoryHandleTypeFlagsNV, handle : nativeint) =
                {
                    sType = 1000057000u
                    pNext = pNext
                    handleType = handleType
                    handle = handle
                }

            new(handleType : VkExternalMemoryHandleTypeFlagsNV, handle : nativeint) =
                VkImportMemoryWin32HandleInfoNV(Unchecked.defaultof<nativeint>, handleType, handle)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.handleType = Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV> && x.handle = Unchecked.defaultof<nativeint>

            static member Empty =
                VkImportMemoryWin32HandleInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExternalMemoryHandleTypeFlagsNV>, Unchecked.defaultof<nativeint>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "handleType = %A" x.handleType
                    sprintf "handle = %A" x.handle
                ] |> sprintf "VkImportMemoryWin32HandleInfoNV { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetMemoryWin32HandleNVDel = delegate of VkDevice * VkDeviceMemory * VkExternalMemoryHandleTypeFlagsNV * nativeptr<nativeint> -> VkResult

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVExternalMemoryWin32")
            static let s_vkGetMemoryWin32HandleNVDel = VkRaw.vkImportInstanceDelegate<VkGetMemoryWin32HandleNVDel> "vkGetMemoryWin32HandleNV"
            static do Report.End(3) |> ignore
            static member vkGetMemoryWin32HandleNV = s_vkGetMemoryWin32HandleNVDel
        let vkGetMemoryWin32HandleNV(device : VkDevice, memory : VkDeviceMemory, handleType : VkExternalMemoryHandleTypeFlagsNV, pHandle : nativeptr<nativeint>) = Loader<unit>.vkGetMemoryWin32HandleNV.Invoke(device, memory, handleType, pHandle)

module NVFillRectangle =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_fill_rectangle"
    let Number = 154


    [<AutoOpen>]
    module EnumExtensions =
         type VkPolygonMode with
              static member inline FillRectangleNv = unbox<VkPolygonMode> 1000153000


module NVFragmentCoverageToColor =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_fragment_coverage_to_color"
    let Number = 150


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineCoverageToColorStateCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPipelineCoverageToColorStateCreateFlagsNV
            val mutable public coverageToColorEnable : VkBool32
            val mutable public coverageToColorLocation : uint32

            new(pNext : nativeint, flags : VkPipelineCoverageToColorStateCreateFlagsNV, coverageToColorEnable : VkBool32, coverageToColorLocation : uint32) =
                {
                    sType = 1000149000u
                    pNext = pNext
                    flags = flags
                    coverageToColorEnable = coverageToColorEnable
                    coverageToColorLocation = coverageToColorLocation
                }

            new(flags : VkPipelineCoverageToColorStateCreateFlagsNV, coverageToColorEnable : VkBool32, coverageToColorLocation : uint32) =
                VkPipelineCoverageToColorStateCreateInfoNV(Unchecked.defaultof<nativeint>, flags, coverageToColorEnable, coverageToColorLocation)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineCoverageToColorStateCreateFlagsNV> && x.coverageToColorEnable = Unchecked.defaultof<VkBool32> && x.coverageToColorLocation = Unchecked.defaultof<uint32>

            static member Empty =
                VkPipelineCoverageToColorStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineCoverageToColorStateCreateFlagsNV>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "coverageToColorEnable = %A" x.coverageToColorEnable
                    sprintf "coverageToColorLocation = %A" x.coverageToColorLocation
                ] |> sprintf "VkPipelineCoverageToColorStateCreateInfoNV { %s }"
        end



module NVFragmentShaderBarycentric =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_NV_fragment_shader_barycentric"
    let Number = 204

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    type VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR



module NVFragmentShadingRateEnums =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRCreateRenderpass2
    open KHRFragmentShadingRate
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance2
    open KHRMultiview
    let Name = "VK_NV_fragment_shading_rate_enums"
    let Number = 327

    let Required = [ KHRFragmentShadingRate.Name ]


    type VkFragmentShadingRateNV =
        | D1InvocationPerPixel = 0
        | D1InvocationPer1x2Pixels = 1
        | D1InvocationPer2x1Pixels = 4
        | D1InvocationPer2x2Pixels = 5
        | D1InvocationPer2x4Pixels = 6
        | D1InvocationPer4x2Pixels = 9
        | D1InvocationPer4x4Pixels = 10
        | D2InvocationsPerPixel = 11
        | D4InvocationsPerPixel = 12
        | D8InvocationsPerPixel = 13
        | D16InvocationsPerPixel = 14
        | NoInvocations = 15

    type VkFragmentShadingRateTypeNV =
        | FragmentSize = 0
        | Enums = 1


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fragmentShadingRateEnums : VkBool32
            val mutable public supersampleFragmentShadingRates : VkBool32
            val mutable public noInvocationFragmentShadingRates : VkBool32

            new(pNext : nativeint, fragmentShadingRateEnums : VkBool32, supersampleFragmentShadingRates : VkBool32, noInvocationFragmentShadingRates : VkBool32) =
                {
                    sType = 1000326001u
                    pNext = pNext
                    fragmentShadingRateEnums = fragmentShadingRateEnums
                    supersampleFragmentShadingRates = supersampleFragmentShadingRates
                    noInvocationFragmentShadingRates = noInvocationFragmentShadingRates
                }

            new(fragmentShadingRateEnums : VkBool32, supersampleFragmentShadingRates : VkBool32, noInvocationFragmentShadingRates : VkBool32) =
                VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(Unchecked.defaultof<nativeint>, fragmentShadingRateEnums, supersampleFragmentShadingRates, noInvocationFragmentShadingRates)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fragmentShadingRateEnums = Unchecked.defaultof<VkBool32> && x.supersampleFragmentShadingRates = Unchecked.defaultof<VkBool32> && x.noInvocationFragmentShadingRates = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fragmentShadingRateEnums = %A" x.fragmentShadingRateEnums
                    sprintf "supersampleFragmentShadingRates = %A" x.supersampleFragmentShadingRates
                    sprintf "noInvocationFragmentShadingRates = %A" x.noInvocationFragmentShadingRates
                ] |> sprintf "VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxFragmentShadingRateInvocationCount : VkSampleCountFlags

            new(pNext : nativeint, maxFragmentShadingRateInvocationCount : VkSampleCountFlags) =
                {
                    sType = 1000326000u
                    pNext = pNext
                    maxFragmentShadingRateInvocationCount = maxFragmentShadingRateInvocationCount
                }

            new(maxFragmentShadingRateInvocationCount : VkSampleCountFlags) =
                VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(Unchecked.defaultof<nativeint>, maxFragmentShadingRateInvocationCount)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxFragmentShadingRateInvocationCount = Unchecked.defaultof<VkSampleCountFlags>

            static member Empty =
                VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSampleCountFlags>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxFragmentShadingRateInvocationCount = %A" x.maxFragmentShadingRateInvocationCount
                ] |> sprintf "VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineFragmentShadingRateEnumStateCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shadingRateType : VkFragmentShadingRateTypeNV
            val mutable public shadingRate : VkFragmentShadingRateNV
            val mutable public combinerOps : VkFragmentShadingRateCombinerOpKHR_2

            new(pNext : nativeint, shadingRateType : VkFragmentShadingRateTypeNV, shadingRate : VkFragmentShadingRateNV, combinerOps : VkFragmentShadingRateCombinerOpKHR_2) =
                {
                    sType = 1000326002u
                    pNext = pNext
                    shadingRateType = shadingRateType
                    shadingRate = shadingRate
                    combinerOps = combinerOps
                }

            new(shadingRateType : VkFragmentShadingRateTypeNV, shadingRate : VkFragmentShadingRateNV, combinerOps : VkFragmentShadingRateCombinerOpKHR_2) =
                VkPipelineFragmentShadingRateEnumStateCreateInfoNV(Unchecked.defaultof<nativeint>, shadingRateType, shadingRate, combinerOps)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shadingRateType = Unchecked.defaultof<VkFragmentShadingRateTypeNV> && x.shadingRate = Unchecked.defaultof<VkFragmentShadingRateNV> && x.combinerOps = Unchecked.defaultof<VkFragmentShadingRateCombinerOpKHR_2>

            static member Empty =
                VkPipelineFragmentShadingRateEnumStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkFragmentShadingRateTypeNV>, Unchecked.defaultof<VkFragmentShadingRateNV>, Unchecked.defaultof<VkFragmentShadingRateCombinerOpKHR_2>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shadingRateType = %A" x.shadingRateType
                    sprintf "shadingRate = %A" x.shadingRate
                    sprintf "combinerOps = %A" x.combinerOps
                ] |> sprintf "VkPipelineFragmentShadingRateEnumStateCreateInfoNV { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetFragmentShadingRateEnumNVDel = delegate of VkCommandBuffer * VkFragmentShadingRateNV * VkFragmentShadingRateCombinerOpKHR_2 -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVFragmentShadingRateEnums")
            static let s_vkCmdSetFragmentShadingRateEnumNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetFragmentShadingRateEnumNVDel> "vkCmdSetFragmentShadingRateEnumNV"
            static do Report.End(3) |> ignore
            static member vkCmdSetFragmentShadingRateEnumNV = s_vkCmdSetFragmentShadingRateEnumNVDel
        let vkCmdSetFragmentShadingRateEnumNV(commandBuffer : VkCommandBuffer, shadingRate : VkFragmentShadingRateNV, combinerOps : VkFragmentShadingRateCombinerOpKHR_2) = Loader<unit>.vkCmdSetFragmentShadingRateEnumNV.Invoke(commandBuffer, shadingRate, combinerOps)

module NVGeometryShaderPassthrough =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_geometry_shader_passthrough"
    let Number = 96


module NVGlslShader =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_glsl_shader"
    let Number = 13


    [<AutoOpen>]
    module EnumExtensions =
         type VkResult with
              static member inline ErrorInvalidShaderNv = unbox<VkResult> -1000012000


module NVInheritedViewportScissor =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_inherited_viewport_scissor"
    let Number = 279


    [<StructLayout(LayoutKind.Sequential)>]
    type VkCommandBufferInheritanceViewportScissorInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public viewportScissor2D : VkBool32
            val mutable public viewportDepthCount : uint32
            val mutable public pViewportDepths : nativeptr<VkViewport>

            new(pNext : nativeint, viewportScissor2D : VkBool32, viewportDepthCount : uint32, pViewportDepths : nativeptr<VkViewport>) =
                {
                    sType = 1000278001u
                    pNext = pNext
                    viewportScissor2D = viewportScissor2D
                    viewportDepthCount = viewportDepthCount
                    pViewportDepths = pViewportDepths
                }

            new(viewportScissor2D : VkBool32, viewportDepthCount : uint32, pViewportDepths : nativeptr<VkViewport>) =
                VkCommandBufferInheritanceViewportScissorInfoNV(Unchecked.defaultof<nativeint>, viewportScissor2D, viewportDepthCount, pViewportDepths)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.viewportScissor2D = Unchecked.defaultof<VkBool32> && x.viewportDepthCount = Unchecked.defaultof<uint32> && x.pViewportDepths = Unchecked.defaultof<nativeptr<VkViewport>>

            static member Empty =
                VkCommandBufferInheritanceViewportScissorInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkViewport>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "viewportScissor2D = %A" x.viewportScissor2D
                    sprintf "viewportDepthCount = %A" x.viewportDepthCount
                    sprintf "pViewportDepths = %A" x.pViewportDepths
                ] |> sprintf "VkCommandBufferInheritanceViewportScissorInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceInheritedViewportScissorFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public inheritedViewportScissor2D : VkBool32

            new(pNext : nativeint, inheritedViewportScissor2D : VkBool32) =
                {
                    sType = 1000278000u
                    pNext = pNext
                    inheritedViewportScissor2D = inheritedViewportScissor2D
                }

            new(inheritedViewportScissor2D : VkBool32) =
                VkPhysicalDeviceInheritedViewportScissorFeaturesNV(Unchecked.defaultof<nativeint>, inheritedViewportScissor2D)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.inheritedViewportScissor2D = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceInheritedViewportScissorFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "inheritedViewportScissor2D = %A" x.inheritedViewportScissor2D
                ] |> sprintf "VkPhysicalDeviceInheritedViewportScissorFeaturesNV { %s }"
        end



module NVLinearColorAttachment =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_linear_color_attachment"
    let Number = 431


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceLinearColorAttachmentFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public linearColorAttachment : VkBool32

            new(pNext : nativeint, linearColorAttachment : VkBool32) =
                {
                    sType = 1000430000u
                    pNext = pNext
                    linearColorAttachment = linearColorAttachment
                }

            new(linearColorAttachment : VkBool32) =
                VkPhysicalDeviceLinearColorAttachmentFeaturesNV(Unchecked.defaultof<nativeint>, linearColorAttachment)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.linearColorAttachment = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceLinearColorAttachmentFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "linearColorAttachment = %A" x.linearColorAttachment
                ] |> sprintf "VkPhysicalDeviceLinearColorAttachmentFeaturesNV { %s }"
        end



    module KHRFormatFeatureFlags2 =
        [<AutoOpen>]
        module EnumExtensions =
             type VkFormatFeatureFlags2 with
                  /// Format support linear image as render target, it cannot be mixed with non linear attachment
                  static member inline FormatFeature2LinearColorAttachmentBitNv = unbox<VkFormatFeatureFlags2> 0x00000040


module NVRayTracingMotionBlur =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTDebugReport
    open EXTDescriptorIndexing
    open KHRAccelerationStructure
    open KHRBufferDeviceAddress
    open KHRDeferredHostOperations
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance3
    open KHRPipelineLibrary
    open KHRRayTracingPipeline
    open KHRShaderFloatControls
    open KHRSpirv14
    let Name = "VK_NV_ray_tracing_motion_blur"
    let Number = 328

    let Required = [ KHRRayTracingPipeline.Name ]


    type VkAccelerationStructureMotionInstanceTypeNV =
        | Static = 0
        | MatrixMotion = 1
        | SrtMotion = 2


    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureGeometryMotionTrianglesDataNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public vertexData : VkDeviceOrHostAddressConstKHR

            new(pNext : nativeint, vertexData : VkDeviceOrHostAddressConstKHR) =
                {
                    sType = 1000327000u
                    pNext = pNext
                    vertexData = vertexData
                }

            new(vertexData : VkDeviceOrHostAddressConstKHR) =
                VkAccelerationStructureGeometryMotionTrianglesDataNV(Unchecked.defaultof<nativeint>, vertexData)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.vertexData = Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>

            static member Empty =
                VkAccelerationStructureGeometryMotionTrianglesDataNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDeviceOrHostAddressConstKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "vertexData = %A" x.vertexData
                ] |> sprintf "VkAccelerationStructureGeometryMotionTrianglesDataNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureMatrixMotionInstanceNV =
        struct
            val mutable public transformT0 : VkTransformMatrixKHR
            val mutable public transformT1 : VkTransformMatrixKHR
            val mutable public instanceCustomIndex : uint24
            val mutable public mask : uint8
            val mutable public instanceShaderBindingTableRecordOffset : uint24
            val mutable public flags : uint8
            val mutable public accelerationStructureReference : uint64

            new(transformT0 : VkTransformMatrixKHR, transformT1 : VkTransformMatrixKHR, instanceCustomIndex : uint24, mask : uint8, instanceShaderBindingTableRecordOffset : uint24, flags : uint8, accelerationStructureReference : uint64) =
                {
                    transformT0 = transformT0
                    transformT1 = transformT1
                    instanceCustomIndex = instanceCustomIndex
                    mask = mask
                    instanceShaderBindingTableRecordOffset = instanceShaderBindingTableRecordOffset
                    flags = flags
                    accelerationStructureReference = accelerationStructureReference
                }

            member x.IsEmpty =
                x.transformT0 = Unchecked.defaultof<VkTransformMatrixKHR> && x.transformT1 = Unchecked.defaultof<VkTransformMatrixKHR> && x.instanceCustomIndex = Unchecked.defaultof<uint24> && x.mask = Unchecked.defaultof<uint8> && x.instanceShaderBindingTableRecordOffset = Unchecked.defaultof<uint24> && x.flags = Unchecked.defaultof<uint8> && x.accelerationStructureReference = Unchecked.defaultof<uint64>

            static member Empty =
                VkAccelerationStructureMatrixMotionInstanceNV(Unchecked.defaultof<VkTransformMatrixKHR>, Unchecked.defaultof<VkTransformMatrixKHR>, Unchecked.defaultof<uint24>, Unchecked.defaultof<uint8>, Unchecked.defaultof<uint24>, Unchecked.defaultof<uint8>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "transformT0 = %A" x.transformT0
                    sprintf "transformT1 = %A" x.transformT1
                    sprintf "instanceCustomIndex = %A" x.instanceCustomIndex
                    sprintf "mask = %A" x.mask
                    sprintf "instanceShaderBindingTableRecordOffset = %A" x.instanceShaderBindingTableRecordOffset
                    sprintf "flags = %A" x.flags
                    sprintf "accelerationStructureReference = %A" x.accelerationStructureReference
                ] |> sprintf "VkAccelerationStructureMatrixMotionInstanceNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureMotionInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public maxInstances : uint32
            val mutable public flags : VkAccelerationStructureMotionInfoFlagsNV

            new(pNext : nativeint, maxInstances : uint32, flags : VkAccelerationStructureMotionInfoFlagsNV) =
                {
                    sType = 1000327002u
                    pNext = pNext
                    maxInstances = maxInstances
                    flags = flags
                }

            new(maxInstances : uint32, flags : VkAccelerationStructureMotionInfoFlagsNV) =
                VkAccelerationStructureMotionInfoNV(Unchecked.defaultof<nativeint>, maxInstances, flags)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.maxInstances = Unchecked.defaultof<uint32> && x.flags = Unchecked.defaultof<VkAccelerationStructureMotionInfoFlagsNV>

            static member Empty =
                VkAccelerationStructureMotionInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<VkAccelerationStructureMotionInfoFlagsNV>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "maxInstances = %A" x.maxInstances
                    sprintf "flags = %A" x.flags
                ] |> sprintf "VkAccelerationStructureMotionInfoNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSRTDataNV =
        struct
            val mutable public sx : float32
            val mutable public a : float32
            val mutable public b : float32
            val mutable public pvx : float32
            val mutable public sy : float32
            val mutable public c : float32
            val mutable public pvy : float32
            val mutable public sz : float32
            val mutable public pvz : float32
            val mutable public qx : float32
            val mutable public qy : float32
            val mutable public qz : float32
            val mutable public qw : float32
            val mutable public tx : float32
            val mutable public ty : float32
            val mutable public tz : float32

            new(sx : float32, a : float32, b : float32, pvx : float32, sy : float32, c : float32, pvy : float32, sz : float32, pvz : float32, qx : float32, qy : float32, qz : float32, qw : float32, tx : float32, ty : float32, tz : float32) =
                {
                    sx = sx
                    a = a
                    b = b
                    pvx = pvx
                    sy = sy
                    c = c
                    pvy = pvy
                    sz = sz
                    pvz = pvz
                    qx = qx
                    qy = qy
                    qz = qz
                    qw = qw
                    tx = tx
                    ty = ty
                    tz = tz
                }

            member x.IsEmpty =
                x.sx = Unchecked.defaultof<float32> && x.a = Unchecked.defaultof<float32> && x.b = Unchecked.defaultof<float32> && x.pvx = Unchecked.defaultof<float32> && x.sy = Unchecked.defaultof<float32> && x.c = Unchecked.defaultof<float32> && x.pvy = Unchecked.defaultof<float32> && x.sz = Unchecked.defaultof<float32> && x.pvz = Unchecked.defaultof<float32> && x.qx = Unchecked.defaultof<float32> && x.qy = Unchecked.defaultof<float32> && x.qz = Unchecked.defaultof<float32> && x.qw = Unchecked.defaultof<float32> && x.tx = Unchecked.defaultof<float32> && x.ty = Unchecked.defaultof<float32> && x.tz = Unchecked.defaultof<float32>

            static member Empty =
                VkSRTDataNV(Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>, Unchecked.defaultof<float32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sx = %A" x.sx
                    sprintf "a = %A" x.a
                    sprintf "b = %A" x.b
                    sprintf "pvx = %A" x.pvx
                    sprintf "sy = %A" x.sy
                    sprintf "c = %A" x.c
                    sprintf "pvy = %A" x.pvy
                    sprintf "sz = %A" x.sz
                    sprintf "pvz = %A" x.pvz
                    sprintf "qx = %A" x.qx
                    sprintf "qy = %A" x.qy
                    sprintf "qz = %A" x.qz
                    sprintf "qw = %A" x.qw
                    sprintf "tx = %A" x.tx
                    sprintf "ty = %A" x.ty
                    sprintf "tz = %A" x.tz
                ] |> sprintf "VkSRTDataNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureSRTMotionInstanceNV =
        struct
            val mutable public transformT0 : VkSRTDataNV
            val mutable public transformT1 : VkSRTDataNV
            val mutable public instanceCustomIndex : uint24
            val mutable public mask : uint8
            val mutable public instanceShaderBindingTableRecordOffset : uint24
            val mutable public flags : uint8
            val mutable public accelerationStructureReference : uint64

            new(transformT0 : VkSRTDataNV, transformT1 : VkSRTDataNV, instanceCustomIndex : uint24, mask : uint8, instanceShaderBindingTableRecordOffset : uint24, flags : uint8, accelerationStructureReference : uint64) =
                {
                    transformT0 = transformT0
                    transformT1 = transformT1
                    instanceCustomIndex = instanceCustomIndex
                    mask = mask
                    instanceShaderBindingTableRecordOffset = instanceShaderBindingTableRecordOffset
                    flags = flags
                    accelerationStructureReference = accelerationStructureReference
                }

            member x.IsEmpty =
                x.transformT0 = Unchecked.defaultof<VkSRTDataNV> && x.transformT1 = Unchecked.defaultof<VkSRTDataNV> && x.instanceCustomIndex = Unchecked.defaultof<uint24> && x.mask = Unchecked.defaultof<uint8> && x.instanceShaderBindingTableRecordOffset = Unchecked.defaultof<uint24> && x.flags = Unchecked.defaultof<uint8> && x.accelerationStructureReference = Unchecked.defaultof<uint64>

            static member Empty =
                VkAccelerationStructureSRTMotionInstanceNV(Unchecked.defaultof<VkSRTDataNV>, Unchecked.defaultof<VkSRTDataNV>, Unchecked.defaultof<uint24>, Unchecked.defaultof<uint8>, Unchecked.defaultof<uint24>, Unchecked.defaultof<uint8>, Unchecked.defaultof<uint64>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "transformT0 = %A" x.transformT0
                    sprintf "transformT1 = %A" x.transformT1
                    sprintf "instanceCustomIndex = %A" x.instanceCustomIndex
                    sprintf "mask = %A" x.mask
                    sprintf "instanceShaderBindingTableRecordOffset = %A" x.instanceShaderBindingTableRecordOffset
                    sprintf "flags = %A" x.flags
                    sprintf "accelerationStructureReference = %A" x.accelerationStructureReference
                ] |> sprintf "VkAccelerationStructureSRTMotionInstanceNV { %s }"
        end

    [<StructLayout(LayoutKind.Explicit)>]
    type VkAccelerationStructureMotionInstanceDataNV =
        struct
            [<FieldOffset(0)>]
            val mutable public staticInstance : VkAccelerationStructureInstanceKHR
            [<FieldOffset(0)>]
            val mutable public matrixMotionInstance : VkAccelerationStructureMatrixMotionInstanceNV
            [<FieldOffset(0)>]
            val mutable public srtMotionInstance : VkAccelerationStructureSRTMotionInstanceNV

            static member StaticInstance(value : VkAccelerationStructureInstanceKHR) =
                let mutable result = Unchecked.defaultof<VkAccelerationStructureMotionInstanceDataNV>
                result.staticInstance <- value
                result

            static member MatrixMotionInstance(value : VkAccelerationStructureMatrixMotionInstanceNV) =
                let mutable result = Unchecked.defaultof<VkAccelerationStructureMotionInstanceDataNV>
                result.matrixMotionInstance <- value
                result

            static member SrtMotionInstance(value : VkAccelerationStructureSRTMotionInstanceNV) =
                let mutable result = Unchecked.defaultof<VkAccelerationStructureMotionInstanceDataNV>
                result.srtMotionInstance <- value
                result

            override x.ToString() =
                String.concat "; " [
                    sprintf "staticInstance = %A" x.staticInstance
                    sprintf "matrixMotionInstance = %A" x.matrixMotionInstance
                    sprintf "srtMotionInstance = %A" x.srtMotionInstance
                ] |> sprintf "VkAccelerationStructureMotionInstanceDataNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkAccelerationStructureMotionInstanceNV =
        struct
            val mutable public _type : VkAccelerationStructureMotionInstanceTypeNV
            val mutable public flags : VkAccelerationStructureMotionInstanceFlagsNV
            val mutable public data : VkAccelerationStructureMotionInstanceDataNV

            new(_type : VkAccelerationStructureMotionInstanceTypeNV, flags : VkAccelerationStructureMotionInstanceFlagsNV, data : VkAccelerationStructureMotionInstanceDataNV) =
                {
                    _type = _type
                    flags = flags
                    data = data
                }

            member x.IsEmpty =
                x._type = Unchecked.defaultof<VkAccelerationStructureMotionInstanceTypeNV> && x.flags = Unchecked.defaultof<VkAccelerationStructureMotionInstanceFlagsNV> && x.data = Unchecked.defaultof<VkAccelerationStructureMotionInstanceDataNV>

            static member Empty =
                VkAccelerationStructureMotionInstanceNV(Unchecked.defaultof<VkAccelerationStructureMotionInstanceTypeNV>, Unchecked.defaultof<VkAccelerationStructureMotionInstanceFlagsNV>, Unchecked.defaultof<VkAccelerationStructureMotionInstanceDataNV>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "_type = %A" x._type
                    sprintf "flags = %A" x.flags
                    sprintf "data = %A" x.data
                ] |> sprintf "VkAccelerationStructureMotionInstanceNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceRayTracingMotionBlurFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public rayTracingMotionBlur : VkBool32
            val mutable public rayTracingMotionBlurPipelineTraceRaysIndirect : VkBool32

            new(pNext : nativeint, rayTracingMotionBlur : VkBool32, rayTracingMotionBlurPipelineTraceRaysIndirect : VkBool32) =
                {
                    sType = 1000327001u
                    pNext = pNext
                    rayTracingMotionBlur = rayTracingMotionBlur
                    rayTracingMotionBlurPipelineTraceRaysIndirect = rayTracingMotionBlurPipelineTraceRaysIndirect
                }

            new(rayTracingMotionBlur : VkBool32, rayTracingMotionBlurPipelineTraceRaysIndirect : VkBool32) =
                VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(Unchecked.defaultof<nativeint>, rayTracingMotionBlur, rayTracingMotionBlurPipelineTraceRaysIndirect)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.rayTracingMotionBlur = Unchecked.defaultof<VkBool32> && x.rayTracingMotionBlurPipelineTraceRaysIndirect = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "rayTracingMotionBlur = %A" x.rayTracingMotionBlur
                    sprintf "rayTracingMotionBlurPipelineTraceRaysIndirect = %A" x.rayTracingMotionBlurPipelineTraceRaysIndirect
                ] |> sprintf "VkPhysicalDeviceRayTracingMotionBlurFeaturesNV { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkAccelerationStructureCreateFlagsKHR with
              static member inline MotionBitNv = unbox<VkAccelerationStructureCreateFlagsKHR> 0x00000004
         type VkBuildAccelerationStructureFlagsKHR with
              static member inline MotionBitNv = unbox<VkBuildAccelerationStructureFlagsKHR> 0x00000020
         type VkPipelineCreateFlags with
              static member inline RayTracingAllowMotionBitNv = unbox<VkPipelineCreateFlags> 0x00100000


module NVRepresentativeFragmentTest =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_representative_fragment_test"
    let Number = 167


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public representativeFragmentTest : VkBool32

            new(pNext : nativeint, representativeFragmentTest : VkBool32) =
                {
                    sType = 1000166000u
                    pNext = pNext
                    representativeFragmentTest = representativeFragmentTest
                }

            new(representativeFragmentTest : VkBool32) =
                VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(Unchecked.defaultof<nativeint>, representativeFragmentTest)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.representativeFragmentTest = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "representativeFragmentTest = %A" x.representativeFragmentTest
                ] |> sprintf "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineRepresentativeFragmentTestStateCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public representativeFragmentTestEnable : VkBool32

            new(pNext : nativeint, representativeFragmentTestEnable : VkBool32) =
                {
                    sType = 1000166001u
                    pNext = pNext
                    representativeFragmentTestEnable = representativeFragmentTestEnable
                }

            new(representativeFragmentTestEnable : VkBool32) =
                VkPipelineRepresentativeFragmentTestStateCreateInfoNV(Unchecked.defaultof<nativeint>, representativeFragmentTestEnable)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.representativeFragmentTestEnable = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPipelineRepresentativeFragmentTestStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "representativeFragmentTestEnable = %A" x.representativeFragmentTestEnable
                ] |> sprintf "VkPipelineRepresentativeFragmentTestStateCreateInfoNV { %s }"
        end



module NVSampleMaskOverrideCoverage =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_sample_mask_override_coverage"
    let Number = 95


module NVScissorExclusive =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_NV_scissor_exclusive"
    let Number = 206

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceExclusiveScissorFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public exclusiveScissor : VkBool32

            new(pNext : nativeint, exclusiveScissor : VkBool32) =
                {
                    sType = 1000205002u
                    pNext = pNext
                    exclusiveScissor = exclusiveScissor
                }

            new(exclusiveScissor : VkBool32) =
                VkPhysicalDeviceExclusiveScissorFeaturesNV(Unchecked.defaultof<nativeint>, exclusiveScissor)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.exclusiveScissor = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceExclusiveScissorFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "exclusiveScissor = %A" x.exclusiveScissor
                ] |> sprintf "VkPhysicalDeviceExclusiveScissorFeaturesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineViewportExclusiveScissorStateCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public exclusiveScissorCount : uint32
            val mutable public pExclusiveScissors : nativeptr<VkRect2D>

            new(pNext : nativeint, exclusiveScissorCount : uint32, pExclusiveScissors : nativeptr<VkRect2D>) =
                {
                    sType = 1000205000u
                    pNext = pNext
                    exclusiveScissorCount = exclusiveScissorCount
                    pExclusiveScissors = pExclusiveScissors
                }

            new(exclusiveScissorCount : uint32, pExclusiveScissors : nativeptr<VkRect2D>) =
                VkPipelineViewportExclusiveScissorStateCreateInfoNV(Unchecked.defaultof<nativeint>, exclusiveScissorCount, pExclusiveScissors)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.exclusiveScissorCount = Unchecked.defaultof<uint32> && x.pExclusiveScissors = Unchecked.defaultof<nativeptr<VkRect2D>>

            static member Empty =
                VkPipelineViewportExclusiveScissorStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkRect2D>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "exclusiveScissorCount = %A" x.exclusiveScissorCount
                    sprintf "pExclusiveScissors = %A" x.pExclusiveScissors
                ] |> sprintf "VkPipelineViewportExclusiveScissorStateCreateInfoNV { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkDynamicState with
              static member inline ExclusiveScissorNv = unbox<VkDynamicState> 1000205001

    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCmdSetExclusiveScissorNVDel = delegate of VkCommandBuffer * uint32 * uint32 * nativeptr<VkRect2D> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading NVScissorExclusive")
            static let s_vkCmdSetExclusiveScissorNVDel = VkRaw.vkImportInstanceDelegate<VkCmdSetExclusiveScissorNVDel> "vkCmdSetExclusiveScissorNV"
            static do Report.End(3) |> ignore
            static member vkCmdSetExclusiveScissorNV = s_vkCmdSetExclusiveScissorNVDel
        let vkCmdSetExclusiveScissorNV(commandBuffer : VkCommandBuffer, firstExclusiveScissor : uint32, exclusiveScissorCount : uint32, pExclusiveScissors : nativeptr<VkRect2D>) = Loader<unit>.vkCmdSetExclusiveScissorNV.Invoke(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors)

module NVShaderImageFootprint =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_NV_shader_image_footprint"
    let Number = 205

    let Required = [ KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderImageFootprintFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public imageFootprint : VkBool32

            new(pNext : nativeint, imageFootprint : VkBool32) =
                {
                    sType = 1000204000u
                    pNext = pNext
                    imageFootprint = imageFootprint
                }

            new(imageFootprint : VkBool32) =
                VkPhysicalDeviceShaderImageFootprintFeaturesNV(Unchecked.defaultof<nativeint>, imageFootprint)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.imageFootprint = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderImageFootprintFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "imageFootprint = %A" x.imageFootprint
                ] |> sprintf "VkPhysicalDeviceShaderImageFootprintFeaturesNV { %s }"
        end



module NVShaderSmBuiltins =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_shader_sm_builtins"
    let Number = 155


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderSMBuiltinsFeaturesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderSMBuiltins : VkBool32

            new(pNext : nativeint, shaderSMBuiltins : VkBool32) =
                {
                    sType = 1000154000u
                    pNext = pNext
                    shaderSMBuiltins = shaderSMBuiltins
                }

            new(shaderSMBuiltins : VkBool32) =
                VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(Unchecked.defaultof<nativeint>, shaderSMBuiltins)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderSMBuiltins = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderSMBuiltins = %A" x.shaderSMBuiltins
                ] |> sprintf "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceShaderSMBuiltinsPropertiesNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public shaderSMCount : uint32
            val mutable public shaderWarpsPerSM : uint32

            new(pNext : nativeint, shaderSMCount : uint32, shaderWarpsPerSM : uint32) =
                {
                    sType = 1000154001u
                    pNext = pNext
                    shaderSMCount = shaderSMCount
                    shaderWarpsPerSM = shaderWarpsPerSM
                }

            new(shaderSMCount : uint32, shaderWarpsPerSM : uint32) =
                VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(Unchecked.defaultof<nativeint>, shaderSMCount, shaderWarpsPerSM)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.shaderSMCount = Unchecked.defaultof<uint32> && x.shaderWarpsPerSM = Unchecked.defaultof<uint32>

            static member Empty =
                VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "shaderSMCount = %A" x.shaderSMCount
                    sprintf "shaderWarpsPerSM = %A" x.shaderWarpsPerSM
                ] |> sprintf "VkPhysicalDeviceShaderSMBuiltinsPropertiesNV { %s }"
        end



module NVShaderSubgroupPartitioned =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_shader_subgroup_partitioned"
    let Number = 199


    [<AutoOpen>]
    module EnumExtensions =
         type VkSubgroupFeatureFlags with
              static member inline PartitionedBitNv = unbox<VkSubgroupFeatureFlags> 0x00000100


module NVViewportArray2 =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_viewport_array2"
    let Number = 97


module NVViewportSwizzle =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_NV_viewport_swizzle"
    let Number = 99


    type VkViewportCoordinateSwizzleNV =
        | PositiveX = 0
        | NegativeX = 1
        | PositiveY = 2
        | NegativeY = 3
        | PositiveZ = 4
        | NegativeZ = 5
        | PositiveW = 6
        | NegativeW = 7


    [<StructLayout(LayoutKind.Sequential)>]
    type VkViewportSwizzleNV =
        struct
            val mutable public x : VkViewportCoordinateSwizzleNV
            val mutable public y : VkViewportCoordinateSwizzleNV
            val mutable public z : VkViewportCoordinateSwizzleNV
            val mutable public w : VkViewportCoordinateSwizzleNV

            new(x : VkViewportCoordinateSwizzleNV, y : VkViewportCoordinateSwizzleNV, z : VkViewportCoordinateSwizzleNV, w : VkViewportCoordinateSwizzleNV) =
                {
                    x = x
                    y = y
                    z = z
                    w = w
                }

            member x.IsEmpty =
                x.x = Unchecked.defaultof<VkViewportCoordinateSwizzleNV> && x.y = Unchecked.defaultof<VkViewportCoordinateSwizzleNV> && x.z = Unchecked.defaultof<VkViewportCoordinateSwizzleNV> && x.w = Unchecked.defaultof<VkViewportCoordinateSwizzleNV>

            static member Empty =
                VkViewportSwizzleNV(Unchecked.defaultof<VkViewportCoordinateSwizzleNV>, Unchecked.defaultof<VkViewportCoordinateSwizzleNV>, Unchecked.defaultof<VkViewportCoordinateSwizzleNV>, Unchecked.defaultof<VkViewportCoordinateSwizzleNV>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "x = %A" x.x
                    sprintf "y = %A" x.y
                    sprintf "z = %A" x.z
                    sprintf "w = %A" x.w
                ] |> sprintf "VkViewportSwizzleNV { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPipelineViewportSwizzleStateCreateInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkPipelineViewportSwizzleStateCreateFlagsNV
            val mutable public viewportCount : uint32
            val mutable public pViewportSwizzles : nativeptr<VkViewportSwizzleNV>

            new(pNext : nativeint, flags : VkPipelineViewportSwizzleStateCreateFlagsNV, viewportCount : uint32, pViewportSwizzles : nativeptr<VkViewportSwizzleNV>) =
                {
                    sType = 1000098000u
                    pNext = pNext
                    flags = flags
                    viewportCount = viewportCount
                    pViewportSwizzles = pViewportSwizzles
                }

            new(flags : VkPipelineViewportSwizzleStateCreateFlagsNV, viewportCount : uint32, pViewportSwizzles : nativeptr<VkViewportSwizzleNV>) =
                VkPipelineViewportSwizzleStateCreateInfoNV(Unchecked.defaultof<nativeint>, flags, viewportCount, pViewportSwizzles)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkPipelineViewportSwizzleStateCreateFlagsNV> && x.viewportCount = Unchecked.defaultof<uint32> && x.pViewportSwizzles = Unchecked.defaultof<nativeptr<VkViewportSwizzleNV>>

            static member Empty =
                VkPipelineViewportSwizzleStateCreateInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkPipelineViewportSwizzleStateCreateFlagsNV>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkViewportSwizzleNV>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "viewportCount = %A" x.viewportCount
                    sprintf "pViewportSwizzles = %A" x.pViewportSwizzles
                ] |> sprintf "VkPipelineViewportSwizzleStateCreateInfoNV { %s }"
        end



module NVWin32KeyedMutex =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open NVExternalMemory
    open NVExternalMemoryCapabilities
    open NVExternalMemoryWin32
    let Name = "VK_NV_win32_keyed_mutex"
    let Number = 59

    let Required = [ NVExternalMemoryWin32.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkWin32KeyedMutexAcquireReleaseInfoNV =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public acquireCount : uint32
            val mutable public pAcquireSyncs : nativeptr<VkDeviceMemory>
            val mutable public pAcquireKeys : nativeptr<uint64>
            val mutable public pAcquireTimeoutMilliseconds : nativeptr<uint32>
            val mutable public releaseCount : uint32
            val mutable public pReleaseSyncs : nativeptr<VkDeviceMemory>
            val mutable public pReleaseKeys : nativeptr<uint64>

            new(pNext : nativeint, acquireCount : uint32, pAcquireSyncs : nativeptr<VkDeviceMemory>, pAcquireKeys : nativeptr<uint64>, pAcquireTimeoutMilliseconds : nativeptr<uint32>, releaseCount : uint32, pReleaseSyncs : nativeptr<VkDeviceMemory>, pReleaseKeys : nativeptr<uint64>) =
                {
                    sType = 1000058000u
                    pNext = pNext
                    acquireCount = acquireCount
                    pAcquireSyncs = pAcquireSyncs
                    pAcquireKeys = pAcquireKeys
                    pAcquireTimeoutMilliseconds = pAcquireTimeoutMilliseconds
                    releaseCount = releaseCount
                    pReleaseSyncs = pReleaseSyncs
                    pReleaseKeys = pReleaseKeys
                }

            new(acquireCount : uint32, pAcquireSyncs : nativeptr<VkDeviceMemory>, pAcquireKeys : nativeptr<uint64>, pAcquireTimeoutMilliseconds : nativeptr<uint32>, releaseCount : uint32, pReleaseSyncs : nativeptr<VkDeviceMemory>, pReleaseKeys : nativeptr<uint64>) =
                VkWin32KeyedMutexAcquireReleaseInfoNV(Unchecked.defaultof<nativeint>, acquireCount, pAcquireSyncs, pAcquireKeys, pAcquireTimeoutMilliseconds, releaseCount, pReleaseSyncs, pReleaseKeys)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.acquireCount = Unchecked.defaultof<uint32> && x.pAcquireSyncs = Unchecked.defaultof<nativeptr<VkDeviceMemory>> && x.pAcquireKeys = Unchecked.defaultof<nativeptr<uint64>> && x.pAcquireTimeoutMilliseconds = Unchecked.defaultof<nativeptr<uint32>> && x.releaseCount = Unchecked.defaultof<uint32> && x.pReleaseSyncs = Unchecked.defaultof<nativeptr<VkDeviceMemory>> && x.pReleaseKeys = Unchecked.defaultof<nativeptr<uint64>>

            static member Empty =
                VkWin32KeyedMutexAcquireReleaseInfoNV(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDeviceMemory>>, Unchecked.defaultof<nativeptr<uint64>>, Unchecked.defaultof<nativeptr<uint32>>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDeviceMemory>>, Unchecked.defaultof<nativeptr<uint64>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "acquireCount = %A" x.acquireCount
                    sprintf "pAcquireSyncs = %A" x.pAcquireSyncs
                    sprintf "pAcquireKeys = %A" x.pAcquireKeys
                    sprintf "pAcquireTimeoutMilliseconds = %A" x.pAcquireTimeoutMilliseconds
                    sprintf "releaseCount = %A" x.releaseCount
                    sprintf "pReleaseSyncs = %A" x.pReleaseSyncs
                    sprintf "pReleaseKeys = %A" x.pReleaseKeys
                ] |> sprintf "VkWin32KeyedMutexAcquireReleaseInfoNV { %s }"
        end



module QCOMFragmentDensityMapOffset =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open EXTFragmentDensityMap
    open KHRGetPhysicalDeviceProperties2
    let Name = "VK_QCOM_fragment_density_map_offset"
    let Number = 426

    let Required = [ EXTFragmentDensityMap.Name; KHRGetPhysicalDeviceProperties2.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fragmentDensityMapOffset : VkBool32

            new(pNext : nativeint, fragmentDensityMapOffset : VkBool32) =
                {
                    sType = 1000425000u
                    pNext = pNext
                    fragmentDensityMapOffset = fragmentDensityMapOffset
                }

            new(fragmentDensityMapOffset : VkBool32) =
                VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(Unchecked.defaultof<nativeint>, fragmentDensityMapOffset)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fragmentDensityMapOffset = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fragmentDensityMapOffset = %A" x.fragmentDensityMapOffset
                ] |> sprintf "VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fragmentDensityOffsetGranularity : VkExtent2D

            new(pNext : nativeint, fragmentDensityOffsetGranularity : VkExtent2D) =
                {
                    sType = 1000425001u
                    pNext = pNext
                    fragmentDensityOffsetGranularity = fragmentDensityOffsetGranularity
                }

            new(fragmentDensityOffsetGranularity : VkExtent2D) =
                VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(Unchecked.defaultof<nativeint>, fragmentDensityOffsetGranularity)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fragmentDensityOffsetGranularity = Unchecked.defaultof<VkExtent2D>

            static member Empty =
                VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkExtent2D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fragmentDensityOffsetGranularity = %A" x.fragmentDensityOffsetGranularity
                ] |> sprintf "VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkSubpassFragmentDensityMapOffsetEndInfoQCOM =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public fragmentDensityOffsetCount : uint32
            val mutable public pFragmentDensityOffsets : nativeptr<VkOffset2D>

            new(pNext : nativeint, fragmentDensityOffsetCount : uint32, pFragmentDensityOffsets : nativeptr<VkOffset2D>) =
                {
                    sType = 1000425002u
                    pNext = pNext
                    fragmentDensityOffsetCount = fragmentDensityOffsetCount
                    pFragmentDensityOffsets = pFragmentDensityOffsets
                }

            new(fragmentDensityOffsetCount : uint32, pFragmentDensityOffsets : nativeptr<VkOffset2D>) =
                VkSubpassFragmentDensityMapOffsetEndInfoQCOM(Unchecked.defaultof<nativeint>, fragmentDensityOffsetCount, pFragmentDensityOffsets)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.fragmentDensityOffsetCount = Unchecked.defaultof<uint32> && x.pFragmentDensityOffsets = Unchecked.defaultof<nativeptr<VkOffset2D>>

            static member Empty =
                VkSubpassFragmentDensityMapOffsetEndInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkOffset2D>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "fragmentDensityOffsetCount = %A" x.fragmentDensityOffsetCount
                    sprintf "pFragmentDensityOffsets = %A" x.pFragmentDensityOffsets
                ] |> sprintf "VkSubpassFragmentDensityMapOffsetEndInfoQCOM { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkImageCreateFlags with
              static member inline FragmentDensityMapOffsetBitQcom = unbox<VkImageCreateFlags> 0x00008000


module QCOMRenderPassShaderResolve =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_QCOM_render_pass_shader_resolve"
    let Number = 172


    [<AutoOpen>]
    module EnumExtensions =
         type VkSubpassDescriptionFlags with
              static member inline FragmentRegionBitQcom = unbox<VkSubpassDescriptionFlags> 0x00000004
              static member inline ShaderResolveBitQcom = unbox<VkSubpassDescriptionFlags> 0x00000008


module QCOMRenderPassStoreOps =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_QCOM_render_pass_store_ops"
    let Number = 302


    [<AutoOpen>]
    module EnumExtensions =
         type VkAttachmentStoreOp with
              static member inline NoneQcom = unbox<VkAttachmentStoreOp> 1000301000


module QCOMRenderPassTransform =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_QCOM_render_pass_transform"
    let Number = 283

    let Required = [ KHRSurface.Name; KHRSwapchain.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkCommandBufferInheritanceRenderPassTransformInfoQCOM =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public transform : VkSurfaceTransformFlagsKHR
            val mutable public renderArea : VkRect2D

            new(pNext : nativeint, transform : VkSurfaceTransformFlagsKHR, renderArea : VkRect2D) =
                {
                    sType = 1000282000u
                    pNext = pNext
                    transform = transform
                    renderArea = renderArea
                }

            new(transform : VkSurfaceTransformFlagsKHR, renderArea : VkRect2D) =
                VkCommandBufferInheritanceRenderPassTransformInfoQCOM(Unchecked.defaultof<nativeint>, transform, renderArea)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.transform = Unchecked.defaultof<VkSurfaceTransformFlagsKHR> && x.renderArea = Unchecked.defaultof<VkRect2D>

            static member Empty =
                VkCommandBufferInheritanceRenderPassTransformInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSurfaceTransformFlagsKHR>, Unchecked.defaultof<VkRect2D>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "transform = %A" x.transform
                    sprintf "renderArea = %A" x.renderArea
                ] |> sprintf "VkCommandBufferInheritanceRenderPassTransformInfoQCOM { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkRenderPassTransformBeginInfoQCOM =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public transform : VkSurfaceTransformFlagsKHR

            new(pNext : nativeint, transform : VkSurfaceTransformFlagsKHR) =
                {
                    sType = 1000282001u
                    pNext = pNext
                    transform = transform
                }

            new(transform : VkSurfaceTransformFlagsKHR) =
                VkRenderPassTransformBeginInfoQCOM(Unchecked.defaultof<nativeint>, transform)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.transform = Unchecked.defaultof<VkSurfaceTransformFlagsKHR>

            static member Empty =
                VkRenderPassTransformBeginInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSurfaceTransformFlagsKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "transform = %A" x.transform
                ] |> sprintf "VkRenderPassTransformBeginInfoQCOM { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkRenderPassCreateFlags with
              static member inline TransformBitQcom = unbox<VkRenderPassCreateFlags> 0x00000002


module QCOMRotatedCopyCommands =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRCopyCommands2
    open KHRSurface
    open KHRSwapchain
    let Name = "VK_QCOM_rotated_copy_commands"
    let Number = 334

    let Required = [ KHRCopyCommands2.Name; KHRSwapchain.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkCopyCommandTransformInfoQCOM =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public transform : VkSurfaceTransformFlagsKHR

            new(pNext : nativeint, transform : VkSurfaceTransformFlagsKHR) =
                {
                    sType = 1000333000u
                    pNext = pNext
                    transform = transform
                }

            new(transform : VkSurfaceTransformFlagsKHR) =
                VkCopyCommandTransformInfoQCOM(Unchecked.defaultof<nativeint>, transform)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.transform = Unchecked.defaultof<VkSurfaceTransformFlagsKHR>

            static member Empty =
                VkCopyCommandTransformInfoQCOM(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkSurfaceTransformFlagsKHR>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "transform = %A" x.transform
                ] |> sprintf "VkCopyCommandTransformInfoQCOM { %s }"
        end



module QNXScreenSurface =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRSurface
    let Name = "VK_QNX_screen_surface"
    let Number = 379

    let Required = [ KHRSurface.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkScreenSurfaceCreateInfoQNX =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public flags : VkScreenSurfaceCreateFlagsQNX
            val mutable public context : nativeptr<nativeint>
            val mutable public window : nativeptr<nativeint>

            new(pNext : nativeint, flags : VkScreenSurfaceCreateFlagsQNX, context : nativeptr<nativeint>, window : nativeptr<nativeint>) =
                {
                    sType = 1000378000u
                    pNext = pNext
                    flags = flags
                    context = context
                    window = window
                }

            new(flags : VkScreenSurfaceCreateFlagsQNX, context : nativeptr<nativeint>, window : nativeptr<nativeint>) =
                VkScreenSurfaceCreateInfoQNX(Unchecked.defaultof<nativeint>, flags, context, window)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.flags = Unchecked.defaultof<VkScreenSurfaceCreateFlagsQNX> && x.context = Unchecked.defaultof<nativeptr<nativeint>> && x.window = Unchecked.defaultof<nativeptr<nativeint>>

            static member Empty =
                VkScreenSurfaceCreateInfoQNX(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkScreenSurfaceCreateFlagsQNX>, Unchecked.defaultof<nativeptr<nativeint>>, Unchecked.defaultof<nativeptr<nativeint>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "flags = %A" x.flags
                    sprintf "context = %A" x.context
                    sprintf "window = %A" x.window
                ] |> sprintf "VkScreenSurfaceCreateInfoQNX { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkCreateScreenSurfaceQNXDel = delegate of VkInstance * nativeptr<VkScreenSurfaceCreateInfoQNX> * nativeptr<VkAllocationCallbacks> * nativeptr<VkSurfaceKHR> -> VkResult
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetPhysicalDeviceScreenPresentationSupportQNXDel = delegate of VkPhysicalDevice * uint32 * nativeptr<nativeint> -> VkBool32

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading QNXScreenSurface")
            static let s_vkCreateScreenSurfaceQNXDel = VkRaw.vkImportInstanceDelegate<VkCreateScreenSurfaceQNXDel> "vkCreateScreenSurfaceQNX"
            static let s_vkGetPhysicalDeviceScreenPresentationSupportQNXDel = VkRaw.vkImportInstanceDelegate<VkGetPhysicalDeviceScreenPresentationSupportQNXDel> "vkGetPhysicalDeviceScreenPresentationSupportQNX"
            static do Report.End(3) |> ignore
            static member vkCreateScreenSurfaceQNX = s_vkCreateScreenSurfaceQNXDel
            static member vkGetPhysicalDeviceScreenPresentationSupportQNX = s_vkGetPhysicalDeviceScreenPresentationSupportQNXDel
        let vkCreateScreenSurfaceQNX(instance : VkInstance, pCreateInfo : nativeptr<VkScreenSurfaceCreateInfoQNX>, pAllocator : nativeptr<VkAllocationCallbacks>, pSurface : nativeptr<VkSurfaceKHR>) = Loader<unit>.vkCreateScreenSurfaceQNX.Invoke(instance, pCreateInfo, pAllocator, pSurface)
        let vkGetPhysicalDeviceScreenPresentationSupportQNX(physicalDevice : VkPhysicalDevice, queueFamilyIndex : uint32, window : nativeptr<nativeint>) = Loader<unit>.vkGetPhysicalDeviceScreenPresentationSupportQNX.Invoke(physicalDevice, queueFamilyIndex, window)

module VALVEDescriptorSetHostMapping =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    let Name = "VK_VALVE_descriptor_set_host_mapping"
    let Number = 421


    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorSetBindingReferenceVALVE =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public descriptorSetLayout : VkDescriptorSetLayout
            val mutable public binding : uint32

            new(pNext : nativeint, descriptorSetLayout : VkDescriptorSetLayout, binding : uint32) =
                {
                    sType = 1000420001u
                    pNext = pNext
                    descriptorSetLayout = descriptorSetLayout
                    binding = binding
                }

            new(descriptorSetLayout : VkDescriptorSetLayout, binding : uint32) =
                VkDescriptorSetBindingReferenceVALVE(Unchecked.defaultof<nativeint>, descriptorSetLayout, binding)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.descriptorSetLayout = Unchecked.defaultof<VkDescriptorSetLayout> && x.binding = Unchecked.defaultof<uint32>

            static member Empty =
                VkDescriptorSetBindingReferenceVALVE(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkDescriptorSetLayout>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "descriptorSetLayout = %A" x.descriptorSetLayout
                    sprintf "binding = %A" x.binding
                ] |> sprintf "VkDescriptorSetBindingReferenceVALVE { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkDescriptorSetLayoutHostMappingInfoVALVE =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public descriptorOffset : uint64
            val mutable public descriptorSize : uint32

            new(pNext : nativeint, descriptorOffset : uint64, descriptorSize : uint32) =
                {
                    sType = 1000420002u
                    pNext = pNext
                    descriptorOffset = descriptorOffset
                    descriptorSize = descriptorSize
                }

            new(descriptorOffset : uint64, descriptorSize : uint32) =
                VkDescriptorSetLayoutHostMappingInfoVALVE(Unchecked.defaultof<nativeint>, descriptorOffset, descriptorSize)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.descriptorOffset = Unchecked.defaultof<uint64> && x.descriptorSize = Unchecked.defaultof<uint32>

            static member Empty =
                VkDescriptorSetLayoutHostMappingInfoVALVE(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint64>, Unchecked.defaultof<uint32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "descriptorOffset = %A" x.descriptorOffset
                    sprintf "descriptorSize = %A" x.descriptorSize
                ] |> sprintf "VkDescriptorSetLayoutHostMappingInfoVALVE { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public descriptorSetHostMapping : VkBool32

            new(pNext : nativeint, descriptorSetHostMapping : VkBool32) =
                {
                    sType = 1000420000u
                    pNext = pNext
                    descriptorSetHostMapping = descriptorSetHostMapping
                }

            new(descriptorSetHostMapping : VkBool32) =
                VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(Unchecked.defaultof<nativeint>, descriptorSetHostMapping)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.descriptorSetHostMapping = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "descriptorSetHostMapping = %A" x.descriptorSetHostMapping
                ] |> sprintf "VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE { %s }"
        end


    module VkRaw =
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDescriptorSetLayoutHostMappingInfoVALVEDel = delegate of VkDevice * nativeptr<VkDescriptorSetBindingReferenceVALVE> * nativeptr<VkDescriptorSetLayoutHostMappingInfoVALVE> -> unit
        [<SuppressUnmanagedCodeSecurity>]
        type VkGetDescriptorSetHostMappingVALVEDel = delegate of VkDevice * VkDescriptorSet * nativeptr<nativeint> -> unit

        [<AbstractClass; Sealed>]
        type private Loader<'d> private() =
            static do Report.Begin(3, "[Vulkan] loading VALVEDescriptorSetHostMapping")
            static let s_vkGetDescriptorSetLayoutHostMappingInfoVALVEDel = VkRaw.vkImportInstanceDelegate<VkGetDescriptorSetLayoutHostMappingInfoVALVEDel> "vkGetDescriptorSetLayoutHostMappingInfoVALVE"
            static let s_vkGetDescriptorSetHostMappingVALVEDel = VkRaw.vkImportInstanceDelegate<VkGetDescriptorSetHostMappingVALVEDel> "vkGetDescriptorSetHostMappingVALVE"
            static do Report.End(3) |> ignore
            static member vkGetDescriptorSetLayoutHostMappingInfoVALVE = s_vkGetDescriptorSetLayoutHostMappingInfoVALVEDel
            static member vkGetDescriptorSetHostMappingVALVE = s_vkGetDescriptorSetHostMappingVALVEDel
        let vkGetDescriptorSetLayoutHostMappingInfoVALVE(device : VkDevice, pBindingReference : nativeptr<VkDescriptorSetBindingReferenceVALVE>, pHostMapping : nativeptr<VkDescriptorSetLayoutHostMappingInfoVALVE>) = Loader<unit>.vkGetDescriptorSetLayoutHostMappingInfoVALVE.Invoke(device, pBindingReference, pHostMapping)
        let vkGetDescriptorSetHostMappingVALVE(device : VkDevice, descriptorSet : VkDescriptorSet, ppData : nativeptr<nativeint>) = Loader<unit>.vkGetDescriptorSetHostMappingVALVE.Invoke(device, descriptorSet, ppData)

module VALVEMutableDescriptorType =
    open Vulkan11
    open Vulkan12
    open Vulkan13
    open KHRGetPhysicalDeviceProperties2
    open KHRMaintenance3
    let Name = "VK_VALVE_mutable_descriptor_type"
    let Number = 352

    let Required = [ KHRMaintenance3.Name ]


    [<StructLayout(LayoutKind.Sequential)>]
    type VkMutableDescriptorTypeListVALVE =
        struct
            val mutable public descriptorTypeCount : uint32
            val mutable public pDescriptorTypes : nativeptr<VkDescriptorType>

            new(descriptorTypeCount : uint32, pDescriptorTypes : nativeptr<VkDescriptorType>) =
                {
                    descriptorTypeCount = descriptorTypeCount
                    pDescriptorTypes = pDescriptorTypes
                }

            member x.IsEmpty =
                x.descriptorTypeCount = Unchecked.defaultof<uint32> && x.pDescriptorTypes = Unchecked.defaultof<nativeptr<VkDescriptorType>>

            static member Empty =
                VkMutableDescriptorTypeListVALVE(Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkDescriptorType>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "descriptorTypeCount = %A" x.descriptorTypeCount
                    sprintf "pDescriptorTypes = %A" x.pDescriptorTypes
                ] |> sprintf "VkMutableDescriptorTypeListVALVE { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkMutableDescriptorTypeCreateInfoVALVE =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public mutableDescriptorTypeListCount : uint32
            val mutable public pMutableDescriptorTypeLists : nativeptr<VkMutableDescriptorTypeListVALVE>

            new(pNext : nativeint, mutableDescriptorTypeListCount : uint32, pMutableDescriptorTypeLists : nativeptr<VkMutableDescriptorTypeListVALVE>) =
                {
                    sType = 1000351002u
                    pNext = pNext
                    mutableDescriptorTypeListCount = mutableDescriptorTypeListCount
                    pMutableDescriptorTypeLists = pMutableDescriptorTypeLists
                }

            new(mutableDescriptorTypeListCount : uint32, pMutableDescriptorTypeLists : nativeptr<VkMutableDescriptorTypeListVALVE>) =
                VkMutableDescriptorTypeCreateInfoVALVE(Unchecked.defaultof<nativeint>, mutableDescriptorTypeListCount, pMutableDescriptorTypeLists)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.mutableDescriptorTypeListCount = Unchecked.defaultof<uint32> && x.pMutableDescriptorTypeLists = Unchecked.defaultof<nativeptr<VkMutableDescriptorTypeListVALVE>>

            static member Empty =
                VkMutableDescriptorTypeCreateInfoVALVE(Unchecked.defaultof<nativeint>, Unchecked.defaultof<uint32>, Unchecked.defaultof<nativeptr<VkMutableDescriptorTypeListVALVE>>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "mutableDescriptorTypeListCount = %A" x.mutableDescriptorTypeListCount
                    sprintf "pMutableDescriptorTypeLists = %A" x.pMutableDescriptorTypeLists
                ] |> sprintf "VkMutableDescriptorTypeCreateInfoVALVE { %s }"
        end

    [<StructLayout(LayoutKind.Sequential)>]
    type VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE =
        struct
            val mutable public sType : uint32
            val mutable public pNext : nativeint
            val mutable public mutableDescriptorType : VkBool32

            new(pNext : nativeint, mutableDescriptorType : VkBool32) =
                {
                    sType = 1000351000u
                    pNext = pNext
                    mutableDescriptorType = mutableDescriptorType
                }

            new(mutableDescriptorType : VkBool32) =
                VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(Unchecked.defaultof<nativeint>, mutableDescriptorType)

            member x.IsEmpty =
                x.pNext = Unchecked.defaultof<nativeint> && x.mutableDescriptorType = Unchecked.defaultof<VkBool32>

            static member Empty =
                VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(Unchecked.defaultof<nativeint>, Unchecked.defaultof<VkBool32>)

            override x.ToString() =
                String.concat "; " [
                    sprintf "sType = %A" x.sType
                    sprintf "pNext = %A" x.pNext
                    sprintf "mutableDescriptorType = %A" x.mutableDescriptorType
                ] |> sprintf "VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE { %s }"
        end


    [<AutoOpen>]
    module EnumExtensions =
         type VkDescriptorPoolCreateFlags with
              static member inline HostOnlyBitValve = unbox<VkDescriptorPoolCreateFlags> 0x00000004
         type VkDescriptorSetLayoutCreateFlags with
              static member inline HostOnlyPoolBitValve = unbox<VkDescriptorSetLayoutCreateFlags> 0x00000004
         type VkDescriptorType with
              static member inline MutableValve = unbox<VkDescriptorType> 1000351000


